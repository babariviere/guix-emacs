;;; guix-emacs --- Guix Emacs channel.
;;;
;;; Copyright © 2014 Taylan Ulrich Bayirli/Kammer <taylanbayirli@gmail.com>
;;; Copyright © 2013-2022 Ludovic Courtès <ludo@gnu.org>
;;; Copyright © 2014, 2015, 2016, 2017, 2018 Mark H Weaver <mhw@netris.org>
;;; Copyright © 2014, 2015, 2016, 2017, 2018, 2019 Alex Kost <alezost@gmail.com>
;;; Copyright © 2015 Federico Beffa <beffa@fbengineering.ch>
;;; Copyright © 2015, 2016, 2017, 2018, 2019, 2020, 2021 Ricardo Wurmus <rekado@elephly.net>
;;; Copyright © 2016, 2017, 2018, 2019 Chris Marusich <cmmarusich@gmail.com>
;;; Copyright © 2015, 2016, 2018, 2020 Christine Lemmer-Webber <cwebber@dustycloud.org>
;;; Copyright © 2016 Adriano Peluso <catonano@gmail.com>
;;; Copyright © 2016, 2017, 2018, 2019, 2020, 2021 Efraim Flashner <efraim@flashner.co.il>
;;; Copyright © 2016 David Thompson <davet@gnu.org>
;;; Copyright © 2016 Matthew Jordan <matthewjordandevops@yandex.com>
;;; Copyright © 2016, 2017 Roel Janssen <roel@gnu.org>
;;; Copyright © 2016, 2017 Nikita <nikita@n0.is>
;;; Copyright © 2016, 2019 Alex Griffin <a@ajgrf.com>
;;; Copyright © 2016-2022 Nicolas Goaziou <mail@nicolasgoaziou.fr>
;;; Copyright © 2016, 2017, 2018 Alex Vong <alexvong1995@gmail.com>
;;; Copyright © 2016, 2017, 2018, 2019, 2020, 2021 Arun Isaac <arunisaac@systemreboot.net>
;;; Copyright © 2017 Christopher Baines <mail@cbaines.net>
;;; Copyright © 2017, 2018, 2019, 2020, 2022 Mathieu Othacehe <m.othacehe@gmail.com>
;;; Copyright © 2017, 2018, 2019, 2020, 2021, 2022 Clément Lassieur <clement@lassieur.org>
;;; Copyright © 2017 Vasile Dumitrascu <va511e@yahoo.com>
;;; Copyright © 2017, 2018, 2022 Kyle Meyer <kyle@kyleam.com>
;;; Copyright © 2017 Kei Kebreau <kkebreau@posteo.net>
;;; Copyright © 2017 George Clemmer <myglc2@gmail.com>
;;; Copyright © 2017, 2018 Feng Shu <tumashu@163.com>
;;; Copyright © 2017, 2020 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;; Copyright © 2017, 2018, 2019, 2020 Oleg Pykhalov <go.wigust@gmail.com>
;;; Copyright © 2017 Mekeor Melire <mekeor.melire@gmail.com>
;;; Copyright © 2017 Peter Mikkelsen <petermikkelsen10@gmail.com>
;;; Copyright © 2017–2021 Tobias Geerinckx-Rice <me@tobias.gr>
;;; Copyright © 2017 Mike Gerwitz <mtg@gnu.org>
;;; Copyright © 2017, 2018, 2019, 2020, 2021, 2022 Maxim Cournoyer <maxim.cournoyer@gmail.com>
;;; Copyright © 2018 Sohom Bhattacharjee <soham.bhattacharjee15@gmail.com>
;;; Copyright © 2018, 2019 Mathieu Lirzin <mthl@gnu.org>
;;; Copyright © 2018, 2019, 2020, 2021 Pierre Neidhardt <mail@ambrevar.xyz>
;;; Copyright © 2018, 2019, 2020 Tim Gesthuizen <tim.gesthuizen@yahoo.de>
;;; Copyright © 2018, 2019 Jack Hill <jackhill@jackhill.us>
;;; Copyright © 2018 Pierre-Antoine Rouby <pierre-antoine.rouby@inria.fr>
;;; Copyright © 2018 Alex Branham <alex.branham@gmail.com>
;;; Copyright © 2018 Thorsten Wilms <t_w_@freenet.de>
;;; Copyright © 2018, 2019, 2020, 2021 Pierre Langlois <pierre.langlois@gmx.com>
;;; Copyright © 2018, 2019, 2020, 2021 Brett Gilio <brettg@gnu.org>
;;; Copyright © 2019, 2020 Dimakakos Dimos <bendersteed@teknik.io>
;;; Copyright © 2019, 2020 Brian Leung <bkleung89@gmail.com>
;;; Copyright © 2019 mikadoZero <mikadozero@yandex.com>
;;; Copyright © 2019 Gabriel Hondet <gabrielhondet@gmail.com>
;;; Copyright © 2019, 2020, 2021 Joseph LaFreniere <joseph@lafreniere.xyz>
;;; Copyright © 2019 Todor Kondić <tk.code@protonmail.com>15669
;;; Copyright © 2019 Amar Singh <nly@disroot.org>
;;; Copyright © 2019 Baptiste Strazzulla <bstrazzull@hotmail.fr>
;;; Copyright © 2019 Giacomo Leidi <goodoldpaul@autistici.org>
;;; Copyright © 2019 Jens Mølgaard <jens@zete.tk>
;;; Copyright © 2019, 2020 Amin Bandali <bandali@gnu.org>
;;; Copyright © 2019 Jelle Licht <jlicht@fsfe.org>
;;; Copyright © 2019 Björn Höfling <bjoern.hoefling@bjoernhoefling.de>
;;; Copyright © 2019 Stephen Webber <montokapro@gmail.com>
;;; Copyright © 2019, 2021 Liliana Marie Prikler <liliana.prikler@gmail.com>
;;; Copyright © 2019 David Wilson <david@daviwil.com>
;;; Copyright © 2020 Paul Garlick <pgarlick@tourbillion-technology.com>
;;; Copyright © 2020 Robert Smith <robertsmith@posteo.net>
;;; Copyright © 2020 Evan Straw <evan.straw99@gmail.com>
;;; Copyright © 2020, 2021 Masaya Tojo <masaya@tojo.tokyo>
;;; Copyright © 2020, 2021 Martin Becze <mjbecze@riseup.net>
;;; Copyright © 2020, 2021, 2022 Michael Rohleder <mike@rohleder.de>
;;; Copyright © 2020 Brice Waegeneire <brice@waegenei.re>
;;; Copyright © 2020 6033fe7de85d <6033fe7de85d@airmail.cc>
;;; Copyright © 2020 John Soo <jsoo1@asu.edu>
;;; Copyright © 2020 Jérémy Korwin-Zmijowski <jeremy@korwin-zmijowski.fr>
;;; Copyright © 2020 Alberto Eleuterio Flores Guerrero <barbanegra+guix@posteo.mx>
;;; Copyright © 2020 Marius Bakke <mbakke@fastmail.com>
;;; Copyright © 2020 pinoaffe <pinoaffe@airmail.cc>
;;; Copyright © 2020, 2021, 2022 Vinicius Monego <monego@posteo.net>
;;; Copyright © 2020 Ryan Desfosses <rdes@protonmail.com>
;;; Copyright © 2020 Marcin Karpezo <sirmacik@wioo.waw.pl>
;;; Copyright © 2020, 2022 Fredrik Salomonsson <plattfot@posteo.net>
;;; Copyright © 2020 Eric Bavier <bavier@posteo.net>
;;; Copyright © 2020, 2021 Morgan Smith <Morgan.J.Smith@outlook.com>
;;; Copyright © 2020 Peng Mei Yu <i@pengmeiyu.com>
;;; Copyright © 2020, 2021, 2022 Niklas Eklund <niklas.eklund@posteo.net>
;;; Copyright © 2020 Marco Grassi <marco.au.grassi98@protonmail.com>
;;; Copyright © 2020 Tomás Ortín Fernández <tomasortin@mailbox.org>
;;; Copyright © 2020, 2021 Zhu Zihao <all_but_last@163.com>
;;; Copyright © 2020 Adam Kandur <rndd@tuta.io>
;;; Copyright © 2020 Tim Howes <timhowes@lavabit.com>
;;; Copyright © 2020 Noah Landis <noahlandis@posteo.net>
;;; Copyright © 2020, 2021 Nicolò Balzarotti <nicolo@nixo.xyz>
;;; Copyright © 2020, 2022 André A. Gomes <andremegafone@gmail.com>
;;; Copyright © 2020 Jonathan Rostran <rostranjj@gmail.com>
;;; Copyright © 2020, 2021 Noah Evans <noah@nevans.me>
;;; Copyright © 2020 Brit Butler <brit@kingcons.io>
;;; Copyright © 2021, 2022 Aleksandr Vityazev <avityazev@posteo.org>
;;; Copyright © 2021 Yurii Kholodkov <urist.mckorobochka@gmail.com>
;;; Copyright © 2021 Alexey Abramov <levenson@mmer.org>
;;; Copyright © 2021 Xinglu Chen <public@yoctocell.xyz>
;;; Copyright © 2021, 2022 Stefan Reichör <stefan@xsteve.at>
;;; Copyright © 2021 Simon Tournier <zimon.toutoune@gmail.com>
;;; Copyright © 2021 Eugene Klimov <lipklim@mailbox.org>
;;; Copyright © 2021 Zheng Junjie <873216071@qq.com>
;;; Copyright © 2021 David Dashyan <mail@davie.li>
;;; Copyright © 2021 Dhruvin Gandhi <contact@dhruvin.dev>
;;; Copyright © 2021 Matthew James Kraai <kraai@ftbfs.org>
;;; Copyright © 2021 Noisytoot <noisytoot@disroot.org>
;;; Copyright © 2021 Simon South <simon@simonsouth.net>
;;; Copyright © 2021 la snesne <lasnesne@lagunposprasihopre.org>
;;; Copyright © 2021 Brian Kubisiak <brian@kubisiak.com>
;;; Copyright © 2021, 2022 Taiju HIGASHI <higashi@taiju.info>
;;; Copyright © 2022 Brandon Lucas <br@ndon.dk>
;;; Copyright © 2022 Jai Vetrivelan <jaivetrivelan@gmail.com>
;;; Copyright © 2022 jgart <jgart@dismail.de>
;;; Copyright © 2022 Dominic Martinez <dom@dominicm.dev>
;;; Copyright © 2022 Peter Polidoro <peter@polidoro.io>
;;; Copyright © 2022 Luis Felipe López Acevedo <luis.felipe.la@protonmail.com>
;;; Copyright © 2022 Thomas Albers Raviola <thomas@thomaslabs.org>
;;; Copyright © 2022 Haider Mirza <haider@haider.gq>
;;; Copyright © 2022 by Bastien Riviere <me@babariviere.com>
;;;
;;; This file is part of guix-emacs.
;;;
;;; guix-emacs is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; guix-emacs is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with guix-emacs.  If not, see <http://www.gnu.org/licenses/>.

;;; DO NOT MODIFY. THIS FILE IS GENERATED.
(define-module
  (emacs packages melpa)
  #:use-module
  (emacs build-system melpa)
  #:use-module
  (emacs packages elpa)
  #:use-module
  (guix download)
  #:use-module
  (guix git-download)
  #:use-module
  (guix packages)
  #:use-module
  (gnu packages emacs-xyz)
  #:export
  (packages))

(module-use-interfaces!
  (current-module)
  (module-uses
    (resolve-module '(gnu packages emacs-xyz))))

(define-public emacs-0blayout
  (package
    (name "emacs-0blayout")
    (version "20190703.527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/etu/0blayout-mode.git")
               (commit
                 "fd9a8f353dbd45b4628b5f84b8d8c2525ebf571d")))
        (sha256
          (base32
            "18jkq140s2hwgdxs5s13hprjmq2qnxnqhrmdiyrhvl176r3wbh37"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/etu/0blayout")
    (synopsis "Layout grouping with ease")
    (description
      "Documentation at https://melpa.org/#/0blayout")
    (license #f)))

(define-public emacs-0x0
  (package
    (name "emacs-0x0")
    (version "20230823.2214")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/0x0-"
               version
               ".tar"))
        (sha256
          (base32
            "1mjm5x5gidncbqrl4higlyj8xhcg1z6nv7bsw9ldk4dazl202xpx"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~willvaughn/emacs-0x0")
    (synopsis "Upload sharing to 0x0.st")
    (description
      "Documentation at https://melpa.org/#/0x0")
    (license #f)))

(define-public emacs-0xc
  (package
    (name "emacs-0xc")
    (version "20201025.2105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/0xc.git")
               (commit
                 "eec4fb10b9288c0852f751cfb05d638664fa2411")))
        (sha256
          (base32
            "1s3jpnjb033siyi9jkychbbqxnh31k7h9prfx7hvs5zlddp15cqv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "http://github.com/AdamNiederer/0xc")
    (synopsis "Base conversion made easy")
    (description
      "Documentation at https://melpa.org/#/0xc")
    (license #f)))

(define-public emacs-2048-game
  (package
    (name "emacs-2048-game")
    (version "20230809.356")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/2048-game-"
               version
               ".tar"))
        (sha256
          (base32
            "0h215z6m629rf980w23mkk1fa511flxc4i2sha3fzq4468bxq5fs"))))
    (build-system melpa-build-system)
    (home-page "https://hg.sr.ht/~zck/game-2048")
    (synopsis "play 2048 in Emacs")
    (description
      "Documentation at https://melpa.org/#/2048-game")
    (license #f)))

(define-public emacs-2bit
  (package
    (name "emacs-2bit")
    (version "20200926.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/2bit.el.git")
               (commit
                 "69b4ec1d6d2ad95c9e59dacb43224abbec7a8989")))
        (sha256
          (base32
            "086hxacbm2jjqak3b1dpnjhif2r3w3jvrrsg114224a26rwz49sm"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/2bit.el")
    (synopsis
      "Library for reading data from 2bit files")
    (description
      "Documentation at https://melpa.org/#/2bit")
    (license #f)))

(define-public emacs-4clojure
  (package
    (name "emacs-4clojure")
    (version "20210102.459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/4clojure.git")
               (commit
                 "6f494d3905284ccdd57aae3d8ac16fc7ab431596")))
        (sha256
          (base32
            "19mbfh504mli8mnf95xaych45nqnayrspymf5r80dky4jv43zzv8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/abend/4clojure.el")
    (synopsis
      "Open and evaluate 4clojure.com questions.")
    (description
      "Documentation at https://melpa.org/#/4clojure")
    (license #f)))

(define-public emacs-750words
  (package
    (name "emacs-750words")
    (version "20220625.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzamboni/750words-client.git")
               (commit
                 "8abef82d644223c7991beb689072889c72d1faee")))
        (sha256
          (base32
            "1vbh0gynm4z5rhrzcava5dh1m6hh683fz18b7rjjib31l7fx96s0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("750words.el")))
    (home-page
      "https://github.com/zzamboni/750words-client")
    (synopsis
      "Emacs integration and Org exporter for 750words.com")
    (description
      "Documentation at https://melpa.org/#/750words")
    (license #f)))

(define-public emacs-a
  (package
    (name "emacs-a")
    (version "20210929.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plexus/a.el.git")
               (commit
                 "9ad2d18252b729174fe22ed0b2b7670c88f60c31")))
        (sha256
          (base32
            "0zkv4xvw1jdsfxqqkxskl2l380gfs13n86hj4hhzrqf0sb6aymws"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/plexus/a.el")
    (synopsis "Associative data structure functions")
    (description
      "Documentation at https://melpa.org/#/a")
    (license #f)))

(define-public emacs-aa-edit-mode
  (package
    (name "emacs-aa-edit-mode")
    (version "20170119.320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/aa-edit-mode.git")
               (commit
                 "1dd801225b7ad3c23ad09698f5e77f0df7012a65")))
        (sha256
          (base32
            "17kxpyfprdyj96c4ivv8bxwyls69cgh2r3gwrgj6bwinbiszh9rr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-navi2ch))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing AA(S_JIS Art) and .mlt file")
    (description
      "Documentation at https://melpa.org/#/aa-edit-mode")
    (license #f)))

(define-public emacs-aangit
  (package
    (name "emacs-aangit")
    (version "20231106.2115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stephenwithav/aangit.git")
               (commit
                 "7527a366c542cb7b09672597876e83f429ca6b46")))
        (sha256
          (base32
            "0yszwzp2fa4v76l78qrnbn1zwfjzlwb9sihfl5xz9xiixvcv3b1r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/stephenwithav/aangit")
    (synopsis
      "Quickly scaffold new Angular apps with Aangit")
    (description
      "Documentation at https://melpa.org/#/aangit")
    (license #f)))

(define-public emacs-aas
  (package
    (name "emacs-aas")
    (version "20230303.2214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ymarco/auto-activating-snippets.git")
               (commit
                 "ddc2b7a58a2234477006af348b30e970f73bc2c1")))
        (sha256
          (base32
            "03rqj11xdkspxcx2zjd71fnk7lpcjr0lws0i729qhsi1nr98jjn4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ymarco/auto-activating-snippets")
    (synopsis "Snippet expansions mid-typing")
    (description
      "Documentation at https://melpa.org/#/aas")
    (license #f)))

(define-public emacs-abc-mode
  (package
    (name "emacs-abc-mode")
    (version "20220713.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkjunker/abc-mode.git")
               (commit
                 "45193b67508861cf77da7e76b71711855c002caa")))
        (sha256
          (base32
            "10i8wkzwngflfzbwmqv5gv6jzh5v5j7yh1364xdygg4xpnf7qdnv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing abc music files")
    (description
      "Documentation at https://melpa.org/#/abc-mode")
    (license #f)))

(define-public emacs-abgaben
  (package
    (name "emacs-abgaben")
    (version "20171119.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/akoehn/abgaben.git")
               (commit
                 "20d14830f07d66e2a04bcad1498a4a6fbf4b4451")))
        (sha256
          (base32
            "0apcbfaa70kgrpjjsfbr0lg9lcfiijpx5bms4sbzc606vlnxxn0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-f emacs-s))
    (home-page "http://arne.chark.eu/")
    (synopsis
      "review and correct assignments received by mail")
    (description
      "Documentation at https://melpa.org/#/abgaben")
    (license #f)))

(define-public emacs-abl-mode
  (package
    (name "emacs-abl-mode")
    (version "20210923.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/afroisalreadyinu/abl-mode.git")
               (commit
                 "fc0eeb780d22aa1aac337f06cc9b479c51600243")))
        (sha256
          (base32
            "1vv3p6fkp352chrjm7jwc3frifzfral1jyrkx4m8pfq0cyj2g197"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/afroisalreadyinu/abl-mode")
    (synopsis "Python TDD minor mode")
    (description
      "Documentation at https://melpa.org/#/abl-mode")
    (license #f)))

(define-public emacs-abridge-diff
  (package
    (name "emacs-abridge-diff")
    (version "20230307.2159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/abridge-diff.git")
               (commit
                 "31e0ccaa9d0bd4ad257f5de25cc3c0b3395fafa1")))
        (sha256
          (base32
            "0w7y4l6fl2xcq12ii3xyjv5iixvw51zpx900wb7s5rkl8s5zdpg5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdtsmith/abridge-diff")
    (synopsis
      "Abridge long line-based diff hunks, including in magit")
    (description
      "Documentation at https://melpa.org/#/abridge-diff")
    (license #f)))

(define-public emacs-abs-mode
  (package
    (name "emacs-abs-mode")
    (version "20230705.1437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abstools/abs-mode.git")
               (commit
                 "bf21971bf57100e9e1ac26563207b35b377ec057")))
        (sha256
          (base32
            "070xa0hylkxy2j8g5jhdv3q003aqvasp7ald6f98skg6a0hsrvc7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-erlang
            emacs-maude-mode
            emacs-yasnippet))
    (arguments '(#:files ("abs-mode.el" "snippets")))
    (home-page
      "https://github.com/abstools/abs-mode")
    (synopsis
      "Major mode for the modeling language Abs")
    (description
      "Documentation at https://melpa.org/#/abs-mode")
    (license #f)))

(define-public emacs-abyss-theme
  (package
    (name "emacs-abyss-theme")
    (version "20170808.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgrbyte/emacs-abyss-theme.git")
               (commit
                 "18791c6e8d9cc2b4815c9f08627a2e94fc0eeb14")))
        (sha256
          (base32
            "07z0djv7h3yrv4iw9n633j6dxzxb4nnzijsqkmz22ik6fbwxg5mh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mgrbyte/emacs-abyss-theme")
    (synopsis
      "A dark theme with contrasting colours.")
    (description
      "Documentation at https://melpa.org/#/abyss-theme")
    (license #f)))

(define-public emacs-ac-alchemist
  (package
    (name "emacs-ac-alchemist")
    (version "20150908.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-alchemist.git")
               (commit
                 "b1891c3d41aed83f61d78a609ea97be5cc2758d9")))
        (sha256
          (base32
            "19msfx3f3px1maj41bzh139s6sv2pjk9vm3bphn7758fqhzyin0f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-alchemist))
    (home-page
      "https://github.com/syohex/emacs-ac-alchemist")
    (synopsis "auto-complete source for alchemist")
    (description
      "Documentation at https://melpa.org/#/ac-alchemist")
    (license #f)))

(define-public emacs-ac-c-headers
  (package
    (name "emacs-ac-c-headers")
    (version "20200816.1007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/ac-c-headers.git")
               (commit
                 "67e1e86a48c9bed57bc7ce5ce2553ad203f5752e")))
        (sha256
          (base32
            "1yk0a4p1pi7jwv48rvzn4i2733kg5ffp0q5vgcq22f98pmzyk77f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page "http://zk-phi.gitub.io/")
    (synopsis "auto-complete source for C headers")
    (description
      "Documentation at https://melpa.org/#/ac-c-headers")
    (license #f)))

(define-public emacs-ac-capf
  (package
    (name "emacs-ac-capf")
    (version "20151101.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-capf.git")
               (commit
                 "17571dba0a8f98111f2ab758e9bea285b263781b")))
        (sha256
          (base32
            "0nyq34yq4jcp3p30ygma3iz1h0q551p33792byj76pa5ps09g1da"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-capf")
    (synopsis
      "auto-complete source with completion-at-point")
    (description
      "Documentation at https://melpa.org/#/ac-capf")
    (license #f)))

(define-public emacs-ac-cider
  (package
    (name "emacs-ac-cider")
    (version "20161006.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/ac-cider.git")
               (commit
                 "fa13e067dd9c8c76151c7d140a2803da1d109b84")))
        (sha256
          (base32
            "1pklmjldnm8bf34f5q8x983d1m72l3kf51ns9vh6z704mkhv658f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-auto-complete))
    (home-page
      "https://github.com/clojure-emacs/ac-cider")
    (synopsis
      "Clojure auto-complete sources using CIDER")
    (description
      "Documentation at https://melpa.org/#/ac-cider")
    (license #f)))

(define-public emacs-ac-clang
  (package
    (name "emacs-ac-clang")
    (version "20180710.546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yaruopooner/ac-clang.git")
               (commit
                 "3294b968eb1a8317049190940193f9da47c085ef")))
        (sha256
          (base32
            "160hda911vsc2zcs56560cpv7kj0966vjzwmc0md6fkz3wrj7w0n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-pos-tip
            emacs-yasnippet))
    (arguments
      '(#:files
        (:defaults "*.png" "build" "clang-server")))
    (home-page
      "https://github.com/yaruopooner/ac-clang")
    (synopsis
      "Auto Completion source by libclang for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/ac-clang")
    (license #f)))

(define-public emacs-ac-dcd
  (package
    (name "emacs-ac-dcd")
    (version "20210428.1556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atilaneves/ac-dcd.git")
               (commit
                 "56d9817159acdebdbb3d5499c7e9379d29af0cd4")))
        (sha256
          (base32
            "0p5cjs156ac1x3fsxnb4kc6bd4z09kdkwkyav9ryw5nkrdzv0bd6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-flycheck-dmd-dub))
    (home-page "http://github.com/atilaneves/ac-dcd")
    (synopsis
      "Auto Completion source for dcd for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/ac-dcd")
    (license #f)))

(define-public emacs-ac-emacs-eclim
  (package
    (name "emacs-ac-emacs-eclim")
    (version "20180911.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eclim/emacs-eclim.git")
               (commit
                 "222ddd48fcf0ee01592dec77c58e0cf3f2ea1100")))
        (sha256
          (base32
            "0jdddf8krvg379wlay1xs27qlxpi87nz6v2i526pk59mmg8jrnvc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eclim emacs-auto-complete))
    (arguments '(#:files ("ac-emacs-eclim.el")))
    (home-page "unspecified")
    (synopsis "auto-complete source for eclim")
    (description
      "Documentation at https://melpa.org/#/ac-emacs-eclim")
    (license #f)))

(define-public emacs-ac-emmet
  (package
    (name "emacs-ac-emmet")
    (version "20131015.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/ac-emmet.git")
               (commit
                 "88f24876ee3b759978d4614a758280b5d512d543")))
        (sha256
          (base32
            "1lkhqmfkjga7qi4r1m7mjax3pyf9m6minsn57cbzm2z2kvkhq22g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emmet-mode emacs-auto-complete))
    (home-page "https://github.com/yasuyk/ac-emmet")
    (synopsis
      "auto-complete sources for emmet-mode's snippets")
    (description
      "Documentation at https://melpa.org/#/ac-emmet")
    (license #f)))

(define-public emacs-ac-emoji
  (package
    (name "emacs-ac-emoji")
    (version "20150823.711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-emoji.git")
               (commit
                 "40a639764eb654f1b4bb705c817b66032a26ff2b")))
        (sha256
          (base32
            "1gk84bv6w9lg5wrygd7cfab3h46j84k1dwmhzr7jay6n02q6y499"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-emoji")
    (synopsis "auto-complete source of Emoji")
    (description
      "Documentation at https://melpa.org/#/ac-emoji")
    (license #f)))

(define-public emacs-ac-etags
  (package
    (name "emacs-ac-etags")
    (version "20161001.1507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-etags.git")
               (commit
                 "7983e631c226fe0fa53af3b2d56bf4eca3d785ce")))
        (sha256
          (base32
            "1vvgcy5hybrip4jn4pj9r3fahr6rc70k28w5aw951h0x7g7laipr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-etags")
    (synopsis
      "etags/ctags completion source for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-etags")
    (license #f)))

(define-public emacs-ac-geiser
  (package
    (name "emacs-ac-geiser")
    (version "20200318.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xiaohanyu/ac-geiser.git")
               (commit
                 "93818c936ee7e2f1ba1b315578bde363a7d43d05")))
        (sha256
          (base32
            "00n2qa26yilaj837n1yp6lbqa4gf30nkkbvanl7m9ih7k48ssqmw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-geiser emacs-auto-complete))
    (home-page "unspecified")
    (synopsis "Auto-complete backend for geiser")
    (description
      "Documentation at https://melpa.org/#/ac-geiser")
    (license #f)))

(define-public emacs-ac-haskell-process
  (package
    (name "emacs-ac-haskell-process")
    (version "20150423.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-haskell-process.git")
               (commit
                 "0362d4323511107ec70e7165cb612f3ab01b712f")))
        (sha256
          (base32
            "0m33v9iy3y37sicfmpx7kvmn8v1a8k6cs7d0v9v5k93p4d5ila41"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "Haskell auto-complete source which uses the current haskell process")
    (description
      "Documentation at https://melpa.org/#/ac-haskell-process")
    (license #f)))

(define-public emacs-ac-helm
  (package
    (name "emacs-ac-helm")
    (version "20160319.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/ac-helm.git")
               (commit
                 "baf2b1e04bcffa835084389c0fab415f26efbf32")))
        (sha256
          (base32
            "1fyikdwn0gzng7pbmfg7zb7jphjv228776vsjc12j7g1aqz92n4l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-auto-complete emacs-popup))
    (home-page "unspecified")
    (synopsis "Helm interface for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-helm")
    (license #f)))

(define-public emacs-ac-html
  (package
    (name "emacs-ac-html")
    (version "20151005.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/ac-html.git")
               (commit
                 "668154cba123c321d1b07c2dc8b26d14092253b8")))
        (sha256
          (base32
            "0lz1a8a4bqxiw20jh65r7cg7jnid3vz4h8b7dkfcrzwn0agx8frw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-s
            emacs-f
            emacs-dash))
    (arguments
      '(#:files (:defaults "completion-data")))
    (home-page "https://github.com/cheunghy/ac-html")
    (synopsis
      "auto complete source for html tags and attributes")
    (description
      "Documentation at https://melpa.org/#/ac-html")
    (license #f)))

(define-public emacs-ac-html-angular
  (package
    (name "emacs-ac-html-angular")
    (version "20151225.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/ac-html-angular.git")
               (commit
                 "6bafe09afe03112ca4183d58461c1a6f6c2b3c67")))
        (sha256
          (base32
            "1v3ia439h4n2i204n0sazzbwwm0l5k6j31gq58iv2rqrq2ysikny"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-completion-data))
    (arguments '(#:files (:defaults "html-stuff")))
    (home-page
      "https://github.com/osv/ac-html-bootstrap")
    (synopsis
      "auto complete angular15 data for `ac-html' and `company-web'")
    (description
      "Documentation at https://melpa.org/#/ac-html-angular")
    (license #f)))

(define-public emacs-ac-html-bootstrap
  (package
    (name "emacs-ac-html-bootstrap")
    (version "20160302.1701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/ac-html-bootstrap.git")
               (commit
                 "481e6e441cd566554ce71cd8cb28c9e7ebb1c24b")))
        (sha256
          (base32
            "0ry398awbsyswc87v275x4mdyv64kr0s647y6nagqg1h3n3jhvsq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-completion-data))
    (arguments
      '(#:files ("*.el" "html-stuff" "fa-html-stuff")))
    (home-page
      "https://github.com/osv/ac-html-bootstrap")
    (synopsis
      "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'")
    (description
      "Documentation at https://melpa.org/#/ac-html-bootstrap")
    (license #f)))

(define-public emacs-ac-html-csswatcher
  (package
    (name "emacs-ac-html-csswatcher")
    (version "20151208.2113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/ac-html-csswatcher.git")
               (commit
                 "b0f3e7e1a3fe49e88b6eb6432377232fc715f221")))
        (sha256
          (base32
            "0swbw62zh5rjjf73pvmp8brrrmk6bp061k793z4z83v7ic0cicrr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-completion-data))
    (home-page
      "https://github.com/osv/ac-html-csswatcher")
    (synopsis
      "css/less class/id completion with `ac-html' or `company-web'")
    (description
      "Documentation at https://melpa.org/#/ac-html-csswatcher")
    (license #f)))

(define-public emacs-ac-inf-ruby
  (package
    (name "emacs-ac-inf-ruby")
    (version "20131115.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-inf-ruby.git")
               (commit
                 "ee53fc9c61950da9a96df3ff5ef186f9a9faf151")))
        (sha256
          (base32
            "13xgv1c4gr075gffq95njra7bw1fkb5yp3xdlh3qndzw4bpary1l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inf-ruby emacs-auto-complete))
    (home-page "unspecified")
    (synopsis
      "Enable auto-complete in inf-ruby sessions")
    (description
      "Documentation at https://melpa.org/#/ac-inf-ruby")
    (license #f)))

(define-public emacs-ac-ispell
  (package
    (name "emacs-ac-ispell")
    (version "20151101.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-ispell.git")
               (commit
                 "22bace7387e9012002a6a444922f75f9913077b0")))
        (sha256
          (base32
            "1cq73bdv3lkn8v3nx6aznygqaac9s5i7pvirl8wz9ib31hsgwpbk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/syohex/emacs-ac-ispell")
    (synopsis
      "ispell completion source for auto-complete")
    (description
      "Documentation at https://melpa.org/#/ac-ispell")
    (license #f)))

(define-public emacs-ac-js2
  (package
    (name "emacs-ac-js2")
    (version "20190101.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ScottyB/ac-js2.git")
               (commit
                 "2b56d09a16c1a0ce514cc1b85d64cb1be4502723")))
        (sha256
          (base32
            "11q4aaiqr4xnw5j0yqj35gc4a290az75qdyhadj09xr2j2jay35x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode emacs-skewer-mode))
    (arguments '(#:files ("*.js" "*.el")))
    (home-page "https://github.com/ScottyB/ac-js2")
    (synopsis
      "Auto-complete source for Js2-mode, with navigation")
    (description
      "Documentation at https://melpa.org/#/ac-js2")
    (license #f)))

(define-public emacs-ac-math
  (package
    (name "emacs-ac-math")
    (version "20141116.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/ac-math.git")
               (commit
                 "c012a8f620a48cb18db7d78995035d65eae28f11")))
        (sha256
          (base32
            "0p5cdaw9v8jgnmjqpb95bxy4khwbdgg19wzg8jkr2j2p55dpfbd6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-math-symbol-lists))
    (arguments '(#:files ("ac-math.el")))
    (home-page "https://github.com/vitoshka/ac-math")
    (synopsis
      "Auto-complete sources for input of mathematical symbols and latex tags")
    (description
      "Documentation at https://melpa.org/#/ac-math")
    (license #f)))

(define-public emacs-ac-mozc
  (package
    (name "emacs-ac-mozc")
    (version "20150227.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/igjit/ac-mozc.git")
               (commit
                 "4c6c8be4701010d9362184437c0f783e0335c631")))
        (sha256
          (base32
            "19cb8kq8gmrplkxil22ahvbyq5cng1l2vh2lrfiyqpjsap7zfjz5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-mozc))
    (home-page "https://github.com/igjit/ac-mozc")
    (synopsis
      "auto-complete sources for Japanese input using Mozc")
    (description
      "Documentation at https://melpa.org/#/ac-mozc")
    (license #f)))

(define-public emacs-ac-octave
  (package
    (name "emacs-ac-octave")
    (version "20180406.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/ac-octave.git")
               (commit
                 "fe0f931f2024f43de3c4fff4b1ace672413adeae")))
        (sha256
          (base32
            "1yj5fapbp79k88k1cxrmmf91fb0j6s4s7f2dhk2afcf7z83mqkwb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/coldnew/ac-octave")
    (synopsis "An auto-complete source for Octave")
    (description
      "Documentation at https://melpa.org/#/ac-octave")
    (license #f)))

(define-public emacs-ac-php
  (package
    (name "emacs-ac-php")
    (version "20230529.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "7b89fbf25360cc146aee9b2b2ca60f3462b21078")))
        (sha256
          (base32
            "0fmp1595v06dgmx9skxphknaagf9ds9l7ygi7lzxas1s8d05dj10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ac-php-core
            emacs-auto-complete
            emacs-yasnippet))
    (arguments '(#:files ("ac-php.el")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "Auto Completion source for PHP.")
    (description
      "Documentation at https://melpa.org/#/ac-php")
    (license #f)))

(define-public emacs-ac-php-core
  (package
    (name "emacs-ac-php-core")
    (version "20230925.801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "586f4e8a46aac9236cb5af57c3f70a9878375702")))
        (sha256
          (base32
            "0jwhg52z448f4f18k32arq80hbdj3j9vshp42b4sr9v1mixv6vfc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-php-mode
            emacs-s
            emacs-f
            emacs-popup
            emacs-xcscope))
    (arguments
      '(#:files
        ("ac-php-comm-tags-data.el"
         "ac-php-core.el"
         "phpctags"
         "*.json")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "The core library of the ac-php")
    (description
      "Documentation at https://melpa.org/#/ac-php-core")
    (license #f)))

(define-public emacs-ac-racer
  (package
    (name "emacs-ac-racer")
    (version "20170114.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ac-racer.git")
               (commit
                 "4408c2d652dec0432e20c05e001db8222d778c6b")))
        (sha256
          (base32
            "01154kqzh3pjy57vxhv27nm69p85a1fwl7r95c7pzmzxgxigfz1p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-racer))
    (home-page
      "https://github.com/syohex/emacs-ac-racer")
    (synopsis "auto-complete source of racer")
    (description
      "Documentation at https://melpa.org/#/ac-racer")
    (license #f)))

(define-public emacs-ac-rtags
  (package
    (name "emacs-ac-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-rtags))
    (arguments '(#:files ("src/ac-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "auto-complete back-end for RTags")
    (description
      "Documentation at https://melpa.org/#/ac-rtags")
    (license #f)))

(define-public emacs-ac-skk
  (package
    (name "emacs-ac-skk")
    (version "20141230.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/ac-skk.el.git")
               (commit
                 "d25a265930430d080329789fb253d786c01dfa24")))
        (sha256
          (base32
            "1nvz0jfz4x99xc5ywspl8fdpyqns5zd0j7i4bwzlwplmy3qakjwm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-ddskk
            emacs-tinysegmenter))
    (home-page "https://github.com/myuhe/ac-skk.el")
    (synopsis
      "auto-complete-mode source for DDSKK a.k.a Japanese input method")
    (description
      "Documentation at https://melpa.org/#/ac-skk")
    (license #f)))

(define-public emacs-ac-slime
  (package
    (name "emacs-ac-slime")
    (version "20171027.2100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ac-slime.git")
               (commit
                 "6c80cb602ddad46486288f94ad7546396c6e4b1a")))
        (sha256
          (base32
            "11w1z653klghi6inv9n92cigz8m3c67j3r18mdk39inc3izwplkj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-slime))
    (home-page "https://github.com/purcell/ac-slime")
    (synopsis
      "An auto-complete source using slime completions")
    (description
      "Documentation at https://melpa.org/#/ac-slime")
    (license #f)))

(define-public emacs-ac-sly
  (package
    (name "emacs-ac-sly")
    (version "20170728.1027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/qoocku/ac-sly.git")
               (commit
                 "bf69c687c4ecf1994349d20c182e9b567399912e")))
        (sha256
          (base32
            "09g6v2yp3wl566488zsb79lklqpai9dgz6xwv1y5h6zkghxvkhpy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sly emacs-auto-complete))
    (home-page "https://github.com/qoocku/ac-sly")
    (synopsis
      "An auto-complete source using sly completions")
    (description
      "Documentation at https://melpa.org/#/ac-sly")
    (license #f)))

(define-public emacs-academic-phrases
  (package
    (name "emacs-academic-phrases")
    (version "20180723.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nashamri/academic-phrases.git")
               (commit
                 "25d9cf67feac6359cb213f061735e2679c84187f")))
        (sha256
          (base32
            "0m32jpg6n0azz2f4y57y92zfvzm54ankx5cm06gli2zw2v1218fw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-ht))
    (home-page
      "https://github.com/nashamri/academic-phrases")
    (synopsis
      "Bypass that mental block when writing your papers.")
    (description
      "Documentation at https://melpa.org/#/academic-phrases")
    (license #f)))

(define-public emacs-accent
  (package
    (name "emacs-accent")
    (version "20220202.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elias94/accent.git")
               (commit
                 "6b502df6940587dae2dfbd349c22dfd44c803a86")))
        (sha256
          (base32
            "0q4cf4w0gm933ph4r2glw40vgfiz1v9r043w6lms3z2a0b3p6sdb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page "https://github.com/elias94/accent")
    (synopsis
      "Popup for accented characters (diacritics)")
    (description
      "Documentation at https://melpa.org/#/accent")
    (license #f)))

(define-public emacs-ace-flyspell
  (package
    (name "emacs-ace-flyspell")
    (version "20170309.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-flyspell.git")
               (commit
                 "538d4f8508d305262ba0228dfe7c819fb65b53c9")))
        (sha256
          (base32
            "1yplf5klgjjzx3cb1ihqb9f9cwn898l0vhasc3cwiqz6ldyq2na8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/cute-jumper/ace-flyspell")
    (synopsis
      "Jump to and correct spelling errors using `ace-jump-mode' and flyspell")
    (description
      "Documentation at https://melpa.org/#/ace-flyspell")
    (license #f)))

(define-public emacs-ace-isearch
  (package
    (name "emacs-ace-isearch")
    (version "20220809.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tam17aki/ace-isearch.git")
               (commit
                 "a24bfc626100f183dbad016bd7723eb12e238534")))
        (sha256
          (base32
            "00p8nh7084ifjiqzvm8zy0x0dqdz6i9qym9pfi7db2js17ym8pjc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tam17aki/ace-isearch")
    (synopsis
      "A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper")
    (description
      "Documentation at https://melpa.org/#/ace-isearch")
    (license #f)))

(define-public emacs-ace-jump-buffer
  (package
    (name "emacs-ace-jump-buffer")
    (version "20171031.1550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/ace-jump-buffer.git")
               (commit
                 "0d335064230caf3efdd5a732e8fbd67e3948ed6a")))
        (sha256
          (base32
            "04rlg8mlx3kggn04krvi3zgx263j1ysbgfccawaarzixas2r9gd9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-dash))
    (home-page
      "https://github.com/waymondo/ace-jump-buffer")
    (synopsis
      "fast buffer switching extension to `avy'")
    (description
      "Documentation at https://melpa.org/#/ace-jump-buffer")
    (license #f)))

(define-public emacs-ace-jump-helm-line
  (package
    (name "emacs-ace-jump-helm-line")
    (version "20160918.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-jump-helm-line.git")
               (commit
                 "1483055255df3f8ae349f7520f05b1e43ea3ed37")))
        (sha256
          (base32
            "191a2g1if1jliikbxkpwmvlp4v1sp541j71xrlymili8ygm0idq5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-helm))
    (home-page
      "https://github.com/cute-jumper/ace-jump-helm-line")
    (synopsis
      "Ace-jump to a candidate in helm window")
    (description
      "Documentation at https://melpa.org/#/ace-jump-helm-line")
    (license #f)))

(define-public emacs-ace-jump-mode
  (package
    (name "emacs-ace-jump-mode")
    (version "20140616.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/winterTTr/ace-jump-mode.git")
               (commit
                 "8351e2df4fbbeb2a4003f2fb39f46d33803f3dac")))
        (sha256
          (base32
            "17axrgd99glnl6ma4ls3k01ysdqmiqr581wnrbsn3s4gp53mm2x6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/winterTTr/ace-jump-mode/")
    (synopsis
      "a quick cursor location minor mode for emacs")
    (description
      "Documentation at https://melpa.org/#/ace-jump-mode")
    (license #f)))

(define-public emacs-ace-jump-zap
  (package
    (name "emacs-ace-jump-zap")
    (version "20170717.1849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/ace-jump-zap.git")
               (commit
                 "52b5d4c6c73bd0fc833a0dcb4e803a5287d8cae8")))
        (sha256
          (base32
            "1iw90mk6hdrbskxgv67xj27qd26w5dlh4s6a6xqqsj8ld56nzbvr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ace-jump-mode emacs-dash))
    (home-page
      "https://github.com/waymondo/ace-jump-zap")
    (synopsis
      "Character zapping, `ace-jump-mode` style")
    (description
      "Documentation at https://melpa.org/#/ace-jump-zap")
    (license #f)))

(define-public emacs-ace-link
  (package
    (name "emacs-ace-link")
    (version "20220901.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ace-link.git")
               (commit
                 "06ab398df85e81d1dc763b3210732dd26cba60a1")))
        (sha256
          (base32
            "184n89m4daalzz10c6wyqxi8nzpki7bna9b0am39vxbi699k3pdk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page "https://github.com/abo-abo/ace-link")
    (synopsis "Quickly follow links")
    (description
      "Documentation at https://melpa.org/#/ace-link")
    (license #f)))

(define-public emacs-ace-mc
  (package
    (name "emacs-ace-mc")
    (version "20190206.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mm--/ace-mc.git")
               (commit
                 "6877880efd99e177e4e9116a364576def3da391b")))
        (sha256
          (base32
            "180licc7w5b6f42ifwvllbnmf3aq8cbr8jhkbk37lzick4sv10d2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ace-jump-mode
            emacs-multiple-cursors
            emacs-dash))
    (home-page "https://github.com/mm--/ace-mc")
    (synopsis
      "Add multiple cursors quickly using ace jump")
    (description
      "Documentation at https://melpa.org/#/ace-mc")
    (license #f)))

(define-public emacs-ace-pinyin
  (package
    (name "emacs-ace-pinyin")
    (version "20210827.355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/ace-pinyin.git")
               (commit
                 "47662c0b05775ba353464b44c0f1a037c85e746e")))
        (sha256
          (base32
            "0qidfljvjqwyi5xvgr6hli45k1d4w8g5zn2mssyv9xzrslcigdzv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-avy emacs-pinyinlib))
    (home-page
      "https://github.com/cute-jumper/ace-pinyin")
    (synopsis
      "Jump to Chinese characters using avy or ace-jump-mode")
    (description
      "Documentation at https://melpa.org/#/ace-pinyin")
    (license #f)))

(define-public emacs-ace-popup-menu
  (package
    (name "emacs-ace-popup-menu")
    (version "20230606.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/ace-popup-menu.git")
               (commit
                 "b6b439d64a6c8f9f5fc5ed1c198ab83fb35fdaf4")))
        (sha256
          (base32
            "0xd8q86yixlgmqs2wfzj57dk6aiq10p5qjj19dby6g02nqjlwvya"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy-menu))
    (home-page
      "https://github.com/mrkkrp/ace-popup-menu")
    (synopsis
      "Replace GUI popup menu with something more efficient")
    (description
      "Documentation at https://melpa.org/#/ace-popup-menu")
    (license #f)))

(define-public emacs-ace-window
  (package
    (name "emacs-ace-window")
    (version "20220911.358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ace-window.git")
               (commit
                 "77115afc1b0b9f633084cf7479c767988106c196")))
        (sha256
          (base32
            "1l6rp92q4crahx9nq7s6zxqyw7ccrhkl95v70vxra7zndqpqwsbq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/abo-abo/ace-window")
    (synopsis "Quickly switch windows.")
    (description
      "Documentation at https://melpa.org/#/ace-window")
    (license #f)))

(define-public emacs-achievements
  (package
    (name "emacs-achievements")
    (version "20150531.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gvol/emacs-achievements.git")
               (commit
                 "c8275ee492d56255999d58f2988129ab29145182")))
        (sha256
          (base32
            "14p9lmnrpsnx94ycvsqmfxnk5kws0cman4a6fbnikl35ma8zc01x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-keyfreq))
    (home-page "unspecified")
    (synopsis "Achievements for emacs usage.")
    (description
      "Documentation at https://melpa.org/#/achievements")
    (license #f)))

(define-public emacs-ack-menu
  (package
    (name "emacs-ack-menu")
    (version "20150504.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/ack-menu.git")
               (commit
                 "f77be93a4697926ecf3195a355eb69580f695f4d")))
        (sha256
          (base32
            "02ba4d8qkvgy52g0zcbyfvsnhr9685gq569nkwa2as30xdcq3khm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mag-menu))
    (home-page
      "https://github.com/chumpage/ack-menu")
    (synopsis "A menu-based front-end for ack")
    (description
      "Documentation at https://melpa.org/#/ack-menu")
    (license #f)))

(define-public emacs-acme-theme
  (package
    (name "emacs-acme-theme")
    (version "20210430.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianyepan/acme-emacs-theme.git")
               (commit
                 "7c408d111c5e451ecb8fdd5f76cf7d8074aec793")))
        (sha256
          (base32
            "16qxspzlf0bvw36ff4qnrn5p7mc5sf923ba0ar04cr87bfqgyak4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianpan870102/acme-emacs-theme")
    (synopsis
      "A color theme based on Acme & Sam from Plan 9")
    (description
      "Documentation at https://melpa.org/#/acme-theme")
    (license #f)))

(define-public emacs-actionscript-mode
  (package
    (name "emacs-actionscript-mode")
    (version "20180527.1701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/austinhaas/actionscript-mode.git")
               (commit
                 "75639cc7fe85392b5671a1e94dcedb409a949cae")))
        (sha256
          (base32
            "1bhzskg09pkiqdzlzlaf2p48vr2kqrzcmakyzllm4rin1g4j2wrq"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("actionscript-mode.el")))
    (home-page "unspecified")
    (synopsis
      "A simple mode for editing Actionscript 3 files")
    (description
      "Documentation at https://melpa.org/#/actionscript-mode")
    (license #f)))

(define-public emacs-activity-watch-mode
  (package
    (name "emacs-activity-watch-mode")
    (version "20230731.802")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pauldub/activity-watch-mode.git")
               (commit
                 "63eb19a10e4262c529f1b205ef61d69055350f49")))
        (sha256
          (base32
            "10p9mpnbq1xrwhxy54idiz4vjy2kflm0ymqpidnh0sr5dcnap867"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/pauldub/activity-watch-mode")
    (synopsis "Automatic time tracking extension.")
    (description
      "Documentation at https://melpa.org/#/activity-watch-mode")
    (license #f)))

(define-public emacs-ada-ts-mode
  (package
    (name "emacs-ada-ts-mode")
    (version "20231015.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brownts/ada-ts-mode.git")
               (commit
                 "6aa772c4cbb08b84e1c6712c98517e4afa495e23")))
        (sha256
          (base32
            "1ff08pkirkwxcgsw4kfca5h5x7mjz3z2j3nkkz5an36awi3v35is"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brownts/ada-ts-mode")
    (synopsis "Major mode for Ada using Tree-sitter")
    (description
      "Documentation at https://melpa.org/#/ada-ts-mode")
    (license #f)))

(define-public emacs-adafruit-wisdom
  (package
    (name "emacs-adafruit-wisdom")
    (version "20200217.306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/adafruit-wisdom.el.git")
               (commit
                 "a9314331ba6ea846be9e1f7bded1e2e0ab70cd8e")))
        (sha256
          (base32
            "1mra53dnzz3n8ya9dd0fz8gr19f6jcfsl917xz81awnmxj38nbhq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/gonewest818/adafruit-wisdom.el")
    (synopsis "Get/display adafruit.com quotes")
    (description
      "Documentation at https://melpa.org/#/adafruit-wisdom")
    (license #f)))

(define-public emacs-add-hooks
  (package
    (name "emacs-add-hooks")
    (version "20171217.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickmccurdy/add-hooks.git")
               (commit
                 "1845137703461fc44bd77cf24014ba58f19c369d")))
        (sha256
          (base32
            "02s9mv26ycypn4qfshrh17v1hsys2q9vffxj3g4lgq0lykplvkkm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickmccurdy/add-hooks")
    (synopsis "Functions for setting multiple hooks")
    (description
      "Documentation at https://melpa.org/#/add-hooks")
    (license #f)))

(define-public emacs-add-node-modules-path
  (package
    (name "emacs-add-node-modules-path")
    (version "20230307.655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/codesuki/add-node-modules-path.git")
               (commit
                 "841e93dfed50448da66c89a977c9182bb18796a1")))
        (sha256
          (base32
            "0lc5xjd8y8p1z5lwcmnwfpdi7x0pjpbhzjs8qa3fpjzfpy1fqb6y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/codesuki/add-node-modules-path")
    (synopsis "Add node_modules to your exec-path")
    (description
      "Documentation at https://melpa.org/#/add-node-modules-path")
    (license #f)))

(define-public emacs-addressbook-bookmark
  (package
    (name "emacs-addressbook-bookmark")
    (version "20230602.1034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/addressbook-bookmark.git")
               (commit
                 "f4b839b20c16c53e609705506cad1ef68bff4378")))
        (sha256
          (base32
            "0n3yzxa8yxsz0q17kdcybkw9kdjnzl394gk9bq1vf0gq0hc8my7m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/addressbook-bookmark")
    (synopsis
      "An address book based on Standard Emacs bookmarks.")
    (description
      "Documentation at https://melpa.org/#/addressbook-bookmark")
    (license #f)))

(define-public emacs-ado-mode
  (package
    (name "emacs-ado-mode")
    (version "20221023.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/louabill/ado-mode.git")
               (commit
                 "5610074e29ce08631c5210f1873938c3bcd9cbde")))
        (sha256
          (base32
            "17dlhrb74gf4bwjwvzca454ljqxhmfschv7zbgya0r1vax9vbb2i"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "scripts" "templates")))
    (home-page
      "https://github.com/louabill/ado-mode")
    (synopsis
      "Major mode for editing Stata-related files")
    (description
      "Documentation at https://melpa.org/#/ado-mode")
    (license #f)))

(define-public emacs-adoc-mode
  (package
    (name "emacs-adoc-mode")
    (version "20230905.810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/adoc-mode.git")
               (commit
                 "05914c7319ac5c8a7e68047d5bb982d691a0d535")))
        (sha256
          (base32
            "0dhcx8pdxsd4zjj781j6hssfzzvd5cgar3k6ahb2wcyddw95baxd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bbatsov/adoc-mode")
    (synopsis
      "a major-mode for editing AsciiDoc files")
    (description
      "Documentation at https://melpa.org/#/adoc-mode")
    (license #f)))

(define-public emacs-adwaita-dark-theme
  (package
    (name "emacs-adwaita-dark-theme")
    (version "20231107.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jessieh/adwaita-dark-theme.git")
               (commit
                 "a97d5d5f5657a52c3b4c4b146b4d307dfb1a7a74")))
        (sha256
          (base32
            "0g8fjqmz805fhqspbzmpvb90kpzwigl4z56bkykywgy2cwb9ljzh"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jessieh/adwaita-dark-theme")
    (synopsis
      "A dark color scheme inspired by Adwaita")
    (description
      "Documentation at https://melpa.org/#/adwaita-dark-theme")
    (license #f)))

(define-public emacs-aes
  (package
    (name "emacs-aes")
    (version "20211204.2348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sauermann/emacs-aes.git")
               (commit
                 "c9cd12d6c1dbc18603eb4703276132cea59d5c78")))
        (sha256
          (base32
            "1k5qq187xz5dbbgsrjsk3ff0dz5v328cn9iwn5rvn8a34akyal81"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Sauermann/emacs-aes")
    (synopsis "Implementation of AES")
    (description
      "Documentation at https://melpa.org/#/aes")
    (license #f)))

(define-public emacs-affe
  (package
    (name "emacs-affe")
    (version "20230411.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/affe.git")
               (commit
                 "ae3169ac4bbd64520d165b4ce4806b7a34b972dc")))
        (sha256
          (base32
            "12h3ydjg294iqb255za703inix182qbjhf8vrky02fpry66ba000"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page "https://github.com/minad/affe")
    (synopsis "Asynchronous Fuzzy Finder for Emacs")
    (description
      "Documentation at https://melpa.org/#/affe")
    (license #f)))

(define-public emacs-afternoon-theme
  (package
    (name "emacs-afternoon-theme")
    (version "20140104.1859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/emacs-afternoon-theme.git")
               (commit
                 "89b1d778a1f8b385775c122f2bd1c62f0fbf931a")))
        (sha256
          (base32
            "19d5d6qs5nwmpf26rsb86ranb5p4236qp7p2b4i88cimcmzspylb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/osener/emacs-afternoon-theme")
    (synopsis
      "Dark color theme with a deep blue background")
    (description
      "Documentation at https://melpa.org/#/afternoon-theme")
    (license #f)))

(define-public emacs-ag
  (package
    (name "emacs-ag")
    (version "20201031.2202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/ag.el.git")
               (commit
                 "ed7e32064f92f1315cecbfc43f120bbc7508672c")))
        (sha256
          (base32
            "1lm51j99h1wn6djqjc5dwba6kvqwl8vvwwq7p0vdr250l470k90n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/Wilfred/ag.el")
    (synopsis
      "A front-end for ag ('the silver searcher'), the C ack replacement.")
    (description
      "Documentation at https://melpa.org/#/ag")
    (license #f)))

(define-public emacs-agda-editor-tactics
  (package
    (name "emacs-agda-editor-tactics")
    (version "20211024.2357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/next-700-module-systems.git")
               (commit
                 "c401c0c1ec0ad38bb5ee1636504e0e531b9e34b9")))
        (sha256
          (base32
            "0y5dp3i97w96dy5p5yk4gxs4db9n260sn1q2vp1j6afi30mn2mb9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/alhassy/next-700-module-systems")
    (synopsis
      "An editor tactic to produce Σ-types from Agda records")
    (description
      "Documentation at https://melpa.org/#/agda-editor-tactics")
    (license #f)))

(define-public emacs-age
  (package
    (name "emacs-age")
    (version "20230115.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anticomputer/age.el.git")
               (commit
                 "9e82487234c53e0fab2314aeab6479e62c68f0c7")))
        (sha256
          (base32
            "1x1f224xbwaan4rc1589gipl5a7llr3rxxf85i4y8zz2vfl478dp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anticomputer/age.el")
    (synopsis "The Age Encryption Library")
    (description
      "Documentation at https://melpa.org/#/age")
    (license #f)))

(define-public emacs-agenix
  (package
    (name "emacs-agenix")
    (version "20231016.614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/t4ccer/agenix.el.git")
               (commit
                 "2ff26a3eb7fe347f45c4ea7ef9751721716144bc")))
        (sha256
          (base32
            "0vfivffk4rz1dzvi60cx4060jgnnv6qfsskkqs2k7prdh43jsi9c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/t4ccer/agenix.el")
    (synopsis "Decrypt and encrypt agenix secrets")
    (description
      "Documentation at https://melpa.org/#/agenix")
    (license #f)))

(define-public emacs-aggressive-fill-paragraph
  (package
    (name "emacs-aggressive-fill-paragraph")
    (version "20180910.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode.git")
               (commit
                 "4a620e62b5e645a48b0a818bf4eb19daea4977df")))
        (sha256
          (base32
            "0gy8x78av6z6hp5jccz7pnh6n0fnpfs5vfhfbxggj2qjfyxbvw1r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/davidshepherd7/aggressive-fill-paragraph-mode")
    (synopsis
      "A mode to automatically keep paragraphs filled")
    (description
      "Documentation at https://melpa.org/#/aggressive-fill-paragraph")
    (license #f)))

(define-public emacs-aggressive-indent
  (package
    (name "emacs-aggressive-indent")
    (version "20230112.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/aggressive-indent-mode.git")
               (commit
                 "a437a45868f94b77362c6b913c5ee8e67b273c42")))
        (sha256
          (base32
            "0kaxwwnwj47j69zdiamxwlinvnbzw1ya62j91zg26ig2lj8082l7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/aggressive-indent-mode")
    (synopsis
      "Minor mode to aggressively keep your code always indented")
    (description
      "Documentation at https://melpa.org/#/aggressive-indent")
    (license #f)))

(define-public emacs-agtags
  (package
    (name "emacs-agtags")
    (version "20221026.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vietor/agtags.git")
               (commit
                 "e8e04ece2f32d65b084974597bfe8077da3ddba0")))
        (sha256
          (base32
            "14sxysq606rq06banjhj5andny3j9r8yk3v4w8ipk0kd033qrr22"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vietor/agtags")
    (synopsis "A frontend to GNU Global")
    (description
      "Documentation at https://melpa.org/#/agtags")
    (license #f)))

(define-public emacs-ah
  (package
    (name "emacs-ah")
    (version "20220730.1058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/ah.git")
               (commit
                 "8e12223f0f423e7fa882cc049a25af6db755902d")))
        (sha256
          (base32
            "06cxg7x34qfw8m5zj4dpapcbwka4i11qn065753zwzbqfikwwl11"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/takaxp/ah")
    (synopsis "Additional hooks")
    (description
      "Documentation at https://melpa.org/#/ah")
    (license #f)))

(define-public emacs-ahg
  (package
    (name "emacs-ahg")
    (version "20230904.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/agriggio/ahg")
               (commit
                 "6a8dd876d767b50431db2c695a8c21d5df9944e2")))
        (sha256
          (base32
            "1jq411g0ryxkqw4wig6mlm0dpjzx87cw3x277bcj796s3nxl95ln"))))
    (build-system melpa-build-system)
    (home-page "https://bitbucket.org/agriggio/ahg")
    (synopsis
      "Alberto's Emacs interface for Mercurial (Hg)")
    (description
      "Documentation at https://melpa.org/#/ahg")
    (license #f)))

(define-public emacs-ahk-mode
  (package
    (name "emacs-ahk-mode")
    (version "20200412.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralesi/ahk-mode.git")
               (commit
                 "729007b5f22a49f5187ff47fca18c0d674e73047")))
        (sha256
          (base32
            "0989iva0igmd3y61hihwnc7mhn11midimrnbpvq7d062iy7g4vaw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ralesi/ahk-mode")
    (synopsis
      "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)")
    (description
      "Documentation at https://melpa.org/#/ahk-mode")
    (license #f)))

(define-public emacs-ahungry-theme
  (package
    (name "emacs-ahungry-theme")
    (version "20180131.328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/color-theme-ahungry.git")
               (commit
                 "a038d91ec593d1f1b19ca66a0576d59bbc24c523")))
        (sha256
          (base32
            "0f86xp7l8bv4z5dgf3pamjgqyiq3kfx9gbi9wcw0m6lbza8db15a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ahungry-theme.el")))
    (home-page
      "https://github.com/ahungry/color-theme-ahungry")
    (synopsis
      "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry).")
    (description
      "Documentation at https://melpa.org/#/ahungry-theme")
    (license #f)))

(define-public emacs-aiken-mode
  (package
    (name "emacs-aiken-mode")
    (version "20230920.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aiken-lang/aiken-mode.git")
               (commit
                 "1af54e4df02eb52cf62034acbe1c6dd54776d843")))
        (sha256
          (base32
            "10sadlqnrqq2mr1igqi2xjnhpl4x12hy575h1q1cghzadxqq2jp3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aiken-lang/aiken-mode")
    (synopsis "Major mode for Aiken")
    (description
      "Documentation at https://melpa.org/#/aiken-mode")
    (license #f)))

(define-public emacs-aio
  (package
    (name "emacs-aio")
    (version "20200610.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacs-aio.git")
               (commit
                 "da93523e235529fa97d6f251319d9e1d6fc24a41")))
        (sha256
          (base32
            "0hnxbz5pxlrgxhjr5gnhf06qwg67g5pd87xkp0smmagsh18pnf76"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("aio.el" "README.md" "UNLICENSE")))
    (home-page "https://github.com/skeeto/emacs-aio")
    (synopsis "async/await for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/aio")
    (license #f)))

(define-public emacs-airline-themes
  (package
    (name "emacs-airline-themes")
    (version "20211214.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AnthonyDiGirolamo/airline-themes.git")
               (commit
                 "6bd102e49a7d87af1a72eb86e953991ff7bc954e")))
        (sha256
          (base32
            "0yrkbg4wwbp2rm60gmsalz7vrrklw908m6ws66j611z6h6wgmj48"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page
      "http://github.com/AnthonyDiGirolamo/airline-themes")
    (synopsis
      "vim-airline themes for emacs powerline")
    (description
      "Documentation at https://melpa.org/#/airline-themes")
    (license #f)))

(define-public emacs-airplay
  (package
    (name "emacs-airplay")
    (version "20130212.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gongo/airplay-el.git")
               (commit
                 "bd690aafcae3a887946e1bba8327597932d964ad")))
        (sha256
          (base32
            "1lxpfswp1bjrz192px79f155dycf2kazpr7dfrcr1gyshlgxkpf7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-simple-httpd
            emacs-deferred))
    (home-page "https://github.com/gongo/airplay-el")
    (synopsis "Airplay bindings to Emacs")
    (description
      "Documentation at https://melpa.org/#/airplay")
    (license #f)))

(define-public emacs-alan-mode
  (package
    (name "emacs-alan-mode")
    (version "20230216.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alan-platform/AlanForEmacs.git")
               (commit
                 "723cf8e8d7e00c1498935553c46f459aa1d26135")))
        (sha256
          (base32
            "0634gsbbf6fwsh44lk6nblksl402yvy2cf9pcjvlbhrz7mkp2m8j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck emacs-s))
    (home-page
      "https://github.com/Kjerner/AlanForEmacs")
    (synopsis "Major mode for editing Alan files")
    (description
      "Documentation at https://melpa.org/#/alan-mode")
    (license #f)))

(define-public emacs-alarm-clock
  (package
    (name "emacs-alarm-clock")
    (version "20230711.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wlemuel/alarm-clock.git")
               (commit
                 "22836b7c3a6eb3a6b7041892ddfa430d55f5dac7")))
        (sha256
          (base32
            "0q4n83pr2wn8zmwr4fxbxhpbcp5jmkmiga7j7q1ppni5w78bl571"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.mp3")))
    (home-page
      "https://github.com/wlemuel/alarm-clock")
    (synopsis "Alarm Clock")
    (description
      "Documentation at https://melpa.org/#/alarm-clock")
    (license #f)))

(define-public emacs-alchemist
  (package
    (name "emacs-alchemist")
    (version "20180312.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/alchemist.el.git")
               (commit
                 "6f99367511ae209f8fe2c990779764bbb4ccb6ed")))
        (sha256
          (base32
            "12f95rwxs11sqf1w9pnf6cxc2lh2jz4nqkq33p8b5yamnl8cq9kg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elixir-mode
            emacs-dash
            emacs-company
            emacs-pkg-info
            emacs-s))
    (arguments
      '(#:files (:defaults "*.exs" "alchemist-server")))
    (home-page
      "http://www.github.com/tonini/alchemist.el")
    (synopsis
      "Elixir tooling integration into Emacs")
    (description
      "Documentation at https://melpa.org/#/alchemist")
    (license #f)))

(define-public emacs-alda-mode
  (package
    (name "emacs-alda-mode")
    (version "20230406.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jgkamat/alda-mode.git")
               (commit
                 "580f6e94c93aead91406d00a42ccf9040a898cb8")))
        (sha256
          (base32
            "1zqlq63kdzq8swiwdzpn7419bz0h7a2d2fnx32w2ack7z0yqkxri"))))
    (build-system melpa-build-system)
    (home-page "http://gitlab.com/jgkamat/alda-mode")
    (synopsis "An Alda major mode")
    (description
      "Documentation at https://melpa.org/#/alda-mode")
    (license #f)))

(define-public emacs-alect-themes
  (package
    (name "emacs-alect-themes")
    (version "20211022.1651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/alect-themes.git")
               (commit
                 "89560047934c236d05ea6b911c0c63702a8e06f3")))
        (sha256
          (base32
            "190clnm5x4hpzrq2wp18vxg6614ly3ciyv0y1sm9rfr9w9z5i0ya"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/alect-themes")
    (synopsis
      "Configurable light, dark and black themes for Emacs 24 or later")
    (description
      "Documentation at https://melpa.org/#/alect-themes")
    (license #f)))

(define-public emacs-alectryon
  (package
    (name "emacs-alectryon")
    (version "20220925.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/alectryon.git")
               (commit
                 "8a1f3054c97fc86d628413800cfef75577c43485")))
        (sha256
          (base32
            "11nsa1jh3d3q848hdx8qrqkk427pilldkai119plv3rnmf2sqckc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("etc/elisp/*")))
    (home-page
      "https://github.com/cpitclaudel/alectryon")
    (synopsis
      "Toggle between Coq and reStructuredText")
    (description
      "Documentation at https://melpa.org/#/alectryon")
    (license #f)))

(define-public emacs-alert
  (package
    (name "emacs-alert")
    (version "20221213.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/alert.git")
               (commit
                 "c762380ff71c429faf47552a83605b2578656380")))
        (sha256
          (base32
            "0c3x54svfal236jwmz2a2jl933av2p1wm83g2vapmqzifz2c0ziw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gntp emacs-log4e))
    (home-page "https://github.com/jwiegley/alert")
    (synopsis
      "Growl-style notification system for Emacs")
    (description
      "Documentation at https://melpa.org/#/alert")
    (license #f)))

(define-public emacs-alert-termux
  (package
    (name "emacs-alert-termux")
    (version "20181119.951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gergelypolonkai/alert-termux.git")
               (commit
                 "47c414285c2f5971f3be52aaf0a4066ea6989238")))
        (sha256
          (base32
            "1gxw730b865zlaz0fdh95y7jhfwjpc3j2pkw0s3zz2xah9y0751b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gergelypolonkai/alert-termux")
    (synopsis "alert.el notifications on Termux")
    (description
      "Documentation at https://melpa.org/#/alert-termux")
    (license #f)))

(define-public emacs-alert-toast
  (package
    (name "emacs-alert-toast")
    (version "20220312.229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gkowzan/alert-toast.git")
               (commit
                 "96c88c93c1084de681700f655223142ee0eb944a")))
        (sha256
          (base32
            "1jir8qh87faqlxq1g0yyp5zy3d60615agyddxhsmx6l9a8x91zkn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-f emacs-s))
    (home-page
      "https://github.com/gkowzan/alert-toast")
    (synopsis "Windows 10 toast notifications")
    (description
      "Documentation at https://melpa.org/#/alert-toast")
    (license #f)))

(define-public emacs-align-cljlet
  (package
    (name "emacs-align-cljlet")
    (version "20160112.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gstamp/align-cljlet.git")
               (commit
                 "602d72a7ad52788a0265e3c6da519464a98166b8")))
        (sha256
          (base32
            "0l2rgs0rd4nmv4v7m10zhf2znzfvdifv1vlhpa3zbppg0fj8zph1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "https://github.com/gstamp/align-cljlet")
    (synopsis "Space align various Clojure forms")
    (description
      "Documentation at https://melpa.org/#/align-cljlet")
    (license #f)))

(define-public emacs-all-the-icons
  (package
    (name "emacs-all-the-icons")
    (version "20230909.2053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/all-the-icons.el.git")
               (commit
                 "be9d5dcda9c892e8ca1535e288620eec075eb0be")))
        (sha256
          (base32
            "0chj0lmbmi3sig30mif99zmvwpfwwsxlchp8kznwax4wc3rks7di"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "data")))
    (home-page
      "https://github.com/domtronn/all-the-icons.el")
    (synopsis
      "A library for inserting Developer icons")
    (description
      "Documentation at https://melpa.org/#/all-the-icons")
    (license #f)))

(define-public emacs-all-the-icons-completion
  (package
    (name "emacs-all-the-icons-completion")
    (version "20230617.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iyefrat/all-the-icons-completion.git")
               (commit
                 "8eb3e410d63f5d0657b41829e7898793e81f31c0")))
        (sha256
          (base32
            "1iyn7dyxil07gsa19hngpbapzmbhcwrplvf2cg1gkywafcdhjw6w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/iyefrat/all-the-icons-completion")
    (synopsis "Add icons to completion candidates")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-completion")
    (license #f)))

(define-public emacs-all-the-icons-dired
  (package
    (name "emacs-all-the-icons-dired")
    (version "20231007.2324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/all-the-icons-dired.git")
               (commit
                 "b3dd838e93325145bb55cec69d8b0a2b6f1bc348")))
        (sha256
          (base32
            "1igikh0nlzxh4lkcgmi9smvw2lqad2zxmbss6hd69m01h7mqg6k7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/wyuenho/all-the-icons-dired")
    (synopsis
      "Shows icons for each file in dired mode")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-dired")
    (license #f)))

(define-public emacs-all-the-icons-gnus
  (package
    (name "emacs-all-the-icons-gnus")
    (version "20180511.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/all-the-icons-gnus.git")
               (commit
                 "27f78996da0725943bcfb2d18038e6f7bddfa9c7")))
        (sha256
          (base32
            "0yi3nbhx7cdxq2192kh5ra2n0a3qg20p342prz3a0bm3w7q2ym11"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-all-the-icons))
    (home-page "unspecified")
    (synopsis "Shows icons for in Gnus")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-gnus")
    (license #f)))

(define-public emacs-all-the-icons-ibuffer
  (package
    (name "emacs-all-the-icons-ibuffer")
    (version "20230503.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/all-the-icons-ibuffer.git")
               (commit
                 "400860b2990529bd3a915e4d0a55fbc6d128a3ba")))
        (sha256
          (base32
            "0cn2iw6s38hkr0wxmalz7bd0866nbza2y0i99x1svbqxsj3xxmx6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/seagle0128/all-the-icons-ibuffer")
    (synopsis
      "Display icons for all buffers in ibuffer")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ibuffer")
    (license #f)))

(define-public emacs-all-the-icons-ivy
  (package
    (name "emacs-all-the-icons-ivy")
    (version "20190508.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/all-the-icons-ivy.git")
               (commit
                 "a70cbfa1effe36efc946a823a580cec686d5e88d")))
        (sha256
          (base32
            "17h7gscrvdi9rygagwzcqzbw6dbfvwmv7jbi8pjkj1c06p3kbq8i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons emacs-ivy))
    (home-page "unspecified")
    (synopsis
      "Shows icons while using ivy and counsel")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ivy")
    (license #f)))

(define-public emacs-all-the-icons-ivy-rich
  (package
    (name "emacs-all-the-icons-ivy-rich")
    (version "20230420.1234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/all-the-icons-ivy-rich.git")
               (commit
                 "c098cc85123a401b0ab8f2afd3a25853e61d7d28")))
        (sha256
          (base32
            "0vplr6zxx7xqjh7641fmnnmdhs2rll8l375a9kw0dn87gyhyjdh2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy-rich emacs-all-the-icons))
    (home-page
      "https://github.com/seagle0128/all-the-icons-ivy-rich")
    (synopsis "Better experience with icons for ivy")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-ivy-rich")
    (license #f)))

(define-public emacs-all-the-icons-nerd-fonts
  (package
    (name "emacs-all-the-icons-nerd-fonts")
    (version "20231022.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/all-the-icons-nerd-fonts.git")
               (commit
                 "9ac476b1a82199cfa770f214b6d53776cd276bd9")))
        (sha256
          (base32
            "0f76l7g1gwji3wy3gxir989b8p3lmfn9q5m5p76p0qfvi9c8gz62"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons emacs-nerd-icons))
    (home-page
      "https://github.com/mohkale/all-the-icons-nerd-fonts")
    (synopsis
      "Nerd font integration for all-the-icons")
    (description
      "Documentation at https://melpa.org/#/all-the-icons-nerd-fonts")
    (license #f)))

(define-public emacs-almost-mono-themes
  (package
    (name "emacs-almost-mono-themes")
    (version "20220422.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cryon/almost-mono-themes.git")
               (commit
                 "0641bf565c113caef8d5c2a93f38cff32ebb62b7")))
        (sha256
          (base32
            "17r605k8zb30l1sl8zy5w753mvzdppqr9lbkidancasvp1p47rs7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cryon/almost-mono-themes")
    (synopsis "Almost monochromatic color themes")
    (description
      "Documentation at https://melpa.org/#/almost-mono-themes")
    (license #f)))

(define-public emacs-alsamixer
  (package
    (name "emacs-alsamixer")
    (version "20191002.1133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/alsamixer-el.git")
               (commit
                 "1bdb99e433acd38685f05408562746cfbf2bc820")))
        (sha256
          (base32
            "0c40vycphv5nf374rp8pnzvi50vlmgab3wrdq92hyprjw76gwxhk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/alsamixer-el")
    (synopsis "Functions to call out to amixer.")
    (description
      "Documentation at https://melpa.org/#/alsamixer")
    (license #f)))

(define-public emacs-alt-codes
  (package
    (name "emacs-alt-codes")
    (version "20220704.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/alt-codes.git")
               (commit
                 "cd007b1627afc450a30183da82e50d611afe6b8e")))
        (sha256
          (base32
            "19fw0ayfha9py11bn564knbi6yzf3cjvzn4pg183mk4lb8h3964h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/alt-codes")
    (synopsis "Insert alt codes using meta key")
    (description
      "Documentation at https://melpa.org/#/alt-codes")
    (license #f)))

(define-public emacs-amd-mode
  (package
    (name "emacs-amd-mode")
    (version "20180111.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/amd-mode.el.git")
               (commit
                 "01fd19e0d635ccaf8e812364d8720733f2e84126")))
        (sha256
          (base32
            "040g07k2hcwqspansjqfpng0lxzkmip26ipz26q6mvkpwm2wilv4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-s
            emacs-f
            emacs-makey
            emacs-js2-mode
            emacs-js2-refactor))
    (home-page "unspecified")
    (synopsis
      "Minor mode for handling JavaScript AMD module requirements.")
    (description
      "Documentation at https://melpa.org/#/amd-mode")
    (license #f)))

(define-public emacs-ameba
  (package
    (name "emacs-ameba")
    (version "20200103.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-ameba/ameba.el.git")
               (commit
                 "0c4925ae0e998818326adcb47ed27ddf9761c7dc")))
        (sha256
          (base32
            "0jh0pfyqdks9xk43765vgm4569a8ny01pk3gy2p3vr5gdgfdm4a3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ameba.el")))
    (home-page
      "https://github.com/crystal-ameba/ameba.el")
    (synopsis "An interface to Crystal Ameba linter")
    (description
      "Documentation at https://melpa.org/#/ameba")
    (license #f)))

(define-public emacs-ample-regexps
  (package
    (name "emacs-ample-regexps")
    (version "20200508.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/immerrr/ample-regexps.el.git")
               (commit
                 "153969ce547afe410b8986f01c9ed4087c9cd20b")))
        (sha256
          (base32
            "0dkp7bcd7h2ds40wyszy11nmh7c2jxrwy04ayz7pbxh53ir7s2k0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "ample regular expressions for Emacs")
    (description
      "Documentation at https://melpa.org/#/ample-regexps")
    (license #f)))

(define-public emacs-ample-theme
  (package
    (name "emacs-ample-theme")
    (version "20180207.1745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/ample-theme.git")
               (commit
                 "f5a163626e04abda2d3c168f703c3f330f302a7c")))
        (sha256
          (base32
            "1z08mdl3i4nfs4ln64sks3b4vbir4r8czscrdqyvq4izr6j05j2f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jordonbiondo/ample-theme")
    (synopsis "Calm Dark Theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/ample-theme")
    (license #f)))

(define-public emacs-ample-zen-theme
  (package
    (name "emacs-ample-zen-theme")
    (version "20150119.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mjwall/ample-zen.git")
               (commit
                 "b277bb7abd4b6624e8d59f02474b79af50a007bd")))
        (sha256
          (base32
            "18z9jl5d19a132k6g1dvwqfbbdh5cx66b2qxlcjsfiqxlxglc2sa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mjwall/ample-zen")
    (synopsis "AmpleZen Theme for Emacs 24")
    (description
      "Documentation at https://melpa.org/#/ample-zen-theme")
    (license #f)))

(define-public emacs-amread-mode
  (package
    (name "emacs-amread-mode")
    (version "20230409.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/amread-mode.git")
               (commit
                 "b8622ae7b05f27d6f84c4e5d724bc79163ba9ce3")))
        (sha256
          (base32
            "1xjm3bqv517v95lcjjncw2yb6vamjc4la6xdw6afc6dwyq0cy19l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim emacs-hydra))
    (home-page "https://repo.or.cz/amread-mode.git")
    (synopsis
      "A minor mode helper user speed-reading")
    (description
      "Documentation at https://melpa.org/#/amread-mode")
    (license #f)))

(define-public emacs-amsreftex
  (package
    (name "emacs-amsreftex")
    (version "20220115.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/franburstall/amsreftex.git")
               (commit
                 "facf47b82572e3f62bd8d9b8d4f4d5258f6c8a38")))
        (sha256
          (base32
            "17g68m2vdvyqvf7rfyhpymafbpd91pc5m4vf5b7369qllngh6g8c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/franburstall/amsreftex")
    (synopsis
      "Add amsrefs bibliography support for reftex")
    (description
      "Documentation at https://melpa.org/#/amsreftex")
    (license #f)))

(define-public emacs-amx
  (package
    (name "emacs-amx")
    (version "20230413.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/amx.git")
               (commit
                 "5b3aa1aae84f4a225cb8d26ab79a32f97693f023")))
        (sha256
          (base32
            "1zii4np7mjybcrz2v78a2s86gs71j8i4f0vjqgdp8dkp6b60q3gv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/DarwinAwardWinner/amx/")
    (synopsis "Alternative M-x with extra features.")
    (description
      "Documentation at https://melpa.org/#/amx")
    (license #f)))

(define-public emacs-anaconda-mode
  (package
    (name "emacs-anaconda-mode")
    (version "20230821.2131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/anaconda-mode.git")
               (commit
                 "f1831877b6517d424b73dc81882244c74ff525fd")))
        (sha256
          (base32
            "0q33sjsidvgnd2s15hhxrh6sbs60989m6ai7w1fwf6rbknl2khh0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pythonic emacs-dash emacs-s emacs-f))
    (arguments
      '(#:files (:defaults "anaconda-mode.py")))
    (home-page
      "https://github.com/proofit404/anaconda-mode")
    (synopsis
      "Code navigation, documentation lookup and completion for Python")
    (description
      "Documentation at https://melpa.org/#/anaconda-mode")
    (license #f)))

(define-public emacs-anakondo
  (package
    (name "emacs-anakondo")
    (version "20210221.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/didibus/anakondo.git")
               (commit
                 "c48518560815c49d8d78fb9069906d17e883385e")))
        (sha256
          (base32
            "1fzsqd150gpmrj8kz3zy9cd78x9vank7ra720mljhyf04z0h1mj6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/didibus/anakondo")
    (synopsis
      "Adds clj-kondo based Clojure[Script] editing facilities")
    (description
      "Documentation at https://melpa.org/#/anakondo")
    (license #f)))

(define-public emacs-anaphora
  (package
    (name "emacs-anaphora")
    (version "20180618.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/anaphora.git")
               (commit
                 "3b2da3f759b244975852e79721c4a2dbad3905cf")))
        (sha256
          (base32
            "11fgiy029sqz7nvdm7dcal95lacryz9zql0x5h05z48nrrcl4bib"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/anaphora")
    (synopsis
      "anaphoric macros providing implicit temp variables")
    (description
      "Documentation at https://melpa.org/#/anaphora")
    (license #f)))

(define-public emacs-ancient-one-dark-theme
  (package
    (name "emacs-ancient-one-dark-theme")
    (version "20211030.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/holodata/ancient-one-dark-emacs.git")
               (commit
                 "db79f86842c10874ce18c1a1e4496e9d0e28bed9")))
        (sha256
          (base32
            "0aysq514abw75kxl3chq189xkd57mmyrv1j6rq41chndp94nl37r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DaniruKun/ancient-one-dark-emacs-theme")
    (synopsis
      "A color theme based off uetchy's Ancient One Dark Theme")
    (description
      "Documentation at https://melpa.org/#/ancient-one-dark-theme")
    (license #f)))

(define-public emacs-android-env
  (package
    (name "emacs-android-env")
    (version "20220810.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fernando-jascovich/android-env.el.git")
               (commit
                 "d2890f1156ed184314adbfcf01cdceb6ea79b10d")))
        (sha256
          (base32
            "1innx53w0vrsg6b7h4kiyy97kjjlcwx080h3hlrfrvnmmmawwfl5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/fernando-jascovich/android-env.el")
    (synopsis
      "Helper functions for working in android")
    (description
      "Documentation at https://melpa.org/#/android-env")
    (license #f)))

(define-public emacs-android-mode
  (package
    (name "emacs-android-mode")
    (version "20190903.811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/android-mode.git")
               (commit
                 "d5332e339a1f5e30559a53feffb8442ca79265d6")))
        (sha256
          (base32
            "10jhnxmxcjv9jpnsz2hrfb3rdl8306m8j30aclhvrvh4gcy1vwck"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/android-mode")
    (synopsis
      "Minor mode for Android application development")
    (description
      "Documentation at https://melpa.org/#/android-mode")
    (license #f)))

(define-public emacs-angry-police-captain
  (package
    (name "emacs-angry-police-captain")
    (version "20120829.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolpereira/angry-police-captain-el.git")
               (commit
                 "d11931c5cb63368dcc4a48797962428cca6d3e9d")))
        (sha256
          (base32
            "1m0c7ns7aiycg86cgglir8bkw730fslyg1n15m9ki0da4cnmm97a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Show quote from http://theangrypolicecaptain.com in the minibuffer")
    (description
      "Documentation at https://melpa.org/#/angry-police-captain")
    (license #f)))

(define-public emacs-angular-mode
  (package
    (name "emacs-angular-mode")
    (version "20151201.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/angular-mode.git")
               (commit
                 "8720cde86af0f1859ccc8580571e8d0ad1c52cff")))
        (sha256
          (base32
            "04kg2x0lif91knmkkh05mj42xw3dkzsnysjda6ian95v57wfg377"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/omouse/angularjs-mode")
    (synopsis "Major mode for Angular.js")
    (description
      "Documentation at https://melpa.org/#/angular-mode")
    (license #f)))

(define-public emacs-angular-snippets
  (package
    (name "emacs-angular-snippets")
    (version "20140514.523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/angular-snippets.el.git")
               (commit
                 "af5ae0a4a8603b040446c28afcf6ca01a8b4bd7b")))
        (sha256
          (base32
            "0hdm1a323mzxjfdply8ri3addk146f21d8cmpd18r7dw3j3cdfrn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments
      '(#:files ("*.el" "*.info" "dir" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for AngularJS")
    (description
      "Documentation at https://melpa.org/#/angular-snippets")
    (license #f)))

(define-public emacs-anki-connect
  (package
    (name "emacs-anki-connect")
    (version "20191123.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/anki-connect.el.git")
               (commit
                 "1324f0c248aa2c6e73d6cf93fad6119d699f7dae")))
        (sha256
          (base32
            "055nzb0dki4fmgmfhq83x7gciyp74r36a233hnl9lyd8wmb2hvqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/anki-connect.el")
    (synopsis "AnkiConnect API")
    (description
      "Documentation at https://melpa.org/#/anki-connect")
    (license #f)))

(define-public emacs-anki-editor
  (package
    (name "emacs-anki-editor")
    (version "20190922.1223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/louietan/anki-editor.git")
               (commit
                 "546774a453ef4617b1bcb0d1626e415c67cc88df")))
        (sha256
          (base32
            "1if610hq5j8rbjh1caw5bwbgnsn231awwxqbpwvrh966kdxzl4qf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash))
    (home-page
      "https://github.com/louietan/anki-editor")
    (synopsis
      "Minor mode for making Anki cards with Org")
    (description
      "Documentation at https://melpa.org/#/anki-editor")
    (license #f)))

(define-public emacs-anki-editor-view
  (package
    (name "emacs-anki-editor-view")
    (version "20230807.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/vherrmann/anki-editor-view.git")
               (commit
                 "4cf0a5c10c53029d83f24ad3c954243ffaca44ed")))
        (sha256
          (base32
            "0cq960q11lpic6zcw71z2ap80jzrzgcwwy2vwhgc1zwi8k8l9i4q"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/vherrmann/anki-editor-view")
    (synopsis "Open anki-editor notes from Anki")
    (description
      "Documentation at https://melpa.org/#/anki-editor-view")
    (license #f)))

(define-public emacs-anki-mode
  (package
    (name "emacs-anki-mode")
    (version "20201223.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/anki-mode.git")
               (commit
                 "d9b84028cd6a1ae040fb5604080a8b5fa8138562")))
        (sha256
          (base32
            "0imx5g615lfz71jjrb3hm84ll8p0bkrfi6w1qwxjsqgrwbw77s14"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-markdown-mode
            emacs-s
            emacs-request))
    (home-page
      "https://github.com/davidshepherd7/anki-mode")
    (synopsis "A major mode for creating anki cards")
    (description
      "Documentation at https://melpa.org/#/anki-mode")
    (license #f)))

(define-public emacs-anki-vocabulary
  (package
    (name "emacs-anki-vocabulary")
    (version "20200103.325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/anki-vocabulary.el.git")
               (commit
                 "863fe0219577f996ab126f1b7902db3c2cc59b2b")))
        (sha256
          (base32
            "0mfch10hvs5czgc3lj75s02bbf36gfdk3xvry717g8gqqa37j581"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-youdao-dictionary
            emacs-anki-connect
            emacs-s))
    (home-page
      "https://github.com/lujun9972/anki-vocabulary.el")
    (synopsis
      "Help you to create vocabulary cards in Anki")
    (description
      "Documentation at https://melpa.org/#/anki-vocabulary")
    (license #f)))

(define-public emacs-annalist
  (package
    (name "emacs-annalist")
    (version "20190929.207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/annalist.el.git")
               (commit
                 "134fa3f0fb91a636a1c005c483516d4b64905a6d")))
        (sha256
          (base32
            "06dvk7hd3bqjng87apf5dsbdn0rv0gcrj66m7dz26c8bg19mddcc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/noctuid/annalist.el")
    (synopsis
      "Record and display information such as keybindings")
    (description
      "Documentation at https://melpa.org/#/annalist")
    (license #f)))

(define-public emacs-annotate
  (package
    (name "emacs-annotate")
    (version "20231102.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bastibe/annotate.el.git")
               (commit
                 "dfe0d7c9905ac31716a35b37766ed6166c1f18d9")))
        (sha256
          (base32
            "0b7r62hd2lb640xvmcj6yg4kmaa0ndknbj61pjr4jkarb8v0p8k6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bastibe/annotate.el")
    (synopsis "annotate files without changing them")
    (description
      "Documentation at https://melpa.org/#/annotate")
    (license #f)))

(define-public emacs-annotate-depth
  (package
    (name "emacs-annotate-depth")
    (version "20160520.2040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/netromdk/annotate-depth.git")
               (commit
                 "fcb24fa36287250e40d195590c4ca4a8a696277b")))
        (sha256
          (base32
            "18cav5wl3d0yq15273rqmdwvrgw96lmqiq9x5fxhf3wjb543mifl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/netromdk/annotate-depth")
    (synopsis
      "Annotate buffer if indentation depth is beyond threshold.")
    (description
      "Documentation at https://melpa.org/#/annotate-depth")
    (license #f)))

(define-public emacs-annotation
  (package
    (name "emacs-annotation")
    (version "20200914.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agda/agda.git")
               (commit
                 "756ac774b5191b252bf993b67c7ccd5648cbbb65")))
        (sha256
          (base32
            "174vd5dw7wz2kf08mcaakr0r0qx64bigkdhr9zg7c68xj0w0kasn"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("src/data/emacs-mode/annotation.el")))
    (home-page "https://github.com/agda/agda")
    (synopsis
      "Functions for annotating text with faces and help bubbles")
    (description
      "Documentation at https://melpa.org/#/annotation")
    (license #f)))

(define-public emacs-annoying-arrows-mode
  (package
    (name "emacs-annoying-arrows-mode")
    (version "20161024.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/annoying-arrows-mode.el.git")
               (commit
                 "3c42e9807d7696da2da2a21b63beebf9cdb3f5dc")))
        (sha256
          (base32
            "06gs5ln3w1xvq8f8k9225rwiipbh9cs0dzyyb7z05717rmqixcc4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Ring the bell if using arrows too much")
    (description
      "Documentation at https://melpa.org/#/annoying-arrows-mode")
    (license #f)))

(define-public emacs-ansi
  (package
    (name "emacs-ansi")
    (version "20230306.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ansi.el.git")
               (commit
                 "c79806eacdf96e061abf5334f4c3364a995705d4")))
        (sha256
          (base32
            "0y4jifvy1jrc20q10dnh0fkzjxj6y2af4nr07k0047c2mfz69fmv"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/ansi")
    (synopsis "Turn string into ansi strings")
    (description
      "Documentation at https://melpa.org/#/ansi")
    (license #f)))

(define-public emacs-ansible
  (package
    (name "emacs-ansible")
    (version "20220114.45")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/emacs-ansible.git")
               (commit
                 "d89ac0ee57742cca0f0e0a3453d9dcc521575690")))
        (sha256
          (base32
            "1n38cvdpp2d00vl7ky4qf820rylffkapa3d9s4pwjw6lj55f00ak"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (arguments '(#:files ("*.el" "snippets" "dict")))
    (home-page
      "https://github.com/k1LoW/emacs-ansible")
    (synopsis "Ansible minor mode")
    (description
      "Documentation at https://melpa.org/#/ansible")
    (license #f)))

(define-public emacs-ansible-doc
  (package
    (name "emacs-ansible-doc")
    (version "20160924.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ansible-doc.git")
               (commit
                 "86083a7bb2ed0468ca64e52076b06441a2f8e9e0")))
        (sha256
          (base32
            "0lap404ch74w99n3xip176jr42b38xhyzkfnkyqg0g3wk2cd3aq8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lunaryorn/ansible-doc.el")
    (synopsis "Ansible documentation Minor Mode")
    (description
      "Documentation at https://melpa.org/#/ansible-doc")
    (license #f)))

(define-public emacs-ansible-vault
  (package
    (name "emacs-ansible-vault")
    (version "20211119.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellio/ansible-vault-mode.git")
               (commit
                 "8da2ad658dbe94c71aad1c75d6fd22888338030c")))
        (sha256
          (base32
            "1382ks8nakanv864flk070haibk7841ygb3nm262i7414zqsyfrk"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zellio/ansible-vault-mode")
    (synopsis
      "Minor mode for editing ansible vault files")
    (description
      "Documentation at https://melpa.org/#/ansible-vault")
    (license #f)))

(define-public emacs-ansilove
  (package
    (name "emacs-ansilove")
    (version "20230210.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/xgqt/emacs-ansilove.git")
               (commit
                 "abd64819dc67e1ababd38d39c7c7f6a2459987c0")))
        (sha256
          (base32
            "05q548dyb620kg12mgkmw6jpwbr2y2aqs5p7314y2c37khvw5irg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*")))
    (home-page
      "https://gitlab.com/xgqt/emacs-ansilove/")
    (synopsis
      "Display buffers as PNG images using ansilove")
    (description
      "Documentation at https://melpa.org/#/ansilove")
    (license #f)))

(define-public emacs-ant
  (package
    (name "emacs-ant")
    (version "20160211.1543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/ant-el.git")
               (commit
                 "510b5a3f57ee4b2855422d88d359a28922c1ab70")))
        (sha256
          (base32
            "0jb5vl3cq5m3r23fjhcxgxl4g011zkjkkyn5mqqxx22a1sydsvab"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "helpers for compiling with ant")
    (description
      "Documentation at https://melpa.org/#/ant")
    (license #f)))

(define-public emacs-anti-zenburn-theme
  (package
    (name "emacs-anti-zenburn-theme")
    (version "20180712.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00natic/anti-zenburn-theme.git")
               (commit
                 "dbafbaa86be67c1d409873f57a5c0bbe1e7ca158")))
        (sha256
          (base32
            "1h4lachmrpjiblah4rjd2cpvz6n6qh3i5cdp4wra2dk177h7kj6h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/m00natic/anti-zenburn-theme")
    (synopsis "Low-contrast Zenburn-inverted theme")
    (description
      "Documentation at https://melpa.org/#/anti-zenburn-theme")
    (license #f)))

(define-public emacs-anx-api
  (package
    (name "emacs-anx-api")
    (version "20140208.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmloveland/emacs-appnexus-api.git")
               (commit
                 "b2411ebc966ac32c3ffc61bc22bf183834df0fa0")))
        (sha256
          (base32
            "0fzxzar8m9qznfxv3wr7vfj9y2110wf6mm5cj55k3sd5djdjhmf1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Interact with the AppNexus API from Emacs.")
    (description
      "Documentation at https://melpa.org/#/anx-api")
    (license #f)))

(define-public emacs-anybar
  (package
    (name "emacs-anybar")
    (version "20160816.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tie-rack/anybar-el.git")
               (commit
                 "7a0743e0d31bcb36ab1bb2e351f3e7139c422ac5")))
        (sha256
          (base32
            "1s7vnp2xzffdj4pqdqn6mrirw33ms0yqlpxzz5pwj6xrbp2x5r6s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Control AnyBar from Emacs")
    (description
      "Documentation at https://melpa.org/#/anybar")
    (license #f)))

(define-public emacs-anyins
  (package
    (name "emacs-anyins")
    (version "20131229.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/anyins.git")
               (commit
                 "83844c17ac9b5b6c7655ee556b75689e4c8ea663")))
        (sha256
          (base32
            "05lq0bllgn44zs85mgnfdcyjasm6j8m70jdcxksf798i0qdqnk7n"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/antham/anyins")
    (synopsis
      "Insert content at multiple places from shell command or kill-ring")
    (description
      "Documentation at https://melpa.org/#/anyins")
    (license #f)))

(define-public emacs-anzu
  (package
    (name "emacs-anzu")
    (version "20211002.2255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/anzu.git")
               (commit
                 "5abb37455ea44fa401d5f4c1bdc58adb2448db67")))
        (sha256
          (base32
            "1rxw9l0mhb7m17h6mh3ndpa6sw1kh4awipvar6w7n6xc3wv4pajy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/anzu")
    (synopsis
      "Show number of matches in mode-line while searching")
    (description
      "Documentation at https://melpa.org/#/anzu")
    (license #f)))

(define-public emacs-aozora-view
  (package
    (name "emacs-aozora-view")
    (version "20140310.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/aozora-view.git")
               (commit
                 "b0390616d19e45f15f9a2f5d5688274831e721fd")))
        (sha256
          (base32
            "0528z3axjmplg2fdbv4jxgy1p39vr4rnsm4a3ps2fanf8bwsyx3l"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/kawabata/aozora-view")
    (synopsis "Aozora Bunko text Emacs viewer.")
    (description
      "Documentation at https://melpa.org/#/aozora-view")
    (license #f)))

(define-public emacs-apache-mode
  (package
    (name "emacs-apache-mode")
    (version "20210519.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/apache-mode.git")
               (commit
                 "f2c11aac2f5fc598123e04f4604bea248689a117")))
        (sha256
          (base32
            "1hcgfp4gav0dzjw38sl35b58hb2rlpmlckvam8fsqlxgszv50cza"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-php/apache-mode")
    (synopsis
      "Major mode for editing Apache httpd configuration files")
    (description
      "Documentation at https://melpa.org/#/apache-mode")
    (license #f)))

(define-public emacs-apdl-mode
  (package
    (name "emacs-apdl-mode")
    (version "20211023.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieter-wilhelm/apdl-mode.git")
               (commit
                 "c55c6468526100ba0da00bff05cfb17cdf8839cf")))
        (sha256
          (base32
            "1wmq1fwzfj10c445gyh7silrzi3d911fc8knc967g7hspw4kna3w"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "matlib" "template")))
    (home-page
      "https://github.com/dieter-wilhelm/apdl-mode")
    (synopsis
      "Major mode for the APDL programming language.")
    (description
      "Documentation at https://melpa.org/#/apdl-mode")
    (license #f)))

(define-public emacs-apel
  (package
    (name "emacs-apel")
    (version "20220720.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/apel.git")
               (commit
                 "82eb2325bd149dc57b43a9ce9402c6c6183e4052")))
        (sha256
          (base32
            "0qiw19pn1cs8y571irw7bjdygkvwan9ch2i1dg139dri4b6q1il6"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("alist.el"
         "apel-ver.el"
         "apel-pkg.el"
         "broken.el"
         "calist.el"
         "emu.el"
         "filename.el"
         "install.el"
         "inv-23.el"
         "invisible.el"
         "mcharset.el"
         "mcs-20.el"
         "mcs-e20.el"
         "mule-caesar.el"
         "path-util.el"
         "pccl-20.el"
         "pccl.el"
         "pces-20.el"
         "pces-e20.el"
         "pces.el"
         "pcustom.el"
         "poe.el"
         "poem-e20.el"
         "poem-e20_3.el"
         "poem.el"
         "product.el"
         "pym.el"
         "richtext.el"
         "static.el")))
    (home-page "unspecified")
    (synopsis
      "A Portable Emacs Library provides support for portable Emacs Lisp programs")
    (description
      "Documentation at https://melpa.org/#/apel")
    (license #f)))

(define-public emacs-apheleia
  (package
    (name "emacs-apheleia")
    (version "20231105.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/apheleia.git")
               (commit
                 "314af56e8dc1eb9f71a70e6c1858e6f6021cf708")))
        (sha256
          (base32
            "107pgklrdr37yhqvfhlsqrxalc0i8ais0nqrj1nwxwj55csvrrx7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/apheleia")
    (synopsis "Reformat buffer stably")
    (description
      "Documentation at https://melpa.org/#/apheleia")
    (license #f)))

(define-public emacs-apib-mode
  (package
    (name "emacs-apib-mode")
    (version "20200101.1017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/w-vi/apib-mode.git")
               (commit
                 "c6dd05201f6eb9295736d8668a79a7510d11159e")))
        (sha256
          (base32
            "0f5zph67h0pr445ykllz0pix2dg2kdxl0g5mhxaggdydizf24p45"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page "http://github.com/w-vi/apib-mode")
    (synopsis "Major mode for API Blueprint files")
    (description
      "Documentation at https://melpa.org/#/apib-mode")
    (license #f)))

(define-public emacs-apiwrap
  (package
    (name "emacs-apiwrap")
    (version "20180602.2231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/apiwrap.el.git")
               (commit
                 "a4fb21d96027369307b22439a4a6c765ee272f44")))
        (sha256
          (base32
            "19v92dgbwrb66bj5zs4fh0knba286i32afi42mvjmgagf228x6ka"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vermiculus/apiwrap.el")
    (synopsis "api-wrapping macros")
    (description
      "Documentation at https://melpa.org/#/apiwrap")
    (license #f)))

(define-public emacs-apparmor-mode
  (package
    (name "emacs-apparmor-mode")
    (version "20230912.248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/apparmor-mode.git")
               (commit
                 "3cdf282889aed371a708afeb275cf522a41541eb")))
        (sha256
          (base32
            "0lbpqyj9i5ghz83ari74pgs1nbsww8nrh7f7w79g0drpqj1cyx4s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alexmurray/apparmor-mode")
    (synopsis
      "Major mode for editing AppArmor policy files")
    (description
      "Documentation at https://melpa.org/#/apparmor-mode")
    (license #f)))

(define-public emacs-apples-mode
  (package
    (name "emacs-apples-mode")
    (version "20110121.418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tequilasunset/apples-mode.git")
               (commit
                 "83a9ab0d6ba82496e2f7df386909b1a55701fccb")))
        (sha256
          (base32
            "0br0jl6xnajdx37s5cvs13srn9lldg58y9587a11s3s651xjdq0z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "apples-mode")))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing and executing AppleScript code")
    (description
      "Documentation at https://melpa.org/#/apples-mode")
    (license #f)))

(define-public emacs-applescript-mode
  (package
    (name "emacs-applescript-mode")
    (version "20210802.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/applescript-mode.git")
               (commit
                 "00c141bbff46c89a96598b605dee05dd1d89f624")))
        (sha256
          (base32
            "1d3ssyp90k26282p46c91wj1bvqxpvghcsicp14bnh78llwninvc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/applescript-mode")
    (synopsis
      "major mode for editing AppleScript source")
    (description
      "Documentation at https://melpa.org/#/applescript-mode")
    (license #f)))

(define-public emacs-aproject
  (package
    (name "emacs-aproject")
    (version "20220410.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vietor/aproject.git")
               (commit
                 "13e176ee69851403bec6471c5cceed17b7912b6f")))
        (sha256
          (base32
            "1kb1vlqla4l2mixkd5awmgbh0bzwbngj8sq5mjvrw6slf7i35xjn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vietor/aproject")
    (synopsis "Basic project framework for Emacs")
    (description
      "Documentation at https://melpa.org/#/aproject")
    (license #f)))

(define-public emacs-apropospriate-theme
  (package
    (name "emacs-apropospriate-theme")
    (version "20230925.114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/apropospriate-theme.git")
               (commit
                 "591e0c2bcc886009e84d9815bd64428b1b04a97b")))
        (sha256
          (base32
            "1m19p6jp8qmak504yphhzji1f653n3qdhr67jd5fj5z96mlkv4rh"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/waymondo/apropospriate-theme")
    (synopsis
      "A colorful, low-contrast, light & dark theme set for Emacs with a fun name.")
    (description
      "Documentation at https://melpa.org/#/apropospriate-theme")
    (license #f)))

(define-public emacs-apt-sources-list
  (package
    (name "emacs-apt-sources-list")
    (version "20180527.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.korewanetadesu.com/apt-sources-list.git")
               (commit
                 "5289443ceff230dfc8a2c1c6b524c90560eb08a5")))
        (sha256
          (base32
            "1svicgmiibnim47fhlik3fgs0d6427and5h61s3rhvfj3352d9li"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.korewanetadesu.com/apt-sources-list.git")
    (synopsis
      "Mode for editing APT source.list files")
    (description
      "Documentation at https://melpa.org/#/apt-sources-list")
    (license #f)))

(define-public emacs-aqi
  (package
    (name "emacs-aqi")
    (version "20230530.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/aqi.git")
               (commit
                 "cbff3c6ce691a3a1d2f5636384e29d43f0e1d236")))
        (sha256
          (base32
            "0r87kvcdj93q61kxk1713z3rza0p1mircsadx53dj3i0f01bx3qa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/zzkt/aqi")
    (synopsis
      "Air quality data from the World Air Quality Index")
    (description
      "Documentation at https://melpa.org/#/aqi")
    (license #f)))

(define-public emacs-arch-packer
  (package
    (name "emacs-arch-packer")
    (version "20170730.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brotzeit/arch-packer.git")
               (commit
                 "940e96f7d357c6570b675a0f942181c787f1bfd7")))
        (sha256
          (base32
            "0m80ka51m7a1797q6br41x96znvqfmpwzh3vk4mz66mdx2r4xk77"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-async emacs-dash))
    (home-page
      "https://github.com/brotzeitmacher/arch-packer")
    (synopsis
      "Arch Linux package management frontend")
    (description
      "Documentation at https://melpa.org/#/arch-packer")
    (license #f)))

(define-public emacs-archive-phar
  (package
    (name "emacs-archive-phar")
    (version "20221009.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/archive-phar.el.git")
               (commit
                 "0bda3e338446d06dbe9d8c8837dee746de48632f")))
        (sha256
          (base32
            "12gxlg70m6h5gay96mbszg8kkh8c1ib4g132zdr3pzb7w1qgvhh3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-php-runtime emacs-datetime-format))
    (home-page
      "https://github.com/emacs-php/archive-phar.el")
    (synopsis "Phar file support for archive-mode")
    (description
      "Documentation at https://melpa.org/#/archive-phar")
    (license #f)))

(define-public emacs-archive-region
  (package
    (name "emacs-archive-region")
    (version "20200316.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/archive-region.git")
               (commit
                 "53cd2d96ea7c33f320353982b36854f25c900c2e")))
        (sha256
          (base32
            "1c3ji0asnhdls8pa5hbqg65kc35jc6yndib7cx1zvnpb8pjlvbbr"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/archive-region.el")
    (synopsis
      "Move region to archive file instead of killing")
    (description
      "Documentation at https://melpa.org/#/archive-region")
    (license #f)))

(define-public emacs-archive-rpm
  (package
    (name "emacs-archive-rpm")
    (version "20220527.632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbarrientos/archive-rpm.git")
               (commit
                 "cb48fee04cb0cbb26f760a3b95649f7dac78c6ec")))
        (sha256
          (base32
            "088rcqlwhdcaal99cbwsfg93nvzil2kix28zib2lxv6lfapjpzwp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "RPM and CPIO support for archive-mode")
    (description
      "Documentation at https://melpa.org/#/archive-rpm")
    (license #f)))

(define-public emacs-arduino-cli-mode
  (package
    (name "emacs-arduino-cli-mode")
    (version "20210511.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motform/arduino-cli-mode.git")
               (commit
                 "a93de7e8fef202163df4657f2ab522b57f70f202")))
        (sha256
          (base32
            "1jmwjz1ldr0lgh3vvpn8y6qzpqzavmdqcgf9jz4sx0v8nd5hr4pn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/motform/arduino-cli-mode")
    (synopsis "Arduino-CLI command wrapper")
    (description
      "Documentation at https://melpa.org/#/arduino-cli-mode")
    (license #f)))

(define-public emacs-arduino-mode
  (package
    (name "emacs-arduino-mode")
    (version "20220210.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/arduino-mode.git")
               (commit
                 "652c6a328fa8f2db06534d5f231c6b6933be3edc")))
        (sha256
          (base32
            "16izwrk1dfsa14kylfhsxdwkx76g0jdk0znl1z7cypxh5q9ijy1x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-spinner))
    (home-page "https://repo.or.cz/arduino-mode.git")
    (synopsis "Major mode for editing Arduino code")
    (description
      "Documentation at https://melpa.org/#/arduino-mode")
    (license #f)))

(define-public emacs-aria2
  (package
    (name "emacs-aria2")
    (version "20230314.2131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ukaszg/aria2.git")
               (commit
                 "1f2cbe624f3a4e0109b5dc123bb4bbed496b15a7")))
        (sha256
          (base32
            "166l6x802zz32zh6xlblfssd2rpvkkg8lf5apz76dbr4h0m2zw1k"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/ukaszg/aria2-mode")
    (synopsis
      "Control aria2c commandline tool from Emacs")
    (description
      "Documentation at https://melpa.org/#/aria2")
    (license #f)))

(define-public emacs-ariadne
  (package
    (name "emacs-ariadne")
    (version "20131117.1711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/manzyuk/ariadne-el.git")
               (commit
                 "6fe401c7f996bcbc2f685e7971324c6f5e5eaf15")))
        (sha256
          (base32
            "0vh9wfc3657sd12ybjcrxpg6f757x2ghkcl1lw01szmyy5vmj27h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bert))
    (home-page "unspecified")
    (synopsis "Ariadne plugin for Emacs")
    (description
      "Documentation at https://melpa.org/#/ariadne")
    (license #f)))

(define-public emacs-arjen-grey-theme
  (package
    (name "emacs-arjen-grey-theme")
    (version "20170522.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/credmp/arjen-grey-theme.git")
               (commit
                 "4cd0be72b65d42390e2105cfdaa408a1ead8d8d1")))
        (sha256
          (base32
            "1n5axwn498ahb6984ir1zfl8vvwgbvq9bbrdfzydkmjljhgrp0rd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/credmp/arjen-grey")
    (synopsis "A soothing dark grey theme")
    (description
      "Documentation at https://melpa.org/#/arjen-grey-theme")
    (license #f)))

(define-public emacs-artbollocks-mode
  (package
    (name "emacs-artbollocks-mode")
    (version "20170524.422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sachac/artbollocks-mode.git")
               (commit
                 "33a41ca4f8206f57e5498a526d3b0ea18d08bb93")))
        (sha256
          (base32
            "06a2dp6nwy8xjr01k6d2c611qr2n9m7hdkrz9fci9r4rv1ikx5xv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sachac/artbollocks-mode")
    (synopsis
      "Improve your writing (especially about art)")
    (description
      "Documentation at https://melpa.org/#/artbollocks-mode")
    (license #f)))

(define-public emacs-arview
  (package
    (name "emacs-arview")
    (version "20160419.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/afainer/arview.git")
               (commit
                 "5437b4221b64b238c273a651d4792c577dba6d45")))
        (sha256
          (base32
            "1yvirfmvf6v5khl7zhx2ddv9bbxnx1qhwfzi0gy2nmbxlykb6s2j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/afainer/arview")
    (synopsis
      "extract and view archives in the temporary directory")
    (description
      "Documentation at https://melpa.org/#/arview")
    (license #f)))

(define-public emacs-arxiv-citation
  (package
    (name "emacs-arxiv-citation")
    (version "20230713.627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/slotThe/arxiv-citation.git")
               (commit
                 "04de0dae1121fb92c30b393449c6f8d6d940dbed")))
        (sha256
          (base32
            "0pvlmp4jmgjsym274v22dz1z9rqwj0mnxjkk3snxdz8z88gqrxkc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://gitlab.com/slotThe/arXiv-citation")
    (synopsis
      "Utility functions for dealing with arXiv papers")
    (description
      "Documentation at https://melpa.org/#/arxiv-citation")
    (license #f)))

(define-public emacs-arxiv-mode
  (package
    (name "emacs-arxiv-mode")
    (version "20230121.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fizban007/arxiv-mode.git")
               (commit
                 "ff982725f1b10af329b614741bfed2c60ebc2a21")))
        (sha256
          (base32
            "0pl2a025hq0l7f81v8k41pkyv0pgigb6bh1y4xph5dlyqhgbgz5i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page
      "https://github.com/fizban007/arxiv-mode")
    (synopsis
      "Read and search for articles on arXiv.org")
    (description
      "Documentation at https://melpa.org/#/arxiv-mode")
    (license #f)))

(define-public emacs-ascii-table
  (package
    (name "emacs-ascii-table")
    (version "20221230.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-ascii-table.git")
               (commit
                 "c71f54b85edc6bd42abdc79dd82248958c8a24f9")))
        (sha256
          (base32
            "1hifgyadzsp4xl0w5fpsfshnf5605i475nbgaf43f3j0mx5q1lgx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-ascii-table")
    (synopsis "Interactive ASCII table")
    (description
      "Documentation at https://melpa.org/#/ascii-table")
    (license #f)))

(define-public emacs-asilea
  (package
    (name "emacs-asilea")
    (version "20150105.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/asilea.git")
               (commit
                 "2aab1cc63b64ef08d12e84fd7ba5c94065f6039f")))
        (sha256
          (base32
            "1s973vzivibaqjb8acn4ylrdasxh17jcfmmvqp4wm05nwhg75597"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Fanael/asilea")
    (synopsis
      "Find best compiler options using simulated annealing")
    (description
      "Documentation at https://melpa.org/#/asilea")
    (license #f)))

(define-public emacs-asm-blox
  (package
    (name "emacs-asm-blox")
    (version "20221220.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zkry/asm-blox.git")
               (commit
                 "5517efb1e186139197a2d348b7339a72dd379af8")))
        (sha256
          (base32
            "0f4nymkxk2x3jvkxfbgp5v8ap38j9sz1g6vnw6lrpvbgrdzazx6g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml))
    (home-page "https://github.com/zkry/asm-blox")
    (synopsis "Programming game involving WAT")
    (description
      "Documentation at https://melpa.org/#/asm-blox")
    (license #f)))

(define-public emacs-asn1-mode
  (package
    (name "emacs-asn1-mode")
    (version "20170729.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/asn1-mode.git")
               (commit
                 "d5d4a8259daf708411699bcea85d322f18beb972")))
        (sha256
          (base32
            "067khpi4ghzyifrk1vhi57n3alp67qks4k4km11hasiavi5gsjmp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/kawabata/asn1-mode/")
    (synopsis "ASN.1/GDMO mode for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/asn1-mode")
    (license #f)))

(define-public emacs-assess
  (package
    (name "emacs-assess")
    (version "20220719.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/assess.git")
               (commit
                 "44083d94feb45d3636f7ee6c55e0ef6bbb32b938")))
        (sha256
          (base32
            "1mgx6sism6l1mwmz81fq6wcxkxlbyn4k6p8nl0v8xc1zsh2mn8m0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-m-buffer))
    (home-page "unspecified")
    (synopsis "Test support functions")
    (description
      "Documentation at https://melpa.org/#/assess")
    (license #f)))

(define-public emacs-astro-ts-mode
  (package
    (name "emacs-astro-ts-mode")
    (version "20230802.437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sorixelle/astro-ts-mode.git")
               (commit
                 "207e5da093aa8141b9dd2f5e98afd8952832b4b0")))
        (sha256
          (base32
            "0yfz5xdpwzbpihbnm5kixmjpqcmj86h6lm71ji8vzq044rassfga"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Sorixelle/astro-ts-mode")
    (synopsis
      "Major mode for editing Astro templates")
    (description
      "Documentation at https://melpa.org/#/astro-ts-mode")
    (license #f)))

(define-public emacs-astyle
  (package
    (name "emacs-astyle")
    (version "20200328.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/storvik/emacs-astyle.git")
               (commit
                 "04ff2941f08c4b731fe6a18ee1697436d1ca1cc0")))
        (sha256
          (base32
            "0midga1dz9yl7mzn6syb3iwnfpzvnfpqnxi9rsv63rqnrm36qy4q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/storvik/emacs-astyle")
    (synopsis "Astyle formatter functions")
    (description
      "Documentation at https://melpa.org/#/astyle")
    (license #f)))

(define-public emacs-asx
  (package
    (name "emacs-asx")
    (version "20191024.1100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ragone/asx.git")
               (commit
                 "ec4bf74de602b97df1f306d51acf4cda45184aac")))
        (sha256
          (base32
            "1j505ijrgd0rwh69jl7677sgf5ryjwp160nrp0w0bskisrf028d7"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ragone/asx")
    (synopsis "Ask StackExchange/StackOverflow")
    (description
      "Documentation at https://melpa.org/#/asx")
    (license #f)))

(define-public emacs-async
  (package
    (name "emacs-async")
    (version "20231105.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/emacs-async.git")
               (commit
                 "3bade0e92e1ee8e716c5db14bc8315b17299f138")))
        (sha256
          (base32
            "13b88shazsi7crn8cpb3f0k4vzai45srymwriq14axmq48i8z33m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/emacs-async")
    (synopsis "Asynchronous processing in Emacs")
    (description
      "Documentation at https://melpa.org/#/async")
    (license #f)))

(define-public emacs-async-await
  (package
    (name "emacs-async-await")
    (version "20220827.437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chuntaro/emacs-async-await.git")
               (commit
                 "e0d15e8057ed7520100bc50c5552278292ebcb07")))
        (sha256
          (base32
            "1yjkirjwr1mngl13i1zsk0bip18nn85zbc3d175a23mv6i56c0yq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-iter2))
    (home-page
      "https://github.com/chuntaro/emacs-async-await")
    (synopsis "Async/Await")
    (description
      "Documentation at https://melpa.org/#/async-await")
    (license #f)))

(define-public emacs-async-backup
  (package
    (name "emacs-async-backup")
    (version "20220131.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://tildegit.org/contrapunctus/async-backup.git")
               (commit
                 "c90b17c2033adcc34dbdd1b342018d6556756128")))
        (sha256
          (base32
            "043wka45qhl9lgskbxkn298km5y2kk3mb9p6li6kc6bnzazj9jdf"))))
    (build-system melpa-build-system)
    (home-page
      "https://tildegit.org/contrapunctus/async-backup")
    (synopsis
      "Backup on each save without freezing Emacs")
    (description
      "Documentation at https://melpa.org/#/async-backup")
    (license #f)))

(define-public emacs-async-job-queue
  (package
    (name "emacs-async-job-queue")
    (version "20230427.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/owinebar/emacs-async-job-queue.git")
               (commit
                 "eeafcce7f960305666b2a51aec55cc6333f6af1b")))
        (sha256
          (base32
            "1hdqfb1nygkg6pd2f0l38ms34ivqdr5spkvw2ismy2vjg3frg2bc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async emacs-queue))
    (home-page
      "https://github.com/owinebar/emacs-async-job-queue")
    (synopsis
      "Dispatch queue of async jobs to a fixed number of slots")
    (description
      "Documentation at https://melpa.org/#/async-job-queue")
    (license #f)))

(define-public emacs-async-status
  (package
    (name "emacs-async-status")
    (version "20230821.204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seokbeomKim/async-status.git")
               (commit
                 "d2f5becc9850c26aa71fb581f9fc389eac740f52")))
        (sha256
          (base32
            "1rk3zpbp7nxia7xiwj8yhji497za8npsl6w17848g29gj6hkgyji"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-svg-lib emacs-posframe))
    (home-page
      "https://github.com/seokbeomkim/async-status")
    (synopsis "A package for indicator support")
    (description
      "Documentation at https://melpa.org/#/async-status")
    (license #f)))

(define-public emacs-asyncloop
  (package
    (name "emacs-asyncloop")
    (version "20231028.1257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meedstrom/asyncloop.git")
               (commit
                 "cf595cc3e437421972a6f1a088a28a9a5060e07a")))
        (sha256
          (base32
            "1l7r7bl6v51c0gbqqb5yvxrrvhf3dh8akvgr46v01kn3pm2ndpj8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/meedstrom/asyncloop")
    (synopsis "Non-blocking series of functions")
    (description
      "Documentation at https://melpa.org/#/asyncloop")
    (license #f)))

(define-public emacs-atcoder-tools
  (package
    (name "emacs-atcoder-tools")
    (version "20200109.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/emacs-atcoder-tools.git")
               (commit
                 "cfe61ed18ea9b3b1bfb6f9e7d80a47599680cd1f")))
        (sha256
          (base32
            "04v775vsy01h7wv2p4nc26d0p9ss8106v4whqfgd0c1rrkh5012p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "https://github.com/sei40kr/atcoder-tools")
    (synopsis "An atcoder-tools client")
    (description
      "Documentation at https://melpa.org/#/atcoder-tools")
    (license #f)))

(define-public emacs-atl-long-lines
  (package
    (name "emacs-atl-long-lines")
    (version "20220704.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/atl-long-lines.git")
               (commit
                 "074183f5d4fe77c9b5f1d0c90287a41aaa3e5eff")))
        (sha256
          (base32
            "08dc48b4phwgll55qmc8ha8wakckpv7nraacnzlx589hbjd2dsvx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/atl-long-lines")
    (synopsis
      "Turn off truncate-lines when the line is long")
    (description
      "Documentation at https://melpa.org/#/atl-long-lines")
    (license #f)))

(define-public emacs-atl-markup
  (package
    (name "emacs-atl-markup")
    (version "20220704.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/atl-markup.git")
               (commit
                 "14639839f5e206b315c800ab4dc09d2d1693fa0b")))
        (sha256
          (base32
            "0iry5q6vh0528npf50nxxvdv7hzfsb8sni83mnhk1nckldsbwv05"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/atl-markup")
    (synopsis
      "Automatically truncate lines for markup languages")
    (description
      "Documentation at https://melpa.org/#/atl-markup")
    (license #f)))

(define-public emacs-atom-dark-theme
  (package
    (name "emacs-atom-dark-theme")
    (version "20220114.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whitlockjc/atom-dark-theme-emacs.git")
               (commit
                 "2b3c7ad42bbcab3214a131f8957b92e717b36ad3")))
        (sha256
          (base32
            "1s2nkl9qcsynyw4gr1apyrgfxxcx3rwrh2dlvsz4q6rzgvd5231n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/whitlockjc/atom-dark-theme-emacs")
    (synopsis
      "An Emacs port of the Atom Dark theme from Atom.io.")
    (description
      "Documentation at https://melpa.org/#/atom-dark-theme")
    (license #f)))

(define-public emacs-atom-one-dark-theme
  (package
    (name "emacs-atom-one-dark-theme")
    (version "20210128.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jonathanchu/atom-one-dark-theme.git")
               (commit
                 "b34b62e85593812b55ee552a1cb0eecfb04767bb")))
        (sha256
          (base32
            "1n98fxspx1qmm5p5s591jy2baviqy8b5hjn9hsrvqbmixc7arrhv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jonathanchu/atom-one-dark-theme")
    (synopsis "Atom One Dark color theme")
    (description
      "Documentation at https://melpa.org/#/atom-one-dark-theme")
    (license #f)))

(define-public emacs-atomic-chrome
  (package
    (name "emacs-atomic-chrome")
    (version "20230304.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha22jp/atomic-chrome.git")
               (commit
                 "f1b077be7e414f457191d72dcf5eedb4371f9309")))
        (sha256
          (base32
            "01024ikcy23hkxjpy6qlsa8sj3cyf4p3igx5i31qkq21dm7b8xqv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page
      "https://github.com/alpha22jp/atomic-chrome")
    (synopsis
      "Edit Chrome text area with Emacs using Atomic Chrome")
    (description
      "Documentation at https://melpa.org/#/atomic-chrome")
    (license #f)))

(define-public emacs-attrap
  (package
    (name "emacs-attrap")
    (version "20230810.808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jyp/attrap.git")
               (commit
                 "bb61a4bc3d85a76e807f1ecede17031b51c8caed")))
        (sha256
          (base32
            "01jf1rp1inwig72j4n752cvk29c9zi5kc68mqnsj51cqga3w42xi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-s))
    (home-page "https://github.com/jyp/attrap")
    (synopsis "ATtempt To Repair At Point")
    (description
      "Documentation at https://melpa.org/#/attrap")
    (license #f)))

(define-public emacs-auctex-cluttex
  (package
    (name "emacs-auctex-cluttex")
    (version "20220730.1100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tsuu32/auctex-cluttex.git")
               (commit
                 "f4012ac86e612eac7662c62afd946e59b3b405bd")))
        (sha256
          (base32
            "163p1x5zrw39cq2l7vf4zf8283a0bsg9wfs25yvs77dlgsvzvb5c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/tsuu32/auctex-cluttex")
    (synopsis "ClutTeX support for AUCTeX")
    (description
      "Documentation at https://melpa.org/#/auctex-cluttex")
    (license #f)))

(define-public emacs-auctex-latexmk
  (package
    (name "emacs-auctex-latexmk")
    (version "20221025.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/auctex-latexmk.git")
               (commit
                 "b00a95e6b34c94987fda5a57c20cfe2f064b1c7a")))
        (sha256
          (base32
            "0bbvb4aw9frg4fc0z9qkc5xd2s9x65k6vdscy5svsy0h17iacsbb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/tom-tan/auctex-latexmk/")
    (synopsis "Add LatexMk support to AUCTeX")
    (description
      "Documentation at https://melpa.org/#/auctex-latexmk")
    (license #f)))

(define-public emacs-auctex-lua
  (package
    (name "emacs-auctex-lua")
    (version "20151121.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/auctex-lua.git")
               (commit
                 "799cd8ac10c96991bb63d9aa60528ae5d8c786b5")))
        (sha256
          (base32
            "0lgfgvnaln5rhhwgcrzwrhbj0gz8sgaf6xxdl7njf3sa6bfgngsz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auctex emacs-lua-mode))
    (home-page
      "http://github.com/vermiculus/auctex-lua")
    (synopsis "Lua editing support for AUCTeX")
    (description
      "Documentation at https://melpa.org/#/auctex-lua")
    (license #f)))

(define-public emacs-audacious
  (package
    (name "emacs-audacious")
    (version "20210917.51")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shishimaru/audacious.el.git")
               (commit
                 "65c37f12a5c774a0ae434beee27ff7737006dd2f")))
        (sha256
          (base32
            "1pj3ryi1crnfvq3m8wyysb6pyvsp0x2wrvddlnpj031qk7xxdd6h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/shishimaru/audacious.el")
    (synopsis "Emacs interface to control audacious")
    (description
      "Documentation at https://melpa.org/#/audacious")
    (license #f)))

(define-public emacs-audio-notes-mode
  (package
    (name "emacs-audio-notes-mode")
    (version "20170611.2159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/audio-notes-mode.git")
               (commit
                 "fa38350829c7e97257efc746a010471d33748a68")))
        (sha256
          (base32
            "1srg6rg3j9ri2cyr4g78dfqq3fhpn6hf3mq4iz2jfqjayppfv38b"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/audio-notes-mode")
    (synopsis
      "Play audio notes synced from somewhere else.")
    (description
      "Documentation at https://melpa.org/#/audio-notes-mode")
    (license #f)))

(define-public emacs-aurel
  (package
    (name "emacs-aurel")
    (version "20170114.937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/aurel.git")
               (commit
                 "fc7ad208f43f8525f84a18941c9b55f956df8961")))
        (sha256
          (base32
            "0mcbw8p4wrnnr39wzkfz9kc899w0k1jb00q1926mchf202cmnz94"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bui emacs-dash))
    (home-page "https://github.com/alezost/aurel")
    (synopsis
      "Search, get info, vote for and download AUR packages")
    (description
      "Documentation at https://melpa.org/#/aurel")
    (license #f)))

(define-public emacs-aurora-config-mode
  (package
    (name "emacs-aurora-config-mode")
    (version "20180216.2302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bdd/aurora-config-mode.el.git")
               (commit
                 "8273ec7937a21b469b9dbb6c11714255b890f410")))
        (sha256
          (base32
            "1dlhf35hhjgkd9bqbpwrb825g1z6nh14mg31jg2avv55s28j0riy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bdd/aurora-config.el")
    (synopsis
      "Major mode for Apache Aurora configuration files")
    (description
      "Documentation at https://melpa.org/#/aurora-config-mode")
    (license #f)))

(define-public emacs-auth-source-1password
  (package
    (name "emacs-auth-source-1password")
    (version "20230529.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dlobraico/auth-source-1password.git")
               (commit
                 "7bb8ad3507c58cc642b2ebbd7e57a91efab80e14")))
        (sha256
          (base32
            "1ph9kg0v4xnc5ymcg71q9pvpp83qg67k788xkggk32xjriv5cq57"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dlobraico")
    (synopsis
      "1password integration for auth-source")
    (description
      "Documentation at https://melpa.org/#/auth-source-1password")
    (license #f)))

(define-public emacs-auth-source-gopass
  (package
    (name "emacs-auth-source-gopass")
    (version "20230109.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/triplem/auth-source-gopass.git")
               (commit
                 "6f7f0cc0d682f66d11f7fac4fa5c1e79904232da")))
        (sha256
          (base32
            "07n4bq64aja0f15mz18x45ncq0400fdxjlpc98hzycligihhz4fb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/")
    (synopsis "Gopass integration for auth-source")
    (description
      "Documentation at https://melpa.org/#/auth-source-gopass")
    (license #f)))

(define-public emacs-auth-source-keytar
  (package
    (name "emacs-auth-source-keytar")
    (version "20221231.1654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/auth-source-keytar.git")
               (commit
                 "8fcd935ee131174a1ed7f132614257411ed441bc")))
        (sha256
          (base32
            "1xlg9zm59dymnwqqs4rcn5xiwvvz8345gcnbr7c2x3zxc75vkn1x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-keytar emacs-s))
    (home-page
      "https://github.com/emacs-grammarly/auth-source-keytar")
    (synopsis "Integrate auth-source with keytar")
    (description
      "Documentation at https://melpa.org/#/auth-source-keytar")
    (license #f)))

(define-public emacs-auth-source-kwallet
  (package
    (name "emacs-auth-source-kwallet")
    (version "20210605.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vaartis/auth-source-kwallet.git")
               (commit
                 "053ed5e964acaf6f16a1708c36d812eeb7c1817d")))
        (sha256
          (base32
            "0jqn49wqhg3qh6m76zc65z37kaw562laifjjj8lhi9g3f86sldsp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vaartis/auth-source-kwallet")
    (synopsis "KWallet integration for auth-source")
    (description
      "Documentation at https://melpa.org/#/auth-source-kwallet")
    (license #f)))

(define-public emacs-auth-source-xoauth2
  (package
    (name "emacs-auth-source-xoauth2")
    (version "20220804.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ccrusius/auth-source-xoauth2.git")
               (commit
                 "5d1adfa649bb5a9df20a2fa89f235a55a64b52e4")))
        (sha256
          (base32
            "06ssvsqac1vlbay9yp1fidbils56dwfgbzwk4nrnr5qxnl2rd370"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ccrusius/auth-source-xoauth2")
    (synopsis "Integrate auth-source with XOAUTH2")
    (description
      "Documentation at https://melpa.org/#/auth-source-xoauth2")
    (license #f)))

(define-public emacs-auto-async-byte-compile
  (package
    (name "emacs-auto-async-byte-compile")
    (version "20160916.454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/auto-async-byte-compile.git")
               (commit
                 "8681e74ddb8481789c5dbb3cafabb327db4c4484")))
        (sha256
          (base32
            "1g98gla9qdqmifsxakhkbxlljy2ln1s3wfahk9zycrwgzfjlsdf4"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/auto-async-byte-compile.el")
    (synopsis
      "Automatically byte-compile when saved")
    (description
      "Documentation at https://melpa.org/#/auto-async-byte-compile")
    (license #f)))

(define-public emacs-auto-auto-indent
  (package
    (name "emacs-auto-auto-indent")
    (version "20131106.1903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/auto-auto-indent.git")
               (commit
                 "0139378577f936d34b20276af6f022fb457af490")))
        (sha256
          (base32
            "1whbvqylwnxg8d8gn55kcky39rgyc49rakyxlbkplh813lk6lxb7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-es-lib))
    (home-page
      "https://github.com/sabof/auto-auto-indent")
    (synopsis "Indents code as you type")
    (description
      "Documentation at https://melpa.org/#/auto-auto-indent")
    (license #f)))

(define-public emacs-auto-compile
  (package
    (name "emacs-auto-compile")
    (version "20230901.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/auto-compile.git")
               (commit
                 "f72fe7ffab6c15c70b05370c03eb0d8dda3c4938")))
        (sha256
          (base32
            "1xqy1cz7sfjpj8i2kafbzlnmws06mv15nn4045q75p8qsw4bx8mc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacscollective/auto-compile")
    (synopsis
      "Automatically compile Emacs Lisp libraries")
    (description
      "Documentation at https://melpa.org/#/auto-compile")
    (license #f)))

(define-public emacs-auto-complete
  (package
    (name "emacs-auto-complete")
    (version "20230927.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/auto-complete/auto-complete.git")
               (commit
                 "56c178b07185e37c699fd27393c447bca88076a7")))
        (sha256
          (base32
            "0h0fqr3bi0v3wrd8wzhvi4rkdz44v2k976q0353l3x8yk34mcc2l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (arguments '(#:files ("*.el" "dict")))
    (home-page
      "https://github.com/auto-complete/auto-complete")
    (synopsis "Auto Completion for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/auto-complete")
    (license #f)))

(define-public emacs-auto-complete-auctex
  (package
    (name "emacs-auto-complete-auctex")
    (version "20140223.1758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/monsanto/auto-complete-auctex.git")
               (commit
                 "855633f668bcc4b9408396742a7cb84e0c4a2f77")))
        (sha256
          (base32
            "1wri8q5llpy1q1h4ac4kjnnkgj6fby8i9vrpr6mrb13d4gnk4gr2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet emacs-auto-complete))
    (home-page "unspecified")
    (synopsis "auto-completion for auctex")
    (description
      "Documentation at https://melpa.org/#/auto-complete-auctex")
    (license #f)))

(define-public emacs-auto-complete-c-headers
  (package
    (name "emacs-auto-complete-c-headers")
    (version "20150912.323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/auto-complete-c-headers.git")
               (commit
                 "52fef720c6f274ad8de52bef39a343421006c511")))
        (sha256
          (base32
            "12mzi6bwg702sp0f0wd1ag555blbpk252rr9rqs03bn8pkw89h4n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page "unspecified")
    (synopsis
      "An auto-complete source for C/C++ header files")
    (description
      "Documentation at https://melpa.org/#/auto-complete-c-headers")
    (license #f)))

(define-public emacs-auto-complete-chunk
  (package
    (name "emacs-auto-complete-chunk")
    (version "20140225.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/auto-complete-chunk.git")
               (commit
                 "a9aa77ffb84a1037984a7ce4dda25074272f13fe")))
        (sha256
          (base32
            "1zhbpxpl443ghpkl9i68jcjfcw1vnf8ky06pf5qjjmqbxlcyd9li"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (arguments '(#:files ("auto-complete-chunk.el")))
    (home-page
      "https://github.com/tkf/auto-complete-chunk")
    (synopsis
      "Auto-completion for dot.separated.words.")
    (description
      "Documentation at https://melpa.org/#/auto-complete-chunk")
    (license #f)))

(define-public emacs-auto-complete-clang
  (package
    (name "emacs-auto-complete-clang")
    (version "20140409.752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianjcj/auto-complete-clang.git")
               (commit
                 "a195db1d0593b4fb97efe50885e12aa6764d998c")))
        (sha256
          (base32
            "12y6f47xbjl4gy14j2f5wlisy5vl6rhx74n27w61pjv38m0a7mi1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/brianjcj/auto-complete-clang")
    (synopsis
      "Auto Completion source for clang for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/auto-complete-clang")
    (license #f)))

(define-public emacs-auto-complete-clang-async
  (package
    (name "emacs-auto-complete-clang-async")
    (version "20130526.1527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Golevka/emacs-clang-complete-async.git")
               (commit
                 "5d9c5cabbb6b31e0ac3637631c0c8b25184aa8b4")))
        (sha256
          (base32
            "1sw0wxrjcjqk0w1llfj376g6axa5bnk2lq2vv66746bkz14h0s8f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Auto Completion source for clang for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/auto-complete-clang-async")
    (license #f)))

(define-public emacs-auto-complete-distel
  (package
    (name "emacs-auto-complete-distel")
    (version "20180827.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/distel-completion.git")
               (commit
                 "acc4c0a5521904203d797fe96b08e5fae4233c7e")))
        (sha256
          (base32
            "0yvp3dwa9mwfyrqla27ycwyjad4bp1267bxv0chxcr4528hnygl3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-distel-completion-lib))
    (arguments
      '(#:files ("auto-complete-distel.el")))
    (home-page
      "github.com/sebastiw/distel-completion")
    (synopsis
      "Erlang/distel completion backend for auto-complete-mode")
    (description
      "Documentation at https://melpa.org/#/auto-complete-distel")
    (license #f)))

(define-public emacs-auto-complete-exuberant-ctags
  (package
    (name "emacs-auto-complete-exuberant-ctags")
    (version "20140320.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/auto-complete-exuberant-ctags.git")
               (commit
                 "ff6121ff8b71beb5aa606d28fd389c484ed49765")))
        (sha256
          (base32
            "1fqgyg986fg1dzac5wa97bx82mfddqb6qrfnpr3zksmw3vgykxr0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page "http://code.101000lab.org")
    (synopsis
      "Exuberant ctags auto-complete.el source")
    (description
      "Documentation at https://melpa.org/#/auto-complete-exuberant-ctags")
    (license #f)))

(define-public emacs-auto-complete-nxml
  (package
    (name "emacs-auto-complete-nxml")
    (version "20140221.458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/auto-complete-nxml.git")
               (commit
                 "ac7b09a23e45f9bd02affb31847263de4180163a")))
        (sha256
          (base32
            "18bf1kw85mab0zp7rn85cm1nxjxg5c1dmiv0j0mjwzsv8an4px5y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page
      "https://github.com/aki2o/auto-complete-nxml")
    (synopsis
      "do completion by auto-complete.el on nXML-mode")
    (description
      "Documentation at https://melpa.org/#/auto-complete-nxml")
    (license #f)))

(define-public emacs-auto-complete-pcmp
  (package
    (name "emacs-auto-complete-pcmp")
    (version "20140303.255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/auto-complete-pcmp.git")
               (commit
                 "2595d3dab1ef3549271ca922f212928e9d830eec")))
        (sha256
          (base32
            "1hf2f903hy9afahrgy2fx9smgn631drs6733188zgqi3nkyizj26"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-log4e
            emacs-yaxception))
    (home-page
      "https://github.com/aki2o/auto-complete-pcmp")
    (synopsis
      "Provide auto-complete sources using pcomplete results")
    (description
      "Documentation at https://melpa.org/#/auto-complete-pcmp")
    (license #f)))

(define-public emacs-auto-complete-rst
  (package
    (name "emacs-auto-complete-rst")
    (version "20140225.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/auto-complete-rst.git")
               (commit
                 "4803ce41a96224e6fa54e6741a5b5f40ebed7351")))
        (sha256
          (base32
            "107svb82cgfns9kcrmy3hh56cab81782jkbz5i9959ms81xizfb8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (arguments '(#:files ("*.el" "*.py")))
    (home-page
      "https://github.com/tkf/auto-complete-rst")
    (synopsis
      "Auto-complete extension for ReST and Sphinx")
    (description
      "Documentation at https://melpa.org/#/auto-complete-rst")
    (license #f)))

(define-public emacs-auto-complete-sage
  (package
    (name "emacs-auto-complete-sage")
    (version "20160514.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/auto-complete-sage.git")
               (commit
                 "51b8e3905196d266e1f8aa47881189833151b398")))
        (sha256
          (base32
            "139in1jgxg43v7ji4i1qmxbgspr71h95lzlz0fvdk78vkxc5842b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-sage-shell-mode))
    (home-page
      "https://github.com/stakemori/auto-complete-sage")
    (synopsis
      "An auto-complete source for sage-shell-mode.")
    (description
      "Documentation at https://melpa.org/#/auto-complete-sage")
    (license #f)))

(define-public emacs-auto-dark
  (package
    (name "emacs-auto-dark")
    (version "20231014.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LionyxML/auto-dark-emacs.git")
               (commit
                 "65cc6337de9030ea7cae4661389019b9443543a2")))
        (sha256
          (base32
            "0rvl40xqlf1b2n5nfhzbd0b0r0gp41m5w98sx0wvhp68brxpvx0g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/LionyxML/auto-dark-emacs")
    (synopsis
      "Automatically sets the dark-mode theme based on macOS/Linux/Windows status")
    (description
      "Documentation at https://melpa.org/#/auto-dark")
    (license #f)))

(define-public emacs-auto-dictionary
  (package
    (name "emacs-auto-dictionary")
    (version "20150410.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/auto-dictionary-mode.git")
               (commit
                 "b364e08009fe0062cf0927d8a0582fad5a12b8e7")))
        (sha256
          (base32
            "0rfjx0x2an28821shgb4v5djza4kwn5nnrsl2cvh3px4wrvw3izp"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/auto-dictionary/")
    (synopsis
      "automatic dictionary switcher for flyspell")
    (description
      "Documentation at https://melpa.org/#/auto-dictionary")
    (license #f)))

(define-public emacs-auto-dim-other-buffers
  (package
    (name "emacs-auto-dim-other-buffers")
    (version "20220209.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mina86/auto-dim-other-buffers.el.git")
               (commit
                 "33b5f88b799a17947c266b04ad59462c5aeb4ed7")))
        (sha256
          (base32
            "17h9hh8n6ib1crap8jdgjhaszvlqb4gri1z821apyn66lqvix7x8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mina86/auto-dim-other-buffers.el")
    (synopsis
      "Makes windows without focus less prominent")
    (description
      "Documentation at https://melpa.org/#/auto-dim-other-buffers")
    (license #f)))

(define-public emacs-auto-highlight-symbol
  (package
    (name "emacs-auto-highlight-symbol")
    (version "20231027.715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elp-revive/auto-highlight-symbol.git")
               (commit
                 "1c79083b9b6af70b0eba3d4c00cafafeb6154845")))
        (sha256
          (base32
            "1szb4namrl0415adji9042cxbh28kw8kxk756b3z45y18bscns14"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "http://github.com/jcs-elpa/auto-highlight-symbol")
    (synopsis
      "Automatic highlighting current symbol minor mode")
    (description
      "Documentation at https://melpa.org/#/auto-highlight-symbol")
    (license #f)))

(define-public emacs-auto-indent-mode
  (package
    (name "emacs-auto-indent-mode")
    (version "20211029.11")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/auto-indent-mode.el.git")
               (commit
                 "664006b67329a8e27330541547f8c2187dab947c")))
        (sha256
          (base32
            "07nf07xzc30jnyr9s8vp561vgq64610gdhlwzkbanvnkmj20v9li"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mlf176f2/auto-indent-mode.el/")
    (synopsis "Auto indent Minor mode")
    (description
      "Documentation at https://melpa.org/#/auto-indent-mode")
    (license #f)))

(define-public emacs-auto-minor-mode
  (package
    (name "emacs-auto-minor-mode")
    (version "20180527.1123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joewreschnig/auto-minor-mode.git")
               (commit
                 "17cfa1b54800fdef2975c0c0531dad34846a5065")))
        (sha256
          (base32
            "1jgq9b262pjr6npza3k0p2glb6mpp0dfpslgx3i2p8a5ipwhwaqa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joewreschnig/auto-minor-mode")
    (synopsis
      "Enable minor modes by file name and contents")
    (description
      "Documentation at https://melpa.org/#/auto-minor-mode")
    (license #f)))

(define-public emacs-auto-org-md
  (package
    (name "emacs-auto-org-md")
    (version "20180213.2343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamcha-aa/auto-org-md.git")
               (commit
                 "9318338bdb7fe8bd698d88f3af89b2d6413efdd2")))
        (sha256
          (base32
            "1dzxc1f4yvj8xww5drcpzmn3fyi8ziimh1cmy6l3i399l1zl0njj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jamcha-aa/auto-org-md")
    (synopsis
      "export a markdown file automatically when you save an org-file")
    (description
      "Documentation at https://melpa.org/#/auto-org-md")
    (license #f)))

(define-public emacs-auto-package-update
  (package
    (name "emacs-auto-package-update")
    (version "20211108.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rranelli/auto-package-update.el.git")
               (commit
                 "ad95435fefe2bb501d1d787b08272f9c1b7df488")))
        (sha256
          (base32
            "00456kxd1zb5lcwkm211mhdgkl0b01pp4fbkl1ryvdnhddn83ipv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/rranelli/auto-package-update.el")
    (synopsis "Automatically update Emacs packages.")
    (description
      "Documentation at https://melpa.org/#/auto-package-update")
    (license #f)))

(define-public emacs-auto-pause
  (package
    (name "emacs-auto-pause")
    (version "20160426.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/auto-pause.git")
               (commit
                 "a4d778de774ca3895542cb559a953e0d98657338")))
        (sha256
          (base32
            "1pxhqwvg059pslin6z87jd8d0q44ljwvdn6y23ffrz9kfpn3m5m2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/auto-pause")
    (synopsis
      "Run processes which will be paused when Emacs is idle")
    (description
      "Documentation at https://melpa.org/#/auto-pause")
    (license #f)))

(define-public emacs-auto-read-only
  (package
    (name "emacs-auto-read-only")
    (version "20200827.1754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/auto-read-only.el.git")
               (commit
                 "db209bf5b7f76f4c3dc4d0892fc6a24430779f29")))
        (sha256
          (base32
            "0zb8n97x5ji9clyls7k5pj7pq3yms82b6wgkww6djcabb26b5xb4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/auto-read-only.el")
    (synopsis
      "Automatically make the buffer to read-only")
    (description
      "Documentation at https://melpa.org/#/auto-read-only")
    (license #f)))

(define-public emacs-auto-rename-tag
  (package
    (name "emacs-auto-rename-tag")
    (version "20220704.639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/auto-rename-tag.git")
               (commit
                 "955a25bf371fe7edc7c1c5fdda0578731273c108")))
        (sha256
          (base32
            "00rz98vm2hr7vhqsfyz0fdp82vnq34cpnw8hgp02dv232amldlra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/auto-rename-tag")
    (synopsis
      "Automatically rename paired HTML/XML tag")
    (description
      "Documentation at https://melpa.org/#/auto-rename-tag")
    (license #f)))

(define-public emacs-auto-save-buffers-enhanced
  (package
    (name "emacs-auto-save-buffers-enhanced")
    (version "20161109.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kentaro/auto-save-buffers-enhanced.git")
               (commit
                 "461e8c816c1b7c650be5f209078b381fe55da8c6")))
        (sha256
          (base32
            "0ckjijjpqpbv9yrqfnl3x9hcdwwdgvm5r2vyx1a9nk4d3i0hd9i5"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically save buffers in a decent way")
    (description
      "Documentation at https://melpa.org/#/auto-save-buffers-enhanced")
    (license #f)))

(define-public emacs-auto-shell-command
  (package
    (name "emacs-auto-shell-command")
    (version "20180817.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ongaeshi/auto-shell-command.git")
               (commit
                 "a8f9213e3c773b5687b81881240e6e648f2f56ba")))
        (sha256
          (base32
            "1b0kgqh521y16cx84rbsr244i4fs3l8h4wqjy2zdpwbpbikx1hxk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deferred emacs-popwin))
    (home-page "unspecified")
    (synopsis
      "Run the shell command asynchronously that you specified when you save the file.")
    (description
      "Documentation at https://melpa.org/#/auto-shell-command")
    (license #f)))

(define-public emacs-auto-sort-mode
  (package
    (name "emacs-auto-sort-mode")
    (version "20230827.2124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rweir/auto-sort-mode.git")
               (commit
                 "3ffa4e2a76a6dda949fdfd200f623a17c4796559")))
        (sha256
          (base32
            "1d6dxzfgpwaidjys9jx6x368rih40lqyhrgx51rsjf68x4k24s3s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rweir/auto-sort-mode")
    (synopsis
      "Automatically sort lines between two delimiters")
    (description
      "Documentation at https://melpa.org/#/auto-sort-mode")
    (license #f)))

(define-public emacs-auto-sudoedit
  (package
    (name "emacs-auto-sudoedit")
    (version "20230907.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ncaq/auto-sudoedit.git")
               (commit
                 "1caa127db200f86d1cfdeaae4410a673f0ae11e0")))
        (sha256
          (base32
            "14rdkb4dg3vszj2yjqdijq6d73qaag0mmn7bl6a2vhc0b60lr5kj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/ncaq/auto-sudoedit")
    (synopsis "Auto sudo edit by tramp")
    (description
      "Documentation at https://melpa.org/#/auto-sudoedit")
    (license #f)))

(define-public emacs-auto-virtualenv
  (package
    (name "emacs-auto-virtualenv")
    (version "20220712.1612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcwebbie/auto-virtualenv.git")
               (commit
                 "92bc2cd7cb401ab0643e9ca037c4d225ba45a7c1")))
        (sha256
          (base32
            "1lzjk451fbz0lh0lls3xdy9s6gi4x3c352s98jq6wi12nwp2bil8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyvenv emacs-s))
    (home-page
      "http://github.com/marcwebbie/auto-virtualenv")
    (synopsis "Auto activate python virtualenvs")
    (description
      "Documentation at https://melpa.org/#/auto-virtualenv")
    (license #f)))

(define-public emacs-auto-virtualenvwrapper
  (package
    (name "emacs-auto-virtualenvwrapper")
    (version "20230317.1313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/robert-zaremba/auto-virtualenvwrapper.el.git")
               (commit
                 "8cc2616af46d7e26c1d9ecea5fffd8974e5b1acb")))
        (sha256
          (base32
            "1q4hfkdhyihq0skiy8zrpdb37fhhjnryvkp12i2a42cylx631rlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-virtualenvwrapper))
    (home-page "unspecified")
    (synopsis
      "Lightweight auto activate python virtualenvs")
    (description
      "Documentation at https://melpa.org/#/auto-virtualenvwrapper")
    (license #f)))

(define-public emacs-auto-yasnippet
  (package
    (name "emacs-auto-yasnippet")
    (version "20230208.331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/auto-yasnippet.git")
               (commit
                 "6a9e406d0d7f9dfd6dff7647f358cb05a0b1637e")))
        (sha256
          (base32
            "0ifzbwnm2axb8kmfp3jvg05wq02j121iwp2m64pi70c7mza0i886"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (home-page
      "https://github.com/abo-abo/auto-yasnippet")
    (synopsis "Quickly create disposable yasnippets")
    (description
      "Documentation at https://melpa.org/#/auto-yasnippet")
    (license #f)))

(define-public emacs-autobookmarks
  (package
    (name "emacs-autobookmarks")
    (version "20220509.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/autobookmarks.git")
               (commit
                 "8acd6f182181e23257e01c1b5cf90b872507a74d")))
        (sha256
          (base32
            "1q4r3l40lqdykhv4w675g6dz3mpp36abiilslhkyx2i7rxpa88z8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Save recently visited files and buffers")
    (description
      "Documentation at https://melpa.org/#/autobookmarks")
    (license #f)))

(define-public emacs-autobuild
  (package
    (name "emacs-autobuild")
    (version "20230906.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erjoalgo/autobuild.git")
               (commit
                 "593a5138ded2793bdc0ff5681bf7af2e2a50ca67")))
        (sha256
          (base32
            "0sgcg5a05zcf3s6c9my3jw7z7mqrfdk1fsclkrhdl1qk89h24cvz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-selcand))
    (home-page
      "https://github.com/erjoalgo/autobuild")
    (synopsis
      "Define and execute build rules and compilation pipelines")
    (description
      "Documentation at https://melpa.org/#/autobuild")
    (license #f)))

(define-public emacs-autodisass-java-bytecode
  (package
    (name "emacs-autodisass-java-bytecode")
    (version "20230907.1729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gbalats/autodisass-java-bytecode.git")
               (commit
                 "02788145f5c70e9004c4eba5acffbb584fe7de37")))
        (sha256
          (base32
            "0bfbi8rgr5sq7mc4f6dhnbyxs2kwih619d1wxq3cngnclgjvmhdq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically disassemble Java bytecode")
    (description
      "Documentation at https://melpa.org/#/autodisass-java-bytecode")
    (license #f)))

(define-public emacs-autodisass-llvm-bitcode
  (package
    (name "emacs-autodisass-llvm-bitcode")
    (version "20150411.125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gbalats/autodisass-llvm-bitcode.git")
               (commit
                 "d2579e3a1427af2dc947c343e49eb3434078bf04")))
        (sha256
          (base32
            "1fq4h5fmamyh7z8nq6pigx74p5v8k3qfm64k66vwsm8bl5jdkw17"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically disassemble LLVM bitcode")
    (description
      "Documentation at https://melpa.org/#/autodisass-llvm-bitcode")
    (license #f)))

(define-public emacs-autoscratch
  (package
    (name "emacs-autoscratch")
    (version "20230612.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TLINDEN/autoscratch.git")
               (commit
                 "45ff5fc8228e88e1e6c3fce4c00f97030721b0b6")))
        (sha256
          (base32
            "0wd4hjil6lqa7y8bjvy7jzfa8jpfbg841agy1l40cgk4bzyhv2fd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tlinden/autoscratch")
    (synopsis
      "Automatically switch scratch buffer mode")
    (description
      "Documentation at https://melpa.org/#/autoscratch")
    (license #f)))

(define-public emacs-autotetris-mode
  (package
    (name "emacs-autotetris-mode")
    (version "20141114.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/autotetris-mode.git")
               (commit
                 "0c3a746dcc304a67d2a6e7ad4ef93f512486343a")))
        (sha256
          (base32
            "055kzs1qgx8jbwsxrnnqzbl8hgmaigkz3mqll2i0fdac5a605vxc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/autotetris-mode")
    (synopsis "automatically play tetris")
    (description
      "Documentation at https://melpa.org/#/autotetris-mode")
    (license #f)))

(define-public emacs-autothemer
  (package
    (name "emacs-autothemer")
    (version "20230414.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonm23/autothemer.git")
               (commit
                 "6277b086ec2d0a17f5722caf6a0ec5ca16cb5486")))
        (sha256
          (base32
            "17xb0x8bs093a8ddziyc078yx45wc69l7sclzgh25gssf3lv094v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/jasonm23/autothemer")
    (synopsis "Conveniently define themes")
    (description
      "Documentation at https://melpa.org/#/autothemer")
    (license #f)))

(define-public emacs-autumn-light-theme
  (package
    (name "emacs-autumn-light-theme")
    (version "20150515.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aalpern/emacs-color-theme-autumn-light.git")
               (commit
                 "1e3b2a43a3001e4a97a5ff073ba3f0d2ea3888f9")))
        (sha256
          (base32
            "1lip7282g41ghn64dvx2ab437s83cj9l8ps1rd8rbhqyz4bx5wb9"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aalpern/emacs-color-theme-autumn-light")
    (synopsis
      "A light color theme with muted, autumnal colors.")
    (description
      "Documentation at https://melpa.org/#/autumn-light-theme")
    (license #f)))

(define-public emacs-avandu
  (package
    (name "emacs-avandu")
    (version "20221106.834")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/avandu.git")
               (commit
                 "f064cd62f878d945cc2f202cda9a1a82b39d9e22")))
        (sha256
          (base32
            "029l6qjfcj8sw459rrlg80z0gliib8cb0q9qj5rl32xdsj12hzni"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Gateway to Tiny Tiny RSS")
    (description
      "Documentation at https://melpa.org/#/avandu")
    (license #f)))

(define-public emacs-avk-emacs-themes
  (package
    (name "emacs-avk-emacs-themes")
    (version "20230825.922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/avkoval/avk-emacs-themes.git")
               (commit
                 "abe6fd059e0a7e8fcf2eb95b16c3dfac5620b1e7")))
        (sha256
          (base32
            "0x98lvnkf75lf6c5vaqa6j3qi7k1p3ryf0rqq3lqgid94i2kwv3v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/avkoval/avk-emacs-themes")
    (synopsis "Collection of avk themes")
    (description
      "Documentation at https://melpa.org/#/avk-emacs-themes")
    (license #f)))

(define-public emacs-avy
  (package
    (name "emacs-avy")
    (version "20230420.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/avy.git")
               (commit
                 "be612110cb116a38b8603df367942e2bb3d9bdbe")))
        (sha256
          (base32
            "0bv65i5n15shiq6cg6a2rvbkf9kigc4920rimn954ahncfn5x73i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/avy")
    (synopsis
      "Jump to arbitrary positions in visible text and select text quickly.")
    (description
      "Documentation at https://melpa.org/#/avy")
    (license #f)))

(define-public emacs-avy-embark-collect
  (package
    (name "emacs-avy-embark-collect")
    (version "20230919.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/embark.git")
               (commit
                 "b22bcc42c70e75e5c7cb479eb830ecebda0b8cc3")))
        (sha256
          (base32
            "16vgg0xfv1xpkkwizcim1xp3ns9dzs4cln2d2lir4lyid8hp4x2p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-embark emacs-avy))
    (arguments '(#:files ("avy-embark-collect.el")))
    (home-page "https://github.com/oantolin/embark")
    (synopsis
      "Use avy to jump to Embark Collect entries")
    (description
      "Documentation at https://melpa.org/#/avy-embark-collect")
    (license #f)))

(define-public emacs-avy-flycheck
  (package
    (name "emacs-avy-flycheck")
    (version "20160720.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magicdirac/avy-flycheck.git")
               (commit
                 "5522f3bbbed1801d9278ed696ec0cbba38352985")))
        (sha256
          (base32
            "1nwc8xid0k6bnnpgsrrlwx71a04llkiapjsbchp9jgcf11l5mghw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-avy))
    (home-page
      "https://github.com/magicdirac/avy-flycheck")
    (synopsis
      "Jump to and fix syntax errors using `flycheck' with `avy' interface")
    (description
      "Documentation at https://melpa.org/#/avy-flycheck")
    (license #f)))

(define-public emacs-avy-menu
  (package
    (name "emacs-avy-menu")
    (version "20230606.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/avy-menu.git")
               (commit
                 "2d0179b246dab11e771d3dc8ebe53224148bdb47")))
        (sha256
          (base32
            "01v20d94vmqjkbimh3mcnw0z5irgjmyah4iy3kgzciaap039y5a3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page "https://github.com/mrkkrp/avy-menu")
    (synopsis
      "Library providing avy-powered popup menu")
    (description
      "Documentation at https://melpa.org/#/avy-menu")
    (license #f)))

(define-public emacs-avy-migemo
  (package
    (name "emacs-avy-migemo")
    (version "20180716.1455")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/momomo5717/avy-migemo.git")
               (commit
                 "922a6dd82c0bfa316b0fbb56a9d4dd4ffa5707e7")))
        (sha256
          (base32
            "1a4421h15ba7lsnbh8kqm3hvs06fp830wb1nvwgpsk7vmqqi2qgl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-migemo))
    (home-page
      "https://github.com/momomo5717/avy-migemo")
    (synopsis "avy with migemo")
    (description
      "Documentation at https://melpa.org/#/avy-migemo")
    (license #f)))

(define-public emacs-avy-zap
  (package
    (name "emacs-avy-zap")
    (version "20190801.329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/avy-zap.git")
               (commit
                 "7c8d1f40e43d03e2f6c1696bfa547526528ce8cb")))
        (sha256
          (base32
            "1b9yc8wkcddd81060r03myxcdxas6vdhgybl44da412p0hx4bccb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/cute-jumper/avy-zap")
    (synopsis "Zap to char using `avy'")
    (description
      "Documentation at https://melpa.org/#/avy-zap")
    (license #f)))

(define-public emacs-awk-ts-mode
  (package
    (name "emacs-awk-ts-mode")
    (version "20231022.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/awk-ts-mode.git")
               (commit
                 "a32d83a2c8714c5f2fdb8cc8cb6733a2eb1a4e87")))
        (sha256
          (base32
            "1k3nyp4h9iqz6cx90g469jf2j7kvr4q8mqn2i0han2a406izk9n5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nverno/awk-ts-mode")
    (synopsis "Major mode for awk using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/awk-ts-mode")
    (license #f)))

(define-public emacs-awk-yasnippets
  (package
    (name "emacs-awk-yasnippets")
    (version "20230515.1756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uberkael/awk-yasnippets.git")
               (commit
                 "12e8e0b49878099bda5d3e4915cc3c738c87b95c")))
        (sha256
          (base32
            "03vw6y4bjfip4ryr265hkkwm66rl3m7gwird7hgrqzilmb9sahia"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "awk-mode")))
    (home-page
      "https://github.com/uberkael/awk-yasnippets")
    (synopsis "Yasnippets for AWK")
    (description
      "Documentation at https://melpa.org/#/awk-yasnippets")
    (license #f)))

(define-public emacs-aws-ec2
  (package
    (name "emacs-aws-ec2")
    (version "20221011.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/aws.el.git")
               (commit
                 "7b500097ac3c2addbe1644f78595dc2ea4eb87c4")))
        (sha256
          (base32
            "1r7aw44c73n7sl8r407gl57d7n4p2chbs4djj25m0f08szakyzmi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-tblui))
    (home-page
      "https://github.com/Yuki-Inoue/aws.el")
    (synopsis "Manage AWS EC2 instances")
    (description
      "Documentation at https://melpa.org/#/aws-ec2")
    (license #f)))

(define-public emacs-aws-snippets
  (package
    (name "emacs-aws-snippets")
    (version "20191203.1553")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/baron42bba/aws-snippets.git")
               (commit
                 "557d19a0bc486e0fddb597b2be5087769d9bd47e")))
        (sha256
          (base32
            "1s71h8limqxql9qhkp7bmq9k9j1mkazvc0lh92a6wd7hk6xg1hi1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for AWS")
    (description
      "Documentation at https://melpa.org/#/aws-snippets")
    (license #f)))

(define-public emacs-awscli-capf
  (package
    (name "emacs-awscli-capf")
    (version "20190930.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/awscli-capf.git")
               (commit
                 "eadfb26b35802ae8164565581e4a9c4d0280a7b5")))
        (sha256
          (base32
            "1kh01yfzz565z0qdidvrl94cpfgsvf27n4k709j63xccbip0hp4a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sebasmonia/awscli-capf.git")
    (synopsis
      "Completion at point function for the AWS CLI")
    (description
      "Documentation at https://melpa.org/#/awscli-capf")
    (license #f)))

(define-public emacs-axe
  (package
    (name "emacs-axe")
    (version "20230120.1915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cniles/axe.git")
               (commit
                 "19e9be8660635d83dc996db91f0c4896e4743bbb")))
        (sha256
          (base32
            "0rcls8wsy5y4cb3sixl7fh59gwkgs712w6dh6ym19adgkxq5w2k5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hmac
            emacs-request
            emacs-s
            emacs-xmlgen
            emacs-dash
            emacs-mimetypes))
    (home-page "https://github.com/cniles/axe")
    (synopsis "AWS Extensions")
    (description
      "Documentation at https://melpa.org/#/axe")
    (license #f)))

(define-public emacs-axiom-environment
  (package
    (name "emacs-axiom-environment")
    (version "20220612.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pdo/axiom-environment")
               (commit
                 "01d88daa0c864af9918db5a147fbb5e435dec199")))
        (sha256
          (base32
            "03cxb6zdqmzgjp8r6hcirf8xl772j7xqk2nw17gjkn4xqbwfyn62"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         ("data" "data/*.el")
         ("themes" "themes/*.el")
         (:exclude
           "axiom.el"
           "axiom-build-utils.el"
           "ob-axiom.el"
           "company-axiom.el"))))
    (home-page "unspecified")
    (synopsis
      "An environment for using Axiom/OpenAxiom/FriCAS")
    (description
      "Documentation at https://melpa.org/#/axiom-environment")
    (license #f)))

(define-public emacs-ayu-theme
  (package
    (name "emacs-ayu-theme")
    (version "20230306.1924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vutran1710/Ayu-Theme-Emacs.git")
               (commit
                 "dc325520c1202463a0f05d4ece1644109830fef4")))
        (sha256
          (base32
            "0d8q6zk0axxs7s05pa4sq57ixznqfrp10abhxpayr4z0crf7kvmk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vutran1710/Ayu-Theme-Emacs")
    (synopsis "Ayu theme")
    (description
      "Documentation at https://melpa.org/#/ayu-theme")
    (license #f)))

(define-public emacs-babashka
  (package
    (name "emacs-babashka")
    (version "20230808.2140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/licht1stein/babashka.el.git")
               (commit
                 "1721f68ea8e34e8a6ab2759a04c1a01cedfdd319")))
        (sha256
          (base32
            "0yjqwshwhcfylajfsks1xvkgqarcnlhwfdy3i587jdw799434vb0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parseedn))
    (home-page
      "https://github.com/licht1stein/babashka.el")
    (synopsis "Babashka Tasks Interface")
    (description
      "Documentation at https://melpa.org/#/babashka")
    (license #f)))

(define-public emacs-babel
  (package
    (name "emacs-babel")
    (version "20210612.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/babel.git")
               (commit
                 "946e69c61188bc41793402ac48466d8967ddb43d")))
        (sha256
          (base32
            "0drqcvkak677r2bc8jr0bp0qv3x2iw5cvlma6ir2blgm1d3q2bg3"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/juergenhoetzel/babel")
    (synopsis
      "interface to web translation services such as Babelfish")
    (description
      "Documentation at https://melpa.org/#/babel")
    (license #f)))

(define-public emacs-babel-repl
  (package
    (name "emacs-babel-repl")
    (version "20160504.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hung-phan/babel-repl.git")
               (commit
                 "e619c16e349a1ee7bd0ee0d7f3650d33bff73fc3")))
        (sha256
          (base32
            "1174r0gjpn5z3pnf32qlpqhmdfvskcd2vqgicvmqzjsrysj3fypn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hung-phan/babel-repl/")
    (synopsis "Run babel REPL")
    (description
      "Documentation at https://melpa.org/#/babel-repl")
    (license #f)))

(define-public emacs-back-button
  (package
    (name "emacs-back-button")
    (version "20220827.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/back-button.git")
               (commit
                 "f8783c98a7fefc1d0419959c1b462c7dcadce5a8")))
        (sha256
          (base32
            "0r9l9krkk955d5mx6q947lf6pqvb0zzyvhlxicb28y2zhg3s26x9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nav-flash
            emacs-smartrep
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/back-button")
    (synopsis "Visual navigation through mark rings")
    (description
      "Documentation at https://melpa.org/#/back-button")
    (license #f)))

(define-public emacs-backlight
  (package
    (name "emacs-backlight")
    (version "20210513.129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/backlight.el.git")
               (commit
                 "b6826a60440d8bf440618e3cdafb40158de920e6")))
        (sha256
          (base32
            "0nj5l0wwza1j908n9k0896b972b84s401szkgb0acf4fs834vc0w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/backlight.el")
    (synopsis
      "backlight brightness adjustment on GNU/Linux")
    (description
      "Documentation at https://melpa.org/#/backlight")
    (license #f)))

(define-public emacs-backline
  (package
    (name "emacs-backline")
    (version "20230514.1800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/backline.git")
               (commit
                 "f1d9e1cd5cba6362b152b5f4227d1714918fba59")))
        (sha256
          (base32
            "0f7rcbmaggj644z3j1pq2sjg4c12g9s2k4c5x3yrirjgazxfpr8x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-outline-minor-faces))
    (home-page "https://github.com/tarsius/backline")
    (synopsis
      "Preserve appearance of outline headings")
    (description
      "Documentation at https://melpa.org/#/backline")
    (license #f)))

(define-public emacs-backup-each-save
  (package
    (name "emacs-backup-each-save")
    (version "20180227.557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conornash/backup-each-save.git")
               (commit
                 "3c414b9d6b278911c95c5b8b71819e6af6f8a02a")))
        (sha256
          (base32
            "13pliz2ra020hhxcidkyhfa0767n188l1w5r0vpvv6zqyc2p414i"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "backup each savepoint of a file")
    (description
      "Documentation at https://melpa.org/#/backup-each-save")
    (license #f)))

(define-public emacs-backup-walker
  (package
    (name "emacs-backup-walker")
    (version "20130720.1516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/backup-walker.git")
               (commit
                 "934a4128c122972ac32bb9952addf279a60a94da")))
        (sha256
          (base32
            "0z4d8x9lkad50720lgvr8f85p1ligv07865i30lgr9ck0q04w68v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lewang/backup-walker")
    (synopsis
      "quickly traverse all backups of a file")
    (description
      "Documentation at https://melpa.org/#/backup-walker")
    (license #f)))

(define-public emacs-backward-forward
  (package
    (name "emacs-backward-forward")
    (version "20161229.550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/vancan1ty/emacs-backward-forward.git")
               (commit
                 "58489957a62a0da25dfb5df902624d2548d800b4")))
        (sha256
          (base32
            "14v9q58vd0iggs8x8hjh24cv58g2pbwnr6zghd2anaygbj74ij24"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/vancan1ty/emacs-backward-forward/tree/master")
    (synopsis
      "navigation backwards and forwards across marks")
    (description
      "Documentation at https://melpa.org/#/backward-forward")
    (license #f)))

(define-public emacs-badger-theme
  (package
    (name "emacs-badger-theme")
    (version "20140717.232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ccann/badger-theme.git")
               (commit
                 "493d672d5a5478976da7d5ca752008cc7837c57f")))
        (sha256
          (base32
            "0mrn3sl1xq19k6v4mw98zqgs11fidnarvidmxayx805k21pana6v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ccann/badger-theme")
    (synopsis "A dark theme for Emacs 24.")
    (description
      "Documentation at https://melpa.org/#/badger-theme")
    (license #f)))

(define-public emacs-badwolf-theme
  (package
    (name "emacs-badwolf-theme")
    (version "20161004.715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bkruczyk/badwolf-emacs.git")
               (commit
                 "ea01a3d9358e968f75e3ed15dec6a2a96ce3d9a1")))
        (sha256
          (base32
            "0a6adsxvmw3mgji17is75jrq3ifmzpch8rwqqyfgc99xzndvab7l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bkruczyk/badwolf-emacs")
    (synopsis "Bad Wolf color theme")
    (description
      "Documentation at https://melpa.org/#/badwolf-theme")
    (license #f)))

(define-public emacs-baff
  (package
    (name "emacs-baff")
    (version "20200824.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dave-f/baff.git")
               (commit
                 "7af72db9c6e542ed2b60952933113d0aa86728cf")))
        (sha256
          (base32
            "099jhbn65kw45yb8ahvrpmpqba1ffxbmxkkxs6iswfjcx2vdf23j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/dave-f/baff/")
    (synopsis "Create a byte array from a file")
    (description
      "Documentation at https://melpa.org/#/baff")
    (license #f)))

(define-public emacs-baidu-translate
  (package
    (name "emacs-baidu-translate")
    (version "20211130.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LiShiZhensPi/baidu-translate.git")
               (commit
                 "16101d5e6ce19bbcc8badf4422a95db457160999")))
        (sha256
          (base32
            "0799gc0nhqmgz691sn2zam3bfyraq9ljr4da1481nawwkwyzad1v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-unicode-escape))
    (home-page
      "https://github.com/liShiZhensPi/baidu-translate")
    (synopsis "A plugin using baidu-translate-api")
    (description
      "Documentation at https://melpa.org/#/baidu-translate")
    (license #f)))

(define-public emacs-balanced-windows
  (package
    (name "emacs-balanced-windows")
    (version "20190903.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-balanced-windows.git")
               (commit
                 "1da5354ad8a9235d13928e2ee0863f3642ccdd13")))
        (sha256
          (base32
            "1hsjg48jlfi6lc6izp9xcfqvxj7c0ivjrfsr2q3yv3s1iy2fz37l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wbolster/emacs-balanced-windows")
    (synopsis "Keep windows balanced")
    (description
      "Documentation at https://melpa.org/#/balanced-windows")
    (license #f)))

(define-public emacs-banner-comment
  (package
    (name "emacs-banner-comment")
    (version "20190606.1809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/WJCFerguson/banner-comment.git")
               (commit
                 "35d3315683d3f97605207691b77e9f447af18fe2")))
        (sha256
          (base32
            "0f48mvzy5wxx5f975hsqp00p9vmjda2wlxsprws5jgmpn95hbbs8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/WJCFerguson/banner-comment")
    (synopsis "For producing banner comments.")
    (description
      "Documentation at https://melpa.org/#/banner-comment")
    (license #f)))

(define-public emacs-bap-mode
  (package
    (name "emacs-bap-mode")
    (version "20200128.1354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BinaryAnalysisPlatform/bap-mode.git")
               (commit
                 "8969679f60db0aa918d35f40d959c0a9c723b111")))
        (sha256
          (base32
            "1i5yhqig104j33cyhkhil4d1wfvnldkvrk2wgxbm4p01xw1rs6cq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fkie-cad/bap-mode")
    (synopsis "Major-mode for BAP's IR")
    (description
      "Documentation at https://melpa.org/#/bap-mode")
    (license #f)))

(define-public emacs-bar-cursor
  (package
    (name "emacs-bar-cursor")
    (version "20201204.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajsquared/bar-cursor.git")
               (commit
                 "78f195b6db63459033c4f1c7e7add5d82f3ce424")))
        (sha256
          (base32
            "1g344fzfkq5z53vja68kv55l1x29v15q41qb08nqc9k4pvpwdvmp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ajsquared/bar-cursor")
    (synopsis
      "package used to switch block cursor to a bar")
    (description
      "Documentation at https://melpa.org/#/bar-cursor")
    (license #f)))

(define-public emacs-bart-mode
  (package
    (name "emacs-bart-mode")
    (version "20190601.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/bart-mode.git")
               (commit
                 "f70b6c42452e47c0c6b3ebd4c90e555a9bedeec7")))
        (sha256
          (base32
            "0s47ijlnspndia6f1116g6nr6hnirmba6fkvdcvw4qm7mhn5xrc9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/bart-mode")
    (synopsis "Real time BART departures info.")
    (description
      "Documentation at https://melpa.org/#/bart-mode")
    (license #f)))

(define-public emacs-base16-theme
  (package
    (name "emacs-base16-theme")
    (version "20231008.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tinted-theming/base16-emacs.git")
               (commit
                 "5993a1ab3cd1f22673f84dd35a2fae5493bed69e")))
        (sha256
          (base32
            "0f2kj9q4wjhka5nsbn0kjqxdsnlmk45krylk2mmr9siprk15yfh9"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "build/*.el")))
    (home-page
      "https://github.com/tinted-theming/base16-emacs")
    (synopsis
      "Collection of themes built on combinations of 16 base colors")
    (description
      "Documentation at https://melpa.org/#/base16-theme")
    (license #f)))

(define-public emacs-bash-completion
  (package
    (name "emacs-bash-completion")
    (version "20230612.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/szermatt/emacs-bash-completion.git")
               (commit
                 "f1daac0386c24cbe8a244a62c7588cc6847b07ae")))
        (sha256
          (base32
            "0s8p5xj2v3zgqj9z1iqpnca6wd78jhzvgfkpsd4bqwbrhi543sjm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/szermatt/emacs-bash-completion")
    (synopsis "Bash completion for the shell buffer")
    (description
      "Documentation at https://melpa.org/#/bash-completion")
    (license #f)))

(define-public emacs-basic-c-compile
  (package
    (name "emacs-basic-c-compile")
    (version "20170302.1112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nick96/basic-c-compile.git")
               (commit
                 "0129786aeee50d7bb0020d9fc2b7508875d403e8")))
        (sha256
          (base32
            "0q6scyva1psyam7jzygqcr1wayf70vrp237hm01q5i9cin8j4j1z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/nick96/basic-c-compile")
    (synopsis
      "Quickly create a Makefile, compile and run C.")
    (description
      "Documentation at https://melpa.org/#/basic-c-compile")
    (license #f)))

(define-public emacs-basic-ide
  (package
    (name "emacs-basic-ide")
    (version "20230118.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/emacs-c64-basic-ide.git")
               (commit
                 "e33036f838e61b647927165e81be5d5b855e0518")))
        (sha256
          (base32
            "1mfdkxwsj2mmpsxz0q68z7rs56qpd3dkvl2dkx1dp8n42zvifcxw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-basic-mode
            emacs-company
            emacs-flycheck
            emacs-dash
            emacs-f))
    (home-page
      "https://gitlab.com/sasanidas/emacs-c64-basic-ide")
    (synopsis "BASIC IDE c64")
    (description
      "Documentation at https://melpa.org/#/basic-ide")
    (license #f)))

(define-public emacs-basic-mode
  (package
    (name "emacs-basic-mode")
    (version "20230909.843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dykstrom/basic-mode.git")
               (commit
                 "5bcefd47c2b97b0482cb02d3d9012f334a1535b1")))
        (sha256
          (base32
            "0s9grdh7m6v53mkn330azhff5rbci73b614ggap7dk54jldl8cy3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*.el")))
    (home-page
      "https://github.com/dykstrom/basic-mode")
    (synopsis "Major mode for editing BASIC code")
    (description
      "Documentation at https://melpa.org/#/basic-mode")
    (license #f)))

(define-public emacs-basic-theme
  (package
    (name "emacs-basic-theme")
    (version "20160817.827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/basic-theme.el.git")
               (commit
                 "e2a855bd39f4b78296228d4b790f9123156f7d7e")))
        (sha256
          (base32
            "1dfk73bkyhmhxnizbcp5zky8qyrgl7cf0dl9y6drqqc1lrcgz3jl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fgeller/basic-theme.el")
    (synopsis "Minimalistic light color theme")
    (description
      "Documentation at https://melpa.org/#/basic-theme")
    (license #f)))

(define-public emacs-bats-mode
  (package
    (name "emacs-bats-mode")
    (version "20230325.7")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dougm/bats-mode.git")
               (commit
                 "fa88930b1baba101ae6474f289a239a236a7d19f")))
        (sha256
          (base32
            "1nys0nbphy0844gag1z32cbh0playxdfn9p3ikrij5bkaknil8w2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dougm/bats-mode")
    (synopsis
      "Emacs mode for editing and running Bats tests")
    (description
      "Documentation at https://melpa.org/#/bats-mode")
    (license #f)))

(define-public emacs-battery-notifier
  (package
    (name "emacs-battery-notifier")
    (version "20220705.2030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonmj/battery-notifier.git")
               (commit
                 "b7301d3633afff78609afd45dcf78268f98d52d3")))
        (sha256
          (base32
            "1mvf2sxrsrv4q0gmalwjw7zgahswwlg3gdpfg7chyklp1v89lnhf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page
      "https://github.com/jasonmj/battery-notifier")
    (synopsis "Notify when battery capacity is low")
    (description
      "Documentation at https://melpa.org/#/battery-notifier")
    (license #f)))

(define-public emacs-battle-haxe
  (package
    (name "emacs-battle-haxe")
    (version "20210219.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AlonTzarafi/battle-haxe.git")
               (commit
                 "2f32c81dcecfc68fd410cb9d2aca303d6e3028c7")))
        (sha256
          (base32
            "0br1iy9zcjqaxmm691axrcbfxmid76rsbkcp1vrpzrdqvrkskpww"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-helm
            emacs-async
            emacs-dash
            emacs-s
            emacs-f))
    (home-page
      "https://github.com/AlonTzarafi/battle-haxe")
    (synopsis
      "A Haxe development system, with code completion and more")
    (description
      "Documentation at https://melpa.org/#/battle-haxe")
    (license #f)))

(define-public emacs-bazel
  (package
    (name "emacs-bazel")
    (version "20230919.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bazelbuild/emacs-bazel-mode.git")
               (commit
                 "769b30dc18282564d614d7044195b5a0c1a0a5f3")))
        (sha256
          (base32
            "047hwlfifnnp2iagf3jjh5hqqxsadkwqxphcnx98gf8kb19pl85f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bazelbuild/emacs-bazel-mode")
    (synopsis "Bazel support for Emacs")
    (description
      "Documentation at https://melpa.org/#/bazel")
    (license #f)))

(define-public emacs-bbcode-mode
  (package
    (name "emacs-bbcode-mode")
    (version "20190304.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-bbcode-mode.git")
               (commit
                 "e16619c80ea21154b4a4ccc2e13d0077e97c9caf")))
        (sha256
          (base32
            "0l7jygskxmbckf3xhbjzgwzkrj2m6z1n3i2l7qc9ii4i3mhpx0ai"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-bbcode-mode")
    (synopsis
      "Major mode for phpBB posts (BBCode markup)")
    (description
      "Documentation at https://melpa.org/#/bbcode-mode")
    (license #f)))

(define-public emacs-bbdb
  (package
    (name "emacs-bbdb")
    (version "20231023.544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.savannah.nongnu.org/git/bbdb.git")
               (commit
                 "5f473f84bad43a2f586f268c5c1071f1918aa209")))
        (sha256
          (base32
            "078wx4w58jwpaaz2hcpmk2868c8nk7azs7yxwhi81hg6lijqwmlx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "lisp/bbdb-site.el.in")))
    (home-page "unspecified")
    (synopsis "Big Brother DataBase")
    (description
      "Documentation at https://melpa.org/#/bbdb")
    (license #f)))

(define-public emacs-bbdb-
  (package
    (name "emacs-bbdb-")
    (version "20140221.2354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/bbdb-.git")
               (commit
                 "2839e84c894de2513af41053e80a277a1b483d22")))
        (sha256
          (base32
            "17nbnkg0zn6p89r27mk9hl6qhv6xscwdsq8iyikdw03svpr16lnp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bbdb emacs-log4e emacs-yaxception))
    (home-page "https://github.com/aki2o/bbdb-")
    (synopsis
      "provide interface for more easily search/choice than BBDB.")
    (description
      "Documentation at https://melpa.org/#/bbdb-")
    (license #f)))

(define-public emacs-bbdb-csv-import
  (package
    (name "emacs-bbdb-csv-import")
    (version "20140802.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~iank/bbdb-csv-import")
               (commit
                 "dc9e722d1c1fcd55b71625ee3f05a4921851d186")))
        (sha256
          (base32
            "0jkrznrfdh562bwy0adg1pzmqh6i766b5ki41g4pr9wcbmh937sn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pcsv emacs-dash emacs-bbdb))
    (home-page
      "https://gitlab.com/iankelling/bbdb-csv-import")
    (synopsis "import csv to bbdb version 3+")
    (description
      "Documentation at https://melpa.org/#/bbdb-csv-import")
    (license #f)))

(define-public emacs-bbdb-ext
  (package
    (name "emacs-bbdb-ext")
    (version "20151220.2013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/bbdb-ext.git")
               (commit
                 "fee97b1b3faa83edaea00fbc5ad3cbca5e791a55")))
        (sha256
          (base32
            "1ydf89mmp3zjfqdymnrwg18wclyf7psarz9f2k82pl58h0khh71g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page "https://github.com/vapniks/bbdb-ext")
    (synopsis "Extra commands for BBDB")
    (description
      "Documentation at https://melpa.org/#/bbdb-ext")
    (license #f)))

(define-public emacs-bbdb-vcard
  (package
    (name "emacs-bbdb-vcard")
    (version "20210325.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tohojo/bbdb-vcard.git")
               (commit
                 "113c66115ce68316e209f51ebce56de8dded3606")))
        (sha256
          (base32
            "1sr5kd2gvw1b4hl147yb60cgx6j730vdnpyr09p7vmpw65hzwlwm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page
      "https://github.com/tohojo/bbdb-vcard")
    (synopsis "vCard import/export for BBDB")
    (description
      "Documentation at https://melpa.org/#/bbdb-vcard")
    (license #f)))

(define-public emacs-bbdb2erc
  (package
    (name "emacs-bbdb2erc")
    (version "20190822.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/bbdb2erc.git")
               (commit
                 "40b89e961762af3e7ade3a1844a9fbcd4084ac65")))
        (sha256
          (base32
            "1faa32ya515rkx5pwz6bsav0ffyajq8vq8d3vzn9j81d9in2rh5j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page "unspecified")
    (synopsis
      "make bbdb show if pal is online with ERC, click i to chat")
    (description
      "Documentation at https://melpa.org/#/bbdb2erc")
    (license #f)))

(define-public emacs-bbww
  (package
    (name "emacs-bbww")
    (version "20230502.2239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/natelastname/bbww.git")
               (commit
                 "9b4430f757e9c7fc7178541009676af1262c486b")))
        (sha256
          (base32
            "10a80vdywcmfy0qhm1yrxm03ximrbx2vswgsm17g07lpp1hxjnrn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mwim))
    (home-page "http://chud.wtf")
    (synopsis "Improved word-jumping functions")
    (description
      "Documentation at https://melpa.org/#/bbww")
    (license #f)))

(define-public emacs-bbyac
  (package
    (name "emacs-bbyac")
    (version "20180206.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/baohaojun/bbyac.git")
               (commit
                 "9f0de9cad13801891ffb590dc09f51ff9a7cb225")))
        (sha256
          (base32
            "0q0i1j8ljfd61rk6d5fys7wvdbym9pz5nhwyfvmm0ijmy19d1ppz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-browse-kill-ring))
    (arguments '(#:files (:defaults "*.bbyac")))
    (home-page "https://github.com/baohaojun/bbyac")
    (synopsis
      "Type a little Bit, and Bang! You Are Completed.")
    (description
      "Documentation at https://melpa.org/#/bbyac")
    (license #f)))

(define-public emacs-beacon
  (package
    (name "emacs-beacon")
    (version "20220730.100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/beacon.git")
               (commit
                 "85261a928ae0ec3b41e639f05291ffd6bf7c231c")))
        (sha256
          (base32
            "0gp68ngzdyxz65wnijrj273wxrzdvkf35i0ww5sqszbin2vyxv4l"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Malabarba/beacon")
    (synopsis
      "Highlight the cursor whenever the window scrolls")
    (description
      "Documentation at https://melpa.org/#/beacon")
    (license #f)))

(define-public emacs-beans
  (package
    (name "emacs-beans")
    (version "20221114.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheBlackBeans/emacs-beans.git")
               (commit
                 "0d04b79222812aa4978b6486a9ccac461850fe7a")))
        (sha256
          (base32
            "0b7yywa91saiijx6flsn1s1n5jbb7vqy3my2gxryyrqgrxcq1xx7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TheBlackBeans/emacs-beans")
    (synopsis "Major mode for Beans grammar")
    (description
      "Documentation at https://melpa.org/#/beans")
    (license #f)))

(define-public emacs-bech32
  (package
    (name "emacs-bech32")
    (version "20221210.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "21006c5445041797428db492545d288104dd9d69")))
        (sha256
          (base32
            "1yx3xmwqpydqcnc32i2d6mrblfhvprzvqrmsj9szy3g8wqgalb4z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("bech32.el")))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "Bech32 library")
    (description
      "Documentation at https://melpa.org/#/bech32")
    (license #f)))

(define-public emacs-beef-mode
  (package
    (name "emacs-beef-mode")
    (version "20221227.203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/beef-mode.git")
               (commit
                 "20906b41630d74eba56504fbb9fabb79562e0d6e")))
        (sha256
          (base32
            "1mqwamw9rhz8sm8jwv6m70bllrglqgl5qknj08z4zchbr72ik8ah"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/beef-mode")
    (synopsis
      "A major mode for the Beef programming language")
    (description
      "Documentation at https://melpa.org/#/beef-mode")
    (license #f)))

(define-public emacs-beeminder
  (package
    (name "emacs-beeminder")
    (version "20201227.2024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodaware/beeminder.el.git")
               (commit
                 "161d9c94c594614a01cb08219693d9e000af4f69")))
        (sha256
          (base32
            "0cfjrn4hkpxhmg07kdff6ifvv1aqaq6dah5bvdc0xhzlqznx72j4"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.philnewton.net/code/beeminder-el/")
    (synopsis "Emacs interface for Beeminder")
    (description
      "Documentation at https://melpa.org/#/beeminder")
    (license #f)))

(define-public emacs-beginend
  (package
    (name "emacs-beginend")
    (version "20230902.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/beginend.git")
               (commit
                 "67888073cfc3bafe7794e0e5d5b1ef1d57ba1aee")))
        (sha256
          (base32
            "0h62qvx3p6lbpzh2xc02ssgw1zgcxpcbzcm8rdn71bh8n27yvn96"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/beginend")
    (synopsis "Redefine M-< and M-> for some modes")
    (description
      "Documentation at https://melpa.org/#/beginend")
    (license #f)))

(define-public emacs-belarus-holidays
  (package
    (name "emacs-belarus-holidays")
    (version "20190102.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/EugeneMakei/belarus-holidays.el")
               (commit
                 "35a18273e19edc3b4c761030ffbd11116483b83e")))
        (sha256
          (base32
            "1mddjgv2q0sr5v4gxvrzz8y0ybj2bjb5klqsrjajcpbpgbim1qgf"))))
    (build-system melpa-build-system)
    (home-page
      "http://bitbucket.org/EugeneMakei/belarus-holidays.el")
    (synopsis "Belarus holidays whith transfers")
    (description
      "Documentation at https://melpa.org/#/belarus-holidays")
    (license #f)))

(define-public emacs-benchmark-init
  (package
    (name "emacs-benchmark-init")
    (version "20220414.1612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dholm/benchmark-init-el.git")
               (commit
                 "02435560415bbadbcf5051fb7042880549170e7e")))
        (sha256
          (base32
            "19375vamhld4xm2qrdmhlp2nczfvalmz9x6ahl23zwkilr8n1nbw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dholm/benchmark-init-el")
    (synopsis
      "Benchmarks for require and load calls")
    (description
      "Documentation at https://melpa.org/#/benchmark-init")
    (license #f)))

(define-public emacs-benchstat
  (package
    (name "emacs-benchstat")
    (version "20171014.312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quasilyte/benchstat.el.git")
               (commit
                 "a5b67cf7972ca2bbc9f5bc6a0f521ab02b76d4f0")))
        (sha256
          (base32
            "02v5l9qvzcr58qr973phgj1c846pqp3cj16khn4h9v3f3gb180n1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Quasilyte/benchstat.el")
    (synopsis "proper benchmarking made simple")
    (description
      "Documentation at https://melpa.org/#/benchstat")
    (license #f)))

(define-public emacs-bencode
  (package
    (name "emacs-bencode")
    (version "20190317.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rorokimdim/emacs-bencode.git")
               (commit
                 "b5fe9c9d4b9b5ea61cedd77987ca46eb8154bd16")))
        (sha256
          (base32
            "19m4hfw5vkaihb3ykrvh5hmfi2w6686yma32niz2ygxwdw7ca8k8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/emacs-bencode")
    (synopsis "Bencode encoding / decoding")
    (description
      "Documentation at https://melpa.org/#/bencode")
    (license #f)))

(define-public emacs-bencoding
  (package
    (name "emacs-bencoding")
    (version "20200331.1102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/bencoding.el.git")
               (commit
                 "1e16ccfd5c6560a83ae2926afe4a5076a541d3d6")))
        (sha256
          (base32
            "0dgwh3z1ni619kxpdxv8r2k0jhgj5h6ssxp6l8s26mhpmy1bkm6c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/bencoding.el")
    (synopsis "Bencoding decoding and encoding")
    (description
      "Documentation at https://melpa.org/#/bencoding")
    (license #f)))

(define-public emacs-berrys-theme
  (package
    (name "emacs-berrys-theme")
    (version "20191201.1609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vbuzin/berrys-theme.git")
               (commit
                 "888a14206b2fb3dc45b5273aeb05075f3e0b5f60")))
        (sha256
          (base32
            "1a75pa7gckdqwrcm25a2ic4cq1la42z939qqzj6nnqyjsj3sbn00"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vbuzin/berrys-theme")
    (synopsis "A light, clean and elegant theme")
    (description
      "Documentation at https://melpa.org/#/berrys-theme")
    (license #f)))

(define-public emacs-bert
  (package
    (name "emacs-bert")
    (version "20131117.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/manzyuk/bert-el.git")
               (commit
                 "a3eec6980a725aa4abd2019e4c00246450260490")))
        (sha256
          (base32
            "06izbc0ksyhgh4gsjiifhj11v0gx9x5xjx9aqci5mc4kc6mg05sf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "BERT serialization library for Emacs")
    (description
      "Documentation at https://melpa.org/#/bert")
    (license #f)))

(define-public emacs-better-defaults
  (package
    (name "emacs-better-defaults")
    (version "20230611.432")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/better-defaults-"
               version
               ".tar"))
        (sha256
          (base32
            "1k4blmz9mc9caswk25d3vp5r4bdh4pqx4mpv1d1zrqqf373xl4ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/technomancy/better-defaults")
    (synopsis
      "Fixing weird quirks and poor defaults")
    (description
      "Documentation at https://melpa.org/#/better-defaults")
    (license #f)))

(define-public emacs-better-jumper
  (package
    (name "emacs-better-jumper")
    (version "20220110.118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gilbertw1/better-jumper.git")
               (commit
                 "205e7a539d1611dbe50f003ddf52890360f87597")))
        (sha256
          (base32
            "0877p6wc3ppfnqixrcq0cxvk8f82lfkysgbc592fv3q6977r18b1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gilbertw1/better-jumper")
    (synopsis "configurable jump list")
    (description
      "Documentation at https://melpa.org/#/better-jumper")
    (license #f)))

(define-public emacs-better-scroll
  (package
    (name "emacs-better-scroll")
    (version "20221020.430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/better-scroll.git")
               (commit
                 "df96648ffafb033063cd61595c1fca3e9a1a8e90")))
        (sha256
          (base32
            "0xa94wvsa8zm9sh5zj6z1xwh0rwmfyp25cc7a5dg0mcd7idzlfnw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/better-scroll")
    (synopsis
      "Improve user experience when scrolling window")
    (description
      "Documentation at https://melpa.org/#/better-scroll")
    (license #f)))

(define-public emacs-better-shell
  (package
    (name "emacs-better-shell")
    (version "20191025.1737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/killdash9/better-shell.git")
               (commit
                 "70c787b981caeef8c5f8012b170eb7b9f167cd13")))
        (sha256
          (base32
            "0i87d1xrg4gvszm52wdrx81g49lh75ycdfxkxhlrckbw7nkrjchz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/killdash9/better-shell")
    (synopsis "Better shell management")
    (description
      "Documentation at https://melpa.org/#/better-shell")
    (license #f)))

(define-public emacs-bf-mode
  (package
    (name "emacs-bf-mode")
    (version "20130403.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/bf-mode.git")
               (commit
                 "7cc4d09aed64d9db6be95646f5f5067de68f8895")))
        (sha256
          (base32
            "02b2m0cq04ynjcmr4j8gpdzjv9mpf1fysn736xv724xgaymj396n"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emacs-jp/bf-mode")
    (synopsis "Browse file persistently on dired")
    (description
      "Documentation at https://melpa.org/#/bf-mode")
    (license #f)))

(define-public emacs-bfbuilder
  (package
    (name "emacs-bfbuilder")
    (version "20210228.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/bfbuilder.git")
               (commit
                 "689f320a9a1326cdeff43b8538e0d739f8519c4b")))
        (sha256
          (base32
            "0wrzyv38dmsdfjwsbf89pa5l2gzbbx86jmy8nflfs86im0g9qcp1"))))
    (build-system melpa-build-system)
    (home-page "http://zk-phi.gitub.io/")
    (synopsis
      "A brainfuck development environment with interactive debugger")
    (description
      "Documentation at https://melpa.org/#/bfbuilder")
    (license #f)))

(define-public emacs-bibclean-format
  (package
    (name "emacs-bibclean-format")
    (version "20190302.2017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/bibclean-format.git")
               (commit
                 "b4003950a925d1c659bc359ab5e88e4441775d77")))
        (sha256
          (base32
            "1x5hbs9j4ms93p080267kjyqpk81il3x7q87awf6qzz5xhc20d3b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/peterwvj/bibclean-format")
    (synopsis
      "Reformat BibTeX and Scribe using bibclean")
    (description
      "Documentation at https://melpa.org/#/bibclean-format")
    (license #f)))

(define-public emacs-biblio
  (package
    (name "emacs-biblio")
    (version "20230202.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/biblio.el.git")
               (commit
                 "ee52f6cda82ea6fbc3b400e7b12132595cc0374c")))
        (sha256
          (base32
            "0iya5ybc54kia5vnb3bfr8yilykhbn2xvp157vya06cw4af2cw65"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-biblio-core))
    (arguments
      '(#:files (:defaults (:exclude "biblio-core.el"))))
    (home-page
      "https://github.com/cpitclaudel/biblio.el")
    (synopsis
      "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org")
    (description
      "Documentation at https://melpa.org/#/biblio")
    (license #f)))

(define-public emacs-biblio-bibsonomy
  (package
    (name "emacs-biblio-bibsonomy")
    (version "20190105.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andreasjansson/biblio-bibsonomy.el.git")
               (commit
                 "778cc944db3c6dababe2e7fec5877fba42e8c00d")))
        (sha256
          (base32
            "0141nphan49br71bx89ias78wvchfsir3snssn3kf6l97ha1afgn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-biblio-core))
    (home-page
      "http://github.com/andreasjansson/biblio-bibsonomy/")
    (synopsis
      "Lookup bibliographic entries from Bibsonomy")
    (description
      "Documentation at https://melpa.org/#/biblio-bibsonomy")
    (license #f)))

(define-public emacs-biblio-core
  (package
    (name "emacs-biblio-core")
    (version "20230202.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/biblio.el.git")
               (commit
                 "ee52f6cda82ea6fbc3b400e7b12132595cc0374c")))
        (sha256
          (base32
            "0iya5ybc54kia5vnb3bfr8yilykhbn2xvp157vya06cw4af2cw65"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("biblio-core.el")))
    (home-page
      "https://github.com/cpitclaudel/biblio.el")
    (synopsis
      "A framework for looking up and displaying bibliographic entries")
    (description
      "Documentation at https://melpa.org/#/biblio-core")
    (license #f)))

(define-public emacs-bibliothek
  (package
    (name "emacs-bibliothek")
    (version "20190124.1828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "8a3b529d5ece261a8847298ea03ed35615cc9bfa")))
        (sha256
          (base32
            "16zalqjd2llwkp7v0218crgf3k34py8zx6lj6z7i3kbmxm9nb27q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-a))
    (arguments '(#:files ("bibliothek.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#bibliothek-el")
    (synopsis "Managing a digital library of PDFs")
    (description
      "Documentation at https://melpa.org/#/bibliothek")
    (license #f)))

(define-public emacs-bibretrieve
  (package
    (name "emacs-bibretrieve")
    (version "20191124.1855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pzorin/bibretrieve.git")
               (commit
                 "81dc8e0db3629cc180eafb2bc34b60dcd8980316")))
        (sha256
          (base32
            "00zya2h6f5fpfxyi893fz3kpbbdhd8yq6b8g42bvxc5bfbknfhwc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/pzorin/bibretrieve")
    (synopsis
      "Retrieve BibTeX entries from the internet")
    (description
      "Documentation at https://melpa.org/#/bibretrieve")
    (license #f)))

(define-public emacs-bibslurp
  (package
    (name "emacs-bibslurp")
    (version "20151202.2346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkmcc/bibslurp.git")
               (commit
                 "0116bbb04840d20a6b087e6d9c921bb1c2489a8f")))
        (sha256
          (base32
            "0vcdi0q6rbs3qqlpccy9hdv82zrx61gdj3fn444qashk84s085vf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://github.com/mkmcc/bibslurp")
    (synopsis
      "retrieve BibTeX entries from NASA ADS")
    (description
      "Documentation at https://melpa.org/#/bibslurp")
    (license #f)))

(define-public emacs-bibtex-capf
  (package
    (name "emacs-bibtex-capf")
    (version "20230226.2331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mclear-tools/bibtex-capf.git")
               (commit
                 "7635fec3bc565acafbb6e1bff1cc711844f869ce")))
        (sha256
          (base32
            "0g5wnl3qch2nc3i4yv915zmxfjgcdrr5z6izxnv60g05ma19i66p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parsebib))
    (home-page
      "https://github.com/mclear-tools/bibtex-capf")
    (synopsis
      "Completion at point for bibtex --- *- lexical-binding: t -*-")
    (description
      "Documentation at https://melpa.org/#/bibtex-capf")
    (license #f)))

(define-public emacs-bibtex-completion
  (package
    (name "emacs-bibtex-completion")
    (version "20230918.953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/helm-bibtex.git")
               (commit
                 "d8baeaa4c69fde4a179102c8271c1db804e5155e")))
        (sha256
          (base32
            "0jpx75nx546cd4c8ph8nz5a8kq8g711z3r96nm08jm264fgr3dl0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-parsebib
            emacs-s
            emacs-dash
            emacs-f
            emacs-biblio))
    (arguments '(#:files ("bibtex-completion.el")))
    (home-page
      "https://github.com/tmalsburg/helm-bibtex")
    (synopsis
      "A BibTeX backend for completion frameworks")
    (description
      "Documentation at https://melpa.org/#/bibtex-completion")
    (license #f)))

(define-public emacs-bibtex-utils
  (package
    (name "emacs-bibtex-utils")
    (version "20190703.2117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plantarum/bibtex-utils.git")
               (commit
                 "26a8f0909b6adbf545a2b5e57ce7f779bf7a65af")))
        (sha256
          (base32
            "19p9v49j7yq41wifw34nwxhqnv18zjqzy6z8xbwm1j7fn78lafk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/plantarum/bibtex-utils")
    (synopsis
      "Provides utilities for extending BibTeX mode")
    (description
      "Documentation at https://melpa.org/#/bibtex-utils")
    (license #f)))

(define-public emacs-bicycle
  (package
    (name "emacs-bicycle")
    (version "20230901.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/bicycle.git")
               (commit
                 "fed6a6320f41b62b79892e95cee76d00a2bbd620")))
        (sha256
          (base32
            "12nkybijaqc22i22kn75pjjjxq8njyyr8dq6g2l3jz030qrv5359"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/bicycle")
    (synopsis "Cycle outline and code visibility")
    (description
      "Documentation at https://melpa.org/#/bicycle")
    (license #f)))

(define-public emacs-bifocal
  (package
    (name "emacs-bifocal")
    (version "20200325.539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/riscy/bifocal-mode.git")
               (commit
                 "de8d09b08b0b30714c4f9b98c97e9577d47b9be6")))
        (sha256
          (base32
            "1z3jk232i0h2zakvbkfpb5a5qdbzfqn4zvbja1hms9349x54a07i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/riscy/bifocal-mode")
    (synopsis
      "Split-screen scrolling for comint-mode buffers")
    (description
      "Documentation at https://melpa.org/#/bifocal")
    (license #f)))

(define-public emacs-binclock
  (package
    (name "emacs-binclock")
    (version "20170802.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/binclock.el.git")
               (commit
                 "87042230d7f3fe3e9a77fae0dbab7d8f7e7794ad")))
        (sha256
          (base32
            "0bbcn3aif3qvmgbga7znivcbgn1n79278x7xvbha52zpj584xp8d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/binclock.el")
    (synopsis
      "Display the current time using a binary clock.")
    (description
      "Documentation at https://melpa.org/#/binclock")
    (license #f)))

(define-public emacs-bind
  (package
    (name "emacs-bind")
    (version "20231001.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/repelliuss/bind.git")
               (commit
                 "4c1698a7c1c9f3d45559c3be871d87d76a1cbe00")))
        (sha256
          (base32
            "0dv2jgis2z4cbss346wxxnka6ig6w88rf7pnrd3v9xf8r2x4zqj6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/repelliuss/bind")
    (synopsis "Bind commands to keys")
    (description
      "Documentation at https://melpa.org/#/bind")
    (license #f)))

(define-public emacs-bind-chord
  (package
    (name "emacs-bind-chord")
    (version "20221117.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "9090080b15486c3e337be254226efe7e5fde4c99")))
        (sha256
          (base32
            "03mqkv63ink2ysy86slac8ac7a5g22bi0pwvxyncfasm43q9d0sx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bind-key emacs-key-chord))
    (arguments '(#:files ("bind-chord.el")))
    (home-page
      "https://github.com/jwiegley/use-package")
    (synopsis
      "key-chord binding helper for use-package-chords")
    (description
      "Documentation at https://melpa.org/#/bind-chord")
    (license #f)))

(define-public emacs-bind-key
  (package
    (name "emacs-bind-key")
    (version "20230203.2004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "77945e002f11440eae72d8730d3de218163d551e")))
        (sha256
          (base32
            "1irr8a8r28n8c0c2x5w1flgv1f3z5jy2i5r5dknddiqa93b3rm84"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("bind-key.el")))
    (home-page
      "https://github.com/jwiegley/use-package")
    (synopsis
      "A simple way to manage personal keybindings")
    (description
      "Documentation at https://melpa.org/#/bind-key")
    (license #f)))

(define-public emacs-bind-map
  (package
    (name "emacs-bind-map")
    (version "20220108.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-bind-map.git")
               (commit
                 "510a24138d8de3b8df0783f1ac493a551fc9bd74")))
        (sha256
          (base32
            "0crxjy1ykgb429z8ikjv5iy8vg5i0qn8n86p2lgri4glx45sxxx0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justbur/emacs-bind-map")
    (synopsis
      "Bind personal keymaps in multiple locations")
    (description
      "Documentation at https://melpa.org/#/bind-map")
    (license #f)))

(define-public emacs-binder
  (package
    (name "emacs-binder")
    (version "20230729.350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/binder.git")
               (commit
                 "859d89c00e21c83565ed2b45f8d7527b45b1292c")))
        (sha256
          (base32
            "0da3wx93rbsy9y1hd5w722sgblg5bffznw00vyylwnq5zaikh5lp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/binder")
    (synopsis
      "Global minor mode to facilitate multi-file writing projects")
    (description
      "Documentation at https://melpa.org/#/binder")
    (license #f)))

(define-public emacs-bing-dict
  (package
    (name "emacs-bing-dict")
    (version "20200216.110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/bing-dict.el.git")
               (commit
                 "1d581aaa9622b34f8fb83af5579fa252aa24cfef")))
        (sha256
          (base32
            "1v0ncgnj9vv2r0qbwiipg63rlhnfjz8q23jx3la2l22l0i2lyivb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cute-jumper/bing-dict.el")
    (synopsis
      "Minimalists' English-Chinese Bing dictionary")
    (description
      "Documentation at https://melpa.org/#/bing-dict")
    (license #f)))

(define-public emacs-binky
  (package
    (name "emacs-binky")
    (version "20231023.2145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/binky.el.git")
               (commit
                 "bf9bd87c44cd5ca5ede0f080fa510240d948a644")))
        (sha256
          (base32
            "0m0xzcrb0yiddbr2vvnnv0vz4wb6smb3lmk4hij2hdhawf22vm1h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liuyinz/binky-mode")
    (synopsis "Jump between points like a rabbit")
    (description
      "Documentation at https://melpa.org/#/binky")
    (license #f)))

(define-public emacs-biome
  (package
    (name "emacs-biome")
    (version "20231015.1930")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/biome.git")
               (commit
                 "f931520566a31ebcc3392bb902f1c36e377bb2a2")))
        (sha256
          (base32
            "162mnjq0pxxakcrrhr0bcm2rnvx1di0hg6xmrbljkcgjs20yzsfm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ct emacs-request emacs-compat))
    (home-page
      "https://github.com/SqrtMinusOne/biome")
    (synopsis
      "Bountiful Interface to Open Meteo for Emacs")
    (description
      "Documentation at https://melpa.org/#/biome")
    (license #f)))

(define-public emacs-birds-of-paradise-plus-theme
  (package
    (name "emacs-birds-of-paradise-plus-theme")
    (version "20130419.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimeh/birds-of-paradise-plus-theme.el.git")
               (commit
                 "bb9f9d4ef7f7872a388ec4eee1253069adcadb6f")))
        (sha256
          (base32
            "1n5icy29ks5rxrxp7v4sf0523z7wxn0fh9lx4y6jb7ppdjnff12s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimeh/birds-of-paradise-plus-theme.el")
    (synopsis
      "A brown/orange light-on-dark theme for Emacs 24 (deftheme).")
    (description
      "Documentation at https://melpa.org/#/birds-of-paradise-plus-theme")
    (license #f)))

(define-public emacs-bison-mode
  (package
    (name "emacs-bison-mode")
    (version "20210527.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/bison-mode.git")
               (commit
                 "4f2e20394a475931409618c1635e9c9f1cf07d9c")))
        (sha256
          (base32
            "0rh4kjfapgnvv6yc3ps0n8y9nbrpdi5gs541j2axvqx97hhv8an9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing bison, yacc and lex files.")
    (description
      "Documentation at https://melpa.org/#/bison-mode")
    (license #f)))

(define-public emacs-bitbake
  (package
    (name "emacs-bitbake")
    (version "20220509.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/bitbake-el.git")
               (commit
                 "434b088ab8715731d62978264cb934e34c75c4b3")))
        (sha256
          (base32
            "15p265zigxki80h3gfq61cmssqqwcnp0990zl8xmj8p377523l6m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-mmm-mode emacs-s))
    (home-page
      "https://github.com/canatella/bitbake-el")
    (synopsis "Running bitbake from emacs")
    (description
      "Documentation at https://melpa.org/#/bitbake")
    (license #f)))

(define-public emacs-bitbucket
  (package
    (name "emacs-bitbucket")
    (version "20170405.446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tjaartvdwalt/bitbucket.el.git")
               (commit
                 "5e663da1bd38a14c1ecf4d66a79d4321ac833bcf")))
        (sha256
          (base32
            "1sikayb6i1k40zdl4j9n04xcmsf74py5vmcjbvli7k8b3ar7l5l5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-s))
    (home-page
      "http://github.com/tjaartvdwalt/bitbucket.el/")
    (synopsis "Bitbucket API wrapper")
    (description
      "Documentation at https://melpa.org/#/bitbucket")
    (license #f)))

(define-public emacs-bitlbee
  (package
    (name "emacs-bitlbee")
    (version "20151203.0")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pjones/bitlbee-el.git")
               (commit
                 "3a92a4119e0c007df2c7dcf1b1c3a5f23ee40e05")))
        (sha256
          (base32
            "0mccvpf8f87i7rqga3s4slrqz80rp3kyj071rrimhzpx8pnsrxx9"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/bitlbee.el")))
    (home-page "unspecified")
    (synopsis
      "Help get Bitlbee (http://www.bitlbee.org) up and running.")
    (description
      "Documentation at https://melpa.org/#/bitlbee")
    (license #f)))

(define-public emacs-bitpack
  (package
    (name "emacs-bitpack")
    (version "20230417.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/bitpack.git")
               (commit
                 "a082de045d91340a009158b4963a374815807dc6")))
        (sha256
          (base32
            "16dv5ib9mi7j7jqwbmykmsyi0w0jnc6vky9919l0xmbc3vh3r7yw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/skeeto/bitpack")
    (synopsis "Bit packing functions")
    (description
      "Documentation at https://melpa.org/#/bitpack")
    (license #f)))

(define-public emacs-blackboard-bold-mode
  (package
    (name "emacs-blackboard-bold-mode")
    (version "20160813.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grettke/blackboard-bold-mode.git")
               (commit
                 "5299cb064ba71baa3e331b8560bf8dd38cbbc4ed")))
        (sha256
          (base32
            "00xbcgx4snz4sd7q7ys24rsnf5wdxjn402v8y5dgn4ayx88y1rrj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grettke/blackboard-bold-mode")
    (synopsis
      "Easily insert Unicode mathematical double-struck characters")
    (description
      "Documentation at https://melpa.org/#/blackboard-bold-mode")
    (license #f)))

(define-public emacs-blackboard-theme
  (package
    (name "emacs-blackboard-theme")
    (version "20161216.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/don9z/blackboard-theme.git")
               (commit
                 "7a0d79410feb728ff5cce75c140fadc19a3f9a6d")))
        (sha256
          (base32
            "00hws9fbf7hy11hnicgk2q3din0z8hdq7my00aaw7b8nnb8q4g89"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/don9z/blackboard-theme")
    (synopsis "TextMate Blackboard Theme")
    (description
      "Documentation at https://melpa.org/#/blackboard-theme")
    (license #f)))

(define-public emacs-blacken
  (package
    (name "emacs-blacken")
    (version "20230821.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/blacken.git")
               (commit
                 "8266c31465c87db1eb302da690cce55916e8fc52")))
        (sha256
          (base32
            "00ssy9fn568v61k6m9m879dysrn0gmyaidcnfs011avqrcxn20rb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/proofit404/blacken")
    (synopsis
      "Reformat python buffers using the \"black\" formatter")
    (description
      "Documentation at https://melpa.org/#/blacken")
    (license #f)))

(define-public emacs-blackjack
  (package
    (name "emacs-blackjack")
    (version "20230821.41")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gdonald/blackjack-el.git")
               (commit
                 "7f9072630a159b59a146346b5dae24ab8fb5f290")))
        (sha256
          (base32
            "1wnm2v9cv0idyks8q6qrxrsby0adpap5ywy9ab602jjidf6ajxm4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gdonald/blackjack-el")
    (synopsis "The game of Blackjack")
    (description
      "Documentation at https://melpa.org/#/blackjack")
    (license #f)))

(define-public emacs-blackout
  (package
    (name "emacs-blackout")
    (version "20220509.2350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/blackout.git")
               (commit
                 "7707211370f03f03a2f74df15f42ac24a1e99300")))
        (sha256
          (base32
            "1lk7zvndd41aq67f9agjkzyp4xp1q9m9srjd30nfgsgi2qmbj45r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/blackout")
    (synopsis "Better mode lighter overriding")
    (description
      "Documentation at https://melpa.org/#/blackout")
    (license #f)))

(define-public emacs-blamer
  (package
    (name "emacs-blamer")
    (version "20230930.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Artawower/blamer.el.git")
               (commit
                 "4b70b657f83542491b77a4dc512674f3fa5ce01c")))
        (sha256
          (base32
            "0hf6f4zix567a65283cn3wvngqppcazsicq9icrkmjw59sgl1hix"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (home-page
      "https://github.com/artawower/blamer.el")
    (synopsis
      "Show git blame info about current line")
    (description
      "Documentation at https://melpa.org/#/blamer")
    (license #f)))

(define-public emacs-blgrep
  (package
    (name "emacs-blgrep")
    (version "20150401.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataka/blgrep.git")
               (commit
                 "605beda210610a5829750a987f5fcebea97af546")))
        (sha256
          (base32
            "1pslwyaq18d1z7fay2ih3n27i6b49ss62drqqb095l1jxk42xxm0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clmemo))
    (home-page "unspecified")
    (synopsis "Block grep")
    (description
      "Documentation at https://melpa.org/#/blgrep")
    (license #f)))

(define-public emacs-blimp
  (package
    (name "emacs-blimp")
    (version "20180903.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/blimp.git")
               (commit
                 "39562f02acc1113595cb253a85bb3b9da743ddd2")))
        (sha256
          (base32
            "0wzdln3rqqvckkc63q5sb83kimnyk6hrc4slbxhwapdfk53gz0j9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eimp))
    (home-page "https://github.com/walseb/blimp")
    (synopsis "Bustling Image Manipulation Package")
    (description
      "Documentation at https://melpa.org/#/blimp")
    (license #f)))

(define-public emacs-bliss-theme
  (package
    (name "emacs-bliss-theme")
    (version "20170808.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-bliss-theme.git")
               (commit
                 "c3cf6d8a666ab26909b7da158f9e94df71a5fbbf")))
        (sha256
          (base32
            "1bpyhsjfdjfa1iw9kv7fsl30vz48qllqgjg1rsxdl3vcripcbc9z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Bliss (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/bliss-theme")
    (license #f)))

(define-public emacs-blitzmax-mode
  (package
    (name "emacs-blitzmax-mode")
    (version "20211128.2028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodaware/blitzmax-mode.git")
               (commit
                 "c9651fa69116b5821cd34fb34eabc3e12ce238e2")))
        (sha256
          (base32
            "1h88nhqja5gzfrnbdxymnggvg3xd5yl305l4j80x3am3pyyfp909"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.sodaware.net/dev/tools/blitzmax-mode/")
    (synopsis
      "A major mode for editing BlitzMax source code")
    (description
      "Documentation at https://melpa.org/#/blitzmax-mode")
    (license #f)))

(define-public emacs-bln-mode
  (package
    (name "emacs-bln-mode")
    (version "20181121.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgrachten/bln-mode.git")
               (commit
                 "a601b0bf975dd1432f6552ab6afe3f4f71133b4a")))
        (sha256
          (base32
            "19y1fs5bzp2sqvh6svmj0cpvgq13zmsn852027hi11zvwi6dzqz8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mgrachten/bln-mode")
    (synopsis
      "binary line navigation minor mode for cursor movement in long lines")
    (description
      "Documentation at https://melpa.org/#/bln-mode")
    (license #f)))

(define-public emacs-block-nav
  (package
    (name "emacs-block-nav")
    (version "20201005.202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nixin72/block-nav.el.git")
               (commit
                 "d69acaa3d6c75bf4c518d8ab8896ad63580253fc")))
        (sha256
          (base32
            "14qnak1ynfzjlx8dp82dwmz2qhwrjyiz6zpaa7kpca4zgn8xgc5p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nixin72/block-nav.el")
    (synopsis
      "Jump across indentation levels for quick navigation")
    (description
      "Documentation at https://melpa.org/#/block-nav")
    (license #f)))

(define-public emacs-blockdiag-mode
  (package
    (name "emacs-blockdiag-mode")
    (version "20160427.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcezx/blockdiag-mode.git")
               (commit
                 "f3b21ba433d60327cebd103ae4492200750e24a9")))
        (sha256
          (base32
            "111i897dnkbx4xq62jfkqq4li4gm16lxbgkgg2gn13zv0f0lzgvy"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xcezx/xdiag-mode")
    (synopsis
      "Major mode for editing blockdiag files")
    (description
      "Documentation at https://melpa.org/#/blockdiag-mode")
    (license #f)))

(define-public emacs-blog-admin
  (package
    (name "emacs-blog-admin")
    (version "20170923.1409")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcodebuild/blog-admin.git")
               (commit
                 "b5f2e1dad7d68ec903619f7280bb0bcb7e398a1e")))
        (sha256
          (base32
            "0fgzmmjxhl8i9yqx1bvb7hgkk9w4ylx73xy990qf1bl7fg21v636"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ctable emacs-s emacs-f emacs-names))
    (home-page "unspecified")
    (synopsis
      "Blog admin for emacs with hexo/org-page supported")
    (description
      "Documentation at https://melpa.org/#/blog-admin")
    (license #f)))

(define-public emacs-blog-minimal
  (package
    (name "emacs-blog-minimal")
    (version "20181021.849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thiefuniverse/blog-minimal.git")
               (commit
                 "356c878322258159021eecdd15757e11cf02e335")))
        (sha256
          (base32
            "1phiraki6l6bp7mw90spw0r99wahl47ycpz0lxr3zljb5ip8jddp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-simple-httpd
            emacs-mustache
            emacs-s))
    (arguments
      '(#:files
        (:defaults "media" "templates" "about.org")))
    (home-page
      "https://github.com/thiefuniverse/blog-minimal")
    (synopsis
      "a simple static site generator based on org mode")
    (description
      "Documentation at https://melpa.org/#/blog-minimal")
    (license #f)))

(define-public emacs-blox
  (package
    (name "emacs-blox")
    (version "20220521.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kennethloeffler/blox.git")
               (commit
                 "9ebebb65fb38b5570ba8dfbb5ec835633c06b67d")))
        (sha256
          (base32
            "0cbmqzhv8bnfjracdc7xc5ba7cr8fqfh8l617sxarw51daallxri"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kennethloeffler/blox")
    (synopsis "Interaction with Roblox tooling")
    (description
      "Documentation at https://melpa.org/#/blox")
    (license #f)))

(define-public emacs-bluesound
  (package
    (name "emacs-bluesound")
    (version "20230328.1430")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/bluesound-"
               version
               ".tar"))
        (sha256
          (base32
            "13biara12yd0g89053b1sw95kll2zvycc0hji63w6v5qd7k7rdjl"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~rwv/bluesound-el/")
    (synopsis
      "Play, pause, resume music on a Bluesound player")
    (description
      "Documentation at https://melpa.org/#/bluesound")
    (license #f)))

(define-public emacs-bm
  (package
    (name "emacs-bm")
    (version "20231008.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joodland/bm.git")
               (commit
                 "1351e2e15a7666e614c94b41414c8f024dc10a50")))
        (sha256
          (base32
            "0dv3b0bv4rxvmac388j0qfkdvw7mbd72nfnb9skzkz39is39jp9j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joodland/bm")
    (synopsis "Visible bookmarks in buffer.")
    (description
      "Documentation at https://melpa.org/#/bm")
    (license #f)))

(define-public emacs-bmx-mode
  (package
    (name "emacs-bmx-mode")
    (version "20210319.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/josteink/bmx-mode.git")
               (commit
                 "6f008707efe0bb5646f0c1b0d6f57f0a8800e200")))
        (sha256
          (base32
            "0v6b8w4hy1yw713mkkh74b7c638hnk24ccbizfsylnk00ynrrza1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-s))
    (home-page "http://github.com/josteink/bmx-mode")
    (synopsis "Batch Mode eXtras")
    (description
      "Documentation at https://melpa.org/#/bmx-mode")
    (license #f)))

(define-public emacs-bnf-mode
  (package
    (name "emacs-bnf-mode")
    (version "20221205.1451")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergeyklay/bnf-mode.git")
               (commit
                 "1a7e177c282b8e07a2c33bd89232464b347dfc17")))
        (sha256
          (base32
            "1r23hrl258v7r0y785p2jrjz0y0bpd4lpl9ji91pqzrm6amvbkn4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sergeyklay/bnf-mode")
    (synopsis "Major mode for editing BNF grammars.")
    (description
      "Documentation at https://melpa.org/#/bnf-mode")
    (license #f)))

(define-public emacs-bnfc
  (package
    (name "emacs-bnfc")
    (version "20160605.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmitchell/bnfc-mode.git")
               (commit
                 "1b58df1dd0cb9b81900632fb2843a03b94f56fdb")))
        (sha256
          (base32
            "0lmqrcy80nw6vmf81kh6q39x8pwhzrj6lbk31xpl8mvwnpqaykmn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jmitchell/bnfc-mode")
    (synopsis
      "Define context-free grammars for the BNFC tool")
    (description
      "Documentation at https://melpa.org/#/bnfc")
    (license #f)))

(define-public emacs-boa-ide
  (package
    (name "emacs-boa-ide")
    (version "20230813.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/boalang/syntax-highlight.git")
               (commit
                 "e1f960ada937be747ea2ec302bea155092e5c06b")))
        (sha256
          (base32
            "1ncnk58whrjrkg2xx9x54q33zs55ilnj0wrcjpj9rd6nrrg1arqi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-boa-mode
            emacs-json-snatcher
            emacs-json-mode))
    (arguments
      '(#:files
        ("boa-ide-sc.el"
         "boa-ide.el"
         "boa-ide-study-config.el")))
    (home-page
      "https://github.com/boalang/syntax-highlight")
    (synopsis "Mode for boa language files")
    (description
      "Documentation at https://melpa.org/#/boa-ide")
    (license #f)))

(define-public emacs-boa-mode
  (package
    (name "emacs-boa-mode")
    (version "20230730.2216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/boalang/syntax-highlight.git")
               (commit
                 "e1f960ada937be747ea2ec302bea155092e5c06b")))
        (sha256
          (base32
            "1ncnk58whrjrkg2xx9x54q33zs55ilnj0wrcjpj9rd6nrrg1arqi"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("boa-mode.el" "boa-doc.el" "emacs-snippets")))
    (home-page
      "https://github.com/boalang/syntax-highlight")
    (synopsis "Mode for boa language files")
    (description
      "Documentation at https://melpa.org/#/boa-mode")
    (license #f)))

(define-public emacs-bog
  (package
    (name "emacs-bog")
    (version "20230521.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyleam/bog.git")
               (commit
                 "6bea27368b0010e04fb7c7894064251940eb21b0")))
        (sha256
          (base32
            "0nl47wdkgs0mii779n0yrag7bk37gxzpj6b4vf70hma9290q955w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kyleam/bog")
    (synopsis
      "Extensions for research notes in Org mode")
    (description
      "Documentation at https://melpa.org/#/bog")
    (license #f)))

(define-public emacs-bolt-mode
  (package
    (name "emacs-bolt-mode")
    (version "20180310.810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpontus/bolt-mode.git")
               (commit
                 "85a5a752bfbebb4aed884326c25db64c000e9934")))
        (sha256
          (base32
            "03nxcmpm5n8jcca39ivrl7cjqz3gzsl3w6qc30hcp278qf2jq6va"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mpontus/bolt-mode")
    (synopsis "Editing support for Bolt language")
    (description
      "Documentation at https://melpa.org/#/bolt-mode")
    (license #f)))

(define-public emacs-bongo
  (package
    (name "emacs-bongo")
    (version "20201002.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dbrock/bongo.git")
               (commit
                 "9e9629090262bba6d0003dabe5a375e47a4477f1")))
        (sha256
          (base32
            "1ayiqj8zc15kf3211asgc4hl7zv78y6n6m6rsb9svysak5srr3wy"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "*.texi" "images" "*.rb")))
    (home-page "unspecified")
    (synopsis "play music with Emacs")
    (description
      "Documentation at https://melpa.org/#/bongo")
    (license #f)))

(define-public emacs-bonjourmadame
  (package
    (name "emacs-bonjourmadame")
    (version "20170919.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pierre-lecocq/bonjourmadame.git")
               (commit
                 "d3df185fce78aefa689fded8e56a654f0fde4ac0")))
        (sha256
          (base32
            "1acn63hd7s2z8viy52hmhncdic7m86rcqczxnz9aivikqy4hfnsi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Say \"Hello ma'am!\"")
    (description
      "Documentation at https://melpa.org/#/bonjourmadame")
    (license #f)))

(define-public emacs-boogie-friends
  (package
    (name "emacs-boogie-friends")
    (version "20221115.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/boogie-org/boogie-friends.git")
               (commit
                 "5b32e4859823ed7f5e70fd5d2eac5d813a8e3e51")))
        (sha256
          (base32
            "1gihjkxnq4mqlcgjhmfbf4i7v7zyqy01ls2ac10pa5k1db2g1nbc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-flycheck
            emacs-yasnippet
            emacs-company))
    (arguments '(#:files ("emacs/*.el" "emacs/etc")))
    (home-page
      "https://github.com/boogie-org/boogie-friends/")
    (synopsis
      "A collection of programming modes for Boogie, Dafny, and Z3 (SMTLIB v2).")
    (description
      "Documentation at https://melpa.org/#/boogie-friends")
    (license #f)))

(define-public emacs-bookmark-in-project
  (package
    (name "emacs-bookmark-in-project")
    (version "20230604.757")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/bookmark-in-project-"
               version
               ".tar"))
        (sha256
          (base32
            "18kvkjgng51qmhmkbc0a2zn3mpagmxrvzffzjrj96069l83k8rha"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-bookmark-in-project")
    (synopsis "Bookmark access within a project")
    (description
      "Documentation at https://melpa.org/#/bookmark-in-project")
    (license #f)))

(define-public emacs-bookmark-view
  (package
    (name "emacs-bookmark-view")
    (version "20220403.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/bookmark-view.git")
               (commit
                 "0d40ac67f53b7fa75fe65c38a5ef65701ce4c3da")))
        (sha256
          (base32
            "0sa5lypdxgffzz22kq2jpcc02xmcmr77bsc0iggh7b2khnxjppxj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/minad/bookmark-view")
    (synopsis "Bookmark views")
    (description
      "Documentation at https://melpa.org/#/bookmark-view")
    (license #f)))

(define-public emacs-bool-flip
  (package
    (name "emacs-bool-flip")
    (version "20161215.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/michaeljb/bool-flip.git")
               (commit
                 "f58a9a7b9ab875bcfbd57c8262697ae404eb4485")))
        (sha256
          (base32
            "06q86a6dhc7jvq25yqqq3dsmrbm67h0ayb6nhd0q5l90yrmfqfjh"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/michaeljb/bool-flip/")
    (synopsis "flip the boolean under the point")
    (description
      "Documentation at https://melpa.org/#/bool-flip")
    (license #f)))

(define-public emacs-boon
  (package
    (name "emacs-boon")
    (version "20230815.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jyp/boon.git")
               (commit
                 "ea3b39b6920959d8cb87698087912ab1ab9f90b3")))
        (sha256
          (base32
            "192zby67j34zfxbpgi7n5m6rkb8r2yzma5b46hy0pfm0sy3pyqyf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-expand-region
            emacs-multiple-cursors))
    (home-page "unspecified")
    (synopsis "Ergonomic Command Mode for Emacs.")
    (description
      "Documentation at https://melpa.org/#/boon")
    (license #f)))

(define-public emacs-borg
  (package
    (name "emacs-borg")
    (version "20231101.2319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/borg.git")
               (commit
                 "d8aecb09193448de12d5a19ac7bf242f3c39e767")))
        (sha256
          (base32
            "07lfdmfs2bfn9a0zq6jvh8mizj0sr02ngib6fil9w31rlp7p8gnn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epkg emacs-magit))
    (arguments '(#:files (:defaults "borg.mk")))
    (home-page
      "https://github.com/emacscollective/borg")
    (synopsis
      "Assimilate Emacs packages as Git submodules")
    (description
      "Documentation at https://melpa.org/#/borg")
    (license #f)))

(define-public emacs-borland-blue-theme
  (package
    (name "emacs-borland-blue-theme")
    (version "20160117.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/borland-blue-theme.git")
               (commit
                 "db74eefebbc89d3c62575f8f50b319e87b4a3470")))
        (sha256
          (base32
            "0yzfxxv2bw4x320268bixfc7yf97851804bz3829vbdhnr4kp6y5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fourier/borland-blue-theme")
    (synopsis
      "Blue/yellow theme based on old DOS Borland/Turbo C IDE")
    (description
      "Documentation at https://melpa.org/#/borland-blue-theme")
    (license #f)))

(define-public emacs-boron-theme
  (package
    (name "emacs-boron-theme")
    (version "20170808.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-boron-theme.git")
               (commit
                 "87ae1a765e07429fec25d2f29b004f84b52d2e0a")))
        (sha256
          (base32
            "1kdf71af1s67vshgwkdgi7swxx942i605awhmhrhdjbkra29v4yn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Boron (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/boron-theme")
    (license #f)))

(define-public emacs-boxes
  (package
    (name "emacs-boxes")
    (version "20230326.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ascii-boxes/boxes.git")
               (commit
                 "47b7084fa1d682c0b15de612761a62bbfc8f2f41")))
        (sha256
          (base32
            "13ipkjlpkacsgahakia7srxlc5jh1mdpcr188ip0rkhzpxcy0q5p"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("doc/*.el")))
    (home-page "https://boxes.thomasjensen.com")
    (synopsis "ASCII boxes unlimited!")
    (description
      "Documentation at https://melpa.org/#/boxes")
    (license #f)))

(define-public emacs-boxquote
  (package
    (name "emacs-boxquote")
    (version "20220919.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/boxquote.el.git")
               (commit
                 "fe676396fa7e4372e01bf2c3d9a62e8d53615d46")))
        (sha256
          (base32
            "0d7m9kcwhbgv4pikaa2dzlg9zkmwdhyx2ksn68di6xzbh838892q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/boxquote.el")
    (synopsis "Quote text with a semi-box.")
    (description
      "Documentation at https://melpa.org/#/boxquote")
    (license #f)))

(define-public emacs-bpe
  (package
    (name "emacs-bpe")
    (version "20141228.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/bpe.git")
               (commit
                 "7b5b25f83506e6c9f4075d3803fa32404943a189")))
        (sha256
          (base32
            "0chmarbpqingdma54d6chbr6v6jg8lapbw56cpvcpbl04fz980r0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("bpe.el")))
    (home-page "https://github.com/yuutayamada/bpe")
    (synopsis "Blog from Org mode to Blogger")
    (description
      "Documentation at https://melpa.org/#/bpe")
    (license #f)))

(define-public emacs-bpftrace-mode
  (package
    (name "emacs-bpftrace-mode")
    (version "20190608.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jgkamat/bpftrace-mode.git")
               (commit
                 "181065e1f9ab4ec7096bafffe6818b0d7f5362b1")))
        (sha256
          (base32
            "14nxqlrza35l955zgc4yi9yaymd9slyyyjmbnbd831v8jlddngm9"))))
    (build-system melpa-build-system)
    (home-page
      "http://gitlab.com/jgkamat/bpftrace-mode")
    (synopsis
      "Major mode for editing bpftrace script files")
    (description
      "Documentation at https://melpa.org/#/bpftrace-mode")
    (license #f)))

(define-public emacs-bpr
  (package
    (name "emacs-bpr")
    (version "20180220.1844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ilya-babanov/emacs-bpr.git")
               (commit
                 "7f3c787ed80ac0e83447192ac5450dfa7110ade1")))
        (sha256
          (base32
            "1jb14vd1d35jk3mnb2ja293p2l57yvi7w1idrajapz41ggvfyqbb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ilya-babanov/emacs-bpr")
    (synopsis "Background Process Runner")
    (description
      "Documentation at https://melpa.org/#/bpr")
    (license #f)))

(define-public emacs-bqn-mode
  (package
    (name "emacs-bqn-mode")
    (version "20231008.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/museoa/bqn-mode.git")
               (commit
                 "1a42e1cf87ae8a899a45573dfa9eaee1ab436d9b")))
        (sha256
          (base32
            "09jf445y01dh3lqz5hmzf9f1m6hpzwiprd4fgc3j33lbyi1wggqi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/museoa/bqn-mode")
    (synopsis "Emacs mode for BQN")
    (description
      "Documentation at https://melpa.org/#/bqn-mode")
    (license #f)))

(define-public emacs-bracketed-paste
  (package
    (name "emacs-bracketed-paste")
    (version "20160407.2348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hchbaw/bracketed-paste.el.git")
               (commit
                 "843ce3bbb63d560face889e13a57a2f7543957d5")))
        (sha256
          (base32
            "1l6j2zs12psc15cfhqq6hm1bg012jr49zd2i36cmappbsiax1l8m"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "bracketed paste mode support within emacs -nw")
    (description
      "Documentation at https://melpa.org/#/bracketed-paste")
    (license #f)))

(define-public emacs-brainfuck-mode
  (package
    (name "emacs-brainfuck-mode")
    (version "20150113.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/brainfuck-mode.git")
               (commit
                 "36e69552bb3b97a4f888d362c59845651bd0d492")))
        (sha256
          (base32
            "1nzgjgzidyrplfs4jl8nikd5wwvb4rmrnm51qxmw9y2if0hpq0jd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-langdoc))
    (home-page
      "https://github.com/tom-tan/brainfuck-mode/")
    (synopsis "Brainfuck mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/brainfuck-mode")
    (license #f)))

(define-public emacs-brazilian-holidays
  (package
    (name "emacs-brazilian-holidays")
    (version "20220828.2348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jadler/brazilian-holidays.git")
               (commit
                 "03206ea673df49c91a8f924db799620713d86240")))
        (sha256
          (base32
            "130lnwn4hpviliy7ayb6m265klxhvfmbax1hxdqbjnx0y1i01h7h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jadler/brazilian-holidays")
    (synopsis "Brazilian holidays")
    (description
      "Documentation at https://melpa.org/#/brazilian-holidays")
    (license #f)))

(define-public emacs-brec-mode
  (package
    (name "emacs-brec-mode")
    (version "20230406.1547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Michael-Allan/Breccia.Emacs.git")
               (commit
                 "a1d519bd592d34c05f3fbaa2c209249969823fb6")))
        (sha256
          (base32
            "0rphi8dai5hdjbkdi0a0rhnlm6a2rw03mqvs8s3m50hssisl9mmm"))))
    (build-system melpa-build-system)
    (home-page
      "http://reluk.ca/project/Breccia/Emacs/")
    (synopsis
      "A major mode for editing Breccian text")
    (description
      "Documentation at https://melpa.org/#/brec-mode")
    (license #f)))

(define-public emacs-brf
  (package
    (name "emacs-brf")
    (version "20230803.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/MikeWoolley/brf-mode")
               (commit
                 "8875f5fcd173e220bbfa6bf9f8f09d721a29cd50")))
        (sha256
          (base32
            "0iqakgg7yz409776p14adg4vdn9ik0mf95vhzx23g3pd79lv34wb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fringe-helper))
    (home-page
      "https://bitbucket.org/MikeWoolley/brf-mode")
    (synopsis
      "Brf-mode provides features from the legendary editor Brief")
    (description
      "Documentation at https://melpa.org/#/brf")
    (license #f)))

(define-public emacs-brightscript-mode
  (package
    (name "emacs-brightscript-mode")
    (version "20220906.827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/viseztrance/brightscript-mode.git")
               (commit
                 "025d6f5a70752c62a28d4f86c053a283b3898a49")))
        (sha256
          (base32
            "1dqz16rqbvi7gqbpqmb2aa0a6sbg3hkcc87amr6fwh9s783ziakq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/viseztrance/brightscript-mode")
    (synopsis
      "Major mode for editing Brightscript files")
    (description
      "Documentation at https://melpa.org/#/brightscript-mode")
    (license #f)))

(define-public emacs-broadcast
  (package
    (name "emacs-broadcast")
    (version "20151205.212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/killdash9/broadcast.el.git")
               (commit
                 "f6f9cd2e0e3f8c31d6b8e7446c27eb0e50b25f16")))
        (sha256
          (base32
            "0w6b9rxdciy1365kgf6fh3vgrjr8xd5ar6xcn0g4h56f2zg9hdmj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/killdash9/broadcast.el")
    (synopsis
      "Links buffers together for simultaneous editing.")
    (description
      "Documentation at https://melpa.org/#/broadcast")
    (license #f)))

(define-public emacs-browse-at-remote
  (package
    (name "emacs-browse-at-remote")
    (version "20230223.554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmuslimov/browse-at-remote.git")
               (commit
                 "76aa27dfd469fcae75ed7031bb73830831aaccbf")))
        (sha256
          (base32
            "09i5s81q84y1cii6761fh7rm4wdq1cn2wzkglldq230qkk5d9izh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "https://github.com/rmuslimov/browse-at-remote")
    (synopsis
      "Open github/gitlab/bitbucket/stash/gist/phab/sourcehut page from Emacs")
    (description
      "Documentation at https://melpa.org/#/browse-at-remote")
    (license #f)))

(define-public emacs-browse-kill-ring
  (package
    (name "emacs-browse-kill-ring")
    (version "20231104.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/browse-kill-ring/browse-kill-ring.git")
               (commit
                 "03cc18c08a549568edb6bc710c307c19bc507ef3")))
        (sha256
          (base32
            "0bvcs6zsp2yinr71cnvyb40a2vwv2p0v98bhjxcfl19namalh7p3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/browse-kill-ring/browse-kill-ring")
    (synopsis
      "interactively insert items from kill-ring")
    (description
      "Documentation at https://melpa.org/#/browse-kill-ring")
    (license #f)))

(define-public emacs-browse-url-dwim
  (package
    (name "emacs-browse-url-dwim")
    (version "20140731.1922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/browse-url-dwim.git")
               (commit
                 "3d611dbb167c286109ac53995ad68286d87aafb9")))
        (sha256
          (base32
            "1rcihwdxrzhgcz573rh1yp3770ihkwqjqvd39yhic1d3sgwxz2hy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-string-utils))
    (home-page
      "http://github.com/rolandwalker/browse-url-dwim")
    (synopsis
      "Context-sensitive external browse URL or Internet search")
    (description
      "Documentation at https://melpa.org/#/browse-url-dwim")
    (license #f)))

(define-public emacs-brutalist-theme
  (package
    (name "emacs-brutalist-theme")
    (version "20230914.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.madhouse-project.org/algernon/brutalist-theme.el.git")
               (commit
                 "294188e51a62b6767e9285e3b1cc7a8d771cdb52")))
        (sha256
          (base32
            "16dlv3hhhghi8w8sxf0bkkizcx1qwl4259s6r0sxk5id8iqf88c5"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.madhouse-project.org/algernon/brutalist-theme.el")
    (synopsis "Brutalist theme")
    (description
      "Documentation at https://melpa.org/#/brutalist-theme")
    (license #f)))

(define-public emacs-bshell
  (package
    (name "emacs-bshell")
    (version "20230805.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/bshell.git")
               (commit
                 "57f3409168ec9649508e3ee30d0d2de8f81b960e")))
        (sha256
          (base32
            "1pmaz7gw45y7mlina3h0db26khdsbmlcw7adkvri33sgrr9x83q7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-buffer-manage))
    (home-page "https://github.com/plandes/bshell")
    (synopsis
      "Manage and track multiple inferior shells")
    (description
      "Documentation at https://melpa.org/#/bshell")
    (license #f)))

(define-public emacs-btc-ticker
  (package
    (name "emacs-btc-ticker")
    (version "20220409.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/niedbalski/emacs-btc-ticker.git")
               (commit
                 "2ed18ac6338d5fe98c578f0875840af07f0bc42a")))
        (sha256
          (base32
            "0hx96ah2y1s5hj5f3i2y50v1m0lfphg71sr4fhssjls0yvl995sr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis "Shows latest bitcoin price")
    (description
      "Documentation at https://melpa.org/#/btc-ticker")
    (license #f)))

(define-public emacs-bts
  (package
    (name "emacs-bts")
    (version "20151109.1333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-bts.git")
               (commit
                 "df42d58a36447697f93b56e69f5e700b2baef1f9")))
        (sha256
          (base32
            "1qgasaqhqm0birjmb6k6isd2f5pn58hva8db8qfhva9g5kg1f38w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-widget-mvc
            emacs-log4e
            emacs-yaxception
            emacs-dash
            emacs-s
            emacs-pos-tip))
    (home-page "https://github.com/aki2o/emacs-bts")
    (synopsis
      "A unified UI for various bug tracking systems")
    (description
      "Documentation at https://melpa.org/#/bts")
    (license #f)))

(define-public emacs-bts-github
  (package
    (name "emacs-bts-github")
    (version "20170401.1249")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-bts-github.git")
               (commit
                 "ef2cf9202dc2128e5efdb613bfde9276a8cd95ad")))
        (sha256
          (base32
            "173i9n4c8mg93gpc7ljxh3nhm4lq2c04yhrvjz6fwwwqvmnkha5f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bts emacs-gh))
    (home-page
      "https://github.com/aki2o/emacs-bts-github")
    (synopsis "A plugin of bts.el for GitHub")
    (description
      "Documentation at https://melpa.org/#/bts-github")
    (license #f)))

(define-public emacs-bubbleberry-theme
  (package
    (name "emacs-bubbleberry-theme")
    (version "20141017.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-bubbleberry-theme.git")
               (commit
                 "22e9adf4586414024e4592972022ec297321b320")))
        (sha256
          (base32
            "1aha8rzilv4k300rr4l9qjfygydfwllkbw17lhm8jz0kh9w6bd28"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jasonm23/emacs-bubbleberry-theme")
    (synopsis
      "A theme based on LightTable for Emacs24")
    (description
      "Documentation at https://melpa.org/#/bubbleberry-theme")
    (license #f)))

(define-public emacs-buckwalter
  (package
    (name "emacs-buckwalter")
    (version "20191119.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joehakimrahme/buckwalter.el.git")
               (commit
                 "1ef6f210f38c0686bc5b445b9704190f168f30ea")))
        (sha256
          (base32
            "054gbfdaqfj5psb3f06ba46x38gd9xak28h1la5b1szdzj61f23i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joehakimrahme/buckwalter-arabic")
    (synopsis
      "Write arabic using Buckwalter transliteration")
    (description
      "Documentation at https://melpa.org/#/buckwalter")
    (license #f)))

(define-public emacs-buffer-buttons
  (package
    (name "emacs-buffer-buttons")
    (version "20150106.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rpav/buffer-buttons.git")
               (commit
                 "2feb8494fa7863b98256bc85da670d74a3a8a975")))
        (sha256
          (base32
            "1p5a29bpjqr1gs6sb6rr7y0j06nlva23wxkwfskap25zvjpgwbvq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rpav/buffer-buttons")
    (synopsis
      "Define, save, and load code-safe buttons in files for emacs")
    (description
      "Documentation at https://melpa.org/#/buffer-buttons")
    (license #f)))

(define-public emacs-buffer-env
  (package
    (name "emacs-buffer-env")
    (version "20231028.1617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astoff/buffer-env.git")
               (commit
                 "8ba30f5b7df3a219e792377b1d7163a536896a4b")))
        (sha256
          (base32
            "0ai2n443l3rp3pc40ppxsaldbsbqqx6822h4kk7zj6f84f9nf7cp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/astoff/buffer-env")
    (synopsis "Buffer-local process environments")
    (description
      "Documentation at https://melpa.org/#/buffer-env")
    (license #f)))

(define-public emacs-buffer-flip
  (package
    (name "emacs-buffer-flip")
    (version "20220718.10")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/killdash9/buffer-flip.el.git")
               (commit
                 "dda0cbcd202cdadf322942f9637a11ed92525756")))
        (sha256
          (base32
            "1m67xgka4pwk7dl9b4rlhckghv0mafhghbig2vrdpj44xzgiy05m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/killdash9/buffer-flip.el")
    (synopsis
      "Cycle through buffers like Alt-Tab in Windows")
    (description
      "Documentation at https://melpa.org/#/buffer-flip")
    (license #f)))

(define-public emacs-buffer-manage
  (package
    (name "emacs-buffer-manage")
    (version "20211122.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/buffer-manage.git")
               (commit
                 "819bbfd9ae2f028361f484bc3b60d751623a2df5")))
        (sha256
          (base32
            "0g79xcq0jf8p1cpsz3fifjpyaidkr0b2zm8sf11n8li4hfqmr10d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-choice-program emacs-dash))
    (home-page
      "https://github.com/plandes/buffer-manage")
    (synopsis "Manage buffers")
    (description
      "Documentation at https://melpa.org/#/buffer-manage")
    (license #f)))

(define-public emacs-buffer-move
  (package
    (name "emacs-buffer-move")
    (version "20220512.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lukhas/buffer-move.git")
               (commit
                 "e7800b3ab1bd76ee475ef35507ec51ecd5a3f065")))
        (sha256
          (base32
            "1g7g71fzxrak9qkps6f7j52y83dic9ccq9ykc8babla2y79jr7x1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lukhas/buffer-move/")
    (synopsis "easily swap buffers")
    (description
      "Documentation at https://melpa.org/#/buffer-move")
    (license #f)))

(define-public emacs-buffer-name-relative
  (package
    (name "emacs-buffer-name-relative")
    (version "20230625.347")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/buffer-name-relative-"
               version
               ".tar"))
        (sha256
          (base32
            "14l9cjwl2fzxkrljccimdh3j6gw0y9663bsj2qj4l8yz9x7gj0n9"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.com/ideasman42/emacs-buffer-name-relative")
    (synopsis "Relative buffer names")
    (description
      "Documentation at https://melpa.org/#/buffer-name-relative")
    (license #f)))

(define-public emacs-buffer-ring
  (package
    (name "emacs-buffer-ring")
    (version "20220120.124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/countvajhula/buffer-ring.git")
               (commit
                 "177d67238c4d126a0270585e21c0f03ae750ca2a")))
        (sha256
          (base32
            "1li3fq5797hcd2wy5w2vp6hmgf779mrm0pw2nj4a19snwl9ak02j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dynaring emacs-s emacs-ht))
    (home-page
      "https://github.com/countvajhula/buffer-ring")
    (synopsis "Rings and tori for buffer navigation")
    (description
      "Documentation at https://melpa.org/#/buffer-ring")
    (license #f)))

(define-public emacs-buffer-sets
  (package
    (name "emacs-buffer-sets")
    (version "20230319.1822")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/buffer-sets-"
               version
               ".tar"))
        (sha256
          (base32
            "0y9gqrdrpmzf624c2cig693m6kgqn9vgx7l4p0l36kqygmv6i0rc"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~swflint/buffer-sets")
    (synopsis
      "Sets of Buffers for Buffer Management")
    (description
      "Documentation at https://melpa.org/#/buffer-sets")
    (license #f)))

(define-public emacs-buffer-utils
  (package
    (name "emacs-buffer-utils")
    (version "20140512.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/buffer-utils.git")
               (commit
                 "685b13457e3a2085b7584e41365d2aa0779a1b6f")))
        (sha256
          (base32
            "1mnf0dgr6g58k0jyia7985jsinrla04vm5sjl2iajwphbhadjk8p"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/buffer-utils")
    (synopsis
      "Buffer-manipulation utility functions")
    (description
      "Documentation at https://melpa.org/#/buffer-utils")
    (license #f)))

(define-public emacs-buffer-watcher
  (package
    (name "emacs-buffer-watcher")
    (version "20170913.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/buffer-watcher.git")
               (commit
                 "b32c67c8a5d724257d759f4c903d0dedc32246ef")))
        (sha256
          (base32
            "0mygs48mk2z8cw1csz2wfyn7kln9662d16hwpmbxs5x8k71aq8jx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "unspecified")
    (synopsis
      "Easily run shell scripts per filetype/directory when a buffer is saved")
    (description
      "Documentation at https://melpa.org/#/buffer-watcher")
    (license #f)))

(define-public emacs-buffer-wrap
  (package
    (name "emacs-buffer-wrap")
    (version "20220704.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/buffer-wrap.git")
               (commit
                 "8be8508ad5570b1487d9d2fc1b5aa71558f2d0f5")))
        (sha256
          (base32
            "19k4xxalcirxis6s8gci9hyp8l6vw1dx9z31nnvihb3yd932816i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/buffer-wrap")
    (synopsis
      "Wrap the beginning and the end of buffer")
    (description
      "Documentation at https://melpa.org/#/buffer-wrap")
    (license #f)))

(define-public emacs-bufferbin
  (package
    (name "emacs-bufferbin")
    (version "20230706.110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blueridge-data/bufferbin.git")
               (commit
                 "ee4bf49cc69573f690e2e9f36f03c20b322c1730")))
        (sha256
          (base32
            "0qqajbr3pfpxjjw7bimyqxj7gvmd09313ai581ld4ik9n48izhv1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/blueridge-data/bufferbin")
    (synopsis "Quick mouse access to buffers")
    (description
      "Documentation at https://melpa.org/#/bufferbin")
    (license #f)))

(define-public emacs-bufler
  (package
    (name "emacs-bufler")
    (version "20231108.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/bufler.el.git")
               (commit
                 "5b76a6c7bd53d0f2fe5993b7c316da15bb2cd3f5")))
        (sha256
          (base32
            "1a67iykwb5m12famy04iw695kv5gnk8f944y6cnvjlj71dx7h9y4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-burly
            emacs-dash
            emacs-f
            emacs-pretty-hydra
            emacs-magit-section))
    (arguments
      '(#:files (:defaults (:exclude "helm-bufler.el"))))
    (home-page
      "https://github.com/alphapapa/bufler.el")
    (synopsis
      "Group buffers into workspaces with programmable rules")
    (description
      "Documentation at https://melpa.org/#/bufler")
    (license #f)))

(define-public emacs-bufshow
  (package
    (name "emacs-bufshow")
    (version "20130726.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pjones/bufshow.git")
               (commit
                 "d60a554e7239e6f7520d9c3436d5ecdbc9cf6957")))
        (sha256
          (base32
            "1rh848adjqdl42rw8yf1fqbr143m0pnbrlznx0d97v4vszvbby2s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page "https://github.com/pjones/bufshow")
    (synopsis
      "A simple presentation tool for Emacs.")
    (description
      "Documentation at https://melpa.org/#/bufshow")
    (license #f)))

(define-public emacs-bug-reference-github
  (package
    (name "emacs-bug-reference-github")
    (version "20200206.2158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnested/bug-reference-github.git")
               (commit
                 "c9512a010f19633e69f1d4b1597eff7048b21112")))
        (sha256
          (base32
            "0nyxd9dnvvdvjik94m9frbbhcf9axi50vpcs0mk0xy5raxq3scf7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arnested/bug-reference-github")
    (synopsis
      "Set `bug-reference-url-format' in Github repos")
    (description
      "Documentation at https://melpa.org/#/bug-reference-github")
    (license #f)))

(define-public emacs-bui
  (package
    (name "emacs-bui")
    (version "20210108.1141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/bui.el.git")
               (commit
                 "f3a137628e112a91910fd33c0cff0948fa58d470")))
        (sha256
          (base32
            "04b0c15g24474sy9kp198g28yikhpr0fvmx1kgwqq9ly4p5wyzla"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/alezost/bui.el")
    (synopsis "Buffer interface library")
    (description
      "Documentation at https://melpa.org/#/bui")
    (license #f)))

(define-public emacs-build-farm
  (package
    (name "emacs-build-farm")
    (version "20181218.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/build-farm.el.git")
               (commit
                 "5c268a3c235ace0d79ef1ec82c440120317e06f5")))
        (sha256
          (base32
            "0i0bwbav5861j2y15j9nd5m9rdqg9q97zgcbld8pivr9nyxy63lz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bui emacs-magit-popup))
    (home-page
      "https://gitlab.com/alezost-emacs/build-farm")
    (synopsis
      "Interface for Nix and Guix build farms (Hydra and Cuirass)")
    (description
      "Documentation at https://melpa.org/#/build-farm")
    (license #f)))

(define-public emacs-build-helper
  (package
    (name "emacs-build-helper")
    (version "20161009.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/afonso360/build-helper.git")
               (commit
                 "7a6fe71125a26ed1c492dab77cc688a7fe1d68ac")))
        (sha256
          (base32
            "0pipdzjf7arli6b88fp21as5d4v8ylsy19hixywhfgb7917qsrkv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "http://github.com/afonso360/build-helper")
    (synopsis "Utilities to help build code")
    (description
      "Documentation at https://melpa.org/#/build-helper")
    (license #f)))

(define-public emacs-build-status
  (package
    (name "emacs-build-status")
    (version "20190807.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sshaw/build-status.git")
               (commit
                 "1a1d2473aa62f2fdda47d8bfeb9fe352d2579b48")))
        (sha256
          (base32
            "03mxvqiknca5dzcr5j3xdwfyjpq172rbj3dgdfjms8lbgxgm4kgw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/sshaw/build-status")
    (synopsis "Mode line build status indicator")
    (description
      "Documentation at https://melpa.org/#/build-status")
    (license #f)))

(define-public emacs-bundler
  (package
    (name "emacs-bundler")
    (version "20200129.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/endofunky/bundler.el.git")
               (commit
                 "43efb6be4ed118b06d787ce7fbcffd68a31732a7")))
        (sha256
          (base32
            "1r7x3xw4l5bp4dfqk2v2nrd2yl0rs064gw75nx99ifm92n7nkmgh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inf-ruby))
    (home-page
      "http://github.com/endofunky/bundler.el")
    (synopsis "Interact with Bundler from Emacs")
    (description
      "Documentation at https://melpa.org/#/bundler")
    (license #f)))

(define-public emacs-burly
  (package
    (name "emacs-burly")
    (version "20230917.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/burly.el.git")
               (commit
                 "f503fdc3af2f4e4a2a9023c763f71582e09eee8c")))
        (sha256
          (base32
            "01n7z6lgvsasid1ri2h58ycn0rsswr0y3ic0slvkwy3vlszwaa5k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/burly.el")
    (synopsis
      "Save and restore frame/window configurations with buffers")
    (description
      "Documentation at https://melpa.org/#/burly")
    (license #f)))

(define-public emacs-burnt-toast
  (package
    (name "emacs-burnt-toast")
    (version "20201113.814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cedarbaum/burnt-toast.el.git")
               (commit
                 "eed66036d65b0ee26ce02371d14dce16a360acb4")))
        (sha256
          (base32
            "070p6mziljnyqzadbvwwmdv11gdmwi4h6q4rbnlp6dj91yiizksi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-alert))
    (arguments
      '(#:files (:defaults ("icons" "icons/*.png"))))
    (home-page
      "https://github.com/cedarbaum/burnt-toast.el")
    (synopsis
      "Elisp integration with the BurntToast PowerShell module")
    (description
      "Documentation at https://melpa.org/#/burnt-toast")
    (license #f)))

(define-public emacs-bury-successful-compilation
  (package
    (name "emacs-bury-successful-compilation")
    (version "20181106.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/bury-successful-compilation.git")
               (commit
                 "674644c844184605a1bb4f9487a60f7a780a6fe7")))
        (sha256
          (base32
            "13ilv4zbzwb5rz0gf69z8pvxazvwlmb5shkb055l42ksxslp49hh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Bury the *compilation* buffer after successful compilation")
    (description
      "Documentation at https://melpa.org/#/bury-successful-compilation")
    (license #f)))

(define-public emacs-buster-mode
  (package
    (name "emacs-buster-mode")
    (version "20140928.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/buster-mode.git")
               (commit
                 "de6958ef8369400922618b8d1e99abfa91b97ac5")))
        (sha256
          (base32
            "1viq7cb41r8klr8i38c5zjrhdnww31gh4j51xdgy4v2lc3z321zi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Minor mode to speed up development when writing tests with Buster.js")
    (description
      "Documentation at https://melpa.org/#/buster-mode")
    (license #f)))

(define-public emacs-buster-snippets
  (package
    (name "emacs-buster-snippets")
    (version "20151125.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/buster-snippets.el.git")
               (commit
                 "bb8769dae132659858e74d52f3f4e8790399423a")))
        (sha256
          (base32
            "11djqlw4qf3qs2rwiz7dn5q2zw5i8sykwdf4hg4awsgv8g0bbxn6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis
      "Yasnippets for the Buster javascript testing framework")
    (description
      "Documentation at https://melpa.org/#/buster-snippets")
    (license #f)))

(define-public emacs-busybee-theme
  (package
    (name "emacs-busybee-theme")
    (version "20170719.928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/busybee-theme.git")
               (commit
                 "66b2315b030582d0ebee605cf455d386d8c30fcd")))
        (sha256
          (base32
            "1cvj5m45f5ky3w86khh6crvdqrdjxg2z6b34jlm32qpgmn0s5g45"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/busybee-theme")
    (synopsis "port of vim's mustang theme")
    (description
      "Documentation at https://melpa.org/#/busybee-theme")
    (license #f)))

(define-public emacs-butler
  (package
    (name "emacs-butler")
    (version "20210928.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AshtonKem/Butler.git")
               (commit
                 "10943ccdf2030187b2f7bd97337d78acb7fd31c9")))
        (sha256
          (base32
            "028c5mqhxpq007s7c6rha47zzyj6nsf49mnh99b0mfg9d95s4057"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page
      "http://www.github.com/AshtonKem/Butler.git")
    (synopsis "Emacs client for Jenkins")
    (description
      "Documentation at https://melpa.org/#/butler")
    (license #f)))

(define-public emacs-buttercup
  (package
    (name "emacs-buttercup")
    (version "20231005.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/emacs-buttercup.git")
               (commit
                 "3780eb081913d1aeef2bc5950891a3fbe3b3771d")))
        (sha256
          (base32
            "1lmiyipwhy5fi6yajx85c68drn5dxxy47yc2dpch8y9y2b2mbyin"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/jorgenschaefer/emacs-buttercup")
    (synopsis "Behavior-Driven Emacs Lisp Testing")
    (description
      "Documentation at https://melpa.org/#/buttercup")
    (license #f)))

(define-public emacs-buttercup-junit
  (package
    (name "emacs-buttercup-junit")
    (version "20190802.2258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/olanilsson/buttercup-junit")
               (commit
                 "3ae4f84813c9e04e03a6e703990ca998b62b6deb")))
        (sha256
          (base32
            "0ndxbh2jff6qryczawzbg580744h18z7grg82dpg7fv0rbxnyi3j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-buttercup))
    (home-page
      "https://bitbucket.org/olanilsson/buttercup-junit")
    (synopsis "JUnit reporting for Buttercup")
    (description
      "Documentation at https://melpa.org/#/buttercup-junit")
    (license #f)))

(define-public emacs-button-lock
  (package
    (name "emacs-button-lock")
    (version "20230304.2212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/button-lock.git")
               (commit
                 "1f7a89ca05b6167af7d1337ad23a5d923486caac")))
        (sha256
          (base32
            "12agr7c9q8mwm73z86vx1rpfsjsw1xacfpfkqy0k07p86lv5d8g5"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("button-lock.el")))
    (home-page
      "http://github.com/rolandwalker/button-lock")
    (synopsis
      "Clickable text defined by regular expression")
    (description
      "Documentation at https://melpa.org/#/button-lock")
    (license #f)))

(define-public emacs-buttons
  (package
    (name "emacs-buttons")
    (version "20230906.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erjoalgo/emacs-buttons.git")
               (commit
                 "6fd4a9b3f8b9d2344a316b0fd6576d90f53f5acb")))
        (sha256
          (base32
            "0v8yx135gfwgkiq4dk6crvmb28ll61wwyvcfdh1pp8k8z9hrrdn3"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/erjoalgo/emacs-buttons")
    (synopsis
      "Define and visualize hierarchies of keymaps")
    (description
      "Documentation at https://melpa.org/#/buttons")
    (license #f)))

(define-public emacs-c-c-combo
  (package
    (name "emacs-c-c-combo")
    (version "20151224.255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/c-c-combo.el.git")
               (commit
                 "a261a833499a7fdc29610863b3aafc74818770ba")))
        (sha256
          (base32
            "040mcq2cwzbrf96f9mghb4314cd8xwp7ki2ix9fxpmbwiy323ld5"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.wav")))
    (home-page
      "https://www.github.com/CestDiego/c-c-combo.el")
    (synopsis
      "Make stuff happen when you reach a target wpm")
    (description
      "Documentation at https://melpa.org/#/c-c-combo")
    (license #f)))

(define-public emacs-c-eldoc
  (package
    (name "emacs-c-eldoc")
    (version "20201004.2347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/c-eldoc.git")
               (commit
                 "f4ede1f37f6de583376669735326367d84a0a917")))
        (sha256
          (base32
            "0ich78j49x3sl1jyvzynybw0lnhrhjfp4vadysxnzd5zs6vqxcad"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/nflath/c-eldoc")
    (synopsis
      "helpful description of the arguments to C functions")
    (description
      "Documentation at https://melpa.org/#/c-eldoc")
    (license #f)))

(define-public emacs-c-eval
  (package
    (name "emacs-c-eval")
    (version "20210611.705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-c-eval.git")
               (commit
                 "fd129bfcb75475ac6820cc33862bd8efb8097fae")))
        (sha256
          (base32
            "1xfgjc0j8ck03278n014mvf768m68knyawrc3lmybr2gj04b4cz9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-c-eval")
    (synopsis
      "Compile and run one-off C code snippets")
    (description
      "Documentation at https://melpa.org/#/c-eval")
    (license #f)))

(define-public emacs-c0-mode
  (package
    (name "emacs-c0-mode")
    (version "20151110.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/catern/c0-mode.git")
               (commit
                 "c214093c36864d6208fcb9e6a72413ed17ed5d60")))
        (sha256
          (base32
            "10k90r4ckkkdjn9pqcbfyp6ynvrd5k0ngqcn5d0v1qvkn6jifxjx"))))
    (build-system melpa-build-system)
    (home-page "http://c0.typesafety.net/")
    (synopsis "Major mode for editing C0 files")
    (description
      "Documentation at https://melpa.org/#/c0-mode")
    (license #f)))

(define-public emacs-ca65-mode
  (package
    (name "emacs-ca65-mode")
    (version "20210218.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wendelscardua/ca65-mode.git")
               (commit
                 "590d90cc0e1c1864dd7ce03df99b741ba866d52a")))
        (sha256
          (base32
            "0snmxnhi7g5qx7p1z9zzlpc2zd20iq94hfvf2vavjpxw1fz4sk46"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wendelscardua/ca65-mode")
    (synopsis "Major mode for ca65 assembly files")
    (description
      "Documentation at https://melpa.org/#/ca65-mode")
    (license #f)))

(define-public emacs-cabledolphin
  (package
    (name "emacs-cabledolphin")
    (version "20160204.938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/cabledolphin.git")
               (commit
                 "fffc192cafa61558e924323d6da8166fe5f2a6f9")))
        (sha256
          (base32
            "1h395hvia7r76zlgr10qdr9q2159qyrs89znhkp2czikwm8kjiqk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "capture Emacs network traffic")
    (description
      "Documentation at https://melpa.org/#/cabledolphin")
    (license #f)))

(define-public emacs-cache
  (package
    (name "emacs-cache")
    (version "20111019.2300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/cache.git")
               (commit
                 "7499586b6c8224df9f5c5bc4dec96b008258d580")))
        (sha256
          (base32
            "1hp6dk84vvgkmj5lzghvqlpq3axwzgx9c7gly2yx6497fgf9jlby"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "implementation of a hash table whose key-value pairs expire")
    (description
      "Documentation at https://melpa.org/#/cache")
    (license #f)))

(define-public emacs-cacoo
  (package
    (name "emacs-cacoo")
    (version "20120319.2359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-cacoo.git")
               (commit
                 "c9fa04fbe97639b24698709530361c2bb5f3273c")))
        (sha256
          (base32
            "07kzhyqr8ycjvkknijqhsfr26zd5jc8wxm9sl8bp6pzn4jbs1dmx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-concurrent))
    (home-page
      "https://github.com/kiwanami/emacs-cacoo/")
    (synopsis
      "Minor mode for Cacoo : http://cacoo.com")
    (description
      "Documentation at https://melpa.org/#/cacoo")
    (license #f)))

(define-public emacs-caddyfile-mode
  (package
    (name "emacs-caddyfile-mode")
    (version "20220626.945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Schnouki/caddyfile-mode.git")
               (commit
                 "fc41148f5a7eb320f070666f046fb9d88cf17680")))
        (sha256
          (base32
            "1s9kbav5wbyividn9zncd153h89nil0i9aj9hgxa95q9fy84r23w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-loop))
    (home-page
      "https://github.com/Schnouki/caddyfile-mode/")
    (synopsis
      "Major mode for Caddy configuration files")
    (description
      "Documentation at https://melpa.org/#/caddyfile-mode")
    (license #f)))

(define-public emacs-cake-inflector
  (package
    (name "emacs-cake-inflector")
    (version "20140415.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/emacs-cake-inflector.git")
               (commit
                 "a1d338ec4840b1b1bc14f7f9298c07e2c1d2d8fc")))
        (sha256
          (base32
            "0m8ss9aky24f5i6b8fyy8mhv9ygj158crjyddnj9xx73vsjf96bs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/k1LoW/emacs-cake-inflector")
    (synopsis
      "Lazy porting CakePHP infrector.php to el")
    (description
      "Documentation at https://melpa.org/#/cake-inflector")
    (license #f)))

(define-public emacs-cakecrumbs
  (package
    (name "emacs-cakecrumbs")
    (version "20180929.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/cakecrumbs.el.git")
               (commit
                 "cf8c1df885eee004602f73c4f841301e200e5850")))
        (sha256
          (base32
            "0s5ga39dpn9rjxjk5inkylqh56w3qgaq2wmwwgv5gsydqdyil31f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kuanyui/cakecrumbs.el")
    (synopsis
      "Show parents on header for HTML/Jade/Sass/Stylus")
    (description
      "Documentation at https://melpa.org/#/cakecrumbs")
    (license #f)))

(define-public emacs-cal-china-x
  (package
    (name "emacs-cal-china-x")
    (version "20200924.1837")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xwl/cal-china-x.git")
               (commit
                 "94005e678a1d2522b7a00299779f40c5c77286b8")))
        (sha256
          (base32
            "0dy9awy5y990wz925rdn95gn23ywarwbvkqq0l0xms1br1v8kxc6"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "jieqi.txt")))
    (home-page "https://github.com/xwl/cal-china-x")
    (synopsis
      "Chinese localization, lunar/horoscope/zodiac info and more...")
    (description
      "Documentation at https://melpa.org/#/cal-china-x")
    (license #f)))

(define-public emacs-calc-at-point
  (package
    (name "emacs-calc-at-point")
    (version "20210219.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/calc-at-point.git")
               (commit
                 "0c1a9e94b519b0edb0abcbacdf6101eea2f2a524")))
        (sha256
          (base32
            "04yg0rf6i95s913hs6zn01rajpbc1gk2hcpzkxyjy3mj1lqhh45s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/walseb/calc-at-point")
    (synopsis
      "Perform calculations at point or over selection")
    (description
      "Documentation at https://melpa.org/#/calc-at-point")
    (license #f)))

(define-public emacs-calc-prog-utils
  (package
    (name "emacs-calc-prog-utils")
    (version "20220820.1855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Jesse-Millwood/calc-prog-utils.git")
               (commit
                 "190acfda56660a2d75df2d9eac5b14edaccccd80")))
        (sha256
          (base32
            "0p2wl4c5rqr7hfwzb22hx8mj6c2wbk9rlzm41h8h4z8qqhfvv2lr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Jesse-Millwood/calc-prog")
    (synopsis "Calc programmers utilities")
    (description
      "Documentation at https://melpa.org/#/calc-prog-utils")
    (license #f)))

(define-public emacs-calendar-norway
  (package
    (name "emacs-calendar-norway")
    (version "20220211.1129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/calendar-norway.el.git")
               (commit
                 "0db0ea63365f4ff5f7d18fb8335fa88af194a2cc")))
        (sha256
          (base32
            "0bhqr67w301fb74drnw6291bri9ga95946n7jg382jcp6sxn9cpg"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Norwegian calendar")
    (description
      "Documentation at https://melpa.org/#/calendar-norway")
    (license #f)))

(define-public emacs-calfw
  (package
    (name "emacs-calfw")
    (version "20180118.45")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw.el")))
    (home-page
      "https://github.com/kiwanami/emacs-calfw")
    (synopsis "Calendar view framework on Emacs")
    (description
      "Documentation at https://melpa.org/#/calfw")
    (license #f)))

(define-public emacs-calfw-cal
  (package
    (name "emacs-calfw-cal")
    (version "20170411.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-cal.el")))
    (home-page "unspecified")
    (synopsis "calendar view for emacs diary")
    (description
      "Documentation at https://melpa.org/#/calfw-cal")
    (license #f)))

(define-public emacs-calfw-gcal
  (package
    (name "emacs-calfw-gcal")
    (version "20120111.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/calfw-gcal.el.git")
               (commit
                 "14aab20687d6cc9e6c5ddb9e11984c4e14c3d870")))
        (sha256
          (base32
            "14n5rci4bkbl7037xvkd69gfxnjlgvd2j1xzciqcgz92f06ir3xi"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.py")))
    (home-page
      "https://github.com/myuhe/calfw-gcal.el")
    (synopsis "edit Google calendar for calfw.el.")
    (description
      "Documentation at https://melpa.org/#/calfw-gcal")
    (license #f)))

(define-public emacs-calfw-howm
  (package
    (name "emacs-calfw-howm")
    (version "20170704.4")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-howm.el")))
    (home-page "unspecified")
    (synopsis "calendar view for howm")
    (description
      "Documentation at https://melpa.org/#/calfw-howm")
    (license #f)))

(define-public emacs-calfw-ical
  (package
    (name "emacs-calfw-ical")
    (version "20170411.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-ical.el")))
    (home-page "unspecified")
    (synopsis "calendar view for ical format")
    (description
      "Documentation at https://melpa.org/#/calfw-ical")
    (license #f)))

(define-public emacs-calfw-org
  (package
    (name "emacs-calfw-org")
    (version "20170411.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-calfw.git")
               (commit
                 "03abce97620a4a7f7ec5f911e669da9031ab9088")))
        (sha256
          (base32
            "0wiggihw9ackjdssqgp2cqccd3sil13n3pfn33d3r320fmxfjbch"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("calfw-org.el")))
    (home-page "unspecified")
    (synopsis "calendar view for org-agenda")
    (description
      "Documentation at https://melpa.org/#/calfw-org")
    (license #f)))

(define-public emacs-calibredb
  (package
    (name "emacs-calibredb")
    (version "20231107.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chenyanming/calibredb.el.git")
               (commit
                 "124c916f203511c64d03fac28d303dfb102a6ead")))
        (sha256
          (base32
            "0qmqk7a9ci3zwq6sv642898axnq9bw9nrb920s2yza43nj1pc860"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-request
            emacs-esxml))
    (home-page
      "https://github.com/chenyanming/calibredb.el")
    (synopsis "Yet another calibre client")
    (description
      "Documentation at https://melpa.org/#/calibredb")
    (license #f)))

(define-public emacs-call-graph
  (package
    (name "emacs-call-graph")
    (version "20230222.525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beacoder/call-graph.git")
               (commit
                 "5fd5f3aad35e3561c253870e4d7fa34353b70b7b")))
        (sha256
          (base32
            "1x4s5h4qpw3cm2bqnpwz0fkpznbs2fyvdk2zssbikwn9wxvpfapi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-mode emacs-ivy emacs-beacon))
    (home-page
      "https://github.com/beacoder/call-graph")
    (synopsis
      "Generate call graph for c/c++ functions")
    (description
      "Documentation at https://melpa.org/#/call-graph")
    (license #f)))

(define-public emacs-calmer-forest-theme
  (package
    (name "emacs-calmer-forest-theme")
    (version "20230302.2149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/caldwell/calmer-forest-theme.git")
               (commit
                 "09fc50730ea386d3589863f8809e02e5bdd459cf")))
        (sha256
          (base32
            "02r4526p0cdxlza39xy982ajkza3pywm0p02zv8vszri584nxcc3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/caldwell/calmer-forest-theme")
    (synopsis "Darkish theme with green/orange tint")
    (description
      "Documentation at https://melpa.org/#/calmer-forest-theme")
    (license #f)))

(define-public emacs-camcorder
  (package
    (name "emacs-camcorder")
    (version "20190317.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/camcorder.el.git")
               (commit
                 "b11ca61491a27681bb3131b72b51c105fd996bed")))
        (sha256
          (base32
            "11p42cmk9sj2ilpx6nnlbzff85qi0m27wk49da2ipal28wcx2452"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names))
    (home-page
      "http://github.com/Bruce-Connor/camcorder.el")
    (synopsis
      "Record screencasts in gif or other formats.")
    (description
      "Documentation at https://melpa.org/#/camcorder")
    (license #f)))

(define-public emacs-caml
  (package
    (name "emacs-caml")
    (version "20231011.328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/caml-mode.git")
               (commit
                 "47defafa2b08fb680e89bfee9cb9ce82bd9e3bcf")))
        (sha256
          (base32
            "0y0d6pq9jd5slih1n0n1235b178xvs2d0q05wm6qwg0xpkc1x3c2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ocaml/caml-mode")
    (synopsis "Caml mode for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/caml")
    (license #f)))

(define-public emacs-cangjie
  (package
    (name "emacs-cangjie")
    (version "20230219.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kisaragi-hiu/cangjie.el.git")
               (commit
                 "d6882e15f47fdde37e9f739dde604d77d25f11db")))
        (sha256
          (base32
            "0adi56w8lyxasry9z56pgxkz29my54q66rgyrzqbwba1qaky375g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page
      "https://github.com/kisaragi-hiu/cangjie.el")
    (synopsis
      "Retrieve cangjie code for han characters")
    (description
      "Documentation at https://melpa.org/#/cangjie")
    (license #f)))

(define-public emacs-cape
  (package
    (name "emacs-cape")
    (version "20231029.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/cape.git")
               (commit
                 "abacb231157e0c90e29bdda6d15b4b448e48ffbd")))
        (sha256
          (base32
            "1h1w4xr4xr34az6iycqgcwr8as54rv3c13pmzmvpx72m46il1asv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/cape")
    (synopsis "Completion At Point Extensions")
    (description
      "Documentation at https://melpa.org/#/cape")
    (license #f)))

(define-public emacs-capnp-mode
  (package
    (name "emacs-capnp-mode")
    (version "20210707.2310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/capnproto/capnproto.git")
               (commit
                 "2ed8664a08e2c92f0af39e213c20b13d15c03346")))
        (sha256
          (base32
            "1rp0fx1d8mafk08smxmkdgx2gwxkvn44hyw2rxn4ax72lli61j2g"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("highlighting/emacs/capnp-mode.el")))
    (home-page
      "https://github.com/capnproto/capnproto")
    (synopsis
      "Major mode for editing Capn' Proto Files")
    (description
      "Documentation at https://melpa.org/#/capnp-mode")
    (license #f)))

(define-public emacs-capture
  (package
    (name "emacs-capture")
    (version "20130828.1644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashinin/capture.el.git")
               (commit
                 "1bb26060311da76767f70096218313fc93b0c806")))
        (sha256
          (base32
            "08cp45snhyir5w8gyp6xws1q7c54pz06q099l0m3zmwn9277g68z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*.el")))
    (home-page "unspecified")
    (synopsis
      "screencasting with \"avconv\" or \"ffmpeg\"")
    (description
      "Documentation at https://melpa.org/#/capture")
    (license #f)))

(define-public emacs-carbon-now-sh
  (package
    (name "emacs-carbon-now-sh")
    (version "20220701.332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/carbon-now-sh.el.git")
               (commit
                 "e66f2e43e288f35ad9075f5fc84d59ad348efc88")))
        (sha256
          (base32
            "04pld093g14dq139ghbvk67xs1fam729m8az4mkyp3f369gwz3y0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/veelenga/carbon-now-sh.el")
    (synopsis "https://carbon.now.sh integration.")
    (description
      "Documentation at https://melpa.org/#/carbon-now-sh")
    (license #f)))

(define-public emacs-cardano-tx
  (package
    (name "emacs-cardano-tx")
    (version "20230606.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "cf85424b305e8f89debb756dc67eebc84639f711")))
        (sha256
          (base32
            "09649ahqjp8kgi89s93qfqz3f27sf28qdmd8nyramz1yppklfia2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-yasnippet
            emacs-yaml-mode
            emacs-yaml
            emacs-helm
            emacs-cbor
            emacs-bech32
            emacs-readable-numbers
            emacs-emacsql
            emacs-emacsql-sqlite))
    (arguments
      '(#:files
        (:defaults
          "snippets"
          (:exclude
            "cbor.el"
            "bech32.el"
            "readable-numbers.el"
            "cardano-wallet.el"
            "ouroboros.el"))))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "Cardano transaction editor")
    (description
      "Documentation at https://melpa.org/#/cardano-tx")
    (license #f)))

(define-public emacs-cardano-wallet
  (package
    (name "emacs-cardano-wallet")
    (version "20230606.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "cf85424b305e8f89debb756dc67eebc84639f711")))
        (sha256
          (base32
            "09649ahqjp8kgi89s93qfqz3f27sf28qdmd8nyramz1yppklfia2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yaml
            emacs-dash
            emacs-yaml-mode
            emacs-readable-numbers
            emacs-cardano-tx))
    (arguments '(#:files ("cardano-wallet.el")))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "Interact with cardano wallet")
    (description
      "Documentation at https://melpa.org/#/cardano-wallet")
    (license #f)))

(define-public emacs-cargo
  (package
    (name "emacs-cargo")
    (version "20230125.1253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/cargo.el.git")
               (commit
                 "225fdb846c702a193e58a98c1585bb3586a9aa86")))
        (sha256
          (base32
            "03wm1wq6jax1a30ix5hn3n8d95nn0hkc6l9mipy77ayfcawkd31h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page "unspecified")
    (synopsis
      "Emacs Minor Mode for Cargo, Rust's Package Manager.")
    (description
      "Documentation at https://melpa.org/#/cargo")
    (license #f)))

(define-public emacs-cargo-mode
  (package
    (name "emacs-cargo-mode")
    (version "20231106.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ayrat555/cargo-mode.git")
               (commit
                 "3fecf5d78f3c23579f3b3379efc436005c475682")))
        (sha256
          (base32
            "1iwg4zia4x1ydz2mvpmarzv0s7kih6zcxiq2ya8iqahr1xrqx48l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ayrat555/cargo-mode")
    (synopsis
      "Cargo Major Mode. Cargo is the Rust package manager")
    (description
      "Documentation at https://melpa.org/#/cargo-mode")
    (license #f)))

(define-public emacs-cargo-transient
  (package
    (name "emacs-cargo-transient")
    (version "20230512.131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterstuart/cargo-transient.git")
               (commit
                 "34d63dfb99ee9a6068dadd6390763c9735c17a85")))
        (sha256
          (base32
            "0yx3gjwah4phkhwgda56p4ag217l8mf96q7zm1p3dixwnrxbnpbs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/peterstuart/cargo-transient")
    (synopsis
      "A transient UI for Cargo, Rust's package manager")
    (description
      "Documentation at https://melpa.org/#/cargo-transient")
    (license #f)))

(define-public emacs-caroline-theme
  (package
    (name "emacs-caroline-theme")
    (version "20160318.520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xjackk/caroline-theme.git")
               (commit
                 "222fd483db304509f9e422dc82883d808e023ceb")))
        (sha256
          (base32
            "055w1spba0q9rqqg4rjds0iakr9d8xg66959xahxq8268mq5446n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xjackk/carolines-theme")
    (synopsis "A trip down to New Orleans...")
    (description
      "Documentation at https://melpa.org/#/caroline-theme")
    (license #f)))

(define-public emacs-cascading-dir-locals
  (package
    (name "emacs-cascading-dir-locals")
    (version "20211013.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/cascading-dir-locals.git")
               (commit
                 "345d4b70e837d45ee84014684127e7399932d5e6")))
        (sha256
          (base32
            "160ay9rf1s4hm9xmmsd7z0mkhqrj9wpm8dpd49hhibcng8hv6z6a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/cascading-dir-locals")
    (synopsis
      "Apply all (!) .dir-locals.el from root to current directory")
    (description
      "Documentation at https://melpa.org/#/cascading-dir-locals")
    (license #f)))

(define-public emacs-caseformat
  (package
    (name "emacs-caseformat")
    (version "20160115.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/caseformat.git")
               (commit
                 "75ddb9c64eeb78b46d9e1db99bef8d0fb1e46b99")))
        (sha256
          (base32
            "06briiapv2pfll8zc0wl55sad8cjgxkb8j8d4bvc8w5li3d52xa9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/HKey/caseformat")
    (synopsis "Format based letter case converter")
    (description
      "Documentation at https://melpa.org/#/caseformat")
    (license #f)))

(define-public emacs-caser
  (package
    (name "emacs-caser")
    (version "20230901.526")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/caser-"
               version
               ".tar"))
        (sha256
          (base32
            "05rdkwr0ky45g0rhvydw9sv1h4r76y7hfiiwjlvhi6kjarzhj5fh"))))
    (build-system melpa-build-system)
    (home-page "https://hg.sr.ht/~zck/caser.el")
    (synopsis
      "Change text casing from camelCase to dash-case to snake_case")
    (description
      "Documentation at https://melpa.org/#/caser")
    (license #f)))

(define-public emacs-cask-mode
  (package
    (name "emacs-cask-mode")
    (version "20160410.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/cask-mode.git")
               (commit
                 "7c6719d3bb4fe552958634bd5a11abc56681f3a7")))
        (sha256
          (base32
            "0gywc2mzdzq3ny0jjffa3151vi7zb9i8ddy5d63x4yhicf5sxlh1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for editing Cask files")
    (description
      "Documentation at https://melpa.org/#/cask-mode")
    (license #f)))

(define-public emacs-cask-package-toolset
  (package
    (name "emacs-cask-package-toolset")
    (version "20170921.2256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/cask-package-toolset.el.git")
               (commit
                 "2c74cd827e88c7f8360581a841e45f0b794510e7")))
        (sha256
          (base32
            "1hk5q6p1j7cqg5srr3v21xfyy7aas4hfj1a66h21c2xvfjra3hxw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-commander
            emacs-ansi
            emacs-shut-up))
    (arguments
      '(#:files (:defaults "bin" "templates")))
    (home-page
      "http://github.com/AdrieanKhisbe/cask-package-toolset.el")
    (synopsis "Toolsettize your package")
    (description
      "Documentation at https://melpa.org/#/cask-package-toolset")
    (license #f)))

(define-public emacs-caskxy
  (package
    (name "emacs-caskxy")
    (version "20140513.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/caskxy.git")
               (commit
                 "dc18dcab7ed526070ab76de071c9c5272e6ac40e")))
        (sha256
          (base32
            "15sq5vrkhb7c5j6ny6wy4bkyl5pggch4l7zw46an29rzni3pffr3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-log4e emacs-yaxception))
    (home-page "https://github.com/aki2o/caskxy")
    (synopsis "Control Cask in Emacs")
    (description
      "Documentation at https://melpa.org/#/caskxy")
    (license #f)))

(define-public emacs-catmacs
  (package
    (name "emacs-catmacs")
    (version "20170826.1157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pymaximus/catmacs")
               (commit
                 "65d3e0563abe6ff9577202cf2278074d4130fbdd")))
        (sha256
          (base32
            "0954qck9j417c17niy28ccrhmsbjyh95z4dbqc5j4mib06j37587"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/pymaximus/catmacs")
    (synopsis
      "Simple CAT interface for Yaesu Transceivers.")
    (description
      "Documentation at https://melpa.org/#/catmacs")
    (license #f)))

(define-public emacs-catppuccin-theme
  (package
    (name "emacs-catppuccin-theme")
    (version "20231106.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/catppuccin/emacs.git")
               (commit
                 "b778bb48be7111e19f27dc99891b515074496f82")))
        (sha256
          (base32
            "1nynlmwdzy1mgzx4jg3c7llffk19hixzk7bbsk6m1zhxgnsickqh"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/catppuccin/emacs")
    (synopsis
      "Catppuccin for Emacs - 🍄 Soothing pastel theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/catppuccin-theme")
    (license #f)))

(define-public emacs-cats
  (package
    (name "emacs-cats")
    (version "20230407.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/emacs-cats.git")
               (commit
                 "7265b83e1c71a23693fa0183af09657b9f2addc0")))
        (sha256
          (base32
            "0y3fh15bircr19c91mgjyray3mj84aq3agjfcjm8vs5w7czjp3l4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Fuco1/emacs-cats")
    (synopsis "Monads for Elisp")
    (description
      "Documentation at https://melpa.org/#/cats")
    (license #f)))

(define-public emacs-cbm
  (package
    (name "emacs-cbm")
    (version "20171116.1240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akermu/cbm.el.git")
               (commit
                 "5b41c936ba9f6d170309a85ffebc9939c1050b31")))
        (sha256
          (base32
            "091ln3d0jhdgahbwfdm1042b19886n3kwipw5gk8d0jnq5vwrkws"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/akermu/cbm.el")
    (synopsis "Switch to similar buffers.")
    (description
      "Documentation at https://melpa.org/#/cbm")
    (license #f)))

(define-public emacs-cbor
  (package
    (name "emacs-cbor")
    (version "20230810.1653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "ba624ad3f8b726bee1d8dcb0a2a9e2b658bb4c9b")))
        (sha256
          (base32
            "09i7lvdjv947d1w16hxv5vskvvx4vrnv9spv808x618qd5nldls2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("cbor.el")))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "CBOR utilities")
    (description
      "Documentation at https://melpa.org/#/cbor")
    (license #f)))

(define-public emacs-cc-cedict
  (package
    (name "emacs-cc-cedict")
    (version "20210814.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/cc-cedict.el.git")
               (commit
                 "03fbe7d1589d36f627ef9fe7b86f9fe6f623cbb3")))
        (sha256
          (base32
            "0lp5n3ar1k0scn8xzjylp7mgzf637ibbzai039n72z68nx2drilk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/cc-cedict.el")
    (synopsis
      "Interface to CC-CEDICT (a Chinese-English dictionary)")
    (description
      "Documentation at https://melpa.org/#/cc-cedict")
    (license #f)))

(define-public emacs-ccc
  (package
    (name "emacs-ccc")
    (version "20210501.820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skk-dev/ddskk.git")
               (commit
                 "251df5b02c91311140d2375b019c1de836655fd0")))
        (sha256
          (base32
            "1gk1sx6lhf8qxq5qfynn07yxn5qv34l42q2mqwpv5z4by6wf5p9a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ccc.el")))
    (home-page "https://github.com/skk-dev/ddskk")
    (synopsis
      "buffer local cursor color control library")
    (description
      "Documentation at https://melpa.org/#/ccc")
    (license #f)))

(define-public emacs-ccls
  (package
    (name "emacs-ccls")
    (version "20230815.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/emacs-ccls.git")
               (commit
                 "47f8caa374f38eba7d557f61aac000164387a33f")))
        (sha256
          (base32
            "0l699zav5211ac1w0jbag1x6fb4dcfpwkrinlplzyqswjji1qv00"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash))
    (home-page
      "https://github.com/MaskRay/emacs-ccls")
    (synopsis "ccls client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/ccls")
    (license #f)))

(define-public emacs-cd-compile
  (package
    (name "emacs-cd-compile")
    (version "20141108.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamienicol/emacs-cd-compile.git")
               (commit
                 "10284ccae86afda4a37b09ba90acd1e2efedec9f")))
        (sha256
          (base32
            "1a93cim1w96aaj81clhjv25r7v9bwqm9a818mn8lk4aj1bmhgc4c"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "run compile in a specific directory")
    (description
      "Documentation at https://melpa.org/#/cd-compile")
    (license #f)))

(define-public emacs-cdb
  (package
    (name "emacs-cdb")
    (version "20230318.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skk-dev/ddskk.git")
               (commit
                 "98c103ed697e461439401f731c13b3bda02e5128")))
        (sha256
          (base32
            "0p3f70ckpa1zpab15al6znwhlf1pp5dmc2amjrq5nrp2bq389hk3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("cdb.el")))
    (home-page "https://github.com/skk-dev/ddskk")
    (synopsis
      "constant database (cdb) reader for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/cdb")
    (license #f)))

(define-public emacs-cdlatex
  (package
    (name "emacs-cdlatex")
    (version "20230920.942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cdominik/cdlatex.git")
               (commit
                 "7521fa1b39de735dcbd32bca92a792d5261e9ce2")))
        (sha256
          (base32
            "1bdjcfk3xs85r2zkkl54dpk34x4dm9n8psw27ry69sa24nshqrps"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Fast input methods for LaTeX environments and math")
    (description
      "Documentation at https://melpa.org/#/cdlatex")
    (license #f)))

(define-public emacs-cdnjs
  (package
    (name "emacs-cdnjs")
    (version "20161031.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/cdnjs.el.git")
               (commit
                 "ce19880d3ec3d81e6c665d0b1dfea99cc7a3f908")))
        (sha256
          (base32
            "02j45ngddx7n5gvy42r8y3s22bmxlnvg2pqjfh0li8m599fnd11h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-deferred
            emacs-f
            emacs-pkg-info))
    (home-page "https://github.com/yasuyk/cdnjs.el")
    (synopsis "A front end for http://cdnjs.com")
    (description
      "Documentation at https://melpa.org/#/cdnjs")
    (license #f)))

(define-public emacs-cedit
  (package
    (name "emacs-cedit")
    (version "20200816.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/cedit.git")
               (commit
                 "cb38316903e6cfa8b8c978defa7e1dafcd4e0c12")))
        (sha256
          (base32
            "1m5n0rwh97g3vl4x0akclgc8flh9vpdavp82q3i1yraigvzqzfc9"))))
    (build-system melpa-build-system)
    (home-page "http://zk-phi.gitub.io/")
    (synopsis
      "paredit-like commands for c-like languages")
    (description
      "Documentation at https://melpa.org/#/cedit")
    (license #f)))

(define-public emacs-celery
  (package
    (name "emacs-celery")
    (version "20170225.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ardumont/emacs-celery.git")
               (commit
                 "51197d74f5eaa8ae09144af7663a2f4277f07d16")))
        (sha256
          (base32
            "1845qz0ih30z1jgm1zi11q4gvw9gy6w3vyj2mc1aiv5r170qj8as"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash-functional
            emacs-s
            emacs-deferred))
    (home-page
      "https://github.com/ardumont/emacs-celery")
    (synopsis
      "a minor mode to draw stats from celery and more?")
    (description
      "Documentation at https://melpa.org/#/celery")
    (license #f)))

(define-public emacs-celestial-mode-line
  (package
    (name "emacs-celestial-mode-line")
    (version "20230323.737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/celestial-mode-line.git")
               (commit
                 "90056322d6664e2e2b593912e4d5e68f1468cafc")))
        (sha256
          (base32
            "1qxh64gqaspaznw29wnix7l0mf8n8047awlzlrcrahjpnbnhh893"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ecraven/celestial-mode-line")
    (synopsis
      "Show lunar phase and sunrise/-set time in modeline")
    (description
      "Documentation at https://melpa.org/#/celestial-mode-line")
    (license #f)))

(define-public emacs-centaur-tabs
  (package
    (name "emacs-centaur-tabs")
    (version "20230607.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ema2159/centaur-tabs.git")
               (commit
                 "0bb1aa18d475319df85f192dce3327802866c3c3")))
        (sha256
          (base32
            "1115a5gp73brpam69wryxzci5rl844r2hxw91n4fa15sma9hz5dx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page
      "https://github.com/ema2159/centaur-tabs")
    (synopsis
      "Aesthetic, modern looking customizable tabs plugin")
    (description
      "Documentation at https://melpa.org/#/centaur-tabs")
    (license #f)))

(define-public emacs-centered-cursor-mode
  (package
    (name "emacs-centered-cursor-mode")
    (version "20230914.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andre-r/centered-cursor-mode.el.git")
               (commit
                 "67ef719e685407dbc455c7430765e4e685fd95a9")))
        (sha256
          (base32
            "1lnpwcr6289i5pqfr2cgdp4aimllfbpnhn4ljjjvfaiwi117882z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andre-r/centered-cursor-mode.el")
    (synopsis "cursor stays vertically centered")
    (description
      "Documentation at https://melpa.org/#/centered-cursor-mode")
    (license #f)))

(define-public emacs-centered-window
  (package
    (name "emacs-centered-window")
    (version "20220125.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anler/centered-window-mode.git")
               (commit
                 "80965f6c6afe8d918481433984b493de72af5399")))
        (sha256
          (base32
            "0zmq84gvkyj20l9gv5wwraa6zis2vk7hadagkmyqg1w6vs25n2mh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anler/centered-window-mode")
    (synopsis
      "Center the text when there's only one window")
    (description
      "Documentation at https://melpa.org/#/centered-window")
    (license #f)))

(define-public emacs-centimacro
  (package
    (name "emacs-centimacro")
    (version "20201225.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/centimacro.git")
               (commit
                 "0149877584b333c4f1953f0767f0cae23881b0df")))
        (sha256
          (base32
            "0w1qzn3jrxl7f6nrycpybx8jyz570yr58ayrf5nj6b3kj0v9n5cb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/centimacro")
    (synopsis
      "Assign multiple macros as global key bindings")
    (description
      "Documentation at https://melpa.org/#/centimacro")
    (license #f)))

(define-public emacs-cerbere
  (package
    (name "emacs-cerbere")
    (version "20181113.1641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/cerbere.git")
               (commit
                 "c667c165d9c1657f13d2d46f09ba21b61f9402cc")))
        (sha256
          (base32
            "0kqwcy96fy9mdhwsxh1zj2zn5qr7wvss22qq2ij2kpyh3jh8gxya"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pkg-info))
    (home-page
      "https://github.com/nlamirault/cerbere")
    (synopsis
      "Unit testing in Emacs for several programming languages")
    (description
      "Documentation at https://melpa.org/#/cerbere")
    (license #f)))

(define-public emacs-cern-ldap
  (package
    (name "emacs-cern-ldap")
    (version "20230626.1158")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/cern-ldap-"
               version
               ".tar"))
        (sha256
          (base32
            "1fqi5a6qd4nyjgayzxhmc0dndfbphalpfzsm7qx743ipds3r2zrj"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~nbarrientos/cern-ldap.el")
    (synopsis
      "Library to interact with CERN's LDAP servers")
    (description
      "Documentation at https://melpa.org/#/cern-ldap")
    (license #f)))

(define-public emacs-cern-root-mode
  (package
    (name "emacs-cern-root-mode")
    (version "20220905.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaypmorgan/cern-root-mode.git")
               (commit
                 "a54241681012b00b514fd20ff894e3c4c83b45c7")))
        (sha256
          (base32
            "0kxwpzkxbwc02d70aykqs2y35rl923iy8h5l8vm8jy60s6ns8qb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jaypmorgan/cern-root-mode")
    (synopsis
      "Major-mode for running C++ code with ROOT")
    (description
      "Documentation at https://melpa.org/#/cern-root-mode")
    (license #f)))

(define-public emacs-ceylon-mode
  (package
    (name "emacs-ceylon-mode")
    (version "20180606.1324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lucaswerkmeister/ceylon-mode.git")
               (commit
                 "948515672bc596dc118e8e3ede3ede5ec6a3c95a")))
        (sha256
          (base32
            "1a9f9h5kywfy8c2kmaxc9vf5zcykbhghpi3ra2l3z5hm0knq54ay"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lucaswerkmeister/ceylon-mode")
    (synopsis
      "Major mode for editing Ceylon source code")
    (description
      "Documentation at https://melpa.org/#/ceylon-mode")
    (license #f)))

(define-public emacs-cfengine-code-style
  (package
    (name "emacs-cfengine-code-style")
    (version "20171111.1027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cfengine/cfengine-code-style.git")
               (commit
                 "92a25872a6d1de00c5bfc2b9455ccb0082bf6569")))
        (sha256
          (base32
            "19nv6czxbl6kpcx54bq57xr2df2dyjwjg11vwal19hy6w7yd1av1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cfengine/core")
    (synopsis "C code style for CFEngine project.")
    (description
      "Documentation at https://melpa.org/#/cfengine-code-style")
    (license #f)))

(define-public emacs-cff
  (package
    (name "emacs-cff")
    (version "20160118.2018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/cff.git")
               (commit
                 "b6ab2a28e64ef06f281ec74cfe3114e450644dfa")))
        (sha256
          (base32
            "019vqjmq6hb2f5lddqy0ya5q0fd47xix29cashlchz0r034rc32r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fourier/cff")
    (synopsis
      "Search of the C/C++ file header by the source and vice versa")
    (description
      "Documentation at https://melpa.org/#/cff")
    (license #f)))

(define-public emacs-cfml-mode
  (package
    (name "emacs-cfml-mode")
    (version "20190617.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amyers634/cfml-mode.git")
               (commit
                 "2de315abddb6af088a2346e142cc305889dcd775")))
        (sha256
          (base32
            "1hqyxsnnl6zbbbfbacipd226dvhc9zlfpxvacmn6g9iv7qfc8k53"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/am2605/cfml-mode")
    (synopsis "Emacs mode for editing CFML files")
    (description
      "Documentation at https://melpa.org/#/cfml-mode")
    (license #f)))

(define-public emacs-cfn-mode
  (package
    (name "emacs-cfn-mode")
    (version "20231109.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/worr/cfn-mode.git")
               (commit
                 "5f90b7a5cdd1b5b0b93f4daab63fbd4ab1fe02c4")))
        (sha256
          (base32
            "07qsi45v3kdp9d1ap63ppgpdpmddznbn3cbvvw81wbwys3gax1j1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-yaml-mode))
    (arguments
      '(#:files
        ("cfn-mode/cfn-mode.el"
         "cfn-mode/cfn-properties.dat"
         "cfn-mode/cfn-resources.dat")))
    (home-page "https://gitlab.com/worr/cfn-mode")
    (synopsis "AWS cloudformation mode")
    (description
      "Documentation at https://melpa.org/#/cfn-mode")
    (license #f)))

(define-public emacs-cframe
  (package
    (name "emacs-cframe")
    (version "20231101.1742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/cframe.git")
               (commit
                 "d0f8b36cce8a9f2e1caa373e8c336c16d092c2ad")))
        (sha256
          (base32
            "0649k683y8yd73s9za02cqy44rd71s7zcb9qgnx39ygky10sdf3x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-buffer-manage emacs-dash))
    (home-page "https://github.com/plandes/cframe")
    (synopsis
      "Customize a frame and fast switch size and positions")
    (description
      "Documentation at https://melpa.org/#/cframe")
    (license #f)))

(define-public emacs-cfrs
  (package
    (name "emacs-cfrs")
    (version "20220129.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/cfrs.git")
               (commit
                 "f3a21f237b2a54e6b9f8a420a9da42b4f0a63121")))
        (sha256
          (base32
            "1vf5zm82sx3m1yvq73km8ajapv6rnz41b1jrsif7kh0ijh9vk3qi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-posframe))
    (home-page
      "https://github.com/Alexander-Miller/cfrs")
    (synopsis "Child-frame based read-string")
    (description
      "Documentation at https://melpa.org/#/cfrs")
    (license #f)))

(define-public emacs-cg
  (package
    (name "emacs-cg")
    (version "20230920.1245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GrammarSoft/cg3.git")
               (commit
                 "97e3217ed25453f249915cd7213b2ece166b7123")))
        (sha256
          (base32
            "1w4szidn0x7xs6wi9sa0ygsfv4gxh8jmc4mg8xjcsax081w1hylz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/*.el")))
    (home-page
      "https://visl.sdu.dk/constraint_grammar.html")
    (synopsis
      "Major mode for editing Constraint Grammar files")
    (description
      "Documentation at https://melpa.org/#/cg")
    (license #f)))

(define-public emacs-challenger-deep-theme
  (package
    (name "emacs-challenger-deep-theme")
    (version "20210120.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/challenger-deep-theme/emacs.git")
               (commit
                 "2a799259406a8b96a688873093ffab6630a3ad3b")))
        (sha256
          (base32
            "1rl3rkrbms96wv51mwxih9b4zg1dzh3jcmx4ylgamg77abd03sg3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/challenger-deep-theme/emacs")
    (synopsis "challenger-deep Theme")
    (description
      "Documentation at https://melpa.org/#/challenger-deep-theme")
    (license #f)))

(define-public emacs-champagne
  (package
    (name "emacs-champagne")
    (version "20230511.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/positron-solutions/champagne.git")
               (commit
                 "069452fa162d6aefc693c8d0546a84d967218289")))
        (sha256
          (base32
            "1qby7d95rl1vrkvq5y1i2bmy1bijv9pxm4whfwnhz9fkb3s88r9f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (home-page
      "http://github.com/positron-solutions/champagne")
    (synopsis "Graphical countdowns")
    (description
      "Documentation at https://melpa.org/#/champagne")
    (license #f)))

(define-public emacs-change-inner
  (package
    (name "emacs-change-inner")
    (version "20210126.1456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/change-inner.el.git")
               (commit
                 "42cad58aed2caec260f8e8ff61f78a7d3db72d1b")))
        (sha256
          (base32
            "0hs5hw36yagchpihx18059gi8b85hrccm82ynh89y7dkk1pw3wy1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis
      "Change contents based on semantic units")
    (description
      "Documentation at https://melpa.org/#/change-inner")
    (license #f)))

(define-public emacs-chaos-mode
  (package
    (name "emacs-chaos-mode")
    (version "20221227.223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/chaos-mode.git")
               (commit
                 "801d869c461166eb2face2554b9b7883a26374c6")))
        (sha256
          (base32
            "1z5slx0z5vjag32xr4rfk5z5mw7g2c6pbzv75phzvgjzyld6qcrf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/chaos-mode")
    (synopsis
      "A major mode for the Chaos programming language")
    (description
      "Documentation at https://melpa.org/#/chaos-mode")
    (license #f)))

(define-public emacs-chapel-mode
  (package
    (name "emacs-chapel-mode")
    (version "20210513.457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/chapel-mode.git")
               (commit
                 "39fd24bb7cf44808200354ac0496be4fc4fddd9a")))
        (sha256
          (base32
            "0nb6bz11vy2fb66xibk06rk3jvkpnz2ilpbfcgdg00nzhyzhf91k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/chapel-mode")
    (synopsis
      "A major mode for the Chapel programming language")
    (description
      "Documentation at https://melpa.org/#/chapel-mode")
    (license #f)))

(define-public emacs-char-menu
  (package
    (name "emacs-char-menu")
    (version "20210321.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/char-menu.git")
               (commit
                 "16e9ce0380a7661c6dae9ccec1172fe4757df682")))
        (sha256
          (base32
            "0cbs6lpljldz62vy2qqb3bdp3yarx84qpnmayyyah128snb9ic8v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy-menu))
    (home-page "https://github.com/mrkkrp/char-menu")
    (synopsis
      "Create your own menu for fast insertion of arbitrary symbols")
    (description
      "Documentation at https://melpa.org/#/char-menu")
    (license #f)))

(define-public emacs-charmap
  (package
    (name "emacs-charmap")
    (version "20200616.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lateau/charmap.git")
               (commit
                 "a810347b43b024a86167ab9be935dcf56c122743")))
        (sha256
          (base32
            "0ljwjqsa76mv23fl13m2fclhjlpnw5pinjpphh4ldppz2xirwl0k"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lateau/charmap")
    (synopsis "Unicode table for Emacs")
    (description
      "Documentation at https://melpa.org/#/charmap")
    (license #f)))

(define-public emacs-chatgpt-shell
  (package
    (name "emacs-chatgpt-shell")
    (version "20231108.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/chatgpt-shell.git")
               (commit
                 "58bb4d8eb9218be4925201a39596387d160f4593")))
        (sha256
          (base32
            "1mqwc2wkz2ax4pzi76vqq59v4qjwp221sw4nw91nr6zbk5ws1780"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-shell-maker))
    (arguments '(#:files ("chatgpt-shell.el")))
    (home-page
      "https://github.com/xenodium/chatgpt-shell")
    (synopsis
      "ChatGPT shell + buffer insert commands")
    (description
      "Documentation at https://melpa.org/#/chatgpt-shell")
    (license #f)))

(define-public emacs-chatwork
  (package
    (name "emacs-chatwork")
    (version "20170511.442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataka/chatwork.git")
               (commit
                 "fea231d479f06bf40dbfcf45de143eecc9ed744c")))
        (sha256
          (base32
            "163xr18lm4awfgh4lcp7pr04jirpvlk8w1g4445zbxbpjfvv268z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ataka/chatwork")
    (synopsis "ChatWork client for Emacs")
    (description
      "Documentation at https://melpa.org/#/chatwork")
    (license #f)))

(define-public emacs-cheat-sh
  (package
    (name "emacs-cheat-sh")
    (version "20210607.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/cheat-sh.el.git")
               (commit
                 "33bae22feae8d3375739c6bdef08d0dcdf47ee42")))
        (sha256
          (base32
            "0blyhgdk0li5slkhlj689jdal6d1qr4g2acz8i0jm4kvgysjilb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/cheat-sh.el")
    (synopsis "Interact with cheat.sh")
    (description
      "Documentation at https://melpa.org/#/cheat-sh")
    (license #f)))

(define-public emacs-cheatsheet
  (package
    (name "emacs-cheatsheet")
    (version "20170126.2150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/darksmile/cheatsheet.git")
               (commit
                 "e4f8e0110167ea16a17a74517d1f10cb7ff805b8")))
        (sha256
          (base32
            "1vy2qmx9872hfrfcycpsmy0si481rwv4q4gwiy8f2w04zb92szbn"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/darksmile/cheatsheet/")
    (synopsis "create your own cheatsheet")
    (description
      "Documentation at https://melpa.org/#/cheatsheet")
    (license #f)))

(define-public emacs-checkbox
  (package
    (name "emacs-checkbox")
    (version "20141117.58")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/camdez/checkbox.el.git")
               (commit
                 "335afa4404adf72973195a580458927004664d98")))
        (sha256
          (base32
            "0660ix17ksxy5a5v8yqy7adr9d4bs6p1mnkc6lpyw96k4pn62h45"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/camdez/checkbox.el")
    (synopsis
      "Quick manipulation of textual checkboxes")
    (description
      "Documentation at https://melpa.org/#/checkbox")
    (license #f)))

(define-public emacs-chee
  (package
    (name "emacs-chee")
    (version "20171123.2233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eikek/chee.git")
               (commit
                 "669ff9ee429f24c3c2d03b83d9cb9aec5f86bb8b")))
        (sha256
          (base32
            "1k64mjzqmjirsld40dvmpq4llpb7ggx80r1hvsjqazc4mr16pbri"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-f))
    (arguments '(#:files ("emacs/*.el")))
    (home-page
      "https://github.com/eikek/chee/tree/release/0.3.0/emacs")
    (synopsis
      "Interface to chee using dired and image-dired")
    (description
      "Documentation at https://melpa.org/#/chee")
    (license #f)))

(define-public emacs-cheerilee
  (package
    (name "emacs-cheerilee")
    (version "20160313.1835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Vannil/cheerilee.el.git")
               (commit
                 "41bd81b5b0bb657241ceda5be6af5e07254d7376")))
        (sha256
          (base32
            "1jdlp5cnsiza55vx4kxacqgk7yqg9fvd9swhwdxkczadb2d5l9p1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xelb))
    (home-page
      "https://github.com/Vannil/cheerilee.el")
    (synopsis "Toolkit library")
    (description
      "Documentation at https://melpa.org/#/cheerilee")
    (license #f)))

(define-public emacs-chef-mode
  (package
    (name "emacs-chef-mode")
    (version "20180628.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpasternacki/chef-mode.git")
               (commit
                 "048d691cb63981ae235763d4a6ced4af5c729924")))
        (sha256
          (base32
            "1niin51xwkd8q3wbwcgb0gyk3sw1829qj2p2zv7fm8ljy1jicn2d"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "minor mode for editing an opscode chef repository")
    (description
      "Documentation at https://melpa.org/#/chef-mode")
    (license #f)))

(define-public emacs-chembalance
  (package
    (name "emacs-chembalance")
    (version "20210601.1653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergiruiztrepat/chembalance.git")
               (commit
                 "ae36c823ca151f1dc6144ec96b2f5e98181c0dbb")))
        (sha256
          (base32
            "1n01h4lwfcm0skf0pgh7p87bmk4x3r6qsr5jcgm1ldafsx35x60g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sergiruiztrepat/chembalance")
    (synopsis "Balance chemical equations")
    (description
      "Documentation at https://melpa.org/#/chembalance")
    (license #f)))

(define-public emacs-chemtable
  (package
    (name "emacs-chemtable")
    (version "20230314.1825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergiruiztrepat/chemtable.git")
               (commit
                 "ca0fea2f28162e90a93be242279ec6aee9046475")))
        (sha256
          (base32
            "0zgrksi8jpas60jby3nydw540dq2wchz4y21a7ig76craqchiwjm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sergiruiztrepat/chemtable")
    (synopsis "Periodic table of the elements")
    (description
      "Documentation at https://melpa.org/#/chemtable")
    (license #f)))

(define-public emacs-cherry-blossom-theme
  (package
    (name "emacs-cherry-blossom-theme")
    (version "20150622.342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inlinestyle/emacs-cherry-blossom-theme.git")
               (commit
                 "eea7653e00f35973857ee23b27bc2fae5e753e50")))
        (sha256
          (base32
            "0m97xr6lddy2jdmd4bl4kbp2568p4n110yfa9k7fqc20ihq8jkyd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/inlinestyle/emacs-cherry-blossom-theme")
    (synopsis "a soothing color theme for Emacs24.")
    (description
      "Documentation at https://melpa.org/#/cherry-blossom-theme")
    (license #f)))

(define-public emacs-chezmoi
  (package
    (name "emacs-chezmoi")
    (version "20230726.1638")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuh8888/chezmoi.el.git")
               (commit
                 "1389782f8c0780c7e66f8e77b10345ba1f4eabae")))
        (sha256
          (base32
            "0canvjxnlzy2ia1czvabicsnjj9lqdw1fldr7b1sv4avzwrvqlyr"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/tuh8888/chezmoi.el")
    (synopsis
      "A package for interacting with chezmoi")
    (description
      "Documentation at https://melpa.org/#/chezmoi")
    (license #f)))

(define-public emacs-chinese-conv
  (package
    (name "emacs-chinese-conv")
    (version "20170807.2128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gucong/emacs-chinese-conv.git")
               (commit
                 "b56815bbb163d642e97fa73093b5a7e87cc32574")))
        (sha256
          (base32
            "1bc3yn8y60y6a4vpqv39arn1pkcpl4s4n0sz9446f6m1lcal4c3r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gucong/emacs-chinese-conv")
    (synopsis
      "Conversion between Chinese Characters with opencc or cconv")
    (description
      "Documentation at https://melpa.org/#/chinese-conv")
    (license #f)))

(define-public emacs-chinese-number
  (package
    (name "emacs-chinese-number")
    (version "20161008.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zhcosin/chinese-number.git")
               (commit
                 "7311c2a0c5eea5f016a90d733dfe75144c302fb2")))
        (sha256
          (base32
            "01i7nycjnx4cpfgwakj14jv9dwybjl5jnslcxic9pr1n77mz53wk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zhcosin/chinese-number")
    (synopsis
      "Convert numbers between Arabic and Chinese formats")
    (description
      "Documentation at https://melpa.org/#/chinese-number")
    (license #f)))

(define-public emacs-chinese-wbim
  (package
    (name "emacs-chinese-wbim")
    (version "20190727.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zilongshanren/chinese-wbim.git")
               (commit
                 "5d496364b0b6bbaaf0f9b37e5a6d260d4994f260")))
        (sha256
          (base32
            "1gmdklcldnzngki0rwa7f7lc71wb6qbyxcwlyqdw908ppkk40vbl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "wb.txt" "wbpy.txt")))
    (home-page
      "https://github.com/andyque/chinese-wbim")
    (synopsis "Enable Wubi Input Method in Emacs.")
    (description
      "Documentation at https://melpa.org/#/chinese-wbim")
    (license #f)))

(define-public emacs-chinese-word-at-point
  (package
    (name "emacs-chinese-word-at-point")
    (version "20170811.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/chinese-word-at-point.el.git")
               (commit
                 "8223d7439e005555b86995a005b225ae042f0538")))
        (sha256
          (base32
            "13gva1ld4f9wwb2m4fpk6bd9342qvvmaf5i1r3x3h84czmk0nq1r"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("chinese-word-at-point.el")))
    (home-page
      "https://github.com/xuchunyang/chinese-word-at-point.el")
    (synopsis
      "Add `chinese-word' thing to `thing-at-point'")
    (description
      "Documentation at https://melpa.org/#/chinese-word-at-point")
    (license #f)))

(define-public emacs-chinese-yasdcv
  (package
    (name "emacs-chinese-yasdcv")
    (version "20171015.144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/chinese-yasdcv.git")
               (commit
                 "5ab830daf1273d5a5cddcb94b56a9737f12d996f")))
        (sha256
          (base32
            "1mv1n6m73aamxj18i851ww53q7p4ydiqgaapxyvjbm6sx8ddz9ak"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (home-page
      "https://github.com/tumashu/chinese-yasdcv")
    (synopsis "Yet another StarDict frontend")
    (description
      "Documentation at https://melpa.org/#/chinese-yasdcv")
    (license #f)))

(define-public emacs-chip8
  (package
    (name "emacs-chip8")
    (version "20231028.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabrielelana/chip8.el.git")
               (commit
                 "1b3ba334184efb39ff03877cdce705cbf08ca9e7")))
        (sha256
          (base32
            "0a7jbb355vyyc2ihbiyaby9y6m3mp2cfaivicsmc8hb9qwadwx7x"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/gabrielelana/chip8.el")
    (synopsis "A CHIP-8 emulator")
    (description
      "Documentation at https://melpa.org/#/chip8")
    (license #f)))

(define-public emacs-chocolate-theme
  (package
    (name "emacs-chocolate-theme")
    (version "20210128.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SavchenkoValeriy/emacs-chocolate-theme.git")
               (commit
                 "ccc05f7ad96d3d1332727689bf6250443adc7ec0")))
        (sha256
          (base32
            "1d8a9jwv9y0sncw24k840c8yyrig30f2d6q2zqlc09f05yzq9p9p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/SavchenkoValeriy/emacs-chocolate-theme")
    (synopsis "A dark chocolaty theme")
    (description
      "Documentation at https://melpa.org/#/chocolate-theme")
    (license #f)))

(define-public emacs-choice-program
  (package
    (name "emacs-choice-program")
    (version "20230805.1641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/choice-program.git")
               (commit
                 "90df8d118c20d5d05ee97daf81012dc39759be92")))
        (sha256
          (base32
            "0vjff8vym4c9j6ddpivgsg23463k6k7ay8wa2harmib2bbrzqk75"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/plandes/choice-program")
    (synopsis "Parameter based program")
    (description
      "Documentation at https://melpa.org/#/choice-program")
    (license #f)))

(define-public emacs-chordpro-mode
  (package
    (name "emacs-chordpro-mode")
    (version "20231003.2349")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/chordpro-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "05rbhvxsn2vbl8q49il2j37qm74vg8syz8v2jmhyhc6zh2sgwyyw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://git.sr.ht/~breatheoutbreathein/chordpro-mode.el/")
    (synopsis
      "Major mode for ChordPro lead sheet file format")
    (description
      "Documentation at https://melpa.org/#/chordpro-mode")
    (license #f)))

(define-public emacs-chroma
  (package
    (name "emacs-chroma")
    (version "20230503.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/galdor/chroma.git")
               (commit
                 "e6ebe08ce439b0dd8cfd2a0a78abf34f195feb3c")))
        (sha256
          (base32
            "1j8zap0jx0dx4f7n7851ipmky70cnq6ixz2jnpmdccpk4w6w6cv6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/galdor/chroma")
    (synopsis "Color manipulation library")
    (description
      "Documentation at https://melpa.org/#/chroma")
    (license #f)))

(define-public emacs-chronometer
  (package
    (name "emacs-chronometer")
    (version "20190304.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcelotoledo/chronometer.git")
               (commit
                 "8457b296ef87be339cbe47730b922757d60bdcd5")))
        (sha256
          (base32
            "1apzb0jccw91gdynqa1722bbalzj4kp9fq25zzw1rxsrgh3mgmc5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/marcelotoledo/chronometer")
    (synopsis "a [not so] simple chronometer")
    (description
      "Documentation at https://melpa.org/#/chronometer")
    (license #f)))

(define-public emacs-chronometrist
  (package
    (name "emacs-chronometrist")
    (version "20230712.1532")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/chronometrist-"
               version
               ".tar"))
        (sha256
          (base32
            "12mc1cffrln2i5s6s91jdwg0qq65076svjgv276dwdr7lyfdrks4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ts))
    (home-page
      "https://codeberg.org/contrapunctus/chronometrist")
    (synopsis
      "Friendly and powerful personal time tracker and analyzer")
    (description
      "Documentation at https://melpa.org/#/chronometrist")
    (license #f)))

(define-public emacs-chronometrist-goal
  (package
    (name "emacs-chronometrist-goal")
    (version "20210510.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://tildegit.org/contrapunctus/chronometrist-goal.git")
               (commit
                 "6cb939d160f5d5966d7853aa23f3ed7c7ef9df44")))
        (sha256
          (base32
            "05jcn67fzf349h3vqvfrwhklan0i037mp0nq53wghfzapv1m7lv8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-chronometrist))
    (home-page
      "https://tildegit.org/contrapunctus/chronometrist-goal")
    (synopsis
      "Adds support for time goals to Chronometrist")
    (description
      "Documentation at https://melpa.org/#/chronometrist-goal")
    (license #f)))

(define-public emacs-chronometrist-key-values
  (package
    (name "emacs-chronometrist-key-values")
    (version "20230629.1039")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/chronometrist-key-values-"
               version
               ".tar"))
        (sha256
          (base32
            "0599gq194ppspcrp56zfg5ndyfb36qxzj4slm0iskyylmp3kn8c9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-chronometrist))
    (home-page
      "https://tildegit.org/contrapunctus/chronometrist")
    (synopsis "add key-values to Chronometrist data")
    (description
      "Documentation at https://melpa.org/#/chronometrist-key-values")
    (license #f)))

(define-public emacs-chronometrist-spark
  (package
    (name "emacs-chronometrist-spark")
    (version "20230629.1039")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/chronometrist-spark-"
               version
               ".tar"))
        (sha256
          (base32
            "0112qnsz9qdpjxygr2fghn7hd9xg0bk1grn8963d1sw5p6scv3cf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-chronometrist emacs-spark))
    (home-page
      "https://tildegit.org/contrapunctus/chronometrist")
    (synopsis
      "Show sparklines in Chronometrist buffers")
    (description
      "Documentation at https://melpa.org/#/chronometrist-spark")
    (license #f)))

(define-public emacs-chronos
  (package
    (name "emacs-chronos")
    (version "20230804.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarkBuffalo/chronos.git")
               (commit
                 "517c53f57c54ec64e1bc870a63b0f4cf1772fcf1")))
        (sha256
          (base32
            "009wc3hb2mflcpk0jdifvppjjj7m5gzgcf1s4x1knsrzqhmm9vxz"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/DarkBuffalo/chronos")
    (synopsis
      "Multiple simultaneous countdown / countup timers")
    (description
      "Documentation at https://melpa.org/#/chronos")
    (license #f)))

(define-public emacs-chruby
  (package
    (name "emacs-chruby")
    (version "20180114.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plexus/chruby.el.git")
               (commit
                 "42bc6d521f832eca8e2ba210f30d03ad5529788f")))
        (sha256
          (base32
            "06pvjw40qk017py9km26vjrh90acycnkr5r04nxf664qqkjlg2mc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/plexus/chruby.el")
    (synopsis "Emacs integration for chruby")
    (description
      "Documentation at https://melpa.org/#/chruby")
    (license #f)))

(define-public emacs-chyla-theme
  (package
    (name "emacs-chyla-theme")
    (version "20230907.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chyla/ChylaThemeForEmacs.git")
               (commit
                 "9ed08f18d8258755779ef2edc7964e3bd50f3a5c")))
        (sha256
          (base32
            "0xx8kmvd8kp95jxx4yrb8923x75022dl62lnwa9c18xcrcwk1208"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chyla/ChylaThemeForEmacs")
    (synopsis "chyla.org - green color theme.")
    (description
      "Documentation at https://melpa.org/#/chyla-theme")
    (license #f)))

(define-public emacs-cider
  (package
    (name "emacs-cider")
    (version "20231108.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/cider.git")
               (commit
                 "bf9dceca17e912605e2d8327c44ed241e2a556e2")))
        (sha256
          (base32
            "1wca624gdnrqlkadlqafj0xibma8xgsh9qqpzynr6b8q2vmff98j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clojure-mode
            emacs-parseedn
            emacs-queue
            emacs-spinner
            emacs-sesman))
    (arguments
      '(#:files
        ("lisp/*.el"
         "bin/*.sh"
         "*.el"
         "clojure.sh"
         "lein.sh"
         (:exclude ".dir-locals.el"))))
    (home-page
      "https://www.github.com/clojure-emacs/cider")
    (synopsis
      "Clojure Interactive Development Environment that Rocks")
    (description
      "Documentation at https://melpa.org/#/cider")
    (license #f)))

(define-public emacs-cider-decompile
  (package
    (name "emacs-cider-decompile")
    (version "20151122.537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/cider-decompile.git")
               (commit
                 "5d87035f3c3c14025e8f01c0c53d0ce2c8f56651")))
        (sha256
          (base32
            "1w4y65s3m2irga4iqfqqkcmvl6ss24zmaxqzbfib8jmi84r4lpac"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-javap-mode))
    (home-page
      "http://www.github.com/clojure-emacs/cider-decompile")
    (synopsis "decompilation extension for cider")
    (description
      "Documentation at https://melpa.org/#/cider-decompile")
    (license #f)))

(define-public emacs-cider-eval-sexp-fu
  (package
    (name "emacs-cider-eval-sexp-fu")
    (version "20190311.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/cider-eval-sexp-fu.git")
               (commit
                 "7fd229f1441356866aedba611fd0cf4e89b50921")))
        (sha256
          (base32
            "01gky548v3758fyr317lkwsc9aacab6m9d9vk1mrr3qyvmciwd51"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eval-sexp-fu))
    (home-page "unspecified")
    (synopsis
      "Briefly highlights an evaluated sexp.")
    (description
      "Documentation at https://melpa.org/#/cider-eval-sexp-fu")
    (license #f)))

(define-public emacs-cider-hydra
  (package
    (name "emacs-cider-hydra")
    (version "20190816.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/cider-hydra.git")
               (commit
                 "c3b8a15d72dddfbc390ab6a454bd7e4c765a2c95")))
        (sha256
          (base32
            "0qrxja9bxx07m1ij8ly36sib901a6qhczgxsp4ap4wszy63lx93r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-hydra))
    (home-page
      "https://github.com/clojure-emacs/cider-hydra")
    (synopsis "Hydras for CIDER.")
    (description
      "Documentation at https://melpa.org/#/cider-hydra")
    (license #f)))

(define-public emacs-ciel
  (package
    (name "emacs-ciel")
    (version "20180914.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takumatt/ciel.el.git")
               (commit
                 "429773a3c551691a463ecfddd634b8bae2f48503")))
        (sha256
          (base32
            "0xykdwsjgx44c0l5v9swkjjv0xa673krzlc71b1sc4dw9l526s4m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cs14095/ciel.el")
    (synopsis
      "A command that is clone of \"ci\" in vim.")
    (description
      "Documentation at https://melpa.org/#/ciel")
    (license #f)))

(define-public emacs-cil-mode
  (package
    (name "emacs-cil-mode")
    (version "20160622.1431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ForNeVeR/cil-mode.git")
               (commit
                 "a78a88ca9a66a82f069329a96e34b67478ae2d9b")))
        (sha256
          (base32
            "06p6hz6jrnvnlbxdr1pjgf5wh4n34kf6al4589qg1s88r2lf86bl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ForNeVeR/cil-mode")
    (synopsis "Common Intermediate Language mode")
    (description
      "Documentation at https://melpa.org/#/cil-mode")
    (license #f)))

(define-public emacs-cilk-mode
  (package
    (name "emacs-cilk-mode")
    (version "20220807.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ailiop/cilk-mode.git")
               (commit
                 "d5ba732a5a313a97a96085943cd7840b8e2d9c7c")))
        (sha256
          (base32
            "03bdwdrvhzs7yvs7vbqm55nvf1p41xpc5b19l9ajh3n7vr8rflx3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "https://github.com/ailiop/cilk-mode")
    (synopsis "Minor mode for Cilk code editing")
    (description
      "Documentation at https://melpa.org/#/cilk-mode")
    (license #f)))

(define-public emacs-cinspect
  (package
    (name "emacs-cinspect")
    (version "20150716.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inlinestyle/cinspect-mode.git")
               (commit
                 "4e199a90f89b335cccda1518aa0963e0a1d4fbab")))
        (sha256
          (base32
            "190n4kdcqdwglhnawnj9mqjarmcaqylxipc07whmrii0jv279kjw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deferred emacs-python-environment))
    (home-page
      "https://github.com/inlinestyle/cinspect-mode")
    (synopsis
      "Use cinspect to look at the CPython source of builtins and other C objects!")
    (description
      "Documentation at https://melpa.org/#/cinspect")
    (license #f)))

(define-public emacs-circadian
  (package
    (name "emacs-circadian")
    (version "20231027.744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/circadian.el.git")
               (commit
                 "b3bb94040080ac18aab04b010752d4984feee37b")))
        (sha256
          (base32
            "062mci931fwaf12cyw0kidavasdkfcd415iiwizdvlb2dmr3qmsk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GuidoSchmidt/circadian")
    (synopsis "Theme-switching based on daytime")
    (description
      "Documentation at https://melpa.org/#/circadian")
    (license #f)))

(define-public emacs-circe
  (package
    (name "emacs-circe")
    (version "20230910.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-circe/circe.git")
               (commit
                 "920ed78499c8967ef75912e9ff1247b8d19e1cee")))
        (sha256
          (base32
            "03bbpkl6dywn6s4lpw1jc8y2p8dlrxv9dshcz2b227z5dghfmmax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-circe/circe")
    (synopsis "Client for IRC in Emacs")
    (description
      "Documentation at https://melpa.org/#/circe")
    (license #f)))

(define-public emacs-circe-notifications
  (package
    (name "emacs-circe-notifications")
    (version "20180102.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eqyiel/circe-notifications.git")
               (commit
                 "291149ac12877bbd062da993479d3533a26862b0")))
        (sha256
          (base32
            "18mva5nn919c86sgk6kdh437vdnlh9bk7fg10xqcpics1yv3viaw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-circe emacs-alert))
    (home-page
      "https://github.com/eqyiel/circe-notifications")
    (synopsis "Add desktop notifications to Circe.")
    (description
      "Documentation at https://melpa.org/#/circe-notifications")
    (license #f)))

(define-public emacs-circleci-api
  (package
    (name "emacs-circleci-api")
    (version "20210227.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sulami/circleci-api.el.git")
               (commit
                 "2e39c5896819bb2063f9d7795c4299f419cf5542")))
        (sha256
          (base32
            "0j184sgqxh3f34ni6bfb69mfir94glcyl0wpqmpsn9siq54s82ag"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/sulami/circleci-api")
    (synopsis "Bindings for the CircleCI API")
    (description
      "Documentation at https://melpa.org/#/circleci-api")
    (license #f)))

(define-public emacs-citar
  (package
    (name "emacs-citar")
    (version "20231019.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-citar/citar.git")
               (commit
                 "ac91ec3a29c6e7bb61008ce42deef4ecb377e648")))
        (sha256
          (base32
            "18k9rr48ypvgfdjyfnrpmv6bfwkzba4ad96wgbfxk8g18a0ispp7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-parsebib emacs-citeproc))
    (arguments
      '(#:files
        (:defaults (:exclude "citar-embark.el"))))
    (home-page
      "https://github.com/emacs-citar/citar")
    (synopsis
      "Citation-related commands for org, latex, markdown")
    (description
      "Documentation at https://melpa.org/#/citar")
    (license #f)))

(define-public emacs-citar-denote
  (package
    (name "emacs-citar-denote")
    (version "20231014.421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pprevos/citar-denote.git")
               (commit
                 "f093c37d28320a04b5e7ee87d5c442fefa749c35")))
        (sha256
          (base32
            "1bnyqvdawyxrafz7c79f6xq5h90rhdakmv6g1jhplh881zmkq25w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-citar emacs-denote emacs-dash))
    (home-page
      "https://github.com/pprevos/citar-denote")
    (synopsis
      "Minor mode to integrate Citar and Denote")
    (description
      "Documentation at https://melpa.org/#/citar-denote")
    (license #f)))

(define-public emacs-citar-embark
  (package
    (name "emacs-citar-embark")
    (version "20231019.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-citar/citar.git")
               (commit
                 "ac91ec3a29c6e7bb61008ce42deef4ecb377e648")))
        (sha256
          (base32
            "18k9rr48ypvgfdjyfnrpmv6bfwkzba4ad96wgbfxk8g18a0ispp7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-embark emacs-citar))
    (arguments '(#:files ("citar-embark.el")))
    (home-page
      "https://github.com/emacs-citar/citar-embark")
    (synopsis "Citar/Embark integration")
    (description
      "Documentation at https://melpa.org/#/citar-embark")
    (license #f)))

(define-public emacs-citar-org-roam
  (package
    (name "emacs-citar-org-roam")
    (version "20230404.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-citar/citar-org-roam.git")
               (commit
                 "761eed66782fdbb6d65749098caa42ba43e8441d")))
        (sha256
          (base32
            "0iwhwfllbcd938qkvh5m5cn6s8pn01xb02yjbv1hl4jpiayianqa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam emacs-citar))
    (home-page
      "https://github.com/emacs-citar/citar-org-roam")
    (synopsis "Citar/org-roam integration")
    (description
      "Documentation at https://melpa.org/#/citar-org-roam")
    (license #f)))

(define-public emacs-citeproc
  (package
    (name "emacs-citeproc")
    (version "20230228.1414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andras-simonyi/citeproc-el.git")
               (commit
                 "290320fc579f886255f00d7268600df7fa5cc7e8")))
        (sha256
          (base32
            "131b6jcyyry4qpv536n4llf8d5xc3a98qq49rvsp0sqwipqhx4qs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-queue
            emacs-string-inflection
            emacs-parsebib))
    (home-page
      "https://github.com/andras-simonyi/citeproc-el")
    (synopsis "A CSL 1.0.2 Citation Processor")
    (description
      "Documentation at https://melpa.org/#/citeproc")
    (license #f)))

(define-public emacs-citeproc-org
  (package
    (name "emacs-citeproc-org")
    (version "20200915.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andras-simonyi/citeproc-org.git")
               (commit
                 "0fb4c96f48b3055a59a397af24d3f1a82cf77b66")))
        (sha256
          (base32
            "1n69016gds7kmf3253w36i40rf26g3qvgac7n0z67im9jvjfa6a7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-citeproc
            emacs-org-ref))
    (arguments
      '(#:files
        (:defaults
          "chicago-author-date.csl"
          "locales-en-US.xml")))
    (home-page
      "https://github.com/andras-simonyi/citeproc-org")
    (synopsis
      "Render org-mode references in CSL styles")
    (description
      "Documentation at https://melpa.org/#/citeproc-org")
    (license #f)))

(define-public emacs-citre
  (package
    (name "emacs-citre")
    (version "20230630.1536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/universal-ctags/citre.git")
               (commit
                 "c617acef3dc2a88aaffa42a515ce7dbaba98228a")))
        (sha256
          (base32
            "10lj6w67vsdxdzg0y69qzpccai4054xg8kl9jpavnwn5i12nlp7l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/universal-ctags/citre")
    (synopsis "Ctags IDE on the True Editor")
    (description
      "Documentation at https://melpa.org/#/citre")
    (license #f)))

(define-public emacs-cl-format
  (package
    (name "emacs-cl-format")
    (version "20230818.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/akater/elisp-cl-format.git")
               (commit
                 "42b662d27eefa458c1a39bea1836d6ada740b863")))
        (sha256
          (base32
            "0z6mia20xs42i176i9d5zn8p5911bs8ibwhag8a9znwcg30kh2r1"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/akater/elisp-cl-format")
    (synopsis "CL format routine.")
    (description
      "Documentation at https://melpa.org/#/cl-format")
    (license #f)))

(define-public emacs-cl-libify
  (package
    (name "emacs-cl-libify")
    (version "20181130.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/cl-libify.git")
               (commit
                 "f215866d7d7c52e84220cd541f40608a5b85abf0")))
        (sha256
          (base32
            "1k8x48cayanwajz81h5kfysqvnf58wrb9j4f9rbaqzg2nrnqw5sm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/cl-libify")
    (synopsis
      "Update elisp code to use cl-lib instead of cl")
    (description
      "Documentation at https://melpa.org/#/cl-libify")
    (license #f)))

(define-public emacs-clang-capf
  (package
    (name "emacs-clang-capf")
    (version "20221030.1830")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/clang-capf-"
               version
               ".el"))
        (sha256
          (base32
            "12ay9gaaxklpahhnaiswhc5qvdbmbvyjs0czy04cbk5w0skcw772"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~pkal/clang-capf")
    (synopsis
      "Completion-at-point backend for c/c++ using clang")
    (description
      "Documentation at https://melpa.org/#/clang-capf")
    (license #f)))

(define-public emacs-clang-format
  (package
    (name "emacs-clang-format")
    (version "20230809.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/clang-format.git")
               (commit
                 "bce0bb4ca17ecb6e6927074920945cef2a78f5b6")))
        (sha256
          (base32
            "1v99876wi8kld5wc7nhmm7gmp36i29x21y9mjzi4mq5zq2kqlpr6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Format code using clang-format")
    (description
      "Documentation at https://melpa.org/#/clang-format")
    (license #f)))

(define-public emacs-clang-format+
  (package
    (name "emacs-clang-format+")
    (version "20190824.2216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SavchenkoValeriy/emacs-clang-format-plus.git")
               (commit
                 "ddd4bfe1a13c2fd494ce339a320a51124c1d2f68")))
        (sha256
          (base32
            "0y97f86qnpcscwj41icb4i6j40qhvpkyhg529hwibpf6f53j7ckl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clang-format))
    (home-page
      "https://github.com/SavchenkoValeriy/emacs-clang-format-plus")
    (synopsis
      "Minor mode for automatic clang-format application")
    (description
      "Documentation at https://melpa.org/#/clang-format+")
    (license #f)))

(define-public emacs-clause
  (package
    (name "emacs-clause")
    (version "20230405.1235")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/clause-"
               version
               ".tar"))
        (sha256
          (base32
            "0jhr2bmph186ji890a5fqvdrb395yqf81dx5z9qhl1x1pwy3a2af"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mark-thing-at))
    (home-page
      "https://codeberg.org/martianh/clause.el")
    (synopsis
      "Functions to move, mark, kill by clause")
    (description
      "Documentation at https://melpa.org/#/clause")
    (license #f)))

(define-public emacs-clean-aindent-mode
  (package
    (name "emacs-clean-aindent-mode")
    (version "20171017.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pmarinov/clean-aindent-mode.git")
               (commit
                 "a97bcae8f43a9ff64e95473e4ef0d8bafe829211")))
        (sha256
          (base32
            "07dgx09j6nn5dl9vpqfcs5yqm79kza3h3r1lb7r09wpkmrg0c2cr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pmarinov/clean-aindent-mode")
    (synopsis
      "Simple indent and unindent, trims indent white-space")
    (description
      "Documentation at https://melpa.org/#/clean-aindent-mode")
    (license #f)))

(define-public emacs-clean-buffers
  (package
    (name "emacs-clean-buffers")
    (version "20160529.2259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/clean-buffers.git")
               (commit
                 "1be6c54e3095761b6b64bf749faae3dfce94e72a")))
        (sha256
          (base32
            "1h7kmj53fqwfzam3ywz3yn4abl2n94v0lxnyv7x4qzwi2ggizc3l"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "clean useless buffers")
    (description
      "Documentation at https://melpa.org/#/clean-buffers")
    (license #f)))

(define-public emacs-clean-kill-ring
  (package
    (name "emacs-clean-kill-ring")
    (version "20230115.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicholasBHubbard/clean-kill-ring.el.git")
               (commit
                 "8fd31aef414e27d31a49b06d7607a797221e614b")))
        (sha256
          (base32
            "0ad0zrqv70j3291z5fmfyrhfq4fmmg2kw7d2m3ph25nf9p2bn0p8"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/NicholasBHubbard/clean-kill-ring.el")
    (synopsis "Keep the kill ring clean")
    (description
      "Documentation at https://melpa.org/#/clean-kill-ring")
    (license #f)))

(define-public emacs-clear-text
  (package
    (name "emacs-clear-text")
    (version "20160406.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/clear-text.el.git")
               (commit
                 "b50669b6077d6948f72cb3c649281d206e0c2f2b")))
        (sha256
          (base32
            "0y5z2pfhzpv67w2lnw1q06mflww90sfcilj89kqx2jhhrnrnn2ka"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/xuchunyang/clear-text.el")
    (synopsis "Make you use clear text")
    (description
      "Documentation at https://melpa.org/#/clear-text")
    (license #f)))

(define-public emacs-clevercss
  (package
    (name "emacs-clevercss")
    (version "20131229.155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jschaf/CleverCSS-Mode.git")
               (commit
                 "b8a3c0dd674367c62b1a1ffec84d88fe0c0219bc")))
        (sha256
          (base32
            "19q6zbnl9fg4cwgi56d7p4qp6y3g0fdyihinpakby49xv2n2k8dx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A major mode for editing CleverCSS files")
    (description
      "Documentation at https://melpa.org/#/clevercss")
    (license #f)))

(define-public emacs-clhs
  (package
    (name "emacs-clhs")
    (version "20210428.1911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sam-s/clhs.git")
               (commit
                 "7b106c4fb5a6388ab753f94740f6dfadcdeedcbb")))
        (sha256
          (base32
            "06jwk5i445y800xizp7nv3yzxxfyll6485n4h6vd5xvrpnq3kqxa"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/sam-s/clhs")
    (synopsis
      "Access the Common Lisp HyperSpec (CLHS)")
    (description
      "Documentation at https://melpa.org/#/clhs")
    (license #f)))

(define-public emacs-click-mode
  (package
    (name "emacs-click-mode")
    (version "20180611.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmalehorn/click-mode.git")
               (commit
                 "b94ea8cce89cf0e753b2ab915202d49ffc470fb6")))
        (sha256
          (base32
            "0bz0wp40khha96k74g9vgnzm7xzsrh0wh4vks205pjhaxabhb5vh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bmalehorn/click-mode")
    (synopsis
      "Major mode for the Click Modular Router Project")
    (description
      "Documentation at https://melpa.org/#/click-mode")
    (license #f)))

(define-public emacs-clingo-mode
  (package
    (name "emacs-clingo-mode")
    (version "20230825.1941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/llaisdy/clingo-mode.git")
               (commit
                 "8ea6ab5fa7dca439ec0e1dca8f3cdf7ace43390d")))
        (sha256
          (base32
            "0n13i8xkwz6r42qmd7id4bbzhj0q3lnsrvq0hl6y22c1awqi9dr7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/llaisdy/clingo-mode")
    (synopsis
      "A major mode for editing Answer Set Programs")
    (description
      "Documentation at https://melpa.org/#/clingo-mode")
    (license #f)))

(define-public emacs-clipetty
  (package
    (name "emacs-clipetty")
    (version "20200327.2241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spudlyo/clipetty.git")
               (commit
                 "01b39044b9b65fa4ea7d3166f8b1ffab6f740362")))
        (sha256
          (base32
            "1g1awdcqzrnw1a6gl4n87a97lniyn0ck5a51l9n6jz2m8k3idmsg"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/spudlyo/clipetty")
    (synopsis
      "Send every kill from a TTY frame to the system clipboard")
    (description
      "Documentation at https://melpa.org/#/clipetty")
    (license #f)))

(define-public emacs-cliphist
  (package
    (name "emacs-cliphist")
    (version "20220525.1034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/cliphist.git")
               (commit
                 "d02b97a2aa0da13711d9a6f845649115de8ac11b")))
        (sha256
          (base32
            "05s8lqfbsq3m0k4fx3ap4506f3gnmsxb9lv8hc095i9xsk7mvaab"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/cliphist")
    (synopsis "paste from clipboard managers")
    (description
      "Documentation at https://melpa.org/#/cliphist")
    (license #f)))

(define-public emacs-clipmon
  (package
    (name "emacs-clipmon")
    (version "20180129.1054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bburns/clipmon.git")
               (commit
                 "95dc56c7ed84a654ec90f4740eb6df1050de8cf1")))
        (sha256
          (base32
            "0mfb4k0i71y49hn0xk5a1mv4zaj249qcan0y0nzvgf7mmvr32n9w"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("clipmon.el" "clipmon.wav")))
    (home-page "https://github.com/bburns/clipmon")
    (synopsis
      "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert")
    (description
      "Documentation at https://melpa.org/#/clipmon")
    (license #f)))

(define-public emacs-clippy
  (package
    (name "emacs-clippy")
    (version "20230822.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/clippy.el.git")
               (commit
                 "1e764902b3e9dbb11d5f02bc36c3b7ff4275f528")))
        (sha256
          (base32
            "1bc3a58xxvp9mjna47pcfnzk9h8akjwjn6jjlm2nsllmznzwa3pg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pos-tip))
    (home-page "https://github.com/Fuco1/clippy.el")
    (synopsis
      "Show tooltip with function documentation at point")
    (description
      "Documentation at https://melpa.org/#/clippy")
    (license #f)))

(define-public emacs-clips-mode
  (package
    (name "emacs-clips-mode")
    (version "20170909.823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clips-mode/clips-mode.git")
               (commit
                 "dd38e2822640a38f7d8bfec4f69d8dd24be27074")))
        (sha256
          (base32
            "1q2jz72wi8d2pdrjic9kwqixp5sczjkkx8rf67rgaz37ysjpcbf6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing CLIPS code and REPL")
    (description
      "Documentation at https://melpa.org/#/clips-mode")
    (license #f)))

(define-public emacs-clj-decompiler
  (package
    (name "emacs-clj-decompiler")
    (version "20220103.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bsless/clj-decompiler.el.git")
               (commit
                 "8c0c53f87e6e33f2be7e7aff6095eb586b50be1a")))
        (sha256
          (base32
            "0ay3iy1idiy46cic49wifd5qhmzgiswy2ynqs9gi9cpmnvk9lcm5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clojure-mode emacs-cider))
    (home-page
      "https://www.github.com/bsless/clj-decompiler.el")
    (synopsis "Clojure Java decompiler expansion")
    (description
      "Documentation at https://melpa.org/#/clj-decompiler")
    (license #f)))

(define-public emacs-clj-deps-new
  (package
    (name "emacs-clj-deps-new")
    (version "20230413.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpe90/emacs-clj-deps-new.git")
               (commit
                 "3a35aa2ee96a1ce6e27025f2ef83861e2bd2a1d8")))
        (sha256
          (base32
            "0q268ibj555mr6g6bzcczjgv9pp9z77nw5hbp27r3ihzgbrai0q9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jpe90/emacs-deps-new")
    (synopsis
      "Create clojure projects from templates")
    (description
      "Documentation at https://melpa.org/#/clj-deps-new")
    (license #f)))

(define-public emacs-clj-refactor
  (package
    (name "emacs-clj-refactor")
    (version "20231009.1104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clj-refactor.el.git")
               (commit
                 "b476345c580ae7cbc6b356ba0157db782684c47f")))
        (sha256
          (base32
            "100ngpgvff0xvw1h5krvh40sa3ympl241imwskcv62yk29m9z411"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet
            emacs-paredit
            emacs-multiple-cursors
            emacs-clojure-mode
            emacs-cider
            emacs-parseedn
            emacs-inflections
            emacs-hydra))
    (arguments '(#:files (:defaults "CHANGELOG.md")))
    (home-page "unspecified")
    (synopsis
      "A collection of commands for refactoring Clojure code")
    (description
      "Documentation at https://melpa.org/#/clj-refactor")
    (license #f)))

(define-public emacs-cljr-helm
  (package
    (name "emacs-cljr-helm")
    (version "20220721.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philjackson/cljr-helm.git")
               (commit
                 "2c1f9cbd892ec03335f671ea3f974ee2ff6078dc")))
        (sha256
          (base32
            "0cd2ik9kjnl47c3ys4zbi8pp6kv8vvrcv8ylqpnlikqy1fmnj7wv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clj-refactor emacs-helm-core))
    (home-page
      "https://github.com/philjackson/cljr-helm")
    (synopsis
      "Wraps clojure refactor commands with helm")
    (description
      "Documentation at https://melpa.org/#/cljr-helm")
    (license #f)))

(define-public emacs-cljr-ivy
  (package
    (name "emacs-cljr-ivy")
    (version "20200602.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/cljr-ivy.git")
               (commit
                 "921ba65d0db7cda4edcd690c708946125b874a70")))
        (sha256
          (base32
            "12g74sfjw6siix8hvfbb0a7y8cxzxi1mb22sw8wih56bcv1987wl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clj-refactor emacs-ivy))
    (home-page
      "https://github.com/wandersoncferreira/cljr-ivy")
    (synopsis
      "Access clojure refactor with ivy completion")
    (description
      "Documentation at https://melpa.org/#/cljr-ivy")
    (license #f)))

(define-public emacs-cljsbuild-mode
  (package
    (name "emacs-cljsbuild-mode")
    (version "20160402.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kototama/cljsbuild-mode.git")
               (commit
                 "fa2315660cb3ce944b5e16c679dcf5afd6a97f4c")))
        (sha256
          (base32
            "0flnfivz6w3pkham3g08m3xzy3jg1rzvxfa00vkr7ll8iyv4ypqc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kototama/cljsbuild-mode")
    (synopsis
      "A minor mode for the ClojureScript 'lein cljsbuild' command")
    (description
      "Documentation at https://melpa.org/#/cljsbuild-mode")
    (license #f)))

(define-public emacs-cljstyle-format
  (package
    (name "emacs-cljstyle-format")
    (version "20220706.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dpassen/cljstyle-format.git")
               (commit
                 "4ca28444856e0e1e6b24e5343bcd5c601c4aa86a")))
        (sha256
          (base32
            "088j7walsshafy4nrwqycq9h8yyn29rx8kxcgn2x58y5iz2hfx86"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "http://www.github.com/dpassen/cljstyle-format")
    (synopsis "Reformat Clojure code using cljstyle")
    (description
      "Documentation at https://melpa.org/#/cljstyle-format")
    (license #f)))

(define-public emacs-clmemo
  (package
    (name "emacs-clmemo")
    (version "20220204.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataka/clmemo.git")
               (commit
                 "f695c38c551f72f6ac5e1a82badc540c80d3b33b")))
        (sha256
          (base32
            "19lzrbkkabyw2pha005vpkgn42bs3b52nij1x2wr7v35bvpsck2q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ataka/clmemo")
    (synopsis "Change Log MEMO")
    (description
      "Documentation at https://melpa.org/#/clmemo")
    (license #f)))

(define-public emacs-cloak-mode
  (package
    (name "emacs-cloak-mode")
    (version "20230130.613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/cloak-mode.git")
               (commit
                 "ca0896dfd0a0ee549150233ebd96aa0f65b56afb")))
        (sha256
          (base32
            "1ih51q5sc2gri2lyy2qi3w6jijr5khcr4whnv8g34v8xq6pyrxys"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erickgnavar/cloak-mode")
    (synopsis
      "A minor mode to cloak sensitive values")
    (description
      "Documentation at https://melpa.org/#/cloak-mode")
    (license #f)))

(define-public emacs-cloc
  (package
    (name "emacs-cloc")
    (version "20170728.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/cloc-emacs.git")
               (commit
                 "f30f0472e465cc8d433d2473e9d3b8dfe2c94491")))
        (sha256
          (base32
            "0g8hklc0914dsi3ks7g251w58ixa78qsh87dx914cc8sahpc0ws2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cosmicexplorer/cloc-emacs")
    (synopsis
      "count lines of code over emacs buffers")
    (description
      "Documentation at https://melpa.org/#/cloc")
    (license #f)))

(define-public emacs-clocker
  (package
    (name "emacs-clocker")
    (version "20190214.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roman/clocker.el.git")
               (commit
                 "c4d76968a49287ce3bac0832bb5d5d076054c96f")))
        (sha256
          (base32
            "1wp74fmnk21n5lrpmyk9j25dc79jffbmmhbgg5avzv63az6ffkdk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-dash
            emacs-spaceline))
    (arguments '(#:files ("clocker.el")))
    (home-page "unspecified")
    (synopsis "Note taker and clock-in enforcer")
    (description
      "Documentation at https://melpa.org/#/clocker")
    (license #f)))

(define-public emacs-clockodo
  (package
    (name "emacs-clockodo")
    (version "20220604.2049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/santifa/clockodo-el.git")
               (commit
                 "6329aaebc4373edaa4cd1d046582a4cc36db4888")))
        (sha256
          (base32
            "03n11mr39wj3nyabs24l5caqbzc7lm0wp4wazcsrsxwm7pij9vrs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-ts))
    (home-page
      "https://github.com/santifa/clockodo-el")
    (synopsis
      "A small integration for the clockodo api")
    (description
      "Documentation at https://melpa.org/#/clockodo")
    (license #f)))

(define-public emacs-clojars
  (package
    (name "emacs-clojars")
    (version "20180825.1951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joshuamiller/clojars.el.git")
               (commit
                 "696c5b056e45067512a7d6dcce2515f3c639f61b")))
        (sha256
          (base32
            "0qkkdlifii6wkfxaj95zphiw3psmf9qnds3whmp6jq2lq9wpd74f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request-deferred))
    (home-page
      "https://github.com/joshuamiller/clojars.el")
    (synopsis "clojars.org search interface")
    (description
      "Documentation at https://melpa.org/#/clojars")
    (license #f)))

(define-public emacs-clojure-essential-ref
  (package
    (name "emacs-clojure-essential-ref")
    (version "20221215.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/clojure-essential-ref.git")
               (commit
                 "6741bf65cf9b9bc896ab1cc3c384573e8ffe5f96")))
        (sha256
          (base32
            "0dib6krb49gi253vs3zqh83r9s3wdmlvbqwcq7gq28dbjsbpljcn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider))
    (arguments
      '(#:files
        (:defaults
          (:exclude "clojure-essential-ref-nov.el"))))
    (home-page
      "https://github.com/p3r7/clojure-essential-ref")
    (synopsis
      "Cider-doc to \"Clojure, The Essential Reference\"")
    (description
      "Documentation at https://melpa.org/#/clojure-essential-ref")
    (license #f)))

(define-public emacs-clojure-mode
  (package
    (name "emacs-clojure-mode")
    (version "20231105.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clojure-mode.git")
               (commit
                 "481ca480e8b7b6c90881f8bd8434addab1d33778")))
        (sha256
          (base32
            "09124cnvq7cnllsnbbshx1frbha6sydjgzn00k3rkyxclhbm8vhd"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("clojure-mode.el")))
    (home-page
      "https://github.com/clojure-emacs/clojure-mode")
    (synopsis "Major mode for Clojure code")
    (description
      "Documentation at https://melpa.org/#/clojure-mode")
    (license #f)))

(define-public emacs-clojure-mode-extra-font-locking
  (package
    (name "emacs-clojure-mode-extra-font-locking")
    (version "20231018.922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clojure-mode.git")
               (commit
                 "525fc1b131b1fc537aa82d83d9eb2ea833cface6")))
        (sha256
          (base32
            "0g4x587fpzcj9y59k8sb1g7c6yvga9gjs8ximpmar7d8jq2cv5qa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (arguments
      '(#:files ("clojure-mode-extra-font-locking.el")))
    (home-page
      "https://github.com/clojure-emacs/clojure-mode")
    (synopsis "Extra font-locking for Clojure mode")
    (description
      "Documentation at https://melpa.org/#/clojure-mode-extra-font-locking")
    (license #f)))

(define-public emacs-clojure-quick-repls
  (package
    (name "emacs-clojure-quick-repls")
    (version "20150814.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/symfrog/clojure-quick-repls.git")
               (commit
                 "730311dd3ac4e0aceb0204f818b422017873467f")))
        (sha256
          (base32
            "1qxhgqldvzzbpr3cxkj3a1zhpjck04pcqli9nnnb75hawi7vi8si"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider emacs-dash))
    (home-page
      "https://github.com/symfrog/clojure-quick-repls")
    (synopsis
      "Quickly create Clojure and ClojureScript repls for a project.")
    (description
      "Documentation at https://melpa.org/#/clojure-quick-repls")
    (license #f)))

(define-public emacs-clojure-snippets
  (package
    (name "emacs-clojure-snippets")
    (version "20220914.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpenet/clojure-snippets.git")
               (commit
                 "66d23f0ffedf2cc2be0387c3504b5f89d7300cfa")))
        (sha256
          (base32
            "0s0jcbwz6bb8215v1rsy1kw1jx19zkavykki9yq9njqm3n6imjax"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for clojure")
    (description
      "Documentation at https://melpa.org/#/clojure-snippets")
    (license #f)))

(define-public emacs-clojure-ts-mode
  (package
    (name "emacs-clojure-ts-mode")
    (version "20230925.320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clojure-ts-mode.git")
               (commit
                 "8e61fe8ff4795975ec9e225af931d3a514c99445")))
        (sha256
          (base32
            "101c1xwrmkb9rq713jij105117y2d0ffiplxsnb3z1h2pgcil0p8"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/clojure-emacs/clojure-ts-mode")
    (synopsis "Major mode for Clojure code")
    (description
      "Documentation at https://melpa.org/#/clojure-ts-mode")
    (license #f)))

(define-public emacs-clomacs
  (package
    (name "emacs-clomacs")
    (version "20220415.1035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/clomacs.git")
               (commit
                 "9cd7c9fd86bc7bc627a31275d1ef131378b90a49")))
        (sha256
          (base32
            "0aj3739xxv4plyjslvvm7kxa520hn1v0p6f6qpihpx4f24dyh6hm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider
            emacs-s
            emacs-simple-httpd
            emacs-dash))
    (arguments '(#:files ("src/elisp/*.el")))
    (home-page
      "https://github.com/clojure-emacs/clomacs")
    (synopsis
      "Simplifies Emacs Lisp interaction with Clojure.")
    (description
      "Documentation at https://melpa.org/#/clomacs")
    (license #f)))

(define-public emacs-closql
  (package
    (name "emacs-closql")
    (version "20230914.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/closql.git")
               (commit
                 "909752e2aa946bd91b27a1813982e2b20ae27dde")))
        (sha256
          (base32
            "12jan3mwnkjdf06df2ah9pmy2ikrsi436ljk0xcfrns9q4cja6hs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-emacsql))
    (home-page
      "https://github.com/emacscollective/closql")
    (synopsis "Store EIEIO objects using EmacSQL")
    (description
      "Documentation at https://melpa.org/#/closql")
    (license #f)))

(define-public emacs-closure-lint-mode
  (package
    (name "emacs-closure-lint-mode")
    (version "20101118.2124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/closure-lint-mode.git")
               (commit
                 "bc3d2fd5c35580bf1b8af43b12484c95a343b4b5")))
        (sha256
          (base32
            "0v0wdq0b5jz4x0d7dl3ilgf3aqp2hk375db366ij6gxwd0b9i3na"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/r0man/closure-lint-mode")
    (synopsis "minor mode for the Closure Linter")
    (description
      "Documentation at https://melpa.org/#/closure-lint-mode")
    (license #f)))

(define-public emacs-cloud-theme
  (package
    (name "emacs-cloud-theme")
    (version "20220205.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vallyscode/cloud-theme.git")
               (commit
                 "16372ea1f527917102ac302afaec3ef09e289d24")))
        (sha256
          (base32
            "0wyrc532iqviq1r8pa3qnz10bd66qnvac3qcgcwvjhd5h772y0dh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vallyscode/cloud-theme")
    (synopsis "A light colored theme")
    (description
      "Documentation at https://melpa.org/#/cloud-theme")
    (license #f)))

(define-public emacs-cloud-to-butt-erc
  (package
    (name "emacs-cloud-to-butt-erc")
    (version "20130627.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/cloud-to-butt-erc.git")
               (commit
                 "6710c03d1bc91736435cbfe845924940cae34e5c")))
        (sha256
          (base32
            "07kvnb6p35swkyj92c4wymsqq4r2885wdpqhv7nhicvi6n658kpf"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/leathekd/cloud-to-butt-erc")
    (synopsis "Replace 'the cloud' with 'my butt'")
    (description
      "Documentation at https://melpa.org/#/cloud-to-butt-erc")
    (license #f)))

(define-public emacs-clues-theme
  (package
    (name "emacs-clues-theme")
    (version "20161213.1127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-clues-theme.git")
               (commit
                 "abd61f2b7f3e98de58ca26e6d1230e70c6406cc7")))
        (sha256
          (base32
            "118k5bnlk9sc2n04saaxjncmc1a4m1wlf2y7xyklpffkazbd0m72"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/emacs-clues-theme")
    (synopsis
      "an Emacs 24 theme which may well be fully awesome...")
    (description
      "Documentation at https://melpa.org/#/clues-theme")
    (license #f)))

(define-public emacs-cm-mode
  (package
    (name "emacs-cm-mode")
    (version "20170203.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/criticmarkup-emacs.git")
               (commit
                 "276d49c859822265070ae5dfbb403fd7d8d06436")))
        (sha256
          (base32
            "0mqbjw9wiaq735v307hd7g0g6i3a4k7h71bi4g9rr2jbgiljmql4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Minor mode for CriticMarkup")
    (description
      "Documentation at https://melpa.org/#/cm-mode")
    (license #f)))

(define-public emacs-cmake-font-lock
  (package
    (name "emacs-cmake-font-lock")
    (version "20230304.2223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/cmake-font-lock.git")
               (commit
                 "a6038e916bcca807ae695f7d7e5c300c3f38f415")))
        (sha256
          (base32
            "18kvs2yq6plw6lngs97wxl7qah5iwrnhq2q68aac9z8fpwq0vhz8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cmake-mode))
    (home-page
      "https://github.com/Lindydancer/cmake-font-lock")
    (synopsis
      "Advanced, type aware, highlight support for CMake")
    (description
      "Documentation at https://melpa.org/#/cmake-font-lock")
    (license #f)))

(define-public emacs-cmake-ide
  (package
    (name "emacs-cmake-ide")
    (version "20210610.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atilaneves/cmake-ide.git")
               (commit
                 "28dc4ab5bd01d99553901b4efeb7234280928b18")))
        (sha256
          (base32
            "01xpknvj5mm2d3z6xzaw6cyb26hrzhvs44763ajvgw9l43mviwy3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-levenshtein emacs-s))
    (home-page
      "http://github.com/atilaneves/cmake-ide")
    (synopsis
      "Calls CMake to find out include paths and other compiler flags")
    (description
      "Documentation at https://melpa.org/#/cmake-ide")
    (license #f)))

(define-public emacs-cmake-mode
  (package
    (name "emacs-cmake-mode")
    (version "20231006.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.kitware.com/cmake/cmake.git")
               (commit
                 "0cd2ada2d14e391d8bff89a1f47753ad51a44ab5")))
        (sha256
          (base32
            "0apykmy8f6mn90vj4g8kds906zrazy4fdm316mz5kb2lbys3zzpd"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("Auxiliary/*.el")))
    (home-page "unspecified")
    (synopsis "major-mode for editing CMake sources")
    (description
      "Documentation at https://melpa.org/#/cmake-mode")
    (license #f)))

(define-public emacs-cmake-project
  (package
    (name "emacs-cmake-project")
    (version "20171121.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alamaison/emacs-cmake-project.git")
               (commit
                 "a7cf9e4c01c4683e14b6942cc5cc5e8cddc98721")))
        (sha256
          (base32
            "0zff8705vllkmm112qm58q1af0x1rcra5yw4fi8m5q97kh0n77vn"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alamaison/emacs-cmake-project")
    (synopsis
      "Integrates CMake build process with Emacs")
    (description
      "Documentation at https://melpa.org/#/cmake-project")
    (license #f)))

(define-public emacs-cmd-to-echo
  (package
    (name "emacs-cmd-to-echo")
    (version "20161203.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mallt/cmd-to-echo.git")
               (commit
                 "e0e874fc0e1ad6d291e39ed76023445297ad438a")))
        (sha256
          (base32
            "0wi097yk9p1xcfmps1g58xvvlv60akwky4y0pxdz6pa31w9jd1q8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-shell-split-string))
    (home-page "unspecified")
    (synopsis
      "Show the output of long-running commands in the echo area")
    (description
      "Documentation at https://melpa.org/#/cmd-to-echo")
    (license #f)))

(define-public emacs-cmm-mode
  (package
    (name "emacs-cmm-mode")
    (version "20150225.746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bgamari/cmm-mode.git")
               (commit
                 "c3ad514dff3eb30434f6b20d953276d4c00de1ee")))
        (sha256
          (base32
            "0xdcw329d2gssx86iajwrgpr7yv69b9nflmzjgb4jvg4pskj4pgx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for C-- source code")
    (description
      "Documentation at https://melpa.org/#/cmm-mode")
    (license #f)))

(define-public emacs-cnfonts
  (package
    (name "emacs-cnfonts")
    (version "20230412.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/cnfonts.git")
               (commit
                 "5115f53366bd6118dce3673ddec5ff428534ce67")))
        (sha256
          (base32
            "0k0mh653sjwhli6hxdyzvcqdmpxdsx1s0fwzsw69dfr6nxr7f1dv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/cnfonts")
    (synopsis "A simple Chinese fonts config tool")
    (description
      "Documentation at https://melpa.org/#/cnfonts")
    (license #f)))

(define-public emacs-cobalt
  (package
    (name "emacs-cobalt")
    (version "20180304.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cobalt-org/cobalt.el.git")
               (commit
                 "88ef936373a5493183d49ec69ca541bcc749a109")))
        (sha256
          (base32
            "0mm9lj5mvidb69zq6a9daibdm4l6y4vw389hr5052qnj0qljb757"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cobalt-org/cobalt.el")
    (synopsis
      "Easily use the Cobalt.rs static site generator")
    (description
      "Documentation at https://melpa.org/#/cobalt")
    (license #f)))

(define-public emacs-cobra-mode
  (package
    (name "emacs-cobra-mode")
    (version "20140116.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Nekroze/cobra-mode.git")
               (commit
                 "acd6e53f6286af5176471d01f25257e5ddb6dd01")))
        (sha256
          (base32
            "1sx8grp3j7zcma3nb7zj6kijkdqx166vw1qgmm29hvx48bys6vlp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Nekroze/cobra-mode")
    (synopsis
      "Major mode for .NET-based Cobra language")
    (description
      "Documentation at https://melpa.org/#/cobra-mode")
    (license #f)))

(define-public emacs-codcut
  (package
    (name "emacs-codcut")
    (version "20190915.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/codcut/codcut-emacs.git")
               (commit
                 "7ca7db69e8c38ec45eb572ad16ab2b56086f2131")))
        (sha256
          (base32
            "1jfglmsknvyh3srqn7m6yr02j7n8xa7iznzyhhr34mwg2q71ihzr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/codcut/codcut-emacs")
    (synopsis "Share pieces of code to Codcut")
    (description
      "Documentation at https://melpa.org/#/codcut")
    (license #f)))

(define-public emacs-code-archive
  (package
    (name "emacs-code-archive")
    (version "20190612.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/code-archive.git")
               (commit
                 "1ad9af6679d0294c3056eab9cad673f29c562721")))
        (sha256
          (base32
            "0s0zakrmbx9gr7ippnyqngc09xj9f7bsv0mv11p062a8pkilg219"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/code-archive")
    (synopsis
      "git supported code archive and reference for org-mode")
    (description
      "Documentation at https://melpa.org/#/code-archive")
    (license #f)))

(define-public emacs-code-cells
  (package
    (name "emacs-code-cells")
    (version "20231015.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astoff/code-cells.el.git")
               (commit
                 "8a1f0281f88239b956250a8c76bada8aa9debe2c")))
        (sha256
          (base32
            "1yyfwxnq3wfaakij7yvlv8f6gs1y8r3q3vhyqic2q4z98kws7jm9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/astoff/code-cells.el")
    (synopsis
      "Lightweight notebooks with support for ipynb files")
    (description
      "Documentation at https://melpa.org/#/code-cells")
    (license #f)))

(define-public emacs-code-compass
  (package
    (name "emacs-code-compass")
    (version "20231108.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ag91/code-compass.git")
               (commit
                 "67ec53f9ca43bea941ec5ba6fccba8565c1d937f")))
        (sha256
          (base32
            "1k6cc2m7kdr6g69cn7r3i43cq6iww74sqimlw6q1paf66lm35xld"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-async
            emacs-simple-httpd))
    (arguments
      '(#:files (:defaults "scripts" "pages")))
    (home-page
      "https://github.com/ag91/code-compass")
    (synopsis
      "Navigate software aided by metrics and visualization")
    (description
      "Documentation at https://melpa.org/#/code-compass")
    (license #f)))

(define-public emacs-code-library
  (package
    (name "emacs-code-library")
    (version "20160426.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/code-library.git")
               (commit
                 "32d59c5c845d6dbdda18f9bd1c03a58d55417fc5")))
        (sha256
          (base32
            "1n00bb39jgx02zdgla85zx0a338xir0zh0af6xca14kg5bx07vsv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gist))
    (home-page "unspecified")
    (synopsis
      "use org-mode to collect code snippets")
    (description
      "Documentation at https://melpa.org/#/code-library")
    (license #f)))

(define-public emacs-code-review
  (package
    (name "emacs-code-review")
    (version "20221206.113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/code-review.git")
               (commit
                 "a8bb63b53f2a1fd31302c110e668ad7b5c871b34")))
        (sha256
          (base32
            "1ks1s3vq8rwc14863dk929r42x52p9dqcd3qyjbkc9km2nkc1z5n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-closql
            emacs-magit
            emacs-a
            emacs-ghub
            emacs-uuidgen
            emacs-deferred
            emacs-markdown-mode
            emacs-forge
            emacs-emojify))
    (home-page
      "https://github.com/wandersoncferreira/code-review")
    (synopsis
      "Perform code review from Github, Gitlab, and Bitbucket Cloud")
    (description
      "Documentation at https://melpa.org/#/code-review")
    (license #f)))

(define-public emacs-code-stats
  (package
    (name "emacs-code-stats")
    (version "20201209.2135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/code-stats-emacs.git")
               (commit
                 "9a467dfd6a3cef849468623e1c085cbf59dac154")))
        (sha256
          (base32
            "1ggmm2jnz4z247kgx87i6km5ya5jayr5qy2dmshfay5pnql12fz6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/xuchunyang/code-stats-emacs")
    (synopsis "Code::Stats plugin")
    (description
      "Documentation at https://melpa.org/#/code-stats")
    (license #f)))

(define-public emacs-codebug
  (package
    (name "emacs-codebug")
    (version "20140929.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shano/emacs-codebug.git")
               (commit
                 "ac0e4331ba94ccb5203fa492570e1ca6b90c3d52")))
        (sha256
          (base32
            "11v671c4338bsizbmm7ypp4x9s5hiwyddsg2ig6h157gfv2597pp"))))
    (build-system melpa-build-system)
    (home-page "http://www.shanedowling.com/")
    (synopsis "Interact with codebug")
    (description
      "Documentation at https://melpa.org/#/codebug")
    (license #f)))

(define-public emacs-codesearch
  (package
    (name "emacs-codesearch")
    (version "20181006.1431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-codesearch.git")
               (commit
                 "f6eb96f034a925444412cfa03e45e0ccbbafe3f2")))
        (sha256
          (base32
            "1xdkm1f04z1h3ivd6zm8hckf3n3fbi5rwybg4dwi5mim6w84i7j9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-log4e))
    (arguments
      '(#:files
        ("codesearch.el" "listing-codesearch.el")))
    (home-page
      "https://github.com/abingham/emacs-codesearch")
    (synopsis
      "Core support for managing codesearch tools")
    (description
      "Documentation at https://melpa.org/#/codesearch")
    (license #f)))

(define-public emacs-codespaces
  (package
    (name "emacs-codespaces")
    (version "20221018.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/patrickt/codespaces.el.git")
               (commit
                 "8e0843684ea685c2b25b8f5601cf02553bab4b08")))
        (sha256
          (base32
            "1w3ay58aq3hgibmigb6frr7w1q660fvzhapr7lzgfh8w2z4lq7l9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/patrickt/codespaces.el")
    (synopsis
      "Connect to GitHub Codespaces via TRAMP")
    (description
      "Documentation at https://melpa.org/#/codespaces")
    (license #f)))

(define-public emacs-codic
  (package
    (name "emacs-codic")
    (version "20150926.1127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/codic.git")
               (commit
                 "52bbb6997ef4ab9fb7fea43bbfff7f04671aa557")))
        (sha256
          (base32
            "14jcxrs3b02pbppvdsabr7c74i3c6d1lmd6l1p9dj8gv413pghsz"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" ("dict" "dict/*.csv"))))
    (home-page
      "https://github.com/syohex/emacs-codic")
    (synopsis
      "Search Codic (codic.jp) naming dictionaries")
    (description
      "Documentation at https://melpa.org/#/codic")
    (license #f)))

(define-public emacs-coffee-fof
  (package
    (name "emacs-coffee-fof")
    (version "20131012.1230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/coffee-fof.git")
               (commit
                 "211529594bc074721c6cbc4edb73a63cc05f89ac")))
        (sha256
          (base32
            "010v886ak0rbbhqwxwj6m0mkgh19s232igy7wwbv07l2pdqszf3p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-coffee-mode))
    (home-page "http://github.com/yasuyk/coffee-fof")
    (synopsis
      "A coffee-mode configuration for `ff-find-other-file'.")
    (description
      "Documentation at https://melpa.org/#/coffee-fof")
    (license #f)))

(define-public emacs-coffee-mode
  (package
    (name "emacs-coffee-mode")
    (version "20200315.1133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/defunkt/coffee-mode.git")
               (commit
                 "35a41c7d8233eac0b267d9593e67fb8b6235e134")))
        (sha256
          (base32
            "11jppi95j9229qmj1747kfa602640kjz1xf5254ph3nhljxb0nsv"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/defunkt/coffee-mode")
    (synopsis "Major mode for CoffeeScript code")
    (description
      "Documentation at https://melpa.org/#/coffee-mode")
    (license #f)))

(define-public emacs-coin-ticker
  (package
    (name "emacs-coin-ticker")
    (version "20170611.727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eklitzke/coin-ticker-mode.git")
               (commit
                 "9efab90fe4e6f29464af14e0d8fd1e20c0147b80")))
        (sha256
          (base32
            "0xnrh6v4s2s3fgvw0v9fl48dlk4r2p6axp7xf41gzb1ai81yczhv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/eklitzke/coin-ticker-mode")
    (synopsis "Show a cryptocurrency price ticker")
    (description
      "Documentation at https://melpa.org/#/coin-ticker")
    (license #f)))

(define-public emacs-colonoscopy-theme
  (package
    (name "emacs-colonoscopy-theme")
    (version "20170808.1309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-colonoscopy-theme.git")
               (commit
                 "64bbb322b13dae91ce9f1e3581f836f94f800ead")))
        (sha256
          (base32
            "1r0is6zjkzikm565fvmj0gx8ms5ig9l5xihnka4fig7jy6ak33z5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Colonoscopy (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/colonoscopy-theme")
    (license #f)))

(define-public emacs-color-identifiers-mode
  (package
    (name "emacs-color-identifiers-mode")
    (version "20230405.527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ankurdave/color-identifiers-mode.git")
               (commit
                 "a26d00d898e0a3295cb7da9323046397223ea1fe")))
        (sha256
          (base32
            "1kky827f922ziiwasrfnv97vqdf62fp9yml36x1fjsm2h6qw0c8v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/ankurdave/color-identifiers-mode")
    (synopsis
      "Color identifiers based on their names")
    (description
      "Documentation at https://melpa.org/#/color-identifiers-mode")
    (license #f)))

(define-public emacs-color-moccur
  (package
    (name "emacs-color-moccur")
    (version "20141223.35")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/color-moccur.el.git")
               (commit
                 "4f1c59ffd1ccc2ab1a171cd6b721e8cb9e002fb7")))
        (sha256
          (base32
            "1p1f30qz4nd5a8ym2iwrgp6vhws0dls2qlc0apblj9nj3b0ziv0x"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.bookshelf.jp/elc/color-moccur.el")
    (synopsis "multi-buffer occur (grep) mode")
    (description
      "Documentation at https://melpa.org/#/color-moccur")
    (license #f)))

(define-public emacs-color-theme
  (package
    (name "emacs-color-theme")
    (version "20190220.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/color-theme.git")
               (commit
                 "3a2f6b615f5e2401e30d93a3e0adc210bbb4b7aa")))
        (sha256
          (base32
            "09imx996afh3j207163kg8sc92hd7wljkpban1pnn6f67bgyrvlv"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "themes")))
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki.pl?ColorTheme")
    (synopsis
      "An OBSOLETE color-theme implementation")
    (description
      "Documentation at https://melpa.org/#/color-theme")
    (license #f)))

(define-public emacs-color-theme-approximate
  (package
    (name "emacs-color-theme-approximate")
    (version "20140228.436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tungd/color-theme-approximate.git")
               (commit
                 "f54301ca39bc5d2ffb000f233f8114184a3e7d71")))
        (sha256
          (base32
            "1b0ymwszqsjcihcbfp7s4fjam983ixh3yb7sdc0rmqlyric1zwxq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Makes Emacs theme works on terminal transparently")
    (description
      "Documentation at https://melpa.org/#/color-theme-approximate")
    (license #f)))

(define-public emacs-color-theme-buffer-local
  (package
    (name "emacs-color-theme-buffer-local")
    (version "20170126.601")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vic/color-theme-buffer-local.git")
               (commit
                 "e606dec66f16a06140b9aad625a4fd52bca4f936")))
        (sha256
          (base32
            "0c04fy3hc8wc0aabilqx9mcipmd41rmshqjxc3z8m1w0bm4288g1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-color-theme))
    (arguments
      '(#:files ("color-theme-buffer-local.el")))
    (home-page
      "http://github.com/vic/color-theme-buffer-local")
    (synopsis "Install color-themes by buffer.")
    (description
      "Documentation at https://melpa.org/#/color-theme-buffer-local")
    (license #f)))

(define-public emacs-color-theme-modern
  (package
    (name "emacs-color-theme-modern")
    (version "20220506.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/replace-colorthemes.git")
               (commit
                 "74ad69bbca6fcfff3c0960d888c7c9c1f9f3e2e8")))
        (sha256
          (base32
            "13ff4s372wsl5x13vh4vywhi6qcc54gybhp6rxl0r1l4wxidanwn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-jp/replace-colorthemes")
    (synopsis
      "Reimplement colortheme with Emacs 24 theme framework.")
    (description
      "Documentation at https://melpa.org/#/color-theme-modern")
    (license #f)))

(define-public emacs-color-theme-sanityinc-solarized
  (package
    (name "emacs-color-theme-sanityinc-solarized")
    (version "20220917.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/color-theme-sanityinc-solarized.git")
               (commit
                 "b8f4a65bd53b97b56b93fff2fb14f71b2831aa6f")))
        (sha256
          (base32
            "10vfbl9dry03dw264w7b4grmzcv78x3p7r86bsyhyl74hwwvx1hp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/color-theme-sanityinc-solarized")
    (synopsis
      "A version of Ethan Schoonover's Solarized themes")
    (description
      "Documentation at https://melpa.org/#/color-theme-sanityinc-solarized")
    (license #f)))

(define-public emacs-color-theme-sanityinc-tomorrow
  (package
    (name "emacs-color-theme-sanityinc-tomorrow")
    (version "20230806.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/color-theme-sanityinc-tomorrow.git")
               (commit
                 "d34e8db507ee0c7b465ff18a8f220c33ed77cd79")))
        (sha256
          (base32
            "1mfildi7rav2j42avii7z4gp4ghl04cqv8wp1vyxzl8vkyj60nkb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/color-theme-sanityinc-tomorrow")
    (synopsis
      "A version of Chris Kempson's \"tomorrow\" themes")
    (description
      "Documentation at https://melpa.org/#/color-theme-sanityinc-tomorrow")
    (license #f)))

(define-public emacs-color-theme-x
  (package
    (name "emacs-color-theme-x")
    (version "20201204.2245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajsquared/color-theme-x.git")
               (commit
                 "ec853dd931d625e07116fbc91d8829bd15f90889")))
        (sha256
          (base32
            "08b9k49adgyd0vzbwglgnc6vn741dpbxbd6ly13m5dh5h4w9zknf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ajsquared/color-theme-x")
    (synopsis
      "convert color themes to X11 resource settings")
    (description
      "Documentation at https://melpa.org/#/color-theme-x")
    (license #f)))

(define-public emacs-colorless-themes
  (package
    (name "emacs-colorless-themes")
    (version "20210102.1035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("colorless-themes.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A macro to generate mostly colorless themes")
    (description
      "Documentation at https://melpa.org/#/colorless-themes")
    (license #f)))

(define-public emacs-colormaps
  (package
    (name "emacs-colormaps")
    (version "20171008.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lepisma/colormaps.el.git")
               (commit
                 "19fbb64a6288d505b9cf45c9b5a3eed0bfb135e2")))
        (sha256
          (base32
            "0kbhy8bpxqdr1kjczz2vm7chfpjprx2frpbh1gh9i1gwwx5k4myp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lepisma/colormaps.el")
    (synopsis "Hex colormaps")
    (description
      "Documentation at https://melpa.org/#/colormaps")
    (license #f)))

(define-public emacs-column-enforce-mode
  (package
    (name "emacs-column-enforce-mode")
    (version "20200605.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/column-enforce-mode.git")
               (commit
                 "14a7622f2268890e33536ccd29510024d51ee96f")))
        (sha256
          (base32
            "1vxra5vk78yns2sw89m41bggczqg1akq6xvzfs9kylhkg5yz3g7g"))))
    (build-system melpa-build-system)
    (home-page
      "www.github.com/jordonbiondo/column-enforce-mode")
    (synopsis
      "Highlight text that extends beyond a  column")
    (description
      "Documentation at https://melpa.org/#/column-enforce-mode")
    (license #f)))

(define-public emacs-com-css-sort
  (package
    (name "emacs-com-css-sort")
    (version "20220704.647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/com-css-sort.git")
               (commit
                 "bda336544e61b45e24927d8850fdb28d4b7c267e")))
        (sha256
          (base32
            "1w4chg2d152sr82mqkxiibf06qh1fbxylzd5asjx9712gy33fy69"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/jcs-elpa/com-css-sort")
    (synopsis
      "Common way of sorting the CSS attributes")
    (description
      "Documentation at https://melpa.org/#/com-css-sort")
    (license #f)))

(define-public emacs-comb
  (package
    (name "emacs-comb")
    (version "20201010.1147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyrus-and/comb.git")
               (commit
                 "31f3e94afb2a7f7d18d30c2468a0c683700f7a66")))
        (sha256
          (base32
            "00xwlx9w76g557qhkgifdbxx3qr2i3l1vqldyhwa4qny3qmy6h2w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cyrus-and/comb")
    (synopsis
      "Interactive code auditing and grep tool")
    (description
      "Documentation at https://melpa.org/#/comb")
    (license #f)))

(define-public emacs-comby
  (package
    (name "emacs-comby")
    (version "20200629.140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/comby.el.git")
               (commit
                 "928b8b8959a2556aba5526f2a25801341eb59dc3")))
        (sha256
          (base32
            "1f0155fyvh1m20ahl6wqask4qx6jp3lfwxj894cda9j4y8gnr5iq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/s-kostyaev/comby.el")
    (synopsis "Emacs comby integration")
    (description
      "Documentation at https://melpa.org/#/comby")
    (license #f)))

(define-public emacs-comint-hyperlink
  (package
    (name "emacs-comint-hyperlink")
    (version "20211026.100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matthewbauer/comint-hyperlink.git")
               (commit
                 "905f2db1f95950899301b9f71faed9e9362cf5dc")))
        (sha256
          (base32
            "1d5a0c33zdziz1yw2nv65qyi122zz7b5y9vgsx6kfz7xj32sc8s5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/matthewbauer/comint-hyperlink")
    (synopsis
      "Create hyperlinks in comint for SGR URL control sequences")
    (description
      "Documentation at https://melpa.org/#/comint-hyperlink")
    (license #f)))

(define-public emacs-comint-intercept
  (package
    (name "emacs-comint-intercept")
    (version "20230930.956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hying-caritas/comint-intercept.git")
               (commit
                 "79cfa3f15558f99285734ff36e80e3c4628565ae")))
        (sha256
          (base32
            "1v34m2f0ni8zvvbqnv0i8daa05rg22wb11468xyq3c0h7pd0k7xv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hying-caritas/comint-intercept")
    (synopsis "Intercept input in comint-mode")
    (description
      "Documentation at https://melpa.org/#/comint-intercept")
    (license #f)))

(define-public emacs-command-log-mode
  (package
    (name "emacs-command-log-mode")
    (version "20160413.447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/command-log-mode.git")
               (commit
                 "af600e6b4129c8115f464af576505ea8e789db27")))
        (sha256
          (base32
            "06hll2frlx4sg9fj13a7ipq9y24isbjkjm6034xswhak40m7g1ii"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lewang/command-log-mode")
    (synopsis "log keyboard commands to buffer")
    (description
      "Documentation at https://melpa.org/#/command-log-mode")
    (license #f)))

(define-public emacs-command-queue
  (package
    (name "emacs-command-queue")
    (version "20160328.1725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/command-queue.git")
               (commit
                 "f327c6f852592229a755ec6de0c62c6aeafd6659")))
        (sha256
          (base32
            "0216hzdl4h1jssw5g2y95z4yx7abqsaxpk1s78r35w5cnx7kplrc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Yuki-Inoue/command-queue")
    (synopsis "shell command queue")
    (description
      "Documentation at https://melpa.org/#/command-queue")
    (license #f)))

(define-public emacs-commander
  (package
    (name "emacs-commander")
    (version "20140120.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/commander.el.git")
               (commit
                 "9ba1456b0a389a2f7b42b6f42a4208ddd87ce609")))
        (sha256
          (base32
            "1kj7w8akrybr1y30lbhax8dnk5m4fg365ifxlyw766v69g5x7zd2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page
      "http://github.com/rejeep/commander.el")
    (synopsis "Emacs command line parser")
    (description
      "Documentation at https://melpa.org/#/commander")
    (license #f)))

(define-public emacs-comment-dwim-2
  (package
    (name "emacs-comment-dwim-2")
    (version "20230730.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remyferre/comment-dwim-2.git")
               (commit
                 "69415caa1a381063d3e794912dfe88f672854ab0")))
        (sha256
          (base32
            "05ypgsdrgqj8105bvd17jn7w633y3ysbr5sgz33m7kj1ca7sl9ga"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remyferre/comment-dwim-2")
    (synopsis
      "An all-in-one comment command to rule them all")
    (description
      "Documentation at https://melpa.org/#/comment-dwim-2")
    (license #f)))

(define-public emacs-comment-or-uncomment-sexp
  (package
    (name "emacs-comment-or-uncomment-sexp")
    (version "20190225.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/comment-or-uncomment-sexp.git")
               (commit
                 "bec730d3fc1e6c17ff1339eb134af16c034a4d95")))
        (sha256
          (base32
            "1jhyr854qraza75hjza8fjz2s06iydmdsa61vf5bf2kj5g1bfqkj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/comment-or-uncomment-sexp")
    (synopsis
      "Command for commenting the sexp under point.")
    (description
      "Documentation at https://melpa.org/#/comment-or-uncomment-sexp")
    (license #f)))

(define-public emacs-comment-tags
  (package
    (name "emacs-comment-tags")
    (version "20170910.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vincekd/comment-tags.git")
               (commit
                 "7d914097f0a03484af71e621db533737fc692f58")))
        (sha256
          (base32
            "0s86a7078arck9z4gzkp2hnxyklprl0zh5hsw7nkyyscjydly80i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vincekd/comment-tags")
    (synopsis
      "Highlight & navigate comment tags like 'TODO'.")
    (description
      "Documentation at https://melpa.org/#/comment-tags")
    (license #f)))

(define-public emacs-commentary-theme
  (package
    (name "emacs-commentary-theme")
    (version "20210714.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pzel/commentary-theme.git")
               (commit
                 "a73e1256f667065933e96bd6032c463cb115201d")))
        (sha256
          (base32
            "0dwd42afh4brcwz1jahxmn8l3aj6dmplidqv4x55z3di1spdjs98"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pzel/commentary-theme")
    (synopsis
      "A minimal theme with contrasting comments")
    (description
      "Documentation at https://melpa.org/#/commentary-theme")
    (license #f)))

(define-public emacs-commenter
  (package
    (name "emacs-commenter")
    (version "20160219.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/commenter.git")
               (commit
                 "6d1885419434ba779270c6fda0e30d390bb074bd")))
        (sha256
          (base32
            "1jwd3whag39qhzhbsfivzdlcr6vj37dv5ychkhmilw8v6dfdnpdb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yuutayamada/commenter")
    (synopsis "multiline-comment support package")
    (description
      "Documentation at https://melpa.org/#/commenter")
    (license #f)))

(define-public emacs-commify
  (package
    (name "emacs-commify")
    (version "20230616.1042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ddoherty03/commify.git")
               (commit
                 "35e2438eb7feeb28273c4920376fcf296cc83283")))
        (sha256
          (base32
            "117jkip4waw1vb4rqdg94wncqmza5p6b2x102xkcqhn4nf7f8vw7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ddoherty03/commify")
    (synopsis "Toggle grouping commas in numbers")
    (description
      "Documentation at https://melpa.org/#/commify")
    (license #f)))

(define-public emacs-common-lisp-snippets
  (package
    (name "emacs-common-lisp-snippets")
    (version "20180226.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/common-lisp-snippets.git")
               (commit
                 "c82ebf18f4ad49f390dd96ffcc59f8683c1a868b")))
        (sha256
          (base32
            "0xz4jv0l7vgq7rivx8c1m3hahyyk7cj9cadrq3rg9rybhzski57d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "https://github.com/mrkkrp/common-lisp-snippets")
    (synopsis "Yasnippets for Common Lisp")
    (description
      "Documentation at https://melpa.org/#/common-lisp-snippets")
    (license #f)))

(define-public emacs-company
  (package
    (name "emacs-company")
    (version "20231110.6")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-mode.git")
               (commit
                 "07d1c41f83d5ad5f6263e726283a05ad12cd37a5")))
        (sha256
          (base32
            "0f2hnypzdggfw8dxyysf05n51za86qs1z6b8syrdnkyxcm41j793"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "icons"
          ("images/small" "doc/images/small/*.png"))))
    (home-page "http://company-mode.github.io/")
    (synopsis "Modular text completion framework")
    (description
      "Documentation at https://melpa.org/#/company")
    (license #f)))

(define-public emacs-company-anaconda
  (package
    (name "emacs-company-anaconda")
    (version "20230821.2126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/company-anaconda.git")
               (commit
                 "e07b4c9b3639dae05b15f5509ba9156849dbd03c")))
        (sha256
          (base32
            "1yc89v54r4g9b39h2apc9v83khykj2mbw83pb87km9j7jxij1c8l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-anaconda-mode
            emacs-dash
            emacs-s))
    (home-page
      "https://github.com/proofit404/anaconda-mode")
    (synopsis "Anaconda backend for company-mode")
    (description
      "Documentation at https://melpa.org/#/company-anaconda")
    (license #f)))

(define-public emacs-company-ansible
  (package
    (name "emacs-company-ansible")
    (version "20200306.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krzysztof-magosa/company-ansible.git")
               (commit
                 "79dd421b161efa49fbdffad57fa40edb41f484a3")))
        (sha256
          (base32
            "0b05n6m47vyhirxfqzapzl4gf179aks1296qsw1sw8v84kb5kl0x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/krzysztof-magosa/company-ansible")
    (synopsis "A company back-end for ansible")
    (description
      "Documentation at https://melpa.org/#/company-ansible")
    (license #f)))

(define-public emacs-company-arduino
  (package
    (name "emacs-company-arduino")
    (version "20160306.1739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/company-arduino.git")
               (commit
                 "d7e369702b8eee63e6dfdeba645ce28b6dc66fb1")))
        (sha256
          (base32
            "06v7y7gxlxrxdaqy8c93niy1di80r738cq7rkghnhqi174pwl1wv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-irony
            emacs-company-irony
            emacs-company-c-headers
            emacs-arduino-mode))
    (home-page
      "https://github.com/yuutayamada/company-arduino")
    (synopsis "company-mode for Arduino")
    (description
      "Documentation at https://melpa.org/#/company-arduino")
    (license #f)))

(define-public emacs-company-auctex
  (package
    (name "emacs-company-auctex")
    (version "20200529.1835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexeyr/company-auctex.git")
               (commit
                 "9400a2ec7459dde8cbf1a5d50dfee4e300ed7e18")))
        (sha256
          (base32
            "0x8qc63zn126hspcblwlihxfzs8kvcjb6cpj28ahsb0117j2i789"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet emacs-company emacs-auctex))
    (home-page
      "https://github.com/alexeyr/company-auctex/")
    (synopsis
      "Company-mode auto-completion for AUCTeX")
    (description
      "Documentation at https://melpa.org/#/company-auctex")
    (license #f)))

(define-public emacs-company-axiom
  (package
    (name "emacs-company-axiom")
    (version "20220612.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pdo/axiom-environment")
               (commit
                 "01d88daa0c864af9918db5a147fbb5e435dec199")))
        (sha256
          (base32
            "03cxb6zdqmzgjp8r6hcirf8xl772j7xqk2nw17gjkn4xqbwfyn62"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-axiom-environment))
    (arguments '(#:files ("company-axiom.el")))
    (home-page "unspecified")
    (synopsis
      "A company-mode backend for the axiom-environment system")
    (description
      "Documentation at https://melpa.org/#/company-axiom")
    (license #f)))

(define-public emacs-company-bibtex
  (package
    (name "emacs-company-bibtex")
    (version "20171105.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gbgar/company-bibtex.git")
               (commit
                 "da67faf3a6faba8e7f1b222dedfc5521b02c7655")))
        (sha256
          (base32
            "0p1kwcpjd2rya6dlp1w48pxd5x0qxyyamrfzwha5wbd5y7m2lh62"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-parsebib))
    (home-page
      "https://github.com/gbgar/company-bibtex")
    (synopsis "Company completion for bibtex keys")
    (description
      "Documentation at https://melpa.org/#/company-bibtex")
    (license #f)))

(define-public emacs-company-box
  (package
    (name "emacs-company-box")
    (version "20230312.1028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiencs/company-box.git")
               (commit
                 "b6f53e26adf948aca55c3ff6c22c21a6a6614253")))
        (sha256
          (base32
            "0shzdvzrihw8rqgliq6aj1d856m30nj4skzldmw1caqmghfqwv7m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-company emacs-frame-local))
    (arguments '(#:files (:defaults "images")))
    (home-page
      "https://github.com/sebastiencs/company-box")
    (synopsis "Company front-end with icons")
    (description
      "Documentation at https://melpa.org/#/company-box")
    (license #f)))

(define-public emacs-company-c-headers
  (package
    (name "emacs-company-c-headers")
    (version "20190825.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/randomphrase/company-c-headers.git")
               (commit
                 "9d384571b1190e99d0a789e5296176d69a3d0771")))
        (sha256
          (base32
            "149sbw2pmfwn52jrhavrnc16rkjz09g5kl9acl973k764mf215l0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page "unspecified")
    (synopsis
      "Company mode backend for C/C++ header files")
    (description
      "Documentation at https://melpa.org/#/company-c-headers")
    (license #f)))

(define-public emacs-company-cabal
  (package
    (name "emacs-company-cabal")
    (version "20170917.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iquiw/company-cabal.git")
               (commit
                 "62112a7259e24bd6c08885629a185afe512b7d3d")))
        (sha256
          (base32
            "1gf45xwjzdm8i4q6c6khk4dbg1mmp2r0awz2sjr4dcr2dbd1n7mg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/iquiw/company-cabal")
    (synopsis "company-mode cabal backend")
    (description
      "Documentation at https://melpa.org/#/company-cabal")
    (license #f)))

(define-public emacs-company-coq
  (package
    (name "emacs-company-coq")
    (version "20221130.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/company-coq.git")
               (commit
                 "5affe7a96a25df9101f9e44bac8a828d8292c2fa")))
        (sha256
          (base32
            "1i18w7byz0x9l7cka6cs7bk0d3wcy7r0gw34zz45np4r84arwsjd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-yasnippet
            emacs-company
            emacs-company-math))
    (arguments '(#:files (:defaults "refman")))
    (home-page
      "https://github.com/cpitclaudel/company-coq")
    (synopsis
      "A collection of extensions for Proof General's Coq mode")
    (description
      "Documentation at https://melpa.org/#/company-coq")
    (license #f)))

(define-public emacs-company-ctags
  (package
    (name "emacs-company-ctags")
    (version "20211211.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/company-ctags.git")
               (commit
                 "313508ba5d4f1e4b5d5d554faaa74076201c3248")))
        (sha256
          (base32
            "0hf7lq6rcs6xhmgpc8bwk115rykyfvakcjqpanlsh5m3fdswjq03"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/redguardtoo/company-ctags")
    (synopsis
      "Fastest company-mode completion backend for ctags")
    (description
      "Documentation at https://melpa.org/#/company-ctags")
    (license #f)))

(define-public emacs-company-dcd
  (package
    (name "emacs-company-dcd")
    (version "20210307.649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tsukimizake/company-dcd.git")
               (commit
                 "858500115d4f0285f963698ede9492f409a90e52")))
        (sha256
          (base32
            "1b7xcqx297dc5z1rc96gd7y9cx8a7yhgmqh5cpnwfb45hm5s71hs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-flycheck-dmd-dub
            emacs-yasnippet
            emacs-popwin
            emacs-ivy))
    (home-page
      "http://github.com/tsukimizake/company-dcd")
    (synopsis "Company backend for Dlang using DCD.")
    (description
      "Documentation at https://melpa.org/#/company-dcd")
    (license #f)))

(define-public emacs-company-dict
  (package
    (name "emacs-company-dict")
    (version "20190302.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-company-dict.git")
               (commit
                 "cd7b8394f6014c57897f65d335d6b2bd65dab1f4")))
        (sha256
          (base32
            "11whnjmy5dyg4wkwabpip8hqsmqys193m7aqbd7jl4hmq24hrwsw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-parent-mode))
    (home-page
      "https://github.com/hlissner/emacs-company-dict")
    (synopsis
      "A backend that emulates ac-source-dictionary")
    (description
      "Documentation at https://melpa.org/#/company-dict")
    (license #f)))

(define-public emacs-company-distel
  (package
    (name "emacs-company-distel")
    (version "20180827.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/distel-completion.git")
               (commit
                 "acc4c0a5521904203d797fe96b08e5fae4233c7e")))
        (sha256
          (base32
            "0yvp3dwa9mwfyrqla27ycwyjad4bp1267bxv0chxcr4528hnygl3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-distel-completion-lib))
    (arguments '(#:files ("company-distel.el")))
    (home-page
      "github.com/sebastiw/distel-completion")
    (synopsis
      "Erlang/distel completion backend for company-mode")
    (description
      "Documentation at https://melpa.org/#/company-distel")
    (license #f)))

(define-public emacs-company-eask
  (package
    (name "emacs-company-eask")
    (version "20231008.1908")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eask/company-eask.git")
               (commit
                 "2e58ca50500ab50e76a51f8a2db8a73af39c333c")))
        (sha256
          (base32
            "12fv343vm3ri08pbwbak8n77plhjl9p0y0iwrpw1z66x26k4c11y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-eask))
    (home-page
      "https://github.com/emacs-eask/company-eask")
    (synopsis "Company backend for Eask-file")
    (description
      "Documentation at https://melpa.org/#/company-eask")
    (license #f)))

(define-public emacs-company-emacs-eclim
  (package
    (name "emacs-company-emacs-eclim")
    (version "20180911.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eclim/emacs-eclim.git")
               (commit
                 "222ddd48fcf0ee01592dec77c58e0cf3f2ea1100")))
        (sha256
          (base32
            "0jdddf8krvg379wlay1xs27qlxpi87nz6v2i526pk59mmg8jrnvc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eclim emacs-company))
    (arguments '(#:files ("company-emacs-eclim.el")))
    (home-page "unspecified")
    (synopsis "Eclim company backend")
    (description
      "Documentation at https://melpa.org/#/company-emacs-eclim")
    (license #f)))

(define-public emacs-company-emoji
  (package
    (name "emacs-company-emoji")
    (version "20230903.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dunn/company-emoji.git")
               (commit
                 "9c372be9406fba61d71aa0ed2d41adafae5a866e")))
        (sha256
          (base32
            "0j35z7hjcg3dkwgd7mdx1yaxcmxkn00h91y9kl8qdci7m4lja460"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/dunn/company-emoji.git")
    (synopsis "company-mode backend for emoji")
    (description
      "Documentation at https://melpa.org/#/company-emoji")
    (license #f)))

(define-public emacs-company-emojify
  (package
    (name "emacs-company-emojify")
    (version "20221231.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/company-emojify.git")
               (commit
                 "89652ee1a5488fbbe7b73c03ac316b895bb3fc19")))
        (sha256
          (base32
            "1kfy1jqsh90393yj2wvp2ccr0mvr7idq39033058i90f7md7gsmi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-emojify emacs-ht))
    (home-page
      "https://github.com/jcs-elpa/company-emojify")
    (synopsis "Company completion for Emojify")
    (description
      "Documentation at https://melpa.org/#/company-emojify")
    (license #f)))

(define-public emacs-company-erlang
  (package
    (name "emacs-company-erlang")
    (version "20170123.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/company-erlang.git")
               (commit
                 "bc0524a16f17b66c7397690e4ca0e004f09ea6c5")))
        (sha256
          (base32
            "04wm3i65fpzln7sdcny88hfjfm0n7wy44ffsr3697x4l95d0bnyh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy-erlang-complete emacs-company))
    (arguments '(#:files (:defaults)))
    (home-page "unspecified")
    (synopsis
      "company backend based on ivy-erlang-complete")
    (description
      "Documentation at https://melpa.org/#/company-erlang")
    (license #f)))

(define-public emacs-company-flow
  (package
    (name "emacs-company-flow")
    (version "20180225.2159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/company-flow.git")
               (commit
                 "76ef585c70d2a3206c2eadf24ba61e59124c3a16")))
        (sha256
          (base32
            "0zs9cblnbkxa0dxw4lyllmybqizxcdx96gv8jlhx20nrjpi78piw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash))
    (home-page
      "https://github.com/aaronjensen/company-flow")
    (synopsis "Flow backend for company-mode")
    (description
      "Documentation at https://melpa.org/#/company-flow")
    (license #f)))

(define-public emacs-company-flx
  (package
    (name "emacs-company-flx")
    (version "20180103.518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/company-flx.git")
               (commit
                 "16ca0d2f84e8e768bf2db8c5cfe421230a00bded")))
        (sha256
          (base32
            "09zaaqi8587n1fv5pxnrdmdll319s8f66xkc41p51gcs2p7qa5w1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-flx))
    (home-page
      "https://github.com/PythonNut/company-flx")
    (synopsis "flx based fuzzy matching for company")
    (description
      "Documentation at https://melpa.org/#/company-flx")
    (license #f)))

(define-public emacs-company-fuzzy
  (package
    (name "emacs-company-fuzzy")
    (version "20230531.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/company-fuzzy.git")
               (commit
                 "cb0628aac01077acab80e8241f0d4951bb32d385")))
        (sha256
          (base32
            "1jq0v9dph0jkh8bgqw0jr6l6hz8larfci2midr6phzr7zpqdifq0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-s emacs-ht))
    (home-page
      "https://github.com/jcs-elpa/company-fuzzy")
    (synopsis "Fuzzy matching for `company-mode'")
    (description
      "Documentation at https://melpa.org/#/company-fuzzy")
    (license #f)))

(define-public emacs-company-ghci
  (package
    (name "emacs-company-ghci")
    (version "20190707.311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/horellana/company-ghci.git")
               (commit
                 "a1d25652583ab4666c5a78cac18cd8039776b50d")))
        (sha256
          (base32
            "0sbkmsrvjikf6y53nsd5n0zhdp4hms7cw88w9qln136xjp5vgxqj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "company backend which uses the current ghci process.")
    (description
      "Documentation at https://melpa.org/#/company-ghci")
    (license #f)))

(define-public emacs-company-glsl
  (package
    (name "emacs-company-glsl")
    (version "20210109.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/company-glsl.git")
               (commit
                 "3a40501ba831a30a7fd3e8529b20d1305d0454aa")))
        (sha256
          (base32
            "0khpvi23jbgs2rbwjawl56a219z8r3i44s4zq10an91r0q8d8n4l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-glsl-mode))
    (home-page
      "https://github.com/guidoschmidt/company-glsl")
    (synopsis "Support glsl in company-mode")
    (description
      "Documentation at https://melpa.org/#/company-glsl")
    (license #f)))

(define-public emacs-company-go
  (package
    (name "emacs-company-go")
    (version "20170825.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/company-go.git")
               (commit
                 "31948b463f2fc18f8801e5a8fe511fef300eb3dd")))
        (sha256
          (base32
            "0jd7swa2s9a6lci81hfhfnnkxbmca2kh07hsj7c5lv2r9adxrwxw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-go-mode))
    (home-page "unspecified")
    (synopsis
      "company-mode backend for Go (using gocode)")
    (description
      "Documentation at https://melpa.org/#/company-go")
    (license #f)))

(define-public emacs-company-inf-ruby
  (package
    (name "emacs-company-inf-ruby")
    (version "20140805.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-inf-ruby.git")
               (commit
                 "fe3e4863bc971fbb81edad447efad5795ead1b17")))
        (sha256
          (base32
            "0fnv4rvvs9rqzrs86g23jcrpg0rcgk25299hm6jm08ia0kjjby1m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-inf-ruby))
    (home-page
      "https://github.com/company-mode/company-inf-ruby")
    (synopsis
      "company-mode completion back-end for inf-ruby")
    (description
      "Documentation at https://melpa.org/#/company-inf-ruby")
    (license #f)))

(define-public emacs-company-ipa
  (package
    (name "emacs-company-ipa")
    (version "20210307.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mguzmann89/company-ipa.git")
               (commit
                 "8634021cac885f53f3274ef6dcce7eab19321046")))
        (sha256
          (base32
            "0629my156zxjb3h636iirdd2rr58z3vsdinhq0w0y6f3544i05hx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/mguzmann/company-ipa")
    (synopsis "IPA backend for company")
    (description
      "Documentation at https://melpa.org/#/company-ipa")
    (license #f)))

(define-public emacs-company-irony
  (package
    (name "emacs-company-irony")
    (version "20190124.2346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sarcasm/company-irony.git")
               (commit
                 "b44711dfce445610c1ffaec4951c6ff3882b216a")))
        (sha256
          (base32
            "0s8v6kfgngpz6ic0g0l6xi6j9692xpmcamidmbk3l2blb172mggr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-irony))
    (home-page
      "https://github.com/Sarcasm/company-irony/")
    (synopsis
      "company-mode completion back-end for irony-mode")
    (description
      "Documentation at https://melpa.org/#/company-irony")
    (license #f)))

(define-public emacs-company-irony-c-headers
  (package
    (name "emacs-company-irony-c-headers")
    (version "20151018.909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hotpxl/company-irony-c-headers.git")
               (commit
                 "72c386aeb079fb261d9ec02e39211272f76bbd97")))
        (sha256
          (base32
            "1f462v8xq2hdsr4ks4i79icpfz6fjpb4q7khnx6si55agxj3rvaq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-irony))
    (home-page
      "https://github.com/hotpxl/company-irony-c-headers")
    (synopsis
      "Company mode backend for C/C++ header files with Irony")
    (description
      "Documentation at https://melpa.org/#/company-irony-c-headers")
    (license #f)))

(define-public emacs-company-jedi
  (package
    (name "emacs-company-jedi")
    (version "20200324.25")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/company-jedi.git")
               (commit
                 "ea22b1f7a980c49aaf2c5e840e4536577f6602f6")))
        (sha256
          (base32
            "08h6s06fkbyif9714p9b830frbhri5zfn3822nmp6ydl7jb0b1pw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-jedi-core))
    (home-page
      "https://github.com/emacsorphanage/company-jedi")
    (synopsis
      "Company-mode completion back-end for Python JEDI")
    (description
      "Documentation at https://melpa.org/#/company-jedi")
    (license #f)))

(define-public emacs-company-lean
  (package
    (name "emacs-company-lean")
    (version "20210305.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "4a90f2ae6e33c162a3dd6f624fb080c2ed8e8494")))
        (sha256
          (base32
            "1zikz4qaxabs3j86gljpp2qbhbzxsjzz544k9vsngibd468dszlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-company
            emacs-lean-mode))
    (arguments '(#:files ("company-lean.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "A company backend for lean-mode")
    (description
      "Documentation at https://melpa.org/#/company-lean")
    (license #f)))

(define-public emacs-company-ledger
  (package
    (name "emacs-company-ledger")
    (version "20210910.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/debanjum/company-ledger.git")
               (commit
                 "c6911b7e39b29c0d5f2541392ff485b0f53fd366")))
        (sha256
          (base32
            "08g4f8w9lhfypy4m3vcfg8d8gqn7w2g8qjksl7bzcnwg2d0yqld8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/debanjum/company-ledger")
    (synopsis
      "Fuzzy auto-completion for Ledger & friends")
    (description
      "Documentation at https://melpa.org/#/company-ledger")
    (license #f)))

(define-public emacs-company-lua
  (package
    (name "emacs-company-lua")
    (version "20171108.2306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/company-lua.git")
               (commit
                 "29f6819de4d691e5fd0b62893a9f4fbc1c6fcb52")))
        (sha256
          (base32
            "0ny2dcc7c585p7v3j6q0rpkbj1qmf2ismy8a5020jpr585xvz0hh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-s
            emacs-f
            emacs-lua-mode))
    (arguments '(#:files (:defaults "lua")))
    (home-page "unspecified")
    (synopsis "Company backend for Lua")
    (description
      "Documentation at https://melpa.org/#/company-lua")
    (license #f)))

(define-public emacs-company-manually
  (package
    (name "emacs-company-manually")
    (version "20200721.1903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yanghaoxie/company-manually.git")
               (commit
                 "44c7a655e5f2a462835a96d1f0ed2ce434848416")))
        (sha256
          (base32
            "007zyvr5mw16j7gxxx8bm0jpy8hyph9xrmxsi1dy2pshb2fnpq95"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-ivy))
    (home-page
      "https://github.com/yanghaoxie/company-manually")
    (synopsis
      "A company backend that lets you manually build candidates")
    (description
      "Documentation at https://melpa.org/#/company-manually")
    (license #f)))

(define-public emacs-company-math
  (package
    (name "emacs-company-math")
    (version "20221227.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/company-math.git")
               (commit
                 "3eb006874e309ff4076d947fcbd61bb6806aa508")))
        (sha256
          (base32
            "1pj10i7ml5d2spcmf8035ngcq5zc6rs3lqx09d0qj6bsghglr6j3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-math-symbol-lists))
    (home-page
      "https://github.com/vspinu/company-math")
    (synopsis
      "Completion backends for unicode math symbols and latex tags")
    (description
      "Documentation at https://melpa.org/#/company-math")
    (license #f)))

(define-public emacs-company-maxima
  (package
    (name "emacs-company-maxima")
    (version "20230529.1026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/maxima.git")
               (commit
                 "2de798f6644753772553cd0420d3c419ed50dd0b")))
        (sha256
          (base32
            "1gjdmdg496lkgm7xkgvfl4b4xir91kzn7sizyrgwdj845i9lfjmp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-maxima emacs-company))
    (arguments '(#:files ("company-maxima.el")))
    (home-page "https://gitlab.com/sasanidas/maxima")
    (synopsis "Maxima company integration")
    (description
      "Documentation at https://melpa.org/#/company-maxima")
    (license #f)))

(define-public emacs-company-nand2tetris
  (package
    (name "emacs-company-nand2tetris")
    (version "20171201.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/nand2tetris.el.git")
               (commit
                 "33acee34d24b1c6a87db833b7d23449cf858f64f")))
        (sha256
          (base32
            "0sfa674g1qm280s0pc3n6qiiphj5i9ibknckx5capkrkxb5cwpkw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nand2tetris emacs-company))
    (arguments '(#:files ("company-nand2tetris.el")))
    (home-page
      "http://www.github.com/CestDiego/nand2tetris.el/")
    (synopsis
      "Company backend for nand2tetris major mode")
    (description
      "Documentation at https://melpa.org/#/company-nand2tetris")
    (license #f)))

(define-public emacs-company-native-complete
  (package
    (name "emacs-company-native-complete")
    (version "20220103.1622")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/emacs-native-shell-complete.git")
               (commit
                 "20e1dceb459856c8c4f903e6d8562991069bb8c1")))
        (sha256
          (base32
            "11m3y6kbjm0nqmdqbcv4xrchcabh4x1w4gy1p8gp36k600s1h7zj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-native-complete))
    (arguments
      '(#:files ("company-native-complete.el")))
    (home-page
      "https://github.com/CeleritasCelery/emacs-native-shell-complete")
    (synopsis
      "Company completion using native-complete")
    (description
      "Documentation at https://melpa.org/#/company-native-complete")
    (license #f)))

(define-public emacs-company-nginx
  (package
    (name "emacs-company-nginx")
    (version "20220210.1411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/company-nginx.git")
               (commit
                 "8a9f1a5653fe2d9a5042bfb9377d54f37fcc64c8")))
        (sha256
          (base32
            "0ylblgf34zpmdmwmd1vp8z59p024f176a1m75kwj96in65y6b6b9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://repo.or.cz/company-nginx.git")
    (synopsis
      "company-mode keywords support for nginx-mode")
    (description
      "Documentation at https://melpa.org/#/company-nginx")
    (license #f)))

(define-public emacs-company-ngram
  (package
    (name "emacs-company-ngram")
    (version "20170129.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kshramt/company-ngram.git")
               (commit
                 "09a68b802e64799e95f205b438d469bbd78cd2e6")))
        (sha256
          (base32
            "0qg1ws7xi418lbnx130xqkwgpsl0p218gqxwy0fpwky01iahwcw9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (arguments '(#:files (:defaults "ngram.py")))
    (home-page
      "https://github.com/kshramt/company-ngram")
    (synopsis "N-gram based completion")
    (description
      "Documentation at https://melpa.org/#/company-ngram")
    (license #f)))

(define-public emacs-company-nixos-options
  (package
    (name "emacs-company-nixos-options")
    (version "20160215.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-nixos-options))
    (arguments
      '(#:files ("company-nixos-options.el")))
    (home-page
      "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis "Company Backend for nixos-options")
    (description
      "Documentation at https://melpa.org/#/company-nixos-options")
    (license #f)))

(define-public emacs-company-org-block
  (package
    (name "emacs-company-org-block")
    (version "20230115.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/company-org-block.git")
               (commit
                 "aee601a2bfcc86d26e762eeb84e5e42573f8c5ca")))
        (sha256
          (base32
            "0zghjkny222wxkyr48njpwjkwk7gfrjm6n70drkwmjhhh88646fv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/xenodium/company-org-block")
    (synopsis "Org blocks company backend")
    (description
      "Documentation at https://melpa.org/#/company-org-block")
    (license #f)))

(define-public emacs-company-php
  (package
    (name "emacs-company-php")
    (version "20230529.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcwen/ac-php.git")
               (commit
                 "7b89fbf25360cc146aee9b2b2ca60f3462b21078")))
        (sha256
          (base32
            "0fmp1595v06dgmx9skxphknaagf9ds9l7ygi7lzxas1s8d05dj10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ac-php-core emacs-company))
    (arguments '(#:files ("company-php.el")))
    (home-page "https://github.com/xcwen/ac-php")
    (synopsis "A company back-end for PHP.")
    (description
      "Documentation at https://melpa.org/#/company-php")
    (license #f)))

(define-public emacs-company-phpactor
  (package
    (name "emacs-company-phpactor")
    (version "20221023.608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpactor.el.git")
               (commit
                 "dde09addf36017527441a855054406f8ffc4e534")))
        (sha256
          (base32
            "11jah2d520qqyfil2qbhblph233a9wjwzbhpc7yzhbqdm29pr9vr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-phpactor))
    (arguments '(#:files ("company-phpactor.el")))
    (home-page
      "https://github.com/emacs-php/phpactor.el")
    (synopsis "A company-mode backend for Phpactor")
    (description
      "Documentation at https://melpa.org/#/company-phpactor")
    (license #f)))

(define-public emacs-company-plisp
  (package
    (name "emacs-company-plisp")
    (version "20200531.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/company-plisp.git")
               (commit
                 "fc0b56d2a711340ca3e63119bfe692bb3e8620fb")))
        (sha256
          (base32
            "0xw475spfwq32nn5qz3gk22cggj1f5y245da9030vzi2jfb9vvid"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-company emacs-dash))
    (arguments
      '(#:files ("company-plisp.el" "company-plisp.l")))
    (home-page
      "https://gitlab.com/sasanidas/company-plisp")
    (synopsis
      "Company mode backend for PicoLisp language")
    (description
      "Documentation at https://melpa.org/#/company-plisp")
    (license #f)))

(define-public emacs-company-plsense
  (package
    (name "emacs-company-plsense")
    (version "20180118.58")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/company-plsense.git")
               (commit
                 "b48e3181e08ec597269621d621aa06636f02d883")))
        (sha256
          (base32
            "14rawd5xfgnkhdpp43mz4a5mf480949ny5hr5w6v5djmsibqxw5s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-s))
    (home-page
      "https://github.com/CeleritasCelery/company-plsense")
    (synopsis "Company backend for Perl")
    (description
      "Documentation at https://melpa.org/#/company-plsense")
    (license #f)))

(define-public emacs-company-pollen
  (package
    (name "emacs-company-pollen")
    (version "20160812.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lijunsong/pollen-mode.git")
               (commit
                 "09a9dc48c468dcd385982b9629f325e70d569faf")))
        (sha256
          (base32
            "15z6sdkg9vygczr1imk3c5v6cbpqgsvnkydzkcmxnbwnqlx1agpc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-pollen-mode))
    (arguments '(#:files ("company-pollen.el")))
    (home-page
      "https://github.com/lijunsong/pollen-mode")
    (synopsis
      "company-mode completion backend for pollen")
    (description
      "Documentation at https://melpa.org/#/company-pollen")
    (license #f)))

(define-public emacs-company-posframe
  (package
    (name "emacs-company-posframe")
    (version "20230104.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/company-posframe.git")
               (commit
                 "18d6641bba72cba3c00018cee737ea8b454f64a8")))
        (sha256
          (base32
            "03kj8yxd4y9aw86b6y6z5l9y76q5gjyiyhi5120nx1a8cwbd9g4a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-posframe))
    (home-page
      "https://github.com/tumashu/company-posframe")
    (synopsis
      "Use a posframe as company candidate menu")
    (description
      "Documentation at https://melpa.org/#/company-posframe")
    (license #f)))

(define-public emacs-company-prescient
  (package
    (name "emacs-company-prescient")
    (version "20221216.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "72b023f5fc1ae2bbf2f51f1786cc012d40671bf4")))
        (sha256
          (base32
            "1mc9pjb80bxcmzaylfwh0sgpvwbx3h35jalznwz464hw3vqfff83"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-company))
    (arguments '(#:files ("company-prescient.el")))
    (home-page
      "https://github.com/raxod502/prescient.el")
    (synopsis "prescient.el + Company")
    (description
      "Documentation at https://melpa.org/#/company-prescient")
    (license #f)))

(define-public emacs-company-qml
  (package
    (name "emacs-company-qml")
    (version "20170428.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/company-qml.git")
               (commit
                 "4af4f32a7ad86d86bb9293fb0b675aec513b5736")))
        (sha256
          (base32
            "09d733r07gr4cxp7npyhi93xchvirxh1v00fr487v4a0mdaahpxf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-qml-mode emacs-company))
    (home-page "unspecified")
    (synopsis "Company backend for QML files")
    (description
      "Documentation at https://melpa.org/#/company-qml")
    (license #f)))

(define-public emacs-company-quickhelp
  (package
    (name "emacs-company-quickhelp")
    (version "20231026.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-quickhelp.git")
               (commit
                 "5bda859577582cc42d16fc0eaf5f7c8bedfd9e69")))
        (sha256
          (base32
            "1i3qysgmyzw66hgw9w9yzvdrx9rbis88byi3aidswnxdj3lvrfgk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-pos-tip))
    (home-page
      "https://www.github.com/expez/company-quickhelp")
    (synopsis
      "Popup documentation for completion candidates")
    (description
      "Documentation at https://melpa.org/#/company-quickhelp")
    (license #f)))

(define-public emacs-company-quickhelp-terminal
  (package
    (name "emacs-company-quickhelp-terminal")
    (version "20220704.647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/company-quickhelp-terminal.git")
               (commit
                 "70c8a979d82e436dca8595e3ec049c733246f338")))
        (sha256
          (base32
            "1ym333y58b7xadxcf4p3aj8p3yns98q4w20xv3nz2vn58j5ha7ym"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company-quickhelp emacs-popup))
    (home-page
      "https://github.com/jcs-elpa/company-quickhelp-terminal")
    (synopsis
      "Terminal support for `company-quickhelp'")
    (description
      "Documentation at https://melpa.org/#/company-quickhelp-terminal")
    (license #f)))

(define-public emacs-company-racer
  (package
    (name "emacs-company-racer")
    (version "20171205.310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/company-racer.git")
               (commit
                 "a00381c9d416f375f783fcb6ae8d40669ce1f567")))
        (sha256
          (base32
            "13m3yzn4xbyl13z7h1cl6vqjbzikjycy7wydpy4a44yhr466zjr5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-deferred))
    (home-page
      "https://github.com/emacs-pe/company-racer")
    (synopsis "Company integration for racer")
    (description
      "Documentation at https://melpa.org/#/company-racer")
    (license #f)))

(define-public emacs-company-reftex
  (package
    (name "emacs-company-reftex")
    (version "20210418.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheBB/company-reftex.git")
               (commit
                 "42eb98c6504e65989635d95ab81b65b9d5798e76")))
        (sha256
          (base32
            "0x5zhhy70cdhbark2vm364bazg2mbwlhy7123qyq02knsjdwwqrl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-company))
    (home-page
      "https://github.com/TheBB/company-reftex")
    (synopsis "Company backend based on RefTeX.")
    (description
      "Documentation at https://melpa.org/#/company-reftex")
    (license #f)))

(define-public emacs-company-restclient
  (package
    (name "emacs-company-restclient")
    (version "20190426.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iquiw/company-restclient.git")
               (commit
                 "e5a3ec54edb44776738c13e13e34c85b3085277b")))
        (sha256
          (base32
            "0yp0hlrgcr6yy1xkjvfckys2k24x9xg7y6336ma61bdwn5lpv0x0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-know-your-http-well
            emacs-restclient))
    (home-page
      "https://github.com/iquiw/company-restclient")
    (synopsis
      "company-mode completion back-end for restclient-mode")
    (description
      "Documentation at https://melpa.org/#/company-restclient")
    (license #f)))

(define-public emacs-company-rtags
  (package
    (name "emacs-company-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-rtags))
    (arguments '(#:files ("src/company-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags back-end for company")
    (description
      "Documentation at https://melpa.org/#/company-rtags")
    (license #f)))

(define-public emacs-company-shell
  (package
    (name "emacs-company-shell")
    (version "20230106.1532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/company-shell.git")
               (commit
                 "5f959a63a6e66eb0cbdac3168cad523a62cc2ccd")))
        (sha256
          (base32
            "0lrkvfg0z9gwfcj90yihanysg8icxpbqq3wqyb734bi5fpmgmzr4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash))
    (home-page
      "https://github.com/Alexander-Miller/company-shell")
    (synopsis
      "Company mode backend for shell functions")
    (description
      "Documentation at https://melpa.org/#/company-shell")
    (license #f)))

(define-public emacs-company-solidity
  (package
    (name "emacs-company-solidity")
    (version "20200113.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethereum/emacs-solidity.git")
               (commit
                 "ddb4a901c33bd29ba2eefff3b7f7461849c6e833")))
        (sha256
          (base32
            "1hppvvh9mq7yg129490b66bmdnnx6c03acbml03ipbcrfc6950y0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-solidity-mode))
    (arguments '(#:files ("company-solidity.el")))
    (home-page
      "https://github.com/ethereum/emacs-solidity")
    (synopsis
      "Company-mode back-end for solidity-mode")
    (description
      "Documentation at https://melpa.org/#/company-solidity")
    (license #f)))

(define-public emacs-company-sourcekit
  (package
    (name "emacs-company-sourcekit")
    (version "20210430.2155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nathankot/company-sourcekit.git")
               (commit
                 "a1860ad4dd3a542acd2fa0dfac2a388cbdf4af0c")))
        (sha256
          (base32
            "18pv1hcilj7kndr7a29jjskp21khh1sd0wy01h8y8y9mf70kikg6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-sourcekit))
    (arguments '(#:files ("company-sourcekit.el")))
    (home-page
      "https://github.com/nathankot/company-sourcekit")
    (synopsis
      "company-mode completion backend for SourceKit")
    (description
      "Documentation at https://melpa.org/#/company-sourcekit")
    (license #f)))

(define-public emacs-company-spell
  (package
    (name "emacs-company-spell")
    (version "20230906.1635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enzuru/company-spell.git")
               (commit
                 "f25b592c271dd1098ebe06b233b6ebb6fbeed488")))
        (sha256
          (base32
            "1xm9d7a29y7mhz3giwwhqmcb1i071cjah577jymp6s0k1ql2zv07"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/enzuru/company-spell")
    (synopsis "Autocompleting spelling for Company")
    (description
      "Documentation at https://melpa.org/#/company-spell")
    (license #f)))

(define-public emacs-company-stan
  (package
    (name "emacs-company-stan")
    (version "20211129.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stan-dev/stan-mode.git")
               (commit
                 "150bbbe5fd3ad2b5a3dbfba9d291e66eeea1a581")))
        (sha256
          (base32
            "06y4gvw8g4mjyiv77rznivqphh9sayjmi9aqr9nhxlf6i19a6hqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-stan-mode))
    (arguments
      '(#:files
        ("company-stan/*.el"
         (:exclude "company-stan/test-*.el"))))
    (home-page
      "https://github.com/stan-dev/stan-mode/tree/master/company-stan")
    (synopsis
      "A company-mode completion backend for stan")
    (description
      "Documentation at https://melpa.org/#/company-stan")
    (license #f)))

(define-public emacs-company-statistics
  (package
    (name "emacs-company-statistics")
    (version "20170210.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/company-mode/company-statistics.git")
               (commit
                 "e62157d43b2c874d2edbd547c3bdfb05d0a7ae5c")))
        (sha256
          (base32
            "12mwviz1mwx4ywks2lkmybbgh1wny67wkzlq5y3ml8gvyc288n3i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/company-mode/company-statistics")
    (synopsis
      "Sort candidates using completion history")
    (description
      "Documentation at https://melpa.org/#/company-statistics")
    (license #f)))

(define-public emacs-company-suggest
  (package
    (name "emacs-company-suggest")
    (version "20200911.1845")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/company-suggest.git")
               (commit
                 "1c89c9de3852f07ce28b0bedf1fbf56fe6eedcdc")))
        (sha256
          (base32
            "0xy2al4b888f32qmxcai2wshx4ajgkk9wnv3rdmdmianx0xmzpzh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/juergenhoetzel/company-suggest")
    (synopsis
      "Company-mode back-end for search engine suggests")
    (description
      "Documentation at https://melpa.org/#/company-suggest")
    (license #f)))

(define-public emacs-company-tabnine
  (package
    (name "emacs-company-tabnine")
    (version "20230216.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TommyX12/company-tabnine.git")
               (commit
                 "96d0c2c05450359ce90ee99a474991391988d2e6")))
        (sha256
          (base32
            "185c5s3ww3jdmahszmq7vfsyij9vf6jjjkq2a0y7jq45d9r61wzp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash emacs-s))
    (home-page
      "https://github.com/TommyX12/company-tabnine/")
    (synopsis "A company-mode backend for TabNine")
    (description
      "Documentation at https://melpa.org/#/company-tabnine")
    (license #f)))

(define-public emacs-company-terraform
  (package
    (name "emacs-company-terraform")
    (version "20220509.1759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rafalcieslak/emacs-company-terraform.git")
               (commit
                 "8d5a16d1bbeeb18ca49a8fd57b5d8cd30c8b8dc7")))
        (sha256
          (base32
            "0s3n2hi7x21pza8nfayy86w4m30l95x0lcbpsknl50v15z5sch0i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-terraform-mode))
    (home-page
      "https://github.com/rafalcieslak/emacs-company-terraform")
    (synopsis "A company backend for terraform")
    (description
      "Documentation at https://melpa.org/#/company-terraform")
    (license #f)))

(define-public emacs-company-try-hard
  (package
    (name "emacs-company-try-hard")
    (version "20200417.1603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/company-try-hard.git")
               (commit
                 "2b41136b5ed6e02032d99bcdb0599ecf00394fa5")))
        (sha256
          (base32
            "07c4vsrixqw6d6d2mqm6xzzzc9l9mgwgabcc6jlnw78cxij1wrsx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-dash))
    (home-page
      "https://github.com/Wilfred/company-try-hard")
    (synopsis
      "get all completions from company backends")
    (description
      "Documentation at https://melpa.org/#/company-try-hard")
    (license #f)))

(define-public emacs-company-web
  (package
    (name "emacs-company-web")
    (version "20220115.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/company-web.git")
               (commit
                 "863fb84b81ed283474e50330cd8d27b1ca0d74f1")))
        (sha256
          (base32
            "0awl7b6p4vrxv0cy5xcxwihqzgk7kk6l7jsivyrj8s0f5jv2q71v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-dash
            emacs-web-completion-data))
    (home-page "https://github.com/osv/company-web")
    (synopsis
      "Company version of ac-html, complete for web,html,emmet,jade,slim modes")
    (description
      "Documentation at https://melpa.org/#/company-web")
    (license #f)))

(define-public emacs-company-wordfreq
  (package
    (name "emacs-company-wordfreq")
    (version "20220405.2000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johannes-mueller/company-wordfreq.el.git")
               (commit
                 "83569cf346c2320ef22f6a858e3424f771c4324e")))
        (sha256
          (base32
            "1rmv8985adf1vibs070fnzzjnbxaj0qgwjyqmnd5v7v020rkpmrc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/johannes-mueller/company-wordfreq.el")
    (synopsis
      "Company backend for human language texts")
    (description
      "Documentation at https://melpa.org/#/company-wordfreq")
    (license #f)))

(define-public emacs-company-ycm
  (package
    (name "emacs-company-ycm")
    (version "20140904.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neuromage/ycm.el.git")
               (commit
                 "4da8a14abcd0f4fa3235042ade2e12b5068c0601")))
        (sha256
          (base32
            "0znchya89zzk30mwl4qfm0q9sfa5m3jspapb892ydj0mck5n4nyj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ycm))
    (arguments '(#:files ("company-ycm.el")))
    (home-page "unspecified")
    (synopsis "company-ycm")
    (description
      "Documentation at https://melpa.org/#/company-ycm")
    (license #f)))

(define-public emacs-company-ycmd
  (package
    (name "emacs-company-ycmd")
    (version "20180520.1053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-ycmd.git")
               (commit
                 "c17ff9e0250a9b39d23af37015a2b300e2f36fed")))
        (sha256
          (base32
            "0amdz2ss953lm39yky1dv3zp20ig97mxsk7z81694bpxnhn4kxad"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ycmd
            emacs-company
            emacs-deferred
            emacs-s
            emacs-dash
            emacs-f))
    (arguments '(#:files ("company-ycmd.el")))
    (home-page
      "https://github.com/abingham/emacs-ycmd")
    (synopsis "company-mode backend for ycmd")
    (description
      "Documentation at https://melpa.org/#/company-ycmd")
    (license #f)))

(define-public emacs-compdef
  (package
    (name "emacs-compdef")
    (version "20200304.611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/compdef.git")
               (commit
                 "30fb5846ed851efee641ce8c5d8879ad36cd7ac6")))
        (sha256
          (base32
            "0qn99jynafjyxc6fy9z888h7j7drs2mz34acwq8yh22v314x2639"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/jjzmajic/compdef")
    (synopsis "A local completion definer")
    (description
      "Documentation at https://melpa.org/#/compdef")
    (license #f)))

(define-public emacs-competitive-programming-snippets
  (package
    (name "emacs-competitive-programming-snippets")
    (version "20201115.1702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/competitive-programming-snippets.git")
               (commit
                 "3b43c1aeaa6676d1d3d0c47e78790db9bee150b6")))
        (sha256
          (base32
            "1pmwsjwj1sb9dqy46p7ky94m9dawd79klcjg1vpl9l7mfvz5i34m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/sei40kr/competitive-programming-snippets")
    (synopsis
      "Competitive Programming snippets for yasnippet")
    (description
      "Documentation at https://melpa.org/#/competitive-programming-snippets")
    (license #f)))

(define-public emacs-compile-multi
  (package
    (name "emacs-compile-multi")
    (version "20230904.1806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/compile-multi.git")
               (commit
                 "30edb0e86287101269debf20f43cead92310029a")))
        (sha256
          (base32
            "0ppm9zw65f1a7b6qb5hx60i6fxkqarrhlz2kn6p2b48s089dykyp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mohkale/compile-multi")
    (synopsis "A multi target interface to compile")
    (description
      "Documentation at https://melpa.org/#/compile-multi")
    (license #f)))

(define-public emacs-compile-multi-all-the-icons
  (package
    (name "emacs-compile-multi-all-the-icons")
    (version "20230904.1806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/compile-multi.git")
               (commit
                 "30edb0e86287101269debf20f43cead92310029a")))
        (sha256
          (base32
            "0ppm9zw65f1a7b6qb5hx60i6fxkqarrhlz2kn6p2b48s089dykyp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons-completion))
    (arguments
      '(#:files
        ("extensions/compile-multi-all-the-icons/*.el")))
    (home-page
      "https://github.com/mohkale/compile-multi")
    (synopsis "Affixate `compile-multi' with icons")
    (description
      "Documentation at https://melpa.org/#/compile-multi-all-the-icons")
    (license #f)))

(define-public emacs-compile-multi-embark
  (package
    (name "emacs-compile-multi-embark")
    (version "20230904.1806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/compile-multi.git")
               (commit
                 "30edb0e86287101269debf20f43cead92310029a")))
        (sha256
          (base32
            "0ppm9zw65f1a7b6qb5hx60i6fxkqarrhlz2kn6p2b48s089dykyp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compile-multi emacs-embark))
    (arguments
      '(#:files
        ("extensions/compile-multi-embark/compile-multi-embark*.el")))
    (home-page
      "https://github.com/mohkale/compile-multi")
    (synopsis
      "Integration for `compile-multi' and `embark'")
    (description
      "Documentation at https://melpa.org/#/compile-multi-embark")
    (license #f)))

(define-public emacs-compiler-explorer
  (package
    (name "emacs-compiler-explorer")
    (version "20230922.753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkcms/compiler-explorer.el.git")
               (commit
                 "62180ecf39e745d837a3fc6b4ae9635f1e66ae78")))
        (sha256
          (base32
            "0x0gn35z0pdz920bww13kzdb3rvs2g3lzkyf03qhbbkq2bl7jaw5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/mkcms/compiler-explorer.el")
    (synopsis
      "Compiler explorer client (godbolt.org)")
    (description
      "Documentation at https://melpa.org/#/compiler-explorer")
    (license #f)))

(define-public emacs-composable
  (package
    (name "emacs-composable")
    (version "20220608.1148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paldepind/composable.el.git")
               (commit
                 "205a69c64ea95ef67070423c31ed70ec44ec980c")))
        (sha256
          (base32
            "0wlqfdiab60ciznrl9ny4rspva7xdwl8w9k8jxd2gpcb11fy1nn0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "composable editing")
    (description
      "Documentation at https://melpa.org/#/composable")
    (license #f)))

(define-public emacs-composer
  (package
    (name "emacs-composer")
    (version "20221120.202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/composer.el.git")
               (commit
                 "5af1707fefbd9d7db1102afdaeb8f2da893fea37")))
        (sha256
          (base32
            "0m67sidj9rqbxfm3lfxsi8ljf8160060979kcdmw0bsvfzz1ns4r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-php-runtime))
    (home-page
      "https://github.com/zonuexe/composer.el")
    (synopsis "Interface to PHP Composer")
    (description
      "Documentation at https://melpa.org/#/composer")
    (license #f)))

(define-public emacs-comware-router-mode
  (package
    (name "emacs-comware-router-mode")
    (version "20230107.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daviderestivo/comware-router-mode.git")
               (commit
                 "cc0c1937e02f84ca8182b2de3ce5cc0982308ab8")))
        (sha256
          (base32
            "0aig2bjfygk3zckfx361r0miz7v3gg0s9aln7m15vprc4xsryj39"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/daviderestivo/comware-router-mode")
    (synopsis
      "Major mode for editing Comware configuration files")
    (description
      "Documentation at https://melpa.org/#/comware-router-mode")
    (license #f)))

(define-public emacs-conan
  (package
    (name "emacs-conan")
    (version "20231016.830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/carl2/conan-elisp.git")
               (commit
                 "325f1c32f0ff26c9abc49441a0606a8ec8105fd4")))
        (sha256
          (base32
            "1dd46hi1cva4qxxrpwgfxifqnc65v2z04lnlf6m0axd33if8zgn8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "https://github.com/Carl2/conan-elisp")
    (synopsis
      "Generate flags for c++ using conan 2.0")
    (description
      "Documentation at https://melpa.org/#/conan")
    (license #f)))

(define-public emacs-concurrent
  (package
    (name "emacs-concurrent")
    (version "20170601.435")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-deferred.git")
               (commit
                 "2239671d94b38d92e9b28d4e12fd79814cfb9c16")))
        (sha256
          (base32
            "0vz59lm7pfz0gbsgrb44y555js85wbdjn0zm6p8wfqjiqf63ds3i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (arguments '(#:files ("concurrent.el")))
    (home-page
      "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown")
    (synopsis
      "Concurrent utility functions for emacs lisp")
    (description
      "Documentation at https://melpa.org/#/concurrent")
    (license #f)))

(define-public emacs-conda
  (package
    (name "emacs-conda")
    (version "20231109.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/necaris/conda.el.git")
               (commit
                 "60e14d1e9793431b91913a5688e278bd91d56224")))
        (sha256
          (base32
            "1irrcdm3ckbafsjr442i9iljsfjqsg5mj79hzwps2k1j7b911gy1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pythonic emacs-dash emacs-s emacs-f))
    (home-page "http://github.com/necaris/conda.el")
    (synopsis "Work with your conda environments")
    (description
      "Documentation at https://melpa.org/#/conda")
    (license #f)))

(define-public emacs-config-general-mode
  (package
    (name "emacs-config-general-mode")
    (version "20171024.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TLINDEN/config-general-mode.git")
               (commit
                 "b4a8e6ba0bb027a77e4a0f701409f3e57bb2e4c0")))
        (sha256
          (base32
            "115sk0h6i1bfnxw1v11719926cvnq7gyisjcysvkam40hp3d5fx5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tlinden/config-general-mode")
    (synopsis "Config::General config file mode")
    (description
      "Documentation at https://melpa.org/#/config-general-mode")
    (license #f)))

(define-public emacs-config-parser
  (package
    (name "emacs-config-parser")
    (version "20160426.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-config-parser.git")
               (commit
                 "85d559e7889d8f5b98b8794b79426ae25ec3caa5")))
        (sha256
          (base32
            "09vq7hcsw4027whn3xrnfz9hkgkakva619hyz0zfgpvppqah9n1p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/el-config-parser")
    (synopsis "a library for parsing config file")
    (description
      "Documentation at https://melpa.org/#/config-parser")
    (license #f)))

(define-public emacs-conkeror-minor-mode
  (package
    (name "emacs-conkeror-minor-mode")
    (version "20150114.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/conkeror-minor-mode.git")
               (commit
                 "476e81c27b056e21c192391fe674a2bf875466b0")))
        (sha256
          (base32
            "0sz3qx1bn0lwjhka2l6wfl4b5486ji9dklgjs7fdlkg3dgpp1ahx"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/conkeror-minor-mode")
    (synopsis
      "Mode for editing conkeror javascript files.")
    (description
      "Documentation at https://melpa.org/#/conkeror-minor-mode")
    (license #f)))

(define-public emacs-conllu-mode
  (package
    (name "emacs-conllu-mode")
    (version "20200501.2328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/odanoburu/conllu-mode.git")
               (commit
                 "0db3063572b0de08874822e20570bb153747e6ed")))
        (sha256
          (base32
            "0l7d88p010z47qhk33k8s13h9596g3dxz3mx9winsm82px8fvcpp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-hydra emacs-s))
    (home-page
      "https://github.com/odanoburu/conllu-mode")
    (synopsis "editing mode for CoNLL-U files")
    (description
      "Documentation at https://melpa.org/#/conllu-mode")
    (license #f)))

(define-public emacs-connection
  (package
    (name "emacs-connection")
    (version "20191111.446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myrkr/dictionary-el.git")
               (commit
                 "bdf0aa7761d1c1a3bc0652b2fdc4a54b3acdb06a")))
        (sha256
          (base32
            "1vm9m36ab7hs58xqzr4g8lp2s78qzlcsy57f8yajrhibwfh5jrs6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("connection.el")))
    (home-page "unspecified")
    (synopsis "TCP-based client connection")
    (description
      "Documentation at https://melpa.org/#/connection")
    (license #f)))

(define-public emacs-constant-theme
  (package
    (name "emacs-constant-theme")
    (version "20180921.1012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Jannis/emacs-constant-theme.git")
               (commit
                 "23543a09729569b566175abe1efbe774048d3fa8")))
        (sha256
          (base32
            "1456kydn5k5sq8dgaf45nzqaw1035945dhwkh07vz11ivvcrz3xs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jannis/emacs-constant-theme")
    (synopsis
      "A calm, dark, almost monochrome color theme.")
    (description
      "Documentation at https://melpa.org/#/constant-theme")
    (license #f)))

(define-public emacs-consult
  (package
    (name "emacs-consult")
    (version "20231107.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/consult.git")
               (commit
                 "a1868a7ffd558a3ad06ba7bb5594458f6927ebb2")))
        (sha256
          (base32
            "0hzcdpjgsksq4yay2y3a5alg8b3nifcmfi1x7nqpw3sw6c725sqn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/consult")
    (synopsis "Consulting completing-read")
    (description
      "Documentation at https://melpa.org/#/consult")
    (license #f)))

(define-public emacs-consult-ag
  (package
    (name "emacs-consult-ag")
    (version "20230227.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yadex205/consult-ag.git")
               (commit
                 "7fc4b36613d4f6d06d28999c1a03b3218ee1529b")))
        (sha256
          (base32
            "0dgw7g682sf38f7649xk9jri0sri9xin25xz53yxac3iahij0a7j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/yadex205/consult-ag")
    (synopsis
      "The silver searcher integration using Consult")
    (description
      "Documentation at https://melpa.org/#/consult-ag")
    (license #f)))

(define-public emacs-consult-codesearch
  (package
    (name "emacs-consult-codesearch")
    (version "20230315.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/youngker/consult-codesearch.el.git")
               (commit
                 "51df545bb57b468058245950322ae15f6c3a0ce2")))
        (sha256
          (base32
            "0j7k350sgb9fpwwgr8m7mpskkqh7w4hqn12ii5ah8y5760glhgmg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/youngker/consult-codesearch")
    (synopsis "Consult interface for codesearch")
    (description
      "Documentation at https://melpa.org/#/consult-codesearch")
    (license #f)))

(define-public emacs-consult-company
  (package
    (name "emacs-consult-company")
    (version "20230606.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/consult-company.git")
               (commit
                 "6e309fa9115c9ecd29aa27bff4e3b733979e5dbc")))
        (sha256
          (base32
            "1r8a50bg4fz89idq6k1dy8iajbn3bawijml9i618zh4f4vkca4fa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company emacs-consult))
    (home-page
      "https://github.com/mohkale/consult-company")
    (synopsis "Consult frontend for company")
    (description
      "Documentation at https://melpa.org/#/consult-company")
    (license #f)))

(define-public emacs-consult-compile-multi
  (package
    (name "emacs-consult-compile-multi")
    (version "20230904.1806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/compile-multi.git")
               (commit
                 "30edb0e86287101269debf20f43cead92310029a")))
        (sha256
          (base32
            "0ppm9zw65f1a7b6qb5hx60i6fxkqarrhlz2kn6p2b48s089dykyp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compile-multi emacs-consult))
    (arguments
      '(#:files
        ("extensions/consult-compile-multi/*.el")))
    (home-page
      "https://github.com/mohkale/compile-multi")
    (synopsis
      "Consulting read support for `compile-multi'")
    (description
      "Documentation at https://melpa.org/#/consult-compile-multi")
    (license #f)))

(define-public emacs-consult-dash
  (package
    (name "emacs-consult-dash")
    (version "20230529.1419")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/consult-dash-"
               version
               ".tar"))
        (sha256
          (base32
            "1jbl7c3ka0f4qhwr275p5b5xk5zlbs9j0ci6b7w1c0ic2csvs3y0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash-docs emacs-consult))
    (home-page
      "https://codeberg.org/ravi/consult-dash")
    (synopsis "Consult front-end for dash-docs")
    (description
      "Documentation at https://melpa.org/#/consult-dash")
    (license #f)))

(define-public emacs-consult-dir
  (package
    (name "emacs-consult-dir")
    (version "20230725.2338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/consult-dir.git")
               (commit
                 "3268ec3f7194c086ecfbd2863e029f42d91b77c1")))
        (sha256
          (base32
            "12mp2c7mx60l758c4gjnx4lv37fp1b8ifagak8l2dcmg2rm7kxd4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/karthink/consult-dir")
    (synopsis
      "Insert paths into the minibuffer prompt")
    (description
      "Documentation at https://melpa.org/#/consult-dir")
    (license #f)))

(define-public emacs-consult-eglot
  (package
    (name "emacs-consult-eglot")
    (version "20230423.1505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/consult-eglot.git")
               (commit
                 "db9d41c9812a5a8a7b9a22fa7f3c314e37584d41")))
        (sha256
          (base32
            "1xcv9lj4r9s584gfkbqi9dmi045a3phb2x63fzfd7vpdy15xg47n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot emacs-consult))
    (home-page
      "https://github.com/mohkale/consult-eglot")
    (synopsis
      "A consulting-read interface for eglot")
    (description
      "Documentation at https://melpa.org/#/consult-eglot")
    (license #f)))

(define-public emacs-consult-flycheck
  (package
    (name "emacs-consult-flycheck")
    (version "20230702.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/consult-flycheck.git")
               (commit
                 "3f2a7c17cc2fe64e0c07e3bf90e33c885c0d7062")))
        (sha256
          (base32
            "0cvxl6ynbns3wlpzilhg4ldakb91ikpibbr9wpb2wkzbgi5c766c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-flycheck))
    (home-page "https://github.com/minad/consult")
    (synopsis
      "Provides the command `consult-flycheck'")
    (description
      "Documentation at https://melpa.org/#/consult-flycheck")
    (license #f)))

(define-public emacs-consult-flyspell
  (package
    (name "emacs-consult-flyspell")
    (version "20230322.204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/OlMon/consult-flyspell.git")
               (commit
                 "7011e6634598530ea2d874e7e7389dc1bb94e1ca")))
        (sha256
          (base32
            "09zng143lcxlvsbi9y5sck9z7626lqxmr9yr897ka9h525lvykc4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://gitlab.com/OlMon/consult-flyspell")
    (synopsis "Consult integration for flyspell")
    (description
      "Documentation at https://melpa.org/#/consult-flyspell")
    (license #f)))

(define-public emacs-consult-ghq
  (package
    (name "emacs-consult-ghq")
    (version "20210606.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomoya/consult-ghq.git")
               (commit
                 "c8619d66bd8f8728e43ed15096078b89eb4d2083")))
        (sha256
          (base32
            "1zrxigf7bnx6l9lv2xvnn3ba6c9dndijw1vlnli56cv215i0r4f6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-affe))
    (home-page
      "https://github.com/tomoya/consult-ghq")
    (synopsis "Ghq interface using consult")
    (description
      "Documentation at https://melpa.org/#/consult-ghq")
    (license #f)))

(define-public emacs-consult-git-log-grep
  (package
    (name "emacs-consult-git-log-grep")
    (version "20230204.1753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ghosty141/consult-git-log-grep.git")
               (commit
                 "30dfcad5745a6b9882d94fec75d38c345a1eff89")))
        (sha256
          (base32
            "144sz49k1jqbfmyg76pmmi9j5c77pfzn6mxamkl5vkvxqcs8z3ai"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/Ghosty141/consult-git-log-grep")
    (synopsis "Consult integration for git log grep")
    (description
      "Documentation at https://melpa.org/#/consult-git-log-grep")
    (license #f)))

(define-public emacs-consult-hatena-bookmark
  (package
    (name "emacs-consult-hatena-bookmark")
    (version "20221125.109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Nyoho/consult-hatena-bookmark.git")
               (commit
                 "b85484b11705ebd896878d3ac7fdb12bc8c9637a")))
        (sha256
          (base32
            "1xvi28wvagcabk1q6ckw4f97knm59rl86jd3pndz2ljv842rzbix"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-async-await))
    (home-page
      "https://github.com/Nyoho/consult-hatena-bookmark")
    (synopsis
      "Consult commands for the Hatena Bookmark")
    (description
      "Documentation at https://melpa.org/#/consult-hatena-bookmark")
    (license #f)))

(define-public emacs-consult-ls-git
  (package
    (name "emacs-consult-ls-git")
    (version "20230924.810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rcj/consult-ls-git.git")
               (commit
                 "3ccd9d80da73a05ef2a74616ffdc469860f74c21")))
        (sha256
          (base32
            "1gxh0zwfkm50493bbnvjlsx38i3sxmrajqm1gf65icp55s0slrp0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/rcj/consult-ls-git")
    (synopsis "Consult integration for git")
    (description
      "Documentation at https://melpa.org/#/consult-ls-git")
    (license #f)))

(define-public emacs-consult-lsp
  (package
    (name "emacs-consult-lsp")
    (version "20230209.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gagbo/consult-lsp.git")
               (commit
                 "f8db3252c0daa41225ba4ed1c0d178b281cd3e90")))
        (sha256
          (base32
            "0hbavrwxa8mhgijh0wn517fns07ng84q6vya9bvblcx8pq9qw6z0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-consult emacs-f))
    (home-page
      "https://github.com/gagbo/consult-lsp")
    (synopsis "LSP-mode Consult integration")
    (description
      "Documentation at https://melpa.org/#/consult-lsp")
    (license #f)))

(define-public emacs-consult-notes
  (package
    (name "emacs-consult-notes")
    (version "20231027.1436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mclear-tools/consult-notes.git")
               (commit
                 "eb4c59b8a43c5b74250f92cf8eb05c659efb04d0")))
        (sha256
          (base32
            "01cs1w126r0czqszwrmfjx31drzq9rlmgfqi5swwvvsz1jcgp2pm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-s emacs-dash))
    (home-page
      "https://github.com/mclear-tools/consult-notes")
    (synopsis "Manage notes with consult")
    (description
      "Documentation at https://melpa.org/#/consult-notes")
    (license #f)))

(define-public emacs-consult-notmuch
  (package
    (name "emacs-consult-notmuch")
    (version "20221216.1701")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/consult-notmuch-"
               version
               ".el"))
        (sha256
          (base32
            "0n7jwmr3wlxx658jv3yxs4w2400ybyjkjfk9p1wx0fgqk1smdg0l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-notmuch))
    (home-page
      "https://codeberg.org/jao/consult-notmuch")
    (synopsis "Notmuch search using consult")
    (description
      "Documentation at https://melpa.org/#/consult-notmuch")
    (license #f)))

(define-public emacs-consult-org-roam
  (package
    (name "emacs-consult-org-roam")
    (version "20230528.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jgru/consult-org-roam.git")
               (commit
                 "2ca42a1c1641a29f1447d35be01bd1fda368a9e2")))
        (sha256
          (base32
            "142fra7wap6dfwd4c82j7z3nk1yw78slrwhjx6vkiql8ylbiw5fi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam emacs-consult))
    (home-page
      "https://github.com/jgru/consult-org-roam")
    (synopsis "Consult integration for org-roam")
    (description
      "Documentation at https://melpa.org/#/consult-org-roam")
    (license #f)))

(define-public emacs-consult-project-extra
  (package
    (name "emacs-consult-project-extra")
    (version "20221013.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Qkessler/consult-project-extra.git")
               (commit
                 "9fdf45fa40471900b0b158d73c4b1521a13d47ef")))
        (sha256
          (base32
            "02m5vslf46kc9qjdyjqg3kjgv7a8vs0vmmc9gjh62nxfnz1dl7gn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://github.com/Qkessler/consult-project-extra")
    (synopsis "Consult integration for project.el")
    (description
      "Documentation at https://melpa.org/#/consult-project-extra")
    (license #f)))

(define-public emacs-consult-projectile
  (package
    (name "emacs-consult-projectile")
    (version "20230821.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/OlMon/consult-projectile.git")
               (commit
                 "400439c56d17bca7888f7d143d8a11f84900a406")))
        (sha256
          (base32
            "1abd2dw3zpiln9pd7l3j78wl3lwapcmf1ilijv3vin9g0wqb7hmn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-projectile))
    (home-page
      "https://gitlab.com/OlMon/consult-projectile")
    (synopsis "Consult integration for projectile")
    (description
      "Documentation at https://melpa.org/#/consult-projectile")
    (license #f)))

(define-public emacs-consult-recoll
  (package
    (name "emacs-consult-recoll")
    (version "20221014.2002")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/consult-recoll-"
               version
               ".el"))
        (sha256
          (base32
            "1ky1c4bg44mlixkw1jkl5swrg78fdym1f6w4qlpg97rlsa7nk230"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://codeberg.org/jao/consult-recoll")
    (synopsis "Recoll queries using consult")
    (description
      "Documentation at https://melpa.org/#/consult-recoll")
    (license #f)))

(define-public emacs-consult-spotify
  (package
    (name "emacs-consult-spotify")
    (version "20211114.2258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify")
               (commit
                 "5c1dcf0182135cda4191d4ba206fe2f265100293")))
        (sha256
          (base32
            "06wj2pixhjgqddl9g2wkv7cq9gz9yjb46cb1jrlbya3rdjyfb6h5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-espotify))
    (arguments '(#:files ("consult-spotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Spotify queries using consult")
    (description
      "Documentation at https://melpa.org/#/consult-spotify")
    (license #f)))

(define-public emacs-consult-tex
  (package
    (name "emacs-consult-tex")
    (version "20231109.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/titus.pinta/consult-tex.git")
               (commit
                 "e4cc88be7b66c45d90e5685344cda392f54fe5ae")))
        (sha256
          (base32
            "0h1x29a242gsq36h4hf9wzjq2mxvbqxi0mwkxxi5g0356lk7jqhw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-consult))
    (home-page
      "https://gitlab.com/titus.pinta/consult-TeX")
    (synopsis "Consult powered completion for tex")
    (description
      "Documentation at https://melpa.org/#/consult-tex")
    (license #f)))

(define-public emacs-consult-todo
  (package
    (name "emacs-consult-todo")
    (version "20231022.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/consult-todo.git")
               (commit
                 "84f3c9876a285f733d75053076a97cc30f7d8eb9")))
        (sha256
          (base32
            "0v336l9dary68i910yvpk9c24b9vrc1cx615hiv9dz8zi1khz8rr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-consult emacs-hl-todo))
    (home-page
      "https://github.com/liuyinz/consult-todo")
    (synopsis "Search hl-todo keywords in consult")
    (description
      "Documentation at https://melpa.org/#/consult-todo")
    (license #f)))

(define-public emacs-consult-yasnippet
  (package
    (name "emacs-consult-yasnippet")
    (version "20220724.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/consult-yasnippet.git")
               (commit
                 "ae0450889484f23dc4ec37518852a2c61b89f184")))
        (sha256
          (base32
            "13hmmsnmh32vafws61sckzzy354rq0nslqpyzhw97iwvn0fpsa35"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet emacs-consult))
    (home-page
      "https://github.com/mohkale/consult-yasnippet")
    (synopsis
      "A consulting-read interface for yasnippet")
    (description
      "Documentation at https://melpa.org/#/consult-yasnippet")
    (license #f)))

(define-public emacs-contextual
  (package
    (name "emacs-contextual")
    (version "20180726.800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/e-user/contextual.git")
               (commit
                 "e3c0de4a2e06757a0e8407c3c6e75930026191e3")))
        (sha256
          (base32
            "1nl2748s5x252f6sx4xpgzfdcas9ky38bnqfdx9l562agmcp9615"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/lshift-de/contextual")
    (synopsis "Contextual profile management system")
    (description
      "Documentation at https://melpa.org/#/contextual")
    (license #f)))

(define-public emacs-contextual-menubar
  (package
    (name "emacs-contextual-menubar")
    (version "20180205.709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/contextual-menubar.git")
               (commit
                 "f76f55232ac07df76ef9a334a0c527dfab97c40b")))
        (sha256
          (base32
            "0zks4w99nbhz1xvr67isgg6yjghpzbh5s5wd839zi0ly30x4riqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronjensen/contextual-menubar")
    (synopsis
      "display the menubar only on a graphical display")
    (description
      "Documentation at https://melpa.org/#/contextual-menubar")
    (license #f)))

(define-public emacs-contrast-color
  (package
    (name "emacs-contrast-color")
    (version "20160903.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/contrast-color-el.git")
               (commit
                 "c5fb77a211ebbef3185ada37bea7420534c33f94")))
        (sha256
          (base32
            "06grlp93n50d7c5z43fia0d6r1hmfpnqa062fzrz8gypy5kqxi1f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yuutayamada/contrast-color-el")
    (synopsis "Pick best contrast color for you")
    (description
      "Documentation at https://melpa.org/#/contrast-color")
    (license #f)))

(define-public emacs-control-mode
  (package
    (name "emacs-control-mode")
    (version "20160624.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stephendavidmarsh/control-mode.git")
               (commit
                 "72d6179b60adc438aada74083b2bf4264b575de3")))
        (sha256
          (base32
            "0pqdh9bx2j9kla57sn349m90azk02wajapmazdm26cjdc2npw7jh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stephendavidmarsh/control-mode")
    (synopsis
      "A \"control\" mode, similar to vim's \"normal\" mode")
    (description
      "Documentation at https://melpa.org/#/control-mode")
    (license #f)))

(define-public emacs-conventional-changelog
  (package
    (name "emacs-conventional-changelog")
    (version "20230902.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/emacs-conventional-changelog.git")
               (commit
                 "b7962028deda3a064df654cb945b4ef4ca55a196")))
        (sha256
          (base32
            "0wy9chj2xgxzhd327dx0dbbzf8vw8f5pawvj5hzsfwmz71m61fzc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liuyinz/emacs-conventional-changelog")
    (synopsis "Conventional Changelog Generator")
    (description
      "Documentation at https://melpa.org/#/conventional-changelog")
    (license #f)))

(define-public emacs-cool-mode
  (package
    (name "emacs-cool-mode")
    (version "20231026.456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/cool-mode.git")
               (commit
                 "46b6a38a99a954c5e77e90506eafec4092690692")))
        (sha256
          (base32
            "1vf4rr97y326lq76q57i2f7j3s264gqz36dnhaav0ivrzx8zwnyl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nverno/cool-mode")
    (synopsis
      "Major mode for cool compiler language")
    (description
      "Documentation at https://melpa.org/#/cool-mode")
    (license #f)))

(define-public emacs-copy-as-format
  (package
    (name "emacs-copy-as-format")
    (version "20231104.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sshaw/copy-as-format.git")
               (commit
                 "d4a88544d3e89385cc401f2026e8d46ca02e7ca4")))
        (sha256
          (base32
            "09c5ic11iikldqhdfrym57ry167dxln5bv75vv459xzf0nw9iqaw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sshaw/copy-as-format")
    (synopsis
      "Copy buffer locations as GitHub/Slack/JIRA etc... formatted code")
    (description
      "Documentation at https://melpa.org/#/copy-as-format")
    (license #f)))

(define-public emacs-copy-file-on-save
  (package
    (name "emacs-copy-file-on-save")
    (version "20230402.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/emacs-auto-deployment.git")
               (commit
                 "370b1586feb2690d3c72185bd4f17c31ce03673a")))
        (sha256
          (base32
            "0zidyfvjzi5ymbi4cfkqkvrhnf4c7nmxfy9qwqs0bz36l4adla5x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/emacs-php/emacs-auto-deployment")
    (synopsis
      "Copy file on save, automatic deployment it")
    (description
      "Documentation at https://melpa.org/#/copy-file-on-save")
    (license #f)))

(define-public emacs-copyit
  (package
    (name "emacs-copyit")
    (version "20190919.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emacs-copyit.git")
               (commit
                 "c4f2c28e5b6270e8e3364341619f1154bb4e682e")))
        (sha256
          (base32
            "17xqpshwc48srwljpbad7vhx3rkxqav0ygp0ff4xh7wgy21fp2mp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("copyit.el")))
    (home-page
      "https://github.com/zonuexe/emacs-copyit")
    (synopsis "Copy it, yank anything!")
    (description
      "Documentation at https://melpa.org/#/copyit")
    (license #f)))

(define-public emacs-copyit-pandoc
  (package
    (name "emacs-copyit-pandoc")
    (version "20190919.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emacs-copyit.git")
               (commit
                 "c4f2c28e5b6270e8e3364341619f1154bb4e682e")))
        (sha256
          (base32
            "17xqpshwc48srwljpbad7vhx3rkxqav0ygp0ff4xh7wgy21fp2mp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-copyit emacs-pandoc))
    (arguments '(#:files ("copyit-pandoc.el")))
    (home-page
      "https://github.com/zonuexe/emacs-copyit")
    (synopsis "Copy it, yank anything!")
    (description
      "Documentation at https://melpa.org/#/copyit-pandoc")
    (license #f)))

(define-public emacs-coq-commenter
  (package
    (name "emacs-coq-commenter")
    (version "20170822.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Ailrun/coq-commenter.git")
               (commit
                 "7fe9a2cc0ebdb0b1e54a24eb7971d757fb588ac3")))
        (sha256
          (base32
            "1rq0j6ds9snv21k2lzyja96qxxz8nrai5aj1k1si9zshld28mapx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "http://github.com/ailrun/coq-commenter")
    (synopsis "Coq commenting minor mode for proof")
    (description
      "Documentation at https://melpa.org/#/coq-commenter")
    (license #f)))

(define-public emacs-corfu
  (package
    (name "emacs-corfu")
    (version "20231108.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/corfu.git")
               (commit
                 "42efcfd28f6286110cc2ba0d90ffd67a81e0667b")))
        (sha256
          (base32
            "0ns0xli4l53vxmw8bshnqqi0zm85nld6p2vw30psfpgaz70j2zqy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files (:defaults "extensions/corfu-*.el")))
    (home-page "https://github.com/minad/corfu")
    (synopsis "COmpletion in Region FUnction")
    (description
      "Documentation at https://melpa.org/#/corfu")
    (license #f)))

(define-public emacs-corfu-candidate-overlay
  (package
    (name "emacs-corfu-candidate-overlay")
    (version "20230814.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://code.bsdgeek.org/adam/corfu-candidate-overlay")
               (commit
                 "265438b16155e899d82a869aebca16105665c998")))
        (sha256
          (base32
            "0i36g2i7435pby32vcapv4ydmp6rqn0r51qm91wqyzan1f3n3qck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-corfu))
    (home-page
      "https://code.bsdgeek.org/adam/corfu-candidate-overlay/")
    (synopsis
      "Show first candidate in an overlay while typing")
    (description
      "Documentation at https://melpa.org/#/corfu-candidate-overlay")
    (license #f)))

(define-public emacs-corfu-prescient
  (package
    (name "emacs-corfu-prescient")
    (version "20221216.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "72b023f5fc1ae2bbf2f51f1786cc012d40671bf4")))
        (sha256
          (base32
            "1mc9pjb80bxcmzaylfwh0sgpvwbx3h35jalznwz464hw3vqfff83"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-corfu))
    (arguments '(#:files ("corfu-prescient.el")))
    (home-page
      "https://github.com/radian-software/prescient.el")
    (synopsis "prescient.el + Corfu")
    (description
      "Documentation at https://melpa.org/#/corfu-prescient")
    (license #f)))

(define-public emacs-corral
  (package
    (name "emacs-corral")
    (version "20160502.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nivekuil/corral.git")
               (commit
                 "e7ab6aa118e46b93d4933d1364bc273f57cd6911")))
        (sha256
          (base32
            "00055gzv032xxzqm1hffipljy8fzgsm58cbv8dzajh035jvdgpv7"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/nivekuil/corral")
    (synopsis
      "Quickly surround text with delimiters")
    (description
      "Documentation at https://melpa.org/#/corral")
    (license #f)))

(define-public emacs-cort
  (package
    (name "emacs-cort")
    (version "20211020.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/cort.el.git")
               (commit
                 "3f64a7b03a4c5b768ec21fd5987acd0d62d16c7b")))
        (sha256
          (base32
            "1bkyx8sd2qqnhmmqbl9wyxk3xhrplq9zprmfpyhf5k0zin3zd31y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ansi))
    (home-page "https://github.com/conao3/cort.el")
    (synopsis
      "Simplify extended unit test framework")
    (description
      "Documentation at https://melpa.org/#/cort")
    (license #f)))

(define-public emacs-cosmo
  (package
    (name "emacs-cosmo")
    (version "20170922.744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/montanari/cosmo-el.git")
               (commit
                 "dd83b09a49a2843606b28279b674b2207040b36b")))
        (sha256
          (base32
            "0phcg81g3dy67s1hfymvj0lkcpwygwql8iixf940nv31qllgzvd7"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/montanari/cosmo-el")
    (synopsis "Cosmological Calculator")
    (description
      "Documentation at https://melpa.org/#/cosmo")
    (license #f)))

(define-public emacs-counsel
  (package
    (name "emacs-counsel")
    (version "20231025.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "8c30f4cab5948aa8d942a3b2bbf5fb6a94d9441d")))
        (sha256
          (base32
            "1iqj27pc2iivmwfh329v0d9g0z1y0whlnamrl7g2bi374h41m368"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-swiper))
    (arguments '(#:files ("counsel.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis
      "Various completion functions using Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel")
    (license #f)))

(define-public emacs-counsel-ag-popup
  (package
    (name "emacs-counsel-ag-popup")
    (version "20210121.805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gexplorer/counsel-ag-popup.git")
               (commit
                 "41d85fe36edd72da68f5009ad9cf9013cd19960d")))
        (sha256
          (base32
            "1gfppiwx0cilg97bfb2cpdk7j10rdm473kklrkvb6wlwwg3j9w3q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-transient))
    (home-page
      "https://github.com/gexplorer/counsel-ag-popup")
    (synopsis "Interactive search with counsel-ag")
    (description
      "Documentation at https://melpa.org/#/counsel-ag-popup")
    (license #f)))

(define-public emacs-counsel-at-point
  (package
    (name "emacs-counsel-at-point")
    (version "20230808.1344")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/counsel-at-point-"
               version
               ".tar"))
        (sha256
          (base32
            "0ijg10pvwlgxw34lqrqx4a6hbbijwvlw2091ibfq66zi8pi5a77x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://codeberg.org/ideasman42/emacs-counsel-at-point")
    (synopsis "Context sensitive project search")
    (description
      "Documentation at https://melpa.org/#/counsel-at-point")
    (license #f)))

(define-public emacs-counsel-bbdb
  (package
    (name "emacs-counsel-bbdb")
    (version "20220909.727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/counsel-bbdb.git")
               (commit
                 "ccae56b0551abb305cad087d85f1b6a97adb7c0f")))
        (sha256
          (base32
            "1jrj7hx6y518np3xcnarbj0c43lglcf9gww3fhfqp7lzxl9hvi8s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bbdb))
    (home-page
      "https://github.com/redguard/counsel-bbdb")
    (synopsis
      "Quick search&input email from BBDB based on Emacs API `completing-read'")
    (description
      "Documentation at https://melpa.org/#/counsel-bbdb")
    (license #f)))

(define-public emacs-counsel-chrome-bm
  (package
    (name "emacs-counsel-chrome-bm")
    (version "20211022.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BlueBoxWare/counsel-chrome-bm.git")
               (commit
                 "72b31889581f20f4037c0361f5259ff3633bc128")))
        (sha256
          (base32
            "0crnrp5gd055gpxj4qiiwlik8llqhs5dyixfa8r8mzaxanv6bdg9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://github.com/BlueBoxWare/counsel-chrome-bm")
    (synopsis
      "Browse Chrom(e/ium) bookmarks with Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-chrome-bm")
    (license #f)))

(define-public emacs-counsel-codesearch
  (package
    (name "emacs-counsel-codesearch")
    (version "20180925.803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-counsel-codesearch.git")
               (commit
                 "b7989fad3e06f301c31d5e896c42b6cc549a0e0c")))
        (sha256
          (base32
            "1qv82nvj0kddmajm6pniadnz96mqz8rhl0g2w2z5834r48higxqv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-codesearch emacs-counsel emacs-ivy))
    (home-page
      "https://github.com/abingham/emacs-counsel-codesearch")
    (synopsis "Counsel interface for codesearch.el")
    (description
      "Documentation at https://melpa.org/#/counsel-codesearch")
    (license #f)))

(define-public emacs-counsel-css
  (package
    (name "emacs-counsel-css")
    (version "20211115.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-counsel-css.git")
               (commit
                 "8e9c0515fc952452eee786d8ebb43d48ea86c9f8")))
        (sha256
          (base32
            "18wncb713slsynm3amqs8ibpzfab819nn6r6yzl6yxsliahi2xil"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://github.com/hlissner/emacs-counsel-css")
    (synopsis "stylesheet-selector-aware swiper")
    (description
      "Documentation at https://melpa.org/#/counsel-css")
    (license #f)))

(define-public emacs-counsel-dash
  (package
    (name "emacs-counsel-dash")
    (version "20221217.419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dash-docs-el/counsel-dash.git")
               (commit
                 "04117bffc8badd85c9f4fdb17648fd56e83fe832")))
        (sha256
          (base32
            "1miajhrd4x15jvcw60rwndp427his1012009ims70ajc7xn1ggsx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash-docs emacs-counsel))
    (home-page
      "https://github.com/nathankot/counsel-dash")
    (synopsis "Browse dash docsets using Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-dash")
    (license #f)))

(define-public emacs-counsel-edit-mode
  (package
    (name "emacs-counsel-edit-mode")
    (version "20230411.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tyler-dodge/counsel-edit-mode.git")
               (commit
                 "323903ee2b25d05aa88159a674043ae7a1fa0c07")))
        (sha256
          (base32
            "1s6ha83xx5ri79args911xa6qmhs695pminabgni0djm8w74kazn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-s emacs-counsel))
    (home-page
      "https://github.com/tyler-dodge/counsel-edit-mode")
    (synopsis
      "Edit results of counsel commands in-place")
    (description
      "Documentation at https://melpa.org/#/counsel-edit-mode")
    (license #f)))

(define-public emacs-counsel-etags
  (package
    (name "emacs-counsel-etags")
    (version "20230808.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/counsel-etags.git")
               (commit
                 "1d4d1f00da0c3b7fd3519be7c0e5aa5b1f1f2cfd")))
        (sha256
          (base32
            "1dkjvqxf9r312r08mwqklqz0jdd21svbwvac7gcfiid68paskhkj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "http://github.com/redguardtoo/counsel-etags")
    (synopsis
      "Fast and complete Ctags/Etags solution using ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-etags")
    (license #f)))

(define-public emacs-counsel-fd
  (package
    (name "emacs-counsel-fd")
    (version "20221011.1853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CsBigDataHub/counsel-fd.git")
               (commit
                 "7c1e413e4ce44df2232c19ebe3357ac8ec33cb3b")))
        (sha256
          (base32
            "1p56m3kwbv45rqwca2c0pjqm4a590nmy0z66c01hvp775xd2n2jc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://github.com/CsBigDataHub/counsel-fd")
    (synopsis "counsel interface for fd")
    (description
      "Documentation at https://melpa.org/#/counsel-fd")
    (license #f)))

(define-public emacs-counsel-ffdata
  (package
    (name "emacs-counsel-ffdata")
    (version "20191017.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cireu/counsel-ffdata.git")
               (commit
                 "88c2348c4039d9e562bd3d9a364708b01037c283")))
        (sha256
          (base32
            "0sbp3f72dcln8y789vjdmg73lxvyb4qs4pb5mg452b3y8c8xlj30"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-emacsql))
    (home-page
      "https://github.com/cireu/counsel-ffdata")
    (synopsis "Use ivy to access firefox data")
    (description
      "Documentation at https://melpa.org/#/counsel-ffdata")
    (license #f)))

(define-public emacs-counsel-gtags
  (package
    (name "emacs-counsel-gtags")
    (version "20210222.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/FelipeLema/emacs-counsel-gtags.git")
               (commit
                 "1d52eaeffeb60266434d4f7416a108ca058fde91")))
        (sha256
          (base32
            "13jx6hscdcfqwzk1pcmzrv7frglcnd1ywl22ddxzzymi339r4lyj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://github.com/FelipeLema/emacs-counsel-gtags")
    (synopsis "ivy for GNU global")
    (description
      "Documentation at https://melpa.org/#/counsel-gtags")
    (license #f)))

(define-public emacs-counsel-jq
  (package
    (name "emacs-counsel-jq")
    (version "20210329.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/200ok-ch/counsel-jq.git")
               (commit
                 "8cadd2e96470402ede4881b4e955872976443689")))
        (sha256
          (base32
            "1chfrzkqfsw1rlwkb3k7v827fwipg0cish22rr3sxxydxr7kysx5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-swiper emacs-ivy))
    (home-page
      "https://github.com/200ok-ch/counsel-jq")
    (synopsis
      "Live preview of \"jq\" queries using counsel")
    (description
      "Documentation at https://melpa.org/#/counsel-jq")
    (license #f)))

(define-public emacs-counsel-mairix
  (package
    (name "emacs-counsel-mairix")
    (version "20210422.649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~ane/counsel-mairix")
               (commit
                 "39fa2ad10a5f899cb3f3275f9a6ebd166c51216a")))
        (sha256
          (base32
            "1z5qn9k68413jr946dy53l02zk2b1qx6wl5w3gp0jh34i3b6yk2y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page "https://sr.ht/~ane/counsel-mairix")
    (synopsis "Counsel interface for Mairix")
    (description
      "Documentation at https://melpa.org/#/counsel-mairix")
    (license #f)))

(define-public emacs-counsel-notmuch
  (package
    (name "emacs-counsel-notmuch")
    (version "20181203.935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fuxialexander/counsel-notmuch.git")
               (commit
                 "a4a1562935e4180c42524c51609d1283e9be0688")))
        (sha256
          (base32
            "01k1321d961kc2i660a5595bqk0d85f16snsxngsn5si6y83kqr7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-notmuch emacs-s))
    (home-page
      "https://github.com/fuxialexander/counsel-notmuch")
    (synopsis
      "Search emails in Notmuch asynchronously with Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-notmuch")
    (license #f)))

(define-public emacs-counsel-org-capture-string
  (package
    (name "emacs-counsel-org-capture-string")
    (version "20200810.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/counsel-org-capture-string.git")
               (commit
                 "dbb7d95f99d7910d76ffc2d024580088a34ec444")))
        (sha256
          (base32
            "1pymgwvjiagsx9dh9678x3i8ds1s7l4s182dr2p9rpjiwya48l6x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/akirak/counsel-org-capture-string")
    (synopsis "Counsel for org-capture-string")
    (description
      "Documentation at https://melpa.org/#/counsel-org-capture-string")
    (license #f)))

(define-public emacs-counsel-org-clock
  (package
    (name "emacs-counsel-org-clock")
    (version "20200810.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/counsel-org-clock.git")
               (commit
                 "6ba0f2ac7e4e5b8c1baec90296d9f24407d8d632")))
        (sha256
          (base32
            "1kp83cql4gn9g3d8g5mw3mrmpfj407kzpsi5wmwl1jr1pmw3v3jc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-dash))
    (home-page
      "https://github.com/akirak/counsel-org-clock")
    (synopsis "Counsel commands for org-clock")
    (description
      "Documentation at https://melpa.org/#/counsel-org-clock")
    (license #f)))

(define-public emacs-counsel-osx-app
  (package
    (name "emacs-counsel-osx-app")
    (version "20160821.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/counsel-osx-app.git")
               (commit
                 "b1c54cbc033c4939966910d85ce035503079e108")))
        (sha256
          (base32
            "0p3j60hjai3v8yny9zlzbxppy0pl9s3yf4x6z5rac6n86xx0iix8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/d12frosted/counsel-osx-app")
    (synopsis
      "launch osx applications via ivy interface")
    (description
      "Documentation at https://melpa.org/#/counsel-osx-app")
    (license #f)))

(define-public emacs-counsel-projectile
  (package
    (name "emacs-counsel-projectile")
    (version "20211004.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericdanan/counsel-projectile.git")
               (commit
                 "e30150792a96968f55f34638cbfe63eaa30839cc")))
        (sha256
          (base32
            "1vp39r5njfzchkqv9g0w77whazp070anh9gmbkp3z4n3xxbik27f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-projectile))
    (home-page
      "https://github.com/ericdanan/counsel-projectile")
    (synopsis "Ivy integration for Projectile")
    (description
      "Documentation at https://melpa.org/#/counsel-projectile")
    (license #f)))

(define-public emacs-counsel-pydoc
  (package
    (name "emacs-counsel-pydoc")
    (version "20171018.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/co-dh/pydoc_utils.git")
               (commit
                 "1d8ff8ca3b9d69453cde423b1887fbb490a95c9e")))
        (sha256
          (base32
            "06kf93y8wb9nwvs70xi4lkd5x4g6sl8f83diy2wl7ha657dwx3m8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/co-dh/pydoc_utils")
    (synopsis "run pydoc with counsel")
    (description
      "Documentation at https://melpa.org/#/counsel-pydoc")
    (license #f)))

(define-public emacs-counsel-spotify
  (package
    (name "emacs-counsel-spotify")
    (version "20200818.2055")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lautaro-Garcia/counsel-spotify.git")
               (commit
                 "2743ad52a9def53534fd505397fbe1ac49e53015")))
        (sha256
          (base32
            "1xrh06w3pszp4gygwsyjz7b5w2ffqmnh6rh891ydbhysp586hk0v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/Lautaro-Garcia/counsel-spotify")
    (synopsis
      "Control Spotify search and select music with Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-spotify")
    (license #f)))

(define-public emacs-counsel-test
  (package
    (name "emacs-counsel-test")
    (version "20190819.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xmagpie/counsel-test.git")
               (commit
                 "7fc4e5d0d65c53edbcb4c25917bcf7faaea36ec7")))
        (sha256
          (base32
            "1xlcn99iizfv3wi701r6q176wicvpdsrz9k1jbyr65r6aw8am8fl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-s))
    (arguments
      '(#:files (:defaults "counsel-test.el")))
    (home-page
      "http://github.com/xmagpie/counsel-test")
    (synopsis "Browse and execute tests with ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-test")
    (license #f)))

(define-public emacs-counsel-toki
  (package
    (name "emacs-counsel-toki")
    (version "20230705.1638")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emiflake/counsel-toki.git")
               (commit
                 "0204768739d76338a2702ca10363b5e48a2baeb4")))
        (sha256
          (base32
            "0pfqca0slyddyp3ym45rnnli2rma1ihw2rj6fs20k3xp3n6r4118"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-ivy))
    (home-page
      "https://github.com/emiflake/counsel-toki")
    (synopsis
      "Counsel support for toki pona dictionary lookup")
    (description
      "Documentation at https://melpa.org/#/counsel-toki")
    (license #f)))

(define-public emacs-counsel-tramp
  (package
    (name "emacs-counsel-tramp")
    (version "20230714.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-counsel-tramp.git")
               (commit
                 "70dcc6b9da5e76fefbc92646e7d780b2a06ca93f")))
        (sha256
          (base32
            "10vbna3gkv3ml2bi64y80yqasvmyfhz96x66hjkiqdg6bp0xsbrn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-counsel))
    (home-page
      "https://github.com/masasam/emacs-counsel-tramp")
    (synopsis
      "Tramp ivy interface for ssh, docker, vagrant")
    (description
      "Documentation at https://melpa.org/#/counsel-tramp")
    (license #f)))

(define-public emacs-counsel-web
  (package
    (name "emacs-counsel-web")
    (version "20210609.2156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mnewt/counsel-web.git")
               (commit
                 "1359b3b204fcdac7a3d6664c7d540a88b5acecfd")))
        (sha256
          (base32
            "1y5dnhsx5q8jvrr5hjr8cp53nvdq25c9q9im61ym75nccl9lwp4v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-counsel emacs-request))
    (home-page
      "https://github.com/mnewt/counsel-web")
    (synopsis "Search the Web using Ivy")
    (description
      "Documentation at https://melpa.org/#/counsel-web")
    (license #f)))

(define-public emacs-counsel-world-clock
  (package
    (name "emacs-counsel-world-clock")
    (version "20190709.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kchenphy/counsel-world-clock.git")
               (commit
                 "674e4c6b82a92ea765af97cc5f017b357284c7dc")))
        (sha256
          (base32
            "1wm6g6g5jlk3k2h2zb6mjzdnl95yr3x7hk8x1ikpbpfd4xdc64kb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-s))
    (home-page
      "https://github.com/kchenphy/counsel-world-clock")
    (synopsis "Display world clock using Ivy.")
    (description
      "Documentation at https://melpa.org/#/counsel-world-clock")
    (license #f)))

(define-public emacs-countdown
  (package
    (name "emacs-countdown")
    (version "20190626.244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/countdown.el.git")
               (commit
                 "139dea91fc818d65944aca5f16c9626abbdfbf04")))
        (sha256
          (base32
            "0khwqwwsp2zhz7x2w7qcsdh5vmk3ybshj9isa6zr2ygag8aag13h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-stream))
    (home-page
      "https://github.com/xuchunyang/countdown.el")
    (synopsis "Countdown using big LCD-like digits")
    (description
      "Documentation at https://melpa.org/#/countdown")
    (license #f)))

(define-public emacs-cov
  (package
    (name "emacs-cov")
    (version "20231007.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/cov.git")
               (commit
                 "42bf07c6ab51ceb45753c798bcbc3327a9230ed5")))
        (sha256
          (base32
            "1jwkwfyc1mxlywjhdb0322ihq2igjsy9k03wpwk0zbnmj4zdip0r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-elquery))
    (home-page "https://github.com/AdamNiederer/cov")
    (synopsis "Show coverage stats in the fringe.")
    (description
      "Documentation at https://melpa.org/#/cov")
    (license #f)))

(define-public emacs-coverage
  (package
    (name "emacs-coverage")
    (version "20191113.1958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/trezona-lecomte/coverage.git")
               (commit
                 "6e3c6f2dcb759a76086adeeb1fdfe83e4f082482")))
        (sha256
          (base32
            "1l2vpyv22f77r2nd1bxf4mggmarb621dl7fnskp5hizhc5sfxi4f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ov))
    (home-page
      "https://github.com/trezona-lecomte/coverage")
    (synopsis "Code coverage line highlighting")
    (description
      "Documentation at https://melpa.org/#/coverage")
    (license #f)))

(define-public emacs-coverlay
  (package
    (name "emacs-coverlay")
    (version "20190414.940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twada/coverlay.el.git")
               (commit
                 "0beae208d0e7d746a94385428bd61aa5cd7ea828")))
        (sha256
          (base32
            "1qf1s0997n6bfx50bd0jln25p7z6y8pfibijnbqcg2011xmv5dqh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/twada/coverlay.el")
    (synopsis "Test coverage overlays")
    (description
      "Documentation at https://melpa.org/#/coverlay")
    (license #f)))

(define-public emacs-cowsay
  (package
    (name "emacs-cowsay")
    (version "20210510.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-cowsay.git")
               (commit
                 "d8a72a311c6875f1aef6a30b3d23a1b02df75941")))
        (sha256
          (base32
            "0sczdlhpqs0pgka426ngvvcf01c6lvgk2aykajc5b2zgxywkfg40"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-cowsay")
    (synopsis
      "Poorly drawn ASCII cartoons saying things")
    (description
      "Documentation at https://melpa.org/#/cowsay")
    (license #f)))

(define-public emacs-cp5022x
  (package
    (name "emacs-cp5022x")
    (version "20120323.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/awasira/cp5022x.el.git")
               (commit
                 "ea7327dd75e54539576916f592ae1be98179ae35")))
        (sha256
          (base32
            "1z67x4a0aricd9q6i2w33k74alddl6w0rijjhzyxwml7ibhbvphz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "cp50220, cp50221, cp50222 coding system")
    (description
      "Documentation at https://melpa.org/#/cp5022x")
    (license #f)))

(define-public emacs-cpanfile-mode
  (package
    (name "emacs-cpanfile-mode")
    (version "20161001.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zakame/cpanfile-mode.git")
               (commit
                 "eda675703525198df1f76ddf250bffa40217ec5d")))
        (sha256
          (base32
            "07xivp1i9f884gs17lhp5jm0zk916c7gwazxnkm6m8rl3z2mcq0l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zakame/cpanfile-mode")
    (synopsis "Major mode for cpanfiles")
    (description
      "Documentation at https://melpa.org/#/cpanfile-mode")
    (license #f)))

(define-public emacs-cpp-auto-include
  (package
    (name "emacs-cpp-auto-include")
    (version "20210318.2217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/cpp-auto-include.git")
               (commit
                 "0ce829f27d466c083e78b9fe210dcfa61fb417f4")))
        (sha256
          (base32
            "0160hxapdmbj7nc0wksk69xhc3r3lcpjxlbfkygi3z8d4xv48ccp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/cpp-auto-include")
    (synopsis
      "Insert and delete C++ header files automatically")
    (description
      "Documentation at https://melpa.org/#/cpp-auto-include")
    (license #f)))

(define-public emacs-cpputils-cmake
  (package
    (name "emacs-cpputils-cmake")
    (version "20181006.328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/cpputils-cmake.git")
               (commit
                 "64b2b05eff5398b4cd522e66efaf14553ab18ff4")))
        (sha256
          (base32
            "0kmqk0ba9cacss3m34a8sdnmdir4ci7mv3j176ylm5af0x9yqc45"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/cpputils-cmake")
    (synopsis
      "Easy realtime C++ syntax check and IntelliSense with CMake.")
    (description
      "Documentation at https://melpa.org/#/cpputils-cmake")
    (license #f)))

(define-public emacs-cpu-sos
  (package
    (name "emacs-cpu-sos")
    (version "20200409.2356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/cpu-sos.git")
               (commit
                 "1594b76d4ad3a6e3c471d82da366226d156e6226")))
        (sha256
          (base32
            "1pqw1gilj3m35fqaj5j51ggmxzwhdiks0k36hxmw3ihr63am0j5f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oitofelix/cpu-sos")
    (synopsis "S.O.S. from a CPU in distress")
    (description
      "Documentation at https://melpa.org/#/cpu-sos")
    (license #f)))

(define-public emacs-cql-mode
  (package
    (name "emacs-cql-mode")
    (version "20190315.225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/cql-mode.git")
               (commit
                 "d400c046850d3cf404778b2c47d6be4ff84ca04b")))
        (sha256
          (base32
            "016fs984fbn9k6q17mpxq8gbpspai71r52da8aq31f3jijxmrh5a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Yuki-Inoue/cql-mode")
    (synopsis "Major mode for editting CQLs")
    (description
      "Documentation at https://melpa.org/#/cql-mode")
    (license #f)))

(define-public emacs-cquery
  (package
    (name "emacs-cquery")
    (version "20190118.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cquery-project/emacs-cquery.git")
               (commit
                 "555e50984ebda177421fdcdc8c76cb29235d9694")))
        (sha256
          (base32
            "1d1m1lgc93fkg7dxb8d6ch68vh6w1zp3yy31bv78vaz8siqrmk16"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash))
    (home-page
      "https://github.com/jacobdufault/cquery")
    (synopsis "cquery client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/cquery")
    (license #f)))

(define-public emacs-crappy-jsp-mode
  (package
    (name "emacs-crappy-jsp-mode")
    (version "20140311.931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/crappy-jsp-mode.git")
               (commit
                 "6c45ab92b452411cc0fab9bcee2f456276b4fc40")))
        (sha256
          (base32
            "12g6l6xlbs9h24q5lk8yjgk91xqd7r3v7r6czy10r09cmfjmkxbb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A pretty crappy major-mode for jsp.")
    (description
      "Documentation at https://melpa.org/#/crappy-jsp-mode")
    (license #f)))

(define-public emacs-creamsody-theme
  (package
    (name "emacs-creamsody-theme")
    (version "20230826.1651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-creamsody.git")
               (commit
                 "5f1bd04241cae39845336a18ea5eab3c5046f6ec")))
        (sha256
          (base32
            "0l6awpvrp1943vv5v7shpc50jijl146zp1syk5dis0qp8a698mz8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-creamsody")
    (synopsis "Straight from the soda fountain")
    (description
      "Documentation at https://melpa.org/#/creamsody-theme")
    (license #f)))

(define-public emacs-create-link
  (package
    (name "emacs-create-link")
    (version "20220621.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kijimaD/create-link.git")
               (commit
                 "276fafcc6fb568ede256c8d459c3beb408ad9b46")))
        (sha256
          (base32
            "0b174bvd004v8mcm3pxckxy2pc821jizj4x30r7ar0dz6xr0pzhy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kijimaD/create-link")
    (synopsis "Smart format link generator")
    (description
      "Documentation at https://melpa.org/#/create-link")
    (license #f)))

(define-public emacs-creds
  (package
    (name "emacs-creds")
    (version "20140510.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ardumont/emacs-creds.git")
               (commit
                 "b059397a7d59481f05fbb1bb9c8d3c2c69226482")))
        (sha256
          (base32
            "0l4bvk3m355b25d7pdnhczn3fckbq0rg2l4r0a0d94004ksvylqa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/ardumont/emacs-creds")
    (synopsis
      "A parser credentials file library (not limited to credentials entries)")
    (description
      "Documentation at https://melpa.org/#/creds")
    (license #f)))

(define-public emacs-creole
  (package
    (name "emacs-creole")
    (version "20140924.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/elwikicreole.git")
               (commit
                 "7d5cffe93857f6c75ca09ac79c0e47b8d4410e53")))
        (sha256
          (base32
            "18c4jfjnhb7asdhwj41g06cp9rz5xd7bbx2s1xvk6gahay27rlrv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-noflet emacs-kv))
    (arguments '(#:files ("creole.el")))
    (home-page "unspecified")
    (synopsis
      "A parser for the Creole Wiki language")
    (description
      "Documentation at https://melpa.org/#/creole")
    (license #f)))

(define-public emacs-creole-mode
  (package
    (name "emacs-creole-mode")
    (version "20130722.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/creole-mode.git")
               (commit
                 "b5e79b2ec5f19fb5aacf689b5febc3e0b61515c4")))
        (sha256
          (base32
            "0japww5x89vd1ahjm2bc3biz6wxv94vvqq5fyyzkqsblgk5bys0h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicferrier/creole-mode")
    (synopsis "a markup mode for creole")
    (description
      "Documentation at https://melpa.org/#/creole-mode")
    (license #f)))

(define-public emacs-cricbuzz
  (package
    (name "emacs-cricbuzz")
    (version "20180804.2254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lepisma/cricbuzz.el.git")
               (commit
                 "0b95d45991bbcd2fa58d96ce921f6a57ba42c153")))
        (sha256
          (base32
            "1s77a2lfy7nnaxm3ai9dg8lbdxp0892z4gr0yxqrgzawc4qcbb3x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-enlive emacs-f emacs-dash emacs-s))
    (home-page
      "https://github.com/lepisma/cricbuzz.el")
    (synopsis
      "Cricket scores from cricbuzz in emacs")
    (description
      "Documentation at https://melpa.org/#/cricbuzz")
    (license #f)))

(define-public emacs-crm-custom
  (package
    (name "emacs-crm-custom")
    (version "20160117.6")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/crm-custom.git")
               (commit
                 "f1aaccf64306a5f99d9bf7ba815d7ea41c15518d")))
        (sha256
          (base32
            "1kl6blr4dlz40gfc845071nhfms4fm59284ja2177bhghy3wmw6r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarwinAwardWinner/crm-custom")
    (synopsis
      "Alternate `completing-read-multiple' that uses `completing-read'")
    (description
      "Documentation at https://melpa.org/#/crm-custom")
    (license #f)))

(define-public emacs-crontab-mode
  (package
    (name "emacs-crontab-mode")
    (version "20210715.133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/crontab-mode.git")
               (commit
                 "7412f3df0958812bfcacd5875a409fa795fa8ecc")))
        (sha256
          (base32
            "0jfdak85r9j0qlbzc53mkbfqqgqs9ghg0x6fhlv8i22873y650gm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/crontab-mode")
    (synopsis "Major mode for crontab(5)")
    (description
      "Documentation at https://melpa.org/#/crontab-mode")
    (license #f)))

(define-public emacs-crossword
  (package
    (name "emacs-crossword")
    (version "20210614.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-crossword.git")
               (commit
                 "a8594b6e13f5e276aa9bc810ac74a8032bb1f678")))
        (sha256
          (base32
            "1in8y4fg79v0lx5k0bfhazppkhmb8x9xb0wrjpv3p877vy3687i9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Boruch-Baum/emacs-crossword")
    (synopsis "Download and play crossword puzzles")
    (description
      "Documentation at https://melpa.org/#/crossword")
    (license #f)))

(define-public emacs-crux
  (package
    (name "emacs-crux")
    (version "20231013.520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/crux.git")
               (commit
                 "3998b753d0eb4fc5a64ed9c9f05a1427ff4be22d")))
        (sha256
          (base32
            "00l0y7alcsgmhiif9isjkw6i7lgq540414m9kzadjqnf49jq28zr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bbatsov/crux")
    (synopsis
      "A Collection of Ridiculously Useful eXtensions")
    (description
      "Documentation at https://melpa.org/#/crux")
    (license #f)))

(define-public emacs-cryptol-mode
  (package
    (name "emacs-cryptol-mode")
    (version "20190531.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thoughtpolice/cryptol-mode.git")
               (commit
                 "81ebbde83f7cb75b2dfaefc09de6a1703068c769")))
        (sha256
          (base32
            "1y24hssckqi8bapm24b6zw7lagdsh3gaacvq5pscgnjbqpk2rlvp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/thoughtpolice/cryptol-mode")
    (synopsis "Cryptol major mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/cryptol-mode")
    (license #f)))

(define-public emacs-crystal-mode
  (package
    (name "emacs-crystal-mode")
    (version "20230720.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-lang-tools/emacs-crystal-mode.git")
               (commit
                 "e5b54c3ad728d791772ceccca607d0434ddaf985")))
        (sha256
          (base32
            "0jzhr92fbf01z5gr79h5ck696apy5rr7bjblxda1r1anpjayahm4"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("crystal-mode.el")))
    (home-page
      "https://github.com/crystal-lang-tools/emacs-crystal-mode")
    (synopsis "Major mode for editing Crystal files")
    (description
      "Documentation at https://melpa.org/#/crystal-mode")
    (license #f)))

(define-public emacs-crystal-playground
  (package
    (name "emacs-crystal-playground")
    (version "20180830.501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonrobot/crystal-playground.git")
               (commit
                 "fb3691b1281207b459c5be50015a626f356dc40d")))
        (sha256
          (base32
            "19bla2xhvr34vi33cibr2pc8jgasbwjj24vwnwx25w9471sbaszi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-crystal-mode))
    (home-page
      "https://github.com/jasonrobot/crystal-playground")
    (synopsis
      "Local crystal playground for short code snippets.")
    (description
      "Documentation at https://melpa.org/#/crystal-playground")
    (license #f)))

(define-public emacs-csgo-conf-mode
  (package
    (name "emacs-csgo-conf-mode")
    (version "20161209.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wynro/emacs-csgo-conf-mode.git")
               (commit
                 "57e7224f87a3ccc76b5564cc95fa0ff43bb6807c")))
        (sha256
          (base32
            "14wzh3rlq7xb8djncbjkfiq9hl5frp7gp42sz2ic7aky4qajbcdv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wynro/emacs-csgo-conf-mode")
    (synopsis
      "CS:GO Configuration files syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/csgo-conf-mode")
    (license #f)))

(define-public emacs-csharp-mode
  (package
    (name "emacs-csharp-mode")
    (version "20221126.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-csharp/csharp-mode.git")
               (commit
                 "d8b058c9e9d0429ea7e81d121ce19b064bd7e0f5")))
        (sha256
          (base32
            "1d0pf236xi4c7fazv67a53yrac24lilnkzp9pb55xm88gig7rfmz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-csharp/csharp-mode")
    (synopsis "C# mode derived mode")
    (description
      "Documentation at https://melpa.org/#/csharp-mode")
    (license #f)))

(define-public emacs-csound-mode
  (package
    (name "emacs-csound-mode")
    (version "20231024.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlolli/csound-mode.git")
               (commit
                 "2c9107a78048f16c4e274390eb3021e974372d64")))
        (sha256
          (base32
            "1sfmvqmgvvff56s39jb51sp9b5sz308y99b0xp4galw51s0vm4vq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-shut-up
            emacs-multi
            emacs-dash
            emacs-highlight))
    (home-page
      "https://github.com/hlolli/csound-mode")
    (synopsis
      "A major mode for interacting and coding Csound")
    (description
      "Documentation at https://melpa.org/#/csound-mode")
    (license #f)))

(define-public emacs-csproj-mode
  (package
    (name "emacs-csproj-mode")
    (version "20200801.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/csproj-mode.git")
               (commit
                 "a7f0f4610c976a28c41b9b8299892f88b5d0336c")))
        (sha256
          (base32
            "0j8m7rhkf98zqkg6zydcks6qs4msw6vz51nbqya23hka2wpz7f81"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/omajid/csproj-mode")
    (synopsis
      "Work with .NET project files (csproj, vbproj)")
    (description
      "Documentation at https://melpa.org/#/csproj-mode")
    (license #f)))

(define-public emacs-css-autoprefixer
  (package
    (name "emacs-css-autoprefixer")
    (version "20180311.1600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kkweon/emacs-css-autoprefixer.git")
               (commit
                 "386a5defc8543a3b87820f1761c075c7d1d93b38")))
        (sha256
          (base32
            "0ymba9bhzfi7kkrha4d4sn0hrc3sid4b5k8lhakwwdwafhym0jjb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kkweon/emacs-css-autoprefixer")
    (synopsis "Adds autoprefix to CSS")
    (description
      "Documentation at https://melpa.org/#/css-autoprefixer")
    (license #f)))

(define-public emacs-css-comb
  (package
    (name "emacs-css-comb")
    (version "20160416.559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bitspook/css-comb.el.git")
               (commit
                 "6fa45e5af8a8bd3af6c1154cde3540e32c4206ee")))
        (sha256
          (base32
            "0nvl6y90p9crk12j7aw0cqdjhli7xbrx3hqckxsnvrnxy4zax7nk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/channikhabra/css-comb.el")
    (synopsis
      "Sort CSS properties in a particular order using CSS Comb")
    (description
      "Documentation at https://melpa.org/#/css-comb")
    (license #f)))

(define-public emacs-css-eldoc
  (package
    (name "emacs-css-eldoc")
    (version "20220415.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenozeng/css-eldoc.git")
               (commit
                 "73ebf9757a043b56b7d3b5befec5a38e6754b9e5")))
        (sha256
          (base32
            "1x2lvq8fqxsybny24d4jnnwn97j652i931qgi5y99zz2f0bvg2gj"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("css-eldoc.el" "css-eldoc-hash-table.el")))
    (home-page "unspecified")
    (synopsis
      "an eldoc-mode plugin for CSS source code")
    (description
      "Documentation at https://melpa.org/#/css-eldoc")
    (license #f)))

(define-public emacs-cssh
  (package
    (name "emacs-cssh")
    (version "20150810.1709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/cssh.git")
               (commit
                 "2fe2754235225a59b63f08b130cfd4352e2e1c3f")))
        (sha256
          (base32
            "1xf2hy077frfz8qf91c0l0qppcjxzr4bsbb622bx6fidqkpa3a1a"))))
    (build-system melpa-build-system)
    (home-page "http://tapoueh.org/emacs/cssh.html")
    (synopsis "clusterssh implementation for emacs")
    (description
      "Documentation at https://melpa.org/#/cssh")
    (license #f)))

(define-public emacs-csv
  (package
    (name "emacs-csv")
    (version "20161113.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/u11/csv.el.git")
               (commit
                 "aa1dfa1263565d5fac3879c21d8ddf5f8915e411")))
        (sha256
          (base32
            "1vmazjrfcsa9aa9aw8bq5sazdhqvhxyj837dyw5lmh8gk7z0xdaa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Functions for reading and parsing CSV files.")
    (description
      "Documentation at https://melpa.org/#/csv")
    (license #f)))

(define-public emacs-ct
  (package
    (name "emacs-ct")
    (version "20230519.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neeasade/ct.el.git")
               (commit
                 "02f209fe6c8ad85c832d8f80193255d0bf78e218")))
        (sha256
          (base32
            "1vgjp6py9rf8xqv6lklk3l1p6sb57jfdskwpzna5y0rajg39bygr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hsluv))
    (home-page "https://github.com/neeasade/ct.el")
    (synopsis "Color Tools - a color api")
    (description
      "Documentation at https://melpa.org/#/ct")
    (license #f)))

(define-public emacs-ctable
  (package
    (name "emacs-ctable")
    (version "20210128.629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-ctable.git")
               (commit
                 "48b73742757a3ae5736d825fe49e00034cc453b5")))
        (sha256
          (base32
            "16yrx1z44xs24z2a0gwzf1xhhks1wrzafc5ihf6lbw843rq2jar0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ctable.el")))
    (home-page
      "https://github.com/kiwanami/emacs-ctable")
    (synopsis "Table component for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ctable")
    (license #f)))

(define-public emacs-ctags-update
  (package
    (name "emacs-ctags-update")
    (version "20190609.613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/ctags-update.git")
               (commit
                 "67faf248b92388442958a069263c62a345425a1b")))
        (sha256
          (base32
            "0442jdxvn33i0bnb4fspvpdn66gxqyazyc6n3wqjmpn3fqvzwsrp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jixiuf/ctags-update")
    (synopsis
      "(auto) update TAGS in parent directory using exuberant-ctags")
    (description
      "Documentation at https://melpa.org/#/ctags-update")
    (license #f)))

(define-public emacs-ctl-mode
  (package
    (name "emacs-ctl-mode")
    (version "20151202.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyr/emacs-grads.git")
               (commit
                 "1a13051db21b999c7682a015b33a03096ff9d891")))
        (sha256
          (base32
            "1d89gxyzv0z0nk7v1aa4qa0xfms2g2dsrr07cw0d99xsnyxfky31"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ctl-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing GrADS script files")
    (description
      "Documentation at https://melpa.org/#/ctl-mode")
    (license #f)))

(define-public emacs-ctrlf
  (package
    (name "emacs-ctrlf")
    (version "20221112.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/ctrlf.git")
               (commit
                 "9b4cf6c79a961f2bfbb949805aa300fcf1eb40a6")))
        (sha256
          (base32
            "061id540spjycgy2xshj8kwgdngkjinznhx2qp5pmqzzx7z7rpfb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/ctrlf")
    (synopsis "Emacs finally learns how to ctrl+F")
    (description
      "Documentation at https://melpa.org/#/ctrlf")
    (license #f)))

(define-public emacs-ctrlxo
  (package
    (name "emacs-ctrlxo")
    (version "20201021.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-ctrlxo.git")
               (commit
                 "8ad95a81bd1ece06ebe40e2a83490775db64b419")))
        (sha256
          (base32
            "1d84nx8zdy5jcfm4bavlg989ygv55gfb3mwjibsrbmn9vgckrdgr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-ctrlxo")
    (synopsis
      "Switch to the most recently used window")
    (description
      "Documentation at https://melpa.org/#/ctrlxo")
    (license #f)))

(define-public emacs-ctune
  (package
    (name "emacs-ctune")
    (version "20210205.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maurooaranda/ctune.git")
               (commit
                 "3f7abc6e74d4e5954b476ba9a1dc652f96b10c05")))
        (sha256
          (base32
            "1lcgkh0hhgx4rvc84kgbg3sczqp53gz6859c30hq1agn1zhbwrvy"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "doclicense.texi" "docstyle.texi"))))
    (home-page
      "https://github.com/maurooaranda/ctune")
    (synopsis "Tune out CC Mode Noise Macros")
    (description
      "Documentation at https://melpa.org/#/ctune")
    (license #f)))

(define-public emacs-ctxmenu
  (package
    (name "emacs-ctxmenu")
    (version "20140303.2142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-ctxmenu.git")
               (commit
                 "5c2376859562b98c07c985d2b483658e4c0e888e")))
        (sha256
          (base32
            "1jlr2miwqsg06hk2clvsrw9fa98m2n76qfq8qv5svrb8dpil04wb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-log4e emacs-yaxception))
    (home-page
      "https://github.com/aki2o/emacs-ctxmenu")
    (synopsis
      "Provide a context menu like right-click.")
    (description
      "Documentation at https://melpa.org/#/ctxmenu")
    (license #f)))

(define-public emacs-cubicaltt
  (package
    (name "emacs-cubicaltt")
    (version "20171108.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mortberg/cubicaltt.git")
               (commit
                 "a5c6f94bfc0da84e214641e0b87aa9649ea114ea")))
        (sha256
          (base32
            "1jwyqc86fyrxx9vkirgg97v6d1zdyg2f1l9nhvpjzm7zf77vmb98"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("cubicaltt.el")))
    (home-page
      "https://github.com/mortberg/cubicaltt")
    (synopsis "Mode for cubical type theory")
    (description
      "Documentation at https://melpa.org/#/cubicaltt")
    (license #f)))

(define-public emacs-cubicle-mode
  (package
    (name "emacs-cubicle-mode")
    (version "20221031.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cubicle-model-checker/cubicle.git")
               (commit
                 "7679c8452051ed5c89f891c72c6ada76757fc935")))
        (sha256
          (base32
            "1lkf849g6zqkshzj2845n1w58q1bxgqb85lh6w7ssi1m653mxhd1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/cubicle-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for the Cubicle model checker")
    (description
      "Documentation at https://melpa.org/#/cubicle-mode")
    (license #f)))

(define-public emacs-cucumber-goto-step
  (package
    (name "emacs-cucumber-goto-step")
    (version "20131210.519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gstamp/cucumber-goto-step.git")
               (commit
                 "f2713ffb26ebe1b757d1f2ea80e900b55e5895aa")))
        (sha256
          (base32
            "184plai32sn0indvi1dma6ykz907zgnrdyxdw6f5mghwca96g5kx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pcre2el))
    (home-page "http://orthogonal.me")
    (synopsis "Jump to cucumber step definition")
    (description
      "Documentation at https://melpa.org/#/cucumber-goto-step")
    (license #f)))

(define-public emacs-cuda-mode
  (package
    (name "emacs-cuda-mode")
    (version "20201013.2230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chachi/cuda-mode.git")
               (commit
                 "7f593518fd135fc6af994024bcb47986dfa502d2")))
        (sha256
          (base32
            "0ibap1k70b3c4fnyvgvnqdcxnchqwrpz20k2dk2lw3wgznv3bsx2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "NVIDIA CUDA Major Mode")
    (description
      "Documentation at https://melpa.org/#/cuda-mode")
    (license #f)))

(define-public emacs-cue-mode
  (package
    (name "emacs-cue-mode")
    (version "20220811.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/russell/cue-mode.git")
               (commit
                 "31c671d56e7884fa87ad0f1d27d0bb439dc65380")))
        (sha256
          (base32
            "19f71kwdpv5zrzl96wyc9w516cq1naigvyv7g3n7093yzmgwyj4w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/russell/cue-mode")
    (synopsis "Major mode for CUE language files")
    (description
      "Documentation at https://melpa.org/#/cue-mode")
    (license #f)))

(define-public emacs-cue-sheet-mode
  (package
    (name "emacs-cue-sheet-mode")
    (version "20230522.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterhoeg/cue-sheet-mode.git")
               (commit
                 "5174fa6cb692615d48d16eb268bd808e9081f687")))
        (sha256
          (base32
            "0nk2lclr3571gkr4z9w1grl04d02i2g839cxiydj1z6j5xh8zs94"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/peterhoeg/cue-sheet-mode")
    (synopsis
      "Major mode for editing CUE sheet files")
    (description
      "Documentation at https://melpa.org/#/cue-sheet-mode")
    (license #f)))

(define-public emacs-curl-to-elisp
  (package
    (name "emacs-curl-to-elisp")
    (version "20201124.1012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/curl-to-elisp.git")
               (commit
                 "63d8d9c6d5efb8af8aa88042bfc0690ba699ef64")))
        (sha256
          (base32
            "1k43gr7jaw5m7s6rrwmcygam3rmxin5yhbr06bn7ga2c4jc9g0d0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/curl-to-elisp")
    (synopsis
      "Convert cURL command to Emacs Lisp code")
    (description
      "Documentation at https://melpa.org/#/curl-to-elisp")
    (license #f)))

(define-public emacs-currency-convert
  (package
    (name "emacs-currency-convert")
    (version "20210427.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-currency-convert.git")
               (commit
                 "12805ea66aa8421de5eedda39d23f709de634460")))
        (sha256
          (base32
            "1p304k3s0iawsrlpndc9vrjxm1vv4nlkv0fb51x8pmcqw5ivy1dg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-currency-convert")
    (synopsis "Currency converter")
    (description
      "Documentation at https://melpa.org/#/currency-convert")
    (license #f)))

(define-public emacs-current-word-highlight
  (package
    (name "emacs-current-word-highlight")
    (version "20210323.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kijimaD/current-word-highlight.git")
               (commit
                 "d860f4e170ffa4cef840da93647f458cc409d554")))
        (sha256
          (base32
            "1mpimgsqkanvgmdvh9zm0vsyf6j4mhsf65p7kx389as82qb7hdy2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kijimaD/current-word-highlight")
    (synopsis
      "Highlight the current word minor mode")
    (description
      "Documentation at https://melpa.org/#/current-word-highlight")
    (license #f)))

(define-public emacs-curry-on-theme
  (package
    (name "emacs-curry-on-theme")
    (version "20210322.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mvarela/Curry-On-theme.git")
               (commit
                 "b53a61d443cc75906d9f97e19f19be71f1e19bc4")))
        (sha256
          (base32
            "1idh5by5fzndaywf86lckz7mxr5kxggbzlgpjjvmahlnma110a1j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mvarela/Curry-On-Theme")
    (synopsis "A low contrast color theme")
    (description
      "Documentation at https://melpa.org/#/curry-on-theme")
    (license #f)))

(define-public emacs-cursor-flash
  (package
    (name "emacs-cursor-flash")
    (version "20210722.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-cursor-flash.git")
               (commit
                 "6bb54a1e2e1bf9df80926718b1b8b9ee49080484")))
        (sha256
          (base32
            "1zav30zkf7ir5zwy9625wldg4kaf8bk3mn1py5sidihpn299319b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Boruch-Baum/emacs-cursor-flash")
    (synopsis
      "Highlight the cursor on buffer/window-switch")
    (description
      "Documentation at https://melpa.org/#/cursor-flash")
    (license #f)))

(define-public emacs-cursor-test
  (package
    (name "emacs-cursor-test")
    (version "20131207.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ainame/cursor-test.el.git")
               (commit
                 "e09956e048b88fd2ee8dd90b5678baed8b04d31b")))
        (sha256
          (base32
            "0wmnhizv4jfcl1w9za4ydxf6xwxgm5vwmn1zi5vn70zmv4d6r49l"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("cursor-test.el")))
    (home-page
      "https://github.com/ainame/cursor-test.el")
    (synopsis
      "testing library for cursor position in emacs.")
    (description
      "Documentation at https://melpa.org/#/cursor-test")
    (license #f)))

(define-public emacs-cwl-mode
  (package
    (name "emacs-cwl-mode")
    (version "20210510.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/cwl-mode.git")
               (commit
                 "23a333119efaac78453cba95d316109805bd6aec")))
        (sha256
          (base32
            "0507acyr9h4646scx316niq27vir6hl2gsgz7wdbiw0cb2drfkd1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (home-page "https://github.com/tom-tan/cwl-mode")
    (synopsis "A major mode for editing CWL")
    (description
      "Documentation at https://melpa.org/#/cwl-mode")
    (license #f)))

(define-public emacs-cyanometric-theme
  (package
    (name "emacs-cyanometric-theme")
    (version "20220822.301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-cyanometric.git")
               (commit
                 "9b20e33a8cc2c76bfe6ad45916be6881386707f5")))
        (sha256
          (base32
            "0hhwm9dwzf7dqzacxppgq0c64abjn29h0lyf620q40wvhq79qkwj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-cyanometric")
    (synopsis
      "A Theme with overwhelming bias towards cyan")
    (description
      "Documentation at https://melpa.org/#/cyanometric-theme")
    (license #f)))

(define-public emacs-cybercafe-theme
  (package
    (name "emacs-cybercafe-theme")
    (version "20230923.200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gboncoffee/cybercafe-emacs-theme.git")
               (commit
                 "62346a69e59a9d19883e081c58cc4bce44dd0aef")))
        (sha256
          (base32
            "07aw90xmhvpdf7imsxykvrb90sfxh00brp3y5b1v698wddng43qi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/gboncoffee/cybercafe-emacs-theme")
    (synopsis "Cybercafe color theme")
    (description
      "Documentation at https://melpa.org/#/cybercafe-theme")
    (license #f)))

(define-public emacs-cyberpunk-2019-theme
  (package
    (name "emacs-cyberpunk-2019-theme")
    (version "20191008.1133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/the-frey/cyberpunk-2019.git")
               (commit
                 "7e40c37210c363b2819fd9bb98a73101d7a3c206")))
        (sha256
          (base32
            "0fgh39lyq49b4zm10fiqhqzafwrg2vmpfn8k1frdkadansq4jl7z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/the-frey/cyberpunk-2019")
    (synopsis "A retina-scorching cyberpunk theme")
    (description
      "Documentation at https://melpa.org/#/cyberpunk-2019-theme")
    (license #f)))

(define-public emacs-cyberpunk-theme
  (package
    (name "emacs-cyberpunk-theme")
    (version "20200601.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/n3mo/cyberpunk-theme.el.git")
               (commit
                 "cbd0d7193e69ff9e98262eb06aee3d27667ff5f5")))
        (sha256
          (base32
            "16nd57rwld78brcwx6vjib2v3l9xsiv7bxhbn2kilg1p75m3ngpx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/n3mo/cyberpunk-theme.el")
    (synopsis "Cyberpunk Color Theme")
    (description
      "Documentation at https://melpa.org/#/cyberpunk-theme")
    (license #f)))

(define-public emacs-cycbuf
  (package
    (name "emacs-cycbuf")
    (version "20131203.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martinp26/cycbuf.git")
               (commit
                 "1079b41c3eb27d65b66d4399959bb6253f84858e")))
        (sha256
          (base32
            "1d5i8sm1xrsp4v4myidfyb40hm3wp7hgva7dizg9gbb7prmn1p5w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/martinp26/cycbuf")
    (synopsis
      "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el")
    (description
      "Documentation at https://melpa.org/#/cycbuf")
    (license #f)))

(define-public emacs-cycle-at-point
  (package
    (name "emacs-cycle-at-point")
    (version "20230805.925")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/cycle-at-point-"
               version
               ".tar"))
        (sha256
          (base32
            "1q4x7n8k3g6hsvp9vyahp883bakpdgiw7xnkqdxz6gzg13m2px9f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-recomplete))
    (home-page
      "https://codeberg.org/ideasman42/emacs-cycle-at-point")
    (synopsis
      "Cycle (rotate) the thing under the cursor")
    (description
      "Documentation at https://melpa.org/#/cycle-at-point")
    (license #f)))

(define-public emacs-cycle-resize
  (package
    (name "emacs-cycle-resize")
    (version "20160521.1557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pierre-lecocq/cycle-resize.git")
               (commit
                 "7d255d6fe85f12c967a0f7fcfcf18633be194c88")))
        (sha256
          (base32
            "1bmdjr99g50dzr4y1jxixfjhqmhrzblmpiyjhh5l5gqmdhammm4k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pierre-lecocq/cycle-resize")
    (synopsis
      "Cycle resize the current window horizontally or vertically")
    (description
      "Documentation at https://melpa.org/#/cycle-resize")
    (license #f)))

(define-public emacs-cycle-themes
  (package
    (name "emacs-cycle-themes")
    (version "20150403.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/toroidal-code/cycle-themes.el.git")
               (commit
                 "6e125d11fdbc6b78fc9f219eb2609a5e29815898")))
        (sha256
          (base32
            "125s6vwbb9zpx6h3vrxnn7nr8pb45vhxd70ba2r3f87dlxah93am"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/toroidal-code/cycle-themes.el")
    (synopsis
      "A global minor mode to make switching themes easier")
    (description
      "Documentation at https://melpa.org/#/cycle-themes")
    (license #f)))

(define-public emacs-cyphejor
  (package
    (name "emacs-cyphejor")
    (version "20230606.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/cyphejor.git")
               (commit
                 "27d262e6d7520c47b8dc780ac7e587af5c52a0b2")))
        (sha256
          (base32
            "1b45bdnvyql4yvmjjaknx7dbhszygx0n6h9ld5qhkjwzsrbqjj8b"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/cyphejor")
    (synopsis
      "Shorten major mode names using user-defined rules")
    (description
      "Documentation at https://melpa.org/#/cyphejor")
    (license #f)))

(define-public emacs-cypher-mode
  (package
    (name "emacs-cypher-mode")
    (version "20151110.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fxbois/cypher-mode.git")
               (commit
                 "ce8543d7877c736c574a17b49874c9dcdc7a06d6")))
        (sha256
          (base32
            "0vbcq807jpjssabmyjcdkpp6nnx1288is2c6x79dkrviw2xxw3qf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fxbois/cypher-mode")
    (synopsis
      "major mode for editing cypher scripts")
    (description
      "Documentation at https://melpa.org/#/cypher-mode")
    (license #f)))

(define-public emacs-cython-mode
  (package
    (name "emacs-cython-mode")
    (version "20221130.1257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cython/emacs-cython-mode.git")
               (commit
                 "3e4790559d3168fe992cf2aa62f01423038cedb5")))
        (sha256
          (base32
            "03kilbl9mp1hs7mpqb6vs6sbmhplpm4qg93sn1vhn34q710iccb0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for editing Cython files")
    (description
      "Documentation at https://melpa.org/#/cython-mode")
    (license #f)))

(define-public emacs-czech-holidays
  (package
    (name "emacs-czech-holidays")
    (version "20160113.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chkhd/czech-holidays.git")
               (commit
                 "d136fa09a152b3cd80db6d55c7b4ddfe07b90fbf")))
        (sha256
          (base32
            "1ck1a61m0kjynqwzbw9hnc7y2a6gd6l1430wm7mw3qqsq959qwm6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Adds a list of Czech public holidays to Emacs calendar")
    (description
      "Documentation at https://melpa.org/#/czech-holidays")
    (license #f)))

(define-public emacs-d-mode
  (package
    (name "emacs-d-mode")
    (version "20230827.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Emacs-D-Mode-Maintainers/Emacs-D-Mode.git")
               (commit
                 "0c8c9e3a5ebb7bfd55bea138a8ad4390abf6b383")))
        (sha256
          (base32
            "1n71rigcwhwidac4jrvb1kagqyk7zd9j9gwqmn56id0n75m3lggv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "D Programming Language major mode for (X)Emacs")
    (description
      "Documentation at https://melpa.org/#/d-mode")
    (license #f)))

(define-public emacs-d2-mode
  (package
    (name "emacs-d2-mode")
    (version "20230210.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andorsk/d2-mode.git")
               (commit
                 "cbe7b16141bd80fe4344f0403e61fd7ee4e0fd89")))
        (sha256
          (base32
            "1mdiafxbfz31blp7c86m6sp0dmn4yhnbs2mhzh75mczsg0gzqc4v"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/andorsk/d2-mode")
    (synopsis
      "Major mode for working with d2 graphs")
    (description
      "Documentation at https://melpa.org/#/d2-mode")
    (license #f)))

(define-public emacs-dactyl-mode
  (package
    (name "emacs-dactyl-mode")
    (version "20140906.1725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/luxbock/dactyl-mode.git")
               (commit
                 "cc55fe6b987271d9647492b8df4c812d884f661f")))
        (sha256
          (base32
            "0fp40cyamchc9qq5vbpxgq3yp6vs8p3ncg46mjzr54psy3fc86dm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/luxbock/dactyl-mode")
    (synopsis
      "Major mode for editing Pentadactyl config files")
    (description
      "Documentation at https://melpa.org/#/dactyl-mode")
    (license #f)))

(define-public emacs-dad-joke
  (package
    (name "emacs-dad-joke")
    (version "20170928.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/dad-joke.el.git")
               (commit
                 "bee47e7b746b403228fa7d7361cb095de19ac9ba")))
        (sha256
          (base32
            "14snnnjs28jg6k8x6g90m3dbcx10306ipcd256d3l6czk9p17vpd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/dad-joke.el")
    (synopsis "Get/display dad jokes")
    (description
      "Documentation at https://melpa.org/#/dad-joke")
    (license #f)))

(define-public emacs-daemons
  (package
    (name "emacs-daemons")
    (version "20231030.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cbowdon/daemons.el.git")
               (commit
                 "c329ca135e3e33a4bd6d898d2e803a6ca4e64b47")))
        (sha256
          (base32
            "0b7pml68w9v0qzi492470awdzy670mblw4459xyyyzj9p978lj8b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-compat))
    (home-page
      "https://github.com/cbowdon/daemons.el")
    (synopsis
      "UI for managing init system daemons (services)")
    (description
      "Documentation at https://melpa.org/#/daemons")
    (license #f)))

(define-public emacs-dakrone-light-theme
  (package
    (name "emacs-dakrone-light-theme")
    (version "20170808.2140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakrone/dakrone-light-theme.git")
               (commit
                 "06f198dc8b4ca7421990b30a23d89c8e0b8c5de4")))
        (sha256
          (base32
            "01vqlsv44h2ah79c8jqv8vkqvgmhqx2w3qbq07l7fx3zkpgjfmpy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dakrone/dakrone-light-theme")
    (synopsis "dakrone's custom light theme")
    (description
      "Documentation at https://melpa.org/#/dakrone-light-theme")
    (license #f)))

(define-public emacs-dakrone-theme
  (package
    (name "emacs-dakrone-theme")
    (version "20170801.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakrone/dakrone-theme.git")
               (commit
                 "232ad1be5f3572dcbdf528f1655109aa355a6937")))
        (sha256
          (base32
            "0p51zni42hv090vv6mk9v0v88achmgxlsmlr40y8y6ng57w51r4s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dakrone/dakrone-theme")
    (synopsis "dakrone's custom dark theme")
    (description
      "Documentation at https://melpa.org/#/dakrone-theme")
    (license #f)))

(define-public emacs-dall-e-shell
  (package
    (name "emacs-dall-e-shell")
    (version "20231109.913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/chatgpt-shell.git")
               (commit
                 "58bb4d8eb9218be4925201a39596387d160f4593")))
        (sha256
          (base32
            "1mqwc2wkz2ax4pzi76vqq59v4qjwp221sw4nw91nr6zbk5ws1780"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-shell-maker))
    (arguments '(#:files ("dall-e-shell.el")))
    (home-page
      "https://github.com/xenodium/chatgpt-shell")
    (synopsis "Interaction mode for DALL-E")
    (description
      "Documentation at https://melpa.org/#/dall-e-shell")
    (license #f)))

(define-public emacs-daml-lsp
  (package
    (name "emacs-daml-lsp")
    (version "20231101.1818")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bartfailt/daml-lsp.git")
               (commit
                 "26ea6a1b34c49aaa5a2b395a0468c8af710bfab7")))
        (sha256
          (base32
            "1n478pf1nq5g1h4ixry15f7iv0gpslcwya3a01m008vs8h4i557a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-daml-mode
            emacs-dash
            emacs-f
            emacs-ht
            emacs-lsp-mode))
    (home-page
      "https://github.com/bartfaitamas/daml-mode")
    (synopsis "LSP client definition for daml")
    (description
      "Documentation at https://melpa.org/#/daml-lsp")
    (license #f)))

(define-public emacs-daml-mode
  (package
    (name "emacs-daml-mode")
    (version "20231106.916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bartfailt/daml-mode.git")
               (commit
                 "3ba1166edd4c22402996625b1f8a05a2d5b1cbc6")))
        (sha256
          (base32
            "0vdprvf0zswng8i2zy2jwwwyannigpicwhhdd913akzsyzmjnm27"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haskell-mode))
    (home-page
      "https://github.com/bartfaitamas/daml-mode")
    (synopsis "Major mode for daml")
    (description
      "Documentation at https://melpa.org/#/daml-mode")
    (license #f)))

(define-public emacs-danneskjold-theme
  (package
    (name "emacs-danneskjold-theme")
    (version "20221121.634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rails-to-cosmos/danneskjold-theme.git")
               (commit
                 "39ff00f8a40bcab96afd9450195124b57becd625")))
        (sha256
          (base32
            "0iqljbvl4rliaj2lkmwl7ls94kx5ig6gi9c8gddk8l61b7chrqyl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rails-to-cosmos/")
    (synopsis "Beautiful high-contrast Emacs theme.")
    (description
      "Documentation at https://melpa.org/#/danneskjold-theme")
    (license #f)))

(define-public emacs-dante
  (package
    (name "emacs-dante")
    (version "20230808.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jyp/dante.git")
               (commit
                 "ca47f8cc1392c7045db7da8b4fafe86b7c044e90")))
        (sha256
          (base32
            "1r6b5z4ipv5bhx153bsc2fn534vni6rnyamq5ldzyzxyb4i3m5dl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-flycheck
            emacs-company
            emacs-s
            emacs-lcr))
    (home-page "https://github.com/jyp/dante")
    (synopsis "Development mode for Haskell")
    (description
      "Documentation at https://melpa.org/#/dante")
    (license #f)))

(define-public emacs-dap-mode
  (package
    (name "emacs-dap-mode")
    (version "20231021.532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/dap-mode.git")
               (commit
                 "1187c6982fbc886e633b68359d64f8e5d7750151")))
        (sha256
          (base32
            "11cpsrbmqzamq9ply0pbd983lqsas8wxym0r476bv2vx2bqkaqpc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-lsp-mode
            emacs-bui
            emacs-f
            emacs-s
            emacs-lsp-treemacs
            emacs-posframe
            emacs-ht
            emacs-lsp-docker))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/dap-mode")
    (synopsis "Debug Adapter Protocol mode")
    (description
      "Documentation at https://melpa.org/#/dap-mode")
    (license #f)))

(define-public emacs-darcsum
  (package
    (name "emacs-darcsum")
    (version "20190316.2215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/darcsum.git")
               (commit
                 "6a8b690539d133c5e3d17cb23fe4365fbb6fb493")))
        (sha256
          (base32
            "1ajdm0p8rdyaqy0wwfslb1mqj9b2dpk8xkljjw6ddacph5hflhcm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "a pcl-cvs like interface for managing darcs patches")
    (description
      "Documentation at https://melpa.org/#/darcsum")
    (license #f)))

(define-public emacs-darcula-theme
  (package
    (name "emacs-darcula-theme")
    (version "20171227.1845")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fommil/emacs-darcula-theme.git")
               (commit
                 "d9b82b58ded9014985be6658f4ab17e26ed9e93e")))
        (sha256
          (base32
            "1y8rsc63nl4n43pvn283f1vcpqyjnv6xl60fwyscwrqaz19bsnl1"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/fommil/emacs-darcula-theme")
    (synopsis "Inspired by IntelliJ's Darcula theme")
    (description
      "Documentation at https://melpa.org/#/darcula-theme")
    (license #f)))

(define-public emacs-dark-krystal-theme
  (package
    (name "emacs-dark-krystal-theme")
    (version "20170808.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-dark-krystal-theme.git")
               (commit
                 "79084b99665dc9ffb0ec62cc092349a5ecebebbc")))
        (sha256
          (base32
            "1d3cdsaba71qxdqrbj1jrlq8a0iw3h50l5grcdjvxixdnf5nsa4c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Dark Krystal (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/dark-krystal-theme")
    (license #f)))

(define-public emacs-dark-mint-theme
  (package
    (name "emacs-dark-mint-theme")
    (version "20160302.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shaunvxc/dark-mint-theme.git")
               (commit
                 "95c30a26de31549cd341184ba9ab2be8fdc67eba")))
        (sha256
          (base32
            "052k8mqxx8lkadxyz6rwa7l741rwbd1blk2ggpsj2s1g6p9l68a1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "dark & minty fresh theme")
    (description
      "Documentation at https://melpa.org/#/dark-mint-theme")
    (license #f)))

(define-public emacs-dark-souls
  (package
    (name "emacs-dark-souls")
    (version "20140314.1128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomjakubowski/dark-souls.el.git")
               (commit
                 "94122b1215423e58dcf18584a2bd022029d54d4b")))
        (sha256
          (base32
            "1w0y2j0j9n107dbk7ksr9bipshjfs9dk08qbs9m6h5aqh4hmwa4r"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/tomjakubowski/dark-souls.el")
    (synopsis "Prepare to die")
    (description
      "Documentation at https://melpa.org/#/dark-souls")
    (license #f)))

(define-public emacs-darkman
  (package
    (name "emacs-darkman")
    (version "20230901.953")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/darkman-"
               version
               ".tar"))
        (sha256
          (base32
            "1zzp6103jb2550b7i8b4g9r80xk6zdn3n7m899ky8r1id895n0ks"))))
    (build-system melpa-build-system)
    (home-page "https://darkman.grtcdr.tn")
    (synopsis "Seamless integration with Darkman")
    (description
      "Documentation at https://melpa.org/#/darkman")
    (license #f)))

(define-public emacs-darkmine-theme
  (package
    (name "emacs-darkmine-theme")
    (version "20160406.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pierre-lecocq/darkmine-theme.git")
               (commit
                 "7f7e82ca03bcad52911fa41fb3e204e32d6ee63e")))
        (sha256
          (base32
            "0d2g4iyp8gyfrcc1gkvl40p1shlw1sadswzhry0m1lgbyxiiklrz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pierre-lecocq/darkmine-theme")
    (synopsis "Yet another emacs dark color theme.")
    (description
      "Documentation at https://melpa.org/#/darkmine-theme")
    (license #f)))

(define-public emacs-darkokai-theme
  (package
    (name "emacs-darkokai-theme")
    (version "20200614.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sjrmanning/darkokai.git")
               (commit
                 "5820aeddfc8c869ba840cc534eba776936656a66")))
        (sha256
          (base32
            "1bj7l5sh6nzxcw575kjcscjpjqmwlxhvi30qviqg4d6aymzkgr53"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/sjrmanning/darkokai")
    (synopsis "A darker variant on Monokai.")
    (description
      "Documentation at https://melpa.org/#/darkokai-theme")
    (license #f)))

(define-public emacs-darktooth-theme
  (package
    (name "emacs-darktooth-theme")
    (version "20231011.427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-darktooth.git")
               (commit
                 "2358dd334b5dcb6dc9828422bd7bd1e4da556819")))
        (sha256
          (base32
            "0ivdwypamhnipfh5qg71icf1bbd0nqp17xpj31cs0iaik1s9pj8h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-darktooth")
    (synopsis "From the darkness... it watches")
    (description
      "Documentation at https://melpa.org/#/darktooth-theme")
    (license #f)))

(define-public emacs-dart-mode
  (package
    (name "emacs-dart-mode")
    (version "20231002.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dart-mode.git")
               (commit
                 "61e01142352f6813aca6512bedadb5007de3a0b9")))
        (sha256
          (base32
            "1pvyv1m2nk0hx05zjrphw7ad9y6xsixhjhm4gygpjjv99qbx4njc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/dart-mode")
    (synopsis "Major mode for editing Dart files")
    (description
      "Documentation at https://melpa.org/#/dart-mode")
    (license #f)))

(define-public emacs-dart-server
  (package
    (name "emacs-dart-server")
    (version "20210501.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bradyt/dart-server.git")
               (commit
                 "75562baf9a89b7e314bc2f795f6ecdc5d1f2cc8c")))
        (sha256
          (base32
            "06v4gbckfgdl7hbppgv15ynsxq37qqdw1h8yzicwjqgylma0if1y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-flycheck emacs-s))
    (home-page
      "https://github.com/bradyt/dart-server")
    (synopsis "Minor mode for editing Dart files")
    (description
      "Documentation at https://melpa.org/#/dart-server")
    (license #f)))

(define-public emacs-dash
  (package
    (name "emacs-dash")
    (version "20230714.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/dash.el.git")
               (commit
                 "f46268c75cb7c18361d3cee942cd4dc14a03aef4")))
        (sha256
          (base32
            "0ck6xwgbkjq7svqgzj3wddr20aqffwcxlmvdg0nj2i9zbksz8rkp"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("dash.el" "dash.texi")))
    (home-page "https://github.com/magnars/dash.el")
    (synopsis "A modern list library for Emacs")
    (description
      "Documentation at https://melpa.org/#/dash")
    (license #f)))

(define-public emacs-dash-alfred
  (package
    (name "emacs-dash-alfred")
    (version "20191024.450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/dash-alfred.el.git")
               (commit
                 "fcd21bd6c7eb5cd31377be970406ff3d2454bd5c")))
        (sha256
          (base32
            "0cvkj0d45aan6g5c7930v9syp0m3l1w6zkdgsdvbbiav0i6kpqrx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/dash-alfred.el")
    (synopsis
      "Search Dash documentation via Dash-Alfred-Workflow")
    (description
      "Documentation at https://melpa.org/#/dash-alfred")
    (license #f)))

(define-public emacs-dash-at-point
  (package
    (name "emacs-dash-at-point")
    (version "20211023.104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stanaka/dash-at-point.git")
               (commit
                 "fba1a6f42ea51d05110e12c62bdced664059eb55")))
        (sha256
          (base32
            "0yvr3dzdd3f6njg6in54ab2mddlagaqz8mynccgw5sq1d58w1nvp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stanaka/dash-at-point")
    (synopsis "Search the word at point with Dash")
    (description
      "Documentation at https://melpa.org/#/dash-at-point")
    (license #f)))

(define-public emacs-dash-docs
  (package
    (name "emacs-dash-docs")
    (version "20210830.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dash-docs-el/dash-docs.git")
               (commit
                 "29848b6b347ac520f7646c200ed2ec36cea3feda")))
        (sha256
          (base32
            "06yp1p0ir67vb2rpva6wvk3vyfxzl0bmrixikawwk6l2bph2z1x3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page "http://github.com/areina/helm-dash")
    (synopsis
      "Offline documentation browser using Dash docsets.")
    (description
      "Documentation at https://melpa.org/#/dash-docs")
    (license #f)))

(define-public emacs-dash-functional
  (package
    (name "emacs-dash-functional")
    (version "20210826.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/dash.el.git")
               (commit
                 "3df46d7d9fe74f52a661565888e4d31fd760f0df")))
        (sha256
          (base32
            "07g8rizz6bsjqymnbmjniv7v09d90x4zy5b9j8clmgyfy5040ivg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("dash-functional.el")))
    (home-page "https://github.com/magnars/dash.el")
    (synopsis
      "Collection of useful combinators for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/dash-functional")
    (license #f)))

(define-public emacs-dashboard
  (package
    (name "emacs-dashboard")
    (version "20231031.359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-dashboard/emacs-dashboard.git")
               (commit
                 "9c8b0cce865e34340c6d435253f6a3aed3b3ace5")))
        (sha256
          (base32
            "0qb4rq62fzmnlwrb2khv344l6a9p7rv7f49515gxdb6jka3ppbsh"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "banners")))
    (home-page
      "https://github.com/emacs-dashboard/emacs-dashboard")
    (synopsis
      "A startup screen extracted from Spacemacs")
    (description
      "Documentation at https://melpa.org/#/dashboard")
    (license #f)))

(define-public emacs-dashboard-hackernews
  (package
    (name "emacs-dashboard-hackernews")
    (version "20220516.1809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hyakt/emacs-dashboard-hackernews.git")
               (commit
                 "0a8f0391c807284391ad6bf1c13289513aa56c34")))
        (sha256
          (base32
            "03w517s8grlw2mrbvdhbnb15qx55wnqxqfp5kbzb6dg43d0hlzq3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dashboard emacs-request))
    (home-page
      "https://github.com/hyakt/emacs-dashboard-hackernews")
    (synopsis "Display Hacker News on dashboard")
    (description
      "Documentation at https://melpa.org/#/dashboard-hackernews")
    (license #f)))

(define-public emacs-dashboard-ls
  (package
    (name "emacs-dashboard-ls")
    (version "20221231.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-dashboard/dashboard-ls.git")
               (commit
                 "b24e0bcb87e20ffcc71efb83a97f9516255fa8e4")))
        (sha256
          (base32
            "0rmdfm2smk4cji9dljnrxlmpvx2pv96lljdlwqblk5z3klm0wjkx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dashboard))
    (home-page
      "https://github.com/emacs-dashboard/dashboard-ls")
    (synopsis
      "Display files/directories in current directory on Dashboard")
    (description
      "Documentation at https://melpa.org/#/dashboard-ls")
    (license #f)))

(define-public emacs-dashboard-project-status
  (package
    (name "emacs-dashboard-project-status")
    (version "20190202.1354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/functionreturnfunction/dashboard-project-status.git")
               (commit
                 "7675c138e9df8fe2c626e7ba9bbb8b6717671a41")))
        (sha256
          (base32
            "1sbjrc1l57q2ifmw6pf3n105qk3q7rskqy9811qijpsbcl1m819d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git emacs-dashboard))
    (home-page
      "https://github.com/functionreturnfunction/dashboard-project-status")
    (synopsis
      "Display a git project status in a dashboard widget.")
    (description
      "Documentation at https://melpa.org/#/dashboard-project-status")
    (license #f)))

(define-public emacs-date-at-point
  (package
    (name "emacs-date-at-point")
    (version "20150308.1243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/date-at-point.el.git")
               (commit
                 "38df823d05df08ec0748a4185113fae5f99090e9")))
        (sha256
          (base32
            "024jx6q0dik4w2wb8nrk1q73asvjgrsl5mslns0ci3zsya343rch"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/date-at-point.el")
    (synopsis
      "Add `date' to `thing-at-point' function")
    (description
      "Documentation at https://melpa.org/#/date-at-point")
    (license #f)))

(define-public emacs-date-field
  (package
    (name "emacs-date-field")
    (version "20141129.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-date-field.git")
               (commit
                 "11c9170d1f7b343233f7716d4c0a62be024c1654")))
        (sha256
          (base32
            "1lmwnj2fnvijj9qp4rjggl7c4x91vnpb47rqaam6m2wmr5wbrx3w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-log4e emacs-yaxception))
    (home-page
      "https://github.com/aki2o/emacs-date-field")
    (synopsis "Date widget")
    (description
      "Documentation at https://melpa.org/#/date-field")
    (license #f)))

(define-public emacs-date2name
  (package
    (name "emacs-date2name")
    (version "20190630.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DerBeutlin/date2name.el.git")
               (commit
                 "386dbe73678705d6107cd5c9bdeb4f7c97632360")))
        (sha256
          (base32
            "0mdsvrwn6g33arcby02v6m9kfyymq7svgnvpvkvkvfdswcrns4mn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DerBeutlin/date2name.el")
    (synopsis
      "Package to prepend ISO Timestamps to files")
    (description
      "Documentation at https://melpa.org/#/date2name")
    (license #f)))

(define-public emacs-datetime
  (package
    (name "emacs-datetime")
    (version "20231025.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/datetime.git")
               (commit
                 "0ec8ecf25e857638ead944eeb3e7d68c6f16f2de")))
        (sha256
          (base32
            "1n10qyhhyxh4g5pizrj2hlffqd0zx5ym8wsbvwk3z3s6949rjniy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-extmap))
    (arguments '(#:files (:defaults "*.extmap")))
    (home-page "https://github.com/doublep/datetime")
    (synopsis
      "Parsing, formatting and matching timestamps")
    (description
      "Documentation at https://melpa.org/#/datetime")
    (license #f)))

(define-public emacs-datetime-format
  (package
    (name "emacs-datetime-format")
    (version "20160612.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/emacs-datetime.git")
               (commit
                 "e6427538b547cbe02e1bd6ed4b765c73620bdae8")))
        (sha256
          (base32
            "1573z8wq5m8qzbzmnsz2fmbwrj9c0ava0jjfchzmwm2b3jyvqh5r"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("datetime-format.el")))
    (home-page
      "https://github.com/zonuexe/emacs-datetime")
    (synopsis "Datetime functions")
    (description
      "Documentation at https://melpa.org/#/datetime-format")
    (license #f)))

(define-public emacs-datomic-snippets
  (package
    (name "emacs-datomic-snippets")
    (version "20180817.1045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/datomic-snippets.git")
               (commit
                 "4a14228840d5252e13d2bf6209670f26345bbb84")))
        (sha256
          (base32
            "1nvng479sy7ykwy9a86qq48yzv8n0903g724srhf42v9c81fc9s7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for Datomic")
    (description
      "Documentation at https://melpa.org/#/datomic-snippets")
    (license #f)))

(define-public emacs-dayone
  (package
    (name "emacs-dayone")
    (version "20160105.1240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mori-dev/emacs-dayone.git")
               (commit
                 "ab628274f0806451f23bce16f62a6a11cbf91a2b")))
        (sha256
          (base32
            "1j0mk8vyr6sniliq0ix77jldx8vzl73nd5yhh82klzgyymal58ms"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-uuid emacs-mustache emacs-ht))
    (arguments '(#:files ("*.el" "*.mustache")))
    (home-page
      "https://github.com/mori-dev/emacs-dayone")
    (synopsis "Utility script for Day One")
    (description
      "Documentation at https://melpa.org/#/dayone")
    (license #f)))

(define-public emacs-db
  (package
    (name "emacs-db")
    (version "20140421.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-db.git")
               (commit
                 "b3a423fb8e72f9013009cbe033d654df2ce31438")))
        (sha256
          (base32
            "0syv4kr319d34yqi4q61b8jh5yy22wvd148x1m3pc511znh2ry5k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kv))
    (arguments '(#:files ("db.el")))
    (home-page "unspecified")
    (synopsis "A database for EmacsLisp")
    (description
      "Documentation at https://melpa.org/#/db")
    (license #f)))

(define-public emacs-db-pg
  (package
    (name "emacs-db-pg")
    (version "20130131.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-db-pg.git")
               (commit
                 "7d5ab86b74b05fe003b3b434d4835f37f3f3eded")))
        (sha256
          (base32
            "15r0qwjkl33p8kh2k5kxz9wnbkv1k470b1h0i6svvljkx9ynk68a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pg emacs-db))
    (home-page "unspecified")
    (synopsis "A PostgreSQL adapter for emacs-db")
    (description
      "Documentation at https://melpa.org/#/db-pg")
    (license #f)))

(define-public emacs-dbc
  (package
    (name "emacs-dbc")
    (version "20201001.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/display-buffer-control.git")
               (commit
                 "6728e72f72347d098b7d75ac4c29a7d687cc9ed3")))
        (sha256
          (base32
            "1bkiwg1wp3l904159gycdr83xkb3i0h2k0da7akzkwc957abvp8w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "https://gitlab.com/matsievskiysv/display-buffer-control")
    (synopsis "Control how to open buffers")
    (description
      "Documentation at https://melpa.org/#/dbc")
    (license #f)))

(define-public emacs-ddate
  (package
    (name "emacs-ddate")
    (version "20221031.1611")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ddate-"
               version
               ".el"))
        (sha256
          (base32
            "0y8kqinajvci4bwp7xh8l9jdrs2fisxqiyzkxp88iix8bm62wrbv"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~earneson/emacs-ddate")
    (synopsis "Manage Discordian dates with ddate")
    (description
      "Documentation at https://melpa.org/#/ddate")
    (license #f)))

(define-public emacs-ddskk
  (package
    (name "emacs-ddskk")
    (version "20230701.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skk-dev/ddskk.git")
               (commit
                 "8c47f46e38a29a0f3eabcd524268d20573102467")))
        (sha256
          (base32
            "0vfdbab3ncns8wwrna8h6y2w0grkphzr9s65sgxq98lpqmxbbr72"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ccc emacs-cdb))
    (arguments
      '(#:files
        ("context-skk.el"
         "ddskk*.el"
         "skk*.el"
         "tar-util.el"
         "doc/skk.texi"
         "etc/skk.xpm"
         (:exclude "skk-xemacs.el" "skk-lookup.el"))))
    (home-page "https://github.com/skk-dev/ddskk")
    (synopsis
      "Simple Kana to Kanji conversion program.")
    (description
      "Documentation at https://melpa.org/#/ddskk")
    (license #f)))

(define-public emacs-ddskk-posframe
  (package
    (name "emacs-ddskk-posframe")
    (version "20200812.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/ddskk-posframe.el.git")
               (commit
                 "299493dd951e5a0b43b8213321e3dc0bac10f762")))
        (sha256
          (base32
            "1rsy0wjncxzjhis8jrxpxjh9l9pw0bngg1sb4dj5qvhsgszhawpn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-ddskk))
    (home-page
      "https://github.com/conao3/ddskk-posframe.el")
    (synopsis
      "Show Henkan tooltip for ddskk via posframe")
    (description
      "Documentation at https://melpa.org/#/ddskk-posframe")
    (license #f)))

(define-public emacs-deadgrep
  (package
    (name "emacs-deadgrep")
    (version "20231028.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/deadgrep.git")
               (commit
                 "960b61f4d9bcf75fa0f19c3abb447c63c7d886cf")))
        (sha256
          (base32
            "1791i7jxpmqvs3xmyk0c12dmx1cjni6gk6z6f0s4h0fhp6g99zas"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-spinner))
    (home-page "https://github.com/Wilfred/deadgrep")
    (synopsis
      "fast, friendly searching with ripgrep")
    (description
      "Documentation at https://melpa.org/#/deadgrep")
    (license #f)))

(define-public emacs-debian-el
  (package
    (name "emacs-debian-el")
    (version "20231017.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://salsa.debian.org/emacsen-team/debian-el.git")
               (commit
                 "586300cb4747128b7f8397d9dd9f09fa1e27b118")))
        (sha256
          (base32
            "11fwr66nm51n4kmy8y5zpa5lwy4qnnspsbrpbiv3r0p3ivqdga15"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs helpers specific to Debian users")
    (description
      "Documentation at https://melpa.org/#/debian-el")
    (license #f)))

(define-public emacs-debpaste
  (package
    (name "emacs-debpaste")
    (version "20161214.2023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/debpaste.el.git")
               (commit
                 "6f2a400665062468ebd03a2ce1de2a73d9084958")))
        (sha256
          (base32
            "1wi70r56pd5z0x4dp4m58p9asq03j74kdm4fi9vai83vsl2z9amq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xml-rpc))
    (home-page
      "http://github.com/alezost/debpaste.el")
    (synopsis
      "Interface for getting/posting/deleting pastes from paste.debian.net")
    (description
      "Documentation at https://melpa.org/#/debpaste")
    (license #f)))

(define-public emacs-debug-print
  (package
    (name "emacs-debug-print")
    (version "20140126.19")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kenoss/debug-print.git")
               (commit
                 "d817fd9ea2d3f8d2c1ace4d8af155684f3a99dc5")))
        (sha256
          (base32
            "1n99nrp42slmyp5228d1nz174bysjn122jgs8fn1x0qxywg7jyxp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kenoss/debug-print")
    (synopsis
      "A nice printf debugging environment by the way Gauche do")
    (description
      "Documentation at https://melpa.org/#/debug-print")
    (license #f)))

(define-public emacs-decide
  (package
    (name "emacs-decide")
    (version "20230424.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lifelike/decide-mode.git")
               (commit
                 "9c0e4c4493f9af9a981627d0630ac6cb2d8c98f0")))
        (sha256
          (base32
            "1d2z1nci47nhgb5j5nm9zhx5h9zjp2qnzkl1yn9jrsqpr2n1wfcp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "rolling dice and other random things")
    (description
      "Documentation at https://melpa.org/#/decide")
    (license #f)))

(define-public emacs-decl
  (package
    (name "emacs-decl")
    (version "20221027.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/preetpalS/decl.el.git")
               (commit
                 "9594fe3d6e094b20cb29d2f55fc1417b7628f011")))
        (sha256
          (base32
            "150f8bl85qq15ylq0vrzcf24l8rp6hpjh6hkhz5m4n5dh7xxxj9s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/preetpalS/decl.el")
    (synopsis
      "Library for organizing code declaratively")
    (description
      "Documentation at https://melpa.org/#/decl")
    (license #f)))

(define-public emacs-declutter
  (package
    (name "emacs-declutter")
    (version "20220310.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sanel/declutter.git")
               (commit
                 "8ac50a64dc3a12440d98bc1556b5c7727fdf51ed")))
        (sha256
          (base32
            "0kmkb5gfldim2nqkb4mnjllp1nvkr7c3j1zk84crfyxy45ln7lv4"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/sanel/declutter")
    (synopsis
      "Read html content and (some) paywall sites without clutter")
    (description
      "Documentation at https://melpa.org/#/declutter")
    (license #f)))

(define-public emacs-decor
  (package
    (name "emacs-decor")
    (version "20231101.2354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KeyWeeUsr/decor.git")
               (commit
                 "aad4fa9f4e0d4140e2707f4cc678b1dc3c0672fa")))
        (sha256
          (base32
            "0lxw55l0p5cgp1kgwh0yzh9bc3wvgnd932jmfy77nmiw6wl4achm"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/KeyWeeUsr/decor")
    (synopsis "Modify visual decorations (X11)")
    (description
      "Documentation at https://melpa.org/#/decor")
    (license #f)))

(define-public emacs-dedicated
  (package
    (name "emacs-dedicated")
    (version "20151202.110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dedicated.git")
               (commit
                 "f47b504c0c56fa5ab9d1028417ca1f65a713a2f0")))
        (sha256
          (base32
            "08ggrfdx8j7zqbid35ph0k8jramm4yf95rjilycywb82n3y6wynz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A very simple minor mode for dedicated buffers")
    (description
      "Documentation at https://melpa.org/#/dedicated")
    (license #f)))

(define-public emacs-dedukti-mode
  (package
    (name "emacs-dedukti-mode")
    (version "20171103.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rafoo/dedukti-mode.git")
               (commit
                 "d7c3505a1046187de3c3aeb144455078d514594e")))
        (sha256
          (base32
            "1842wikq24c8rg0ac84vb1qby9ng1nssxswyyni4kq85lng5lcrp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rafoo/dedukti-mode")
    (synopsis "Major mode for Dedukti files")
    (description
      "Documentation at https://melpa.org/#/dedukti-mode")
    (license #f)))

(define-public emacs-default-font-presets
  (package
    (name "emacs-default-font-presets")
    (version "20230708.1012")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/default-font-presets-"
               version
               ".tar"))
        (sha256
          (base32
            "12ykbpsvs9sclgpvx865a0n0qxcy5y27m5nbhqbhwjj2kw0hzw7x"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-default-font-presets")
    (synopsis
      "Support selecting fonts from a list of presets")
    (description
      "Documentation at https://melpa.org/#/default-font-presets")
    (license #f)))

(define-public emacs-default-text-scale
  (package
    (name "emacs-default-text-scale")
    (version "20191226.2234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/default-text-scale.git")
               (commit
                 "bfc0987c37e93742255d3b23d86c17096fda8e7e")))
        (sha256
          (base32
            "1kbmq9ssp1i58bcmnk0g0ijhwsa80qm5xwwzhzcskrmxb6dg88j2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/default-text-scale")
    (synopsis
      "Easily adjust the font size in all frames")
    (description
      "Documentation at https://melpa.org/#/default-text-scale")
    (license #f)))

(define-public emacs-defcapture
  (package
    (name "emacs-defcapture")
    (version "20230909.353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aggu4/defcapture.git")
               (commit
                 "777a10a3343da0553813d004a67e39e2df1bcbb2")))
        (sha256
          (base32
            "17ryf13x30pcvys3z539jr3h11zjz4dza5slyw4izns3mzcvdjvl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-doct))
    (home-page "https://github.com/aggu4/defcapture")
    (synopsis "A convenience macro for the Doct DSL")
    (description
      "Documentation at https://melpa.org/#/defcapture")
    (license #f)))

(define-public emacs-deferred
  (package
    (name "emacs-deferred")
    (version "20170901.1330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-deferred.git")
               (commit
                 "2239671d94b38d92e9b28d4e12fd79814cfb9c16")))
        (sha256
          (base32
            "0vz59lm7pfz0gbsgrb44y555js85wbdjn0zm6p8wfqjiqf63ds3i"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("deferred.el")))
    (home-page
      "https://github.com/kiwanami/emacs-deferred")
    (synopsis
      "Simple asynchronous functions for emacs lisp")
    (description
      "Documentation at https://melpa.org/#/deferred")
    (license #f)))

(define-public emacs-define-it
  (package
    (name "emacs-define-it")
    (version "20220713.750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/define-it.git")
               (commit
                 "2af0352e6fcce7edb9fb30e51a500e481be619a1")))
        (sha256
          (base32
            "103gx51wdbyfr5y8f6psp445sv872jsi5h19a8yindms5cg201zp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-popup
            emacs-pos-tip
            emacs-posframe
            emacs-define-word
            emacs-google-translate
            emacs-wiki-summary))
    (home-page
      "https://github.com/jcs-elpa/define-it")
    (synopsis "Define, translate, wiki the word")
    (description
      "Documentation at https://melpa.org/#/define-it")
    (license #f)))

(define-public emacs-define-scratch
  (package
    (name "emacs-define-scratch")
    (version "20221220.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-define-scratch.git")
               (commit
                 "26cf11f801c2b5df0fbd56d2c4f7ac41b3ccd1c6")))
        (sha256
          (base32
            "1lanr3q1fbw1ivsssnykskviwnnpah2lpj9q32brgf1vqmm1z7g8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-define-scratch")
    (synopsis
      "Define new commands to make scratch buffers")
    (description
      "Documentation at https://melpa.org/#/define-scratch")
    (license #f)))

(define-public emacs-define-word
  (package
    (name "emacs-define-word")
    (version "20220104.1848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/define-word.git")
               (commit
                 "31a8c67405afa99d0e25e7c86a4ee7ef84a808fe")))
        (sha256
          (base32
            "0h3dasg81f1b08xvz38nyd887pdlv60kj8q50kk2aqlpkr8j0y18"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/define-word")
    (synopsis
      "display the definition of word at point.")
    (description
      "Documentation at https://melpa.org/#/define-word")
    (license #f)))

(define-public emacs-defproject
  (package
    (name "emacs-defproject")
    (version "20151201.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kotfic/defproject.git")
               (commit
                 "674d48a5e34cb4bba76faa38ee901322ec649086")))
        (sha256
          (base32
            "07jzr571q02l0lg5d40rnmzg16hmybi1nkjgslmvlx46z3c4xvyr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kotfic/defproject")
    (synopsis
      "Manager dir-locals and project specific variables")
    (description
      "Documentation at https://melpa.org/#/defproject")
    (license #f)))

(define-public emacs-defrepeater
  (package
    (name "emacs-defrepeater")
    (version "20180830.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/defrepeater.el.git")
               (commit
                 "9c027a2561fe141dcfb79f75fcaee36cd0386ec1")))
        (sha256
          (base32
            "1fync4i8ds718pdr2v25ily71jng0506hw5k9qpa0a533nsh7p30"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/alphapapa/defrepeater.el")
    (synopsis "Easily make commands repeatable")
    (description
      "Documentation at https://melpa.org/#/defrepeater")
    (license #f)))

(define-public emacs-deft
  (package
    (name "emacs-deft")
    (version "20210707.1633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrblevin/deft.git")
               (commit
                 "28be94d89bff2e1c7edef7244d7c5ba0636b1296")))
        (sha256
          (base32
            "074d8apvfp9na14q080w14i9ixbswvp7akjyv8gmxmy5im4gm0y3"))))
    (build-system melpa-build-system)
    (home-page "https://jblevins.org/projects/deft/")
    (synopsis
      "quickly browse, filter, and edit plain text notes")
    (description
      "Documentation at https://melpa.org/#/deft")
    (license #f)))

(define-public emacs-delim-kill
  (package
    (name "emacs-delim-kill")
    (version "20100517.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomas11/delim-kill.git")
               (commit
                 "1dbe47344f2d2cbc8c54beedf0cf0bf10fd203c1")))
        (sha256
          (base32
            "06a20sd8nc273azrgha40l1fbqvv9qmxsmkjiqbf6dcf1blkwjyf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/thomas11/delim-kill/tree/master")
    (synopsis "Kill text between delimiters.")
    (description
      "Documentation at https://melpa.org/#/delim-kill")
    (license #f)))

(define-public emacs-demangle-mode
  (package
    (name "emacs-demangle-mode")
    (version "20210822.2210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liblit/demangle-mode.git")
               (commit
                 "04f545adab066708d6151f13da65aaf519f8ac4e")))
        (sha256
          (base32
            "0jkw3n7fp0fd1pmaxszncx2lvb5g3hszsm2n6axbvy8waqxydz2w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liblit/demangle-mode")
    (synopsis
      "Automatically demangle C++, D, and Rust symbols")
    (description
      "Documentation at https://melpa.org/#/demangle-mode")
    (license #f)))

(define-public emacs-demap
  (package
    (name "emacs-demap")
    (version "20220322.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sawyerjgardner/demap.el.git")
               (commit
                 "c42ec4752544f80ca7c172ff65e705a56089bc96")))
        (sha256
          (base32
            "0nh0g7a6svwwp3hinc8c3x3ln76z8hgzddc4lx4z0dzzj6bwakz7"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/sawyerjgardner/demap.el")
    (synopsis "Detachable minimap package")
    (description
      "Documentation at https://melpa.org/#/demap")
    (license #f)))

(define-public emacs-demo-it
  (package
    (name "emacs-demo-it")
    (version "20211221.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/howardabrams/demo-it.git")
               (commit
                 "e399fd7ceb73caeae7cb50b247359bafcaee2a3f")))
        (sha256
          (base32
            "1hbhdgp69sqab1qd388flv5dzxprwf44b127da0fpl8mpqf94npa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Create demonstrations")
    (description
      "Documentation at https://melpa.org/#/demo-it")
    (license #f)))

(define-public emacs-deno-fmt
  (package
    (name "emacs-deno-fmt")
    (version "20230117.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rclarey/deno-emacs.git")
               (commit
                 "6378966f448a3b9b5ae98af58cd13a031bd26702")))
        (sha256
          (base32
            "0qc8y4z7z9x5ig71jxjsh3pnar8kgm73anxg7p0d31g1ndf62jqj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/russell/deno-emacs")
    (synopsis
      "Minor mode for using deno fmt on save")
    (description
      "Documentation at https://melpa.org/#/deno-fmt")
    (license #f)))

(define-public emacs-deno-ts-mode
  (package
    (name "emacs-deno-ts-mode")
    (version "20230912.202")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/deno-ts-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "1qfcn2q451pcdc6lc7np2ljbr8br1a4ghs9vh3lx4jjg25yx78kq"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~mgmarlow/deno-ts-mode")
    (synopsis "Major mode for Deno")
    (description
      "Documentation at https://melpa.org/#/deno-ts-mode")
    (license #f)))

(define-public emacs-derl
  (package
    (name "emacs-derl")
    (version "20231004.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/axelf4/derl.el.git")
               (commit
                 "6f31592bb3083de366cdb13a7db0ed69fc72de47")))
        (sha256
          (base32
            "1nqzw42vn1w1dh871izyalwkxvrq73ykyzkggrv070cyfyhbc177"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/axelf4/derl.el")
    (synopsis
      "Erlang distribution protocol implementation")
    (description
      "Documentation at https://melpa.org/#/derl")
    (license #f)))

(define-public emacs-describe-hash
  (package
    (name "emacs-describe-hash")
    (version "20200718.1556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Junker/describe-hash.git")
               (commit
                 "18e69a932d5495c8439571ba8f2d2ee123d434b1")))
        (sha256
          (base32
            "1z2msiqwq7lqvyz6b2szyx1kpb6rv6irvwdcv36519mda0smhjlv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Junker/describe-hash")
    (synopsis
      "Help function for examining a hash map")
    (description
      "Documentation at https://melpa.org/#/describe-hash")
    (license #f)))

(define-public emacs-describe-number
  (package
    (name "emacs-describe-number")
    (version "20151101.55")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/netromdk/describe-number.git")
               (commit
                 "40618345a37831804b29589849a785ef5aa5ac24")))
        (sha256
          (base32
            "13fasbhdjwc4jh3cy25gm5sbbg56hq8la271098qpx6dhqm2wycq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yabin))
    (home-page
      "https://github.com/netromdk/describe-number")
    (synopsis
      "Describe arbitrarily large number at point.")
    (description
      "Documentation at https://melpa.org/#/describe-number")
    (license #f)))

(define-public emacs-desktop+
  (package
    (name "emacs-desktop+")
    (version "20170107.2132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/desktop-plus.git")
               (commit
                 "88055cee526a000056201898499cebbd35e3ea76")))
        (sha256
          (base32
            "1nkljslx8cwmm4z18mhnwrc1lmd6lxdyhk8bwhzms7g1p6yi99d8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (home-page
      "https://github.com/ffevotte/desktop-plus")
    (synopsis
      "Handle special buffers when saving & restoring sessions")
    (description
      "Documentation at https://melpa.org/#/desktop+")
    (license #f)))

(define-public emacs-desktop-environment
  (package
    (name "emacs-desktop-environment")
    (version "20230903.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/desktop-environment.git")
               (commit
                 "bc1153aa619b12456304cca642424a0d8d2eb416")))
        (sha256
          (base32
            "0bslgm9rz7whk0ll21028dsl22wbd289cdc95qj8hhlk8m4hlp2h"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.petton.fr/DamienCassou/desktop-environment")
    (synopsis
      "Helps you control your GNU/Linux computer")
    (description
      "Documentation at https://melpa.org/#/desktop-environment")
    (license #f)))

(define-public emacs-desktop-mail-user-agent
  (package
    (name "emacs-desktop-mail-user-agent")
    (version "20210519.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-desktop-mail-user-agent.git")
               (commit
                 "caac672ef7e4ddced960fa31cef3a6ba5d7ab451")))
        (sha256
          (base32
            "13wwbwynnsj3hj6riv3gzxhqrhbw4yc7gibcxakphk2b9r3c4k77"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-desktop-mail-user-agent")
    (synopsis
      "Call OS default mail program to compose mail")
    (description
      "Documentation at https://melpa.org/#/desktop-mail-user-agent")
    (license #f)))

(define-public emacs-desktop-registry
  (package
    (name "emacs-desktop-registry")
    (version "20140119.2143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/desktop-registry.git")
               (commit
                 "244c2e7f9f0a1050aa8a47ad0b38f4e4584682dd")))
        (sha256
          (base32
            "11qvhbz7149vqh61fgqqn4inw0ic6ib9lz2xgr9m54pdw9a901mp"))))
    (build-system melpa-build-system)
    (home-page
      "http://projects.ryuslash.org/desktop-registry/")
    (synopsis
      "Keep a central registry of desktop files")
    (description
      "Documentation at https://melpa.org/#/desktop-registry")
    (license #f)))

(define-public emacs-detached
  (package
    (name "emacs-detached")
    (version "20221129.1430")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/detached-"
               version
               ".tar"))
        (sha256
          (base32
            "19cs05g344y1rb0gzwzvx7vz74pny5ah2bhkf6qk1iqqr24k25s6"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~niklaseklund/detached.el/")
    (synopsis
      "A package to launch, and manage, detached processes")
    (description
      "Documentation at https://melpa.org/#/detached")
    (license #f)))

(define-public emacs-detour
  (package
    (name "emacs-detour")
    (version "20181122.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ska2342/detour.git")
               (commit
                 "1ff23c236e18971ed1077840daf047cde79a45ee")))
        (sha256
          (base32
            "0pi0r443yh8xspqbjy2splksws38j8mwrgzjlsp6fizx2warn6y6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ska2342/detour/")
    (synopsis "Take a quick detour and return")
    (description
      "Documentation at https://melpa.org/#/detour")
    (license #f)))

(define-public emacs-devdocs
  (package
    (name "emacs-devdocs")
    (version "20230220.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astoff/devdocs.el.git")
               (commit
                 "2988d4d201df16d72c3bea465d2b93b554dbddfc")))
        (sha256
          (base32
            "04ghf38mdb6829b81fb0j2l8z8i5d14m72x1h3sx1m1fihr7nlxv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/astoff/devdocs.el")
    (synopsis "Emacs viewer for DevDocs")
    (description
      "Documentation at https://melpa.org/#/devdocs")
    (license #f)))

(define-public emacs-devdocs-browser
  (package
    (name "emacs-devdocs-browser")
    (version "20230423.444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blahgeek/emacs-devdocs-browser.git")
               (commit
                 "ef7686e4ff4ecab42e1b4a1a5d079bcf947a5b71")))
        (sha256
          (base32
            "12f2z4khcag0mjvis8h20sj32iv3i2p8vvklh7zzc4yzga6pa8va"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/blahgeek/emacs-devdocs-browser")
    (synopsis
      "Browse devdocs.io documents using EWW")
    (description
      "Documentation at https://melpa.org/#/devdocs-browser")
    (license #f)))

(define-public emacs-devil
  (package
    (name "emacs-devil")
    (version "20230925.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/susam/devil.git")
               (commit
                 "39469b2d1ebbf40ab1f63aae7a6c4326f5da0e7a")))
        (sha256
          (base32
            "1m3anqxvx4amgv4lmi9vvfxgpxch3x7cxz5rya8zjwpprxr8ag7p"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/susam/devil")
    (synopsis
      "Minor mode for translating key sequences")
    (description
      "Documentation at https://melpa.org/#/devil")
    (license #f)))

(define-public emacs-dfmt
  (package
    (name "emacs-dfmt")
    (version "20170728.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/qsimpleq/elisp-dfmt.git")
               (commit
                 "21b9094e907b7ac53f5ecb4ff4539613a9d12434")))
        (sha256
          (base32
            "11r1i8nlz98z49fqb447abg1pv6838q54ly19wyg82k52875ms7m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/qsimpleq/elisp-dfmt")
    (synopsis
      "Emacs Interface to D indenting/formatting tool dfmt.")
    (description
      "Documentation at https://melpa.org/#/dfmt")
    (license #f)))

(define-public emacs-dhall-mode
  (package
    (name "emacs-dhall-mode")
    (version "20230228.1005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/dhall-mode.git")
               (commit
                 "87ab69fe765d87b3bb1604a306a8c44d6887681d")))
        (sha256
          (base32
            "1h55bcn0csy7xacl6lqhr3vfva208rszjn15gsfq0pbwhx4n6zhx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page "https://github.com/psibi/dhall-mode")
    (synopsis
      "Major mode for the dhall configuration language")
    (description
      "Documentation at https://melpa.org/#/dhall-mode")
    (license #f)))

(define-public emacs-dianyou
  (package
    (name "emacs-dianyou")
    (version "20210525.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/dianyou.git")
               (commit
                 "f77d9e76be5d8022fa6ee5426144f13f38dd09f2")))
        (sha256
          (base32
            "08pwp1pv8c3klingl0qpymdh9ybqrjj47rdd191vhah2ahn5bs1g"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/dianyou")
    (synopsis "Search and analyze mails in Gnus")
    (description
      "Documentation at https://melpa.org/#/dianyou")
    (license #f)))

(define-public emacs-diary-manager
  (package
    (name "emacs-diary-manager")
    (version "20220929.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/diary-manager.git")
               (commit
                 "56c739224e5bb845d275bfe3f4e420285de3a929")))
        (sha256
          (base32
            "1248xyb9rmlf07ag7hnvcisgljvacia72s9l0grihjfa3mrlmdks"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/diary-manager")
    (synopsis "Simple personal diary")
    (description
      "Documentation at https://melpa.org/#/diary-manager")
    (license #f)))

(define-public emacs-dic-lookup-w3m
  (package
    (name "emacs-dic-lookup-w3m")
    (version "20180526.1621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dic-lookup-w3m.git")
               (commit
                 "3254ab10cbf0078c7162557dd1f68dac28459cf9")))
        (sha256
          (base32
            "0g8kzaxjka7n9jdldh45m22nizgv0m0v94ns7vmmhf1hpsf3zfxz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-w3m emacs-stem))
    (home-page "unspecified")
    (synopsis "look up dictionaries on the Internet")
    (description
      "Documentation at https://melpa.org/#/dic-lookup-w3m")
    (license #f)))

(define-public emacs-dictcc
  (package
    (name "emacs-dictcc")
    (version "20221231.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martenlienen/dictcc.el.git")
               (commit
                 "30b505759e5a97c2aaa8b0e8ea5e187fdf625c65")))
        (sha256
          (base32
            "0wwmmfyzdqaixsg75jlhwjy09cld0gvvdmnnl0951ivzsm0g0dy0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Look up translations on dict.cc")
    (description
      "Documentation at https://melpa.org/#/dictcc")
    (license #f)))

(define-public emacs-dictionary
  (package
    (name "emacs-dictionary")
    (version "20201001.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myrkr/dictionary-el.git")
               (commit
                 "bdf0aa7761d1c1a3bc0652b2fdc4a54b3acdb06a")))
        (sha256
          (base32
            "1vm9m36ab7hs58xqzr4g8lp2s78qzlcsy57f8yajrhibwfh5jrs6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-connection emacs-link))
    (arguments '(#:files ("dictionary.el")))
    (home-page "unspecified")
    (synopsis
      "Client for rfc2229 dictionary servers")
    (description
      "Documentation at https://melpa.org/#/dictionary")
    (license #f)))

(define-public emacs-didyoumean
  (package
    (name "emacs-didyoumean")
    (version "20200905.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/kisaragi-hiu/didyoumean.el.git")
               (commit
                 "ce5edcce160b86e7f6480f0381be785d43f97e19")))
        (sha256
          (base32
            "0a89bp9vz8lzg5klhmzpfmc0mhqmx667ivr86ckkjhiwr2mmzq0s"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/kisaragi-hiu/didyoumean.el")
    (synopsis "Did you mean to open another file?")
    (description
      "Documentation at https://melpa.org/#/didyoumean")
    (license #f)))

(define-public emacs-diff-ansi
  (package
    (name "emacs-diff-ansi")
    (version "20230808.1343")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/diff-ansi-"
               version
               ".tar"))
        (sha256
          (base32
            "0s7vqgq0hyqn6f3fxahn7cz3qf0wfi5q2wqg98y59h6asdxj64s1"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-diff-ansi")
    (synopsis
      "Display diff's using alternative diffing tools")
    (description
      "Documentation at https://melpa.org/#/diff-ansi")
    (license #f)))

(define-public emacs-diff-at-point
  (package
    (name "emacs-diff-at-point")
    (version "20230320.2355")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/diff-at-point-"
               version
               ".tar"))
        (sha256
          (base32
            "1z5qb461qyccw4f685sfrb8fwaq67h2587avfqc0jkgx3jj119n1"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-diff-at-point")
    (synopsis "Diff navigation")
    (description
      "Documentation at https://melpa.org/#/diff-at-point")
    (license #f)))

(define-public emacs-diff-hl
  (package
    (name "emacs-diff-hl")
    (version "20230807.1516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/diff-hl.git")
               (commit
                 "b5651f1c57b42e0f38e01a8fc8c7df9bc76d5d38")))
        (sha256
          (base32
            "0w7qhdkgqkk6z306n2c0cx188bbqqsg5vdbxbv1z7pgb3nwdc8ad"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dgutov/diff-hl")
    (synopsis
      "Highlight uncommitted changes using VC")
    (description
      "Documentation at https://melpa.org/#/diff-hl")
    (license #f)))

(define-public emacs-diffed
  (package
    (name "emacs-diffed")
    (version "20230208.1546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ber-ro/diffed.git")
               (commit
                 "f7dc37f13a4f1660212c41a6e9faba61eb8cc078")))
        (sha256
          (base32
            "0g1xjwby2sljmkf4nl0das45464162hwlsrjhbwzf4bp4i1c8gi9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ber-ro/diffed")
    (synopsis
      "Diffed is for recursive diff like Dired is for ls")
    (description
      "Documentation at https://melpa.org/#/diffed")
    (license #f)))

(define-public emacs-difflib
  (package
    (name "emacs-difflib")
    (version "20210224.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/difflib.el.git")
               (commit
                 "646fc4388274fe765bbf4661e17a24e4d081250c")))
        (sha256
          (base32
            "1qagl3ffg01zjqrgpq32h4ya869066n8ll9yq8lk40argjm523fa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht emacs-s))
    (home-page
      "http://github.com/dieggsy/difflib.el")
    (synopsis
      "Helpers for computing deltas between sequences.")
    (description
      "Documentation at https://melpa.org/#/difflib")
    (license #f)))

(define-public emacs-diffpdf
  (package
    (name "emacs-diffpdf")
    (version "20210626.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/diffpdf.el.git")
               (commit
                 "a5b203b549e373cb9b0ef3f00c0010bd34dd644a")))
        (sha256
          (base32
            "0bd09ljvlzffb02fgcvjjvysrj762a1wfvad0ywph4722dvnjfn0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient))
    (home-page
      "https://github.com/ShuguangSun/diffpdf.el")
    (synopsis "Transient diffpdf")
    (description
      "Documentation at https://melpa.org/#/diffpdf")
    (license #f)))

(define-public emacs-diffscuss-mode
  (package
    (name "emacs-diffscuss-mode")
    (version "20141014.2357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomheon/diffscuss.git")
               (commit
                 "53f2d001bd3a5cb80c6ada16b4e570afd1989a09")))
        (sha256
          (base32
            "0ivy5ydww69gnxws6y37hgvyyvs9gssvdljzs1h13pcycm05hdxb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("diffscuss-mode/*.el")))
    (home-page "unspecified")
    (synopsis "Major mode for diffscuss files.")
    (description
      "Documentation at https://melpa.org/#/diffscuss-mode")
    (license #f)))

(define-public emacs-difftastic
  (package
    (name "emacs-difftastic")
    (version "20231018.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pkryger/difftastic.el.git")
               (commit
                 "3e63dc1dd6eb7c2b7910d9b31a84fab7addaa7f3")))
        (sha256
          (base32
            "14za0r446pw3yby6kx8rfkaixx6lcx3blq2nv6l5rly3bkidprjs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-magit))
    (home-page
      "https://github.com/pkryger/difftastic.el")
    (synopsis "Wrapper for difftastic")
    (description
      "Documentation at https://melpa.org/#/difftastic")
    (license #f)))

(define-public emacs-diffview
  (package
    (name "emacs-diffview")
    (version "20230224.1916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgalgs/diffview-mode.git")
               (commit
                 "8f07c0ff4a1acef990589df0d3e32288f19c9d71")))
        (sha256
          (base32
            "05jg0p5qrs77h59mq8mi6fxil8djcb53w3raj441avsywzziigvy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mgalgs/diffview-mode")
    (synopsis "View diffs in side-by-side format")
    (description
      "Documentation at https://melpa.org/#/diffview")
    (license #f)))

(define-public emacs-digistar-mode
  (package
    (name "emacs-digistar-mode")
    (version "20230313.1256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/retroj/digistar-mode.git")
               (commit
                 "2bb1076778468d90a132c04f7b8455fb887b6bfe")))
        (sha256
          (base32
            "0izv1xvsakkdh0bxf4j9a2qzzrrrkzh64gxk59as2jd4vp5pax9g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for Digistar scripts")
    (description
      "Documentation at https://melpa.org/#/digistar-mode")
    (license #f)))

(define-public emacs-digit-groups
  (package
    (name "emacs-digit-groups")
    (version "20200506.37")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adamsmd/digit-groups.git")
               (commit
                 "7b81930cad19b8b7913b7eedbcb498964bfdcbdb")))
        (sha256
          (base32
            "1ss8ym7zayhvyrl4lzxjqiy8azx2zciwcp1x6s8vw649gmyi98jc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/adamsmd/digit-groups/")
    (synopsis
      "Highlight place-value positions in numbers")
    (description
      "Documentation at https://melpa.org/#/digit-groups")
    (license #f)))

(define-public emacs-digitalocean
  (package
    (name "emacs-digitalocean")
    (version "20190607.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/olymk2/emacs-digitalocean.git")
               (commit
                 "6c32d3593286e2a62d9afab0057c829407b0d1e8")))
        (sha256
          (base32
            "08708nfqfgcd6hzh91li0yhr4kz9lxw6i80brlnis9bfk3cs4m9x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/olymk2/emacs-digitalocean")
    (synopsis
      "Create and manipulate digitalocean droplets")
    (description
      "Documentation at https://melpa.org/#/digitalocean")
    (license #f)))

(define-public emacs-digitalocean-helm
  (package
    (name "emacs-digitalocean-helm")
    (version "20180610.746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/olymk2/emacs-digitalocean-helm.git")
               (commit
                 "b125c9882eded7d73ec109d152b26625f333440b")))
        (sha256
          (base32
            "072v1800gjv566fqjxp8dvzkilwhbvl7lc5fqc0mr4xw8lpldkx9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-digitalocean))
    (home-page
      "https://gitlab.com/olymk2/digitalocean-api")
    (synopsis
      "Create and manipulate digitalocean droplets")
    (description
      "Documentation at https://melpa.org/#/digitalocean-helm")
    (license #f)))

(define-public emacs-dilbert
  (package
    (name "emacs-dilbert")
    (version "20211118.1512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DaniruKun/dilbert-el.git")
               (commit
                 "3e9a39717490be4d5c14211a47fcd8588ef668af")))
        (sha256
          (base32
            "0hjscamqn70b0npj69ajycd0kld98bqkcjfnsgrmk97w367719lp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-enlive emacs-dash))
    (home-page
      "https://github.com/DaniruKun/dilbert-el")
    (synopsis "View Dilbert comics")
    (description
      "Documentation at https://melpa.org/#/dilbert")
    (license #f)))

(define-public emacs-dim
  (package
    (name "emacs-dim")
    (version "20160818.949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/dim.el.git")
               (commit
                 "5515f2e8657ef14adcc34aa5b05383a2684328ae")))
        (sha256
          (base32
            "044f337k5swz9bgfmisk6mqr5gjfv3y7zclqspdw846ka4kwpr2z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/alezost/dim.el")
    (synopsis
      "Change mode-line names of major/minor modes")
    (description
      "Documentation at https://melpa.org/#/dim")
    (license #f)))

(define-public emacs-dim-autoload
  (package
    (name "emacs-dim-autoload")
    (version "20230511.2114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/dim-autoload.git")
               (commit
                 "9e7b4d47f2dc972ec16baa6bd56b016000790ff4")))
        (sha256
          (base32
            "1f7syxknpqxvrng1sa9a7ypwg7c4r5gsc3c88rm1p5mrak2xpcg9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/dim-autoload")
    (synopsis "Dim or hide autoload cookie lines")
    (description
      "Documentation at https://melpa.org/#/dim-autoload")
    (license #f)))

(define-public emacs-dime
  (package
    (name "emacs-dime")
    (version "20210613.1431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dylan-lang/dylan-emacs-support.git")
               (commit
                 "9d2891e3e06405b75072d296f385fa795aeb9835")))
        (sha256
          (base32
            "0fxyl50n2s1pb86z46s1f0lh361q34i2x8hir91wvqsqkfajbhz0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dylan))
    (arguments '(#:files ("dime*.el")))
    (home-page "https://opendylan.org/")
    (synopsis "Dylan interaction mode")
    (description
      "Documentation at https://melpa.org/#/dime")
    (license #f)))

(define-public emacs-diminish
  (package
    (name "emacs-diminish")
    (version "20220909.847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myrjola/diminish.el.git")
               (commit
                 "fbd5d846611bad828e336b25d2e131d1bc06b83d")))
        (sha256
          (base32
            "1n4gwyhnn273ni6xnqmwx245wafjv4qgjri4ih0016bf7dny7ycq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myrjola/diminish.el")
    (synopsis
      "Diminished modes are minor modes with no modeline display")
    (description
      "Documentation at https://melpa.org/#/diminish")
    (license #f)))

(define-public emacs-diminish-buffer
  (package
    (name "emacs-diminish-buffer")
    (version "20221028.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/diminish-buffer.git")
               (commit
                 "983854a90ae39ef5d4d7aecaea108dc64aa2a593")))
        (sha256
          (base32
            "0zb5afa150cm0dv68ksl21x5k2f6dx8sd7isanad1kpz1kii7c0c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/diminish-buffer")
    (synopsis
      "Diminish (hide) buffers from buffer-menu")
    (description
      "Documentation at https://melpa.org/#/diminish-buffer")
    (license #f)))

(define-public emacs-dimmer
  (package
    (name "emacs-dimmer")
    (version "20220817.122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/dimmer.el.git")
               (commit
                 "a5b697580e5aed6168b571ae3d925753428284f8")))
        (sha256
          (base32
            "1lj7pgsyzmd547yq33k4r75vfz3pdqafvnrxcv110hmb7mj3dvr4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gonewest818/dimmer.el")
    (synopsis
      "Visually highlight the selected buffer")
    (description
      "Documentation at https://melpa.org/#/dimmer")
    (license #f)))

(define-public emacs-dionysos
  (package
    (name "emacs-dionysos")
    (version "20160810.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/dionysos.git")
               (commit
                 "0aac21caadabc5a7f09e18a9dcb02f3dec26588b")))
        (sha256
          (base32
            "1g6p9cr3p85i7ay3jmvn7f8c5k8d49fcynb3ymns7rgsf3ypvpyc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-libmpdee
            emacs-alert
            emacs-s
            emacs-dash
            emacs-pkg-info))
    (home-page
      "https://github.com/nlamirault/dionysos")
    (synopsis "Dionysos, a music player for Emacs")
    (description
      "Documentation at https://melpa.org/#/dionysos")
    (license #f)))

(define-public emacs-dir-treeview
  (package
    (name "emacs-dir-treeview")
    (version "20230922.2328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tilmanrassy/emacs-dir-treeview.git")
               (commit
                 "9024df99284414aa9dc2dff5f3ee9f874830ab74")))
        (sha256
          (base32
            "11wzi9wfib1gaag3g88mn3yfx313vzky93cgjxxc0040zrqlxfp5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-treeview))
    (home-page
      "https://github.com/tilmanrassy/emacs-dir-treeview")
    (synopsis
      "A directory tree browser and simple file manager")
    (description
      "Documentation at https://melpa.org/#/dir-treeview")
    (license #f)))

(define-public emacs-dir-treeview-themes
  (package
    (name "emacs-dir-treeview-themes")
    (version "20230112.134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tilmanrassy/emacs-dir-treeview-themes.git")
               (commit
                 "8e28c2501a978e6ff733fc9cf43a826fd8e7b87e")))
        (sha256
          (base32
            "16hmp0wp8a1ahhsqy2s7wkbz9fkjfdi5wa0hjrwc2rfg3xprf449"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dir-treeview))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/tilmanrassy/emacs-dir-treeview-themes")
    (synopsis "Themes for dir-treeview")
    (description
      "Documentation at https://melpa.org/#/dir-treeview-themes")
    (license #f)))

(define-public emacs-dircmp
  (package
    (name "emacs-dircmp")
    (version "20141204.1756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matthewlmcclure/dircmp-mode.git")
               (commit
                 "558ee0b601c2de9d247612085aafe2926f56a09f")))
        (sha256
          (base32
            "0mcsfsybpsxhzkd2m9bzc0np49azm6qf5x4x9h9lbxc8vfgh4z8s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.sh")))
    (home-page
      "https://github.com/matthewlmcclure/dircmp-mode")
    (synopsis "Compare and sync directories.")
    (description
      "Documentation at https://melpa.org/#/dircmp")
    (license #f)))

(define-public emacs-director
  (package
    (name "emacs-director")
    (version "20230213.1201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bard/emacs-director.git")
               (commit
                 "16afdbbd91b451fab44c68c8f7d0b810f5283f28")))
        (sha256
          (base32
            "14zgkzwjydahrpz2rz5iww13r4x4fdpf8im4g0nffvb3pqvsbz7f"))))
    (build-system melpa-build-system)
    (home-page
      "https://bard.github.io/emacs-director")
    (synopsis "Simulate user sessions")
    (description
      "Documentation at https://melpa.org/#/director")
    (license #f)))

(define-public emacs-dired-atool
  (package
    (name "emacs-dired-atool")
    (version "20210719.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/dired-atool.git")
               (commit
                 "01416fd5961b901c50686c91cb59b3833adc831b")))
        (sha256
          (base32
            "0dx829jlxr84mylcr0l7wgbkbhajmb2yg2dcnyd1gi768fgh7jdj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/HKey/dired-atool")
    (synopsis
      "Pack/unpack files with atool on dired.")
    (description
      "Documentation at https://melpa.org/#/dired-atool")
    (license #f)))

(define-public emacs-dired-avfs
  (package
    (name "emacs-dired-avfs")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-avfs.el")))
    (home-page "unspecified")
    (synopsis "AVFS support for dired")
    (description
      "Documentation at https://melpa.org/#/dired-avfs")
    (license #f)))

(define-public emacs-dired-collapse
  (package
    (name "emacs-dired-collapse")
    (version "20230621.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-collapse.el")))
    (home-page "unspecified")
    (synopsis
      "Collapse unique nested paths in dired listing")
    (description
      "Documentation at https://melpa.org/#/dired-collapse")
    (license #f)))

(define-public emacs-dired-duplicates
  (package
    (name "emacs-dired-duplicates")
    (version "20231109.1353")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/dired-duplicates-"
               version
               ".tar"))
        (sha256
          (base32
            "1abn7dlls04x8jkzad71zcz83bw2ndkqg1p7qqm89j2z0knfi55l"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/hjudt/dired-duplicates")
    (synopsis
      "Find duplicate files locally and remotely")
    (description
      "Documentation at https://melpa.org/#/dired-duplicates")
    (license #f)))

(define-public emacs-dired-dups
  (package
    (name "emacs-dired-dups")
    (version "20130527.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/dired-dups.git")
               (commit
                 "694ad128c822c59348ced16c4a0c1356d43da47a")))
        (sha256
          (base32
            "1lcmpzwj43gix2q56bh2gw3gfqh8vl5j3mqr8s7v3k0aw816j0ni"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/dired-dups")
    (synopsis
      "Find duplicate files and display them in a dired buffer")
    (description
      "Documentation at https://melpa.org/#/dired-dups")
    (license #f)))

(define-public emacs-dired-efap
  (package
    (name "emacs-dired-efap")
    (version "20220421.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juan-leon/dired-efap.git")
               (commit
                 "360b369cb19998c6730ee1debfbec3edb7f349a9")))
        (sha256
          (base32
            "07yfks2gj15fw0arrf0nyh5ip8kjc46fyrgpdcviwr6lk739c3jk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juan-leon/dired-efap")
    (synopsis
      "Edit Filename At Point in a dired buffer")
    (description
      "Documentation at https://melpa.org/#/dired-efap")
    (license #f)))

(define-public emacs-dired-explorer
  (package
    (name "emacs-dired-explorer")
    (version "20180607.221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jidaikobo-shibata/dired-explorer.git")
               (commit
                 "3ade0a31b5340271d05e9bf443f2504960f6c6dd")))
        (sha256
          (base32
            "0lbm326na005k3pa11rqq5nbhvm55dydi2a7fzs3bzlqwbx7d6fq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "minor-mode provides Explorer like select file at dired.")
    (description
      "Documentation at https://melpa.org/#/dired-explorer")
    (license #f)))

(define-public emacs-dired-fdclone
  (package
    (name "emacs-dired-fdclone")
    (version "20230604.1057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/dired-fdclone.el.git")
               (commit
                 "38555dc5a9427664b9b24af352de7550939625de")))
        (sha256
          (base32
            "0n84wyzvr05kkyfzzdz7fm4n4mcxrznknm37l070qzww2rarq96f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/dired-fdclone.el")
    (synopsis
      "dired functions and settings to mimic FDclone")
    (description
      "Documentation at https://melpa.org/#/dired-fdclone")
    (license #f)))

(define-public emacs-dired-filetype-face
  (package
    (name "emacs-dired-filetype-face")
    (version "20180907.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/dired-filetype-face.git")
               (commit
                 "7ade7f7e8c2d7518c65f3f0343a10c272da0f47e")))
        (sha256
          (base32
            "0s8mqz331iw2bk4xdvj9zljklqj8dxv0yaw100lddg37qmdf7lgl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jixiuf/dired-filetype-face")
    (synopsis
      "Set different faces for different filetypes in dired")
    (description
      "Documentation at https://melpa.org/#/dired-filetype-face")
    (license #f)))

(define-public emacs-dired-filter
  (package
    (name "emacs-dired-filter")
    (version "20221127.1247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "41d3eb42195d9f0894c20d18cc8e722b099aa1c1")))
        (sha256
          (base32
            "0r08nxx5gw0sz9xhby77nw6rxd19wzvi9zkjkqwgixpxhbz6akvv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils emacs-f))
    (arguments '(#:files ("dired-filter.el")))
    (home-page "unspecified")
    (synopsis "Ibuffer-like filtering for dired")
    (description
      "Documentation at https://melpa.org/#/dired-filter")
    (license #f)))

(define-public emacs-dired-git
  (package
    (name "emacs-dired-git")
    (version "20220828.6")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/dired-git.el.git")
               (commit
                 "e84387b947cd707d3ff0c039ddef753a468f88e7")))
        (sha256
          (base32
            "04jlaxrqfx5k9pra6iv6fb1zw6jrdck9nn25imxj5643z7dl248r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async-await
            emacs-async
            emacs-all-the-icons
            emacs-ppp))
    (home-page
      "https://github.com/conao3/dired-git.el")
    (synopsis "Git integration for dired")
    (description
      "Documentation at https://melpa.org/#/dired-git")
    (license #f)))

(define-public emacs-dired-gitignore
  (package
    (name "emacs-dired-gitignore")
    (version "20230909.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johannes-mueller/dired-gitignore.el.git")
               (commit
                 "b6e804c212b497d5502600bd4df10196e44d2bf7")))
        (sha256
          (base32
            "0lf2c3r4p7a92jx967346pkg666qmja1y0h0jvf9aibxj6lgngjj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/johannes-mueller/dired-gitignore.el")
    (synopsis
      "A minor mode to hide gitignored files in a dired buffer")
    (description
      "Documentation at https://melpa.org/#/dired-gitignore")
    (license #f)))

(define-public emacs-dired-hacks-utils
  (package
    (name "emacs-dired-hacks-utils")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("dired-hacks-utils.el")))
    (home-page "unspecified")
    (synopsis
      "Utilities and helpers for dired-hacks collection")
    (description
      "Documentation at https://melpa.org/#/dired-hacks-utils")
    (license #f)))

(define-public emacs-dired-hide-dotfiles
  (package
    (name "emacs-dired-hide-dotfiles")
    (version "20210222.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattiasb/dired-hide-dotfiles.git")
               (commit
                 "6a379f23f64045f5950d229254ce6f32dbbf5364")))
        (sha256
          (base32
            "0cwsjndvnv9a62ism7ckj27jdqx362947lyizka78qvmv369avv3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mattiasb/dired-hide-dotfiles")
    (synopsis "Hide dotfiles in dired")
    (description
      "Documentation at https://melpa.org/#/dired-hide-dotfiles")
    (license #f)))

(define-public emacs-dired-icon
  (package
    (name "emacs-dired-icon")
    (version "20170223.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/xuhdev/dired-icon.git")
               (commit
                 "f60e10757a5011235b519231ad35974ff25963ed")))
        (sha256
          (base32
            "0r9qmr2l5kjwh1frp0k87nyaf13f7f9fjjf9yf9z92djqapfm9dd"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "get-icon-path-gtk3.py"
          "get-icon-path-macos.m")))
    (home-page
      "https://gitlab.com/xuhdev/dired-icon")
    (synopsis
      "A minor mode to display a list of associated icons in dired buffers.")
    (description
      "Documentation at https://melpa.org/#/dired-icon")
    (license #f)))

(define-public emacs-dired-imenu
  (package
    (name "emacs-dired-imenu")
    (version "20230904.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/dired-imenu.git")
               (commit
                 "4f6169f9056fe5f9b9a97e9e75f27825a15e05b9")))
        (sha256
          (base32
            "0djn4ya34l58yf9gssgm4x531qgcp1ad3wizq1nv3qyn2cjfxm7c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/dired-imenu")
    (synopsis "imenu binding for dired mode")
    (description
      "Documentation at https://melpa.org/#/dired-imenu")
    (license #f)))

(define-public emacs-dired-k
  (package
    (name "emacs-dired-k")
    (version "20211002.2358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dired-k.git")
               (commit
                 "1ddd8e0ea06f0e25cd5dedb2370cfa0cacfa8c9d")))
        (sha256
          (base32
            "1vxzcd159afljpacylz8dnjbnnkc97s44f3y0zdv35wcplszgjhr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/dired-k")
    (synopsis
      "Highlight dired by size, date, git status")
    (description
      "Documentation at https://melpa.org/#/dired-k")
    (license #f)))

(define-public emacs-dired-launch
  (package
    (name "emacs-dired-launch")
    (version "20231016.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomp/dired-launch.git")
               (commit
                 "d36bbed96ca8db8e18b005568f79c3728ce0171b")))
        (sha256
          (base32
            "07f4dh3zm4p5pxa0wyjr5pdsd5ks66q9qv3rcbxnrjm6m96g2rqi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thomp/dired-launch")
    (synopsis "Use dired as a launcher")
    (description
      "Documentation at https://melpa.org/#/dired-launch")
    (license #f)))

(define-public emacs-dired-list
  (package
    (name "emacs-dired-list")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-list.el")))
    (home-page
      "https://github.com/Fuco1/dired-hacks")
    (synopsis "Create dired listings from sources")
    (description
      "Documentation at https://melpa.org/#/dired-list")
    (license #f)))

(define-public emacs-dired-lsi
  (package
    (name "emacs-dired-lsi")
    (version "20200812.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/dired-lsi.el.git")
               (commit
                 "0f4038c8b47f6cfc70f82062800700c14c9912c2")))
        (sha256
          (base32
            "1bb46cla9pa4697njyqlycjjxf63i0nsxppg9sb0762xsashyz9s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/conao3/dired-lsi.el")
    (synopsis
      "Add memo to directory and show it in dired")
    (description
      "Documentation at https://melpa.org/#/dired-lsi")
    (license #f)))

(define-public emacs-dired-narrow
  (package
    (name "emacs-dired-narrow")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-narrow.el")))
    (home-page "unspecified")
    (synopsis
      "Live-narrowing of search results for dired")
    (description
      "Documentation at https://melpa.org/#/dired-narrow")
    (license #f)))

(define-public emacs-dired-open
  (package
    (name "emacs-dired-open")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-open.el")))
    (home-page "unspecified")
    (synopsis
      "Open files from dired using using custom actions")
    (description
      "Documentation at https://melpa.org/#/dired-open")
    (license #f)))

(define-public emacs-dired-posframe
  (package
    (name "emacs-dired-posframe")
    (version "20200817.420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/dired-posframe.el.git")
               (commit
                 "1a21eb9ad956a0371dd3c9e1bec53407d685f705")))
        (sha256
          (base32
            "0k633fz5gccza5l3dydn55yg4r1a50bgcmxwxn89qc7cd8dck75v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (home-page
      "https://github.com/conao3/dired-posframe.el")
    (synopsis "Peep dired items using posframe")
    (description
      "Documentation at https://melpa.org/#/dired-posframe")
    (license #f)))

(define-public emacs-dired-quick-sort
  (package
    (name "emacs-dired-quick-sort")
    (version "20201221.403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/xuhdev/dired-quick-sort.git")
               (commit
                 "69b06f306a5fc2b38e707bae3ff1e35db2b39b6b")))
        (sha256
          (base32
            "01zdha3p7wsf98yayvwgpd4arcs7yhz62yk1nyq9n13hvmqg7dvk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page
      "https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort")
    (synopsis
      "Persistent quick sorting of dired buffers in various ways.")
    (description
      "Documentation at https://melpa.org/#/dired-quick-sort")
    (license #f)))

(define-public emacs-dired-rainbow
  (package
    (name "emacs-dired-rainbow")
    (version "20221127.1247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "41d3eb42195d9f0894c20d18cc8e722b099aa1c1")))
        (sha256
          (base32
            "0r08nxx5gw0sz9xhby77nw6rxd19wzvi9zkjkqwgixpxhbz6akvv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-rainbow.el")))
    (home-page "unspecified")
    (synopsis
      "Extended file highlighting according to its type")
    (description
      "Documentation at https://melpa.org/#/dired-rainbow")
    (license #f)))

(define-public emacs-dired-ranger
  (package
    (name "emacs-dired-ranger")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("dired-ranger.el")))
    (home-page "unspecified")
    (synopsis
      "Implementation of useful ranger features for dired")
    (description
      "Documentation at https://melpa.org/#/dired-ranger")
    (license #f)))

(define-public emacs-dired-recent
  (package
    (name "emacs-dired-recent")
    (version "20211004.1924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/dired-recent.el.git")
               (commit
                 "a376f53e42fdca80c3286e8111578c65c64b0711")))
        (sha256
          (base32
            "1dk9q5qwr6y6crmq95qsz86jc8wvvjmqxvh9xp3xdf6c87yblgkb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vifon/dired-recent.el")
    (synopsis "Dired visited paths history")
    (description
      "Documentation at https://melpa.org/#/dired-recent")
    (license #f)))

(define-public emacs-dired-rifle
  (package
    (name "emacs-dired-rifle")
    (version "20210316.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/dired-rifle.el.git")
               (commit
                 "cc1af692bbac651f5e5111d9ab1c0805989d65e5")))
        (sha256
          (base32
            "08csqjpwlqln2yk5by9zwh6jsl5kn33jy240d7a1py1d892b7xy8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vifon/dired-rifle.el")
    (synopsis "Call rifle(1) from dired")
    (description
      "Documentation at https://melpa.org/#/dired-rifle")
    (license #f)))

(define-public emacs-dired-rmjunk
  (package
    (name "emacs-dired-rmjunk")
    (version "20191007.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~jakob/dired-rmjunk")
               (commit
                 "92af5fcc2bd0bc3826f4ce238a850e9a362533a4")))
        (sha256
          (base32
            "0720lnnm0sjf8yazr0xjwfrzqwia283jj3c6hcbgfp5l0z162m5b"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~jakob/dired-rmjunk")
    (synopsis
      "A home directory cleanup utility for Dired.")
    (description
      "Documentation at https://melpa.org/#/dired-rmjunk")
    (license #f)))

(define-public emacs-dired-rsync
  (package
    (name "emacs-dired-rsync")
    (version "20230822.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stsquad/dired-rsync.git")
               (commit
                 "5bcb851f3bf9c4f7c07299fcc25be7c408a68cda")))
        (sha256
          (base32
            "0lgqq7lh6pkg5mr9b2ilpkyw1gjrdr4frq26vjkmrl95wwphbc32"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments '(#:files ("dired-rsync.el")))
    (home-page
      "https://github.com/stsquad/dired-rsync")
    (synopsis "Allow rsync from dired buffers")
    (description
      "Documentation at https://melpa.org/#/dired-rsync")
    (license #f)))

(define-public emacs-dired-rsync-transient
  (package
    (name "emacs-dired-rsync-transient")
    (version "20230714.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stsquad/dired-rsync.git")
               (commit
                 "95607fc7eb84e792122b52d2b1d62f49199a2a37")))
        (sha256
          (base32
            "1zvsmpvham670i807rs8f2f0h73yk4fpaavj0hzksqcl5ykh4fgr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dired-rsync))
    (arguments
      '(#:files ("dired-rsync-transient.el")))
    (home-page
      "https://github.com/stsquad/dired-rsync")
    (synopsis "Transient command for dired-rsync")
    (description
      "Documentation at https://melpa.org/#/dired-rsync-transient")
    (license #f)))

(define-public emacs-dired-sidebar
  (package
    (name "emacs-dired-sidebar")
    (version "20230623.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/dired-sidebar.git")
               (commit
                 "85ec4fffc2607d38ec2e3b8577320aceb8e652dd")))
        (sha256
          (base32
            "09708kcbzx9v904rg49yg3xjix8kbkx89xsysx66imxh3s8f8xjb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dired-subtree))
    (home-page
      "https://github.com/jojojames/dired-sidebar")
    (synopsis "Tree browser leveraging dired")
    (description
      "Documentation at https://melpa.org/#/dired-sidebar")
    (license #f)))

(define-public emacs-dired-single
  (package
    (name "emacs-dired-single")
    (version "20230306.626")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/dired-single-"
               version
               ".tar"))
        (sha256
          (base32
            "1s9n5dwaa2z9jrpsan2gd7k9svdapzbbizxfy5q19f15szka386i"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/amano.kenji/dired-single")
    (synopsis "Reuse the current dired buffer")
    (description
      "Documentation at https://melpa.org/#/dired-single")
    (license #f)))

(define-public emacs-dired-subtree
  (package
    (name "emacs-dired-subtree")
    (version "20230512.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/dired-hacks.git")
               (commit
                 "874449d6fc98aee565e1715ec18acec3c1c2cafb")))
        (sha256
          (base32
            "119m942a9p13l62w5wq2iprkvakv0c4xwfhq2yivhwb21rqmxq0g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-dired-hacks-utils))
    (arguments '(#:files ("dired-subtree.el")))
    (home-page "unspecified")
    (synopsis
      "Insert subdirectories in a tree-like fashion")
    (description
      "Documentation at https://melpa.org/#/dired-subtree")
    (license #f)))

(define-public emacs-dired-toggle
  (package
    (name "emacs-dired-toggle")
    (version "20190616.303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fasheng/dired-toggle.git")
               (commit
                 "7fe5fe35c63d1b0da14d6d6d52bdf6b2a5410ba7")))
        (sha256
          (base32
            "0hdm6gn9r2crzpjd09v14cd8hrnshv9qwhqpi9nsm6rnijsfvq8y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fasheng/dired-toggle")
    (synopsis
      "Show dired as sidebar and will not create new buffers when changing dir")
    (description
      "Documentation at https://melpa.org/#/dired-toggle")
    (license #f)))

(define-public emacs-dired-toggle-sudo
  (package
    (name "emacs-dired-toggle-sudo")
    (version "20211216.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/renard/dired-toggle-sudo.git")
               (commit
                 "9f86cdf858225b15c20affb97ed105e4109047bf")))
        (sha256
          (base32
            "19p2yl61m7krjj2p6pg9cjw8n4zm3a6shv1k9vq0xvxjq86dx59l"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Browse directory with sudo privileges.")
    (description
      "Documentation at https://melpa.org/#/dired-toggle-sudo")
    (license #f)))

(define-public emacs-dired-view-data
  (package
    (name "emacs-dired-view-data")
    (version "20220129.339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/dired-view-data.git")
               (commit
                 "96d4cb6569fd2be90a516dedd98263374bbc6ead")))
        (sha256
          (base32
            "1i1prpzp10irshv42lwv08lzwvm0r9amapbbki07qhmqd5q0av06"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-ess-view-data))
    (home-page
      "https://github.com/ShuguangSun/dired-view-data")
    (synopsis "View data from dired via ESS and R")
    (description
      "Documentation at https://melpa.org/#/dired-view-data")
    (license #f)))

(define-public emacs-diredc
  (package
    (name "emacs-diredc")
    (version "20220113.332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-diredc.git")
               (commit
                 "7ee68f6b1c87f8ab86cf23416472747e88860717")))
        (sha256
          (base32
            "18yzqd2rzi6fx7xw2xs0fysc7h3lzlvad4wdg2qq8c6q9028cc25"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-key-assist))
    (home-page
      "https://github.com/Boruch-Baum/emacs-diredc")
    (synopsis "Extensions for dired")
    (description
      "Documentation at https://melpa.org/#/diredc")
    (license #f)))

(define-public emacs-diredfl
  (package
    (name "emacs-diredfl")
    (version "20230224.1302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/diredfl.git")
               (commit
                 "17e805763d57370c4eff2c92ed257b72eeb9f94a")))
        (sha256
          (base32
            "0p9fznvblw6md37lgqjpyw8ifvgp513v2sgfyh6sqwpvzz0zl80g"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/purcell/diredfl")
    (synopsis
      "Extra font lock rules for a more colourful dired")
    (description
      "Documentation at https://melpa.org/#/diredfl")
    (license #f)))

(define-public emacs-diredful
  (package
    (name "emacs-diredful")
    (version "20160529.2017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thamer/diredful.git")
               (commit
                 "ad328a15c5deffc1021af9b3f19a745dcd8f4415")))
        (sha256
          (base32
            "1s6gwn3ksvk2wyslv7kwn0da3xgw1ayx6yaddhbxz0kg6ps2ran2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/thamer/diredful")
    (synopsis "colorful file names in dired buffers")
    (description
      "Documentation at https://melpa.org/#/diredful")
    (license #f)))

(define-public emacs-direnv
  (package
    (name "emacs-direnv")
    (version "20230721.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-direnv.git")
               (commit
                 "14f74269af34f8c30ab4a521eff290b74460daed")))
        (sha256
          (base32
            "0q5n499vc7d57fyr98alyrfycdvwgykf2fia3jq090h6xn5jbjl3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/wbolster/emacs-direnv")
    (synopsis "direnv integration")
    (description
      "Documentation at https://melpa.org/#/direnv")
    (license #f)))

(define-public emacs-direx
  (package
    (name "emacs-direx")
    (version "20230409.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/direx.git")
               (commit
                 "935d2010234c02c93e22d6e1cc72d595341ba855")))
        (sha256
          (base32
            "1wmhfkhd8sxk6znpfkb0ifbdyfq8dapm38z0j9vll227mzk775pf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Simple Directory Explorer")
    (description
      "Documentation at https://melpa.org/#/direx")
    (license #f)))

(define-public emacs-direx-grep
  (package
    (name "emacs-direx-grep")
    (version "20140515.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/direx-grep.git")
               (commit
                 "1109a512a80b2673a70b18b8568514049017faad")))
        (sha256
          (base32
            "0swdh0qynpijsv6a2d308i42hfa0jwqsnmf4sm8vrhaf3vv25f5h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-direx))
    (home-page "https://github.com/aki2o/direx-grep")
    (synopsis
      "Grep node of direx.el using incremental search like anything.el/helm.el")
    (description
      "Documentation at https://melpa.org/#/direx-grep")
    (license #f)))

(define-public emacs-dirtree
  (package
    (name "emacs-dirtree")
    (version "20140129.832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/dirtree.git")
               (commit
                 "ba55f1e716e386fdd37cb8e7f48616e405dc7251")))
        (sha256
          (base32
            "0abs3r4zzfnf4igiakrv3bpyxz7qlnw26l57rynsk7c3w3s5ya29"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-mode emacs-windata))
    (home-page "unspecified")
    (synopsis "Directory tree views")
    (description
      "Documentation at https://melpa.org/#/dirtree")
    (license #f)))

(define-public emacs-dirtree-prosjekt
  (package
    (name "emacs-dirtree-prosjekt")
    (version "20140129.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/prosjekt.git")
               (commit
                 "a864a8be5842223043702395f311e3350c28e9db")))
        (sha256
          (base32
            "1m8zvrv5aws7b0dffk8y6b5mncdk2c4k90mx69jys10fs0gc5hb3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prosjekt emacs-dirtree))
    (arguments
      '(#:files
        ("prosjekt/ext/dirtree/dirtree-prosjekt.el")))
    (home-page
      "https://github.com/abingham/prosjekt")
    (synopsis "dirtree integration for prosjekt.")
    (description
      "Documentation at https://melpa.org/#/dirtree-prosjekt")
    (license #f)))

(define-public emacs-dirvish
  (package
    (name "emacs-dirvish")
    (version "20230519.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexluigit/dirvish.git")
               (commit
                 "119f9f59a618bb7b476c93e9ab1d7542c5c1df41")))
        (sha256
          (base32
            "00ap23b6q6qay2hz4nyvf9xsmib68hdf47gwyg9gjlq85qhagw41"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "extensions/*.el")))
    (home-page
      "https://github.com/alexluigit/dirvish")
    (synopsis
      "A modern file manager based on dired mode")
    (description
      "Documentation at https://melpa.org/#/dirvish")
    (license #f)))

(define-public emacs-disable-mouse
  (package
    (name "emacs-disable-mouse")
    (version "20210512.2114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/disable-mouse.git")
               (commit
                 "cae3be9dd012727b40ad3b511731191f79cebe42")))
        (sha256
          (base32
            "0zx3ihhxhjvhsi08khyx8fdhw2kg065zhhicqc587jsabk0wzj6f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/disable-mouse")
    (synopsis "Disable mouse commands globally")
    (description
      "Documentation at https://melpa.org/#/disable-mouse")
    (license #f)))

(define-public emacs-disaster
  (package
    (name "emacs-disaster")
    (version "20230311.2324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jart/disaster.git")
               (commit
                 "16bba9afb92aacf06c088c29ba47813b65a80d87")))
        (sha256
          (base32
            "1jbnycp9k78c9gp14flf4997fmsd95x3n62a108l8wr26a3cy95i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jart/disaster")
    (synopsis
      "Disassemble C, C++ or Fortran code under cursor")
    (description
      "Documentation at https://melpa.org/#/disaster")
    (license #f)))

(define-public emacs-discourse
  (package
    (name "emacs-discourse")
    (version "20160911.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/discourse-api.git")
               (commit
                 "a86c7e608851e186fe12e892a573994f08c8e65e")))
        (sha256
          (base32
            "1p4crd7v94hmqzqh8bc7jx1pfhallmj4kn36f8l22z4r2mkyycxc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-s))
    (home-page
      "https://github.com/lujun9972/discourse-api")
    (synopsis "discourse api")
    (description
      "Documentation at https://melpa.org/#/discourse")
    (license #f)))

(define-public emacs-discover
  (package
    (name "emacs-discover")
    (version "20140103.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mickeynp/discover.el.git")
               (commit
                 "7b0044bbb3b3bd5d811fdfb0f5ac6ec8de1239df")))
        (sha256
          (base32
            "0f7h2rhh37lrs6xclj182li6s1fawv5m8w3hgy6qgm06dam45lka"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-makey))
    (home-page "unspecified")
    (synopsis "discover more of Emacs")
    (description
      "Documentation at https://melpa.org/#/discover")
    (license #f)))

(define-public emacs-discover-clj-refactor
  (package
    (name "emacs-discover-clj-refactor")
    (version "20150328.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/discover-clj-refactor.el.git")
               (commit
                 "3fbd5c1162739e606d7cf5d4f5d7426547d99647")))
        (sha256
          (base32
            "0l2g58f55p8zmzv2q2hf163ggm9p0wk8hg93wlkyldrgyb94dgf4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clj-refactor emacs-discover))
    (home-page "unspecified")
    (synopsis
      "Adds discover context menu for clj-refactor")
    (description
      "Documentation at https://melpa.org/#/discover-clj-refactor")
    (license #f)))

(define-public emacs-discover-js2-refactor
  (package
    (name "emacs-discover-js2-refactor")
    (version "20140129.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/discover-js2-refactor.git")
               (commit
                 "3812abf61f39f3e73a9f3daefa6fed4f21a429ba")))
        (sha256
          (base32
            "1vnbn4asz3lifscvy4shzisl6r0gkgq0qsa3kpgif3853wcd2rvn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-refactor emacs-discover))
    (home-page "unspecified")
    (synopsis
      "Adds discover context menu for js2-refactor")
    (description
      "Documentation at https://melpa.org/#/discover-js2-refactor")
    (license #f)))

(define-public emacs-discover-my-major
  (package
    (name "emacs-discover-my-major")
    (version "20180606.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/discover-my-major.git")
               (commit
                 "c592e5e67454f0d1b68669ac0c270073164b16b3")))
        (sha256
          (base32
            "1lhjrknxw928vmw5h59q98sarh5pwjn0fpdyr38sql5zyv0ikc6w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-makey))
    (home-page
      "https://framagit.org/steckerhalter/discover-my-major")
    (synopsis
      "Discover key bindings and their meaning for the current Emacs major mode")
    (description
      "Documentation at https://melpa.org/#/discover-my-major")
    (license #f)))

(define-public emacs-disk
  (package
    (name "emacs-disk")
    (version "20171116.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kensanata/disk.git")
               (commit
                 "283e54e3be7d08f959076240b2ab324e25632137")))
        (sha256
          (base32
            "15fkfl9kjlpsg9p5g0xhm384ipvrzclwxvqk8vz1zixq0wam2ajm"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/DiskKey")
    (synopsis
      "simplified find-file, revert-file, save-buffer interface")
    (description
      "Documentation at https://melpa.org/#/disk")
    (license #f)))

(define-public emacs-dispass
  (package
    (name "emacs-dispass")
    (version "20140202.1531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/dispass.el.git")
               (commit
                 "b6e8f89040ebaaf0e7609b04bc27a8979f0ae861")))
        (sha256
          (base32
            "075gj81rnhrvv061wnldixpfmlsyfbnvacnk107z6f9v3m2m3vl1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://projects.ryuslash.org/dispass.el/")
    (synopsis "Emacs wrapper for DisPass")
    (description
      "Documentation at https://melpa.org/#/dispass")
    (license #f)))

(define-public emacs-display-theme
  (package
    (name "emacs-display-theme")
    (version "20140115.1556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/emacs-display-theme.git")
               (commit
                 "b180b3be7a74ae4799a14e7e4bc2fe10e3ff7a15")))
        (sha256
          (base32
            "0r560bpgw5p2pfcgkgcrlpp1bprv1f23dl4y5fjk06dg93fgaysa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kawabata/emacs-display-theme/")
    (synopsis
      "display current theme(s) at mode-line")
    (description
      "Documentation at https://melpa.org/#/display-theme")
    (license #f)))

(define-public emacs-display-wttr
  (package
    (name "emacs-display-wttr")
    (version "20221102.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/josegpt/display-wttr.git")
               (commit
                 "7062953d034e27c297d58748cf74dad552aa2873")))
        (sha256
          (base32
            "1yppnxpzpwp3qkxfa9g8c0vzxg2s08qq4djk635hrml57adaya8g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/josegpt/display-wttr")
    (synopsis
      "Display wttr(weather) in the mode line")
    (description
      "Documentation at https://melpa.org/#/display-wttr")
    (license #f)))

(define-public emacs-dispwatch
  (package
    (name "emacs-dispwatch")
    (version "20210305.342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mnp/dispwatch.git")
               (commit
                 "03abbac89a9f625aaa1a808dd49ae4906f466421")))
        (sha256
          (base32
            "0wf3cyf5clkmh620q83x361nsnh60jhyfp90iqmabk3qs9x8amgs"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mnp/dispwatch")
    (synopsis
      "Watch displays for configuration changes")
    (description
      "Documentation at https://melpa.org/#/dispwatch")
    (license #f)))

(define-public emacs-dist-file-mode
  (package
    (name "emacs-dist-file-mode")
    (version "20180830.418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/dist-file-mode.el.git")
               (commit
                 "e1ce8f592bc5d4d86d2f09e334728ac0d524c761")))
        (sha256
          (base32
            "09rp83d81y9mm81isrwvacl21vgah7nhi5r4j2xbp13kgdn7my1w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/emacs-php/dist-file-mode.el")
    (synopsis "Dispatch major mode for *.dist files")
    (description
      "Documentation at https://melpa.org/#/dist-file-mode")
    (license #f)))

(define-public emacs-distel-completion-lib
  (package
    (name "emacs-distel-completion-lib")
    (version "20180827.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/distel-completion.git")
               (commit
                 "acc4c0a5521904203d797fe96b08e5fae4233c7e")))
        (sha256
          (base32
            "0yvp3dwa9mwfyrqla27ycwyjad4bp1267bxv0chxcr4528hnygl3"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("distel-completion-lib.el")))
    (home-page
      "github.com/sebastiw/distel-completion")
    (synopsis "Completion library for Erlang/Distel")
    (description
      "Documentation at https://melpa.org/#/distel-completion-lib")
    (license #f)))

(define-public emacs-distinguished-theme
  (package
    (name "emacs-distinguished-theme")
    (version "20151216.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lokaltog/distinguished-theme.git")
               (commit
                 "9b1d25ac59465a5016d187ea84b7614c95a29b3b")))
        (sha256
          (base32
            "03d8zb2is7n2y2z0k6j37cijjc3ndgasxsm9gqyq7drlq9bqwzsm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lokaltog/distinguished-theme")
    (synopsis "A dark and elegant theme for emacs.")
    (description
      "Documentation at https://melpa.org/#/distinguished-theme")
    (license #f)))

(define-public emacs-ditz-mode
  (package
    (name "emacs-ditz-mode")
    (version "20150729.940")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ditz-mode-"
               version
               ".el"))
        (sha256
          (base32
            "0s9zvfvq5n8z1yndpg2qnmqnmiplpl6vq05mah9mlwym2d73sdjy"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs interface to Ditz issue tracking system")
    (description
      "Documentation at https://melpa.org/#/ditz-mode")
    (license #f)))

(define-public emacs-dix
  (package
    (name "emacs-dix")
    (version "20230126.1017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/dix.git")
               (commit
                 "5eeed9362fbeaf5a032bccd69b861b8a36877516")))
        (sha256
          (base32
            "0w23qcmlpy23v481nqikjpd3kgwpjapihlwhxdxmpd5h90khkj9j"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("dix.el" "schemas.xml" "local-schemas.xml")))
    (home-page "http://wiki.apertium.org/wiki/Emacs")
    (synopsis "Apertium XML editing minor mode")
    (description
      "Documentation at https://melpa.org/#/dix")
    (license #f)))

(define-public emacs-dix-evil
  (package
    (name "emacs-dix-evil")
    (version "20181210.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/dix.git")
               (commit
                 "5230c18456ab034f2fb69acdbef62c1abae6a8cf")))
        (sha256
          (base32
            "161ykw5p6wxy3dlx7f6zxg1cwl8hh411b7clzc5zhdpmq1wnqy0b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dix emacs-evil))
    (arguments '(#:files ("dix-evil.el")))
    (home-page "http://wiki.apertium.org/wiki/Emacs")
    (synopsis
      "optional evil-integration with dix.el")
    (description
      "Documentation at https://melpa.org/#/dix-evil")
    (license #f)))

(define-public emacs-dizzee
  (package
    (name "emacs-dizzee")
    (version "20171201.916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidmiller/dizzee.git")
               (commit
                 "e3cf1c2ea5d0fc00747524b6f3c5b905d0a8c8e1")))
        (sha256
          (base32
            "1i32msin8ra963w7af6612d038gxb25m1gj97kbjymjq1r8zbdrv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidmiller/dizzee")
    (synopsis
      "A more pleasant way to manage your project's subprocesses in Emacs.")
    (description
      "Documentation at https://melpa.org/#/dizzee")
    (license #f)))

(define-public emacs-django-commands
  (package
    (name "emacs-django-commands")
    (version "20220314.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-django-commands.git")
               (commit
                 "7510c0f068bf214ad012c203d68e03ff4262efdf")))
        (sha256
          (base32
            "0d27cz3i78n5n4bhmkzr6yg2mz5hrpf0r25m71176d6v0ckq7pwh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-django-commands")
    (synopsis "Run django commands")
    (description
      "Documentation at https://melpa.org/#/django-commands")
    (license #f)))

(define-public emacs-django-manage
  (package
    (name "emacs-django-manage")
    (version "20160819.212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gopar/django-manage.git")
               (commit
                 "876fb2cb627d465adfdc905841279784bcdd7ee8")))
        (sha256
          (base32
            "0yi38aif1n0s9yp87wimdbnq7vr7k5gbshfprj9ansibrjxnb6xk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page "unspecified")
    (synopsis
      "Django minor mode for commanding manage.py")
    (description
      "Documentation at https://melpa.org/#/django-manage")
    (license #f)))

(define-public emacs-django-mode
  (package
    (name "emacs-django-mode")
    (version "20170522.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unrelentingtech/django-mode.git")
               (commit
                 "a71b8dd984e7f724b8321246e5c353a4ae5c986e")))
        (sha256
          (base32
            "0xf33ri5phy2mrb1dwvqb8waba33gj9bwmf6jhl6n0ksm43x0z40"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-s emacs-helm-make))
    (arguments
      '(#:files ("*.el" (:exclude "*-snippets.el"))))
    (home-page "unspecified")
    (synopsis "Major mode for Django web framework.")
    (description
      "Documentation at https://melpa.org/#/django-mode")
    (license #f)))

(define-public emacs-django-snippets
  (package
    (name "emacs-django-snippets")
    (version "20131229.1611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unrelentingtech/django-mode.git")
               (commit
                 "a71b8dd984e7f724b8321246e5c353a4ae5c986e")))
        (sha256
          (base32
            "0xf33ri5phy2mrb1dwvqb8waba33gj9bwmf6jhl6n0ksm43x0z40"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("django-snippets.el" "snippets")))
    (home-page
      "https://github.com/myfreeweb/django-mode")
    (synopsis "Yasnippets for django")
    (description
      "Documentation at https://melpa.org/#/django-snippets")
    (license #f)))

(define-public emacs-django-theme
  (package
    (name "emacs-django-theme")
    (version "20131022.902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrzejsliwa/django-theme.el.git")
               (commit
                 "86c8142b3eb1addd94a43aa6f1d98dab06401af0")))
        (sha256
          (base32
            "1azf4p6salga7269l0kf13bqlxf9idp0ys8mm20qpyjpj79p5g9w"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("django-theme.el")))
    (home-page
      "http://github/anrzejsliwa/django-theme")
    (synopsis "Custom face theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/django-theme")
    (license #f)))

(define-public emacs-djangonaut
  (package
    (name "emacs-djangonaut")
    (version "20230821.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/djangonaut.git")
               (commit
                 "261dc48b77c8196587421f691d5b8666c447384c")))
        (sha256
          (base32
            "01vgqba124zw9ya5dsmm990qrn62866dfih8yg2gf580bfq9acax"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit-popup
            emacs-pythonic
            emacs-f
            emacs-s))
    (home-page
      "https://github.com/proofit404/djangonaut")
    (synopsis
      "Minor mode to interact with Django projects")
    (description
      "Documentation at https://melpa.org/#/djangonaut")
    (license #f)))

(define-public emacs-djinni-mode
  (package
    (name "emacs-djinni-mode")
    (version "20190303.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielmartin/djinni-mode.git")
               (commit
                 "6f84bc60d078725cc8b922a259ec5f4c7de83681")))
        (sha256
          (base32
            "1x77f0a0gz9xfmlma6bdvm0x5rn4w08fkmdbjqvllqvca1630s12"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danielmartin/djinni-mode")
    (synopsis "Major-mode for editing Djinni files.")
    (description
      "Documentation at https://melpa.org/#/djinni-mode")
    (license #f)))

(define-public emacs-dkdo
  (package
    (name "emacs-dkdo")
    (version "20131110.1119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidkeegan/dkdo.git")
               (commit
                 "fd6bb105e8331fafb6385c5238c988c4c5bbe2da")))
        (sha256
          (base32
            "1nbvdnw9g3zbbb0n2sn2kxfzs5wichhl9qid3qjp8dsiq1wpv459"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dkmisc))
    (arguments
      '(#:files ("*.el" "*.texi" "dir" "*.do")))
    (home-page "https://github.com/davidkeegan/dkdo")
    (synopsis
      "Do List major mode based on org-mode.")
    (description
      "Documentation at https://melpa.org/#/dkdo")
    (license #f)))

(define-public emacs-dkl
  (package
    (name "emacs-dkl")
    (version "20161005.7")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/dkl.git")
               (commit
                 "6b4584f86037bda3383960c678d51f340229fb91")))
        (sha256
          (base32
            "1xpidgj5xk0g4ajpglhbhi02s5il8qqcvh2ccf4ac9daa1r34kxp"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "keyboards" "layouts")))
    (home-page "https://github.com/flexibeast/dkl")
    (synopsis "Display keyboard layout.")
    (description
      "Documentation at https://melpa.org/#/dkl")
    (license #f)))

(define-public emacs-dklrt
  (package
    (name "emacs-dklrt")
    (version "20131110.1341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidkeegan/dklrt.git")
               (commit
                 "5d6c99f8018335256ab934b4c1049708ae2d48ba")))
        (sha256
          (base32
            "063nnln5m42qf190vr2z0ibacyn7n0xkxm3v5vaa4gxdvdwzhshs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dkmisc emacs-ledger-mode))
    (arguments
      '(#:files ("*.el" "*.texi" "dir" "*.py")))
    (home-page
      "https://github.com/davidkeegan/dklrt")
    (synopsis "Ledger Recurring Transactions.")
    (description
      "Documentation at https://melpa.org/#/dklrt")
    (license #f)))

(define-public emacs-dkmisc
  (package
    (name "emacs-dkmisc")
    (version "20131110.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidkeegan/dkmisc.git")
               (commit
                 "fe3d49c6f8322b6f89466361acd97585bdfe0608")))
        (sha256
          (base32
            "1nz71g8pb19aqjcb4s94hhn6j30cc04q05kmwvcbxpjb11qqrv49"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidkeegan/dkmisc")
    (synopsis
      "Miscellaneous functions required by dk* packages.")
    (description
      "Documentation at https://melpa.org/#/dkmisc")
    (license #f)))

(define-public emacs-dmacro
  (package
    (name "emacs-dmacro")
    (version "20200803.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/dmacro.git")
               (commit
                 "3480b97aaad9e65fa03c6a9d1a0a8111be1179f8")))
        (sha256
          (base32
            "1vb2jz4z4z9bhw76b1l08jf8gd3kq6c8zsxxvmlan87nwkj211wz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emacs-jp/dmacro")
    (synopsis
      "Repeated detection and execution of key operation")
    (description
      "Documentation at https://melpa.org/#/dmacro")
    (license #f)))

(define-public emacs-dmenu
  (package
    (name "emacs-dmenu")
    (version "20190908.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-dmenu.git")
               (commit
                 "e8cc9b27c79d3ecc252267c082ab8e9c82eab264")))
        (sha256
          (base32
            "098ncygms1r33zhjlq4fj2p4jc91v5whqrm3fazzdk7sd6dilf25"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "simulate the dmenu command line program")
    (description
      "Documentation at https://melpa.org/#/dmenu")
    (license #f)))

(define-public emacs-dna-mode
  (package
    (name "emacs-dna-mode")
    (version "20191001.2108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhgorrell/dna-mode-el.git")
               (commit
                 "7a48393fcf0015eed2368fcb89b3091c9d029dc4")))
        (sha256
          (base32
            "05p1mllp7vgk69078gn6hc0vx5hfqz6k81i4ghkfkxr5fdm5fdk5"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.mahalito.net/~harley/elisp/dna-mode.el")
    (synopsis
      "a major mode for editing dna sequences")
    (description
      "Documentation at https://melpa.org/#/dna-mode")
    (license #f)))

(define-public emacs-doc-show-inline
  (package
    (name "emacs-doc-show-inline")
    (version "20230808.1344")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/doc-show-inline-"
               version
               ".tar"))
        (sha256
          (base32
            "1rha8bh8fsnv1z089rvanrnxc8413f9lp8p7nj4qhq50mikv7qxn"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-doc-show-inline")
    (synopsis
      "Show doc-strings found in external files")
    (description
      "Documentation at https://melpa.org/#/doc-show-inline")
    (license #f)))

(define-public emacs-docbook-snippets
  (package
    (name "emacs-docbook-snippets")
    (version "20150714.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhradilek/emacs-docbook-snippets.git")
               (commit
                 "b06297fdec039a541aaa6312cb328a11062cfab4")))
        (sha256
          (base32
            "1nbm3wzd12rsrhnwlcc6b72b1ala328mfpcp5bwlfcdshw6mfcrq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("docbook-snippets.el" "snippets")))
    (home-page
      "https://github.com/jhradilek/emacs-docbook-snippets")
    (synopsis "Yasnippets for DocBook")
    (description
      "Documentation at https://melpa.org/#/docbook-snippets")
    (license #f)))

(define-public emacs-docean
  (package
    (name "emacs-docean")
    (version "20180605.1744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/docean.git")
               (commit
                 "bbe2298fd21f7876fc2d5c52a69b931ff59df979")))
        (sha256
          (base32
            "1fzs6k76nyz2xjvydks6v6d2ib7qqj181s7c8r57w9ylr2zqfacj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/emacs-pe/docean.el")
    (synopsis
      "Interact with DigitalOcean from Emacs.")
    (description
      "Documentation at https://melpa.org/#/docean")
    (license #f)))

(define-public emacs-docker
  (package
    (name "emacs-docker")
    (version "20231109.938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/docker.el.git")
               (commit
                 "ec748a8605a1204b24f487a8a189be8ffa54befc")))
        (sha256
          (base32
            "166rnxvxr578z12b194xv5264q8ik3yclya0sh5kqn7dkx8c09bf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-aio emacs-dash emacs-s emacs-tablist))
    (home-page "https://github.com/Silex/docker.el")
    (synopsis "Interface to Docker")
    (description
      "Documentation at https://melpa.org/#/docker")
    (license #f)))

(define-public emacs-docker-api
  (package
    (name "emacs-docker-api")
    (version "20160525.720")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/docker-api.el.git")
               (commit
                 "206144346b7fa4165223349cfeb64a75d47ddd1b")))
        (sha256
          (base32
            "0phmpranrgdi2gi89nxr1ii9xbr7h2ccpx1mkpnfxnjlzkdzq2fb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request emacs-s))
    (home-page
      "https://github.com/Silex/docker-api.el")
    (synopsis "Emacs interface to the Docker API")
    (description
      "Documentation at https://melpa.org/#/docker-api")
    (license #f)))

(define-public emacs-docker-cli
  (package
    (name "emacs-docker-cli")
    (version "20190524.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bosko/docker-cli.git")
               (commit
                 "c4b02894466d8642ad3d49df4c4a80e023a672aa")))
        (sha256
          (base32
            "0q1c943m0ncxbwi5mb1vf7lavkcz0dbx14m3i8a981pqkaksl1lw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bosko/docker-cli")
    (synopsis
      "Running various commands in docker containers")
    (description
      "Documentation at https://melpa.org/#/docker-cli")
    (license #f)))

(define-public emacs-docker-compose-mode
  (package
    (name "emacs-docker-compose-mode")
    (version "20200830.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meqif/docker-compose-mode.git")
               (commit
                 "abaa4f3aeb5c62d7d16e186dd7d77f4e846e126a")))
        (sha256
          (base32
            "123msjiw5jsgmb5r1vmp3h2m4qia2pjg9wrb9cjhi3fjlspk9x2d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-yaml-mode))
    (arguments
      '(#:files
        (:defaults
          (:exclude "docker-compose-mode-helpers.el"))))
    (home-page
      "https://github.com/meqif/docker-compose-mode")
    (synopsis
      "Major mode for editing docker-compose files")
    (description
      "Documentation at https://melpa.org/#/docker-compose-mode")
    (license #f)))

(define-public emacs-docker-tramp
  (package
    (name "emacs-docker-tramp")
    (version "20230809.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/docker-tramp.el.git")
               (commit
                 "19d0771db4e6b89e19c00af5806438e315779c15")))
        (sha256
          (base32
            "1bsmv64vzy4319wvkdljmcxk17xrghmimb9siqs6h2crq7warxhn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/docker-tramp.el")
    (synopsis
      "TRAMP integration for docker containers for Emacs 28 and earlier")
    (description
      "Documentation at https://melpa.org/#/docker-tramp")
    (license #f)))

(define-public emacs-dockerfile-mode
  (package
    (name "emacs-dockerfile-mode")
    (version "20220822.2021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spotify/dockerfile-mode.git")
               (commit
                 "52c6c00da1d31c0b6c29c74335b3af63ed6bf06c")))
        (sha256
          (base32
            "0yj80bcrpckdbhfl64r78q0hmk4hd3ry42lx70ky4h8h7f7l1gra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/spotify/dockerfile-mode")
    (synopsis
      "Major mode for editing Docker's Dockerfiles")
    (description
      "Documentation at https://melpa.org/#/dockerfile-mode")
    (license #f)))

(define-public emacs-docopt
  (package
    (name "emacs-docopt")
    (version "20230216.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/docopt.el.git")
               (commit
                 "21c575db68d4ccadb3125241a62136a0f8b76f63")))
        (sha256
          (base32
            "1g3q6ymw5cxlm91zmwf8rilsz38rcgp2kki29ynk37vxc84bij13"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-parsec emacs-s))
    (arguments '(#:files (:defaults "src/*.el")))
    (home-page "https://github.com/r0man/docopt.el")
    (synopsis "A Docopt implementation in Elisp")
    (description
      "Documentation at https://melpa.org/#/docopt")
    (license #f)))

(define-public emacs-docsim
  (package
    (name "emacs-docsim")
    (version "20230627.47")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hrs/docsim.el.git")
               (commit
                 "069569deba0f08906a42274ade321120b433f39a")))
        (sha256
          (base32
            "1bqvm7bg1pmd34x9s935gfahlicw7vyr3jjsh5pvnxh7sba3lamx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/hrs/docsim.el")
    (synopsis
      "Search and compare notes with a local search engine")
    (description
      "Documentation at https://melpa.org/#/docsim")
    (license #f)))

(define-public emacs-docstr
  (package
    (name "emacs-docstr")
    (version "20221231.1701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/docstr.git")
               (commit
                 "68a72e8a9abac28d8451769cab3846c342f657bc")))
        (sha256
          (base32
            "1rdl0hqif6awkyv6wsmpdk08hx7g851n19rzqchcpksdfq8dk7nr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files (:defaults "langs/*.el")))
    (home-page "https://github.com/emacs-vs/docstr")
    (synopsis "A document string minor mode")
    (description
      "Documentation at https://melpa.org/#/docstr")
    (license #f)))

(define-public emacs-doct
  (package
    (name "emacs-doct")
    (version "20230622.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/progfolio/doct.git")
               (commit
                 "5cab660dab653ad88c07b0493360252f6ed1d898")))
        (sha256
          (base32
            "0r3j7rah6sb5pscnr7p1jnbc6kmlvnpc3paswwxb4byd18dq7jvj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/progfolio/doct")
    (synopsis
      "DOCT: Declarative Org capture templates")
    (description
      "Documentation at https://melpa.org/#/doct")
    (license #f)))

(define-public emacs-dogears
  (package
    (name "emacs-dogears")
    (version "20231016.2356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/dogears.el.git")
               (commit
                 "1136f28ceaed522351369fb97cc098763293a7a6")))
        (sha256
          (base32
            "0sp513bigq0ckkq9hb8fd4znmv8k99awryaa72zddwibi2adb42f"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults (:exclude "helm-dogears.el"))))
    (home-page
      "https://github.com/alphapapa/dogears.el")
    (synopsis "Never lose your place again")
    (description
      "Documentation at https://melpa.org/#/dogears")
    (license #f)))

(define-public emacs-dokuwiki
  (package
    (name "emacs-dokuwiki")
    (version "20180102.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/accidentalrebel/emacs-dokuwiki.git")
               (commit
                 "594c4d4904dcc2796bbbd2c0845d9e7c09ccf6f7")))
        (sha256
          (base32
            "0vqx8npw0i02dhw2yb7s4z7njw60r3xyncw4z8l6fj99pp6pfh15"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xml-rpc))
    (home-page
      "http://www.github.com/accidentalrebel/emacs-dokuwiki")
    (synopsis
      "Edit Remote DokuWiki Pages Using XML-RPC")
    (description
      "Documentation at https://melpa.org/#/dokuwiki")
    (license #f)))

(define-public emacs-dokuwiki-mode
  (package
    (name "emacs-dokuwiki-mode")
    (version "20170223.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kai2nenobu/emacs-dokuwiki-mode.git")
               (commit
                 "e4e116f6fcc373e3f5937c1a7daa5c2c9c6d3fa1")))
        (sha256
          (base32
            "0bmcm7lvzm8sg2l1j7bg02jasxb8g81q9ilycblmsl1ckbfwq0yp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kai2nenobu/emacs-dokuwiki-mode")
    (synopsis "Major mode for DokuWiki document")
    (description
      "Documentation at https://melpa.org/#/dokuwiki-mode")
    (license #f)))

(define-public emacs-dollaro
  (package
    (name "emacs-dollaro")
    (version "20151123.1302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/dollaro.git")
               (commit
                 "500127f0172ac7a1eec627e026b59136580a74ac")))
        (sha256
          (base32
            "1xyqsnymgdd8ic3az2lgwv7s7vld6d4pcycb234bxm4in9fixgdj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis "simple text templates")
    (description
      "Documentation at https://melpa.org/#/dollaro")
    (license #f)))

(define-public emacs-doom
  (package
    (name "emacs-doom")
    (version "20180301.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kensanata/doom.git")
               (commit
                 "e59040aefc92dd9b3134eb623624307fb9e4327b")))
        (sha256
          (base32
            "14lwq30m0s7pkwkbn6vm5gdlkww7sszc6pdhxyinkhj67b0bxpin"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/kensanata/doom.el/")
    (synopsis
      "DOM implementation and manipulation library")
    (description
      "Documentation at https://melpa.org/#/doom")
    (license #f)))

(define-public emacs-doom-modeline
  (package
    (name "emacs-doom-modeline")
    (version "20231028.1505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/doom-modeline.git")
               (commit
                 "dc15e932d8be149c9417a00898db229d9a2f8e6f")))
        (sha256
          (base32
            "0j2brh0crzfd5nbwk1ss14jsjfi7b7ynqwg0ml7wc5srwlqmwiqi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-nerd-icons
            emacs-shrink-path))
    (home-page
      "https://github.com/seagle0128/doom-modeline")
    (synopsis "A minimal and modern mode-line")
    (description
      "Documentation at https://melpa.org/#/doom-modeline")
    (license #f)))

(define-public emacs-doom-modeline-now-playing
  (package
    (name "emacs-doom-modeline-now-playing")
    (version "20210831.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elken/doom-modeline-now-playing.git")
               (commit
                 "ef9158dfdf32e8eb789b69e7394d0bddaa68f42c")))
        (sha256
          (base32
            "1namv6qfmf5xxwbhsl5887cp41y8krr7g9vf3dzvi5n924ixlm2l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-doom-modeline emacs-async))
    (home-page
      "https://github.com/elken/doom-modeline-now-playing")
    (synopsis
      "Segment for Doom Modeline to show playerctl information")
    (description
      "Documentation at https://melpa.org/#/doom-modeline-now-playing")
    (license #f)))

(define-public emacs-doom-themes
  (package
    (name "emacs-doom-themes")
    (version "20230916.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doomemacs/themes.git")
               (commit
                 "4aee1f5a0e54552669f747aa7c25e6027e73d76d")))
        (sha256
          (base32
            "019phmlxllzg51c6kxyaixmby1vxd1i512kv5bjs0wklj8p2pcr5"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "themes/*.el"
          "themes/*/*.el"
          "extensions/*.el")))
    (home-page "https://github.com/doomemacs/themes")
    (synopsis
      "an opinionated pack of modern color-themes")
    (description
      "Documentation at https://melpa.org/#/doom-themes")
    (license #f)))

(define-public emacs-dot-env
  (package
    (name "emacs-dot-env")
    (version "20230820.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amodelbello/dot-env.el.git")
               (commit
                 "83ce690e8ef9175fc621c85d5fbef4f7ace7b7a8")))
        (sha256
          (base32
            "13zhl3p2i4284fb7ivwai9c55mb8rcjgg92nz4hixlhvnq2myg7a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/amodelbello/dot-env.el")
    (synopsis "Dotenv functionality")
    (description
      "Documentation at https://melpa.org/#/dot-env")
    (license #f)))

(define-public emacs-dot-mode
  (package
    (name "emacs-dot-mode")
    (version "20180312.2300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyrickre/dot-mode.git")
               (commit
                 "6ca22b73bcdae2363ee9641b822a60685df16a3e")))
        (sha256
          (base32
            "10lmwra48ihxqxyl54m3yn1zy0q5w6cxqd2n5pbs4lva1yck0z4w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wyrickre/dot-mode")
    (synopsis
      "minor mode to repeat typing or commands")
    (description
      "Documentation at https://melpa.org/#/dot-mode")
    (license #f)))

(define-public emacs-dotenv-mode
  (package
    (name "emacs-dotenv-mode")
    (version "20191027.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/preetpalS/emacs-dotenv-mode.git")
               (commit
                 "e3701bf739bde44f6484eb7753deadaf691b73fb")))
        (sha256
          (base32
            "0ys1czramj3c8zbnxxc599bqc0nqp3nnn3n45ac9cjglx5iaydq3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/preetpalS/emacs-dotenv-mode")
    (synopsis "Major mode for .env files")
    (description
      "Documentation at https://melpa.org/#/dotenv-mode")
    (license #f)))

(define-public emacs-dotnet
  (package
    (name "emacs-dotnet")
    (version "20200803.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julienXX/dotnet.el.git")
               (commit
                 "83ba1305d7895b03f3dffb2d3458b7ec75e6909f")))
        (sha256
          (base32
            "0x3kaq06wbrhqanfzj0m6yb5x1mvcjz3xg52kk7a7d4mr1h9xlip"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/julienXX/dotnet.el")
    (synopsis "Interact with dotnet CLI tool")
    (description
      "Documentation at https://melpa.org/#/dotnet")
    (license #f)))

(define-public emacs-double-saber
  (package
    (name "emacs-double-saber")
    (version "20190325.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dp12/double-saber.git")
               (commit
                 "93d9b1ec833a871bde2fd0f78abc269872808048")))
        (sha256
          (base32
            "07sh6sskzx8cxf2z4z1xjnrbr440974024953m0w7rqm0gn4cb28"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dp12/double-saber.git")
    (synopsis "Narrow and delete in search buffers.")
    (description
      "Documentation at https://melpa.org/#/double-saber")
    (license #f)))

(define-public emacs-download-region
  (package
    (name "emacs-download-region")
    (version "20210306.415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/download-region.git")
               (commit
                 "e0a721858a22896fa1d7f1d5689dd0878dbc58fa")))
        (sha256
          (base32
            "1hvnwqx61g4idqww1axs4xa3jxrd68lvipgvca22ybr2fpdny1xx"))))
    (build-system melpa-build-system)
    (home-page "http://zk-phi.github.io/")
    (synopsis "Simple in-buffer download manager")
    (description
      "Documentation at https://melpa.org/#/download-region")
    (license #f)))

(define-public emacs-downplay-mode
  (package
    (name "emacs-downplay-mode")
    (version "20151125.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tobias/downplay-mode.git")
               (commit
                 "4a2c3addc73c8ca3816345c3c11c08af265baedb")))
        (sha256
          (base32
            "0s7swvfd7h8r0n3cjmkps6ary9vwg61jylfm4qrkp3idsz6is548"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tobias/downplay-mode/")
    (synopsis
      "focus attention on a region of the buffer")
    (description
      "Documentation at https://melpa.org/#/downplay-mode")
    (license #f)))

(define-public emacs-doxy-graph-mode
  (package
    (name "emacs-doxy-graph-mode")
    (version "20210604.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gustavopuche/doxy-graph-mode.git")
               (commit
                 "88af6ef4bc9c8918b66c7774f0a115b2addc310e")))
        (sha256
          (base32
            "0adis4gprh7gzi1nm274gqgzr794fsq4zfjfwz3nh96agc8h8g7j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gustavopuche/doxy-graph-mode")
    (synopsis
      "Links source code editing with doxygen call graphs")
    (description
      "Documentation at https://melpa.org/#/doxy-graph-mode")
    (license #f)))

(define-public emacs-dpaste
  (package
    (name "emacs-dpaste")
    (version "20160303.2112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregnewman/dpaste.el.git")
               (commit
                 "5ebabb466a6ae70882549855b6b2194fc32189f8")))
        (sha256
          (base32
            "03n3k6a40lw9m1ycf62g6vll4gr2kr2509vjp1dkfq722xwrw7zk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs integration for dpaste.com")
    (description
      "Documentation at https://melpa.org/#/dpaste")
    (license #f)))

(define-public emacs-dpaste_de
  (package
    (name "emacs-dpaste_de")
    (version "20131015.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theju/dpaste_de.el.git")
               (commit
                 "f0c39e8864299f735642f7d9fa490689398ce39d")))
        (sha256
          (base32
            "1avpg0cgzk8d6g1q0ryx41lkcdgkm0mkzr5xr32xm28dzrfmgd4z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web))
    (home-page "unspecified")
    (synopsis "Emacs mode to paste to dpaste.de")
    (description
      "Documentation at https://melpa.org/#/dpaste_de")
    (license #f)))

(define-public emacs-dpkg-dev-el
  (package
    (name "emacs-dpkg-dev-el")
    (version "20230220.1635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://salsa.debian.org/emacsen-team/dpkg-dev-el.git")
               (commit
                 "af9aad721cb263e495e2f77df458e9496549c04b")))
        (sha256
          (base32
            "1vqmi32n3yz4chrbi0473hhh4klxsh63qbydcl44xa91g3ly3vp5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-debian-el))
    (home-page "unspecified")
    (synopsis "Emacs modes for debian packaging")
    (description
      "Documentation at https://melpa.org/#/dpkg-dev-el")
    (license #f)))

(define-public emacs-dr-racket-like-unicode
  (package
    (name "emacs-dr-racket-like-unicode")
    (version "20220810.2000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/dr-racket-like-unicode.git")
               (commit
                 "d09b9be289e91e25c941107be5e8f52e7c8f0065")))
        (sha256
          (base32
            "06h15xfqh8s58m3dn1vxrwwfg129001s7j3jpfik98prjh7n0d0m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/david-christiansen/dr-racket-like-unicode")
    (synopsis "DrRacket-style unicode input")
    (description
      "Documentation at https://melpa.org/#/dr-racket-like-unicode")
    (license #f)))

(define-public emacs-dracula-theme
  (package
    (name "emacs-dracula-theme")
    (version "20231013.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dracula/emacs.git")
               (commit
                 "29d5180f7e34c0c858a520068fb650f705b8cfc2")))
        (sha256
          (base32
            "0hjimiv6a0kaszypndb5l0axhiv0zih728p8wffil6jff9k8pr38"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dracula/emacs")
    (synopsis "Dracula Theme")
    (description
      "Documentation at https://melpa.org/#/dracula-theme")
    (license #f)))

(define-public emacs-draft-mode
  (package
    (name "emacs-draft-mode")
    (version "20160106.859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gaudecker/draft-mode.git")
               (commit
                 "4779fb32daf53746459da2def7e08004492d4f18")))
        (sha256
          (base32
            "0z3w58zplm5ks195zfsaq8kwbc944p3kbzs702jgz02wcrm4c28y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gaudecker/draft-mode")
    (synopsis "Rough drafting for Emacs.")
    (description
      "Documentation at https://melpa.org/#/draft-mode")
    (license #f)))

(define-public emacs-drag-stuff
  (package
    (name "emacs-drag-stuff")
    (version "20161108.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/drag-stuff.el.git")
               (commit
                 "6d06d846cd37c052d79acd0f372c13006aa7e7c8")))
        (sha256
          (base32
            "1fsj88n1j50cxjzx62khzxrajsvf33si8iwgbaz6z7z8pwh91qcd"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/drag-stuff")
    (synopsis
      "Drag stuff (lines, words, region, etc...) around")
    (description
      "Documentation at https://melpa.org/#/drag-stuff")
    (license #f)))

(define-public emacs-drawille
  (package
    (name "emacs-drawille")
    (version "20160418.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/drawille.git")
               (commit
                 "d914845725719d8293e2f0dea3c9c7e0a1e0e62a")))
        (sha256
          (base32
            "1ynjxfvx8b6rq6d4gm1sl96rmlk5pi8j5s1rd1y0p8x2lwqcfv77"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sshbio/elisp-drawille")
    (synopsis "Drawille implementation in elisp")
    (description
      "Documentation at https://melpa.org/#/drawille")
    (license #f)))

(define-public emacs-dream-theme
  (package
    (name "emacs-dream-theme")
    (version "20210419.605")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/djcb/dream-theme.git")
               (commit
                 "0c27f05544b90e41338f79ea923044b358a323c6")))
        (sha256
          (base32
            "1dnfisa6smrnjxm6yvb3w57skz4i8akigvzr8lsh1zr7by821wl0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/djcb/dream-theme")
    (synopsis
      "Maximalist Nordic/Zenburn-inspired color theme")
    (description
      "Documentation at https://melpa.org/#/dream-theme")
    (license #f)))

(define-public emacs-drill-instructor-azik-force
  (package
    (name "emacs-drill-instructor-azik-force")
    (version "20151123.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/drill-instructor-AZIK-force.el.git")
               (commit
                 "008cea202dc31d7d6fb1e7d8e6334d516403b7a5")))
        (sha256
          (base32
            "0lzq0mkhhj3s5yrcbs576qxkd8h0m2ikc4iplk97ddpzh4nz4127"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/myuhe/drill-instructor-AZIK-force.el")
    (synopsis "Support AZIK input")
    (description
      "Documentation at https://melpa.org/#/drill-instructor-AZIK-force")
    (license #f)))

(define-public emacs-drone
  (package
    (name "emacs-drone")
    (version "20161106.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olymk2/emacs-drone.git")
               (commit
                 "1d4ee037ad3208847a4235426edf0c4a3e7b1899")))
        (sha256
          (base32
            "1dwxgzf32cvfi7b6zw3qzamj82zs2c0ap6i1w0jqqgzmkz20dqvf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/olymk2/emacs-drone")
    (synopsis
      "Launch your drone test suite if drone.yml is present")
    (description
      "Documentation at https://melpa.org/#/drone")
    (license #f)))

(define-public emacs-dropbox
  (package
    (name "emacs-dropbox")
    (version "20220314.1638")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pavpanchekha/dropbox.el.git")
               (commit
                 "c048faad0be24e8fa31974f08b710a87cf5b668c")))
        (sha256
          (base32
            "1d43ynlqj60bhc5cc39b02440gdvvbw8hyppg7xs7wcljyb54jxd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-oauth))
    (home-page "unspecified")
    (synopsis "Emacs backend for dropbox")
    (description
      "Documentation at https://melpa.org/#/dropbox")
    (license #f)))

(define-public emacs-drupal-mode
  (package
    (name "emacs-drupal-mode")
    (version "20220125.1044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnested/drupal-mode.git")
               (commit
                 "17927723adc5921e8058f7c29e5e50e88b975639")))
        (sha256
          (base32
            "1j0zlcjrz0pswcc8wh476vx503qvlyzjscwh0gs3cfss8j6r6gd5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-php-mode))
    (arguments
      '(#:files
        ("drupal-mode.el" "drush-make-mode.el" "drupal")))
    (home-page
      "https://github.com/arnested/drupal-mode")
    (synopsis
      "Advanced minor mode for Drupal development")
    (description
      "Documentation at https://melpa.org/#/drupal-mode")
    (license #f)))

(define-public emacs-drupal-spell
  (package
    (name "emacs-drupal-spell")
    (version "20130520.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnested/drupal-spell.git")
               (commit
                 "4087c28c89a884ee050961c57166e6b09085f59d")))
        (sha256
          (base32
            "1hjs8jbbflj56dm87mkzray75dlczy6p58lpkr8lvh7wnim4pd6a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "dict")))
    (home-page
      "https://github.com/arnested/drupal-spell")
    (synopsis "Aspell extra dictionary for Drupal")
    (description
      "Documentation at https://melpa.org/#/drupal-spell")
    (license #f)))

(define-public emacs-dsvn
  (package
    (name "emacs-dsvn")
    (version "20221102.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/dsvn.git")
               (commit
                 "36ecd5219584e46dcf6bd252e2ea1ec517d2fc05")))
        (sha256
          (base32
            "0nn6h1blz0x3isqnwyx74xc32k8wi9z27nm5icgsyzv672hm0xdi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Subversion interface")
    (description
      "Documentation at https://melpa.org/#/dsvn")
    (license #f)))

(define-public emacs-dtb-mode
  (package
    (name "emacs-dtb-mode")
    (version "20210105.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/schspa/dtb-mode.git")
               (commit
                 "7f66de945a0be2be5a26b4619cae097288fb55cd")))
        (sha256
          (base32
            "1ljmjc0a0ich5wixqq8v0k7gh51va9smq5a340c23zfbia17mmw5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/schspa/dtb-mode")
    (synopsis "Show device tree souce in dtbs")
    (description
      "Documentation at https://melpa.org/#/dtb-mode")
    (license #f)))

(define-public emacs-dtk
  (package
    (name "emacs-dtk")
    (version "20230924.2038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dtk01/dtk.git")
               (commit
                 "5d7fc18eee0d219f52585e05b303f494dc5831cd")))
        (sha256
          (base32
            "1hbzxir6b0r6cr0sl8yjabk9c7khrqwyjzd5pq90wsslgik3zg4x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/dtk01/dtk.el")
    (synopsis "access SWORD content via diatheke")
    (description
      "Documentation at https://melpa.org/#/dtk")
    (license #f)))

(define-public emacs-dtrace-script-mode
  (package
    (name "emacs-dtrace-script-mode")
    (version "20150214.623")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dotemacs/dtrace-script-mode.git")
               (commit
                 "801af1ef16075d31a19830ebb8404bbf3a322f10")))
        (sha256
          (base32
            "1blfx3r2xd3idbfjrx44ma3x1d83xp67il2s2bmdwa8qz92z99lf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "DTrace code editing commands for Emacs")
    (description
      "Documentation at https://melpa.org/#/dtrace-script-mode")
    (license #f)))

(define-public emacs-dtrt-indent
  (package
    (name "emacs-dtrt-indent")
    (version "20230910.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jscheid/dtrt-indent.git")
               (commit
                 "e0630f74f915c6cded05f76f66d66e540fcc37c3")))
        (sha256
          (base32
            "1vddrpplc7887gcfg7d52fv1nxv6sgn3w310gr06c6nfk3lwas9y"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Adapt to foreign indentation offsets")
    (description
      "Documentation at https://melpa.org/#/dtrt-indent")
    (license #f)))

(define-public emacs-dts-mode
  (package
    (name "emacs-dts-mode")
    (version "20211202.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bgamari/dts-mode.git")
               (commit
                 "32517e7eeeccc785b7c669fd5e93c5df45597ef1")))
        (sha256
          (base32
            "03h5qmxyxvcw92j7rhzr1l3qmspfsnbf2cn68v7r5qk7hzrixmpr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for Devicetree source code")
    (description
      "Documentation at https://melpa.org/#/dts-mode")
    (license #f)))

(define-public emacs-ducpel
  (package
    (name "emacs-ducpel")
    (version "20140702.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/ducpel.git")
               (commit
                 "b53b935ab95c02b82ccf38f63c89e39e99477a55")))
        (sha256
          (base32
            "07cgwkfi69xjjxx9hs5rdblsil1h3bpbx9k7hwyv1dg3ivihm04s"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "*.info" "dir" "levels")))
    (home-page "https://github.com/alezost/ducpel")
    (synopsis "Logic game with sokoban elements")
    (description
      "Documentation at https://melpa.org/#/ducpel")
    (license #f)))

(define-public emacs-dumb-diff
  (package
    (name "emacs-dumb-diff")
    (version "20171211.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacktasia/dumb-diff.git")
               (commit
                 "1a2331d283049b71a07c1b06b1e0627a950d55f4")))
        (sha256
          (base32
            "05gmpp4s9y2ql27vb5vpqn3xh35qjfxgq9gzyvg86df43qfl8wvl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "fast arbitrary diffs")
    (description
      "Documentation at https://melpa.org/#/dumb-diff")
    (license #f)))

(define-public emacs-dumb-jump
  (package
    (name "emacs-dumb-jump")
    (version "20230716.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacktasia/dumb-jump.git")
               (commit
                 "d9503c157ab88f0ed2fa1301aeb57e95ac564760")))
        (sha256
          (base32
            "1v19valcwxn987bq698kd78hxyq4ri0m7s2phzbw3fm4nl65q3i8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-popup))
    (home-page
      "https://github.com/jacktasia/dumb-jump")
    (synopsis
      "Jump to definition for 50+ languages without configuration")
    (description
      "Documentation at https://melpa.org/#/dumb-jump")
    (license #f)))

(define-public emacs-dummyparens
  (package
    (name "emacs-dummyparens")
    (version "20141009.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/snosov1/dummyparens.git")
               (commit
                 "9798ef1d0eaa24e4fe66f8aa6022a8c62714cc89")))
        (sha256
          (base32
            "0g72nnz0j6dvllyxyrw20z1vg6p7sy46yy0fq017pa77sgqm0xzh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/snosov1/dummyparens")
    (synopsis
      "parenthesis auto-pairing and wrapping")
    (description
      "Documentation at https://melpa.org/#/dummyparens")
    (license #f)))

(define-public emacs-dune
  (package
    (name "emacs-dune")
    (version "20230402.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/dune.git")
               (commit
                 "443faceae9dffa1e7a71a5f81b5930eb8d2faf92")))
        (sha256
          (base32
            "1xw09k1j9fg67izvwig7zy5ic61ib3931wbhq7khb5335gj6qr85"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("editor-integration/emacs/*.el")))
    (home-page "https://github.com/ocaml/dune")
    (synopsis
      "Integration with the dune build system")
    (description
      "Documentation at https://melpa.org/#/dune")
    (license #f)))

(define-public emacs-dune-format
  (package
    (name "emacs-dune-format")
    (version "20210505.108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/emacs-dune-format.git")
               (commit
                 "eda7a16ae378e7c482c11228c43ef32b893a1520")))
        (sha256
          (base32
            "0z39a1c227si435j3k8vkf4q6l01jdf70x69dywsmnrkcrcvrbf8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/purcell/emacs-dune-format")
    (synopsis
      "Reformat OCaml's dune files automatically")
    (description
      "Documentation at https://melpa.org/#/dune-format")
    (license #f)))

(define-public emacs-duplexer
  (package
    (name "emacs-duplexer")
    (version "20230903.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/duplexer.el.git")
               (commit
                 "fadcb30f7c7edc4adaa651196c1e1bb4da5cd066")))
        (sha256
          (base32
            "02vfnymahl03x9m830x4mlvgpikv1bdv33ynkw3qywridbx17jby"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liuyinz/duplexer.el")
    (synopsis
      "Handle conflicts between local minor modes and reuse rules")
    (description
      "Documentation at https://melpa.org/#/duplexer")
    (license #f)))

(define-public emacs-duplicate-thing
  (package
    (name "emacs-duplicate-thing")
    (version "20181031.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ongaeshi/duplicate-thing.git")
               (commit
                 "9d8fd05e3e5caa35d3f2a0c0032c92f0c0908e21")))
        (sha256
          (base32
            "05lflc0r84c95vb81wbn44kh11cbgm42zn3y4ss0ychbf13mzdb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ongaeshi/duplicate-thing")
    (synopsis "Duplicate current line & selection")
    (description
      "Documentation at https://melpa.org/#/duplicate-thing")
    (license #f)))

(define-public emacs-dut-mode
  (package
    (name "emacs-dut-mode")
    (version "20170729.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dut-lang/dut-mode.git")
               (commit
                 "9235c7acaa6690942e9de8b7acd1e4be0c859dc1")))
        (sha256
          (base32
            "0fpqsm6y23anyx57gp4c6whzxrn8x03cp76iwx27c4gkq6ph1z8n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dut-lang/dut-mode")
    (synopsis
      "Major mode for the Dut programming language")
    (description
      "Documentation at https://melpa.org/#/dut-mode")
    (license #f)))

(define-public emacs-dw
  (package
    (name "emacs-dw")
    (version "20210331.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/integral-dw/dw-passphrase-generator.git")
               (commit
                 "61c5718ba64ace4c9e29de18aa2690ecc3f0f258")))
        (sha256
          (base32
            "14nd544ispfj165ys6lv9bpy41p9j8kf4lwy73qigr4c7qlf43by"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/integral-dw/dw-passphrase-generator")
    (synopsis
      "Diceware passphrase generation commands")
    (description
      "Documentation at https://melpa.org/#/dw")
    (license #f)))

(define-public emacs-dwim-coder-mode
  (package
    (name "emacs-dwim-coder-mode")
    (version "20230830.1215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sadiq/dwim-coder-mode.git")
               (commit
                 "94a752fca078144dd309343880abafbc4eacca5f")))
        (sha256
          (base32
            "010z2bcscizd75shmbgrjfvlkzsfjcvqcif7pm5a5iynmjx5n4n7"))))
    (build-system melpa-build-system)
    (home-page
      "https://sadiqpk.org/projects/dwim-coder-mode.html")
    (synopsis
      "DWIM keybindings for C, Python, Rust, and more")
    (description
      "Documentation at https://melpa.org/#/dwim-coder-mode")
    (license #f)))

(define-public emacs-dwim-shell-command
  (package
    (name "emacs-dwim-shell-command")
    (version "20231109.856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/dwim-shell-command.git")
               (commit
                 "72baa483a13e6e4cf54c1078b254aa6e01ff792b")))
        (sha256
          (base32
            "1xcd57mh7f4hzph7jvcww4w2pfnvc77w02zg777irwjj9sndq7gj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xenodium/dwim-shell-command")
    (synopsis "Shell commands with DWIM behaviour")
    (description
      "Documentation at https://melpa.org/#/dwim-shell-command")
    (license #f)))

(define-public emacs-dyalog-mode
  (package
    (name "emacs-dyalog-mode")
    (version "20230214.1027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/harsman/dyalog-mode.git")
               (commit
                 "13c0d391aa878a1609259a89fe3e6db8d21935e8")))
        (sha256
          (base32
            "04dpr4ayz5kcjfg9rfi4kwrw3qdkx422bwxwlxyfp60amf4ilib6"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "Emacs.apl")))
    (home-page
      "https://github.com/harsman/dyalog-mode.git")
    (synopsis
      "Major mode for editing Dyalog APL source code")
    (description
      "Documentation at https://melpa.org/#/dyalog-mode")
    (license #f)))

(define-public emacs-dylan
  (package
    (name "emacs-dylan")
    (version "20220115.1804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dylan-lang/dylan-emacs-support.git")
               (commit
                 "9d2891e3e06405b75072d296f385fa795aeb9835")))
        (sha256
          (base32
            "0fxyl50n2s1pb86z46s1f0lh361q34i2x8hir91wvqsqkfajbhz0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("dylan*.el")))
    (home-page "https://opendylan.org/")
    (synopsis "Dylan editing modes")
    (description
      "Documentation at https://melpa.org/#/dylan")
    (license #f)))

(define-public emacs-dynamic-fonts
  (package
    (name "emacs-dynamic-fonts")
    (version "20140731.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/dynamic-fonts.git")
               (commit
                 "ab0c65accbdb59acaed5b263327e22ec019b3e82")))
        (sha256
          (base32
            "150dj1g49q9x9zx9wkymq30l5gc8c4mhsq91fm6q0yj6ip7hlfxh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-font-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/dynamic-fonts")
    (synopsis "Set faces based on available fonts")
    (description
      "Documentation at https://melpa.org/#/dynamic-fonts")
    (license #f)))

(define-public emacs-dynamic-graphs
  (package
    (name "emacs-dynamic-graphs")
    (version "20210908.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellerin/dynamic-graphs.git")
               (commit
                 "64ca58dffecdecb636f7fe61c0c86e9c3c64d4dd")))
        (sha256
          (base32
            "15raac8fvsrlsca7vr4dakj4bh1zqc8fq61wkn6wh6pfyjm76r22"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zellerin/dynamic-graphs")
    (synopsis "Manipulation with graphviz graphs")
    (description
      "Documentation at https://melpa.org/#/dynamic-graphs")
    (license #f)))

(define-public emacs-dynamic-ruler
  (package
    (name "emacs-dynamic-ruler")
    (version "20160602.808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/dynamic-ruler.git")
               (commit
                 "c9c0de6fe5721f06b50e01d9b4684b519c71b367")))
        (sha256
          (base32
            "09skp2d5likqjlrsfis3biqw59sjkgid5249fld9ahqm5f1wq296"))))
    (build-system melpa-build-system)
    (home-page
      "http://rocher.github.io/dynamic-ruler")
    (synopsis "Displays a dynamic ruler at point.")
    (description
      "Documentation at https://melpa.org/#/dynamic-ruler")
    (license #f)))

(define-public emacs-dynamic-spaces
  (package
    (name "emacs-dynamic-spaces")
    (version "20171027.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/dynamic-spaces.git")
               (commit
                 "97ae8480c257ba573ca3d06dbf602f9b23c41d38")))
        (sha256
          (base32
            "0qs7gqjl6ilwwmd21663345az6766j7h1pv7wvd2kyh24yfs1xkj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/dynamic-spaces")
    (synopsis
      "When editing, don't move text separated by spaces")
    (description
      "Documentation at https://melpa.org/#/dynamic-spaces")
    (license #f)))

(define-public emacs-dynaring
  (package
    (name "emacs-dynaring")
    (version "20230619.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/countvajhula/dynaring.git")
               (commit
                 "dcfd74ea28706928514189d9f80f4b72c144bcca")))
        (sha256
          (base32
            "07p14v4x43f36fnxsd63khd9cqhqxsv8qv8wrf433gaj4fh2vrl9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/countvajhula/dynaring")
    (synopsis "A dynamically sized ring structure")
    (description
      "Documentation at https://melpa.org/#/dynaring")
    (license #f)))

(define-public emacs-dyncloze
  (package
    (name "emacs-dyncloze")
    (version "20210712.145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahyatt/emacs-dyncloze.git")
               (commit
                 "aafc5adc25c7f714b619109bccf92e475d6c84ef")))
        (sha256
          (base32
            "0l3y8xvjy0f2wacnh03i8ny06apcgyzvippsm8k80qhzjc8dxs2i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/ahyatt/emacs-dyncloze")
    (synopsis "Language alternatives self-testing")
    (description
      "Documentation at https://melpa.org/#/dyncloze")
    (license #f)))

(define-public emacs-e2ansi
  (package
    (name "emacs-e2ansi")
    (version "20190517.1902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/e2ansi.git")
               (commit
                 "6e1bb4e4e27885d1786db08b091cfa13b184fb54")))
        (sha256
          (base32
            "1rbbwz8a6gqyxkkh5fapzlbnny816yzqj4170fzrswhib610mcvz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-face-explorer))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/Lindydancer/e2ansi")
    (synopsis
      "Syntax highlighting support for `less', powered by Emacs.")
    (description
      "Documentation at https://melpa.org/#/e2ansi")
    (license #f)))

(define-public emacs-e2wm
  (package
    (name "emacs-e2wm")
    (version "20170215.36")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-window-manager.git")
               (commit
                 "4353d3394c77a49f8f0291c239858c8c5e877549")))
        (sha256
          (base32
            "12midsrx07pdrsr1qbl2rpi7xyhxqx08bkz7n7gf8vsmqkpfp56s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-window-layout))
    (arguments '(#:files ("e2wm.el" "e2wm-vcs.el")))
    (home-page "unspecified")
    (synopsis "simple window manager for emacs")
    (description
      "Documentation at https://melpa.org/#/e2wm")
    (license #f)))

(define-public emacs-e2wm-bookmark
  (package
    (name "emacs-e2wm-bookmark")
    (version "20151123.521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/e2wm-bookmark.el.git")
               (commit
                 "bad816b6d8049984d69bcd277b7d325fb84d55eb")))
        (sha256
          (base32
            "121vd44f42bxqvdjswmjlghf1jalbs974b6cip2i049k1n08xgh0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2wm))
    (arguments '(#:files ("e2wm-bookmark.el")))
    (home-page "unspecified")
    (synopsis "Bookmark plugin for e2wm.el")
    (description
      "Documentation at https://melpa.org/#/e2wm-bookmark")
    (license #f)))

(define-public emacs-e2wm-direx
  (package
    (name "emacs-e2wm-direx")
    (version "20200805.1414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/e2wm-direx.git")
               (commit
                 "5672bc44d8e5cea6bc3b84c3b58e522050ffae0e")))
        (sha256
          (base32
            "18fj8qn4b6f13vb3n6j5cwcgdh2ypnvaqyjszmh321zmwxq08nd5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2wm emacs-direx))
    (home-page "https://github.com/aki2o/e2wm-direx")
    (synopsis "Plugin of e2wm.el for direx.el")
    (description
      "Documentation at https://melpa.org/#/e2wm-direx")
    (license #f)))

(define-public emacs-e2wm-pkgex4pl
  (package
    (name "emacs-e2wm-pkgex4pl")
    (version "20140525.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/e2wm-pkgex4pl.git")
               (commit
                 "7ea994450727190c4f3cb46cb429ba41b692ecc0")))
        (sha256
          (base32
            "1vrlfzy1wynm7x4m7pl8vim7ykqd6qkcilwz7sjc1lbckz11ig0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-e2wm emacs-plsense-direx))
    (home-page
      "https://github.com/aki2o/e2wm-pkgex4pl")
    (synopsis
      "Plugin of e2wm.el for package explorer of Perl")
    (description
      "Documentation at https://melpa.org/#/e2wm-pkgex4pl")
    (license #f)))

(define-public emacs-e2wm-r
  (package
    (name "emacs-e2wm-r")
    (version "20151230.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/e2wm-R.git")
               (commit
                 "4350601ee1a96bf89777b3f09f1b79b88e2e6e4d")))
        (sha256
          (base32
            "1g77gf24abwcvf7z52vs762s6jp978pnvza8zmzwkwfvp1mkx233"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-e2wm emacs-inliner emacs-ess))
    (home-page "https://github.com/myuhe/e2wm-R.el")
    (synopsis
      "some e2wm plugin and perspective for GNU R")
    (description
      "Documentation at https://melpa.org/#/e2wm-R")
    (license #f)))

(define-public emacs-e2wm-sww
  (package
    (name "emacs-e2wm-sww")
    (version "20200805.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/e2wm-sww.git")
               (commit
                 "8926d0c70be05c7b4ef821e22e411e8813973687")))
        (sha256
          (base32
            "0941mfz6a398jq5cb8kgr5cikzkzrpjnfbbx2f9c1yy9wj1awklk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2wm))
    (home-page "https://github.com/aki2o/e2wm-sww")
    (synopsis
      "Plugin of e2wm.el to switch plugin quickly")
    (description
      "Documentation at https://melpa.org/#/e2wm-sww")
    (license #f)))

(define-public emacs-e2wm-term
  (package
    (name "emacs-e2wm-term")
    (version "20200322.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/e2wm-term.git")
               (commit
                 "74362d6271e736272df32ea807c5a22e4df54a50")))
        (sha256
          (base32
            "1cr2mp1visx4fnxc73sk6gw7wnl1mxfb624rm1sxz7wwry8b8fx9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-e2wm emacs-log4e emacs-yaxception))
    (home-page "https://github.com/aki2o/e2wm-term")
    (synopsis
      "Perspective of e2wm.el for work in terminal")
    (description
      "Documentation at https://melpa.org/#/e2wm-term")
    (license #f)))

(define-public emacs-eacl
  (package
    (name "emacs-eacl")
    (version "20220526.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/eacl.git")
               (commit
                 "4fe2cafbfeb73d806ebea8801c3522ff2886f30b")))
        (sha256
          (base32
            "05m121lw90rjs1a6wq8gvqxzydm4940x30xp3kh1v5x4zwwcf03b"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/redguardtoo/eacl")
    (synopsis
      "Auto-complete lines by grepping project")
    (description
      "Documentation at https://melpa.org/#/eacl")
    (license #f)))

(define-public emacs-earthfile-mode
  (package
    (name "emacs-earthfile-mode")
    (version "20230809.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/earthly/earthly-emacs.git")
               (commit
                 "3029e5ab06171ca5947041e95053561e10e5ba41")))
        (sha256
          (base32
            "0947czc3n6a8g065qnl8pa75sp16cs2dmc31s3gvp3c3lvnb3nkd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/earthly/earthly-mode")
    (synopsis "Major mode for editing Earthly file")
    (description
      "Documentation at https://melpa.org/#/earthfile-mode")
    (license #f)))

(define-public emacs-eask
  (package
    (name "emacs-eask")
    (version "20231103.840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eask/eask.git")
               (commit
                 "2f8ad56c8d9b3e6226b6641de1f8b61571225950")))
        (sha256
          (base32
            "01dbyplh6gwkk85amrx916h1lxjdbnvps7wqai3ny9wfixh7w0q8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/emacs-eask/eask")
    (synopsis
      "Core Eask APIs, for Eask CLI development")
    (description
      "Documentation at https://melpa.org/#/eask")
    (license #f)))

(define-public emacs-eask-mode
  (package
    (name "emacs-eask-mode")
    (version "20231001.1914")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eask/eask-mode.git")
               (commit
                 "a662699f3d28ed096f3d204f45a3443e3fcd95be")))
        (sha256
          (base32
            "0bp56k0bcyffy1j59mhzbkbw2hhbgrssig7gn5zlp8cgglrvmv3d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eask))
    (home-page
      "https://github.com/emacs-eask/eask-mode")
    (synopsis "Major mode for editing Eask files")
    (description
      "Documentation at https://melpa.org/#/eask-mode")
    (license #f)))

(define-public emacs-easy-after-load
  (package
    (name "emacs-easy-after-load")
    (version "20170817.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pd/easy-after-load.git")
               (commit
                 "29e20145da49ac9ea40463c552130777408040de")))
        (sha256
          (base32
            "00xgd39qc760lmxpbggzn98aks5nad08b5ry54pkszjlmh37yqj7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pd/easy-after-load")
    (synopsis
      "eval-after-load for all files in a directory")
    (description
      "Documentation at https://melpa.org/#/easy-after-load")
    (license #f)))

(define-public emacs-easy-escape
  (package
    (name "emacs-easy-escape")
    (version "20210917.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/easy-escape.git")
               (commit
                 "938497a21e65ba6b3ff8ec90e93a6d0ab18dc9b4")))
        (sha256
          (base32
            "0bqwn6cd7lrk7f8vgcvclryvlpxvl2bndsmwmbn0zxmvqkdba7l1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cpitclaudel/easy-escape")
    (synopsis
      "Improve readability of escape characters in regular expressions")
    (description
      "Documentation at https://melpa.org/#/easy-escape")
    (license #f)))

(define-public emacs-easy-hugo
  (package
    (name "emacs-easy-hugo")
    (version "20230928.134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-easy-hugo.git")
               (commit
                 "1441922d26da1edad0e9020826c4ea26d63e22e1")))
        (sha256
          (base32
            "04qk4njcdl32cjnskg3cj64d0i4f3nqcpqay0faycnkkp2zfswa2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-request))
    (home-page
      "https://github.com/masasam/emacs-easy-hugo")
    (synopsis
      "Write blogs made with hugo by markdown or org-mode")
    (description
      "Documentation at https://melpa.org/#/easy-hugo")
    (license #f)))

(define-public emacs-easy-jekyll
  (package
    (name "emacs-easy-jekyll")
    (version "20211217.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-easy-jekyll.git")
               (commit
                 "7f19af310162464956f2bc4c38c6b7e95cb20321")))
        (sha256
          (base32
            "0l8yb3mwzd6kjnz1lnxx55ns0w6vv3cy9wda26hwr6d6hdms34xy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/masasam/emacs-easy-jekyll")
    (synopsis "Major mode managing jekyll blogs")
    (description
      "Documentation at https://melpa.org/#/easy-jekyll")
    (license #f)))

(define-public emacs-easy-kill
  (package
    (name "emacs-easy-kill")
    (version "20220511.557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoliu/easy-kill.git")
               (commit
                 "de7d66c3c864a4722a973ee9bc228a14be49ba0c")))
        (sha256
          (base32
            "0zr836c9c5bhf0cslwk6jqf1xn9w6wfjn4faisq5v8ydyxn78925"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/leoliu/easy-kill")
    (synopsis "kill & mark things easily")
    (description
      "Documentation at https://melpa.org/#/easy-kill")
    (license #f)))

(define-public emacs-easy-kill-extras
  (package
    (name "emacs-easy-kill-extras")
    (version "20230829.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/easy-kill-extras.el.git")
               (commit
                 "677435739c698ed81c3732188c29aa98bd9ffb08")))
        (sha256
          (base32
            "0dk7jvf69mi8p8r98i1hf884s6vrrlg1av1qbxl2bj9d736h9c5l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-easy-kill))
    (home-page
      "https://github.com/knu/easy-kill-extras.el")
    (synopsis "Extra functions for easy-kill.")
    (description
      "Documentation at https://melpa.org/#/easy-kill-extras")
    (license #f)))

(define-public emacs-easy-repeat
  (package
    (name "emacs-easy-repeat")
    (version "20150516.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/easy-repeat.el.git")
               (commit
                 "060f0e6801c82c40c06961dc0528a00e18947a8c")))
        (sha256
          (base32
            "18bm5ns1qrxq0rrz9sylshr62wkymh1m6b7ch2y74f8rcwdwjgnq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/easy-repeat.el")
    (synopsis "Repeat easily")
    (description
      "Documentation at https://melpa.org/#/easy-repeat")
    (license #f)))

(define-public emacs-ebf
  (package
    (name "emacs-ebf")
    (version "20210225.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/ebf.git")
               (commit
                 "6cbeb4d62416f4cfd5be8906667342af8ecc44a6")))
        (sha256
          (base32
            "1d9vbn8gmiqcpxqmsv8ir3cc7clm7x1c6hz8drws3cakxk0wffn9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/rexim/ebf")
    (synopsis
      "brainfuck language transpiler to Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ebf")
    (license #f)))

(define-public emacs-ebib
  (package
    (name "emacs-ebib")
    (version "20231103.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/ebib.git")
               (commit
                 "6381458947bc6fb6c0605469bceb92784a9fbd67")))
        (sha256
          (base32
            "08j6z4rpnvz7vhdrm7y3prf2jpxclqicid6as4qljysq3czzfhay"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parsebib))
    (home-page "http://joostkremers.github.io/ebib/")
    (synopsis "a BibTeX database manager")
    (description
      "Documentation at https://melpa.org/#/ebib")
    (license #f)))

(define-public emacs-ebnf-mode
  (package
    (name "emacs-ebnf-mode")
    (version "20231022.1759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/ebnf-mode.git")
               (commit
                 "61486b1c9d4746249640410e58087e318f801ed8")))
        (sha256
          (base32
            "17dmi5gpbp4m4c9xbppar3gc67q6s4p4w9q4phzr1ng4xblwkcjj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nverno/ebnf-mode")
    (synopsis "Major mode for EBNF files")
    (description
      "Documentation at https://melpa.org/#/ebnf-mode")
    (license #f)))

(define-public emacs-ebuku
  (package
    (name "emacs-ebuku")
    (version "20221122.427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/ebuku.git")
               (commit
                 "0c6cf404a49bd68800221446df186fffa0139325")))
        (sha256
          (base32
            "09fkzmcvzdbdjaa167wiybj0kir7y12pcq2varjywshvq2l7niz4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/flexibeast/ebuku")
    (synopsis
      "Interface to the buku Web bookmark manager")
    (description
      "Documentation at https://melpa.org/#/ebuku")
    (license #f)))

(define-public emacs-ecb
  (package
    (name "emacs-ecb")
    (version "20170728.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecb-home/ecb.git")
               (commit
                 "1330a44cf3c171781083b0b926ab7622f64e6e81")))
        (sha256
          (base32
            "0nx1blkvnzrxd2l7ckdihm9fvq5vkcghf6qccagkjzk4zbdalz30"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "ecb-images" "ecb2" "ecb.texi")))
    (home-page "unspecified")
    (synopsis "a code browser for Emacs")
    (description
      "Documentation at https://melpa.org/#/ecb")
    (license #f)))

(define-public emacs-echo-bar
  (package
    (name "emacs-echo-bar")
    (version "20230209.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benzanol/echo-bar.el.git")
               (commit
                 "03cae6d045636948d8b47979d85774e39556f9e1")))
        (sha256
          (base32
            "1431xpklnb5894mq3gxc7kvp2q5qa04bnlx8qcxv5l9g2rs0jiih"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/qaiviq/echo-bar.el")
    (synopsis
      "Turn the echo area into a custom status bar")
    (description
      "Documentation at https://melpa.org/#/echo-bar")
    (license #f)))

(define-public emacs-eclim
  (package
    (name "emacs-eclim")
    (version "20181108.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eclim/emacs-eclim.git")
               (commit
                 "222ddd48fcf0ee01592dec77c58e0cf3f2ea1100")))
        (sha256
          (base32
            "0jdddf8krvg379wlay1xs27qlxpi87nz6v2i526pk59mmg8jrnvc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-popup
            emacs-s
            emacs-yasnippet))
    (arguments '(#:files ("eclim*.el" "snippets")))
    (home-page "unspecified")
    (synopsis "An interface to the Eclipse IDE.")
    (description
      "Documentation at https://melpa.org/#/eclim")
    (license #f)))

(define-public emacs-eclipse-theme
  (package
    (name "emacs-eclipse-theme")
    (version "20191113.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/eclipse-theme.git")
               (commit
                 "dcf97865512ed450f9d5137c1a05e12edb5b7f80")))
        (sha256
          (base32
            "0nv0cwn9pjvy54b2pv9ncr6xmh6nnrdcdyqmcahrzmlvgy4ks8ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/eclipse-theme")
    (synopsis "Theme based on Eclipse circa 2010")
    (description
      "Documentation at https://melpa.org/#/eclipse-theme")
    (license #f)))

(define-public emacs-ecukes
  (package
    (name "emacs-ecukes")
    (version "20230220.456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecukes/ecukes.git")
               (commit
                 "6bc1feb33d44bda7a7ccf06f8748050ffa1dc23c")))
        (sha256
          (base32
            "0wcc2rygz6l496fbh6azlbphdk3qn9hfdmcnq7wrcjy35b5f0cbw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-commander
            emacs-espuds
            emacs-ansi
            emacs-dash
            emacs-s
            emacs-f))
    (arguments
      '(#:files
        ("ecukes*" "templates" "bin" "reporters")))
    (home-page "unspecified")
    (synopsis "Cucumber for Emacs")
    (description
      "Documentation at https://melpa.org/#/ecukes")
    (license #f)))

(define-public emacs-edbi
  (package
    (name "emacs-edbi")
    (version "20160225.141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-edbi.git")
               (commit
                 "6f50aaf4bde75255221f2292c7a4ad3fa9d918c0")))
        (sha256
          (base32
            "0x0igyvdcm4863n7zndvcv6wgzwgn7324cbfjja6xd7r0k936zdy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable emacs-epc))
    (arguments '(#:files ("edbi*.el" "edbi*.pl")))
    (home-page
      "https://github.com/kiwanami/emacs-edbi")
    (synopsis "Emacs Database Interface")
    (description
      "Documentation at https://melpa.org/#/edbi")
    (license #f)))

(define-public emacs-ede-compdb
  (package
    (name "emacs-ede-compdb")
    (version "20150920.2033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/randomphrase/ede-compdb.git")
               (commit
                 "d6d8466cd62876fc90adeff5875a1a584fd846cd")))
        (sha256
          (base32
            "1cfjw9b1lm29s5cbh0qqmkchbq2382s71w4rpb0gyf603s0yg13m"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Support for compilation database projects in EDE")
    (description
      "Documentation at https://melpa.org/#/ede-compdb")
    (license #f)))

(define-public emacs-ede-php-autoload
  (package
    (name "emacs-ede-php-autoload")
    (version "20230916.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/ede-php-autoload.git")
               (commit
                 "a7c16292ecaf9b39321e7a99ccac259fcbf6c373")))
        (sha256
          (base32
            "0sriw4ikk3d39bysggns13lhi598hbyyz5l3sz49b22q4py8n80n"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "ede-php-autoload")))
    (home-page
      "https://github.com/emacs-php/ede-php-autoload")
    (synopsis "Simple EDE PHP Project")
    (description
      "Documentation at https://melpa.org/#/ede-php-autoload")
    (license #f)))

(define-public emacs-ede-php-autoload-composer-installers
  (package
    (name "emacs-ede-php-autoload-composer-installers")
    (version "20170221.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xendk/ede-php-autoload-composer-installers.git")
               (commit
                 "7840439802c7d11ee086bbf465657f3da12f9f66")))
        (sha256
          (base32
            "1dkq0py1sybmpy59h3szafa59g5g3jp8l9az22l15qgmkpbqydh4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ede-php-autoload emacs-f emacs-s))
    (home-page
      "https://github.com/xendk/ede-php-autoload-composer-installers")
    (synopsis
      "Composer installers support for ede-php-autoload")
    (description
      "Documentation at https://melpa.org/#/ede-php-autoload-composer-installers")
    (license #f)))

(define-public emacs-ede-php-autoload-drupal
  (package
    (name "emacs-ede-php-autoload-drupal")
    (version "20170316.2158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xendk/ede-php-autoload-drupal.git")
               (commit
                 "54a04241d94fabc4f4d16ae4dc8ba4f0c6e3b435")))
        (sha256
          (base32
            "1ckfja95zk4f7fgvycia7nxhxjgz4byrz30ic63f6kcq4dx78scs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ede-php-autoload emacs-f emacs-s))
    (home-page "unspecified")
    (synopsis "Drupal support for ede-php-autoload")
    (description
      "Documentation at https://melpa.org/#/ede-php-autoload-drupal")
    (license #f)))

(define-public emacs-edebug-inline-result
  (package
    (name "emacs-edebug-inline-result")
    (version "20220820.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/edebug-inline-result.git")
               (commit
                 "90e401ae3e7b3c85da8b24af940fd97f5e744625")))
        (sha256
          (base32
            "0mg1cnkxn78dnbkdhcm4pg1c0ac8fz8d2d8cpp80lk3xf0axc0jh"))))
    (build-system melpa-build-system)
    (home-page
      "https://repo.or.cz/edebug-inline-result.git")
    (synopsis "Show Edebug result inline")
    (description
      "Documentation at https://melpa.org/#/edebug-inline-result")
    (license #f)))

(define-public emacs-edebug-x
  (package
    (name "emacs-edebug-x")
    (version "20130616.625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ScottyB/edebug-x.git")
               (commit
                 "a2c2c42553d3bcbd5ac11898554865acbed1bc46")))
        (sha256
          (base32
            "1zgiifi1k2d9g8sarfpjzamk8g1yx4ilgn60mqhy2pznp30b5qb2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ScottyB/edebug-x")
    (synopsis "Extensions for Edebug")
    (description
      "Documentation at https://melpa.org/#/edebug-x")
    (license #f)))

(define-public emacs-edit-as-format
  (package
    (name "emacs-edit-as-format")
    (version "20220221.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/etern/edit-as-format.git")
               (commit
                 "59c6f439683846d994a7a2110b9b00cc16c08c40")))
        (sha256
          (base32
            "0r2whzb3pizagbhr7i03kjiplnfwr1x14bl9y1gdvp166vfif5x7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edit-indirect))
    (arguments '(#:files (:defaults "filters")))
    (home-page
      "https://github.com/etern/edit-as-format")
    (synopsis "Edit document as other format")
    (description
      "Documentation at https://melpa.org/#/edit-as-format")
    (license #f)))

(define-public emacs-edit-at-point
  (package
    (name "emacs-edit-at-point")
    (version "20191013.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/edit-at-point.git")
               (commit
                 "28c85a65c9c61f2aff50bc5e93f61cde26a5d9c0")))
        (sha256
          (base32
            "1wciwx9zk28r21v9ampjd8wn19g19ia7hiq1x0hami479dxwinfc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/enoson/edit-at-point.el")
    (synopsis
      "edit(copy,cut..) current things(word,symbol..) under cursor")
    (description
      "Documentation at https://melpa.org/#/edit-at-point")
    (license #f)))

(define-public emacs-edit-chrome-textarea
  (package
    (name "emacs-edit-chrome-textarea")
    (version "20200324.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/edit-chrome-textarea.el.git")
               (commit
                 "e9ef6a72bdc6b58f932c51aa161869cee11b4bc9")))
        (sha256
          (base32
            "1akyxq0ja06q5bywa6nb4klnbvrw6f6d83bzrjdz2sc7ddk3a4hz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page
      "https://github.com/xuchunyang/edit-chrome-textarea.el")
    (synopsis "Edit Chrome Textarea")
    (description
      "Documentation at https://melpa.org/#/edit-chrome-textarea")
    (license #f)))

(define-public emacs-edit-color-stamp
  (package
    (name "emacs-edit-color-stamp")
    (version "20130529.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/edit-color-stamp.git")
               (commit
                 "32dc1ca5bcf3dcf83fad5e39b55dc5b77becb3d3")))
        (sha256
          (base32
            "0vk954f44m2bq7qb122pzlb8fibrisx47ihvn3h96m8nmx0fv32r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-es-lib))
    (arguments
      '(#:files
        ("*.el"
         ("qt_color_picker"
          "qt_color_picker/*.pro"
          "qt_color_picker/*.cpp"))))
    (home-page
      "https://github.com/sabof/edit-color-stamp")
    (synopsis
      "Edit a hex color stamp, using a QT or the internal color picker")
    (description
      "Documentation at https://melpa.org/#/edit-color-stamp")
    (license #f)))

(define-public emacs-edit-indirect
  (package
    (name "emacs-edit-indirect")
    (version "20220511.1124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/edit-indirect.git")
               (commit
                 "f80f63822ffae78de38dbe72cacaeb1aaa96c732")))
        (sha256
          (base32
            "13v0fvzh3nv3bm4c3ld7pknw2g76cjkx81hsrmbrd1irlv4s4b00"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/edit-indirect")
    (synopsis "Edit regions in separate buffers")
    (description
      "Documentation at https://melpa.org/#/edit-indirect")
    (license #f)))

(define-public emacs-edit-indirect-region-latex
  (package
    (name "emacs-edit-indirect-region-latex")
    (version "20161129.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/niitsuma/edit-indirect-region-latex.git")
               (commit
                 "05043f2c0c9838947d3ca4b51b695deb7c47612e")))
        (sha256
          (base32
            "0dgac0nk9x4sz4lisxb5badrzpcjqjwgi79hhl1y6mafzm0ncqs2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-edit-indirect))
    (home-page
      "https://github.com/niitsuma/edit-indirect-region-latex")
    (synopsis
      "Edit LaTeX regions in separate buffers, e.g. for English grammar checks")
    (description
      "Documentation at https://melpa.org/#/edit-indirect-region-latex")
    (license #f)))

(define-public emacs-edit-list
  (package
    (name "emacs-edit-list")
    (version "20100930.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/edit-list.git")
               (commit
                 "f460d3f9e208a4e606fe6ded307f1b011916ca71")))
        (sha256
          (base32
            "0981hy1n50yizc3k06vbxqrpfml817a67kab1hkgkw5v6ymm1hc9"))))
    (build-system melpa-build-system)
    (home-page
      "http://mwolson.org/static/dist/elisp/edit-list.el")
    (synopsis "edit a single list")
    (description
      "Documentation at https://melpa.org/#/edit-list")
    (license #f)))

(define-public emacs-edit-server
  (package
    (name "emacs-edit-server")
    (version "20220908.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stsquad/emacs_chrome.git")
               (commit
                 "3ce09c6eb2919d56ef052b1584bba6abb12f7e99")))
        (sha256
          (base32
            "1yvcwpi5khrzs647nwg0hh8r537xvxjq6ylwq1ss4hd5yg58brsk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("servers/edit-server.el")))
    (home-page
      "https://github.com/stsquad/emacs_chrome")
    (synopsis
      "server that responds to edit requests from Chrome")
    (description
      "Documentation at https://melpa.org/#/edit-server")
    (license #f)))

(define-public emacs-edit-server-htmlize
  (package
    (name "emacs-edit-server-htmlize")
    (version "20130329.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/frobtech/edit-server-htmlize.git")
               (commit
                 "e7f8dadfabe869c77ca241cd6fbd4c52bd908392")))
        (sha256
          (base32
            "174xq45xc632zrb916aw7q4bch96pbi6zgy3dk77qla3ky9cfpl3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edit-server))
    (arguments '(#:files ("edit-server-htmlize.el")))
    (home-page
      "https://github.com/frobtech/edit-server-htmlize")
    (synopsis
      "(de)HTMLization hooks for edit-server.el")
    (description
      "Documentation at https://melpa.org/#/edit-server-htmlize")
    (license #f)))

(define-public emacs-editorconfig
  (package
    (name "emacs-editorconfig")
    (version "20230919.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/editorconfig/editorconfig-emacs.git")
               (commit
                 "4bf871b7a2f2433d1032ef2b251bfb08c23347f4")))
        (sha256
          (base32
            "0an4krh3i2xg156hlc6vmgcjk9chzgicq9jdnx5mkcrqzpfry6yr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/editorconfig/editorconfig-emacs#readme")
    (synopsis "EditorConfig Emacs Plugin")
    (description
      "Documentation at https://melpa.org/#/editorconfig")
    (license #f)))

(define-public emacs-editorconfig-charset-extras
  (package
    (name "emacs-editorconfig-charset-extras")
    (version "20180223.457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/editorconfig-charset-extras-el.git")
               (commit
                 "4f75e175ad15ce2038f926fe4f0e5a0c1d0cbc46")))
        (sha256
          (base32
            "12a78187ar4mxdf1sk8bkrdcxly1nc5m9krkry04jklj6h9dayj3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-editorconfig))
    (home-page
      "https://github.com/10sr/editorconfig-charset-extras-el")
    (synopsis "Extra EditorConfig Charset Support")
    (description
      "Documentation at https://melpa.org/#/editorconfig-charset-extras")
    (license #f)))

(define-public emacs-editorconfig-custom-majormode
  (package
    (name "emacs-editorconfig-custom-majormode")
    (version "20180816.244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/editorconfig-custom-majormode-el.git")
               (commit
                 "13ad1c83f847bedd4b3a19f9df7fd925853b19de")))
        (sha256
          (base32
            "1zagd6cliwm8xyhzfvpi7n7m58k78wv4ihc2snq00v7321jjh9bp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-editorconfig))
    (home-page
      "https://github.com/10sr/editorconfig-custom-majormode-el")
    (synopsis
      "Decide major-mode and mmm-mode from EditorConfig")
    (description
      "Documentation at https://melpa.org/#/editorconfig-custom-majormode")
    (license #f)))

(define-public emacs-editorconfig-domain-specific
  (package
    (name "emacs-editorconfig-domain-specific")
    (version "20180505.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/editorconfig-emacs-domain-specific.git")
               (commit
                 "e9824160fb2e466afa755240ee3ab7cc5657fb04")))
        (sha256
          (base32
            "0gkwhvywfpnay7rxb2bmsnywcd89qw710bsp53sk5fvilgfwfpkj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-editorconfig))
    (home-page
      "https://github.com/lassik/editorconfig-emacs-domain-specific")
    (synopsis
      "Apply brace style and other \"domain-specific\" EditorConfig properties")
    (description
      "Documentation at https://melpa.org/#/editorconfig-domain-specific")
    (license #f)))

(define-public emacs-editorconfig-generate
  (package
    (name "emacs-editorconfig-generate")
    (version "20190513.433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/editorconfig-generate-el.git")
               (commit
                 "47a31f928f46d2a0188db8e2cffa5d6354a81573")))
        (sha256
          (base32
            "01bv064rzxjpqvcs0x62qfqn51js51wmkbg04v28pvmwlmnigkg0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/editorconfig-generate-el")
    (synopsis "Generate .editorconfig")
    (description
      "Documentation at https://melpa.org/#/editorconfig-generate")
    (license #f)))

(define-public emacs-edn
  (package
    (name "emacs-edn")
    (version "20160215.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/expez/edn.el.git")
               (commit
                 "21e120a6914ee9a694be0a051f9f2af34ef055e4")))
        (sha256
          (base32
            "1hyv29b10iqa7msnmf6w47fj1zbbh678x76d1m59mcbfgbxzxagz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-peg))
    (home-page "https://www.github.com/expez/edn.el")
    (synopsis
      "Support for reading and writing the edn data format from elisp")
    (description
      "Documentation at https://melpa.org/#/edn")
    (license #f)))

(define-public emacs-ednc
  (package
    (name "emacs-ednc")
    (version "20230604.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sinic/ednc.git")
               (commit
                 "6fdb2da558049ad7978ffac40012ff1e1b2249a6")))
        (sha256
          (base32
            "1jdlwngxipq5pzs3kgmzwc99aqk6mi3cf1wv228hhmb8nsm1dqgd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sinic/ednc")
    (synopsis "Emacs Desktop Notification Center")
    (description
      "Documentation at https://melpa.org/#/ednc")
    (license #f)))

(define-public emacs-edts
  (package
    (name "emacs-edts")
    (version "20230926.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiw/edts.git")
               (commit
                 "5c3cded3fab56baa60874f4e1efd14155cec587f")))
        (sha256
          (base32
            "1gqb7v51xgwjd68nb2msfbg8s83f5082ha0ybqh7765qdlhrxfpf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-auto-highlight-symbol
            emacs-dash
            emacs-erlang
            emacs-f
            emacs-popup
            emacs-s))
    (arguments
      '(#:files
        ("*.el"
         "COPYING"
         "COPYING.LESSER"
         "Makefile"
         "README.md"
         "start"
         "start.bat"
         "edts-escript"
         "edts-release.config"
         "rebar.config"
         ("config" "config/*")
         ("elisp/edts" "elisp/edts/*.el")
         ("lib/edts" "lib/edts/Makefile")
         ("lib/edts/include" "lib/edts/include/*")
         ("lib/edts/priv" "lib/edts/priv/dispatch.conf")
         ("lib/edts/src" "lib/edts/src/*")
         ("lib/edts_debug"
          "lib/edts_debug/*.el"
          "lib/edts_debug/Makefile")
         ("lib/edts_debug/src" "lib/edts_debug/src/*")
         ("lib/edts_dialyzer"
          "lib/edts_dialyzer/*.el"
          "lib/edts_dialyzer/Makefile")
         ("lib/edts_dialyzer/src"
          "lib/edts_dialyzer/src/*")
         ("lib/edts_xref"
          "lib/edts_xref/*.el"
          "lib/edts_xref/Makefile")
         ("lib/edts_xref/src" "lib/edts_xref/src/*")
         (:exclude
           "elisp/edts/*-test.el"
           "lib/edts_debug/*-test.el"
           "lib/edts_dialyzer/*-test.el"
           "lib/edts_xref/*-test.el"))))
    (home-page "unspecified")
    (synopsis "Erlang Development Tool Suite")
    (description
      "Documentation at https://melpa.org/#/edts")
    (license #f)))

(define-public emacs-edwina
  (package
    (name "emacs-edwina")
    (version "20221206.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajgrf/edwina.git")
               (commit
                 "f95c31b1de95df7e83338a5d4daf3363df325862")))
        (sha256
          (base32
            "196lsw2kygxb5bli9f87mc5hghv45kcqlv6y686lq9ryvnb5ksbr"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/ajgrf/edwina")
    (synopsis "Dynamic window manager")
    (description
      "Documentation at https://melpa.org/#/edwina")
    (license #f)))

(define-public emacs-efar
  (package
    (name "emacs-efar")
    (version "20230216.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/suntsov/efar.git")
               (commit
                 "78618a6cd9fe7d46c3728db3589d1fe50f7c1c6b")))
        (sha256
          (base32
            "1dl7nfsg6ya1lvn1mjvask75x73vinxbpg5hxiqmif27gdi68qc1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/suntsov/efar")
    (synopsis "FAR-like file manager")
    (description
      "Documentation at https://melpa.org/#/efar")
    (license #f)))

(define-public emacs-eff
  (package
    (name "emacs-eff")
    (version "20230613.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oxidase/eff.git")
               (commit
                 "3ad6a3f3886c532149f9a1c8c740ab95940ab63b")))
        (sha256
          (base32
            "0fp4qgxw6nx90bp2mxll3qxg35sd3f4yl76fgc3bv2zj8q8349p1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/oxidase/eff")
    (synopsis
      "Show symbols in Executable File Formats")
    (description
      "Documentation at https://melpa.org/#/eff")
    (license #f)))

(define-public emacs-efire
  (package
    (name "emacs-efire")
    (version "20151009.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/efire.git")
               (commit
                 "91a644662afb352475efad0b377713656f131e5c")))
        (sha256
          (base32
            "1c2iyv392ap35nss4j901h33d3lx9lmq5v43flf2rid1766pam6v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-circe))
    (home-page
      "https://github.com/capitaomorte/efire")
    (synopsis "Use campfire from Emacs")
    (description
      "Documentation at https://melpa.org/#/efire")
    (license #f)))

(define-public emacs-eg
  (package
    (name "emacs-eg")
    (version "20170830.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/eg.el.git")
               (commit
                 "1c7f1613d2aaae728ef540305f6ba030616f86bd")))
        (sha256
          (base32
            "1g2ha6q9k6dmi63i2p4aypwf5mha699wr7yy5dsck39mqk15hx0f"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/eg.el")
    (synopsis "Norton Guide reader")
    (description
      "Documentation at https://melpa.org/#/eg")
    (license #f)))

(define-public emacs-egalgo
  (package
    (name "emacs-egalgo")
    (version "20211105.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/egalgo.git")
               (commit
                 "a56a86591351d53ca2add7c651757bfb0064fb22")))
        (sha256
          (base32
            "1xcd1kwrdclncln1fgg3ikdja8j96jfp0a9r9r7x2h05npb3881q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/egalgo")
    (synopsis "Genetic algorithm")
    (description
      "Documentation at https://melpa.org/#/egalgo")
    (license #f)))

(define-public emacs-egg
  (package
    (name "emacs-egg")
    (version "20181126.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/byplayer/egg.git")
               (commit
                 "00e768a78ac3d25f457eed667d02cac568480bf9")))
        (sha256
          (base32
            "1ak23v9gqj6x104mzgihn0hi7w0kr76q1sl929wmbb9h8s3a54q8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs Got Git - Emacs interface to Git")
    (description
      "Documentation at https://melpa.org/#/egg")
    (license #f)))

(define-public emacs-egg-timer
  (package
    (name "emacs-egg-timer")
    (version "20200217.1650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wpcarro/egg-timer.el.git")
               (commit
                 "e3542aeb80905956b94373a222a9cbac04e6497e")))
        (sha256
          (base32
            "0pq6ni2kvdps7j8pdlv16cka198sv29axp9xrp7c755k82pydhk4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wpcarro/egg-timer.el")
    (synopsis
      "Commonly used intervals for setting timers while working")
    (description
      "Documentation at https://melpa.org/#/egg-timer")
    (license #f)))

(define-public emacs-egison-mode
  (package
    (name "emacs-egison-mode")
    (version "20211218.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/egison/egison.git")
               (commit
                 "f06fabd97dc3333c7a2637b2cfff238704e87078")))
        (sha256
          (base32
            "13lhpfmwklqn1rwvi5gmkdnqpm7y41jmsgyg6gm53n5vpngpa6ra"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("elisp/*.el")))
    (home-page
      "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el")
    (synopsis "Egison editing mode")
    (description
      "Documentation at https://melpa.org/#/egison-mode")
    (license #f)))

(define-public emacs-eglot-fsharp
  (package
    (name "emacs-eglot-fsharp")
    (version "20230324.1942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fsharp/emacs-fsharp-mode.git")
               (commit
                 "b4d31c3da018cfbb3d1f9e6fd416d8777f0835bd")))
        (sha256
          (base32
            "1rhyc7yhpi4bjzq5f6bm3v4ab16prl6fvp9kjif6lq6ihh8xb520"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot emacs-fsharp-mode))
    (arguments '(#:files ("eglot-fsharp.el")))
    (home-page
      "https://github.com/fsharp/emacs-fsharp-mode")
    (synopsis "fsharp-mode eglot integration")
    (description
      "Documentation at https://melpa.org/#/eglot-fsharp")
    (license #f)))

(define-public emacs-eglot-java
  (package
    (name "emacs-eglot-java")
    (version "20231013.153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yveszoundi/eglot-java.git")
               (commit
                 "ee319cf87a7caaed52acbeb1b3ea00aa44d116b7")))
        (sha256
          (base32
            "0s0202adv19krb2qkk5dql49i76sgm5a1vls473qvdmd9f8pl38w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yveszoundi/eglot-java")
    (synopsis
      "Java extension for the eglot LSP client")
    (description
      "Documentation at https://melpa.org/#/eglot-java")
    (license #f)))

(define-public emacs-eglot-jl
  (package
    (name "emacs-eglot-jl")
    (version "20230601.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/non-Jedi/eglot-jl.git")
               (commit
                 "7dc604fe42a459a987853d065cd6d0f3c4cbc02a")))
        (sha256
          (base32
            "0ska1i7n2ykyxm3w64661x24ycfdn2vl7px0hv33llg2sbd9famf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eglot))
    (arguments
      '(#:files (:defaults "*.jl" "*.toml")))
    (home-page
      "https://github.com/non-Jedi/eglot-jl")
    (synopsis "Julia support for eglot")
    (description
      "Documentation at https://melpa.org/#/eglot-jl")
    (license #f)))

(define-public emacs-eglot-tempel
  (package
    (name "emacs-eglot-tempel")
    (version "20230626.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fejfighter/eglot-tempel.git")
               (commit
                 "303c7c24e140121f8bc218249b6169d0471b77b8")))
        (sha256
          (base32
            "10scmnkvp2aid9a4bb26cvg8vag6plkrnpg96dylwm0g6rra19zp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot emacs-tempel))
    (home-page
      "https://github.com/fejfighter/eglot-tempel")
    (synopsis
      "Use eglot as inline template expander")
    (description
      "Documentation at https://melpa.org/#/eglot-tempel")
    (license #f)))

(define-public emacs-ego
  (package
    (name "emacs-ego")
    (version "20200803.1101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-china/EGO.git")
               (commit
                 "211c4cb2af2582849d9df984fb2346deecaf79be")))
        (sha256
          (base32
            "0sk3mn1gxb826x69s6hlkrzgj8irs9sh3anfazryibw7i61p9cbj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-mustache
            emacs-htmlize
            emacs-dash))
    (arguments '(#:files (:defaults "themes")))
    (home-page "https://github.com/emacs-china/EGO")
    (synopsis
      "a static site generator based on org mode, forked from org-page.")
    (description
      "Documentation at https://melpa.org/#/ego")
    (license #f)))

(define-public emacs-eide
  (package
    (name "emacs-eide")
    (version "20230525.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://forge.tedomum.net/hjuvi/eide.git")
               (commit
                 "8cabc6d77b41bf0c9982ab56530c088d980bc353")))
        (sha256
          (base32
            "02hbvs6dqjcjiws3672frgbnr62l2biqjqs0npkhz6b50h99gzzr"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("src/*.el" "src/themes/*.el")))
    (home-page
      "https://software.hjuvi.fr.eu.org/eide/")
    (synopsis "IDE interface")
    (description
      "Documentation at https://melpa.org/#/eide")
    (license #f)))

(define-public emacs-eimp
  (package
    (name "emacs-eimp")
    (version "20120826.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/eimp.git")
               (commit
                 "2e7536fe6d8f7faf1bad7a8ae37faba0162c3b4f")))
        (sha256
          (base32
            "154d57yafxbcf39r89n5j43c86rp2fki3lw3gwy7ww2g6qkclcra"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs Image Manipulation Package")
    (description
      "Documentation at https://melpa.org/#/eimp")
    (license #f)))

(define-public emacs-ein
  (package
    (name "emacs-ein")
    (version "20230827.325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/millejoh/emacs-ipython-notebook.git")
               (commit
                 "998ba22660be2035cd23bed1555e47748c4da8a2")))
        (sha256
          (base32
            "09qbswzz6kbxc74dmdgagrk5wgbm89sabf0bfy76j4qlcg6550mx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket
            emacs-anaphora
            emacs-request
            emacs-deferred
            emacs-polymode
            emacs-dash
            emacs-with-editor))
    (home-page
      "https://github.com/dickmao/emacs-ipython-notebook")
    (synopsis "jupyter notebook client")
    (description
      "Documentation at https://melpa.org/#/ein")
    (license #f)))

(define-public emacs-eink-theme
  (package
    (name "emacs-eink-theme")
    (version "20190219.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/eink-emacs.git")
               (commit
                 "326b07523dcb076d6209cdbc7fdbb73df296dbdb")))
        (sha256
          (base32
            "1s5w45p0in2ljrbhc7nsc0ppff5wybzwrwv60z1a6dnd8d679qfj"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/maio/eink-emacs")
    (synopsis "E Ink color theme")
    (description
      "Documentation at https://melpa.org/#/eink-theme")
    (license #f)))

(define-public emacs-ejc-sql
  (package
    (name "emacs-ejc-sql")
    (version "20230822.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/ejc-sql.git")
               (commit
                 "c99a257c18dbcca02a63172b4f1c2a947c908d8e")))
        (sha256
          (base32
            "14vkq7lnrgm7ypa6sx73jlm1k2i8y01347gd4nw7g19vdfdgx016"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clomacs emacs-dash emacs-spinner))
    (arguments
      '(#:files
        (:defaults "project.clj" "src" "snippets")))
    (home-page "https://github.com/kostafey/ejc-sql")
    (synopsis "Emacs SQL client uses Clojure JDBC.")
    (description
      "Documentation at https://melpa.org/#/ejc-sql")
    (license #f)))

(define-public emacs-ejson-mode
  (package
    (name "emacs-ejson-mode")
    (version "20190720.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/ejson-mode.git")
               (commit
                 "9630dfac9549779711dbe89e621f516bb4b3a354")))
        (sha256
          (base32
            "1j4v34m7jfiivbpps2pdvzl9q2gwj7rzcna9x93pj0qkw1xaqc3l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dantecatalfamo/ejson-mode")
    (synopsis "Major mode for editing ejson files.")
    (description
      "Documentation at https://melpa.org/#/ejson-mode")
    (license #f)))

(define-public emacs-el-autoyas
  (package
    (name "emacs-el-autoyas")
    (version "20120918.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/el-autoyas.el.git")
               (commit
                 "bde0251ecb504f585dfa27c205c8e312655310cc")))
        (sha256
          (base32
            "0dbp2zz993cm7mrd58c4iflbzqwg50wzgn2cpwfivk14w1mznh4n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mlf176f2/el-autoyas.el")
    (synopsis
      "Automatically create Emacs-Lisp Yasnippets")
    (description
      "Documentation at https://melpa.org/#/el-autoyas")
    (license #f)))

(define-public emacs-el-fetch
  (package
    (name "emacs-el-fetch")
    (version "20230624.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/xgqt/emacs-el-fetch.git")
               (commit
                 "7907fd7829ca55b21a62d23c17066fdfde9cd07c")))
        (sha256
          (base32
            "0b2z767j9cdv2a7n0g5x4zxjp9jim9q2lwcvyxddq82lrqy75ych"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/el-fetch/*")))
    (home-page
      "https://gitlab.com/xgqt/emacs-el-fetch")
    (synopsis
      "Show system information in Neofetch-like style (eg CPU, RAM)")
    (description
      "Documentation at https://melpa.org/#/el-fetch")
    (license #f)))

(define-public emacs-el-fly-indent-mode
  (package
    (name "emacs-el-fly-indent-mode")
    (version "20180422.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jiahaowork/el-fly-indent-mode.el.git")
               (commit
                 "39738c88c01a3a035edffe63400d434edb1e3003")))
        (sha256
          (base32
            "1p29h1ab9iciray6yzg120vw8zi9zx3lsms120szhqdn1chaldcg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jiahaowork/el-fly-indent-mode.el")
    (synopsis "Indent Emacs Lisp on the fly")
    (description
      "Documentation at https://melpa.org/#/el-fly-indent-mode")
    (license #f)))

(define-public emacs-el-get
  (package
    (name "emacs-el-get")
    (version "20230618.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/el-get.git")
               (commit
                 "d8321df8c44102afcba4d0e5bc6f2c2f85149adc")))
        (sha256
          (base32
            "0nq3ibxlxwcqglf30cpmyi4csdqhbjf1nn8zqqkhzhwm129qgfp0"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         ("recipes" "recipes/el-get.rcp")
         "methods")))
    (home-page
      "http://www.emacswiki.org/emacs/el-get")
    (synopsis
      "Manage the external elisp bits and pieces you depend upon")
    (description
      "Documentation at https://melpa.org/#/el-get")
    (license #f)))

(define-public emacs-el-init
  (package
    (name "emacs-el-init")
    (version "20150728.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/el-init.git")
               (commit
                 "7538e1511ff7ceea2ba65ed4783c57e2f9176ee6")))
        (sha256
          (base32
            "1x71qqw6bq86cpfldz3jgchpm93200z8xcq8vwryyg3ynz681b0a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-anaphora))
    (home-page "https://github.com/HKey/el-init")
    (synopsis "A loader inspired by init-loader")
    (description
      "Documentation at https://melpa.org/#/el-init")
    (license #f)))

(define-public emacs-el-init-viewer
  (package
    (name "emacs-el-init-viewer")
    (version "20150303.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/el-init-viewer.git")
               (commit
                 "7c0169d356d6c007317e253e5776e1e48a60d6ad")))
        (sha256
          (base32
            "0w2mxppkx6306kyxaw00fzv8q745iklcm41iswmflr2585h2adnq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ctable
            emacs-dash
            emacs-anaphora
            emacs-el-init))
    (home-page
      "https://github.com/HKey/el-init-viewer")
    (synopsis "Record viewer for el-init")
    (description
      "Documentation at https://melpa.org/#/el-init-viewer")
    (license #f)))

(define-public emacs-el-mock
  (package
    (name "emacs-el-mock")
    (version "20220625.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/el-mock.el.git")
               (commit
                 "6cfbc9de8f1927295dca6864907fe4156bd71910")))
        (sha256
          (base32
            "09c3a1771v6kliwj0bn953pxxyjlk6q9kp31cxcr0nraik7d0mhk"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/el-mock.el")
    (synopsis
      "Tiny Mock and Stub framework in Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/el-mock")
    (license #f)))

(define-public emacs-el-patch
  (package
    (name "emacs-el-patch")
    (version "20230409.2156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/el-patch.git")
               (commit
                 "e358febcb03f71f3aed4b37f99990ae865f1124b")))
        (sha256
          (base32
            "0j3r3p008jx5y1cd8qpki220ydk45sis6vh1c3rbakalda9aww67"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/el-patch")
    (synopsis "Future-proof your Elisp")
    (description
      "Documentation at https://melpa.org/#/el-patch")
    (license #f)))

(define-public emacs-el-secretario
  (package
    (name "emacs-el-secretario")
    (version "20220426.1905")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/el-secretario-"
               version
               ".tar"))
        (sha256
          (base32
            "143mw7xhg0ndw6kw21njas9adi2xhsv598m40ha4f2i2wddawkcx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-hercules))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis
      "Unify all your inboxes with the Emacs secretary")
    (description
      "Documentation at https://melpa.org/#/el-secretario")
    (license #f)))

(define-public emacs-el-secretario-elfeed
  (package
    (name "emacs-el-secretario-elfeed")
    (version "20211214.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~zetagon/el-secretario")
               (commit
                 "aaf183877156c69bf5eb02832dc33a1908eb1091")))
        (sha256
          (base32
            "0nj4axympsls5hnhkwlm0v2pnbm82yks03ndk5iqyf261x7rbhna"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-el-secretario emacs-elfeed))
    (arguments
      '(#:files ("el-secretario-elfeed.el")))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis
      "Add notmuch email inboxes to el-secretario")
    (description
      "Documentation at https://melpa.org/#/el-secretario-elfeed")
    (license #f)))

(define-public emacs-el-secretario-mu4e
  (package
    (name "emacs-el-secretario-mu4e")
    (version "20220422.2006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~zetagon/el-secretario")
               (commit
                 "78a811f02c7104a39b908f9e4c8436abde4b9620")))
        (sha256
          (base32
            "0hj7ly33jahpvhlwq1cwc262ymsqf70jf1vq9zaqmsz9wn04nryi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-el-secretario))
    (arguments '(#:files ("el-secretario-mu4e.el")))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis "Add mu4e inboxes to el-secretario")
    (description
      "Documentation at https://melpa.org/#/el-secretario-mu4e")
    (license #f)))

(define-public emacs-el-secretario-notmuch
  (package
    (name "emacs-el-secretario-notmuch")
    (version "20220428.1058")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/el-secretario-notmuch-"
               version
               ".el"))
        (sha256
          (base32
            "0npm8naf7m1ah0584hi5spafawxmfk0pvfmna62vz7i3a5b3b5id"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-el-secretario emacs-notmuch))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis "Add notmuch inboxes to el-secretario")
    (description
      "Documentation at https://melpa.org/#/el-secretario-notmuch")
    (license #f)))

(define-public emacs-el-secretario-org
  (package
    (name "emacs-el-secretario-org")
    (version "20220411.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~zetagon/el-secretario")
               (commit
                 "949ecafee4ec4ddd38ff7380aabfd250a52d5d76")))
        (sha256
          (base32
            "00anfhv8l891jq46dx48fw80nxlp66lxfsyizqm92k9jkja48a7q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql
            emacs-dash
            emacs-el-secretario))
    (arguments
      '(#:files
        ("el-secretario-org.el" "el-secretario-space.el")))
    (home-page
      "https://git.sr.ht/~zetagon/el-secretario")
    (synopsis
      "Create inboxes out of org-mode files for el-secretario")
    (description
      "Documentation at https://melpa.org/#/el-secretario-org")
    (license #f)))

(define-public emacs-el-spec
  (package
    (name "emacs-el-spec")
    (version "20121018.704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/el-spec.git")
               (commit
                 "1dbc465401d4aea5560318c4f13ff30920a0718d")))
        (sha256
          (base32
            "1lsq7980pwcwlg7z37hrig8ddm9nyvaqrlczv1w0vy631vc5z2az"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/uk-ar/el-spec")
    (synopsis
      "ruby's rspec like syntax test frame work")
    (description
      "Documentation at https://melpa.org/#/el-spec")
    (license #f)))

(define-public emacs-el-spice
  (package
    (name "emacs-el-spice")
    (version "20201013.1729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vedang/el-spice.git")
               (commit
                 "a1adde201ee10881b522e67aa2c605378943a28d")))
        (sha256
          (base32
            "1yify5hv7frvvvwhkq38svj2zws7s50df6vh6qpd3xkgm2imm9fd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vedang/el-spice")
    (synopsis
      "Extra spice for emacs lisp programming")
    (description
      "Documentation at https://melpa.org/#/el-spice")
    (license #f)))

(define-public emacs-el-sprunge
  (package
    (name "emacs-el-sprunge")
    (version "20200312.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/el-sprunge.git")
               (commit
                 "e4365ea0bdf60969817619376bdcc98003fec33d")))
        (sha256
          (base32
            "13d2dr5r9nv97ma3abcnhqgq86rqwqlwvq64z3hm0qibsxxajdhq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-server emacs-htmlize))
    (home-page "unspecified")
    (synopsis
      "Command line paste server with Emacs highlighting")
    (description
      "Documentation at https://melpa.org/#/el-sprunge")
    (license #f)))

(define-public emacs-el-spy
  (package
    (name "emacs-el-spy")
    (version "20131226.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/el-spy.git")
               (commit
                 "b1dead9d1877660856ada22d906ac4e54695aec7")))
        (sha256
          (base32
            "016l3inzb7dby0w58najj2pvymwk6gllsxvqj2fkz3599i36p1pn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/uk-ar/el-spy")
    (synopsis
      "Mocking framework for Emacs lisp. It also support spy, proxy.")
    (description
      "Documentation at https://melpa.org/#/el-spy")
    (license #f)))

(define-public emacs-el2markdown
  (package
    (name "emacs-el2markdown")
    (version "20170630.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/el2markdown.git")
               (commit
                 "368d99313683cd943c99feaffca356be60bdb636")))
        (sha256
          (base32
            "1h0cr8qcvj9r3acb6bf5nyglvi5gdglwflkfl5jbzp0nm1p9iqcg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/el2markdown")
    (synopsis
      "Convert commentary section of elisp files to markdown.")
    (description
      "Documentation at https://melpa.org/#/el2markdown")
    (license #f)))

(define-public emacs-el2org
  (package
    (name "emacs-el2org")
    (version "20200408.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/el2org.git")
               (commit
                 "7db77fdd73f378d4e60e34c11bbdf00677adc32c")))
        (sha256
          (base32
            "196nrg4cp57calv36if0fkc8bjiz6qzisr29ry49zmkgjlqaafq3"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/el2org")
    (synopsis "Convert elisp file to org file")
    (description
      "Documentation at https://melpa.org/#/el2org")
    (license #f)))

(define-public emacs-elbank
  (package
    (name "emacs-elbank")
    (version "20180316.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/elbank.git")
               (commit
                 "fa9bc7dec0a8fd489e90b9f178719344cc8d315a")))
        (sha256
          (base32
            "08jxxkbgn2z4kvqkhbimf3lj999yxmyi14wpq8wgbhgcf6q6zx8a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Personal finances reporting application")
    (description
      "Documentation at https://melpa.org/#/elbank")
    (license #f)))

(define-public emacs-elcontext
  (package
    (name "emacs-elcontext")
    (version "20210109.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rollacaster/elcontext.git")
               (commit
                 "2efd3dd8c5176c4f071bb048be6cb069b05d6e9e")))
        (sha256
          (base32
            "1xi37jpx8wj2cq6n8la1p4wmqzrwga2ixp6rllbnbhq2fpm9fjsr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-hydra
            emacs-f
            emacs-osx-location
            emacs-uuidgen))
    (home-page
      "https://github.com/rollacaster/elcontext")
    (synopsis "Create context specific actions")
    (description
      "Documentation at https://melpa.org/#/elcontext")
    (license #f)))

(define-public emacs-elcord
  (package
    (name "emacs-elcord")
    (version "20230627.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Mstrodl/elcord.git")
               (commit
                 "bb12802f1f1e34345c600f69111c1a53bf98185e")))
        (sha256
          (base32
            "1pgnnm12pd5y67lcnzwd2f4b0cc2kaxxvzxb7a4ipb2gb0vwy3if"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "stdpipe.ps1")))
    (home-page "https://github.com/Mstrodl/elcord")
    (synopsis
      "Allows you to integrate Rich Presence from Discord")
    (description
      "Documentation at https://melpa.org/#/elcord")
    (license #f)))

(define-public emacs-elcouch
  (package
    (name "emacs-elcouch")
    (version "20230903.750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/elcouch.git")
               (commit
                 "a426e9bee9501284f4e1e84766621ca6b130c79a")))
        (sha256
          (base32
            "166z8babd67k4qq0sb41hnfc218scghvjk0f2i4ascvw9xqlgcdl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-json-mode
            emacs-libelcouch
            emacs-navigel))
    (home-page
      "https://gitlab.petton.fr/DamienCassou/elcouch")
    (synopsis
      "View and manipulate CouchDB databases")
    (description
      "Documentation at https://melpa.org/#/elcouch")
    (license #f)))

(define-public emacs-eldev
  (package
    (name "emacs-eldev")
    (version "20231107.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eldev/eldev.git")
               (commit
                 "ce5f3e14d7c5ab21dfb3e50235bfe495808b705a")))
        (sha256
          (base32
            "01ax4nzdby25szjmy63fmxjd8hf0a6hkkj555xylldq9bx5ax899"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("bin" "bin/*")
          (:exclude "bin/*.in" "bin/*.part"))))
    (home-page
      "https://github.com/emacs-eldev/eldev")
    (synopsis "Elisp development tool")
    (description
      "Documentation at https://melpa.org/#/eldev")
    (license #f)))

(define-public emacs-eldoc-box
  (package
    (name "emacs-eldoc-box")
    (version "20231008.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/casouri/eldoc-box.git")
               (commit
                 "06c905bb4ac6bb35035d65ef5de0de9ce6dff763")))
        (sha256
          (base32
            "0fzdzks18lyx19kigydbdi2lg260p3wiq0v6sf4xb13ypsx6pyfv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/casouri/eldoc-box")
    (synopsis "Display documentation in childframe")
    (description
      "Documentation at https://melpa.org/#/eldoc-box")
    (license #f)))

(define-public emacs-eldoc-cmake
  (package
    (name "emacs-eldoc-cmake")
    (version "20190419.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikirill/eldoc-cmake.git")
               (commit
                 "4453c03b5c95ff32842f13db2fc317fb0fe2f79e")))
        (sha256
          (base32
            "01jhfglj1v4p3qmhiri4k05p0dg10k59pj5608hjls6zsmxf2wbg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikirill/eldoc-cmake")
    (synopsis "Eldoc support for CMake")
    (description
      "Documentation at https://melpa.org/#/eldoc-cmake")
    (license #f)))

(define-public emacs-eldoc-eask
  (package
    (name "emacs-eldoc-eask")
    (version "20230906.611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-eask/eldoc-eask.git")
               (commit
                 "2f9c95ae0ecd58835496d0f4936c2eb3f974f321")))
        (sha256
          (base32
            "1vcj2z7h36jjdkgk8cwbb3cdl5nmrsf7zz07ffhhlprybwkpqhbd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eask))
    (home-page
      "https://github.com/emacs-eask/eldoc-eask")
    (synopsis "Eldoc support for Eask-file")
    (description
      "Documentation at https://melpa.org/#/eldoc-eask")
    (license #f)))

(define-public emacs-eldoc-eval
  (package
    (name "emacs-eldoc-eval")
    (version "20220106.1951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/eldoc-eval.git")
               (commit
                 "e91800503c90cb75dc70abe42f1d6ae499346cc1")))
        (sha256
          (base32
            "01iklccpvd5n4jpmh0bhfl73a2q3cfk4q6dg70qx7ij87xg5pblf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Enable eldoc support when minibuffer is in use.")
    (description
      "Documentation at https://melpa.org/#/eldoc-eval")
    (license #f)))

(define-public emacs-eldoc-overlay
  (package
    (name "emacs-eldoc-overlay")
    (version "20230406.959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/eldoc-overlay.git")
               (commit
                 "14a9e141918c2e18a107920e8631e622c580b3ef")))
        (sha256
          (base32
            "1x5ydhq94cf3amc0fykhq3qdhv81wpj8zf3rcn8ckncj3bhjvcd1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inline-docs emacs-quick-peek))
    (home-page
      "https://repo.or.cz/eldoc-overlay.git")
    (synopsis
      "Display eldoc with contextual documentation overlay")
    (description
      "Documentation at https://melpa.org/#/eldoc-overlay")
    (license #f)))

(define-public emacs-eldoc-stan
  (package
    (name "emacs-eldoc-stan")
    (version "20211129.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stan-dev/stan-mode.git")
               (commit
                 "150bbbe5fd3ad2b5a3dbfba9d291e66eeea1a581")))
        (sha256
          (base32
            "06y4gvw8g4mjyiv77rznivqphh9sayjmi9aqr9nhxlf6i19a6hqh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-stan-mode))
    (arguments
      '(#:files
        ("eldoc-stan/*.el"
         "eldoc-stan/eldoc-stan.json"
         (:exclude
           "eldoc-stan/test-*.el"
           "eldoc-stan/eldoc-stan-create-json.el"))))
    (home-page
      "https://github.com/stan-dev/stan-mode/tree/master/eldoc-stan")
    (synopsis "Eldoc support for stan functions")
    (description
      "Documentation at https://melpa.org/#/eldoc-stan")
    (license #f)))

(define-public emacs-eldoc-toml
  (package
    (name "emacs-eldoc-toml")
    (version "20211026.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/it-is-wednesday/eldoc-toml.git")
               (commit
                 "61106be3c3f3a5b293c3f285eec8c6f400142b6d")))
        (sha256
          (base32
            "079vxv575v4qhdc05jn0ba17f8451nqmdpvh6x4wbg5vdchrqvyp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/it-is-wednesday/eldoc-toml")
    (synopsis "TOML table name at point for ElDoc")
    (description
      "Documentation at https://melpa.org/#/eldoc-toml")
    (license #f)))

(define-public emacs-electric-case
  (package
    (name "emacs-electric-case")
    (version "20150417.1112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/electric-case.git")
               (commit
                 "bac64e772107e3dc721a9819f63b9ebdc28a81f7")))
        (sha256
          (base32
            "0s4y1319sr4xc0k6h2zhzzxsx2kc3pc2m6saah18y4kip0hjyhr8"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "insert camelCase, snake_case words without \"Shift\"ing")
    (description
      "Documentation at https://melpa.org/#/electric-case")
    (license #f)))

(define-public emacs-electric-cursor
  (package
    (name "emacs-electric-cursor")
    (version "20221221.438")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/electric-cursor-"
               version
               ".el"))
        (sha256
          (base32
            "0lv348ayjjlizfqk9a1v0nwhi1g13mgcp0apf8mkk45irf193kjd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/duckwork/electric-cursor")
    (synopsis
      "Change cursor automatically depending on mode")
    (description
      "Documentation at https://melpa.org/#/electric-cursor")
    (license #f)))

(define-public emacs-electric-operator
  (package
    (name "emacs-electric-operator")
    (version "20231014.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/electric-operator.git")
               (commit
                 "18e555a5cdfd7264c179f810d7fd4c71a80b715a")))
        (sha256
          (base32
            "1r5g2n4lzns65lil9291jhxzwm3q4s1z99zhmyj9nmnxl3mf7aax"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/davidshepherd7/electric-operator")
    (synopsis
      "Automatically add spaces around operators")
    (description
      "Documentation at https://melpa.org/#/electric-operator")
    (license #f)))

(define-public emacs-electric-ospl
  (package
    (name "emacs-electric-ospl")
    (version "20230719.1531")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/electric-ospl-"
               version
               ".tar"))
        (sha256
          (base32
            "1l727dcf1wgp4iqzij3kki0161d9g7rsnlhl805f5rdcrrzzsh82"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~swflint/electric-ospl-mode")
    (synopsis "Electric OSPL Mode")
    (description
      "Documentation at https://melpa.org/#/electric-ospl")
    (license #f)))

(define-public emacs-electric-spacing
  (package
    (name "emacs-electric-spacing")
    (version "20220220.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xwl/electric-spacing.git")
               (commit
                 "c37b2502512dd49a8311d7c34e9bfd1af3d4dbcd")))
        (sha256
          (base32
            "04p7bxlm82c7f28sskr044p1vyyffa3wir75b430d82by53b6yrj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Insert operators with surrounding spaces smartly")
    (description
      "Documentation at https://melpa.org/#/electric-spacing")
    (license #f)))

(define-public emacs-elegant-agenda-mode
  (package
    (name "emacs-elegant-agenda-mode")
    (version "20210115.353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justinbarclay/elegant-agenda-mode.git")
               (commit
                 "5cbc688584ba103ea3be7d7b30e5d94e52f59eb6")))
        (sha256
          (base32
            "13jv4dars81b42593zijpjm0qci0z7hizbjsjab3xfxi3m3r4pk4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justinbarclay/elegant-agenda-mode")
    (synopsis "An elegant theme for your org-agenda")
    (description
      "Documentation at https://melpa.org/#/elegant-agenda-mode")
    (license #f)))

(define-public emacs-elein
  (package
    (name "emacs-elein")
    (version "20120120.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/elein.git")
               (commit
                 "d4c0c0491dbb7c90e953d7a16172107c37103605")))
        (sha256
          (base32
            "1ijrhm9vrzh5wl1rr9ayl11dwm05bh1i43fnbz3ga58l6whgkfpw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/remvee/elein")
    (synopsis
      "running leiningen commands from emacs")
    (description
      "Documentation at https://melpa.org/#/elein")
    (license #f)))

(define-public emacs-elescope
  (package
    (name "emacs-elescope")
    (version "20210312.1147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/freesteph/elescope.git")
               (commit
                 "36566c8c1f5f993f67eadc85d18539ff375c0f98")))
        (sha256
          (base32
            "0qpgkv0h71pkbm006ni56hbimmn9wfvciaicxylhpbcqkd7n1gc1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-request))
    (home-page
      "https://github.com/freesteph/elescope")
    (synopsis
      "Seach and clone projects from the minibuffer")
    (description
      "Documentation at https://melpa.org/#/elescope")
    (license #f)))

(define-public emacs-elf-mode
  (package
    (name "emacs-elf-mode")
    (version "20161009.748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/elf-mode.git")
               (commit
                 "cd280d683cd3341d8bb31af6db7e3b74a133e6ab")))
        (sha256
          (base32
            "0cbvjbk2893ag1iy8ggixpirfiyhssm7fii96hb9jqdz874cdl0k"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/elf-mode")
    (synopsis "Show symbols in binaries")
    (description
      "Documentation at https://melpa.org/#/elf-mode")
    (license #f)))

(define-public emacs-elfeed
  (package
    (name "emacs-elfeed")
    (version "20221108.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elfeed.git")
               (commit
                 "55fb162fa27e71b88effa59a83c57842e262b00f")))
        (sha256
          (base32
            "02cqgrhfaxc73j250jz70q83l50ynhfxszg6kyb4g7fv9kjdagh7"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "README.md")))
    (home-page "https://github.com/skeeto/elfeed")
    (synopsis "an Emacs Atom/RSS feed reader")
    (description
      "Documentation at https://melpa.org/#/elfeed")
    (license #f)))

(define-public emacs-elfeed-autotag
  (package
    (name "emacs-elfeed-autotag")
    (version "20210607.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paulelms/elfeed-autotag.git")
               (commit
                 "bc62c37fb79b720ff8b6d67f04f2268841306dcd")))
        (sha256
          (base32
            "0vmvl3c465i2gkm9079hj7l3qxna37q3rrs498r8dby11c0dgcax"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elfeed
            emacs-elfeed-protocol
            emacs-dash
            emacs-s))
    (home-page
      "https://github.com/paulelms/elfeed-autotag")
    (synopsis "Easy auto-tagging for elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-autotag")
    (license #f)))

(define-public emacs-elfeed-curate
  (package
    (name "emacs-elfeed-curate")
    (version "20231001.1926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnadler/elfeed-curate.git")
               (commit
                 "b3d424340d62f1d87b875da196a71ebef52d6114")))
        (sha256
          (base32
            "0hqmsm5dxgs16inyjqp9g8a8xgfflx5bsl3salwb00839fg5gnmc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/rnadler/elfeed-curate")
    (synopsis "Elfeed entry curation")
    (description
      "Documentation at https://melpa.org/#/elfeed-curate")
    (license #f)))

(define-public emacs-elfeed-dashboard
  (package
    (name "emacs-elfeed-dashboard")
    (version "20210727.603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Manoj321/elfeed-dashboard.git")
               (commit
                 "b143f8453aed2053e8fc6f05cef6233797408546")))
        (sha256
          (base32
            "1yvr3fg5dx0z6h7jbv3fvn5ccw5grpcaj2ynp7zri5y388g160ql"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/Manoj321/elfeed-dashboard")
    (synopsis
      "An extensible frontend for elfeed using org-mode")
    (description
      "Documentation at https://melpa.org/#/elfeed-dashboard")
    (license #f)))

(define-public emacs-elfeed-goodies
  (package
    (name "emacs-elfeed-goodies")
    (version "20221003.1406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeetelongname/elfeed-goodies.git")
               (commit
                 "544ef42ead011d960a0ad1c1d34df5d222461a6b")))
        (sha256
          (base32
            "147pwqx2maf430qhigzfd6lqk7a5sbrydf9a4c5bvsw8jv7wzb6l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popwin
            emacs-powerline
            emacs-elfeed
            emacs-link-hint))
    (home-page
      "https://github.com/algernon/elfeed-goodies")
    (synopsis "Elfeed goodies")
    (description
      "Documentation at https://melpa.org/#/elfeed-goodies")
    (license #f)))

(define-public emacs-elfeed-org
  (package
    (name "emacs-elfeed-org")
    (version "20231009.1125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remyhonig/elfeed-org.git")
               (commit
                 "fe59a96969bd321f5f9ec7317a4bc80943b94c86")))
        (sha256
          (base32
            "1ag0864vgvwdz3kmk5sj5hq25l7v7pqn33iyhhsd897wgqcmr2dk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/remyhonig/elfeed-org")
    (synopsis
      "Configure elfeed with one or more org-mode files")
    (description
      "Documentation at https://melpa.org/#/elfeed-org")
    (license #f)))

(define-public emacs-elfeed-protocol
  (package
    (name "emacs-elfeed-protocol")
    (version "20231007.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fasheng/elfeed-protocol.git")
               (commit
                 "f40a14dadc09d6179672adc890f9daca4300db1f")))
        (sha256
          (base32
            "14kdik74vxqvp58bsgfm10nknfdmmjaaw0dq95jbndkwc5sy8mhq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/fasheng/elfeed-protocol")
    (synopsis
      "Provide fever/newsblur/owncloud/ttrss protocols for elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-protocol")
    (license #f)))

(define-public emacs-elfeed-score
  (package
    (name "emacs-elfeed-score")
    (version "20230728.1433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sp1ff/elfeed-score.git")
               (commit
                 "cc1a05a95bff953eb28151056ce3ce14ba3e901d")))
        (sha256
          (base32
            "0s37m8566g396d8480jac07c89f2jjpg6p3hcwwmz89s27agp81q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/sp1ff/elfeed-score")
    (synopsis "Gnus-style scoring for Elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-score")
    (license #f)))

(define-public emacs-elfeed-summary
  (package
    (name "emacs-elfeed-summary")
    (version "20230823.925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/elfeed-summary.git")
               (commit
                 "129b893da11ad6195e8bb40ddc236ffd27fa96a7")))
        (sha256
          (base32
            "02ij597azjabf868jk94kngnvjiwhh2iyibap81cianmd6hg3n5x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit-section emacs-elfeed))
    (home-page
      "https://github.com/SqrtMinusOne/elfeed-summary.el")
    (synopsis "Feed summary interface for elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-summary")
    (license #f)))

(define-public emacs-elfeed-tube
  (package
    (name "emacs-elfeed-tube")
    (version "20231022.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/elfeed-tube.git")
               (commit
                 "0291038a00c17d780aded05b1e90860a2d586546")))
        (sha256
          (base32
            "0pza83vfih4gmqmf3mvpp9nxvhd9rsvszh71r9vfmdafzwqkc31p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed emacs-aio))
    (arguments
      '(#:files
        ("elfeed-tube.el"
         "elfeed-tube-utils.el"
         "elfeed-tube-fill.el")))
    (home-page
      "https://github.com/karthink/elfeed-tube")
    (synopsis "YouTube integration for Elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-tube")
    (license #f)))

(define-public emacs-elfeed-tube-mpv
  (package
    (name "emacs-elfeed-tube-mpv")
    (version "20230607.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/elfeed-tube.git")
               (commit
                 "6d5a24cfd0655068afd364cded5521a4550a8adb")))
        (sha256
          (base32
            "0si3i8k23q7sbd0407n0yxvb848b4cjndpfgmvgqvcmlhi9cpb9q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elfeed-tube emacs-mpv))
    (arguments '(#:files ("elfeed-tube-mpv.el")))
    (home-page
      "https://github.com/karthink/elfeed-tube")
    (synopsis "Control mpv from Elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-tube-mpv")
    (license #f)))

(define-public emacs-elfeed-web
  (package
    (name "emacs-elfeed-web")
    (version "20210226.258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elfeed.git")
               (commit
                 "162d7d545ed41c27967d108c04aa31f5a61c8e16")))
        (sha256
          (base32
            "0v49l289wiral01pvgm30wyv79h5d3ly3i05dmcw1q93g4z4l56d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-simple-httpd emacs-elfeed))
    (arguments '(#:files ("web/*")))
    (home-page "https://github.com/skeeto/elfeed")
    (synopsis "web interface to Elfeed")
    (description
      "Documentation at https://melpa.org/#/elfeed-web")
    (license #f)))

(define-public emacs-elfeed-webkit
  (package
    (name "emacs-elfeed-webkit")
    (version "20230604.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/elfeed-webkit.git")
               (commit
                 "db7ee83f9c0e67f01960b1e0489717cf7a8fd2c2")))
        (sha256
          (base32
            "1f7xbfqls0aycgis10i7z6yfdn0479p21qm3chi2d27nin1lhhlj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elfeed))
    (home-page
      "https://github.com/fritzgrabo/elfeed-webkit")
    (synopsis
      "Render elfeed entries in embedded webkit widgets")
    (description
      "Documentation at https://melpa.org/#/elfeed-webkit")
    (license #f)))

(define-public emacs-elforth
  (package
    (name "emacs-elforth")
    (version "20210522.928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/elforth.git")
               (commit
                 "2d8540434a28e7edaa04a992c3c362832b2fd61e")))
        (sha256
          (base32
            "0p4d6blqa3g6mpbn00vqysshga4i93l2s6i7nm2ckg4zrrn27pl5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lassik/elforth")
    (synopsis
      "Do you have what it takes to hack Emacs Lisp in Forth?")
    (description
      "Documentation at https://melpa.org/#/elforth")
    (license #f)))

(define-public emacs-elgrep
  (package
    (name "emacs-elgrep")
    (version "20230814.1215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TobiasZawada/elgrep.git")
               (commit
                 "329eaf2e9e994e5535c7f7fe2685ec21d8323384")))
        (sha256
          (base32
            "0pyj662inq00k1kpxw07gpxmiwhfj3vajg1s97a2rh97m4f7rqpz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/TobiasZawada/elgrep")
    (synopsis
      "Searching files for regular expressions")
    (description
      "Documentation at https://melpa.org/#/elgrep")
    (license #f)))

(define-public emacs-elhome
  (package
    (name "emacs-elhome")
    (version "20161025.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/demyanrogozhin/elhome.git")
               (commit
                 "e789e806469af3e9705f72298683c21f6c3a516d")))
        (sha256
          (base32
            "1q9glli1czbfp62aalblaak55j8rj2nl8bm8nifnnb8jrzj1qrn0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-initsplit))
    (arguments '(#:files ("elhome.el" "startup")))
    (home-page
      "http://github.com/demyanrogozhin/elhome")
    (synopsis
      "A framework for a \"home\" Emacs configuration")
    (description
      "Documentation at https://melpa.org/#/elhome")
    (license #f)))

(define-public emacs-elisp-autofmt
  (package
    (name "emacs-elisp-autofmt")
    (version "20231026.2028")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/elisp-autofmt-"
               version
               ".tar"))
        (sha256
          (base32
            "0makyswqhhi6fxlxag47klicxdfkgm91b40g92cdsb9rihjq0bdx"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-elisp-autofmt")
    (synopsis "Emacs lisp auto-format")
    (description
      "Documentation at https://melpa.org/#/elisp-autofmt")
    (license #f)))

(define-public emacs-elisp-def
  (package
    (name "emacs-elisp-def")
    (version "20230901.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/elisp-def.git")
               (commit
                 "1ad4baccbf3d0d13e7607d332ae6bc60a5dd7360")))
        (sha256
          (base32
            "0k1r4fyai53p7y5vqwqjxdiqlnmrrxqaxglc22j54kdic8j1lbl7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-s))
    (home-page "unspecified")
    (synopsis
      "macro-aware go-to-definition for elisp")
    (description
      "Documentation at https://melpa.org/#/elisp-def")
    (license #f)))

(define-public emacs-elisp-demos
  (package
    (name "emacs-elisp-demos")
    (version "20230726.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/elisp-demos.git")
               (commit
                 "8d0cd806b109076e6c4383edf59dbab9435dc5dc")))
        (sha256
          (base32
            "1yy9gsm16zss7z9prd21ag2dij186r9jpwza463vqd93s2rivzkx"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.org")))
    (home-page
      "https://github.com/xuchunyang/elisp-demos")
    (synopsis "Elisp API Demos")
    (description
      "Documentation at https://melpa.org/#/elisp-demos")
    (license #f)))

(define-public emacs-elisp-depend
  (package
    (name "emacs-elisp-depend")
    (version "20190325.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/elisp-depend.git")
               (commit
                 "6679da9a6be5a845bb4804224c8394a9bc62168f")))
        (sha256
          (base32
            "09xbrk1li76fwa85kvd5xpr0zswrkh51p7a62sb8g422wpaqxiwx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Parse depend libraries of elisp file.")
    (description
      "Documentation at https://melpa.org/#/elisp-depend")
    (license #f)))

(define-public emacs-elisp-depmap
  (package
    (name "emacs-elisp-depmap")
    (version "20220223.1131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/elisp-depmap.el.git")
               (commit
                 "15909462e3f7daf445d3cecf402ee16c7e3263ed")))
        (sha256
          (base32
            "0l08xy83b3avjjaydys7f25rr0l4ifh6awl8dyy6ww6wvrz7sd4c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://gitlab.com/mtekman/elisp-depmap.el")
    (synopsis
      "Generate an elisp dependency map in graphviz")
    (description
      "Documentation at https://melpa.org/#/elisp-depmap")
    (license #f)))

(define-public emacs-elisp-docstring-mode
  (package
    (name "emacs-elisp-docstring-mode")
    (version "20170304.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/elisp-docstring-mode.git")
               (commit
                 "f512e509dd690f65133e55563ebbfd2dede5034f")))
        (sha256
          (base32
            "0al8m75p359h4n82rf0dsl22qfdg9cwwywn5pn7x6gb96c7qrqaa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing elisp docstrings.")
    (description
      "Documentation at https://melpa.org/#/elisp-docstring-mode")
    (license #f)))

(define-public emacs-elisp-format
  (package
    (name "emacs-elisp-format")
    (version "20160508.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/elisp-format.git")
               (commit
                 "03cc293eb2f78ec58fc1d84279af06816a04b979")))
        (sha256
          (base32
            "17l2xsixx3p93dmx9jsg0a3xqdg19nwp1di2pymlg41pw0kdf3x3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Yuki-Inoue/elisp-format")
    (synopsis "Format elisp code")
    (description
      "Documentation at https://melpa.org/#/elisp-format")
    (license #f)))

(define-public emacs-elisp-lint
  (package
    (name "emacs-elisp-lint")
    (version "20220419.252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/elisp-lint.git")
               (commit
                 "c5765abf75fd1ad22505b349ae1e6be5303426c2")))
        (sha256
          (base32
            "13g3nknb3rdq941avrjczvaa75jv7mdln4i65rwhz0nyh2sd6jnd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-package-lint))
    (home-page
      "http://github.com/gonewest818/elisp-lint/")
    (synopsis "Basic linting for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/elisp-lint")
    (license #f)))

(define-public emacs-elisp-refs
  (package
    (name "emacs-elisp-refs")
    (version "20230920.201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/elisp-refs.git")
               (commit
                 "541a064c3ce27867872cf708354a65d83baf2a6d")))
        (sha256
          (base32
            "1hgg66cxrv7iaj5dskl7f1a165xc01d9lj5gihgb37pk5gahm4jn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (arguments
      '(#:files
        (:defaults (:exclude "elisp-refs-bench.el"))))
    (home-page "unspecified")
    (synopsis
      "find callers of elisp functions or macros")
    (description
      "Documentation at https://melpa.org/#/elisp-refs")
    (license #f)))

(define-public emacs-elisp-sandbox
  (package
    (name "emacs-elisp-sandbox")
    (version "20131116.1842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joelmccracken/elisp-sandbox.git")
               (commit
                 "d894d68934ef09c42f72ac4e1173a0bedc23f139")))
        (sha256
          (base32
            "0r70axda1piwxznksygby9vid49q4lzjwcrhx7gl5midjs961531"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("elisp-sandbox.el")))
    (home-page
      "https://github.com/joelmccracken/elisp-sandbox")
    (synopsis
      "Evaluate EmacsLisp expressions in a sandbox")
    (description
      "Documentation at https://melpa.org/#/elisp-sandbox")
    (license #f)))

(define-public emacs-elisp-slime-nav
  (package
    (name "emacs-elisp-slime-nav")
    (version "20210510.528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/elisp-slime-nav.git")
               (commit
                 "8588d80d414aee1fafce5b9da0e913612ee0bcdd")))
        (sha256
          (base32
            "0bpa0wv2qbll34bvdm31w541zavad6h344csa160z6da3ksihs2i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/elisp-slime-nav")
    (synopsis
      "Make M-. and M-, work in elisp like they do in slime")
    (description
      "Documentation at https://melpa.org/#/elisp-slime-nav")
    (license #f)))

(define-public emacs-elixir-mode
  (package
    (name "emacs-elixir-mode")
    (version "20230626.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elixir-editors/emacs-elixir.git")
               (commit
                 "00d6580a040a750e019218f9392cf9a4c2dac23a")))
        (sha256
          (base32
            "0xqwlahy2m5b3h7jx0ksy970clqm253mn87jhq9xvbggvbvczp6l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/elixir-editors/emacs-elixir")
    (synopsis "Major mode for editing Elixir files")
    (description
      "Documentation at https://melpa.org/#/elixir-mode")
    (license #f)))

(define-public emacs-elixir-ts-mode
  (package
    (name "emacs-elixir-ts-mode")
    (version "20231025.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wkirschbaum/elixir-ts-mode.git")
               (commit
                 "cb536ff3e70b70004687bbf583757f6929ce0238")))
        (sha256
          (base32
            "1x55zig1jj8qiarhv6hzmam96jzafwlnsanjq3jqnl5rybr8nsxy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-heex-ts-mode))
    (home-page
      "https://github.com/wkirschbaum/elixir-ts-mode")
    (synopsis
      "Major mode for Elixir with tree-sitter support")
    (description
      "Documentation at https://melpa.org/#/elixir-ts-mode")
    (license #f)))

(define-public emacs-elixir-yasnippets
  (package
    (name "emacs-elixir-yasnippets")
    (version "20150417.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hisea/elixir-yasnippets.git")
               (commit
                 "980ca7626c14ef0573bec0035ec7942796062783")))
        (sha256
          (base32
            "1sdq4372i19wdxpdp3347a1rf5zf5w6sa0da6lr511m7ri0lj6hd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for Elixir")
    (description
      "Documentation at https://melpa.org/#/elixir-yasnippets")
    (license #f)))

(define-public emacs-ellocate
  (package
    (name "emacs-ellocate")
    (version "20200112.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/ellocate.git")
               (commit
                 "81405082f68f0577c9f176d3d4f034a7142aba59")))
        (sha256
          (base32
            "0amzbazg53956h1h5ppxd9psr1d1fwvlpm27kpfvhw5ipqzp3ws4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page "https://github.com/walseb/ellocate")
    (synopsis
      "The locate command reimplemented in Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ellocate")
    (license #f)))

(define-public emacs-elm-mode
  (package
    (name "emacs-elm-mode")
    (version "20230315.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcollard/elm-mode.git")
               (commit
                 "699841865e1bd5b7f2077baa7121510b6bcad3c7")))
        (sha256
          (base32
            "1rbl42hv5b41sqr98p9brckn6pa8wx6smnhcv1bmmyb3cxam79c2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-reformatter))
    (arguments '(#:files (:defaults "elm.tags")))
    (home-page
      "https://github.com/jcollard/elm-mode")
    (synopsis "Major mode for Elm")
    (description
      "Documentation at https://melpa.org/#/elm-mode")
    (license #f)))

(define-public emacs-elm-test-runner
  (package
    (name "emacs-elm-test-runner")
    (version "20230905.331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juanedi/elm-test-runner.git")
               (commit
                 "b664e50a4c849f5f2e2f434fc01718da10515612")))
        (sha256
          (base32
            "15j2sdp90s8fww0w0f166y2lilnp6yc1x3s4lw1vfyyvjgrm0mzp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juanedi/elm-test-runner")
    (synopsis
      "Enhanced support for running elm-test")
    (description
      "Documentation at https://melpa.org/#/elm-test-runner")
    (license #f)))

(define-public emacs-elm-yasnippets
  (package
    (name "emacs-elm-yasnippets")
    (version "20160401.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/elm-yasnippets.git")
               (commit
                 "45a11a0cef0c36633fb3477d3dc4167e82779ba4")))
        (sha256
          (base32
            "1zb5yra6znkr7yaq6wqlmlr054wkv9cy1dih8h4j2gp2wnfwg968"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for Elm")
    (description
      "Documentation at https://melpa.org/#/elm-yasnippets")
    (license #f)))

(define-public emacs-elmacro
  (package
    (name "emacs-elmacro")
    (version "20210716.639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/elmacro.git")
               (commit
                 "d2e05012cee4f54fab6d8d8d6aced6e5eeef4f31")))
        (sha256
          (base32
            "1mmhgl85880bhhwibf9ksifghdc7w22vrhpg8y8rvpjh91fdg0lz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://github.com/Silex/elmacro")
    (synopsis
      "Convert keyboard macros to emacs lisp")
    (description
      "Documentation at https://melpa.org/#/elmacro")
    (license #f)))

(define-public emacs-elmine
  (package
    (name "emacs-elmine")
    (version "20200520.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/elmine.git")
               (commit
                 "c78cc8705c2dffbf649b858f02b5028225943482")))
        (sha256
          (base32
            "05z9v3lcc0mm40k0y08v8mhnlxb4krlgj6zghfavwwz6nhxn61g3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("elmine.el")))
    (home-page "http://github.com/leoc/elmine")
    (synopsis "Redmine API access via elisp.")
    (description
      "Documentation at https://melpa.org/#/elmine")
    (license #f)))

(define-public emacs-elmpd
  (package
    (name "emacs-elmpd")
    (version "20210904.1340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sp1ff/elmpd.git")
               (commit
                 "c9e413fcb6c526c86e1a64d45c7ea94aceca4e6e")))
        (sha256
          (base32
            "1vxdavimnd34ivkx40xnnr472b94yz5l12g9xi4i21p1x0kqqhwp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sp1ff/elmpd")
    (synopsis
      "A tight, ergonomic, async client library for mpd")
    (description
      "Documentation at https://melpa.org/#/elmpd")
    (license #f)))

(define-public emacs-elnode
  (package
    (name "emacs-elnode")
    (version "20190702.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/elnode.git")
               (commit
                 "305c532b6e59f58c4afcfb76466dbfbdc4e58b9c")))
        (sha256
          (base32
            "1214216wrdhfw3lbf59vnddk28hi4g3s1ksdi5walksihd3gh7my"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web
            emacs-dash
            emacs-noflet
            emacs-s
            emacs-creole
            emacs-fakir
            emacs-db
            emacs-kv))
    (arguments '(#:files ("*")))
    (home-page "unspecified")
    (synopsis "The Emacs webserver.")
    (description
      "Documentation at https://melpa.org/#/elnode")
    (license #f)))

(define-public emacs-elog
  (package
    (name "emacs-elog")
    (version "20221207.643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/elog.git")
               (commit
                 "e171d0ff0a21011124204d77111e5992b50b7007")))
        (sha256
          (base32
            "0ikaf8cak6m9rm78hnfd4bh3hx6vrm1307dggxxsz3862kcwj5aw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "logging library extended from logito")
    (description
      "Documentation at https://melpa.org/#/elog")
    (license #f)))

(define-public emacs-elogcat
  (package
    (name "emacs-elogcat")
    (version "20230121.459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/youngker/elogcat.el.git")
               (commit
                 "f2f19d7ab6b77b8fec55cb67524df629fe967891")))
        (sha256
          (base32
            "0fwl14xqnxq5d4a9wk0p1xvfkmff5inwmz2v1s8n7w1sy29zslrn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis "logcat interface")
    (description
      "Documentation at https://melpa.org/#/elogcat")
    (license #f)))

(define-public emacs-eloud
  (package
    (name "emacs-eloud")
    (version "20190706.1707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smythp/eloud.git")
               (commit
                 "b8f4af1f652268d73281de91fb333b5984970847")))
        (sha256
          (base32
            "0sdzn8546ww3x4q4c9h69i9wdr51mjq19vi6r3bbba8iwl2rf67w"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/smythp/eloud")
    (synopsis
      "A lightweight, interactive screen reader")
    (description
      "Documentation at https://melpa.org/#/eloud")
    (license #f)))

(define-public emacs-elpa-audit
  (package
    (name "emacs-elpa-audit")
    (version "20141023.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/elpa-audit.git")
               (commit
                 "727da50e626977351aff2675b6540a36818bbbe6")))
        (sha256
          (base32
            "0wlhdzsrlj266jfvp925zrgzg2mxfba93klgky0hc8zialmmb50b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/elpa-audit")
    (synopsis
      "Handy functions for inspecting and comparing package archives")
    (description
      "Documentation at https://melpa.org/#/elpa-audit")
    (license #f)))

(define-public emacs-elpa-clone
  (package
    (name "emacs-elpa-clone")
    (version "20230808.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dochang/elpa-clone.git")
               (commit
                 "dfbb68ac183b8c3e6e370c45032790ed7cf52165")))
        (sha256
          (base32
            "0lvwa14i1s9dhrpv35gqw3ra5bl006km0k2ygs8issy6vy9y3jll"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dochang/elpa-clone")
    (synopsis "Clone ELPA archive")
    (description
      "Documentation at https://melpa.org/#/elpa-clone")
    (license #f)))

(define-public emacs-elpa-deploy
  (package
    (name "emacs-elpa-deploy")
    (version "20191022.718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/elpa-deploy.git")
               (commit
                 "f5126a2da1e0e52981fad9c12028814be80328c2")))
        (sha256
          (base32
            "0s1cv983cgz8iysjllqbpbq80bcmsynqb6d3c8z177xqvvr4zaw8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/oitofelix/elpa-deploy")
    (synopsis "ELPA deployment library")
    (description
      "Documentation at https://melpa.org/#/elpa-deploy")
    (license #f)))

(define-public emacs-elpa-mirror
  (package
    (name "emacs-elpa-mirror")
    (version "20230208.1148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/elpa-mirror.git")
               (commit
                 "9d7cfbf72ef8c7cd014c91e5bb3d8fbebda56140")))
        (sha256
          (base32
            "0lw018bn5a6z8pxzqscs196l8k18m1m9p0p6amr3n27qmf6fp3vw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/elpa-mirror")
    (synopsis
      "Create local package repository from installed packages")
    (description
      "Documentation at https://melpa.org/#/elpa-mirror")
    (license #f)))

(define-public emacs-elpher
  (package
    (name "emacs-elpher")
    (version "20230505.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://thelambdalab.xyz/git/elpher.git")
               (commit
                 "81f2883614c303184116449ec3583ef5c136ec2f")))
        (sha256
          (base32
            "0cxzv9nx5vshf45r7msaqnq8h7xwi4kd8pb3na3dljlrhwvgdrk6"))))
    (build-system melpa-build-system)
    (home-page "https://thelambdalab.xyz/elpher")
    (synopsis "A friendly gopher and gemini client")
    (description
      "Documentation at https://melpa.org/#/elpher")
    (license #f)))

(define-public emacs-elpl
  (package
    (name "emacs-elpl")
    (version "20220328.316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/elpl.git")
               (commit
                 "501871ab543b9967bfe87a8a82f83ab96b7f909e")))
        (sha256
          (base32
            "0yvgq0dllssrbln0c159g02p740r9dhxgz7jyswf7042d8j7lcaf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/twlz0ne/elpl")
    (synopsis "Emacs Lisp REPL")
    (description
      "Documentation at https://melpa.org/#/elpl")
    (license #f)))

(define-public emacs-elpy
  (package
    (name "emacs-elpy")
    (version "20230803.1455")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/elpy.git")
               (commit
                 "7ff8ffa918411887d165764f7a5a12bc46646e73")))
        (sha256
          (base32
            "0lh8w5a1abxaa7lf1c4yzgr0sh9szcwdnwd8w2004hv6mrcmyqc6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-company
            emacs-highlight-indentation
            emacs-pyvenv
            emacs-yasnippet
            emacs-s))
    (arguments
      '(#:files ("*.el" "NEWS.rst" "snippets" "elpy")))
    (home-page
      "https://github.com/jorgenschaefer/elpy")
    (synopsis "Emacs Python Development Environment")
    (description
      "Documentation at https://melpa.org/#/elpy")
    (license #f)))

(define-public emacs-elpygen
  (package
    (name "emacs-elpygen")
    (version "20171225.1736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vkazanov/elpygen.git")
               (commit
                 "21929c997a05968f9eefe52b85a76ceaab3b0d81")))
        (sha256
          (base32
            "093ck4dkdvbgafb1bmkmszg1ba81ns5kjbk2iq2b5p9dvfcjjr3k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (home-page "https://github.com/vkazanov/elpygen")
    (synopsis
      "Generate a Python function/method using a symbol under point")
    (description
      "Documentation at https://melpa.org/#/elpygen")
    (license #f)))

(define-public emacs-elquery
  (package
    (name "emacs-elquery")
    (version "20220331.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/elquery.git")
               (commit
                 "38f3bd41096cb270919b06095da0b9ac1add4598")))
        (sha256
          (base32
            "169i8nd0iwapn2r9grni40qcgzkwsa7267c2z1cdwmwlb5whqs34"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/AdamNiederer/elquery")
    (synopsis "The HTML library for elisp")
    (description
      "Documentation at https://melpa.org/#/elquery")
    (license #f)))

(define-public emacs-elsa
  (package
    (name "emacs-elsa")
    (version "20230621.1005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-elsa/Elsa.git")
               (commit
                 "f719e2404ab6f3323df9341751469cb2e413e013")))
        (sha256
          (base32
            "1098li76wz3g9zdmrl65a93ba39dqd3dqmnazs477bmyjfc6lxyh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-trinary
            emacs-f
            emacs-dash
            emacs-lsp-mode
            emacs-ansi
            emacs-async
            emacs-lgr))
    (arguments '(#:files (:defaults "bin")))
    (home-page "https://github.com/emacs-elsa/Elsa")
    (synopsis "Emacs Lisp Static Analyser")
    (description
      "Documentation at https://melpa.org/#/elsa")
    (license #f)))

(define-public emacs-elscreen
  (package
    (name "emacs-elscreen")
    (version "20181009.451")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/elscreen.git")
               (commit
                 "cc58337faf5ba1eae7e87f75f6ff3758675688f2")))
        (sha256
          (base32
            "15kffci7qlhjwz1rlr0zg0z9rq0vlsxy295dvg96wiiz4fvs4jk2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/knu/elscreen")
    (synopsis "Emacs window session manager")
    (description
      "Documentation at https://melpa.org/#/elscreen")
    (license #f)))

(define-public emacs-elscreen-buffer-group
  (package
    (name "emacs-elscreen-buffer-group")
    (version "20200109.2338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeffgran/elscreen-buffer-group.git")
               (commit
                 "b48e71d4782adfeb2958f227d78c04164d26e4bd")))
        (sha256
          (base32
            "13wfnkg42k1fk1dbf7zspxfp116xm1z4j6pc82wk8lz5k5xjlpzq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elscreen))
    (home-page
      "https://github.com/jeffgran/elscreen-buffer-group")
    (synopsis "elscreen buffer group")
    (description
      "Documentation at https://melpa.org/#/elscreen-buffer-group")
    (license #f)))

(define-public emacs-elscreen-fr
  (package
    (name "emacs-elscreen-fr")
    (version "20160920.953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/elscreen-fr.git")
               (commit
                 "6dc77e1d3f17b3f76da5ccf92b715572aa55fb85")))
        (sha256
          (base32
            "18d4mz6sk1zvcl80115fy0ar358dqkwb3khgxsn71a67yxg9db15"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elscreen))
    (home-page
      "http://github.com/rocher/elscreen-fr")
    (synopsis "Use frame title as screen tab")
    (description
      "Documentation at https://melpa.org/#/elscreen-fr")
    (license #f)))

(define-public emacs-elscreen-mew
  (package
    (name "emacs-elscreen-mew")
    (version "20160504.1835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/elscreen-mew.git")
               (commit
                 "c90a23441d836da14a1cb12788432308ba58e2b6")))
        (sha256
          (base32
            "167kgbnh5q3pqirv0f7wpjn7yc76k8mz9qx45i7d4scmx8952d2g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elscreen))
    (home-page
      "https://github.com/masutaka/elscreen-mew")
    (synopsis "ElScreen Add-On for Mew")
    (description
      "Documentation at https://melpa.org/#/elscreen-mew")
    (license #f)))

(define-public emacs-elscreen-multi-term
  (package
    (name "emacs-elscreen-multi-term")
    (version "20200417.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wamei/elscreen-multi-term.git")
               (commit
                 "4ea89bae0444d9d4377515929f76cb3e98140f1f")))
        (sha256
          (base32
            "0j5dpikjxwn1679ndy894g55qm9hs0n65lqyxx483h584nqxsdkg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elscreen emacs-multi-term))
    (home-page "unspecified")
    (synopsis "Multi term for elscreen")
    (description
      "Documentation at https://melpa.org/#/elscreen-multi-term")
    (license #f)))

(define-public emacs-elscreen-separate-buffer-list
  (package
    (name "emacs-elscreen-separate-buffer-list")
    (version "20200807.1324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wamei/elscreen-separate-buffer-list.git")
               (commit
                 "88d8850108947949431425a2d938a09d941454e8")))
        (sha256
          (base32
            "0c18w11wy3bnxhf109dbr01fcv3y9fg4jx5nkjx2gaf0kl0d7nfi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elscreen))
    (home-page "unspecified")
    (synopsis
      "Separate buffer list manager for elscreen")
    (description
      "Documentation at https://melpa.org/#/elscreen-separate-buffer-list")
    (license #f)))

(define-public emacs-elscreen-tab
  (package
    (name "emacs-elscreen-tab")
    (version "20230810.2114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki-s/elscreen-tab.git")
               (commit
                 "21c1f3d3ec47f8b5e31bb0b26b4f60864e49e966")))
        (sha256
          (base32
            "10myk53igq9246166b2dvk2m3qvnbsbi9m16bs7fibwgmbrspx77"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elscreen emacs-dash))
    (home-page
      "https://github.com/aki-s/elscreen-tab")
    (synopsis
      "Minor mode to display tabs of elscreen in a dedicated buffer")
    (description
      "Documentation at https://melpa.org/#/elscreen-tab")
    (license #f)))

(define-public emacs-elune-theme
  (package
    (name "emacs-elune-theme")
    (version "20231009.1709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hsnovel/elune-theme.git")
               (commit
                 "4d0217a7601e34fa84fc174ccf7945cd598d4135")))
        (sha256
          (base32
            "0xgnyyd1dw9xjxf3ih8s03m9is2i3lgxjqnrkk7vmhdyriw5djbi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xcatalyst/elune-theme")
    (synopsis "Elune theme")
    (description
      "Documentation at https://melpa.org/#/elune-theme")
    (license #f)))

(define-public emacs-elvish-mode
  (package
    (name "emacs-elvish-mode")
    (version "20180809.1612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ALSchwalm/elvish-mode.git")
               (commit
                 "a13fcaf209d803e2e450ca2bf80dea94b40a0141")))
        (sha256
          (base32
            "1zcmqi2jmg5mah6n4i10gdnr9lwmap1iblbp23bks20cmv64q9hn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ALSchwalm/elvish-mode")
    (synopsis "Defines a major mode for Elvish")
    (description
      "Documentation at https://melpa.org/#/elvish-mode")
    (license #f)))

(define-public emacs-elwm
  (package
    (name "emacs-elwm")
    (version "20150817.1007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/elwm.git")
               (commit
                 "c33b183f006ad476c3a44dab316f580f8b369930")))
        (sha256
          (base32
            "1k7npf93xbmrsq607x8zlgrpzqvplgia3ixz5w1lr1jlv1m2m8x2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/Fuco1/elwm")
    (synopsis
      "Minimalistic window manager for emacs")
    (description
      "Documentation at https://melpa.org/#/elwm")
    (license #f)))

(define-public emacs-elx
  (package
    (name "emacs-elx")
    (version "20230511.2113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/elx.git")
               (commit
                 "f3dfcb41c6471b8150cc19cea5ff96fe1321f5a1")))
        (sha256
          (base32
            "1m01fmhxgqrk22llwwafyg3a29h5bhrbdv9mpf6yyqdm2f37h3yb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-llama))
    (home-page
      "https://github.com/emacscollective/elx")
    (synopsis
      "Extract information from Emacs Lisp libraries")
    (description
      "Documentation at https://melpa.org/#/elx")
    (license #f)))

(define-public emacs-emacs-everywhere
  (package
    (name "emacs-everywhere")
    (version "20230706.1152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tecosaur/emacs-everywhere.git")
               (commit
                 "44775589ad050134adf433885be0a94398055630")))
        (sha256
          (base32
            "08r91hq82j44lksv23bdm0gxmb5xq4j70dr8z0lzbzvwwfgph8hy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tecosaur/emacs-everywhere")
    (synopsis
      "System-wide popup windows for quick edits")
    (description
      "Documentation at https://melpa.org/#/emacs-everywhere")
    (license #f)))

(define-public emacs-emacsc
  (package
    (name "emacs-emacsc")
    (version "20230326.1852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/emacsc.git")
               (commit
                 "b4afd616c4ef160c58fc9a9682d3431b30a9d434")))
        (sha256
          (base32
            "0sl7kxdh4bh9irdq1x0w06g0wcn0d4j72dksrl8criq4q2srj4wv"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page "https://github.com/knu/emacsc")
    (synopsis "helper for emacsc(1)")
    (description
      "Documentation at https://melpa.org/#/emacsc")
    (license #f)))

(define-public emacs-emacsist-view
  (package
    (name "emacs-emacsist-view")
    (version "20160426.1223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/emacsist-view.git")
               (commit
                 "f67761259ed779a9bc95c9a4e0474522990c5c6b")))
        (sha256
          (base32
            "1vhs9725fyl2j65lk014qz76iv4hsvyim06361h4lai634hp7ck6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/emacsist-view")
    (synopsis "Mode for viewing emacsist.com")
    (description
      "Documentation at https://melpa.org/#/emacsist-view")
    (license #f)))

(define-public emacs-emacsql
  (package
    (name "emacs-emacsql")
    (version "20230417.1448")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "sqlite")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis "High-level SQL database front-end")
    (description
      "Documentation at https://melpa.org/#/emacsql")
    (license #f)))

(define-public emacs-emacsql-mysql
  (package
    (name "emacs-emacsql-mysql")
    (version "20230225.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments '(#:files ("emacsql-mysql.el")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis "EmacSQL back-end for MySQL")
    (description
      "Documentation at https://melpa.org/#/emacsql-mysql")
    (license #f)))

(define-public emacs-emacsql-pg
  (package
    (name "emacs-emacsql-pg")
    (version "20230224.1201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql emacs-pg))
    (arguments '(#:files ("emacsql-pg.el")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis
      "EmacSQL back-end for PostgreSQL via pg")
    (description
      "Documentation at https://melpa.org/#/emacsql-pg")
    (license #f)))

(define-public emacs-emacsql-psql
  (package
    (name "emacs-emacsql-psql")
    (version "20230225.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments '(#:files ("emacsql-psql.el")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis
      "EmacSQL back-end for PostgreSQL via psql")
    (description
      "Documentation at https://melpa.org/#/emacsql-psql")
    (license #f)))

(define-public emacs-emacsql-sqlite
  (package
    (name "emacs-emacsql-sqlite")
    (version "20230225.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments
      '(#:files ("emacsql-sqlite.el" "sqlite")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis "EmacSQL back-end for SQLite")
    (description
      "Documentation at https://melpa.org/#/emacsql-sqlite")
    (license #f)))

(define-public emacs-emacsql-sqlite-builtin
  (package
    (name "emacs-emacsql-sqlite-builtin")
    (version "20230409.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emacsql))
    (arguments
      '(#:files ("emacsql-sqlite-builtin.el")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis
      "EmacSQL back-end for SQLite using builtin support")
    (description
      "Documentation at https://melpa.org/#/emacsql-sqlite-builtin")
    (license #f)))

(define-public emacs-emacsql-sqlite-module
  (package
    (name "emacs-emacsql-sqlite-module")
    (version "20230409.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/emacsql.git")
               (commit
                 "64012261f65fcdd7ea137d1973ef051af1dced42")))
        (sha256
          (base32
            "1x9r0pg2dv6n8dn1lwrvs9xfkxskr5pgw0sigspfqj3ycbpyz1ks"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emacsql emacs-sqlite3))
    (arguments
      '(#:files ("emacsql-sqlite-module.el")))
    (home-page "https://github.com/magit/emacsql")
    (synopsis
      "EmacSQL back-end for SQLite using a module")
    (description
      "Documentation at https://melpa.org/#/emacsql-sqlite-module")
    (license #f)))

(define-public emacs-emacsshot
  (package
    (name "emacs-emacsshot")
    (version "20191206.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/emacsshot.git")
               (commit
                 "fe958b11056f3c671ebdd604d5aa574323284ca5")))
        (sha256
          (base32
            "0zg52b3hl0rp9hjz04546kngssxs0l64dm01bwp9hapy7pichbci"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/emacsshot")
    (synopsis
      "Snapshot a frame or window from within")
    (description
      "Documentation at https://melpa.org/#/emacsshot")
    (license #f)))

(define-public emacs-emamux
  (package
    (name "emacs-emamux")
    (version "20200315.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/emamux.git")
               (commit
                 "6172131d78038f0b1490e24bac60534bf4ad3b30")))
        (sha256
          (base32
            "1cv9b15lj2663aik9s0s2bj05vv4zfzz2w7wjbj6s5vlnf5byfnl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-emamux")
    (synopsis "Interact with tmux")
    (description
      "Documentation at https://melpa.org/#/emamux")
    (license #f)))

(define-public emacs-emamux-ruby-test
  (package
    (name "emacs-emamux-ruby-test")
    (version "20130812.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/emamux-ruby-test.git")
               (commit
                 "23b73c650573b340351a919da3da416acfc2ac84")))
        (sha256
          (base32
            "1idsvilsvlxh72waalhl8vrsmh0vfvz56qcv56fc2c0pb1i90icn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emamux emacs-projectile))
    (arguments '(#:files ("emamux-ruby-test.el")))
    (home-page
      "https://github.com/syohex/emamux-ruby-test")
    (synopsis "Ruby test with emamux")
    (description
      "Documentation at https://melpa.org/#/emamux-ruby-test")
    (license #f)))

(define-public emacs-emaps
  (package
    (name "emacs-emaps")
    (version "20200508.1759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/emaps.git")
               (commit
                 "7c561f3ded2015ed3774e5784059d6601082743e")))
        (sha256
          (base32
            "0x4i2c493zb7cf0cnixsxiwl409faljd5sk05flkq88wjm176dcm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/GuiltyDolphin/emaps")
    (synopsis "Utilities for working with keymaps")
    (description
      "Documentation at https://melpa.org/#/emaps")
    (license #f)))

(define-public emacs-embark
  (package
    (name "emacs-embark")
    (version "20231105.133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/embark.git")
               (commit
                 "8c57c361d686d352f22bd570fee4976f6ab42bcc")))
        (sha256
          (base32
            "0cnv6lzbrl8pa8p4v3llm1alas5p1zs32nndsi626l2aqbjyfx8z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files
        ("embark.el" "embark-org.el" "embark.texi")))
    (home-page "https://github.com/oantolin/embark")
    (synopsis
      "Conveniently act on minibuffer completions")
    (description
      "Documentation at https://melpa.org/#/embark")
    (license #f)))

(define-public emacs-embark-consult
  (package
    (name "emacs-embark-consult")
    (version "20230919.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/embark.git")
               (commit
                 "b22bcc42c70e75e5c7cb479eb830ecebda0b8cc3")))
        (sha256
          (base32
            "16vgg0xfv1xpkkwizcim1xp3ns9dzs4cln2d2lir4lyid8hp4x2p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-embark emacs-consult))
    (arguments '(#:files ("embark-consult.el")))
    (home-page "https://github.com/oantolin/embark")
    (synopsis "Consult integration for Embark")
    (description
      "Documentation at https://melpa.org/#/embark-consult")
    (license #f)))

(define-public emacs-embark-vc
  (package
    (name "emacs-embark-vc")
    (version "20230212.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elken/embark-vc.git")
               (commit
                 "070666b0de8fc2832aa2510b9ba492565cb5e35e")))
        (sha256
          (base32
            "17hlwxxp5waz0n2bgn4755jc5c8z8xkx0y0ln9hkg565d35ms5wc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-embark emacs-forge emacs-compat))
    (home-page "https://github.com/elken/embark-vc")
    (synopsis
      "Embark actions for various version control integrations")
    (description
      "Documentation at https://melpa.org/#/embark-vc")
    (license #f)))

(define-public emacs-ember-mode
  (package
    (name "emacs-ember-mode")
    (version "20200208.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/madnificent/ember-mode.git")
               (commit
                 "a587c423041b2fcb065fd5b6a03b2899b764e462")))
        (sha256
          (base32
            "0x5fnrflbgafwcqr6v0jj6522j2j086s7msh2mr6yysmrfjhx2zk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Ember navigation mode for emacs")
    (description
      "Documentation at https://melpa.org/#/ember-mode")
    (license #f)))

(define-public emacs-ember-yasnippets
  (package
    (name "emacs-ember-yasnippets")
    (version "20160526.1658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ronco/ember-yasnippets.el.git")
               (commit
                 "3b5bd01569646237bf1b540d097e12f9118b67f4")))
        (sha256
          (base32
            "0g7hp1aq0zznbhd234dpbblnagn34fxdasc5v4lfhm5ykw5xyb5x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "unspecified")
    (synopsis "Snippets for Ember.js development")
    (description
      "Documentation at https://melpa.org/#/ember-yasnippets")
    (license #f)))

(define-public emacs-embrace
  (package
    (name "emacs-embrace")
    (version "20231027.419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/embrace.el.git")
               (commit
                 "c7e748603151d7d91c237fd2d9cdf56e9f3b1ea8")))
        (sha256
          (base32
            "1c6fbkw1hl9bhdy62g782js8i9kgjr0pr132mpga12jd4cwf8mmz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis
      "Add/Change/Delete pairs based on `expand-region'")
    (description
      "Documentation at https://melpa.org/#/embrace")
    (license #f)))

(define-public emacs-emidje
  (package
    (name "emacs-emidje")
    (version "20190209.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nubank/emidje.git")
               (commit
                 "7e92f053964d925c97dc8cca8d4d70a3030021db")))
        (sha256
          (base32
            "0xg2bw9vzwvkx6xh4k2n6qhyhqg5iifl6aa0s7svvdnw35x00hv2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-magit-popup))
    (home-page "https://github.com/nubank/emidje")
    (synopsis
      "Test runner and report viewer for Midje")
    (description
      "Documentation at https://melpa.org/#/emidje")
    (license #f)))

(define-public emacs-emmet-mode
  (package
    (name "emacs-emmet-mode")
    (version "20221111.329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smihica/emmet-mode.git")
               (commit
                 "63b6932603184956b5ea8919036d2b307b48d7fd")))
        (sha256
          (base32
            "1g0fvp98w23dsyi75idyv4jf90635z80hchd1k13pychla6bw76j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/smihica/emmet-mode")
    (synopsis "Unofficial Emmet's support for emacs")
    (description
      "Documentation at https://melpa.org/#/emmet-mode")
    (license #f)))

(define-public emacs-emms
  (package
    (name "emacs-emms")
    (version "20231106.2235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.savannah.gnu.org/git/emms.git")
               (commit
                 "f3701eea3d0159ea9a2b44c5cce3886be73ff3df")))
        (sha256
          (base32
            "0dblq6d938hxw0y4920653qqp8m6p1g91qgg311idc5azzy3hdp0"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "doc/fdl.texi" "doc/gpl.texi"))))
    (home-page "https://www.gnu.org/software/emms/")
    (synopsis "The Emacs Multimedia System")
    (description
      "Documentation at https://melpa.org/#/emms")
    (license #f)))

(define-public emacs-emms-info-mediainfo
  (package
    (name "emacs-emms-info-mediainfo")
    (version "20131223.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/emms-info-mediainfo.git")
               (commit
                 "bce16eae9eacd38719fea62a9755225a888da59d")))
        (sha256
          (base32
            "07qbbs2i05bqndr4dxb84z50wav8ffbc56f6saw6pdx6n0sw6n6n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (arguments '(#:files ("emms-info-mediainfo.el")))
    (home-page "unspecified")
    (synopsis "Info-method for EMMS using medianfo")
    (description
      "Documentation at https://melpa.org/#/emms-info-mediainfo")
    (license #f)))

(define-public emacs-emms-mark-ext
  (package
    (name "emacs-emms-mark-ext")
    (version "20130529.327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/emms-mark-ext.git")
               (commit
                 "ec68129e3e9e469e5bf160c6a1b7030e322f3541")))
        (sha256
          (base32
            "03a7sn8pl0pnr05rmrrbw4hjyi8vpjqbvkvh0fqnij913a6qc64l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page
      "https://github.com/vapniks/emms-mark-ext")
    (synopsis
      "Extra functions for emms-mark-mode and emms-tag-edit-mode")
    (description
      "Documentation at https://melpa.org/#/emms-mark-ext")
    (license #f)))

(define-public emacs-emms-mode-line-cycle
  (package
    (name "emacs-emms-mode-line-cycle")
    (version "20160221.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/momomo5717/emms-mode-line-cycle.git")
               (commit
                 "2c2f395e484a1d345050ddd61ff5fab71a92a6bc")))
        (sha256
          (base32
            "0q80f0plch6k4lhs8c9qm3mfycfbp3kn5sjrk9zxgxwnn901y9mp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page
      "https://github.com/momomo5717/emms-mode-line-cycle")
    (synopsis
      "Display the emms mode line as a ticker")
    (description
      "Documentation at https://melpa.org/#/emms-mode-line-cycle")
    (license #f)))

(define-public emacs-emms-player-mpv-jp-radios
  (package
    (name "emacs-emms-player-mpv-jp-radios")
    (version "20180325.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/momomo5717/emms-player-mpv-jp-radios.git")
               (commit
                 "f6b37f5878c741124d5fca43c5b80af873541edd")))
        (sha256
          (base32
            "1sxzh1bhdwln7kcn07agayyhmgyrbmmhgc3f85336xybc6ljpqs8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emms emacs-emms-player-simple-mpv))
    (arguments '(#:files (:defaults "*/*.el")))
    (home-page
      "https://github.com/momomo5717/emms-player-mpv-jp-radios")
    (synopsis
      "EMMS players and stream lists of Japan radio stations")
    (description
      "Documentation at https://melpa.org/#/emms-player-mpv-jp-radios")
    (license #f)))

(define-public emacs-emms-player-simple-mpv
  (package
    (name "emacs-emms-player-simple-mpv")
    (version "20180316.1549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/momomo5717/emms-player-simple-mpv.git")
               (commit
                 "101d120ccdee1c2c213fd2f0423c858b21649c00")))
        (sha256
          (base32
            "1i6rxkm0ra0jbkkwgkwxg3vk5xfl794h1gkgnlpscynz0v94b6ll"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page
      "https://github.com/momomo5717/emms-player-simple-mpv")
    (synopsis
      "An extension of emms-player-simple.el for mpv JSON IPC")
    (description
      "Documentation at https://melpa.org/#/emms-player-simple-mpv")
    (license #f)))

(define-public emacs-emms-soundcloud
  (package
    (name "emacs-emms-soundcloud")
    (version "20131221.1145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/emms-soundcloud.git")
               (commit
                 "87e5cbf9609d1f26c24dc834fdeb78b33d453c2b")))
        (sha256
          (base32
            "0nx5bb5fjmaa1nhkbfnhd1aydqrq390x4rl1vfh11ilnf52wzzld"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page
      "http://github.com/osener/emms-soundcloud")
    (synopsis
      "EMMS source for Soundcloud audio sharing platform")
    (description
      "Documentation at https://melpa.org/#/emms-soundcloud")
    (license #f)))

(define-public emacs-emms-state
  (package
    (name "emacs-emms-state")
    (version "20211023.1942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/emms-state.el.git")
               (commit
                 "cdb3ee85369758727b3c082e4ade1ae2b559b334")))
        (sha256
          (base32
            "1gwn47nl003kwfaif3vh84p7rxfc3lilb6a3kk2hcczc5j65i13d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page
      "https://github.com/alezost/emms-state.el")
    (synopsis
      "Display track description and playing time in the mode line")
    (description
      "Documentation at https://melpa.org/#/emms-state")
    (license #f)))

(define-public emacs-emoji-cheat-sheet-plus
  (package
    (name "emacs-emoji-cheat-sheet-plus")
    (version "20200202.1412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus.git")
               (commit
                 "ffcc84d7060dfa000148e7f8be4fd6701593a74f")))
        (sha256
          (base32
            "1na7mn9pgnwf9a1fbpb5k36aczzc7506ld5xm7mqpqgwshdxk0hq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments
      '(#:files (:defaults "emoji-cheat-sheet")))
    (home-page
      "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus")
    (synopsis "emoji-cheat-sheet for emacs")
    (description
      "Documentation at https://melpa.org/#/emoji-cheat-sheet-plus")
    (license #f)))

(define-public emacs-emoji-display
  (package
    (name "emacs-emoji-display")
    (version "20140117.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikazuhiro/emoji-display.git")
               (commit
                 "bb4217f6400151a9cfa6d4524b8427f01feb5193")))
        (sha256
          (base32
            "0sh4q4sb4j58ryvvmlsx7scry9inzgv2ssa87vbyzpxq0435l229"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikazuhiro/emoji-display")
    (synopsis "emoji displaying module")
    (description
      "Documentation at https://melpa.org/#/emoji-display")
    (license #f)))

(define-public emacs-emoji-fontset
  (package
    (name "emacs-emoji-fontset")
    (version "20160726.1924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emoji-fontset.el.git")
               (commit
                 "8f159e8073b9b57a07a54b549df687424eeb98ee")))
        (sha256
          (base32
            "1hwikjy4ah1zkb4aknc9yni3d9cqgvnh5n955bdljyp0lvpvvhpr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Set font face for Emoji.")
    (description
      "Documentation at https://melpa.org/#/emoji-fontset")
    (license #f)))

(define-public emacs-emoji-github
  (package
    (name "emacs-emoji-github")
    (version "20220704.648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/emoji-github.git")
               (commit
                 "caaa3a10a9c44aba74f4964b04169b0adedeb2f9")))
        (sha256
          (base32
            "0hk872z33ghv3ppddis83q37qz2iyc3asvw67fr5sfi891hfrswk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emojify emacs-request))
    (home-page
      "https://github.com/jcs-elpa/emoji-github")
    (synopsis
      "Display list of GitHub's emoji.  (cheat sheet)")
    (description
      "Documentation at https://melpa.org/#/emoji-github")
    (license #f)))

(define-public emacs-emoji-recall
  (package
    (name "emacs-emoji-recall")
    (version "20160723.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/emoji-recall.el.git")
               (commit
                 "d9122f8fb1467309260109a1985cd14f18fdf631")))
        (sha256
          (base32
            "13ajzafm9wmddch8ipjjkv2p13fmyd0ghdr479lll5c7xff2051x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "emoji-cheat-sheet/*.png")))
    (home-page
      "https://github.com/lujun9972/emoji-recall.el")
    (synopsis
      "How many emoji can you recall from memory?")
    (description
      "Documentation at https://melpa.org/#/emoji-recall")
    (license #f)))

(define-public emacs-emojify
  (package
    (name "emacs-emojify")
    (version "20210108.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iqbalansari/emacs-emojify.git")
               (commit
                 "1b726412f19896abf5e4857d4c32220e33400b55")))
        (sha256
          (base32
            "1g8dviwmwifzjvy9rvnhr9hsxwv37ksqikqccrbjyrpcyv57z1a5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (arguments
      '(#:files (:defaults "data" "images")))
    (home-page
      "https://github.com/iqbalansari/emacs-emojify")
    (synopsis "Display emojis in Emacs")
    (description
      "Documentation at https://melpa.org/#/emojify")
    (license #f)))

(define-public emacs-emojify-logos
  (package
    (name "emacs-emojify-logos")
    (version "20180814.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mxgoldstein/emojify-logos.git")
               (commit
                 "a3e78bcbdf863092d4c9b026ac08bf7d1c7c0e8b")))
        (sha256
          (base32
            "1fhxf3nky9wlcn54q60f9254iawcccsrxw370q7cgpsrl1gj3dgp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emojify))
    (arguments '(#:files (:defaults "logos")))
    (home-page
      "https://github.com/mxgoldstein/emojify-logos")
    (synopsis "Add logos to emojify")
    (description
      "Documentation at https://melpa.org/#/emojify-logos")
    (license #f)))

(define-public emacs-empos
  (package
    (name "emacs-empos")
    (version "20151011.1916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimalik/empos.git")
               (commit
                 "7b99ad30e56937adb7e6349777e5a2045597d564")))
        (sha256
          (base32
            "0bm0cxnv7g2dzfvfhkyy16kzn6shvy9gzypiqyjj42ng54xmhs0n"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/dimalik/empos/")
    (synopsis
      "Locate bibtex citations from within emacs")
    (description
      "Documentation at https://melpa.org/#/empos")
    (license #f)))

(define-public emacs-empv
  (package
    (name "emacs-empv")
    (version "20231007.1911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/empv.el.git")
               (commit
                 "4af3b3624a4714558081d693c91602b9304e8fcb")))
        (sha256
          (base32
            "07xwxqjzah7dg62q0sz6ii8gi1aianqzp51aqql7mg8hyssjzpyj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/isamert/empv.el")
    (synopsis
      "A multimedia player/manager, YouTube interface")
    (description
      "Documentation at https://melpa.org/#/empv")
    (license #f)))

(define-public emacs-emr
  (package
    (name "emacs-emr")
    (version "20220108.548")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/emacs-refactor.git")
               (commit
                 "cac1b52932926f56d7f6d2923732d20bbd20670d")))
        (sha256
          (base32
            "06rmknnhzcm3fy1iipvryl85fcshpalz50500rrz8k3vkl2dps2i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-popup
            emacs-list-utils
            emacs-paredit
            emacs-projectile
            emacs-clang-format
            emacs-iedit))
    (home-page
      "https://github.com/Wilfred/emacs-refactor")
    (synopsis "Emacs refactoring system.")
    (description
      "Documentation at https://melpa.org/#/emr")
    (license #f)))

(define-public emacs-enclose
  (package
    (name "emacs-enclose")
    (version "20121008.1614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/enclose.el.git")
               (commit
                 "2747653e84af39017f503064bc66ed1812a77259")))
        (sha256
          (base32
            "0dz5xm05d7irh1j8iy08jk521p19cjai1kw68z2nngnyf1az7cim"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/enclose")
    (synopsis
      "Enclose cursor within punctuation pairs.")
    (description
      "Documentation at https://melpa.org/#/enclose")
    (license #f)))

(define-public emacs-encourage-mode
  (package
    (name "emacs-encourage-mode")
    (version "20151128.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/halbtuerke/encourage-mode.el.git")
               (commit
                 "99edacf2d94d168d3da0609860dc7253db7c9815")))
        (sha256
          (base32
            "0k5ns40s5nskn0zialwq96qll1v5k50lfa5xh8hxbpcamsfym6h8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/halbtuerke/encourage-mode.el")
    (synopsis "Encourages you in your work. :D")
    (description
      "Documentation at https://melpa.org/#/encourage-mode")
    (license #f)))

(define-public emacs-encrypt-region
  (package
    (name "emacs-encrypt-region")
    (version "20220802.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cgshep/encrypt-region.git")
               (commit
                 "8ff5704bc6f4c57f935a8b7680129e599bbe474f")))
        (sha256
          (base32
            "08dd1grxlbb8mlwp46z35pbvh80y68mcq351id0mz8wwxi7ivan2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cgshep/encrypt-region")
    (synopsis "Encrypts and decrypts regions")
    (description
      "Documentation at https://melpa.org/#/encrypt-region")
    (license #f)))

(define-public emacs-engine-mode
  (package
    (name "emacs-engine-mode")
    (version "20230619.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hrs/engine-mode.git")
               (commit
                 "2a3ff7098896af86106adebb90a417924cce4c47")))
        (sha256
          (base32
            "0bk2qmhn6qpmmn4w0acfl3l44l3zp1wkgks43nki2q5c7xh2g0yl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/hrs/engine-mode")
    (synopsis "Define and query search engines")
    (description
      "Documentation at https://melpa.org/#/engine-mode")
    (license #f)))

(define-public emacs-enh-ruby-mode
  (package
    (name "emacs-enh-ruby-mode")
    (version "20221011.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenspider/enhanced-ruby-mode.git")
               (commit
                 "7e76d754e1632b4fc9a024fa393c3fc837bcc86b")))
        (sha256
          (base32
            "1gc2kgvnzq6m6hswcvsd4c00xywi2phdnr121r53kvsv46avrq9z"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         ("ruby" "ruby/erm.rb" "ruby/erm_buffer.rb"))))
    (home-page
      "https://github.com/zenspider/Enhanced-Ruby-Mode")
    (synopsis "Major mode for editing Ruby files")
    (description
      "Documentation at https://melpa.org/#/enh-ruby-mode")
    (license #f)))

(define-public emacs-enlightened-theme
  (package
    (name "emacs-enlightened-theme")
    (version "20210220.2327")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/enlightened-theme-"
               version
               ".el"))
        (sha256
          (base32
            "0ag6s2lw7byllvpfhy45fxg2rqn0lg405kanw789ws5f0aw8s5gl"))))
    (build-system melpa-build-system)
    (home-page
      "https://hg.sr.ht/~slondr/enlightened")
    (synopsis "A theme based on enlightened")
    (description
      "Documentation at https://melpa.org/#/enlightened-theme")
    (license #f)))

(define-public emacs-enlive
  (package
    (name "emacs-enlive")
    (version "20170725.1417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/enlive.git")
               (commit
                 "604a8ca272b6889f114e2b5a13adb5b1dc4bae86")))
        (sha256
          (base32
            "1iwfb5hxhnp4rl3rh5yayik0xl2lg82klxkvqf29536pk8ip710m"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zweifisch/enlive")
    (synopsis
      "query html document with css selectors")
    (description
      "Documentation at https://melpa.org/#/enlive")
    (license #f)))

(define-public emacs-eno
  (package
    (name "emacs-eno")
    (version "20191013.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/eno.git")
               (commit
                 "c5c6193687c0bede1ddf507c430cf8b0a6d272d9")))
        (sha256
          (base32
            "1khi2x0v2f7kn74s5mszp4f5qsdp6v91b98y8gyzhrxic7n083q4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-edit-at-point))
    (home-page "http://github.com/enoson/eno.el")
    (synopsis
      "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion")
    (description
      "Documentation at https://melpa.org/#/eno")
    (license #f)))

(define-public emacs-enotify
  (package
    (name "emacs-enotify")
    (version "20130407.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/enotify.git")
               (commit
                 "7fd2f48ef4ff32c8f013c634ea2dd6b1d1409f80")))
        (sha256
          (base32
            "0v5p97dvzrk3j59yjc6iny71j3fdw9bb8737wnnzm098ff42dfmd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A networked notification system for emacs")
    (description
      "Documentation at https://melpa.org/#/enotify")
    (license #f)))

(define-public emacs-environ
  (package
    (name "emacs-environ")
    (version "20230518.1310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cfclrk/environ.git")
               (commit
                 "23d63c7719db2acee8a952d122f27fb9610934bc")))
        (sha256
          (base32
            "1zvz5vald52mjrxi2k42vdqjbz1gqf35vrm3zg0x4gl2hr45m27p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-s))
    (home-page "https://github.com/cfclrk/environ")
    (synopsis
      "API for environment variables and env files")
    (description
      "Documentation at https://melpa.org/#/environ")
    (license #f)))

(define-public emacs-envrc
  (package
    (name "emacs-envrc")
    (version "20231023.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/envrc.git")
               (commit
                 "4f9ae5d4d1fcb32c844b50ccda34305884d68be3")))
        (sha256
          (base32
            "1jsxdyl5sjwc2rwwg2j6ggxs7bvgsifsclqylv1lj3hjl8nhrjzj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inheritenv))
    (home-page "https://github.com/purcell/envrc")
    (synopsis
      "Support for `direnv' that operates buffer-locally")
    (description
      "Documentation at https://melpa.org/#/envrc")
    (license #f)))

(define-public emacs-eopengrok
  (package
    (name "emacs-eopengrok")
    (version "20230114.1413")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/youngker/eopengrok.el.git")
               (commit
                 "83b1695774f8bdc322e528ade9dffe9b2e93f32a")))
        (sha256
          (base32
            "16q6la89xmd084h520nf9f7306x28n60yfsngcb6pg6nz62qwvfk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-magit))
    (home-page "unspecified")
    (synopsis "opengrok interface for emacs")
    (description
      "Documentation at https://melpa.org/#/eopengrok")
    (license #f)))

(define-public emacs-epc
  (package
    (name "emacs-epc")
    (version "20140610.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-epc.git")
               (commit
                 "e1bfa5ca163273859336e3cc89b4b6460f7f8cda")))
        (sha256
          (base32
            "15nkrjgi64f829isfd6xrhl4zw8jirr8pkas7nisrbk1av868hx0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable))
    (arguments '(#:files ("epc.el" "epcs.el")))
    (home-page
      "https://github.com/kiwanami/emacs-epc")
    (synopsis "A RPC stack for the Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/epc")
    (license #f)))

(define-public emacs-epic
  (package
    (name "emacs-epic")
    (version "20170210.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/epic.git")
               (commit
                 "a41826c330eb0ea061d58a08cc861b0c4ac8ec4e")))
        (sha256
          (base32
            "0mvg52f2y3725hlzqcn2mh8jihnbg68wlqmq951sa3qfma7m40pp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page
      "https://github.com/yoshinari-nomura/epic")
    (synopsis "Evernote Picker for Cocoa Emacs")
    (description
      "Documentation at https://melpa.org/#/epic")
    (license #f)))

(define-public emacs-eping
  (package
    (name "emacs-eping")
    (version "20201027.2149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sean-hut/eping.git")
               (commit
                 "99d3a4b6973d5b09864e0af7425a61f99c19b90a")))
        (sha256
          (base32
            "0k6isn6szbwc6jc7kzfq82p8w737z7iyn2yi9aqf6j54a6xa5aka"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sean-hut/eping")
    (synopsis
      "Ping websites to check internet connectivity")
    (description
      "Documentation at https://melpa.org/#/eping")
    (license #f)))

(define-public emacs-epkg
  (package
    (name "emacs-epkg")
    (version "20231009.2058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/epkg.git")
               (commit
                 "2a002fbded9fdc51e45e4d4eb47a30becda3266c")))
        (sha256
          (base32
            "0c1ikfpkgkmlv5jgxp950b5bk3bkzdhny5mn18gl5qbpzl59igfi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-closql
            emacs-emacsql
            emacs-llama))
    (home-page
      "https://github.com/emacscollective/epkg")
    (synopsis
      "Browse the Emacsmirror package database")
    (description
      "Documentation at https://melpa.org/#/epkg")
    (license #f)))

(define-public emacs-epkg-marginalia
  (package
    (name "emacs-epkg-marginalia")
    (version "20230603.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/epkg-marginalia.git")
               (commit
                 "f5eda857a99d02aad9e89bd80c327930e815fc8a")))
        (sha256
          (base32
            "04z5xgcrl2q37fgr9bb1fwnspnn7zq5svmfkfslfmzbb3klvdkcw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-epkg
            emacs-llama
            emacs-marginalia))
    (home-page
      "https://github.com/emacscollective/epkg-marginalia")
    (synopsis
      "Show Epkg information in completion annotations")
    (description
      "Documentation at https://melpa.org/#/epkg-marginalia")
    (license #f)))

(define-public emacs-epl
  (package
    (name "emacs-epl")
    (version "20180205.2049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cask/epl.git")
               (commit
                 "78ab7a85c08222cd15582a298a364774e3282ce6")))
        (sha256
          (base32
            "0ksilx9gzdazngxfni5i632jpb1nprcxplsbhgqirs2xdl53q8v8"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/cask/epl")
    (synopsis "Emacs Package Library")
    (description
      "Documentation at https://melpa.org/#/epl")
    (license #f)))

(define-public emacs-epm
  (package
    (name "emacs-epm")
    (version "20190509.443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/epm.git")
               (commit
                 "6375ddbf93c5f25647f6ebb25b54045b3c93a5be")))
        (sha256
          (base32
            "1m0l0szrwljzsch4xj9a42nflpqfii68g8clizsjwv323h6xff4n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epl))
    (arguments '(#:files (:defaults "epm")))
    (home-page "https://github.com/xuchunyang/epm")
    (synopsis "Emacs Package Manager")
    (description
      "Documentation at https://melpa.org/#/epm")
    (license #f)))

(define-public emacs-epresent
  (package
    (name "emacs-epresent")
    (version "20160411.201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakrone/epresent.git")
               (commit
                 "6c8abedcf46ff08091fa2bba52eb905c6290057d")))
        (sha256
          (base32
            "1qa1nq63kax767gs53s75ihspirvh69l4xdm89mj57qvrbpz36z5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dakrone/epresent")
    (synopsis
      "Simple presentation mode for Emacs Org-mode")
    (description
      "Documentation at https://melpa.org/#/epresent")
    (license #f)))

(define-public emacs-eproject
  (package
    (name "emacs-eproject")
    (version "20180312.1642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrockway/eproject.git")
               (commit
                 "068218d2cf2138cb2e8fc29b57e773a0097a7e8b")))
        (sha256
          (base32
            "110b8gn47m5kafmvxr8q9zzrj0pdn6ikw9xsx4z1rc58i02jy307"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments
      '(#:files
        ("eproject.el"
         "eproject-extras.el"
         "lang/*.el"
         "contrib/*.el")))
    (home-page "unspecified")
    (synopsis
      "assign files to projects, programatically")
    (description
      "Documentation at https://melpa.org/#/eproject")
    (license #f)))

(define-public emacs-equake
  (package
    (name "emacs-equake")
    (version "20220627.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacsomancer/equake.git")
               (commit
                 "7aa2e1715e6ea286b08bb446d2d9915afa0fdf03")))
        (sha256
          (base32
            "11wag6sgfr62yj4zjr9n71kxd3kfa105l0rpbag47qmac2wsg7h5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://gitlab.com/emacsomancer/equake")
    (synopsis
      "Drop-down console for (e)shell & terminal emulation")
    (description
      "Documentation at https://melpa.org/#/equake")
    (license #f)))

(define-public emacs-eradio
  (package
    (name "emacs-eradio")
    (version "20210327.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olavfosse/eradio.git")
               (commit
                 "47769986c79def84307921f0277e9bb2714756c2")))
        (sha256
          (base32
            "0lks2pph44qxc9l34nr55ha667974r8ckxdwmvcp6v9mnm05317s"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fossegrim/eradio")
    (synopsis "A simple Internet radio player")
    (description
      "Documentation at https://melpa.org/#/eradio")
    (license #f)))

(define-public emacs-erblint
  (package
    (name "emacs-erblint")
    (version "20200622.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leodcs/erblint-emacs.git")
               (commit
                 "89af42f776d8dc656104322edaace2ede7499932")))
        (sha256
          (base32
            "1s3fcic42wlab3vnwdakvy7268cr19j5rd2ajr18qkr0vibj7xxj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leodcs/erblint-emacs")
    (synopsis
      "An interface for checking HTML ERB files using Erblint")
    (description
      "Documentation at https://melpa.org/#/erblint")
    (license #f)))

(define-public emacs-erc-colorize
  (package
    (name "emacs-erc-colorize")
    (version "20170107.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/erc-colorize.git")
               (commit
                 "d026a016dcb9d63d9ac66d30627a92a8f1681bbd")))
        (sha256
          (base32
            "1zzmsrlknrpw26kizd4dm1g604y9nkgh85xal9la70k94qcgv138"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/erc-colorize.git")
    (synopsis
      "Per user colorization of whole message")
    (description
      "Documentation at https://melpa.org/#/erc-colorize")
    (license #f)))

(define-public emacs-erc-crypt
  (package
    (name "emacs-erc-crypt")
    (version "20200516.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atomontage/erc-crypt.git")
               (commit
                 "be87248435509f83c56a7f08ac9bcbbd3b20d780")))
        (sha256
          (base32
            "1d8wfa4rgwv41kmw1kpp90r8371n1l7lfx3k79k2psppvrf72xbf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/atomontage/erc-crypt")
    (synopsis "Symmetric Encryption for ERC")
    (description
      "Documentation at https://melpa.org/#/erc-crypt")
    (license #f)))

(define-public emacs-erc-hl-nicks
  (package
    (name "emacs-erc-hl-nicks")
    (version "20200317.16")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/erc-hl-nicks.git")
               (commit
                 "a67fe361c8f2aa20fc235447fbb898f424b51439")))
        (sha256
          (base32
            "0k57scxa8rm859fqsm8srhps7rlq06jzazhjbwnadzrh8i5fyvra"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/leathekd/erc-hl-nicks")
    (synopsis
      "ERC nick highlighter that ignores uniquifying chars when colorizing")
    (description
      "Documentation at https://melpa.org/#/erc-hl-nicks")
    (license #f)))

(define-public emacs-erc-image
  (package
    (name "emacs-erc-image")
    (version "20210604.753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/erc-image.el.git")
               (commit
                 "883084f0801d46a5ccf183e51ae9a734755bbb97")))
        (sha256
          (base32
            "081c8pjmpwnmqah7dbpkj20bk7ln57g4n7c1zxzdlsz80pxnfay4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Show received image urls in the ERC buffer")
    (description
      "Documentation at https://melpa.org/#/erc-image")
    (license #f)))

(define-public emacs-erc-matterircd
  (package
    (name "emacs-erc-matterircd")
    (version "20210804.504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/erc-matterircd.git")
               (commit
                 "e3a59267c044474f9ca066d36517e9a3d872759c")))
        (sha256
          (base32
            "1iqyyhaz8zypgj9ij8ivqym0xry10zzyi8qf16fzg2ppxl47bc5i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alexmurray/erc-matterircd")
    (synopsis "Integrate matterircd with ERC")
    (description
      "Documentation at https://melpa.org/#/erc-matterircd")
    (license #f)))

(define-public emacs-erc-scrolltoplace
  (package
    (name "emacs-erc-scrolltoplace")
    (version "20180608.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jgkamat/erc-scrolltoplace.git")
               (commit
                 "38cfd0c2e2f5f6533b217189c3afaf6640b5602e")))
        (sha256
          (base32
            "0pfnp7gw75hfhsy7jizp622s6yv61h3k2s0l2g33i801ar6abwm5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-switch-buffer-functions))
    (home-page
      "http://gitlab.com/jgkamat/erc-scrolltoplace")
    (synopsis
      "An Erc module to scrolltobottom better with keep-place")
    (description
      "Documentation at https://melpa.org/#/erc-scrolltoplace")
    (license #f)))

(define-public emacs-erc-social-graph
  (package
    (name "emacs-erc-social-graph")
    (version "20150508.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vibhavp/erc-social-graph.git")
               (commit
                 "e6ef3416a1c5064054bf054d9f0c1c7bf54a9cd0")))
        (sha256
          (base32
            "0k3gp4c74g5awk7v9lzb6py3dvf59nggh6dw7530cswxb6kg2psa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vibhavp/erc-social-graph")
    (synopsis
      "A social network graph module for ERC.")
    (description
      "Documentation at https://melpa.org/#/erc-social-graph")
    (license #f)))

(define-public emacs-erc-terminal-notifier
  (package
    (name "emacs-erc-terminal-notifier")
    (version "20140115.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julienXX/erc-terminal-notifier.el.git")
               (commit
                 "a3dacb935845e4a20031212bbd82b2170f68d2a8")))
        (sha256
          (base32
            "0cfqbqskh260zfq1lx1s8jz2351w2ij9m73rqim16fy7zr0s0670"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/julienXX/")
    (synopsis
      "OSX notifications via the terminal-notifier gem for Emacs ERC.")
    (description
      "Documentation at https://melpa.org/#/erc-terminal-notifier")
    (license #f)))

(define-public emacs-erc-track-score
  (package
    (name "emacs-erc-track-score")
    (version "20130328.1215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/erc-track-score.el.git")
               (commit
                 "5b27531ea6b1a4c4b703b270dfa9128cb5bfdaa3")))
        (sha256
          (base32
            "0n107d77z04ahypa7hn2165kkb6490v4vkzdm5zwm4lfhvlmp0x2"))))
    (build-system melpa-build-system)
    (home-page
      "http://julien.danjou.info/erc-track-score.html")
    (synopsis
      "Add score support to tracked channel buffers")
    (description
      "Documentation at https://melpa.org/#/erc-track-score")
    (license #f)))

(define-public emacs-erc-tweet
  (package
    (name "emacs-erc-tweet")
    (version "20150920.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/erc-tweet.el.git")
               (commit
                 "91fed61e139fa788d66a7358f0d50acc896414b8")))
        (sha256
          (base32
            "118q4zj9dh5xnimcsi229j5pflhcd8qz0p212kc4p9dmyrx2iw0n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "shows text of a tweet when an url is posted in erc buffers")
    (description
      "Documentation at https://melpa.org/#/erc-tweet")
    (license #f)))

(define-public emacs-erc-twitch
  (package
    (name "emacs-erc-twitch")
    (version "20170427.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vibhavp/erc-twitch.git")
               (commit
                 "53c6af0cb72e56d897d30a40e7e5066668d6b5ec")))
        (sha256
          (base32
            "0qirx38czv8m7sgj3rm1zncmyd8z6k4xhd8ixwxl7nigfpqvvv4c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vibhavp/erc-twitch")
    (synopsis "Support for Twitch emotes for ERC.")
    (description
      "Documentation at https://melpa.org/#/erc-twitch")
    (license #f)))

(define-public emacs-erc-view-log
  (package
    (name "emacs-erc-view-log")
    (version "20140227.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Niluge-KiWi/erc-view-log.git")
               (commit
                 "c5a25f0cbca84ed2e4f72068c02b66bd0ea3b266")))
        (sha256
          (base32
            "0bzi2sh2fhrz49j5y53h6jgf41av6rx78smb3bbk6m74is8vim2y"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Niluge-KiWi/erc-view-log/raw/master/erc-view-log.el")
    (synopsis "Major mode for viewing ERC logs")
    (description
      "Documentation at https://melpa.org/#/erc-view-log")
    (license #f)))

(define-public emacs-erc-yank
  (package
    (name "emacs-erc-yank")
    (version "20210220.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/erc-yank.git")
               (commit
                 "55d96f18c5df9d8fce51fa073d7a12c47a46ac80")))
        (sha256
          (base32
            "1chigywld4v2shc7ij6gyxfq0xzwyms5nal85b3yh7km2pim5i8h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/erc-yank")
    (synopsis
      "Automagically create a Gist if pasting more than 5 lines")
    (description
      "Documentation at https://melpa.org/#/erc-yank")
    (license #f)))

(define-public emacs-erc-youtube
  (package
    (name "emacs-erc-youtube")
    (version "20150603.2136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/erc-youtube.el.git")
               (commit
                 "97054ba8475b442e2aa81e5a291f668b7f28697f")))
        (sha256
          (base32
            "0kh4amx3l3a14qaiyvjyak1jbybs6n49mdvzjrd1i2vd1y74zj5w"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Show info about a YouTube URL in an ERC buffer.")
    (description
      "Documentation at https://melpa.org/#/erc-youtube")
    (license #f)))

(define-public emacs-erc-yt
  (package
    (name "emacs-erc-yt")
    (version "20150426.1249")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yhvh/erc-yt.git")
               (commit
                 "43e7d49325b17a3217a6ffb4a9daf75c5ff4e6f8")))
        (sha256
          (base32
            "1dlw34kaslyvnsrahf4rm76r2b7qqqn589i4mmhr23prl8xbz9z9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "An erc module to display youtube links nicely")
    (description
      "Documentation at https://melpa.org/#/erc-yt")
    (license #f)))

(define-public emacs-ercn
  (package
    (name "emacs-ercn")
    (version "20150523.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/ercn.git")
               (commit
                 "79a4df5609046ae2e2e3375998287be6dda80615")))
        (sha256
          (base32
            "0xw3d9fz4kmn1myrsy44ki4bgg0aclv41wldl6r9nhvkrnri41cv"))))
    (build-system melpa-build-system)
    (home-page "http://www.github.com/leathekd/ercn")
    (synopsis "Flexible ERC notifications")
    (description
      "Documentation at https://melpa.org/#/ercn")
    (license #f)))

(define-public emacs-ereader
  (package
    (name "emacs-ereader")
    (version "20170810.501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bddean/emacs-ereader.git")
               (commit
                 "f3bbd3f13195f8fba3e3c880aab0e4c60430dcf3")))
        (sha256
          (base32
            "18yqqqxsivnq2m8mxz7ifp0bfmn3q9m11w3abryxg2snh4vb5sy6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-xml+))
    (home-page
      "https://github.com/bddean/emacs-ereader")
    (synopsis
      "Major mode for reading ebooks with org-mode integration")
    (description
      "Documentation at https://melpa.org/#/ereader")
    (license #f)))

(define-public emacs-eredis
  (package
    (name "emacs-eredis")
    (version "20181119.131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justinhj/eredis.git")
               (commit
                 "bc86b9f63a3e7a5eb263875030d0e15d6f5f6e37")))
        (sha256
          (base32
            "1a3vvdlld66x0j3i7plhc0fm6mkj64mvd375j8g65nvfn6cwc3h4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/justinhj/eredis/")
    (synopsis "eredis, a Redis client in emacs lisp")
    (description
      "Documentation at https://melpa.org/#/eredis")
    (license #f)))

(define-public emacs-erefactor
  (package
    (name "emacs-erefactor")
    (version "20200513.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-erefactor.git")
               (commit
                 "bfe27a1b8c7cac0fe054e76113e941efa3775fe8")))
        (sha256
          (base32
            "1071gqli1qd498syhysyj2wzyw1nya5070m82xd9qalqdh11b8is"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("erefactor.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-erefactor")
    (synopsis "Emacs-Lisp refactoring utilities")
    (description
      "Documentation at https://melpa.org/#/erefactor")
    (license #f)))

(define-public emacs-ergoemacs-mode
  (package
    (name "emacs-ergoemacs-mode")
    (version "20230207.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ergoemacs/ergoemacs-mode.git")
               (commit
                 "c2a918c6ab13e29dba2caf2bd06496babd0dfca6")))
        (sha256
          (base32
            "0lbdxc1gwn7lgphkvwfr6jqzs1nwf60wly3n4xiyzjlw6v0ilxd4"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         "*.svg"
         "*.ahk"
         "*.info"
         "dir"
         "bash-us.txt"
         "os_x_qwerty.dict.txt")))
    (home-page
      "https://github.com/ergoemacs/ergoemacs-mode")
    (synopsis
      "Emacs mode based on common modern interface and ergonomics.")
    (description
      "Documentation at https://melpa.org/#/ergoemacs-mode")
    (license #f)))

(define-public emacs-ergoemacs-status
  (package
    (name "emacs-ergoemacs-status")
    (version "20160318.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ergoemacs/ergoemacs-status.git")
               (commit
                 "d952cc2361adf6eb4d6af60950ad4ab699c81320")))
        (sha256
          (base32
            "06pdwrhflpi5rkigqnr5h3jzv3dm1p9nydpvql9w33ixm6qhjj71"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline emacs-mode-icons))
    (home-page "unspecified")
    (synopsis "Adaptive Status Bar / Mode Line")
    (description
      "Documentation at https://melpa.org/#/ergoemacs-status")
    (license #f)))

(define-public emacs-eri
  (package
    (name "emacs-eri")
    (version "20200914.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agda/agda.git")
               (commit
                 "3d1578ca87d8710b4ca3ea6166649ec37ed2794a")))
        (sha256
          (base32
            "0qldvs0xh2zv1iri15m6rj5c2w5p7aayhm62x3yyrraq8hdssp2j"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("src/data/emacs-mode/eri.el")))
    (home-page "https://github.com/agda/agda")
    (synopsis "Enhanced relative indentation (eri)")
    (description
      "Documentation at https://melpa.org/#/eri")
    (license #f)))

(define-public emacs-erk
  (package
    (name "emacs-erk")
    (version "20231106.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/positron-solutions/elisp-repo-kit.git")
               (commit
                 "49611de3ed000b5872c63270dd66efa0e6bf76c9")))
        (sha256
          (base32
            "1fq1fsgs0dklal5d3gxbb8anaw9kgixpcjzyvvia7lxzlfc7chqv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-compile
            emacs-dash
            emacs-license-templates))
    (home-page
      "http://github.com/positron-solutions/elisp-repo-kit")
    (synopsis "Elisp (GitHub) Repository Kit")
    (description
      "Documentation at https://melpa.org/#/erk")
    (license #f)))

(define-public emacs-erlang
  (package
    (name "emacs-erlang")
    (version "20230905.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erlang/otp.git")
               (commit
                 "771acd9670148f3ac809a2ac90fc33a7975dd348")))
        (sha256
          (base32
            "15dni1pl26b73kszwzbkq38pr7hn4103lal1y3y4qlzzdhavkrq6"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("lib/tools/emacs/*.el"
         (:exclude "lib/tools/emacs/erlang_appwiz.el"))))
    (home-page "unspecified")
    (synopsis "Erlang major mode")
    (description
      "Documentation at https://melpa.org/#/erlang")
    (license #f)))

(define-public emacs-erlstack-mode
  (package
    (name "emacs-erlstack-mode")
    (version "20230608.909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k32/erlstack-mode.git")
               (commit
                 "51e3cd10a2fe77eb8eb60643aba6f8178374b069")))
        (sha256
          (base32
            "1jid7lcdjn1lxa9zs71j9z1nlhlzrp0gyl68yvjsav5mc6nbr0yv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/k32/erlstack-mode")
    (synopsis
      "Minor mode for analysing Erlang stacktraces")
    (description
      "Documentation at https://melpa.org/#/erlstack-mode")
    (license #f)))

(define-public emacs-eros
  (package
    (name "emacs-eros")
    (version "20230309.615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xiongtx/eros.git")
               (commit
                 "a9a92bdc6be0521a6a06eb464be55ed61946639c")))
        (sha256
          (base32
            "04nkqsvh8c988hc3ajigs206ad64204qdhhqzdvm3k7m7qiiwga8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xiongtx/eros")
    (synopsis
      "Evaluation Result OverlayS for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/eros")
    (license #f)))

(define-public emacs-ert-async
  (package
    (name "emacs-ert-async")
    (version "20200105.1031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ert-async.el.git")
               (commit
                 "948cf2faa10e085bda3739034ca5ea1912893433")))
        (sha256
          (base32
            "1ixkh6bghrg1criczhdvr9igjcdsijadaqvywyjj6bfwd8ql5x39"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rejeep/ert-async.el")
    (synopsis "Async support for ERT")
    (description
      "Documentation at https://melpa.org/#/ert-async")
    (license #f)))

(define-public emacs-ert-expectations
  (package
    (name "emacs-ert-expectations")
    (version "20121009.734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ert-expectations.git")
               (commit
                 "aed70e002c4305b66aed7f6d0d48e9addd2dc1e6")))
        (sha256
          (base32
            "0qgi3rj49k0hz4azg7ghcj6385p5s9gakqjhrjnhih7dxvihcgxi"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/ert-expectations.el")
    (synopsis
      "The simplest unit test framework in the world")
    (description
      "Documentation at https://melpa.org/#/ert-expectations")
    (license #f)))

(define-public emacs-ert-junit
  (package
    (name "emacs-ert-junit")
    (version "20190802.2232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/olanilsson/ert-junit")
               (commit
                 "65f91c35b088b87943dbbbe7e1ce354bc9bc0992")))
        (sha256
          (base32
            "1srmkffzj7xf8iickhyhw1fpg4nxbkp45aiz9w784ra9p99a366y"))))
    (build-system melpa-build-system)
    (home-page
      "http://bitbucket.org/olanilsson/ert-junit")
    (synopsis "JUnit XML reports from ert results")
    (description
      "Documentation at https://melpa.org/#/ert-junit")
    (license #f)))

(define-public emacs-ert-modeline
  (package
    (name "emacs-ert-modeline")
    (version "20140115.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/ert-modeline.git")
               (commit
                 "e7be2b81191afb437b70368a819770f8f750e4af")))
        (sha256
          (base32
            "08yfq3qzscxvzyxvyvdqpkrm787278yhkdd9prbvrgjj80p8n7vq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-projectile))
    (home-page "unspecified")
    (synopsis
      "displays ert test results in the modeline.")
    (description
      "Documentation at https://melpa.org/#/ert-modeline")
    (license #f)))

(define-public emacs-ert-runner
  (package
    (name "emacs-ert-runner")
    (version "20220513.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ert-runner.el.git")
               (commit
                 "69d66b934223d5f1801ba3a4c8dbfb3453f2a041")))
        (sha256
          (base32
            "12hy1wnrs9dq2hl88fbybjv18a5fh5az5vpcrrxihrwy2gi2yrw0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-commander
            emacs-ansi
            emacs-shut-up))
    (arguments '(#:files ("*.el" "bin" "reporters")))
    (home-page
      "http://github.com/rejeep/ert-runner.el")
    (synopsis "Opinionated Ert testing workflow")
    (description
      "Documentation at https://melpa.org/#/ert-runner")
    (license #f)))

(define-public emacs-es-lib
  (package
    (name "emacs-es-lib")
    (version "20141111.1830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/es-lib.git")
               (commit
                 "753b27363e39c10edc9e4e452bdbbbe4d190df4a")))
        (sha256
          (base32
            "0jq4yp80wiphlpsc0429rg8n50g8l4lf78q0l3nywz2p93smjy9b"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sabof/es-lib")
    (synopsis "A collection of emacs utilities")
    (description
      "Documentation at https://melpa.org/#/es-lib")
    (license #f)))

(define-public emacs-es-mode
  (package
    (name "emacs-es-mode")
    (version "20221026.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakrone/es-mode.git")
               (commit
                 "e82465fd785688bb58918ea62ca4de06a2a23a1e")))
        (sha256
          (base32
            "0nb0nh651wnx8916j4ybhmadfk4ri6gnpfw9x58fv50nnmna9bc9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-spark
            emacs-s
            emacs-request))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "http://www.github.com/dakrone/es-mode")
    (synopsis
      "A major mode for editing and executing Elasticsearch queries")
    (description
      "Documentation at https://melpa.org/#/es-mode")
    (license #f)))

(define-public emacs-es-windows
  (package
    (name "emacs-es-windows")
    (version "20140211.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/es-windows.git")
               (commit
                 "239e30408cb1adb4bc8bd63e2df34711fa910b4f")))
        (sha256
          (base32
            "14rsifcx2kwdmwq9zh41fkb848l0f4igp5v9pk3x4jd2yw9gay7m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sabof/es-windows")
    (synopsis "Window-management utilities")
    (description
      "Documentation at https://melpa.org/#/es-windows")
    (license #f)))

(define-public emacs-esa
  (package
    (name "emacs-esa")
    (version "20180403.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nabinno/esa.el.git")
               (commit
                 "417e0ac55abe9b17e0b7165d0df26bc018aff42e")))
        (sha256
          (base32
            "0hib8q9fslvw02i1y19z78fv6yy88q09lhfdfmbdyn6yal21855q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nabinno/esa.el")
    (synopsis "Interface to esa.io")
    (description
      "Documentation at https://melpa.org/#/esa")
    (license #f)))

(define-public emacs-esh-autosuggest
  (package
    (name "emacs-esh-autosuggest")
    (version "20210906.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/esh-autosuggest.git")
               (commit
                 "bf676b137d35553debe32ff134dbec25f3978ae7")))
        (sha256
          (base32
            "1m255pgi2zlkjrjr3l8gk76qc5543qnaxqrwgcpb2z9gq51ivfw2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "http://github.com/dieggsy/esh-autosuggest")
    (synopsis "History autosuggestions for eshell")
    (description
      "Documentation at https://melpa.org/#/esh-autosuggest")
    (license #f)))

(define-public emacs-esh-buf-stack
  (package
    (name "emacs-esh-buf-stack")
    (version "20140107.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/esh-buf-stack.git")
               (commit
                 "ce0ea5aadca3150eaa9d2e6ec20296add4e99176")))
        (sha256
          (base32
            "1k8k9hl9m4vjqdw3x9wg04cy2lb9x64mq0mm0i3i6w59zrsnkn4q"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Add a buffer stack feature to Eshell")
    (description
      "Documentation at https://melpa.org/#/esh-buf-stack")
    (license #f)))

(define-public emacs-esh-help
  (package
    (name "emacs-esh-help")
    (version "20190905.22")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/esh-help.git")
               (commit
                 "417673ed18a983930a66a6692dbfb288a995cb80")))
        (sha256
          (base32
            "0x7d51a6ljl014zy7mi27vzcqqbcwg9z4drq29fr2ajk82mqhlgd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/tom-tan/esh-help/")
    (synopsis
      "Add some help functions and support for Eshell")
    (description
      "Documentation at https://melpa.org/#/esh-help")
    (license #f)))

(define-public emacs-eshell-autojump
  (package
    (name "emacs-eshell-autojump")
    (version "20201117.235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/eshell-autojump.git")
               (commit
                 "c1056bfc6b46646ae1e606247689fef9aee621af")))
        (sha256
          (base32
            "1anay4d29p86yxmjgrscby92icc7j230xc8dnjhgq29y2s44f3gg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/eshell-autojump")
    (synopsis "autojump command for Eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-autojump")
    (license #f)))

(define-public emacs-eshell-bookmark
  (package
    (name "emacs-eshell-bookmark")
    (version "20170922.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/eshell-bookmark.git")
               (commit
                 "99a491c77e27ecc4626bdd4ad453ac71aa2654d4")))
        (sha256
          (base32
            "0imn9x7lylnzprg54mdmf21nxld1cq3r1037jzix0pq39bgz0vk7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fuco1/eshell-bookmark")
    (synopsis "Integrate bookmarks with eshell.")
    (description
      "Documentation at https://melpa.org/#/eshell-bookmark")
    (license #f)))

(define-public emacs-eshell-did-you-mean
  (package
    (name "emacs-eshell-did-you-mean")
    (version "20211104.237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/eshell-did-you-mean.git")
               (commit
                 "80cd8c4b186a2fb29621cf634bcf2bcd914f1e3d")))
        (sha256
          (base32
            "158g8b4crm0gf5pilfxf89hdsb22gr1wbrjyx9gf45bmcll3i9vf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/eshell-did-you-mean")
    (synopsis
      "command not found (\"did you mean…\" feature) in Eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-did-you-mean")
    (license #f)))

(define-public emacs-eshell-fixed-prompt
  (package
    (name "emacs-eshell-fixed-prompt")
    (version "20220104.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mallt/eshell-fixed-prompt-mode.git")
               (commit
                 "302c241b42764bd6b4ed6d3c6ea360b5a2292fbc")))
        (sha256
          (base32
            "10igzz5vhjkq4m7mc45ngfi3ahimcn2c0zcqqazk3jgysy1hjgp2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis
      "Restrict eshell to a single fixed prompt")
    (description
      "Documentation at https://melpa.org/#/eshell-fixed-prompt")
    (license #f)))

(define-public emacs-eshell-fringe-status
  (package
    (name "emacs-eshell-fringe-status")
    (version "20170117.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/eshell-fringe-status.git")
               (commit
                 "adc6997c68e39c0d52a2af1b2fd5cf2057783797")))
        (sha256
          (base32
            "1cwn4cvjjd4l5kk7s6cxzafjmdv3s7k78i73fvscmsnpwx9p2wj0"))))
    (build-system melpa-build-system)
    (home-page
      "http://projects.ryuslash.org/eshell-fringe-status/")
    (synopsis "Show last status in fringe")
    (description
      "Documentation at https://melpa.org/#/eshell-fringe-status")
    (license #f)))

(define-public emacs-eshell-git-prompt
  (package
    (name "emacs-eshell-git-prompt")
    (version "20220830.2000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/eshell-git-prompt.git")
               (commit
                 "dfcf9cd93add6763e2c46603b0323274d4c22906")))
        (sha256
          (base32
            "13b7nr0819pgzyvh0szi0zjyazgpxmsbqcz65cccyhh2pq48zb7j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/xuchunyang/eshell-git-prompt")
    (synopsis "Some Eshell prompt for Git users")
    (description
      "Documentation at https://melpa.org/#/eshell-git-prompt")
    (license #f)))

(define-public emacs-eshell-info-banner
  (package
    (name "emacs-eshell-info-banner")
    (version "20220728.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Phundrak/eshell-info-banner.el.git")
               (commit
                 "2f4e59ea7ac2129b175af2b6acf353b29687fb9f")))
        (sha256
          (base32
            "1362fag0hxsiah0y6rwwkrbxn01h07l59a73xr2piwl1m6imsihr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/Phundrak/eshell-info-banner.el")
    (synopsis
      "System information as your Eshell banner")
    (description
      "Documentation at https://melpa.org/#/eshell-info-banner")
    (license #f)))

(define-public emacs-eshell-outline
  (package
    (name "emacs-eshell-outline")
    (version "20201121.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.jamzattack.xyz/eshell-outline")
               (commit
                 "6f917afa5b3d36764d76d7864589094647d8c3b4")))
        (sha256
          (base32
            "1igh5hxvncd4lvxv5jj1hjgsfl4h0cn81597qn6ppzvxgjbhh7v7"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.jamzattack.xyz/eshell-outline")
    (synopsis "Enhanced outline-mode for Eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-outline")
    (license #f)))

(define-public emacs-eshell-prompt-extras
  (package
    (name "emacs-eshell-prompt-extras")
    (version "20231019.1405")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/eshell-prompt-extras.git")
               (commit
                 "14eabe593e110ed6937ac3b95f7979263d716a26")))
        (sha256
          (base32
            "0rybn2hvii87ad2bk9xg71izbyr7w2s7d8qzakmjif7yn462rfnq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zwild/eshell-prompt-extras")
    (synopsis
      "Display extra information for your eshell prompt.")
    (description
      "Documentation at https://melpa.org/#/eshell-prompt-extras")
    (license #f)))

(define-public emacs-eshell-syntax-highlighting
  (package
    (name "emacs-eshell-syntax-highlighting")
    (version "20231108.2313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akreisher/eshell-syntax-highlighting.git")
               (commit
                 "4ac27eec6595ba116a6151dfaf0b0e0440101e10")))
        (sha256
          (base32
            "123a2szd95nd43v2397087ayahp7azqm5arzh4fmqi1kdch4w3sp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/akreisher/eshell-syntax-highlighting")
    (synopsis "Highlight eshell commands")
    (description
      "Documentation at https://melpa.org/#/eshell-syntax-highlighting")
    (license #f)))

(define-public emacs-eshell-toggle
  (package
    (name "emacs-eshell-toggle")
    (version "20220718.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/4DA/eshell-toggle.git")
               (commit
                 "d4e884624f02e68b267b0044322ad17baa6780f8")))
        (sha256
          (base32
            "13bb0dyhncph6rxihlf4fy7p92nyxz0ylld8vx1sj4551sv5ifn9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/4da/eshell-toggle")
    (synopsis
      "Show/hide eshell under active window.")
    (description
      "Documentation at https://melpa.org/#/eshell-toggle")
    (license #f)))

(define-public emacs-eshell-up
  (package
    (name "emacs-eshell-up")
    (version "20170425.1737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/eshell-up.git")
               (commit
                 "ff84e6069b98f2ed00857a0f78bff19d96e4955c")))
        (sha256
          (base32
            "1mb576prni644ls7p133ahjgi7jkmclb37wsj8ws3m8r0ls3w76z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/peterwvj/eshell-up")
    (synopsis
      "Quickly go to a specific parent directory in eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-up")
    (license #f)))

(define-public emacs-eshell-vterm
  (package
    (name "emacs-eshell-vterm")
    (version "20221229.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iostapyshyn/eshell-vterm.git")
               (commit
                 "e96c30ad5e7d63b778fc3232e81b090b63b13277")))
        (sha256
          (base32
            "0zgf2yv85awlxc44cqbnyrzbkygxqp6hdqfskyg8qqjbm56cycvy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vterm))
    (home-page
      "https://github.com/iostapyshyn/eshell-vterm")
    (synopsis "Vterm for visual commands in eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-vterm")
    (license #f)))

(define-public emacs-eshell-z
  (package
    (name "emacs-eshell-z")
    (version "20191116.333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/eshell-z.git")
               (commit
                 "337cb241e17bd472bd3677ff166a0800f684213c")))
        (sha256
          (base32
            "13dwaq8q23rwmrkpy3gvf7aswrkk6b9ak5221xl7n0bld4wdhq3j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/eshell-z")
    (synopsis "cd to frequent directory in eshell")
    (description
      "Documentation at https://melpa.org/#/eshell-z")
    (license #f)))

(define-public emacs-eslint-disable-rule
  (package
    (name "emacs-eslint-disable-rule")
    (version "20230904.1821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/eslint-disable-rule.git")
               (commit
                 "54771405e09e2cf5cb8f47aab2818e77d3046f53")))
        (sha256
          (base32
            "0q70g64vimafcgabzgqhhkhq5rmy0h88wsnxahvnpgcmpgk9wiy5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/eslint-disable-rule")
    (synopsis
      "Commands to add JS comments disabling eslint rules")
    (description
      "Documentation at https://melpa.org/#/eslint-disable-rule")
    (license #f)))

(define-public emacs-eslint-fix
  (package
    (name "emacs-eslint-fix")
    (version "20211005.221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/codesuki/eslint-fix.git")
               (commit
                 "636bf8d8797bdd58f1b543c9d3f4910e3ce879ab")))
        (sha256
          (base32
            "02hjm685fl4f33s5fi8nc088wwfzhyy6abx5g4i93b2dx3hr2lyi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/codesuki/eslint-fix")
    (synopsis "Fix JavaScript files using ESLint")
    (description
      "Documentation at https://melpa.org/#/eslint-fix")
    (license #f)))

(define-public emacs-eslint-rc
  (package
    (name "emacs-eslint-rc")
    (version "20220328.800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjuliano/eslint-rc-emacs.git")
               (commit
                 "eb6f3e715792952bc957d5dc8ab1a607f3dbbd55")))
        (sha256
          (base32
            "1bdv3lbcq8wppcn8dcbp53zsxrz3qaz72iazpg5dbdq047rm6s1x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eslint-fix))
    (home-page
      "https://github.com/jjuliano/eslint-rc-emacs")
    (synopsis "Use local rc rules with ESLint")
    (description
      "Documentation at https://melpa.org/#/eslint-rc")
    (license #f)))

(define-public emacs-eslintd-fix
  (package
    (name "emacs-eslintd-fix")
    (version "20210731.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/eslintd-fix.git")
               (commit
                 "3897d8a679a6e98e3f5054aaefe07f6b55f8f128")))
        (sha256
          (base32
            "0wx0mca7xykjkbyhix2mhqf2l9zc46l14hdy4krnr3xdyb5ibmkr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/aaronjensen/eslintd-fix")
    (synopsis
      "use eslint_d to automatically fix js files")
    (description
      "Documentation at https://melpa.org/#/eslintd-fix")
    (license #f)))

(define-public emacs-esmond-theme
  (package
    (name "emacs-esmond-theme")
    (version "20230526.124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcatalyst/esmond-theme.git")
               (commit
                 "22b414599fbda46f90a210e846ca64b8427dd3f2")))
        (sha256
          (base32
            "0kqfy06aw1z7x42sbi5dqjf1ah8i4rjq0grdlsbb5ds5446727gr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xcatalyst/esmond-theme")
    (synopsis "Esmond dark theme")
    (description
      "Documentation at https://melpa.org/#/esmond-theme")
    (license #f)))

(define-public emacs-esonify
  (package
    (name "emacs-esonify")
    (version "20190110.1621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oflatt/esonify.git")
               (commit
                 "bdc79d4ab2e3c449b5bef46e5cabc552beeed5c6")))
        (sha256
          (base32
            "03xl6a49pg3y1g3dl7fglrn956ynzj2vlviwlv08ngflvbn5shai"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (arguments '(#:files (:defaults "sounds")))
    (home-page "https://github.com/oflatt/esonify")
    (synopsis "Sonify your code")
    (description
      "Documentation at https://melpa.org/#/esonify")
    (license #f)))

(define-public emacs-espotify
  (package
    (name "emacs-espotify")
    (version "20220121.2057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify.git")
               (commit
                 "ea6d6021e5acc550560325db2f09198839ee702f")))
        (sha256
          (base32
            "1jlm7mka1ilaw8z1a91vy8k1hz27g4iyk33fpmiab7856j8ry32b"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("espotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Spotify access library")
    (description
      "Documentation at https://melpa.org/#/espotify")
    (license #f)))

(define-public emacs-espresso-theme
  (package
    (name "emacs-espresso-theme")
    (version "20210505.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/espresso-theme.git")
               (commit
                 "580f673729f02aa07070c5300bedf24733d56e74")))
        (sha256
          (base32
            "1fxnsz0v7hizs7wf8pjfm7jwbrm9vg5gvxv1a6ixgfajka79amfw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dgutov/espresso-theme")
    (synopsis "Espresso Tutti Colori port for Emacs")
    (description
      "Documentation at https://melpa.org/#/espresso-theme")
    (license #f)))

(define-public emacs-espuds
  (package
    (name "emacs-espuds")
    (version "20230218.910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecukes/espuds.git")
               (commit
                 "57c18a48f1a01d8174298eaab4fcf3b2c6549291")))
        (sha256
          (base32
            "00m4v31ig5nvnnfl2ahz3dw40njvrxzfnch3ly6asvf2b17spa9i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/ecukes/espuds")
    (synopsis "Ecukes step definitions")
    (description
      "Documentation at https://melpa.org/#/espuds")
    (license #f)))

(define-public emacs-espy
  (package
    (name "emacs-espy")
    (version "20200317.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/espy.git")
               (commit
                 "2c01be937a5e5bde62921684a0b27300705fb4e0")))
        (sha256
          (base32
            "1nnnr184y29g1svxqxlqyg5irzrf1xmay4p78jfv8v07sisl90kp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/walseb/espy")
    (synopsis "Emacs Simple Password Yielder")
    (description
      "Documentation at https://melpa.org/#/espy")
    (license #f)))

(define-public emacs-esqlite
  (package
    (name "emacs-esqlite")
    (version "20151206.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-esqlite.git")
               (commit
                 "08a779a821f8d32c1a1985d8d9eb6cf21646ce2e")))
        (sha256
          (base32
            "18dvg2yagk9qyn3xfnhgfv192vyqzahzfy8xgc1fnm7a1l0gcg2x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pcsv))
    (arguments '(#:files ("esqlite.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-esqlite")
    (synopsis "Manipulate sqlite file from Emacs")
    (description
      "Documentation at https://melpa.org/#/esqlite")
    (license #f)))

(define-public emacs-esqlite-helm
  (package
    (name "emacs-esqlite-helm")
    (version "20151116.850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-esqlite.git")
               (commit
                 "08a779a821f8d32c1a1985d8d9eb6cf21646ce2e")))
        (sha256
          (base32
            "18dvg2yagk9qyn3xfnhgfv192vyqzahzfy8xgc1fnm7a1l0gcg2x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-esqlite emacs-helm))
    (arguments '(#:files ("esqlite-helm.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-esqlite")
    (synopsis
      "Define helm source for sqlite database")
    (description
      "Documentation at https://melpa.org/#/esqlite-helm")
    (license #f)))

(define-public emacs-ess
  (package
    (name "emacs-ess")
    (version "20230807.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-ess/ESS.git")
               (commit
                 "d8914196ceb2061d850cc899aed79342519972ff")))
        (sha256
          (base32
            "11pkachbn0lj4qx8xmaaknrx8223hrmq55vqs6apl1a9s9dg62bs"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("lisp/*.el"
         "doc/ess.texi"
         ("etc" "etc/*")
         ("obsolete" "lisp/obsolete/*")
         (:exclude "etc/other"))))
    (home-page "https://ess.r-project.org/")
    (synopsis "Emacs Speaks Statistics")
    (description
      "Documentation at https://melpa.org/#/ess")
    (license #f)))

(define-public emacs-ess-r-data-view
  (package
    (name "emacs-ess-r-data-view")
    (version "20130509.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/ess-R-data-view.el.git")
               (commit
                 "d6e98d3ae1e2a2ea39a56eebcdb73e99d29562e9")))
        (sha256
          (base32
            "1ya2ay52gkrd31pmw45ban8kkxgnzhhwkzkypwdhjfccq3ys835x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ctable emacs-popup emacs-ess))
    (home-page
      "https://github.com/myuhe/ess-R-data-view.el")
    (synopsis "Data viewer for GNU R")
    (description
      "Documentation at https://melpa.org/#/ess-R-data-view")
    (license #f)))

(define-public emacs-ess-r-insert-obj
  (package
    (name "emacs-ess-r-insert-obj")
    (version "20220610.1406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/ess-r-insert-obj.git")
               (commit
                 "2ded9c23d0af2a7f6c0e02f9ea4af0e5b3cb7fb4")))
        (sha256
          (base32
            "1rc9hk1jsdfdlq1vfbz8yvg47qvyk19y2ki1w7qsvm8v3sviw959"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ess))
    (home-page
      "https://github.com/ShuguangSun/ess-r-insert-obj")
    (synopsis "Insert objects in ESS-R")
    (description
      "Documentation at https://melpa.org/#/ess-r-insert-obj")
    (license #f)))

(define-public emacs-ess-smart-equals
  (package
    (name "emacs-ess-smart-equals")
    (version "20210411.1333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/genovese/ess-smart-equals.git")
               (commit
                 "fea9eea4b59c3e9559b379508e3500076ca99ef1")))
        (sha256
          (base32
            "1kfyvhvma31ym3xzld2msbmxvvl69wf6s0l3nj6rmrfvrlhqlnrd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ess))
    (home-page
      "https://github.com/genovese/ess-smart-equals")
    (synopsis
      "flexible, context-sensitive assignment key for R/S")
    (description
      "Documentation at https://melpa.org/#/ess-smart-equals")
    (license #f)))

(define-public emacs-ess-smart-underscore
  (package
    (name "emacs-ess-smart-underscore")
    (version "20190309.101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/ess-smart-underscore.el.git")
               (commit
                 "aa871c5b0448515db439ea9bed6a8574e82ddb47")))
        (sha256
          (base32
            "0knb4zfva2m0vd8awcfy5kyd21rjdhxnc1n74qazr9y82l5w7i9b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ess))
    (arguments
      '(#:files
        ("ess-smart-underscore.el"
         "dir"
         "ess-smart-underscore.info")))
    (home-page
      "http://github.com/mlf176f2/ess-smart-underscore.el")
    (synopsis "Ess Smart Underscore")
    (description
      "Documentation at https://melpa.org/#/ess-smart-underscore")
    (license #f)))

(define-public emacs-ess-view
  (package
    (name "emacs-ess-view")
    (version "20181001.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GioBo/ess-view.git")
               (commit
                 "925cafd876e2cc37bc756bb7fcf3f34534b457e2")))
        (sha256
          (base32
            "1hb83cjr711yg4dphbyg9nfkdmd1a6bcsqw964nwdarflw6jss24"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-s emacs-f))
    (home-page "https://github.com/GioBo/ess-view")
    (synopsis
      "View R dataframes in a spreadsheet software")
    (description
      "Documentation at https://melpa.org/#/ess-view")
    (license #f)))

(define-public emacs-ess-view-data
  (package
    (name "emacs-ess-view-data")
    (version "20230503.643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/ess-view-data.git")
               (commit
                 "c0b20e503c772eebbef6bbc6c89a707ba6ec42ec")))
        (sha256
          (base32
            "1ig2bsl0hqq21rza7ydcw15zdz5jfg076fyhnnk57gkp9ihna7mz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-csv-mode))
    (home-page
      "https://github.com/ShuguangSun/ess-view-data")
    (synopsis "View Data")
    (description
      "Documentation at https://melpa.org/#/ess-view-data")
    (license #f)))

(define-public emacs-esup
  (package
    (name "emacs-esup")
    (version "20220202.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jschaf/esup.git")
               (commit
                 "4b49c8d599d4cc0fbf994e9e54a9c78e5ab62a5f")))
        (sha256
          (base32
            "1zyix297qpgx0l90afg1pxalsjph6yb7b2qxy2rxmbl9fkn4b774"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/jschaf/esup")
    (synopsis "The Emacs StartUp Profiler (ESUP)")
    (description
      "Documentation at https://melpa.org/#/esup")
    (license #f)))

(define-public emacs-esxml
  (package
    (name "emacs-esxml")
    (version "20230308.2254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tali713/esxml.git")
               (commit
                 "225693096a587492d76bf696d1f0c25c61f7d531")))
        (sha256
          (base32
            "1cciflr51smahv1x0hr2kwl24ivv54arnqn32s16l77dwy5dvy60"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kv))
    (arguments
      '(#:files ("esxml.el" "esxml-query.el")))
    (home-page "https://github.com/tali713/esxml")
    (synopsis
      "Library for working with xml via esxml and sxml")
    (description
      "Documentation at https://melpa.org/#/esxml")
    (license #f)))

(define-public emacs-eta
  (package
    (name "emacs-eta")
    (version "20210115.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zcaudate/eta.git")
               (commit
                 "c7540ac50163f368fec1918dfc334304d9b36c51")))
        (sha256
          (base32
            "02xkrcrf62z303axy4jxr9d2xy6sbxgp6x5dj917xd04hygiqwj0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht emacs-dash))
    (home-page "https://www.github.com/zcaudate/eta")
    (synopsis "standard and multi dispatch key bind")
    (description
      "Documentation at https://melpa.org/#/eta")
    (license #f)))

(define-public emacs-etable
  (package
    (name "emacs-etable")
    (version "20161028.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/ETable.git")
               (commit
                 "d502141f0c69bf95256ba5cb9cd15350c7e942d2")))
        (sha256
          (base32
            "0k0g58qzkkzall715k0864v3b7p5jnfwxqgmkj087x34frcf388k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-interval-list))
    (home-page "https://github.com/Fuco1/ETable")
    (synopsis
      "Implementation of javax.swing.JTable for Emacs.")
    (description
      "Documentation at https://melpa.org/#/etable")
    (license #f)))

(define-public emacs-etc-sudoers-mode
  (package
    (name "emacs-etc-sudoers-mode")
    (version "20201102.1707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mavit/etc-sudoers-mode.git")
               (commit
                 "74c66c58c9578a0d841206d5dec04d81e7b3d741")))
        (sha256
          (base32
            "0f4glimf9xf87nv23vq5cjhr92f0avzvimnr9v829d69fjmjghni"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sudo-edit emacs-with-editor))
    (home-page
      "https://gitlab.com/mavit/etc-sudoers-mode/")
    (synopsis "Edit Sudo security policies")
    (description
      "Documentation at https://melpa.org/#/etc-sudoers-mode")
    (license #f)))

(define-public emacs-etd
  (package
    (name "emacs-etd")
    (version "20230711.547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/etd.git")
               (commit
                 "58900ac287ba417bd0ee3d5b3104e86c0c42617d")))
        (sha256
          (base32
            "12m8pq87y8ghf33npqri7sl9a1bd4z5pkwanyw07d483hfpqnc5i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/kurecolor")
    (synopsis "Examples to Tests and Docs")
    (description
      "Documentation at https://melpa.org/#/etd")
    (license #f)))

(define-public emacs-eterm-256color
  (package
    (name "emacs-eterm-256color")
    (version "20210224.2241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/eterm-256color.git")
               (commit
                 "c9cfccef03e730f7ab2b407aada3df15ace1fe32")))
        (sha256
          (base32
            "1ip1mcry2mryr3gzina16c7m2pw71klx1ldbfv8w7rv8fsx2dsma"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xterm-color emacs-f))
    (arguments
      '(#:files (:defaults "eterm-256color.ti")))
    (home-page
      "http://github.com/dieggsy/eterm-256color")
    (synopsis "Customizable 256 colors for term.")
    (description
      "Documentation at https://melpa.org/#/eterm-256color")
    (license #f)))

(define-public emacs-eterm-fn
  (package
    (name "emacs-eterm-fn")
    (version "20191010.2331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/eterm-fn.git")
               (commit
                 "66f3b2f6308fa2ac4d8a32be5a7e35a96e08a9ee")))
        (sha256
          (base32
            "1vw2ha3x2yfkb20g9hfppkrb3mp9r07shb65wsf1b99mw8m22xwi"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.ti")))
    (home-page
      "https://github.com/oitofelix/eterm-fn")
    (synopsis "Function keys (F1--F12) for term.")
    (description
      "Documentation at https://melpa.org/#/eterm-fn")
    (license #f)))

(define-public emacs-ethan-wspace
  (package
    (name "emacs-ethan-wspace")
    (version "20201106.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/glasserc/ethan-wspace.git")
               (commit
                 "035c7d698c99e3891a522d6e6f8fde23c6267c15")))
        (sha256
          (base32
            "18wdk9bi822lx2ip9g1v443sc6qzq3zvxmyg32nsf6v85102z19k"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page "unspecified")
    (synopsis "whitespace customizations for emacs")
    (description
      "Documentation at https://melpa.org/#/ethan-wspace")
    (license #f)))

(define-public emacs-etherpad
  (package
    (name "emacs-etherpad")
    (version "20230530.1248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/ethermacs.git")
               (commit
                 "29409bf9ff05b74d942c1cd7a421eeec2ef96e49")))
        (sha256
          (base32
            "0gmyz3drs4w8g16xyypjawvrg2ckb9513p98hx9xmgyfyr5crbkk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-websocket
            emacs-parsec
            emacs-0xc))
    (home-page "https://github.com/zzkt/ethermacs")
    (synopsis "Interface to the Etherpad API")
    (description
      "Documentation at https://melpa.org/#/etherpad")
    (license #f)))

(define-public emacs-euslisp-mode
  (package
    (name "emacs-euslisp-mode")
    (version "20170830.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iory/euslisp-mode.git")
               (commit
                 "db62a2d148482317794727982576494596365a55")))
        (sha256
          (base32
            "187ij4s7mzppgmh0ifny70mw8w31nq86rhsrmnflz26iywnkp8x2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-exec-path-from-shell
            emacs-helm-ag))
    (arguments '(#:files (:defaults "*.py")))
    (home-page
      "https://github.com/iory/euslisp-mode")
    (synopsis
      "Major mode for Euslisp-formatted text")
    (description
      "Documentation at https://melpa.org/#/euslisp-mode")
    (license #f)))

(define-public emacs-eval-expr
  (package
    (name "emacs-eval-expr")
    (version "20120619.647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/eval-expr.git")
               (commit
                 "a0e69e83de41df8dbccefc1962ab4f02206a3328")))
        (sha256
          (base32
            "08zw3qrhqmnv2wxmbf74svk2cx5by4831kyw6rx13imkc4x8kngx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "enhanced eval-expression command")
    (description
      "Documentation at https://melpa.org/#/eval-expr")
    (license #f)))

(define-public emacs-eval-in-repl
  (package
    (name "emacs-eval-in-repl")
    (version "20230805.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaz-yos/eval-in-repl.git")
               (commit
                 "a57c6a790c0ca72b0d1218b837d3114ef874dd1f")))
        (sha256
          (base32
            "013g72lxc2qpk55v9c4im1977imiw0gc1l78srimpgm117jjhs4x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-paredit emacs-ace-window))
    (home-page
      "https://github.com/kaz-yos/eval-in-repl")
    (synopsis
      "Consistent ESS-like eval interface for various REPLs")
    (description
      "Documentation at https://melpa.org/#/eval-in-repl")
    (license #f)))

(define-public emacs-eval-sexp-fu
  (package
    (name "emacs-eval-sexp-fu")
    (version "20191128.825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hchbaw/eval-sexp-fu.el.git")
               (commit
                 "36d2fe3bcf602e15ca10a7f487da103515ef391a")))
        (sha256
          (base32
            "19rv0kwajq0j8inglp84sml23ci74wdcvp5bl6zxbw5skqpf6phr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Tiny functionality enhancements for evaluating sexps.")
    (description
      "Documentation at https://melpa.org/#/eval-sexp-fu")
    (license #f)))

(define-public emacs-evalator
  (package
    (name "emacs-evalator")
    (version "20160213.128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanirby/evalator.git")
               (commit
                 "f30da4da48c0b3f3cfa1fc1c7cfdb53ffe79df36")))
        (sha256
          (base32
            "1llxxdprs8yw2hqj4dhrkrrzmkl25h7p4rcaa2cw544fmg3kvlz1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "http://www.github.com/seanirby/evalator")
    (synopsis
      "Package for interactive transformation of data with helm")
    (description
      "Documentation at https://melpa.org/#/evalator")
    (license #f)))

(define-public emacs-evalator-clojure
  (package
    (name "emacs-evalator-clojure")
    (version "20160208.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanirby/evalator-clojure.git")
               (commit
                 "caa4e0a137bdfada86593128a654e16aa617ad50")))
        (sha256
          (base32
            "1q5s1ffmfh5dby92853xm8kjhgjfd5vbvcg1xbf8lswc1i41k7n7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-evalator))
    (arguments '(#:files (:defaults "*.clj")))
    (home-page
      "http://www.github.com/seanirby/evalator-clojure")
    (synopsis
      "Clojure evaluation context for evalator via CIDER.")
    (description
      "Documentation at https://melpa.org/#/evalator-clojure")
    (license #f)))

(define-public emacs-eve-mode
  (package
    (name "emacs-eve-mode")
    (version "20170822.2231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/witheve/emacs-eve-mode.git")
               (commit
                 "a4661114d9c18725691b76321d72167ca5a9070a")))
        (sha256
          (base32
            "19s6cid42q0lm2w94a7f6sxvmy3zpjdj5r5dbwcxxp5n3qfs7nip"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-markdown-mode))
    (home-page
      "https://github.com/witheve/emacs-eve-mode")
    (synopsis
      "Major mode for editing Eve documents.")
    (description
      "Documentation at https://melpa.org/#/eve-mode")
    (license #f)))

(define-public emacs-everlasting-scratch
  (package
    (name "emacs-everlasting-scratch")
    (version "20230105.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beacoder/everlasting-scratch.git")
               (commit
                 "1b7dac779501dcd988552aa6455a5be89e8b0562")))
        (sha256
          (base32
            "0hpv7a7jjs0shs7cda8q1bigwjb31miqbf8f4wr2swmjhh15w7h8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/beacoder/everlasting-scratch")
    (synopsis "The *scratch* that lasts forever")
    (description
      "Documentation at https://melpa.org/#/everlasting-scratch")
    (license #f)))

(define-public emacs-evil
  (package
    (name "emacs-evil")
    (version "20231106.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil.git")
               (commit
                 "c4f95fd9ec284a8284405f84102bfdb74f0ee22f")))
        (sha256
          (base32
            "07frgwzj6jfrcln6vc4c0pahgfrbrky50gz3mzck781xpmvkhwj9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-goto-chg))
    (arguments
      '(#:files
        (:defaults
          "doc/build/texinfo/evil.texi"
          (:exclude "evil-test-helpers.el"))))
    (home-page "https://github.com/emacs-evil/evil")
    (synopsis "Extensible Vi layer for Emacs.")
    (description
      "Documentation at https://melpa.org/#/evil")
    (license #f)))

(define-public emacs-evil-anzu
  (package
    (name "emacs-evil-anzu")
    (version "20220911.1939")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/evil-anzu.git")
               (commit
                 "d1e98ee6976437164627542909a25c6946497899")))
        (sha256
          (base32
            "1i8f360lq5a32knkzbwdw10ql9cxsmgfd4iiwnr7vcwacm34zq88"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-anzu))
    (home-page
      "https://github.com/syohex/emacs-evil-anzu")
    (synopsis "anzu for evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-anzu")
    (license #f)))

(define-public emacs-evil-args
  (package
    (name "emacs-evil-args")
    (version "20220125.1626")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wcsmith/evil-args.git")
               (commit
                 "2671071a4a57eaee7cc8c27b9e4b6fc60fd2ccd3")))
        (sha256
          (base32
            "13avgl0whfp1xdsmp0j7qr5p2nh59swb2lyfpr7fz6bkgifrn212"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "http://github.com/wcsmith/evil-args")
    (synopsis
      "Motions and text objects for delimited arguments in Evil.")
    (description
      "Documentation at https://melpa.org/#/evil-args")
    (license #f)))

(define-public emacs-evil-avy
  (package
    (name "emacs-evil-avy")
    (version "20150908.748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/louy2/evil-avy.git")
               (commit
                 "2dd955cc3ecaa7ddeb67b295298abdc6d16dd3a5")))
        (sha256
          (base32
            "1q6znbnshk45mdglx519qlbfhb7g47qsm245i93ka4djsjy55j9l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy emacs-evil))
    (home-page "https://github.com/louy2/evil-avy")
    (synopsis "set-based completion")
    (description
      "Documentation at https://melpa.org/#/evil-avy")
    (license #f)))

(define-public emacs-evil-better-visual-line
  (package
    (name "emacs-evil-better-visual-line")
    (version "20200123.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/YourFin/evil-better-visual-line.git")
               (commit
                 "4373f930ab1a8d3a2a90e68540967702313b2ce9")))
        (sha256
          (base32
            "0dnh932ib3hhphprm1jjh1hdwnj96d6cnfc64rj2y4mgxji4y19l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/yourfin/evil-better-visual-line")
    (synopsis "gj and gk visual line mode fix")
    (description
      "Documentation at https://melpa.org/#/evil-better-visual-line")
    (license #f)))

(define-public emacs-evil-cleverparens
  (package
    (name "emacs-evil-cleverparens")
    (version "20231001.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-cleverparens.git")
               (commit
                 "134fe3396f975fb1ad261f52cd113f42ac1da4fc")))
        (sha256
          (base32
            "1jaakqfrhb0xr1ffph9qnpl0hlgggskz0lz9d880v6dlkg6w7z85"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil
            emacs-paredit
            emacs-smartparens
            emacs-dash))
    (home-page
      "https://github.com/emacs-evil/evil-cleverparens")
    (synopsis
      "Evil friendly minor-mode for editing lisp.")
    (description
      "Documentation at https://melpa.org/#/evil-cleverparens")
    (license #f)))

(define-public emacs-evil-colemak-basics
  (package
    (name "emacs-evil-colemak-basics")
    (version "20221230.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-evil-colemak-basics.git")
               (commit
                 "ea519b962f051cabced8aadaf6ed0134b861225c")))
        (sha256
          (base32
            "10gk3gi1g35xjkg6qfs3k83p9z8bz5pbi4av7g4ibj5f8h70gxzi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-evil-snipe))
    (home-page
      "https://github.com/wbolster/evil-colemak-basics")
    (synopsis
      "Basic Colemak key bindings for evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-colemak-basics")
    (license #f)))

(define-public emacs-evil-colemak-minimal
  (package
    (name "emacs-evil-colemak-minimal")
    (version "20171006.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmallred/evil-colemak-minimal.git")
               (commit
                 "6d98b6da60f414524a0d718f76024c26dce742b3")))
        (sha256
          (base32
            "0pd05jq4qkw5xx7xqzxzx62fsm77vjz0ry9ayaqgqw5831rbp553"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (arguments
      '(#:files ("evil-colemak-minimal.el")))
    (home-page
      "https://github.com/bmallred/evil-colemak-minimal")
    (synopsis
      "Minimal Colemak key bindings for evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-colemak-minimal")
    (license #f)))

(define-public emacs-evil-collection
  (package
    (name "emacs-evil-collection")
    (version "20231019.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-collection.git")
               (commit
                 "18304d9d9e4243687a7bf915dc7e591a216873c6")))
        (sha256
          (base32
            "1qcnxs22ghan5jsla05cprvgl6mswyaymby2z2yrhykrch4zak7g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-annalist))
    (arguments '(#:files (:defaults "modes")))
    (home-page
      "https://github.com/emacs-evil/evil-collection")
    (synopsis "A set of keybindings for Evil mode")
    (description
      "Documentation at https://melpa.org/#/evil-collection")
    (license #f)))

(define-public emacs-evil-commentary
  (package
    (name "emacs-evil-commentary")
    (version "20230610.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/linktohack/evil-commentary.git")
               (commit
                 "c5945f28ce47644c828aac1f5f6ec335478d17fb")))
        (sha256
          (base32
            "11bj70kixsar41mw4as14wadhbg8q09dxi37n39cnw0xdli0fj9c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/linktohack/evil-commentary")
    (synopsis
      "Comment stuff out. A port of vim-commentary.")
    (description
      "Documentation at https://melpa.org/#/evil-commentary")
    (license #f)))

(define-public emacs-evil-dvorak
  (package
    (name "emacs-evil-dvorak")
    (version "20160416.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jbranso/evil-dvorak.git")
               (commit
                 "824f7c56980d72a0ff04c662223540cd66f13754")))
        (sha256
          (base32
            "15rnxhqc56g4ydr8drvcgzvjp8blxsarm86dqc36rym7g5gnxr20"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "unspecified")
    (synopsis
      "evil keybindings for that work with dvorak mode")
    (description
      "Documentation at https://melpa.org/#/evil-dvorak")
    (license #f)))

(define-public emacs-evil-easymotion
  (package
    (name "emacs-evil-easymotion")
    (version "20200424.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/evil-easymotion.git")
               (commit
                 "f96c2ed38ddc07908db7c3c11bcd6285a3e8c2e9")))
        (sha256
          (base32
            "0xsva9bnlfwfmccm38qh3yvn4jr9za5rxqn4pwxbmhnx4rk47cch"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/pythonnut/evil-easymotion")
    (synopsis "A port of vim's easymotion to emacs")
    (description
      "Documentation at https://melpa.org/#/evil-easymotion")
    (license #f)))

(define-public emacs-evil-embrace
  (package
    (name "emacs-evil-embrace")
    (version "20230820.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/evil-embrace.el.git")
               (commit
                 "3081d37811b6a3dfaaf01d578c7ab7a746c6064d")))
        (sha256
          (base32
            "13rqkdhhzvnw3s49zm3v9xska8j8l1mr85czcfaf5vrm99lx8rl3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-embrace emacs-evil-surround))
    (home-page "unspecified")
    (synopsis "Evil integration of embrace.el")
    (description
      "Documentation at https://melpa.org/#/evil-embrace")
    (license #f)))

(define-public emacs-evil-escape
  (package
    (name "emacs-evil-escape")
    (version "20221010.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/evil-escape.git")
               (commit
                 "3c335a5709b1abb08687960038746b36add465f9")))
        (sha256
          (base32
            "1z30v59igndqzxg9gcx4bsbf5jkh11wp936il8azkrz3qdryaj4a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/emacsorphanage/evil-escape")
    (synopsis
      "Escape from anything with a customizable key sequence")
    (description
      "Documentation at https://melpa.org/#/evil-escape")
    (license #f)))

(define-public emacs-evil-ex-fasd
  (package
    (name "emacs-evil-ex-fasd")
    (version "20180903.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/evil-ex-fasd.git")
               (commit
                 "ed8fbbe23a8a268d9dcbf1a6132e928ba2c655c5")))
        (sha256
          (base32
            "0fr57nlg7m65gzhnrwnqi5bgy4vzl0l0mxk63sr3561r8fnm8hbc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-fasd))
    (home-page
      "https://github.com/yqrashawn/evil-ex-fasd")
    (synopsis "using fasd right from evil-ex")
    (description
      "Documentation at https://melpa.org/#/evil-ex-fasd")
    (license #f)))

(define-public emacs-evil-ex-shell-command
  (package
    (name "emacs-evil-ex-shell-command")
    (version "20181226.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/evil-ex-shell-command.git")
               (commit
                 "a6ca6d27c07f6a0807abfb5b8f8865f1d17f54aa")))
        (sha256
          (base32
            "0jx2cj6p8wag7aphbgf3ij5v71prxkbxpfia8nmcpmrpvjqpsb74"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/yqrashawn/evil-ex-shell-command")
    (synopsis
      "invoke shell-command right from evil-ex")
    (description
      "Documentation at https://melpa.org/#/evil-ex-shell-command")
    (license #f)))

(define-public emacs-evil-exchange
  (package
    (name "emacs-evil-exchange")
    (version "20200118.252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/evil-exchange.git")
               (commit
                 "ac50f21b29b6e3a111e10a9e88ae61c907ac5ee8")))
        (sha256
          (base32
            "0yl6lw2vz2qf97rvfmd83i3v41yl8bp7srhmxgxmhwksy589s5y9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/Dewdrops/evil-exchange")
    (synopsis
      "Exchange text more easily within Evil")
    (description
      "Documentation at https://melpa.org/#/evil-exchange")
    (license #f)))

(define-public emacs-evil-expat
  (package
    (name "emacs-evil-expat")
    (version "20190521.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edkolev/evil-expat.git")
               (commit
                 "f4fcd0aa3edc359adb5c986b5dd9188d220d84e2")))
        (sha256
          (base32
            "0872ix682hkdz0k8pn6sb54rqkx00rz5fxpd5j2snx406yagpaxz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/edkolev/evil-expat")
    (synopsis "Evil ex commands")
    (description
      "Documentation at https://melpa.org/#/evil-expat")
    (license #f)))

(define-public emacs-evil-extra-operator
  (package
    (name "emacs-evil-extra-operator")
    (version "20210225.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/evil-extra-operator.git")
               (commit
                 "fb249889acacc3e28869491195391fa6f617ae56")))
        (sha256
          (base32
            "049325xd7yk707mncz8mm8cshryh2ir1zf6ahwikr11iwsxgfajd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/Dewdrops/evil-extra-operator")
    (synopsis
      "Evil operator for evaluating codes, taking notes, searching via google, etc.")
    (description
      "Documentation at https://melpa.org/#/evil-extra-operator")
    (license #f)))

(define-public emacs-evil-find-char-pinyin
  (package
    (name "emacs-evil-find-char-pinyin")
    (version "20160514.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/evil-find-char-pinyin.git")
               (commit
                 "04e277946d658f1a73c68dcbbadea9c21097a31c")))
        (sha256
          (base32
            "1bsy2bynzxr1ibyidv2r21xnfnxbzr0xh5m3h05s5igbmajxr12d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-pinyinlib))
    (home-page "unspecified")
    (synopsis
      "Evil's f/F/t/T/evil-snipe commands with Pinyin support")
    (description
      "Documentation at https://melpa.org/#/evil-find-char-pinyin")
    (license #f)))

(define-public emacs-evil-fringe-mark
  (package
    (name "emacs-evil-fringe-mark")
    (version "20190320.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andrew-William-Smith/evil-fringe-mark.git")
               (commit
                 "a1689fddb7ee79aaa720a77aada1208b8afd5c20")))
        (sha256
          (base32
            "0pf8bl7bmcn1l0dlxkgbgwb1n2fxpzxwcr4jf06gzyrrmmwah526"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil
            emacs-fringe-helper
            emacs-goto-chg))
    (home-page
      "https://github.com/Andrew-William-Smith/evil-fringe-mark")
    (synopsis
      "Display evil-mode marks in the fringe")
    (description
      "Documentation at https://melpa.org/#/evil-fringe-mark")
    (license #f)))

(define-public emacs-evil-god-state
  (package
    (name "emacs-evil-god-state")
    (version "20141117.255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gridaphobe/evil-god-state.git")
               (commit
                 "3d44197dc0a1fb40e7b7ff8717f8a8c339ce1d40")))
        (sha256
          (base32
            "1cv24qnxxf6n1grf4n5969v8y9xll5zb9mbfdnq9iavdvhnndk2h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-god-mode))
    (home-page
      "https://github.com/gridaphobe/evil-god-state")
    (synopsis
      "use god-mode keybindings in evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-god-state")
    (license #f)))

(define-public emacs-evil-goggles
  (package
    (name "emacs-evil-goggles")
    (version "20231021.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edkolev/evil-goggles.git")
               (commit
                 "34ca276a85f615d2b45e714c9f8b5875bcb676f3")))
        (sha256
          (base32
            "1bcw7b2mi3chglg40nxzg1khbx6fpspjgcnbljycg658pkziz29m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/edkolev/evil-goggles")
    (synopsis "Add a visual hint to evil operations")
    (description
      "Documentation at https://melpa.org/#/evil-goggles")
    (license #f)))

(define-public emacs-evil-iedit-state
  (package
    (name "emacs-evil-iedit-state")
    (version "20220219.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/evil-iedit-state.git")
               (commit
                 "6f7b502447ba35676375169d7707372ebad2791f")))
        (sha256
          (base32
            "0vjzjmp3ba0nzf0v04bhxvzgdwwm11vivxqjzgnvp3kq95kajr5h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-iedit))
    (home-page
      "https://github.com/syl20bnr/evil-iedit-state")
    (synopsis "Evil states to interface iedit mode.")
    (description
      "Documentation at https://melpa.org/#/evil-iedit-state")
    (license #f)))

(define-public emacs-evil-indent-plus
  (package
    (name "emacs-evil-indent-plus")
    (version "20230927.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheBB/evil-indent-plus.git")
               (commit
                 "f392696e4813f1d3a92c7eeed333248914ba6dae")))
        (sha256
          (base32
            "1ib1yqcw9w1scc9lng2w2kiczabbkg1q4lh4dy06lsd85d9i9sik"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/TheBB/evil-indent-plus")
    (synopsis
      "Evil textobjects based on indentation")
    (description
      "Documentation at https://melpa.org/#/evil-indent-plus")
    (license #f)))

(define-public emacs-evil-indent-textobject
  (package
    (name "emacs-evil-indent-textobject")
    (version "20130831.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cofi/evil-indent-textobject.git")
               (commit
                 "70a1154a531b7cfdbb9a31d6922482791e20a3a7")))
        (sha256
          (base32
            "0nghisnc49ivh56mddfdlcbqv3y2vqzjvkpgwv3zp80ga6ghvdmz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/cofi/evil-indent-textobject")
    (synopsis
      "evil textobjects based on indentation")
    (description
      "Documentation at https://melpa.org/#/evil-indent-textobject")
    (license #f)))

(define-public emacs-evil-leader
  (package
    (name "emacs-evil-leader")
    (version "20140606.1243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cofi/evil-leader.git")
               (commit
                 "39f7014bcf8b36463e0c7512c638bda4bac6c2cf")))
        (sha256
          (base32
            "10xrlimsxk09z9cw6rxdz8qvvn1i0vhc1gdicwxri0j10p0hacl3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "http://github.com/cofi/evil-leader")
    (synopsis "let there be <leader>")
    (description
      "Documentation at https://melpa.org/#/evil-leader")
    (license #f)))

(define-public emacs-evil-ledger
  (package
    (name "emacs-evil-ledger")
    (version "20180802.1612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atheriel/evil-ledger.git")
               (commit
                 "7a9f9f5d39c42fffdba8004f8982642351f2b233")))
        (sha256
          (base32
            "010r1qn9l3clqqrlia0y25bqjbrixvf8i409v10yxqb949jvw1vk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-ledger-mode))
    (home-page
      "https://github.com/atheriel/evil-ledger")
    (synopsis "Make `ledger-mode' more `evil'.")
    (description
      "Documentation at https://melpa.org/#/evil-ledger")
    (license #f)))

(define-public emacs-evil-lion
  (package
    (name "emacs-evil-lion")
    (version "20220317.1030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edkolev/evil-lion.git")
               (commit
                 "4da660e124731ed65e7aaa6c067c30e876619429")))
        (sha256
          (base32
            "0akhw0a9qsk65lvanb57fqh7hf601xdzkbyi560ximfrsr7f94pi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (arguments '(#:files ("evil-lion.el")))
    (home-page "http://github.com/edkolev/evil-lion")
    (synopsis
      "Evil align operator, port of vim-lion")
    (description
      "Documentation at https://melpa.org/#/evil-lion")
    (license #f)))

(define-public emacs-evil-lisp-state
  (package
    (name "emacs-evil-lisp-state")
    (version "20160404.248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/evil-lisp-state.git")
               (commit
                 "3c65fecd9917a41eaf6460f22187e2323821f3ce")))
        (sha256
          (base32
            "1n6r8xs670r5qp4b5f72nr9g8nlqcrx1v7yqqlbkgv8gns8n5xgh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil
            emacs-bind-map
            emacs-smartparens))
    (home-page
      "https://github.com/syl20bnr/evil-lisp-state")
    (synopsis "An evil state to edit Lisp code")
    (description
      "Documentation at https://melpa.org/#/evil-lisp-state")
    (license #f)))

(define-public emacs-evil-lispy
  (package
    (name "emacs-evil-lispy")
    (version "20190502.739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sp3ctum/evil-lispy.git")
               (commit
                 "ed317f7fccbdbeea8aa04a91b1b1f48a0e2ddc4e")))
        (sha256
          (base32
            "0izgd9zwfwykmznv6wjrq9czmjqc1hkw41szrjmrcxy5kbz1p5c0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lispy emacs-evil emacs-hydra))
    (home-page
      "https://github.com/sp3ctum/evil-lispy")
    (synopsis
      "precision Lisp editing with Evil and Lispy")
    (description
      "Documentation at https://melpa.org/#/evil-lispy")
    (license #f)))

(define-public emacs-evil-mark-replace
  (package
    (name "emacs-evil-mark-replace")
    (version "20200630.940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/evil-mark-replace.git")
               (commit
                 "d4fec7b10e93cca149163324cd2b2b2dcc211047")))
        (sha256
          (base32
            "0v08jwb92igd8cxbb1nxjdzwymppcaar9mf89dmbk7jkqif2q72z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/redguardtoo/evil-mark-replace")
    (synopsis "replace the thing in marked area")
    (description
      "Documentation at https://melpa.org/#/evil-mark-replace")
    (license #f)))

(define-public emacs-evil-matchit
  (package
    (name "emacs-evil-matchit")
    (version "20231011.1119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/evil-matchit.git")
               (commit
                 "fe4cc5243a23ba7aa283803b200993f23b5dafef")))
        (sha256
          (base32
            "0zjlnl40yx1n5d275m5kd46hx758g301akr2jbnbrrifv18p3j7h"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/evil-matchit")
    (synopsis "Vim matchit ported to Evil")
    (description
      "Documentation at https://melpa.org/#/evil-matchit")
    (license #f)))

(define-public emacs-evil-mc
  (package
    (name "emacs-evil-mc")
    (version "20230529.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabesoft/evil-mc.git")
               (commit
                 "bdf893ea6f52fd0f10bece8ddae813658e17bbb4")))
        (sha256
          (base32
            "12r2vi3a3la93fm18rcwjy6v6x4rqa6khryxggdki3whlmzv60xf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/gabesoft/evil-mc")
    (synopsis "Multiple cursors for evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-mc")
    (license #f)))

(define-public emacs-evil-mc-extras
  (package
    (name "emacs-evil-mc-extras")
    (version "20170202.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabesoft/evil-mc-extras.git")
               (commit
                 "8c1af3232dd1e15b2ea38360b8cd1e857e11c416")))
        (sha256
          (base32
            "0f67ky9w2qapah0l0ym2c6x1j3ngf8whp1ls42f3kzb9gfi36fpn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil
            emacs-evil-mc
            emacs-evil-numbers))
    (home-page
      "https://github.com/gabesoft/evil-mc-extras")
    (synopsis "Extra functionality for evil-mc")
    (description
      "Documentation at https://melpa.org/#/evil-mc-extras")
    (license #f)))

(define-public emacs-evil-mu4e
  (package
    (name "emacs-evil-mu4e")
    (version "20180613.1039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JorisE/evil-mu4e.git")
               (commit
                 "5b22c1e30246318f233264506272d770f63897ca")))
        (sha256
          (base32
            "17qppyw9sx8y6caiwraxnbs4fkhvjsfk4brda7jy9wd0i074mwk4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/JorisE/evil-mu4e")
    (synopsis "evil-based key bindings for mu4e")
    (description
      "Documentation at https://melpa.org/#/evil-mu4e")
    (license #f)))

(define-public emacs-evil-multiedit
  (package
    (name "emacs-evil-multiedit")
    (version "20211121.1650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/evil-multiedit.git")
               (commit
                 "23b53bc8743fb82a8854ba907b1d277374c93a79")))
        (sha256
          (base32
            "08ycwss58zh2zikk79jfj074q78yjcd7vbjgv5ssqvws09x5rgfq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-iedit))
    (home-page
      "https://github.com/hlissner/evil-multiedit")
    (synopsis "multiple cursors for evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-multiedit")
    (license #f)))

(define-public emacs-evil-nerd-commenter
  (package
    (name "emacs-evil-nerd-commenter")
    (version "20230625.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/evil-nerd-commenter.git")
               (commit
                 "3b197a2b559b06a7cf39978704b196f53dac802a")))
        (sha256
          (base32
            "1xi4sd75pzhgcd9lzhx18hlzbrwh5q9gbscb1971qn94mzxwd60r"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/evil-nerd-commenter")
    (synopsis
      "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim")
    (description
      "Documentation at https://melpa.org/#/evil-nerd-commenter")
    (license #f)))

(define-public emacs-evil-nl-break-undo
  (package
    (name "emacs-evil-nl-break-undo")
    (version "20181125.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/VanLaser/evil-nl-break-undo.git")
               (commit
                 "4a8f2bf99c978a109eeb92965a72a17bedb68762")))
        (sha256
          (base32
            "0xnjzdbn0rzzr1vkd31swdhxj2vm7xijhn5s5gigmsm3i0n4k0sa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/VanLaser/evil-nl-break-undo")
    (synopsis "Break evil's undo sequence on CR")
    (description
      "Documentation at https://melpa.org/#/evil-nl-break-undo")
    (license #f)))

(define-public emacs-evil-numbers
  (package
    (name "emacs-evil-numbers")
    (version "20230117.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juliapath/evil-numbers.git")
               (commit
                 "8724645c84dc310f6155eec452913bb79c0c44b3")))
        (sha256
          (base32
            "0dxw2d85zxnh7rgfq1vn9b71nrn48j5c7fwbzb02m74qddcjnjg0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/juliapath/evil-numbers")
    (synopsis
      "Increment/decrement numbers like in VIM")
    (description
      "Documentation at https://melpa.org/#/evil-numbers")
    (license #f)))

(define-public emacs-evil-opener
  (package
    (name "emacs-evil-opener")
    (version "20161207.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/0robustus1/opener.el.git")
               (commit
                 "c384f67278046fdcd220275fdd212ab85672cbeb")))
        (sha256
          (base32
            "0gci909a2rbx5i8dyzyrcddwdic7nvpk6y6djvn521yaag4sq87h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-opener))
    (arguments
      '(#:files ("evil-opener.el" "evil-opener.texi")))
    (home-page
      "https://github.com/0robustus1/opener.el")
    (synopsis "opening urls as buffers in evil")
    (description
      "Documentation at https://melpa.org/#/evil-opener")
    (license #f)))

(define-public emacs-evil-org
  (package
    (name "emacs-evil-org")
    (version "20221001.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Somelauw/evil-org-mode.git")
               (commit
                 "b1f309726b1326e1a103742524ec331789f2bf94")))
        (sha256
          (base32
            "1xjmar7zny1g62881ym2dpp3f0cmwh8y8d14phja8y4w6nhiz3s4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/Somelauw/evil-org-mode.git")
    (synopsis "evil keybindings for org-mode")
    (description
      "Documentation at https://melpa.org/#/evil-org")
    (license #f)))

(define-public emacs-evil-owl
  (package
    (name "emacs-evil-owl")
    (version "20210416.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mamapanda/evil-owl.git")
               (commit
                 "a41a6d28e26052b25f3d21da37ccf1d8fde1e6aa")))
        (sha256
          (base32
            "15yp158krz3znixgxgcblmsfh0dbxc6bf7fig8757vnmjcwlpqrv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/mamapanda/evil-owl")
    (synopsis
      "Preview evil registers and marks before using them")
    (description
      "Documentation at https://melpa.org/#/evil-owl")
    (license #f)))

(define-public emacs-evil-paredit
  (package
    (name "emacs-evil-paredit")
    (version "20150413.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roman/evil-paredit.git")
               (commit
                 "e058fbdcf9dbf7ad6cc77f0172d7517ef233d55f")))
        (sha256
          (base32
            "0b08y4spapl4g2292j3l4cr84gjlvm3rpma3gqld4yb1sxd7v78p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-paredit))
    (arguments '(#:files ("evil-paredit.el")))
    (home-page
      "https://github.com/roman/evil-paredit")
    (synopsis "Paredit support for evil keybindings")
    (description
      "Documentation at https://melpa.org/#/evil-paredit")
    (license #f)))

(define-public emacs-evil-pinyin
  (package
    (name "emacs-evil-pinyin")
    (version "20231016.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/evil-pinyin.git")
               (commit
                 "0fae5ad8761417f027b33230382a50f826ad3bfb")))
        (sha256
          (base32
            "1byr9hpsa3gli4bvbsksc8sq7wpjidy7ilvprv386kjnq4l8z9mc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names emacs-evil))
    (home-page
      "https://github.com/laishulu/evil-pinyin")
    (synopsis
      "Evil search Chinese characters by pinyin")
    (description
      "Documentation at https://melpa.org/#/evil-pinyin")
    (license #f)))

(define-public emacs-evil-python-movement
  (package
    (name "emacs-evil-python-movement")
    (version "20180724.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/FelipeLema/evil-python-movement.el")
               (commit
                 "9936b3b7f8d96415d517c1f3604637889484a637")))
        (sha256
          (base32
            "11ivb95ilsw3svpna9n07yf8s9q3w36ia6js2qv6wf0d0dp2xb9r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-evil emacs-s))
    (home-page
      "https://bitbucket.org/FelipeLema/evil-python-movement.el/")
    (synopsis
      "Port Neovim's python movement to Evil")
    (description
      "Documentation at https://melpa.org/#/evil-python-movement")
    (license #f)))

(define-public emacs-evil-quickscope
  (package
    (name "emacs-evil-quickscope")
    (version "20160202.1924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blorbx/evil-quickscope.git")
               (commit
                 "37a20e4c56c6058abf186ad4013c155e695e876f")))
        (sha256
          (base32
            "1ja9ggj70wf0nmma4xnc1zdzg2crq9h1cv3cj7cgwjmllflgkfq7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/blorbx/evil-quickscope")
    (synopsis
      "Highlight unique characters in words for f,F,t,T navigation")
    (description
      "Documentation at https://melpa.org/#/evil-quickscope")
    (license #f)))

(define-public emacs-evil-rails
  (package
    (name "emacs-evil-rails")
    (version "20190512.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antono/evil-rails.git")
               (commit
                 "b0f1c5de6720714febeb76c4b569b71bb891938c")))
        (sha256
          (base32
            "0mypsbf0mg2b4746r9b9ybj51qkrlxz48lf9g53kzbk3wdf6p5vi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-projectile-rails))
    (home-page
      "https://github.com/antono/evil-rails")
    (synopsis "Rails support for Evil Mode")
    (description
      "Documentation at https://melpa.org/#/evil-rails")
    (license #f)))

(define-public emacs-evil-replace-with-char
  (package
    (name "emacs-evil-replace-with-char")
    (version "20180324.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ninrod/evil-replace-with-char.git")
               (commit
                 "ed4a12d5bff11163eb03ad2826c52fd30f51a8d3")))
        (sha256
          (base32
            "1nhnwl39wsi7akzcjqszxxw2b6j9i5y4qabcd8p387zajjpgscwk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/ninrod/evil-replace-with-char")
    (synopsis
      "replace chars of a text object with a char")
    (description
      "Documentation at https://melpa.org/#/evil-replace-with-char")
    (license #f)))

(define-public emacs-evil-replace-with-register
  (package
    (name "emacs-evil-replace-with-register")
    (version "20170713.925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/evil-ReplaceWithRegister.git")
               (commit
                 "91cc7bf21a94703c441cc9212214075b226b7f67")))
        (sha256
          (base32
            "14rpn76qrf287s3y2agmddcxi27r226i53ixjvd694ss039g0r11"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/Dewdrops/evil-ReplaceWithRegister")
    (synopsis
      "Port of vim plugin ReplaceWithRegister")
    (description
      "Documentation at https://melpa.org/#/evil-replace-with-register")
    (license #f)))

(define-public emacs-evil-rsi
  (package
    (name "emacs-evil-rsi")
    (version "20160221.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/linktohack/evil-rsi.git")
               (commit
                 "65ae60866be494e4622fe383e23975e04d2a42a3")))
        (sha256
          (base32
            "0cc2yxck5brnicllcadb4m5zlzczvdy6v38q34hj8bri1kxfzslz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/linktohack/evil-rsi")
    (synopsis
      "Use emacs motion keys in evil, inspired by vim-rsi")
    (description
      "Documentation at https://melpa.org/#/evil-rsi")
    (license #f)))

(define-public emacs-evil-ruby-text-objects
  (package
    (name "emacs-evil-ruby-text-objects")
    (version "20221130.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/porras/evil-ruby-text-objects.git")
               (commit
                 "41c8b3eddb610206626a8a03e69857f903209e86")))
        (sha256
          (base32
            "1gakixp64ds35vfykp0niy9gdxymr1rlx2hphlbic1952dinvx9c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/porras/evil-ruby-text-objects")
    (synopsis "Evil text objects for Ruby code")
    (description
      "Documentation at https://melpa.org/#/evil-ruby-text-objects")
    (license #f)))

(define-public emacs-evil-search-highlight-persist
  (package
    (name "emacs-evil-search-highlight-persist")
    (version "20170523.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/naclander/evil-search-highlight-persist.git")
               (commit
                 "979d2dec58d3b9c5ca5fdf4bb802a0209913794e")))
        (sha256
          (base32
            "0ak8r7cgz5xnjyfg3w9mwxhvaw8ny3hy0i2bqn3vf5dps649iy7i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-highlight))
    (home-page "unspecified")
    (synopsis "Persistent highlights after search")
    (description
      "Documentation at https://melpa.org/#/evil-search-highlight-persist")
    (license #f)))

(define-public emacs-evil-smartparens
  (package
    (name "emacs-evil-smartparens")
    (version "20171210.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/expez/evil-smartparens.git")
               (commit
                 "026d4a3cfce415a4dfae1457f871b385386e61d3")))
        (sha256
          (base32
            "05habba44zls2d20kgzshrq2psagay16cnvcnkqgrbhvj1rxfmrk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-smartparens))
    (home-page
      "https://www.github.com/expez/evil-smartparens")
    (synopsis "Evil support for smartparens")
    (description
      "Documentation at https://melpa.org/#/evil-smartparens")
    (license #f)))

(define-public emacs-evil-snipe
  (package
    (name "emacs-evil-snipe")
    (version "20230821.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/evil-snipe.git")
               (commit
                 "c2108d3932fcd2f75ac3e48250d6badd668f5b4f")))
        (sha256
          (base32
            "1h7vh24fvbbrq6vl2dfamfm20rxx9dx1rjfs639psksy57nj58j1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/hlissner/evil-snipe")
    (synopsis "emulate vim-sneak & vim-seek")
    (description
      "Documentation at https://melpa.org/#/evil-snipe")
    (license #f)))

(define-public emacs-evil-space
  (package
    (name "emacs-evil-space")
    (version "20151208.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/linktohack/evil-space.git")
               (commit
                 "a9c07284d308425deee134c9d88a2d538dd229e6")))
        (sha256
          (base32
            "1x4nphjq8lvg8qsm1pj04mk9n59xc6jlxiv5s3bih1nl4xkssrxy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "http://github.com/linktohack/evil-space")
    (synopsis
      "Repeat motion in Evil. Correct the behaviour of what SPC should do.")
    (description
      "Documentation at https://melpa.org/#/evil-space")
    (license #f)))

(define-public emacs-evil-string-inflection
  (package
    (name "emacs-evil-string-inflection")
    (version "20200524.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ninrod/evil-string-inflection.git")
               (commit
                 "d22a90ab807afa7f27f3815b5b5ea47d52d05218")))
        (sha256
          (base32
            "1vwch4kwwh82k1rlc9qsg74zbghn6vkgch5xb1wz0dmbv4id06l5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-string-inflection))
    (home-page
      "https://github.com/ninrod/evil-string-inflection")
    (synopsis
      "snake_case -> CamelCase -> etc. for text objects")
    (description
      "Documentation at https://melpa.org/#/evil-string-inflection")
    (license #f)))

(define-public emacs-evil-surround
  (package
    (name "emacs-evil-surround")
    (version "20230917.1541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil-surround.git")
               (commit
                 "bd98f7f5492446885dc4c6b0a7579c75c22ac829")))
        (sha256
          (base32
            "1lj97qnzzi2dwgcak8vaaq5vhrkh84cxzzcsxs6jl93ghjyfmykr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "unspecified")
    (synopsis "emulate surround.vim from Vim")
    (description
      "Documentation at https://melpa.org/#/evil-surround")
    (license #f)))

(define-public emacs-evil-swap-keys
  (package
    (name "emacs-evil-swap-keys")
    (version "20191105.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/evil-swap-keys.git")
               (commit
                 "b5ef105499f998b5667da40da30c073229a213ea")))
        (sha256
          (base32
            "1kawq9c64cmkdjy03sfppjn7g9anxnmds3ip7cgj1j0yym0glyfq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wbolster/evil-swap-keys")
    (synopsis
      "Intelligently swap keys on text input with evil")
    (description
      "Documentation at https://melpa.org/#/evil-swap-keys")
    (license #f)))

(define-public emacs-evil-tabs
  (package
    (name "emacs-evil-tabs")
    (version "20160217.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/evil-tabs.git")
               (commit
                 "53d3314a810017b6056ab6796aef671f5ea1c063")))
        (sha256
          (base32
            "1qklx0j3fz3mp87v64yqbyyq5csfymbjfwvy2s4nk634wbnrra93"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-elscreen))
    (home-page
      "https://github.com/krisajenkins/evil-tabs")
    (synopsis
      "Integrating Vim-style tabs for Evil mode users.")
    (description
      "Documentation at https://melpa.org/#/evil-tabs")
    (license #f)))

(define-public emacs-evil-terminal-cursor-changer
  (package
    (name "emacs-evil-terminal-cursor-changer")
    (version "20231031.852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/7696122/evil-terminal-cursor-changer.git")
               (commit
                 "2358f3e27d89128361cf80fcfa092fdfe5b52fd8")))
        (sha256
          (base32
            "0nssajjkmfhd9nvdvvkkja2vc1x2hwlpj3amnzry35jnbfq35c5f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/7696122/evil-terminal-cursor-changer")
    (synopsis
      "Change cursor shape and color by evil state in terminal")
    (description
      "Documentation at https://melpa.org/#/evil-terminal-cursor-changer")
    (license #f)))

(define-public emacs-evil-test-helpers
  (package
    (name "emacs-evil-test-helpers")
    (version "20230820.2246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/evil.git")
               (commit
                 "9eb69b7f5b3c72cfc66f69b3242e935015780654")))
        (sha256
          (base32
            "0y2ij9lil9nrjzqw0cbizznf4bmgbajl6jwxvinqwfvbvg8dpz3j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (arguments '(#:files ("evil-test-helpers.el")))
    (home-page "unspecified")
    (synopsis "unit test helpers for Evil")
    (description
      "Documentation at https://melpa.org/#/evil-test-helpers")
    (license #f)))

(define-public emacs-evil-tex
  (package
    (name "emacs-evil-tex")
    (version "20230715.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iyefrat/evil-tex.git")
               (commit
                 "2a3177c818f106e6c11032ac261f8691f5e11f74")))
        (sha256
          (base32
            "1v8phfnan474d05bmahxxqsjgff70zp6vzj152h2k8lvpqdalbav"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-auctex))
    (home-page "https://github.com/iyefrat/evil-tex")
    (synopsis
      "Useful features for editing LaTeX in evil-mode")
    (description
      "Documentation at https://melpa.org/#/evil-tex")
    (license #f)))

(define-public emacs-evil-text-object-python
  (package
    (name "emacs-evil-text-object-python")
    (version "20191010.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/evil-text-object-python.git")
               (commit
                 "39d22fc524f0413763f291267eaab7f4e7984318")))
        (sha256
          (base32
            "0293hfgczpjghvg28s27c5r6ll1zaq466pasrhzj71sqzyvxq7ax"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-dash))
    (home-page
      "https://github.com/wbolster/evil-text-object-python")
    (synopsis "Python specific evil text objects")
    (description
      "Documentation at https://melpa.org/#/evil-text-object-python")
    (license #f)))

(define-public emacs-evil-textobj-anyblock
  (package
    (name "emacs-evil-textobj-anyblock")
    (version "20170905.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/evil-textobj-anyblock.git")
               (commit
                 "ff00980f0634f95bf2ad9956b615a155ea8743be")))
        (sha256
          (base32
            "0wn5lp7kh3ip1bmqi12c9ivpjj0x602h8d7ag39qw36smv4jqvnb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/noctuid/evil-textobj-anyblock")
    (synopsis
      "Textobject for the closest user-defined blocks.")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-anyblock")
    (license #f)))

(define-public emacs-evil-textobj-column
  (package
    (name "emacs-evil-textobj-column")
    (version "20170905.1905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/evil-textobj-column.git")
               (commit
                 "835d7036d0bc9a6e44fc9b7c54ccf2a7c01428cd")))
        (sha256
          (base32
            "0g9d62sgcpzvhbrdk4hf3phphfss74mjz6xv4wd9895rzjsziwkf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names emacs-evil))
    (home-page
      "https://github.com/noctuid/evil-textobj-column")
    (synopsis "Provides column text objects.")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-column")
    (license #f)))

(define-public emacs-evil-textobj-entire
  (package
    (name "emacs-evil-textobj-entire")
    (version "20150422.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/supermomonga/evil-textobj-entire.git")
               (commit
                 "5b3a98f3a69edc3a788f539f6ffef4a0ef5e853d")))
        (sha256
          (base32
            "0m3krfmc9llpywr0lbya36b2jbnzx1pylvhj0p1ss5rh735m00jy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/supermomonga/evil-textobj-entire")
    (synopsis
      "text object for entire lines of buffer for evil")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-entire")
    (license #f)))

(define-public emacs-evil-textobj-line
  (package
    (name "emacs-evil-textobj-line")
    (version "20211101.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/evil-textobj-line.git")
               (commit
                 "9eaf9a5485c2b5c05e16552b34632ca520cd681d")))
        (sha256
          (base32
            "1w98gc1sqik8ab35a1hg5853dwar98a8qd94lxpq4ckabpgypins"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "unspecified")
    (synopsis "Line text object for Evil")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-line")
    (license #f)))

(define-public emacs-evil-textobj-syntax
  (package
    (name "emacs-evil-textobj-syntax")
    (version "20231016.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/evil-textobj-syntax.git")
               (commit
                 "c1a7afe81bca3da6a2fdc7ea9376fdc2e1e9249c")))
        (sha256
          (base32
            "1xlav0ii17b4j3d7q6mkn48q3cxnmq0kyipxrayqn5njn6rg31ap"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names emacs-evil))
    (home-page
      "https://github.com/laishulu/evil-textobj-syntax")
    (synopsis "Provides syntax text objects.")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-syntax")
    (license #f)))

(define-public emacs-evil-textobj-tree-sitter
  (package
    (name "emacs-evil-textobj-tree-sitter")
    (version "20231026.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meain/evil-textobj-tree-sitter.git")
               (commit
                 "8180681c4f132ff2f7ebf03f91c4b913ec7cdd74")))
        (sha256
          (base32
            "02c4ss2wp3vz4ww6w8vadpvkx2dgdjrrxs4zajzinawssdcriqaz"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "queries" "treesit-queries")))
    (home-page
      "https://github.com/meain/evil-textobj-tree-sitter")
    (synopsis
      "Provides evil textobjects using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/evil-textobj-tree-sitter")
    (license #f)))

(define-public emacs-evil-traces
  (package
    (name "emacs-evil-traces")
    (version "20230820.2255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mamapanda/evil-traces.git")
               (commit
                 "82e8a7b4213aed140f6eb5f2cc33a09bb5587166")))
        (sha256
          (base32
            "025skn93jr6wphkpyhpz46v58na66k2d1l5pdqpmmd41wrx9cmvq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/mamapanda/evil-traces")
    (synopsis "Visual hints for `evil-ex'")
    (description
      "Documentation at https://melpa.org/#/evil-traces")
    (license #f)))

(define-public emacs-evil-tree-edit
  (package
    (name "emacs-evil-tree-edit")
    (version "20231108.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethan-leba/tree-edit.git")
               (commit
                 "f5e2b467f14a2980dbe1a862ce0b27e768b2e980")))
        (sha256
          (base32
            "1xf4aygk4vc0pi590ca9nm1j9s64bv018xz5w8g4ln7rgpwdk408"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-edit
            emacs-tree-sitter
            emacs-evil
            emacs-avy
            emacs-s))
    (arguments '(#:files ("evil-tree-edit*.el")))
    (home-page
      "https://github.com/ethan-leba/tree-edit")
    (synopsis
      "Evil structural editing for any language!")
    (description
      "Documentation at https://melpa.org/#/evil-tree-edit")
    (license #f)))

(define-public emacs-evil-tutor
  (package
    (name "emacs-evil-tutor")
    (version "20150103.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/evil-tutor.git")
               (commit
                 "4e124cd3911dc0d1b6817ad2c9e59b4753638f28")))
        (sha256
          (base32
            "00yfq8aflxvp2nnz7smgq0c5wlb7cips5irj8qs6193ixlkpffvx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (arguments '(#:files (:defaults "tutor.txt")))
    (home-page
      "https://github.com/syl20bnr/evil-tutor")
    (synopsis
      "Vimtutor adapted to Evil and wrapped in a major-mode")
    (description
      "Documentation at https://melpa.org/#/evil-tutor")
    (license #f)))

(define-public emacs-evil-tutor-ja
  (package
    (name "emacs-evil-tutor-ja")
    (version "20160917.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kenjimyzk/evil-tutor-ja.git")
               (commit
                 "99af7d82e02ce3bcdfaff47c5c80b57327a7ea8d")))
        (sha256
          (base32
            "1cms98cy4p5dxwfc1zhgdaln8vr2nxzcj0d31imyabb4mwliabfw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-evil-tutor))
    (arguments '(#:files (:defaults "tutor-ja.txt")))
    (home-page
      "https://github.com/kenjimyzk/evil-tutor-ja")
    (synopsis
      "Japanese Vimtutor adapted to Evil and wrapped in a major-mode")
    (description
      "Documentation at https://melpa.org/#/evil-tutor-ja")
    (license #f)))

(define-public emacs-evil-tutor-sc
  (package
    (name "emacs-evil-tutor-sc")
    (version "20230705.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clsty/evil-tutor-sc.git")
               (commit
                 "1a1bc93eeb432159591b6dbe6684068311c89a46")))
        (sha256
          (base32
            "1l0lcxjf5fn3r9xwcjnql95fbqx23a4d6a3wnyrw3jzm3hiyckgk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-evil-tutor))
    (arguments '(#:files (:defaults "tutor-sc.txt")))
    (home-page
      "https://github.com/clsty/evil-tutor-sc")
    (synopsis "Simplified Chinese tutor for Evil")
    (description
      "Documentation at https://melpa.org/#/evil-tutor-sc")
    (license #f)))

(define-public emacs-evil-vimish-fold
  (package
    (name "emacs-evil-vimish-fold")
    (version "20200122.117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/evil-vimish-fold.git")
               (commit
                 "b6e0e6b91b8cd047e80debef1a536d9d49eef31a")))
        (sha256
          (base32
            "14qhfhk3d4c7v4jhr909dbxy8222flpqwk73bwg0pqwpkcifyv7n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-vimish-fold))
    (home-page
      "https://github.com/alexmurray/evil-vimish-fold")
    (synopsis "Integrate vimish-fold with evil")
    (description
      "Documentation at https://melpa.org/#/evil-vimish-fold")
    (license #f)))

(define-public emacs-evil-visual-mark-mode
  (package
    (name "emacs-evil-visual-mark-mode")
    (version "20230202.318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roman/evil-visual-mark-mode.git")
               (commit
                 "2bbaaae56ae53e68a8bcc7bc2cfe830a14843b4d")))
        (sha256
          (base32
            "1ggxifiz2qm26v2fw8m9ccjp3jbmhyhb8wv93m8k1pnyh8b7la2m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil emacs-dash))
    (home-page "unspecified")
    (synopsis "Display evil marks on buffer")
    (description
      "Documentation at https://melpa.org/#/evil-visual-mark-mode")
    (license #f)))

(define-public emacs-evil-visual-replace
  (package
    (name "emacs-evil-visual-replace")
    (version "20171016.613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/troyp/evil-visual-replace.git")
               (commit
                 "163fc827a1ffc106475da470c37fb26f4cc9b008")))
        (sha256
          (base32
            "1gfyrq7xfzmzh3x8k5f08n027dlbwi0pkkxf9c39fkxp4jngibsz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/troyp/evil-visual-replace")
    (synopsis
      "search/replace commands for evil visual state, inc. blocks")
    (description
      "Documentation at https://melpa.org/#/evil-visual-replace")
    (license #f)))

(define-public emacs-evil-visualstar
  (package
    (name "emacs-evil-visualstar")
    (version "20160223.48")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bling/evil-visualstar.git")
               (commit
                 "06c053d8f7381f91c53311b1234872ca96ced752")))
        (sha256
          (base32
            "0mkbzw12fav945icibc2293m5haxqr3hzkyli2cf4ssk6yvn0x4c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page
      "https://github.com/bling/evil-visualstar")
    (synopsis
      "Starts a * or # search from the visual selection")
    (description
      "Documentation at https://melpa.org/#/evil-visualstar")
    (license #f)))

(define-public emacs-evm
  (package
    (name "emacs-evm")
    (version "20141007.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/evm.el.git")
               (commit
                 "d0623b2355436a5fd9f7238b419782080c79196b")))
        (sha256
          (base32
            "0739v0m9vj70a55z0canslyqgafzys815i7a0r6bxj2f9iwq6rhb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/evm")
    (synopsis "Emacs Version Manager")
    (description
      "Documentation at https://melpa.org/#/evm")
    (license #f)))

(define-public emacs-evm-mode
  (package
    (name "emacs-evm-mode")
    (version "20220911.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taquangtrung/emacs-evm-mode.git")
               (commit
                 "422b65cfd04854072bf6b9238c49e3d40577ef98")))
        (sha256
          (base32
            "1p3kzh4633gvssik7yp50ancfvcwyb6z0m899mf8q6sayxyf2ira"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taquangtrung/emacs-evm-mode")
    (synopsis
      "Major mode for editing Ethereum EVM bytecode")
    (description
      "Documentation at https://melpa.org/#/evm-mode")
    (license #f)))

(define-public emacs-ewal
  (package
    (name "emacs-ewal")
    (version "20200305.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/ewal.git")
               (commit
                 "e2a04f5c97b7d5e087af26e646c0b45a24522e56")))
        (sha256
          (base32
            "05wrz53jxhzkncsbhgg25lyi6b1vbw2kprhq0n5n87i6g9hlvl56"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ewal.el" "palettes")))
    (home-page "https://gitlab.com/jjzmajic/ewal")
    (synopsis "A pywal-based theme generator")
    (description
      "Documentation at https://melpa.org/#/ewal")
    (license #f)))

(define-public emacs-ewal-doom-themes
  (package
    (name "emacs-ewal-doom-themes")
    (version "20200922.325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/ewal.git")
               (commit
                 "e2a04f5c97b7d5e087af26e646c0b45a24522e56")))
        (sha256
          (base32
            "05wrz53jxhzkncsbhgg25lyi6b1vbw2kprhq0n5n87i6g9hlvl56"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ewal emacs-doom-themes))
    (arguments '(#:files ("doom-themes/*.el")))
    (home-page "https://gitlab.com/jjzmajic/ewal")
    (synopsis "Dread the colors of darkness")
    (description
      "Documentation at https://melpa.org/#/ewal-doom-themes")
    (license #f)))

(define-public emacs-ewal-evil-cursors
  (package
    (name "emacs-ewal-evil-cursors")
    (version "20200301.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyruseuros/ewal.git")
               (commit
                 "e2a04f5c97b7d5e087af26e646c0b45a24522e56")))
        (sha256
          (base32
            "05wrz53jxhzkncsbhgg25lyi6b1vbw2kprhq0n5n87i6g9hlvl56"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ewal))
    (arguments '(#:files ("evil-cursors/*.el")))
    (home-page "https://gitlab.com/jjzmajic/ewal")
    (synopsis
      "`ewal'-colored evil cursor for Emacs and Spacemacs")
    (description
      "Documentation at https://melpa.org/#/ewal-evil-cursors")
    (license #f)))

(define-public emacs-ewal-spacemacs-themes
  (package
    (name "emacs-ewal-spacemacs-themes")
    (version "20230505.609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyruseuros/ewal.git")
               (commit
                 "0d245edcfcd9cc5766d37b270214fb9da9b4336d")))
        (sha256
          (base32
            "0zbswckld7dfbjsj0xhhaqqwka5rz6akikvbqyq8dwpizs04l475"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ewal emacs-spacemacs-theme))
    (arguments '(#:files ("spacemacs-themes/*.el")))
    (home-page "https://gitlab.com/jjzmajic/ewal")
    (synopsis "Ride the rainbow spaceship")
    (description
      "Documentation at https://melpa.org/#/ewal-spacemacs-themes")
    (license #f)))

(define-public emacs-ewmctrl
  (package
    (name "emacs-ewmctrl")
    (version "20170922.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/ewmctrl.git")
               (commit
                 "3d0217c4d6cdb5c308b6cb4293574f470d4faacf")))
        (sha256
          (base32
            "0ilwvx0qryv3v6xf0gxqwnfm6pf96gxap8h9g3f6z6lk9ff4n1wi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/flexibeast/ewmctrl")
    (synopsis
      "Use `wmctrl' to manage desktop windows via EWMH/NetWM.")
    (description
      "Documentation at https://melpa.org/#/ewmctrl")
    (license #f)))

(define-public emacs-eww-lnum
  (package
    (name "emacs-eww-lnum")
    (version "20150102.1512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00natic/eww-lnum.git")
               (commit
                 "4b0ecec769919ecb05ca4fb15ec51911ba589929")))
        (sha256
          (base32
            "1i6zf17rwa390c33cbspz81dz86vwlphyhjjsia4gp205nfk3s20"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/m00natic/eww-lnum")
    (synopsis "Conkeror-like functionality for eww")
    (description
      "Documentation at https://melpa.org/#/eww-lnum")
    (license #f)))

(define-public emacs-exato
  (package
    (name "emacs-exato")
    (version "20200524.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ninrod/exato.git")
               (commit
                 "aee7af7b7a0e7551478f453d1de7d5b9cb2e06c4")))
        (sha256
          (base32
            "0m98bwj8dy90ifck8rsda6zfgbjrv5z0166pp7qzvwls9rqa695m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-evil))
    (home-page "https://github.com/ninrod/exato")
    (synopsis
      "EXATO: Evil XML/HTML Attributes Text Object")
    (description
      "Documentation at https://melpa.org/#/exato")
    (license #f)))

(define-public emacs-exec-path-from-shell
  (package
    (name "emacs-exec-path-from-shell")
    (version "20230804.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/exec-path-from-shell.git")
               (commit
                 "03fc0a38af9e396c98f5a30c392cf757b3a34feb")))
        (sha256
          (base32
            "1wmr1z603wmcv8hxzxn84qxzdwmzmdm8x6f3n0x7klviq4jw6v2x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/exec-path-from-shell")
    (synopsis
      "Get environment variables such as $PATH from the shell")
    (description
      "Documentation at https://melpa.org/#/exec-path-from-shell")
    (license #f)))

(define-public emacs-execline
  (package
    (name "emacs-execline")
    (version "20190711.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/KAction/emacs-execline.git")
               (commit
                 "c75dd9b2c54d8e59fc35fd4bd98d8e213948a3f5")))
        (sha256
          (base32
            "02q531c9wvdwflhggflnci4a36h2bb90bq25bbhw6i2lvrd9sk55"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://gitlab.com/KAction/emacs-execline")
    (synopsis
      "Major mode for editing execline scripts")
    (description
      "Documentation at https://melpa.org/#/execline")
    (license #f)))

(define-public emacs-exercism
  (package
    (name "emacs-exercism")
    (version "20231007.1253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anonimitoraf/exercism.el.git")
               (commit
                 "9d164a54fd7be933e6f65d4cc7112c99bd957b26")))
        (sha256
          (base32
            "1b73274krk38jb8znnp5q788jh66g3s8w8lslf79b34s586p8ih4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-a
            emacs-s
            emacs-request
            emacs-async
            emacs-async-await
            emacs-persist))
    (home-page
      "https://github.com/anonimitoraf/exercism.el")
    (synopsis
      "Unofficial https://exercism.org integration")
    (description
      "Documentation at https://melpa.org/#/exercism")
    (license #f)))

(define-public emacs-exiftool
  (package
    (name "emacs-exiftool")
    (version "20190520.1106")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/exiftool-"
               version
               ".el"))
        (sha256
          (base32
            "1i4idvbmln4c8xi2jz1494rz58wba3s8misgl42q08w7ksjp18x3"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.systemreboot.net/exiftool.el")
    (synopsis "Elisp wrapper around ExifTool")
    (description
      "Documentation at https://melpa.org/#/exiftool")
    (license #f)))

(define-public emacs-exotica-theme
  (package
    (name "emacs-exotica-theme")
    (version "20180212.2329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenobht/exotica-theme.git")
               (commit
                 "ff3ef4f6fa38c93b99becad977c7810c990a4d2f")))
        (sha256
          (base32
            "1kp6q55g3dcya4y79x877vqwxa4z2rkkvhs49pkwr3wljf4af2pd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jbharat/exotica-theme")
    (synopsis "A dark theme with vibrant colors")
    (description
      "Documentation at https://melpa.org/#/exotica-theme")
    (license #f)))

(define-public emacs-expand-line
  (package
    (name "emacs-expand-line")
    (version "20151006.207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/expand-line.git")
               (commit
                 "75a5d0241f35dd0748ab8ecb4ff16891535be372")))
        (sha256
          (base32
            "0wz4h5hrr5ci0w8pynd2nr1b2zl5hl4pa8gc16mcabik5927rf7z"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Expand selection by line")
    (description
      "Documentation at https://melpa.org/#/expand-line")
    (license #f)))

(define-public emacs-expand-region
  (package
    (name "emacs-expand-region")
    (version "20231020.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/expand-region.el.git")
               (commit
                 "9e3f86c02c5e2ab6f0d95da8a34045b54f6166d1")))
        (sha256
          (base32
            "0mw1jlgdp17k56rq4g801z7y35h4infm9cy3mh8jw5wqqar5ifa6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/magnars/expand-region.el")
    (synopsis
      "Increase selected region by semantic units.")
    (description
      "Documentation at https://melpa.org/#/expand-region")
    (license #f)))

(define-public emacs-expenses
  (package
    (name "emacs-expenses")
    (version "20230903.306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/md-arif-shaikh/expenses.git")
               (commit
                 "68f24f91054c6ce7624aaa841e2a435e6e1350a7")))
        (sha256
          (base32
            "0bfqfmras66k00mq1c7ms5pqsbhlgls258pnbb7al6zg5ypl4p99"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ht))
    (home-page
      "https://github.com/md-arif-shaikh/expenses")
    (synopsis "Record and view expenses")
    (description
      "Documentation at https://melpa.org/#/expenses")
    (license #f)))

(define-public emacs-express
  (package
    (name "emacs-express")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/express.git")
               (commit
                 "93dae7377eace4a5413ba99aecb6f26f90798725")))
        (sha256
          (base32
            "0ah8zayipwp760909llb9whcdvmbsdgkg0x5y4qlcicm1r9kwcc7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-string-utils))
    (home-page
      "http://github.com/rolandwalker/express")
    (synopsis "Alternatives to `message'")
    (description
      "Documentation at https://melpa.org/#/express")
    (license #f)))

(define-public emacs-exsqlaim-mode
  (package
    (name "emacs-exsqlaim-mode")
    (version "20170607.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahmadnazir/exsqlaim-mode.git")
               (commit
                 "a2e0a62ec8b87193d8eaa695774bfd689324b06c")))
        (sha256
          (base32
            "1gj1q2h1ja30jizkjql12cxlppj07ykr4wxqca9msy043zdhqnkk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ahmadnazir/exsqlaim-mode")
    (synopsis "Use variables inside sql queries")
    (description
      "Documentation at https://melpa.org/#/exsqlaim-mode")
    (license #f)))

(define-public emacs-extempore-mode
  (package
    (name "emacs-extempore-mode")
    (version "20220704.2241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/extemporelang/extempore-emacs-mode.git")
               (commit
                 "92e0fff482a0a4dc2971c39581c5ea9e84ae5e1c")))
        (sha256
          (base32
            "1chxl2x9wjblhfknx7aa8pgqppc60917n437bxapx4hp3275x16q"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/extemporelang/extempore-emacs-mode")
    (synopsis
      "Emacs major mode for Extempore source files")
    (description
      "Documentation at https://melpa.org/#/extempore-mode")
    (license #f)))

(define-public emacs-extend-dnd
  (package
    (name "emacs-extend-dnd")
    (version "20151122.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/extend-dnd.git")
               (commit
                 "80c966c93b82c9bb5c6225a432557c39144fc602")))
        (sha256
          (base32
            "15dwl1rb3186k328a83dz9xmslc0px60ah16fifvmr3migis9hwz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mlf176f2/extend-dnd")
    (synopsis "R drag and Drop")
    (description
      "Documentation at https://melpa.org/#/extend-dnd")
    (license #f)))

(define-public emacs-external-dict
  (package
    (name "emacs-external-dict")
    (version "20230926.748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/external-dict.el.git")
               (commit
                 "5ff41c9151647ef68bf61eff318fc76a3fe558f2")))
        (sha256
          (base32
            "1rwhkxxs5hzpc80qza7rfxh18q3hs02azlcal468zl3q67vhwnaw"))))
    (build-system melpa-build-system)
    (home-page
      "https://repo.or.cz/external-dict.el.git")
    (synopsis
      "Query external dictionary like goldendict, Bob.app etc")
    (description
      "Documentation at https://melpa.org/#/external-dict")
    (license #f)))

(define-public emacs-extmap
  (package
    (name "emacs-extmap")
    (version "20230907.1959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/extmap.git")
               (commit
                 "3b0f898057082a1c01584ff2bbaf5fd4d22c1400")))
        (sha256
          (base32
            "12y0k0ac4b7lg15h8bgiq6i1ardg5ca780w478xj6hmkdzlx5332"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/doublep/extmap")
    (synopsis
      "Externally-stored constant mapping for Elisp")
    (description
      "Documentation at https://melpa.org/#/extmap")
    (license #f)))

(define-public emacs-exunit
  (package
    (name "emacs-exunit")
    (version "20230730.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/exunit.el.git")
               (commit
                 "e008c89e01e5680473278c7e7bab42842e294e4d")))
        (sha256
          (base32
            "17r5r01br7k3nxy7vchhk94dz0zyrdlg66ip5wlj1kh89xwprvsq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "http://github.com/ananthakumaran/exunit.el")
    (synopsis "ExUnit test runner")
    (description
      "Documentation at https://melpa.org/#/exunit")
    (license #f)))

(define-public emacs-exwm-edit
  (package
    (name "emacs-exwm-edit")
    (version "20220414.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agzam/exwm-edit.git")
               (commit
                 "b5b7e950f57e30befd68d51df34540b70e6ac28f")))
        (sha256
          (base32
            "11yjvry950xiq91rzbx9jsa8hx3lnabhkqzgiqlcgx36q6diw6fh"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/agzam/exwm-edit")
    (synopsis "Edit mode for EXWM")
    (description
      "Documentation at https://melpa.org/#/exwm-edit")
    (license #f)))

(define-public emacs-exwm-firefox-core
  (package
    (name "emacs-exwm-firefox-core")
    (version "20190812.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/exwm-firefox-core.git")
               (commit
                 "e2fe2a895e8f973307ef52f8c9976b26e701cbd0")))
        (sha256
          (base32
            "0k5jkjzx6f8nfmbkc61raj585p9pymycgzv7rr3fhv2drgkaa4yi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-exwm))
    (home-page
      "https://github.com/walseb/exwm-firefox-core")
    (synopsis "Firefox hotkeys to functions")
    (description
      "Documentation at https://melpa.org/#/exwm-firefox-core")
    (license #f)))

(define-public emacs-exwm-firefox-evil
  (package
    (name "emacs-exwm-firefox-evil")
    (version "20231026.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/exwm-firefox-evil.git")
               (commit
                 "ec9e14eca25aea9b7c7169be23843898f46696e7")))
        (sha256
          (base32
            "1fbxll1ylkrkk6jm4mwcdvpix23dxvfsgl2zs10lr823ndydk1b6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-exwm
            emacs-evil
            emacs-exwm-firefox-core))
    (home-page
      "https://github.com/walseb/exwm-firefox-evil")
    (synopsis
      "evil-mode implementation of exwm-firefox-core")
    (description
      "Documentation at https://melpa.org/#/exwm-firefox-evil")
    (license #f)))

(define-public emacs-exwm-float
  (package
    (name "emacs-exwm-float")
    (version "20210207.2035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/exwm-float.el.git")
               (commit
                 "eb1b60b4a65e1ca5e323ef68a284ec6af72e637a")))
        (sha256
          (base32
            "1bwnw6qacdrm54lx4hc36f9lnidfw1wl399n7wasa24n9wrbr8z0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xelb emacs-exwm emacs-popwin))
    (home-page
      "https://gitlab.com/mtekman/exwm-float.el")
    (synopsis
      "Convenient modes and bindings for floating EXWM frames")
    (description
      "Documentation at https://melpa.org/#/exwm-float")
    (license #f)))

(define-public emacs-exwm-mff
  (package
    (name "emacs-exwm-mff")
    (version "20210603.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/exwm-mff.git")
               (commit
                 "89206f2e3189f589c27c56bd2b6203e906ee7100")))
        (sha256
          (base32
            "0ipmapyd4jmpnk34wk9kfbvqnl04x74yg2pmj298wqa61ylw1n9j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ieure/exwm-mff")
    (synopsis "Mouse Follows Focus")
    (description
      "Documentation at https://melpa.org/#/exwm-mff")
    (license #f)))

(define-public emacs-exwm-modeline
  (package
    (name "emacs-exwm-modeline")
    (version "20230331.1747")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/exwm-modeline.git")
               (commit
                 "852a88a58714e3e59675b79b185f036f7b0300e8")))
        (sha256
          (base32
            "1al02ikfjc2nxlfd0gwn9a92rs3v8g3590130nqghmmpvagl9vj9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-exwm))
    (home-page
      "https://github.com/SqrtMinusOne/exwm-modeline")
    (synopsis
      "A modeline segment for EXWM workspaces")
    (description
      "Documentation at https://melpa.org/#/exwm-modeline")
    (license #f)))

(define-public emacs-exwm-surf
  (package
    (name "emacs-exwm-surf")
    (version "20171204.1140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/exwm-surf.git")
               (commit
                 "6c17e2c1597fe4b7b454a1dac23b9127ac951e94")))
        (sha256
          (base32
            "0rb921fq3pyzv0w1s6n0zx4j7cvv68mb50hfa8nqnppz5ii1k0lb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-exwm))
    (home-page
      "https://github.com/ecraven/exwm-surf")
    (synopsis
      "Interface for Surf (surf.suckless.org) under exwm")
    (description
      "Documentation at https://melpa.org/#/exwm-surf")
    (license #f)))

(define-public emacs-exwm-x
  (package
    (name "emacs-exwm-x")
    (version "20230119.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/exwm-x.git")
               (commit
                 "1e2bbfca872ad76eaa8f1c00d17762bed256881a")))
        (sha256
          (base32
            "1cwbdik88qw365avw2977snlj9wajyixhidlbncj2y022s5f9y2m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-exwm))
    (home-page "https://github.com/tumashu/exwm-x")
    (synopsis
      "A derivative wm based on EXWM (emacs x window manager)")
    (description
      "Documentation at https://melpa.org/#/exwm-x")
    (license #f)))

(define-public emacs-eyebrowse
  (package
    (name "emacs-eyebrowse")
    (version "20201107.955")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/eyebrowse-"
               version
               ".el"))
        (sha256
          (base32
            "13xhlv2wdr3ix1i9dwp68b9ghpdbf9ri49bsp81k5alplwwchrng"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://depp.brause.cc/eyebrowse")
    (synopsis "Easy window config switching")
    (description
      "Documentation at https://melpa.org/#/eyebrowse")
    (license #f)))

(define-public emacs-eyebrowse-restore
  (package
    (name "emacs-eyebrowse-restore")
    (version "20230312.1821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/FrostyX/eyebrowse-restore.git")
               (commit
                 "50e8a2cb3c4a64f7fadd0303d178de8a57bb37db")))
        (sha256
          (base32
            "0spcsg1kzz5h3y3m6jd3fz2mhfbmgfy4m35650axgx53309ivkfz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eyebrowse emacs-dash emacs-s))
    (home-page
      "https://github.com/FrostyX/eyebrowse-restore")
    (synopsis "Persistent Eyebrowse for all frames")
    (description
      "Documentation at https://melpa.org/#/eyebrowse-restore")
    (license #f)))

(define-public emacs-eyuml
  (package
    (name "emacs-eyuml")
    (version "20141028.2227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/eyuml.git")
               (commit
                 "eb29c37316e44a14741f16e894fbcfcb7537dc80")))
        (sha256
          (base32
            "19n2dzr3m56g76igh57cvvhqwpbcicwr7r6r4i3l8vsjch99kp6m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-s))
    (home-page "http://github.com/antham/eyuml")
    (synopsis
      "Write textual uml diagram from emacs using yuml.me")
    (description
      "Documentation at https://melpa.org/#/eyuml")
    (license #f)))

(define-public emacs-ez-query-replace
  (package
    (name "emacs-ez-query-replace")
    (version "20210724.2247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/ez-query-replace.git")
               (commit
                 "2b68472f4007a73908c3b242e83ac5a7587967ff")))
        (sha256
          (base32
            "0zdgdqd9zi9fz6rn2z24jmpr83rzwbgxq0q38ynmskkd7n42a8ds"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "unspecified")
    (synopsis
      "a smarter context-sensitive query-replace that can be reapplied")
    (description
      "Documentation at https://melpa.org/#/ez-query-replace")
    (license #f)))

(define-public emacs-eziam-themes
  (package
    (name "emacs-eziam-themes")
    (version "20230820.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thblt/eziam-theme-emacs.git")
               (commit
                 "8223acc0218130ad2493c1476ad3736ee4fdbb8f")))
        (sha256
          (base32
            "1q37lxfskq88rp1alhfjik1grpczgxn82l3fjgy01gs17qx7k579"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thblt/eziam-theme-emacs")
    (synopsis
      "The mostly monochrome Eziam theme family.")
    (description
      "Documentation at https://melpa.org/#/eziam-themes")
    (license #f)))

(define-public emacs-f
  (package
    (name "emacs-f")
    (version "20230823.1159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/f.el.git")
               (commit
                 "ab3ee3811c53f9c2144ff45130361f3da242ffa2")))
        (sha256
          (base32
            "07jsgq8jx1dxwlij61pbzsmlb047jsbk1ssr1d8301kssaa9qls8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "http://github.com/rejeep/f.el")
    (synopsis
      "Modern API for working with files and directories")
    (description
      "Documentation at https://melpa.org/#/f")
    (license #f)))

(define-public emacs-f3
  (package
    (name "emacs-f3")
    (version "20180130.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/f3.git")
               (commit
                 "000009ce4adf7a57eae80512f29c4ec2a1391ce5")))
        (sha256
          (base32
            "0q3ylw0i1bg7pzsv4gj72jcfjjfh57vsb3fnfnhhh5i5vladiqsf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/cosmicexplorer/f3")
    (synopsis "a helm interface to find")
    (description
      "Documentation at https://melpa.org/#/f3")
    (license #f)))

(define-public emacs-fabric
  (package
    (name "emacs-fabric")
    (version "20171116.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/fabric.el.git")
               (commit
                 "df79be341d0b34ed23850f9894136092fa5fea8c")))
        (sha256
          (base32
            "1mnz81k1jz2sa3zj68ihzgq66l9fcxvzb67ad62p8bvi2aksxx7z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nlamirault/fabric.el")
    (synopsis "Launch Fabric using Emacs")
    (description
      "Documentation at https://melpa.org/#/fabric")
    (license #f)))

(define-public emacs-face-explorer
  (package
    (name "emacs-face-explorer")
    (version "20190517.1857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/face-explorer.git")
               (commit
                 "ad1300e13e5643e4c246cabfd91f833d39113052")))
        (sha256
          (base32
            "0nq36h6kwyi2sv1fklm42spfkllm6jlz0alh2qlpgy4ixq5sp2pv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/face-explorer")
    (synopsis
      "Library and tools for faces and text properties")
    (description
      "Documentation at https://melpa.org/#/face-explorer")
    (license #f)))

(define-public emacs-faceup
  (package
    (name "emacs-faceup")
    (version "20170925.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/faceup.git")
               (commit
                 "6c92dad56a133e14e7b27831e1bcf9b3a71ff154")))
        (sha256
          (base32
            "1yzmy7flrhrh0i10bdszx8idx6r8h6czm4vm4q0z6fp5fw94zwrx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/faceup")
    (synopsis
      "Markup language for faces and font-lock regression testing")
    (description
      "Documentation at https://melpa.org/#/faceup")
    (license #f)))

(define-public emacs-factlog
  (package
    (name "emacs-factlog")
    (version "20130210.140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/factlog.git")
               (commit
                 "6503d77ea882c995b051d22e72db336fb28770fc")))
        (sha256
          (base32
            "19zm9my7fl1r3q48axjv2f8x9hcjk6qah4y4r92b90bzfmcdc30y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (arguments '(#:files ("lisp/*")))
    (home-page "https://github.com/tkf/factlog")
    (synopsis "File activity logger")
    (description
      "Documentation at https://melpa.org/#/factlog")
    (license #f)))

(define-public emacs-faff-theme
  (package
    (name "emacs-faff-theme")
    (version "20230531.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/WJCFerguson/emacs-faff-theme.git")
               (commit
                 "cba6906f6f4f33cbf229a300d83f0e0d925e8f42")))
        (sha256
          (base32
            "1xwcgnkxmkrlj28jh0p3c0x8s84clr8dplhh8f8azx1myql62lp8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/WJCFerguson/emacs-faff-theme")
    (synopsis
      "Light Emacs color theme on cornsilk3 background")
    (description
      "Documentation at https://melpa.org/#/faff-theme")
    (license #f)))

(define-public emacs-fakir
  (package
    (name "emacs-fakir")
    (version "20140729.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-fakir.git")
               (commit
                 "1fca406ad7de80fece6319ff75d4230b648534b0")))
        (sha256
          (base32
            "1w5apzbzr1jd983b0rzsy9ldb0z0zcq6mpyb5r8czl5wd4vvj69h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-noflet emacs-dash emacs-kv))
    (arguments '(#:files ("fakir.el")))
    (home-page
      "http://github.com/nicferrier/emacs-fakir")
    (synopsis "fakeing bits of Emacs")
    (description
      "Documentation at https://melpa.org/#/fakir")
    (license #f)))

(define-public emacs-fancy-battery
  (package
    (name "emacs-fancy-battery")
    (version "20150101.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/fancy-battery.git")
               (commit
                 "9b88ae77a01aa3edc529840338bcb2db7f445822")))
        (sha256
          (base32
            "1k6prddw277iszh9hq145yqidwiiy9iqz656rpmqwn5hmr1vakhk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lunaryorn/fancy-battery.el")
    (synopsis "Fancy battery display")
    (description
      "Documentation at https://melpa.org/#/fancy-battery")
    (license #f)))

(define-public emacs-fancy-compilation
  (package
    (name "emacs-fancy-compilation")
    (version "20230824.22")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/fancy-compilation-"
               version
               ".tar"))
        (sha256
          (base32
            "1xnqld0jih5v2c1n4ijanm0wa1f1kb1nrvszryl46s96mk052i40"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-fancy-compilation")
    (synopsis "Enhanced compilation output")
    (description
      "Documentation at https://melpa.org/#/fancy-compilation")
    (license #f)))

(define-public emacs-fancy-dabbrev
  (package
    (name "emacs-fancy-dabbrev")
    (version "20220211.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrosdahl/fancy-dabbrev.git")
               (commit
                 "cf4a2f7e3e43e07ab9aa9db16532a21010e9fc8c")))
        (sha256
          (base32
            "04z9pwvl68hsisnyf9wlxmkwk8xag36jvcchwcwp4n9vp04z8745"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/jrosdahl/fancy-dabbrev")
    (synopsis
      "Like dabbrev-expand with preview and popup menu")
    (description
      "Documentation at https://melpa.org/#/fancy-dabbrev")
    (license #f)))

(define-public emacs-fancy-narrow
  (package
    (name "emacs-fancy-narrow")
    (version "20171031.16")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/fancy-narrow.git")
               (commit
                 "c9b3363752c09045b8ce7a2635afae42d2ae63c7")))
        (sha256
          (base32
            "1icc43dlb38w9ip2077a4n8xk102f4l1wfy4c04vpjykxpda4sxv"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/fancy-narrow")
    (synopsis
      "narrow-to-region with more eye candy.")
    (description
      "Documentation at https://melpa.org/#/fancy-narrow")
    (license #f)))

(define-public emacs-fantom-mode
  (package
    (name "emacs-fantom-mode")
    (version "20221227.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/fantom-mode.git")
               (commit
                 "51cd82d29a7dca7bfd043971ba1d0fd21ed11693")))
        (sha256
          (base32
            "07f1jqm5wvyc6vmkjpf0g3mrfn3bymv6vzi58jpq97z5cnqbljd8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/fantom-mode")
    (synopsis
      "A major mode for the Fantom programming language")
    (description
      "Documentation at https://melpa.org/#/fantom-mode")
    (license #f)))

(define-public emacs-fantom-theme
  (package
    (name "emacs-fantom-theme")
    (version "20200328.604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adsva/fantom-emacs-theme.git")
               (commit
                 "2c1c7fd53086c2ff86ee0961642c3b58e2343c08")))
        (sha256
          (base32
            "1clvpjsf241fdkk3915zjqb4wivsjsvc9phf633pzbvi61qwhaap"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/adsva/fantom-emacs-theme")
    (synopsis
      "Dark theme based on Phantom Code for VSCode")
    (description
      "Documentation at https://melpa.org/#/fantom-theme")
    (license #f)))

(define-public emacs-fanyi
  (package
    (name "emacs-fanyi")
    (version "20230926.1849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/condy0919/fanyi.el.git")
               (commit
                 "df91f2d69b7dbd9b7ebb8f54085aee74f22ad3f5")))
        (sha256
          (base32
            "1ksnqsan3naglcvh866znq4rk2wxcnyynwawzjmcp3gjzvpxv2az"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/condy0919/fanyi.el")
    (synopsis "Not only English-Chinese translator")
    (description
      "Documentation at https://melpa.org/#/fanyi")
    (license #f)))

(define-public emacs-farmhouse-themes
  (package
    (name "emacs-farmhouse-themes")
    (version "20221025.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/farmhouse-themes.git")
               (commit
                 "30c763d01611dad88f1a1ff88451431e2629016d")))
        (sha256
          (base32
            "1ywm5k2zwamqm5h13fydsvahpfml5s292xy1ds1k9j33r44rqcyl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Farmhouse Themes, dark and light versions")
    (description
      "Documentation at https://melpa.org/#/farmhouse-themes")
    (license #f)))

(define-public emacs-fasd
  (package
    (name "emacs-fasd")
    (version "20210104.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/emacs-fasd.git")
               (commit
                 "c1d92553f33ebb018135c698db1a6d7f86731a26")))
        (sha256
          (base32
            "16if5pp2y5nxp37gl29l206dmika75fs2znfpks98iv9zwxpps2w"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/emacs-fasd")
    (synopsis
      "Emacs integration for the command-line productivity booster `fasd'")
    (description
      "Documentation at https://melpa.org/#/fasd")
    (license #f)))

(define-public emacs-fast-scroll
  (package
    (name "emacs-fast-scroll")
    (version "20191016.327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/fast-scroll.git")
               (commit
                 "3f6ca0d5556fe9795b74714304564f2295dcfa24")))
        (sha256
          (base32
            "08nwjyqdkp1g27jqgq7b2nd90kzsfv9mjkkjpniprhfqdqjjcp63"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ahungry/fast-scroll")
    (synopsis
      "Some utilities for faster scrolling over large buffers.")
    (description
      "Documentation at https://melpa.org/#/fast-scroll")
    (license #f)))

(define-public emacs-fastdef
  (package
    (name "emacs-fastdef")
    (version "20160713.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/fastdef.git")
               (commit
                 "0696f41dc150d35ce31fe8d2ea74f4173818bb55")))
        (sha256
          (base32
            "1p5vmbx7zdzxnyjzcp2vxscd3dwf7xk82wk9dfiv99svwqv2ki3w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-w3m))
    (home-page
      "http://github.com/redguardtoo/fastdef")
    (synopsis
      "Insert terminology from Google top search results")
    (description
      "Documentation at https://melpa.org/#/fastdef")
    (license #f)))

(define-public emacs-fastnav
  (package
    (name "emacs-fastnav")
    (version "20120211.1457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gleber/fastnav.el.git")
               (commit
                 "1019ba2b61d1a070204099b23da347278a61bc89")))
        (sha256
          (base32
            "0y95lrdqd9i2kbb266s1wdiim4m8vrn3br19d8s55ib6xlywf8cx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Fast navigation and editing routines.")
    (description
      "Documentation at https://melpa.org/#/fastnav")
    (license #f)))

(define-public emacs-faust-mode
  (package
    (name "emacs-faust-mode")
    (version "20201004.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rukano/emacs-faust-mode.git")
               (commit
                 "2a56cda14b152d5471f21a5d82f23c141dc7134c")))
        (sha256
          (base32
            "04xzlnk2rq9h19g9n09sn99khdryjj9ywjby65srah9kwp1abcm8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rukano/emacs-faust-mode")
    (synopsis "Faust syntax colorizer for Emacs.")
    (description
      "Documentation at https://melpa.org/#/faust-mode")
    (license #f)))

(define-public emacs-faustine
  (package
    (name "emacs-faustine")
    (version "20171122.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/yphil/faustine")
               (commit
                 "07a38963111518f86123802f9d477be0d4689a3f")))
        (sha256
          (base32
            "0dj35hwkm5v8758c4ssl873vkvplba5apjsh7l23nsmnzdji99zg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-faust-mode))
    (home-page
      "https://bitbucket.org/yphil/faustine")
    (synopsis
      "Edit, visualize, build and run Faust code")
    (description
      "Documentation at https://melpa.org/#/faustine")
    (license #f)))

(define-public emacs-fb2-reader
  (package
    (name "emacs-fb2-reader")
    (version "20230805.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jumper047/fb2-reader.git")
               (commit
                 "85777f99483b84f02c1abd6fe0ddbbac7f1258af")))
        (sha256
          (base32
            "0f93s1wssq40z6328klk47zniv2y0x9899xx2wz6z76fxpxssjk5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-dash
            emacs-visual-fill-column
            emacs-async))
    (home-page
      "https://github.com/jumper047/fb2-reader")
    (synopsis "Read FB2 and FB2.ZIP documents")
    (description
      "Documentation at https://melpa.org/#/fb2-reader")
    (license #f)))

(define-public emacs-fcitx
  (package
    (name "emacs-fcitx")
    (version "20190806.1923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/fcitx.el.git")
               (commit
                 "12dc2638ddd15c8f6cfaecb20e1f428ab2bb5624")))
        (sha256
          (base32
            "0ahw2pi6i693s4mdjdkisy94yvg0wgmd3c6zi0z4yi60b6irskdn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cute-jumper/fcitx.el")
    (synopsis "Make fcitx better in Emacs")
    (description
      "Documentation at https://melpa.org/#/fcitx")
    (license #f)))

(define-public emacs-fcopy
  (package
    (name "emacs-fcopy")
    (version "20150304.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataka/fcopy.git")
               (commit
                 "e355f6ec889d8ecbdb096019c2dc660b1cec4941")))
        (sha256
          (base32
            "0c56j8ip2fyma9yvwaanz89jyzgi9k11xwwkflzlzc4smnvgfibr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ataka/fcopy")
    (synopsis
      "Funny Copy, set past point HERE then search copy text")
    (description
      "Documentation at https://melpa.org/#/fcopy")
    (license #f)))

(define-public emacs-fd-dired
  (package
    (name "emacs-fd-dired")
    (version "20210723.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yqrashawn/fd-dired.git")
               (commit
                 "458464771bb220b6eb87ccfd4c985c436e57dc7e")))
        (sha256
          (base32
            "0253r4fbi9b8vk5akp1wz0krvik500jhy1hclwp1p0bwrq2irlml"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yqrashawn/fd-dired")
    (synopsis "find-dired alternative using fd")
    (description
      "Documentation at https://melpa.org/#/fd-dired")
    (license #f)))

(define-public emacs-feather
  (package
    (name "emacs-feather")
    (version "20200321.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/feather.el.git")
               (commit
                 "3f19293dada8bf368e9f86f783610e7ca0a51ecb")))
        (sha256
          (base32
            "11ml9n4bkm0150ifyx3igx55hnnrhbg04q8sb15v734xi29swp6z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async
            emacs-async-await
            emacs-ppp
            emacs-page-break-lines))
    (home-page
      "https://github.com/conao3/feather.el")
    (synopsis
      "Parallel thread modern package manager")
    (description
      "Documentation at https://melpa.org/#/feather")
    (license #f)))

(define-public emacs-feature-mode
  (package
    (name "emacs-feature-mode")
    (version "20220418.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/michaelklishin/cucumber.el.git")
               (commit
                 "e204d9e204b767cf95d6a051ff283f05dc51e9d3")))
        (sha256
          (base32
            "0zg4nkwfwmil2a3n2gnrwsj14dkwb1hm1mbcgcrg2dgvh45idns6"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el" "i18n.yml" "snippets" "support")))
    (home-page
      "https://github.com/michaelklishin/cucumber.el")
    (synopsis
      "Major mode for editing Gherkin (i.e. Cucumber) user stories")
    (description
      "Documentation at https://melpa.org/#/feature-mode")
    (license #f)))

(define-public emacs-fedi
  (package
    (name "emacs-fedi")
    (version "20231016.1415")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/fedi-"
               version
               ".tar"))
        (sha256
          (base32
            "00if7bbbs7dwqjynwxa8f4dg6978w8mjkzqyb0zzfg415bqakg5p"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/martianh/fedi.el")
    (synopsis
      "Helper functions for fediverse clients")
    (description
      "Documentation at https://melpa.org/#/fedi")
    (license #f)))

(define-public emacs-feebleline
  (package
    (name "emacs-feebleline")
    (version "20190822.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tautologyclub/feebleline.git")
               (commit
                 "b2f2db25cac77817bf0c49ea2cea6383556faea0")))
        (sha256
          (base32
            "0f2nynx9sib29qi3zkfkgxlcfrwz607pgg6qvvk4nnads033p1yn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tautologyclub/feebleline")
    (synopsis
      "Replace modeline with a slimmer proxy")
    (description
      "Documentation at https://melpa.org/#/feebleline")
    (license #f)))

(define-public emacs-feed-discovery
  (package
    (name "emacs-feed-discovery")
    (version "20200714.1118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/feed-discovery.git")
               (commit
                 "12fcd1a28fe7c8c46c74e32f395ec631d45ec739")))
        (sha256
          (base32
            "1k22gwzrblkqqqkkdb99d5lv44nmvpmiwwv2ghw7hjh4w1wxir0z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/HKey/feed-discovery")
    (synopsis
      "Discover feed url by RSS/Atom autodiscovery")
    (description
      "Documentation at https://melpa.org/#/feed-discovery")
    (license #f)))

(define-public emacs-feline
  (package
    (name "emacs-feline")
    (version "20230315.1821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://opensource.chee.party/chee/feline-mode")
               (commit
                 "3f9247f48058285d3e03957680e011ecf58d6feb")))
        (sha256
          (base32
            "10512svsgag8shgwhxgkdncyxdmvc67aj42jmd5yzvzhizd25nsv"))))
    (build-system melpa-build-system)
    (home-page
      "https://opensource.chee.party/chee/feline-mode")
    (synopsis "A modeline with very little")
    (description
      "Documentation at https://melpa.org/#/feline")
    (license #f)))

(define-public emacs-fennel-mode
  (package
    (name "emacs-fennel-mode")
    (version "20231022.1926")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/fennel-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "07mlcyvz3m8kw83ivfr5i04p25a63z0icchwqyf7b69nqmj9whmh"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~technomancy/fennel-mode")
    (synopsis "A major-mode for editing Fennel code")
    (description
      "Documentation at https://melpa.org/#/fennel-mode")
    (license #f)))

(define-public emacs-fetch
  (package
    (name "emacs-fetch")
    (version "20131201.730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cbrst/fetch.el.git")
               (commit
                 "3f2793afcbbc32f320e572453166f9354ecc6d06")))
        (sha256
          (base32
            "0pjw9fb3n08yd38680ifdn2wlnw2k6q97lzhqb2259mywsycyqy8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/crshd/fetch.el")
    (synopsis "Fetch and unpack resources")
    (description
      "Documentation at https://melpa.org/#/fetch")
    (license #f)))

(define-public emacs-ffmpeg-player
  (package
    (name "emacs-ffmpeg-player")
    (version "20220704.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/ffmpeg-player.git")
               (commit
                 "fad2f5ce83800b7ddcd5927bd84d377990446981")))
        (sha256
          (base32
            "08mcbxiqq445cgbgib39c701216ifp9dsk8m4gdbbn9iam3vj3bx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "https://github.com/jcs-elpa/ffmpeg-player")
    (synopsis "Play video using ffmpeg")
    (description
      "Documentation at https://melpa.org/#/ffmpeg-player")
    (license #f)))

(define-public emacs-ffmpeg-utils
  (package
    (name "emacs-ffmpeg-utils")
    (version "20230305.709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/ffmpeg-utils.git")
               (commit
                 "064d61527bc6b6a1d0fb0065f8a7bae3bbd4cefc")))
        (sha256
          (base32
            "1aack840fvczgf620ab9bxh5r61zcj0cz90lw9l17fg3bw0fci4i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page "https://repo.or.cz/ffmpeg-utils.git")
    (synopsis "FFmpeg command utilities wrappers")
    (description
      "Documentation at https://melpa.org/#/ffmpeg-utils")
    (license #f)))

(define-public emacs-fic-mode
  (package
    (name "emacs-fic-mode")
    (version "20180603.2035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/fic-mode.git")
               (commit
                 "a05fc36ed54ba0c6dc22ac216a6a72cf191ca13d")))
        (sha256
          (base32
            "074dfwdir2dx5cpbjk1ac8d3hkjkrylivy7agir5mnmzjm3bs9gw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lewang/fic-mode")
    (synopsis
      "Show FIXME/TODO/BUG(...) in special face only in comments and strings")
    (description
      "Documentation at https://melpa.org/#/fic-mode")
    (license #f)))

(define-public emacs-fifo-class
  (package
    (name "emacs-fifo-class")
    (version "20160425.558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mola-T/fifo-class.git")
               (commit
                 "8fe4cf690727f4ac7b67f29c55f845df023c3f21")))
        (sha256
          (base32
            "0dkng4zkd5xdyvqy67bnfp4z6w8byx66bssq1zl7bhga45vihfjg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mola-T/fifo-class")
    (synopsis "First in first out abstract class")
    (description
      "Documentation at https://melpa.org/#/fifo-class")
    (license #f)))

(define-public emacs-figlet
  (package
    (name "emacs-figlet")
    (version "20160218.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/figlet.git")
               (commit
                 "19a38783a90e151faf047ff233a21a729db0cea9")))
        (sha256
          (base32
            "1c18b1h154sdxkksqwk8snyk8n43bwzgavi75l8mnz8dnl1ciaxs"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Annoy people with big, ascii art text")
    (description
      "Documentation at https://melpa.org/#/figlet")
    (license #f)))

(define-public emacs-file-info
  (package
    (name "emacs-file-info")
    (version "20230929.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Artawower/file-info.el.git")
               (commit
                 "21fb5d779be88364e464e54c8bb94d04518f6474")))
        (sha256
          (base32
            "1gj41r4fyiq876bg57a3kvxbf53x2dww4vhs551mqn8sak3lwmlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hydra emacs-browse-at-remote))
    (home-page
      "https://github.com/artawower/file-info.el")
    (synopsis
      "Show pretty information about current file")
    (description
      "Documentation at https://melpa.org/#/file-info")
    (license #f)))

(define-public emacs-filelock
  (package
    (name "emacs-filelock")
    (version "20180524.2215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/emacs-filelock.git")
               (commit
                 "17a5ca6e0dee14d2e7d92c84be91143bca9d9663")))
        (sha256
          (base32
            "1smiad56626bc7q6vgj5gc710hnx814d4xlpxdlfzqlmj08y9dyk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/DarwinAwardWinner/emacs-filelock")
    (synopsis
      "Functions for manipulating file locks")
    (description
      "Documentation at https://melpa.org/#/filelock")
    (license #f)))

(define-public emacs-filetags
  (package
    (name "emacs-filetags")
    (version "20190706.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DerBeutlin/filetags.el.git")
               (commit
                 "01e6a919507a832ee001a2a0fc257657f8b04b72")))
        (sha256
          (base32
            "15557rkbi3d40q2zs5vkgkpbya4c4ksnh2a07d8l7x457zah4fbn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DerBeutlin/filetags.el")
    (synopsis
      "Package to manage filetags in filename")
    (description
      "Documentation at https://melpa.org/#/filetags")
    (license #f)))

(define-public emacs-filetree
  (package
    (name "emacs-filetree")
    (version "20221108.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knpatel401/filetree.git")
               (commit
                 "1c48ef63a639bfe1ae4d5095725ef88a3f2c590d")))
        (sha256
          (base32
            "1y20zz6n72g4bqlfxfjlc7zgpf2qpd7q6qn13bvrn47104v9qjli"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-helm))
    (home-page
      "https://github.com/knpatel401/filetree")
    (synopsis
      "File tree view/manipulatation package")
    (description
      "Documentation at https://melpa.org/#/filetree")
    (license #f)))

(define-public emacs-fill-column-indicator
  (package
    (name "emacs-fill-column-indicator")
    (version "20200806.2239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpaker/fill-column-indicator.git")
               (commit
                 "c35f9de072c241699b57bcb46da84bed5af29cfe")))
        (sha256
          (base32
            "1q682bn6wgvga8arv4xfmr4nnw8nhw7qkjrlp5crpyv42x9yqr73"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Graphically indicate the fill column")
    (description
      "Documentation at https://melpa.org/#/fill-column-indicator")
    (license #f)))

(define-public emacs-fill-function-arguments
  (package
    (name "emacs-fill-function-arguments")
    (version "20210617.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/fill-function-arguments.git")
               (commit
                 "60a5a3c3004cffa111202b42217d604f63d72e70")))
        (sha256
          (base32
            "0z2a1h3lrkywlgccd66gi076bj1l52szp2bl337hrvdrla2hb3lx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidshepherd7/fill-function-arguments")
    (synopsis
      "Convert function arguments to/from single line")
    (description
      "Documentation at https://melpa.org/#/fill-function-arguments")
    (license #f)))

(define-public emacs-fill-page
  (package
    (name "emacs-fill-page")
    (version "20220704.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/fill-page.git")
               (commit
                 "7da1dc1259c1b15e28736d27d87f4cef40a3a18d")))
        (sha256
          (base32
            "1ryxay5pdwvcdz85wwmxsdpi1cjr38ybfawgg2pxcbyqizydlyry"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/fill-page")
    (synopsis
      "Fill buffer so you don't see empty lines at the end")
    (description
      "Documentation at https://melpa.org/#/fill-page")
    (license #f)))

(define-public emacs-fillcode
  (package
    (name "emacs-fillcode")
    (version "20200524.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/snarfed/fillcode.git")
               (commit
                 "501468082e46bd0975ef4d8765363fd564338099")))
        (sha256
          (base32
            "0z18x3gxh004nd648hwqdlb60a6ss61pkkqg30xpdmsrj8darf5q"))))
    (build-system melpa-build-system)
    (home-page "https://snarfed.org/fillcode")
    (synopsis
      "Fill (wrap) function calls and expressions in source code")
    (description
      "Documentation at https://melpa.org/#/fillcode")
    (license #f)))

(define-public emacs-filldent
  (package
    (name "emacs-filldent")
    (version "20220423.2216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/duckwork/filldent.el.git")
               (commit
                 "2f32e0cf5e27c613f962fa41bf3427bbdc04e6c0")))
        (sha256
          (base32
            "02hjn163f8pvs3p4ka879fizlivaxhvj1lzkma5fgrrwzhhg5nh8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/duckwork/filldent.el")
    (synopsis "Fill or indent")
    (description
      "Documentation at https://melpa.org/#/filldent")
    (license #f)))

(define-public emacs-finalize
  (package
    (name "emacs-finalize")
    (version "20170418.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elisp-finalize.git")
               (commit
                 "846731531e7d1d80451787992e07bfe7dedbe9ff")))
        (sha256
          (base32
            "0kqsqmfvnh0slx0hmrsw66rh62sgzyhzck7ii9zylkq72wj60fgl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/elisp-finalize")
    (synopsis "finalizers for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/finalize")
    (license #f)))

(define-public emacs-find-by-pinyin-dired
  (package
    (name "emacs-find-by-pinyin-dired")
    (version "20180210.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/find-by-pinyin-dired.git")
               (commit
                 "3b4781148dddc84a701ad76c0934ed991ecd59d5")))
        (sha256
          (base32
            "03fw1si115padxss6zb9fr0dsyq1bxlhxikgh4i5swp4jd4331k5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pinyinlib))
    (home-page
      "http://github.com/redguardtoo/find-by-pinyin-dired")
    (synopsis
      "Find file by first PinYin character of Chinese Hanzi")
    (description
      "Documentation at https://melpa.org/#/find-by-pinyin-dired")
    (license #f)))

(define-public emacs-find-dupes-dired
  (package
    (name "emacs-find-dupes-dired")
    (version "20210426.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/find-dupes-dired.git")
               (commit
                 "904225a3f89bbd3b44ea097a282ec6ca7945f7f1")))
        (sha256
          (base32
            "0bf3qnzhv7z71f4h9l0cq6mllkfmc81655qwbzakw3gqqmn8kyr3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ShuguangSun/find-dupes-dired")
    (synopsis "Find dupes and handle in dired")
    (description
      "Documentation at https://melpa.org/#/find-dupes-dired")
    (license #f)))

(define-public emacs-find-file-in-project
  (package
    (name "emacs-find-file-in-project")
    (version "20230506.544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/find-file-in-project.git")
               (commit
                 "889466d047ee93ab33fa8eaa4e1ef279d884f1da")))
        (sha256
          (base32
            "1vrr3fwifn3lpajh03rx5rzzgc5dks0p6154y1c7f49wqffds36p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/redguardtoo/find-file-in-project")
    (synopsis
      "Find file/directory and review Diff/Patch/Commit efficiently")
    (description
      "Documentation at https://melpa.org/#/find-file-in-project")
    (license #f)))

(define-public emacs-find-file-in-repository
  (package
    (name "emacs-find-file-in-repository")
    (version "20210301.2202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/h/find-file-in-repository.git")
               (commit
                 "10f5bd919ce35691addc5ce0d281597a46813a79")))
        (sha256
          (base32
            "0x8f0nw7w9lvkcrxgyfmdb8apw5da57lkbkxxysc8z5z6qzngqrr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hoffstaetter/find-file-in-repository")
    (synopsis
      "Quickly find files in a git, mercurial or other repository")
    (description
      "Documentation at https://melpa.org/#/find-file-in-repository")
    (license #f)))

(define-public emacs-find-file-rg
  (package
    (name "emacs-find-file-rg")
    (version "20220314.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-find-file-rg.git")
               (commit
                 "404b1cc97c2f700d3dc1c66b640f96ed5a268dc3")))
        (sha256
          (base32
            "18v3wdkh7ld6ap4nfc8p84i44gc99nrvk7v0gyq1zdg0yy20vwaq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-find-file-rg")
    (synopsis "Find file in project using ripgrep")
    (description
      "Documentation at https://melpa.org/#/find-file-rg")
    (license #f)))

(define-public emacs-find-temp-file
  (package
    (name "emacs-find-temp-file")
    (version "20221119.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/find-temp-file.git")
               (commit
                 "601e39b052c66df4cd928cf7e308dd6a54769a99")))
        (sha256
          (base32
            "0mlzrwiv9m8404lx576gkig8icmp7v2fk36x7z1zw2r4vi6r0qc1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/find-temp-file.git")
    (synopsis "Open quickly a temporary file")
    (description
      "Documentation at https://melpa.org/#/find-temp-file")
    (license #f)))

(define-public emacs-find-things-fast
  (package
    (name "emacs-find-things-fast")
    (version "20150519.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eglaysher/find-things-fast.git")
               (commit
                 "efc7c189019ed65430e2f9e910e8e0a5ca9d2d03")))
        (sha256
          (base32
            "1r6cs7p43pi6n2inbrv9q924m679izxwxqgyr4sjjj3lg6an4cnx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Find things fast, leveraging the power of git")
    (description
      "Documentation at https://melpa.org/#/find-things-fast")
    (license #f)))

(define-public emacs-findr
  (package
    (name "emacs-findr")
    (version "20130127.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/findr.git")
               (commit
                 "1ddbc0464bb05dcda392b62666ad17239a2152d3")))
        (sha256
          (base32
            "0wx4hd4agrfvk0igyash658cbf7v3bv01rlspllsvzr59fl3faqq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Breadth-first file-finding facility for (X)Emacs")
    (description
      "Documentation at https://melpa.org/#/findr")
    (license #f)))

(define-public emacs-fingers
  (package
    (name "emacs-fingers")
    (version "20160817.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/fingers.el.git")
               (commit
                 "fed0f742afb1d72eaef29d8da394467550a030fa")))
        (sha256
          (base32
            "1mx05zfdrkwb50l7f0iycsqw23b1gxzacfnssclb42xdjxxmyhdj"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fgeller/fingers.el")
    (synopsis
      "Modal editing with universal text manipulation helpers.")
    (description
      "Documentation at https://melpa.org/#/fingers")
    (license #f)))

(define-public emacs-finito
  (package
    (name "emacs-finito")
    (version "20230921.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LaurenceWarne/finito.el.git")
               (commit
                 "c2b91c583374ffb8ea629c312132104c07af741d")))
        (sha256
          (base32
            "0a8j46dbqr07rw2a3xnl5kh45rwm5fdnmhhy01l1iyw88w2z8azs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-request
            emacs-f
            emacs-s
            emacs-graphql
            emacs-async))
    (home-page
      "https://github.com/LaurenceWarne/finito.el")
    (synopsis "View and collect books")
    (description
      "Documentation at https://melpa.org/#/finito")
    (license #f)))

(define-public emacs-fiplr
  (package
    (name "emacs-fiplr")
    (version "20140724.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grizzl/fiplr.git")
               (commit
                 "3f50159fd42125440d5b0eb9d6398560461f030b")))
        (sha256
          (base32
            "14wnzww8qqr7ffjvnbfz0p4qfvpgv1rvn8753ik9q20jrgisvc69"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grizzl))
    (home-page "https://github.com/d11wtq/fiplr")
    (synopsis "Fuzzy Search for Files in Projects")
    (description
      "Documentation at https://melpa.org/#/fiplr")
    (license #f)))

(define-public emacs-fira-code-mode
  (package
    (name "emacs-fira-code-mode")
    (version "20220531.1555")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jming422/fira-code-mode.git")
               (commit
                 "7b469ca0c22b7e6a907cd65eebdfa9723998a131")))
        (sha256
          (base32
            "1jgkgnpi5zmmqmm622p3cl0hj72cbag68c8mbi9bakw2fkq64xm2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jming422/fira-code-mode")
    (synopsis
      "Minor mode for Fira Code ligatures using prettify-symbols")
    (description
      "Documentation at https://melpa.org/#/fira-code-mode")
    (license #f)))

(define-public emacs-firecode-theme
  (package
    (name "emacs-firecode-theme")
    (version "20170808.1311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-firecode-theme.git")
               (commit
                 "8b7b03ecdd41e70dab145b98906017e1392eaef4")))
        (sha256
          (base32
            "1vrpnv7555mbsksflgdkg7hc65fjcyzvzv2261y043rlh2qrn0sy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on FireCode (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/firecode-theme")
    (license #f)))

(define-public emacs-fireplace
  (package
    (name "emacs-fireplace")
    (version "20200402.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johanvts/emacs-fireplace.git")
               (commit
                 "f6c23e259349922aae25cf2898ba815a7d8f2527")))
        (sha256
          (base32
            "16cb8grw2cfgdix1sr5a3fnwhhc93ci8qgbhgs5ilyayy2cb6s4c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/johanvts/emacs-fireplace")
    (synopsis "A cozy fireplace for emacs")
    (description
      "Documentation at https://melpa.org/#/fireplace")
    (license #f)))

(define-public emacs-firestarter
  (package
    (name "emacs-firestarter")
    (version "20210508.1626")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/firestarter-"
               version
               ".el"))
        (sha256
          (base32
            "0ncjbilh23vn52n1ag7hrw515rj1bb4s3i0i8am6pqcffl5922i3"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/firestarter")
    (synopsis "Execute (shell) commands on save")
    (description
      "Documentation at https://melpa.org/#/firestarter")
    (license #f)))

(define-public emacs-firrtl-mode
  (package
    (name "emacs-firrtl-mode")
    (version "20230815.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IBM/firrtl-mode.git")
               (commit
                 "45ec466d2945c2893ca4d6b24ff3816fceb8f1b2")))
        (sha256
          (base32
            "0k6n9js7af5asj1cxpplc7blw92mrdp1s3p2pdcdbxkrk9qx020r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ibm/firrtl-mode")
    (synopsis "mode for working with FIRRTL files")
    (description
      "Documentation at https://melpa.org/#/firrtl-mode")
    (license #f)))

(define-public emacs-fish-completion
  (package
    (name "emacs-fish-completion")
    (version "20191103.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/Ambrevar/emacs-fish-completion.git")
               (commit
                 "10384881817b5ae38cf6197a077a663420090d2c")))
        (sha256
          (base32
            "17lqip1i1rrsvxzz4bx9rqf1fvwd3hriwg3sj6qxmfc8pylnp37q"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/Ambrevar/emacs-fish-completion")
    (synopsis
      "Fish completion for pcomplete (shell and Eshell)")
    (description
      "Documentation at https://melpa.org/#/fish-completion")
    (license #f)))

(define-public emacs-fish-mode
  (package
    (name "emacs-fish-mode")
    (version "20230326.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wwwjfy/emacs-fish.git")
               (commit
                 "6869efbc05cdb628209338bf57fe52742e53d956")))
        (sha256
          (base32
            "0ancsmnliqhc7fn82pa6flp02rczg0gwh17gpfp60jpi3mv1niws"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for fish shell scripts")
    (description
      "Documentation at https://melpa.org/#/fish-mode")
    (license #f)))

(define-public emacs-fit-text-scale
  (package
    (name "emacs-fit-text-scale")
    (version "20211230.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/fit-text-scale.git")
               (commit
                 "c53c8ce606380088643463848a9ee3502b0c64f4")))
        (sha256
          (base32
            "00jbfi2k72w01lzxn9gjam7nabbaqwas3gr922a5s04494yyc8rp"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/fit-text-scale")
    (synopsis "Fit text by scaling")
    (description
      "Documentation at https://melpa.org/#/fit-text-scale")
    (license #f)))

(define-public emacs-fix-input
  (package
    (name "emacs-fix-input")
    (version "20230606.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/fix-input.git")
               (commit
                 "e1d3e86cdd295640ebde58bf6af302281066f36c")))
        (sha256
          (base32
            "0m2h2aailgpvqgyks0irzg8kyrmfd0a0v1z5ca94852ckk9dz93m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/fix-input")
    (synopsis
      "Make input methods play nicely with alternative layouts")
    (description
      "Documentation at https://melpa.org/#/fix-input")
    (license #f)))

(define-public emacs-fix-muscle-memory
  (package
    (name "emacs-fix-muscle-memory")
    (version "20210702.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jonnay/fix-muscle-memory.git")
               (commit
                 "b8d4b8025d758762f4459c70c3a7a209ead865ed")))
        (sha256
          (base32
            "0g3rg7bg256ymkby33nd5yhaf24216ghhkwvcz1vl54yzyfv8w2x"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("fix-muscle-memory.el")))
    (home-page "unspecified")
    (synopsis
      "Simple hacks to fix muscle memory problems")
    (description
      "Documentation at https://melpa.org/#/fix-muscle-memory")
    (license #f)))

(define-public emacs-fix-word
  (package
    (name "emacs-fix-word")
    (version "20210319.1414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/fix-word.git")
               (commit
                 "e967dd4ac98d777deeede8b497d6337634c06df4")))
        (sha256
          (base32
            "1hs51fb5m9asrzalkyldwlcnw7w6rhdwsspn846yc8s2yprphjz0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/fix-word")
    (synopsis "Convenient word transformation")
    (description
      "Documentation at https://melpa.org/#/fix-word")
    (license #f)))

(define-public emacs-fixed-page-mode
  (package
    (name "emacs-fixed-page-mode")
    (version "20230531.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/igorwojnicki/fixed-page-mode.git")
               (commit
                 "f92993ea419718b67613b110d3921b05124f253d")))
        (sha256
          (base32
            "08yq6hncy8vqa2plpxa4gkq244wig2pd05w4ws0j8nmpwcwl6zki"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/igorwojnicki/fixed-page-mode")
    (synopsis "A fixed page length mode")
    (description
      "Documentation at https://melpa.org/#/fixed-page-mode")
    (license #f)))

(define-public emacs-fixmee
  (package
    (name "emacs-fixmee")
    (version "20230415.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/fixmee.git")
               (commit
                 "54500aaa8ae019034dc170af33f43465f5f03123")))
        (sha256
          (base32
            "1cm5y6cjs561w3yq0bawnn2f524kk9w485dad9ap3088rrgv89qm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-button-lock
            emacs-nav-flash
            emacs-back-button
            emacs-smartrep
            emacs-string-utils))
    (home-page
      "http://github.com/rolandwalker/fixmee")
    (synopsis
      "Quickly navigate to FIXME notices in code")
    (description
      "Documentation at https://melpa.org/#/fixmee")
    (license #f)))

(define-public emacs-flame
  (package
    (name "emacs-flame")
    (version "20180303.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/flame.git")
               (commit
                 "a749b2a77b87e505572d0f1f5d59fac76348bb73")))
        (sha256
          (base32
            "1l9jbzavyi75li64jqfs000s1m8iw9xvsv8mg0bw1div6bc7vq7s"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mschuldt/flame")
    (synopsis
      "automatic generation of flamage, as if we needed more.")
    (description
      "Documentation at https://melpa.org/#/flame")
    (license #f)))

(define-public emacs-flames-of-freedom
  (package
    (name "emacs-flames-of-freedom")
    (version "20191202.1637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wiz21b/FlamesOfFreedom.git")
               (commit
                 "5e47ff27cfa2f7c06081be2ffefe91a731efd012")))
        (sha256
          (base32
            "1xgrd2ybf8g488fq698xv30bqzcv1swxqnds61slj99w6k2gm29i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wiz21b/FlamesOfFreedom")
    (synopsis "The flames of freedom")
    (description
      "Documentation at https://melpa.org/#/flames-of-freedom")
    (license #f)))

(define-public emacs-flappymacs
  (package
    (name "emacs-flappymacs")
    (version "20171023.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taksatou/flappymacs.git")
               (commit
                 "27f3e21acb22f786606481e3f4e5dc1edbaaaed4")))
        (sha256
          (base32
            "0zcwsbz93p1l2jb1fs6m4s5y9klcr5qg5nw10qg30j9l2bc1hda8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taksatou/flappymacs")
    (synopsis "flappybird clone for emacs")
    (description
      "Documentation at https://melpa.org/#/flappymacs")
    (license #f)))

(define-public emacs-flash-region
  (package
    (name "emacs-flash-region")
    (version "20130923.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/flash-region.git")
               (commit
                 "261b3597b23cdd40e5c14262a5687bcc6c1d0901")))
        (sha256
          (base32
            "0z77lm6jv2w5z551pwarcx6xg9kx8fgms9dlskngfvnzbqkldj1f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Flash a region")
    (description
      "Documentation at https://melpa.org/#/flash-region")
    (license #f)))

(define-public emacs-flatbuffers-mode
  (package
    (name "emacs-flatbuffers-mode")
    (version "20210710.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Asalle/flatbuffers-mode.git")
               (commit
                 "8e7783db45a64c9456130fd0c108ac12d45a7789")))
        (sha256
          (base32
            "1g446s8xhgcrkqhl08d6l68gga6n3c3hdk4z3bazglfwycynhpp9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Asalle/flatbuffers-mode")
    (synopsis "Major mode for editing flatbuffers")
    (description
      "Documentation at https://melpa.org/#/flatbuffers-mode")
    (license #f)))

(define-public emacs-flatfluc-theme
  (package
    (name "emacs-flatfluc-theme")
    (version "20230721.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seblemaguer/flatfluc-theme.git")
               (commit
                 "9c9ae6f34aa8fca537cdd8a899b337ba8302fb9d")))
        (sha256
          (base32
            "0nbb1dal3m1s3ryizkwvk3ck0axq62ngcwvrkjp3zx8nk3486jm5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/seblemaguer/flatfluc-theme")
    (synopsis
      "Custom merge of flucui and flatui themes")
    (description
      "Documentation at https://melpa.org/#/flatfluc-theme")
    (license #f)))

(define-public emacs-flatland-black-theme
  (package
    (name "emacs-flatland-black-theme")
    (version "20170808.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-flatland-black-theme.git")
               (commit
                 "348c5d5fe615e6ea13cadc17f046e506e789ce07")))
        (sha256
          (base32
            "1g5jqxdk35ahx8qk4vi7whhcpi1qp7rbbjgiih974fs59cg5iki0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/flatland-black-theme")
    (synopsis
      "an Emacs 24 theme based on Flatland Black (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/flatland-black-theme")
    (license #f)))

(define-public emacs-flatland-theme
  (package
    (name "emacs-flatland-theme")
    (version "20171113.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gchp/flatland-emacs.git")
               (commit
                 "a98a6f19ad4dff0fa3fad1ea487b7d0ef634a19a")))
        (sha256
          (base32
            "02gbzxd1v003aaj5rn3vr00n4390bhdx2jhpa7nb430fg3s1ppdy"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("flatland-theme.el")))
    (home-page
      "http://github.com/gregchapple/flatland-emacs")
    (synopsis
      "A simple theme for Emacs based on the Flatland theme for Sublime Text")
    (description
      "Documentation at https://melpa.org/#/flatland-theme")
    (license #f)))

(define-public emacs-flatui-dark-theme
  (package
    (name "emacs-flatui-dark-theme")
    (version "20170513.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theasp/flatui-dark-theme.git")
               (commit
                 "5b959a9f743f891e4660b1b432086417947872ea")))
        (sha256
          (base32
            "0nz4ql7qf49cwsgjb7dg0jhipr5d472r4fddy6fhr1h17s1cd9qy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/theasp/flatui-dark-theme")
    (synopsis
      "Dark color theme with colors from https://flatuicolors.com/")
    (description
      "Documentation at https://melpa.org/#/flatui-dark-theme")
    (license #f)))

(define-public emacs-flatui-theme
  (package
    (name "emacs-flatui-theme")
    (version "20160619.127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/flatui-theme.el.git")
               (commit
                 "9c15db5526c15c8dba55023f5698372b19c2a780")))
        (sha256
          (base32
            "0ybgpnbq3b0ml3lzgkispn667acpjww7z6cr7hgwg3j1zrqpwi75"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/john2x/flatui-theme.el")
    (synopsis
      "A color theme for Emacs based on flatuicolors.com")
    (description
      "Documentation at https://melpa.org/#/flatui-theme")
    (license #f)))

(define-public emacs-fleetish-theme
  (package
    (name "emacs-fleetish-theme")
    (version "20230407.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nylar/fleetish-emacs-theme.git")
               (commit
                 "482513562b6691c7f3440b62a31033d22378ed96")))
        (sha256
          (base32
            "1svfj3z9kiyw6743p18h4116wzzv23lwjaksrfbdlcy856akigbm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nylar/fleetish-emacs-theme")
    (synopsis "A take on the JetBrains Fleet theme")
    (description
      "Documentation at https://melpa.org/#/fleetish-theme")
    (license #f)))

(define-public emacs-flex-autopair
  (package
    (name "emacs-flex-autopair")
    (version "20120809.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/flex-autopair.git")
               (commit
                 "4bb757f2556a4a51828e2fed8fb81e31e83052cb")))
        (sha256
          (base32
            "187ah7yhmr3ckw23bf4fivx8v79yj0zmilrkjj7k6l198w8wmvql"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/uk-ar/flex-autopair.el")
    (synopsis
      "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable.")
    (description
      "Documentation at https://melpa.org/#/flex-autopair")
    (license #f)))

(define-public emacs-flex-compile
  (package
    (name "emacs-flex-compile")
    (version "20230808.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/flex-compile.git")
               (commit
                 "17b2b16f8867312a868f338a49ba8615d2d23461")))
        (sha256
          (base32
            "0c37vzfd5c4k502bbx6qnc6046dsqy75g6nmaxx756f6p6nng5vq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-buffer-manage))
    (home-page
      "https://github.com/plandes/flex-compile")
    (synopsis
      "Run, evaluate and compile across many languages")
    (description
      "Documentation at https://melpa.org/#/flex-compile")
    (license #f)))

(define-public emacs-flex-isearch
  (package
    (name "emacs-flex-isearch")
    (version "20170308.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/flex-isearch.git")
               (commit
                 "b1f7e04de762282c276343cc2709af9ff4abc9d2")))
        (sha256
          (base32
            "0xbwrzkfv4i91qxs80p0pfjlvj5pyigvidby8m5lammm8idwx9dh"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/jpkotta/flex-isearch")
    (synopsis "Flex matching (like ido) in isearch.")
    (description
      "Documentation at https://melpa.org/#/flex-isearch")
    (license #f)))

(define-public emacs-flexoki-themes
  (package
    (name "emacs-flexoki-themes")
    (version "20231026.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crmsnbleyd/flexoki-emacs-theme.git")
               (commit
                 "149d00ee4cd17ab465db004910b67456db142802")))
        (sha256
          (base32
            "056hzf4r8bzzmmhlrgh6f0pppsr3spbrpiwb2kpkdbg1fwi9bjkf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/crmsnbleyd/flexoki-emacs-theme")
    (synopsis
      "An inky color scheme for prose and code")
    (description
      "Documentation at https://melpa.org/#/flexoki-themes")
    (license #f)))

(define-public emacs-flim
  (package
    (name "emacs-flim")
    (version "20230808.1153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/flim.git")
               (commit
                 "80b8121f05a5a0d7fcfe3e54085467a646dd2028")))
        (sha256
          (base32
            "02shd2mp9ywncn0wxgrijn0i8fa69kfx1y6nh5jjd64dyiczmskk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-apel emacs-oauth2))
    (arguments
      '(#:files
        ("*.texi"
         "*.el"
         (:exclude
           "md5-dl.el"
           "md5-el.el"
           "mel-b-dl.el"
           "sha1-dl.el"
           "smtpmail.el"))))
    (home-page "unspecified")
    (synopsis
      "A library to provide basic features about message representation or encoding.")
    (description
      "Documentation at https://melpa.org/#/flim")
    (license #f)))

(define-public emacs-flimenu
  (package
    (name "emacs-flimenu")
    (version "20200810.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/flimenu.git")
               (commit
                 "4c0ff37cf3bd6c836bd136b5f6c450560a6c92b9")))
        (sha256
          (base32
            "1z57vm8pgxfhklzz4gpyqy8wwv3dzl76dzgilx5pfkd69m2jrijg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/IvanMalison/flimenu")
    (synopsis "Flatten imenu automatically")
    (description
      "Documentation at https://melpa.org/#/flimenu")
    (license #f)))

(define-public emacs-fliptext
  (package
    (name "emacs-fliptext")
    (version "20171124.2056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andre-r/fliptext.el.git")
               (commit
                 "fd821f645ffebae6ae3894afa7ba7fc06f91afc6")))
        (sha256
          (base32
            "1jf63kp1myxihv6r13cddxgr8cchxcnnmylj5dx50y42595ia4yh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Input method for flipping characters upside down")
    (description
      "Documentation at https://melpa.org/#/fliptext")
    (license #f)))

(define-public emacs-floobits
  (package
    (name "emacs-floobits")
    (version "20211018.550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Floobits/floobits-emacs.git")
               (commit
                 "93b3317fb6c842efe165e54c8a32bf51d436837d")))
        (sha256
          (base32
            "1fxjba956ikhnsgzvavgg96ryz8q6h55az7cnkgcy58q7b0jk1j2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-highlight))
    (arguments
      '(#:files ("floo" "floobits.el" "floobits.py")))
    (home-page
      "http://github.com/Floobits/floobits-emacs")
    (synopsis
      "Floobits plugin for real-time collaborative editing")
    (description
      "Documentation at https://melpa.org/#/floobits")
    (license #f)))

(define-public emacs-flow-js2-mode
  (package
    (name "emacs-flow-js2-mode")
    (version "20191213.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/flow-js2-mode.git")
               (commit
                 "7520bdda70287e8d57b3f41033b1e0ca59a3be95")))
        (sha256
          (base32
            "1d0g5v3nwy2wyjgh1f1s27bb8nxcfhq6yq3d7scgbnd6v6anyxxv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flow-minor-mode emacs-js2-mode))
    (arguments '(#:files ("flow-js2-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Support for flow annotations in js2-mode")
    (description
      "Documentation at https://melpa.org/#/flow-js2-mode")
    (license #f)))

(define-public emacs-flow-minor-mode
  (package
    (name "emacs-flow-minor-mode")
    (version "20200905.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/an-sh/flow-minor-mode.git")
               (commit
                 "804217a15a28f6918fba93c91d495ed7d50b0495")))
        (sha256
          (base32
            "0a4pbk5bx4l2hsqafpqqaz96bw1ffig2yjz16mkgd6zf41rw70la"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/an-sh/flow-minor-mode")
    (synopsis "Flow type mode based on web-mode.")
    (description
      "Documentation at https://melpa.org/#/flow-minor-mode")
    (license #f)))

(define-public emacs-flower
  (package
    (name "emacs-flower")
    (version "20220416.1744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/FlowerAutomation/flower.git")
               (commit
                 "047846409867b2dd0ba4e2047a414b498680cd9c")))
        (sha256
          (base32
            "0bbmyd03rhpkifgjk60pfg0knqh2d7nl3qfi0rzqk44f2f556j89"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clomacs))
    (arguments '(#:files (:defaults "project.clj")))
    (home-page
      "https://github.com/FlowerAutomation/flower")
    (synopsis "Emacs task tracker client.")
    (description
      "Documentation at https://melpa.org/#/flower")
    (license #f)))

(define-public emacs-flucui-themes
  (package
    (name "emacs-flucui-themes")
    (version "20200815.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MetroWind/flucui-theme.git")
               (commit
                 "6591b5093e6e8f0e720e3995a16a91835b2e7a48")))
        (sha256
          (base32
            "1lrpx1y103655xwaqkvn7i2zvkzbsf5bm7zndaj31rpm917xcm3i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MetroWind/flucui-theme")
    (synopsis
      "Custom theme inspired by the Flat UI palette")
    (description
      "Documentation at https://melpa.org/#/flucui-themes")
    (license #f)))

(define-public emacs-flutter
  (package
    (name "emacs-flutter")
    (version "20230811.458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amake/flutter.el.git")
               (commit
                 "285eb8646cd37eb4ed997124d1ad71fea2cbe6b7")))
        (sha256
          (base32
            "10lyjajdxinkhlchzn45cvd6y0121gba5581ikdwm7jaab5pch6p"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("flutter.el"
         "flutter-project.el"
         "flutter-l10n.el")))
    (home-page "https://github.com/amake/flutter.el")
    (synopsis "Tools for working with Flutter SDK")
    (description
      "Documentation at https://melpa.org/#/flutter")
    (license #f)))

(define-public emacs-flutter-l10n-flycheck
  (package
    (name "emacs-flutter-l10n-flycheck")
    (version "20220502.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amake/flutter.el.git")
               (commit
                 "e49cbcb70235fa39a7d243521e03ad874451a39a")))
        (sha256
          (base32
            "1hjfkcdi99yfld9jakhhrncpm2yvg03xz35dngc6nn23dkwdpidm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-flutter))
    (arguments
      '(#:files ("flutter-l10n-flycheck.el")))
    (home-page "https://github.com/amake/flutter.el")
    (synopsis
      "Flycheck checker for intl_translation")
    (description
      "Documentation at https://melpa.org/#/flutter-l10n-flycheck")
    (license #f)))

(define-public emacs-flx
  (package
    (name "emacs-flx")
    (version "20221213.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/flx.git")
               (commit
                 "7b44a5abb254bbfbeca7a29336f7f4ebd8aabbf2")))
        (sha256
          (base32
            "18vzjsscm9hsxxnacqfaskwayxhlg258rj8m7m8kim12nndgkzcy"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("flx.el")))
    (home-page "https://github.com/lewang/flx")
    (synopsis "fuzzy matching with good sorting")
    (description
      "Documentation at https://melpa.org/#/flx")
    (license #f)))

(define-public emacs-flx-ido
  (package
    (name "emacs-flx-ido")
    (version "20221213.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/flx.git")
               (commit
                 "7b44a5abb254bbfbeca7a29336f7f4ebd8aabbf2")))
        (sha256
          (base32
            "18vzjsscm9hsxxnacqfaskwayxhlg258rj8m7m8kim12nndgkzcy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flx))
    (arguments '(#:files ("flx-ido.el")))
    (home-page "https://github.com/lewang/flx")
    (synopsis "flx integration for ido")
    (description
      "Documentation at https://melpa.org/#/flx-ido")
    (license #f)))

(define-public emacs-flx-isearch
  (package
    (name "emacs-flx-isearch")
    (version "20191119.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/flx-isearch.git")
               (commit
                 "a44097fb8f539a193c2f09a37ea52a68f2c51839")))
        (sha256
          (base32
            "051cpdggssmbz2zhr26q2831a8g2n66r5f1aqbvczg3kfw1axpkq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flx))
    (home-page
      "https://github.com/pythonnut/flx-isearch")
    (synopsis
      "Fuzzy incremental searching for emacs")
    (description
      "Documentation at https://melpa.org/#/flx-isearch")
    (license #f)))

(define-public emacs-flycheck
  (package
    (name "emacs-flycheck")
    (version "20230813.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck.git")
               (commit
                 "773c3eb31ebeb6bb2f9f57d28177882ca7073df0")))
        (sha256
          (base32
            "0x01d41gqvgi7r96snswrik6l2nb1wzf6nd1wzm47a1qj0l46061"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-pkg-info))
    (home-page "http://www.flycheck.org")
    (synopsis "On-the-fly syntax checking")
    (description
      "Documentation at https://melpa.org/#/flycheck")
    (license #f)))

(define-public emacs-flycheck-actionlint
  (package
    (name "emacs-flycheck-actionlint")
    (version "20230802.913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tirimia/flycheck-actionlint.git")
               (commit
                 "f3baf396b534f8b874d3ae885cc1dd53b5098dff")))
        (sha256
          (base32
            "14jjfgxgsaqnn36c51isx55lxbidyxh9dq3qa1baf44p259xy44p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/tirimia/flycheck-actionlint")
    (synopsis "Flycheck integration for actionlint")
    (description
      "Documentation at https://melpa.org/#/flycheck-actionlint")
    (license #f)))

(define-public emacs-flycheck-ameba
  (package
    (name "emacs-flycheck-ameba")
    (version "20191226.1011")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-ameba/ameba.el.git")
               (commit
                 "0c4925ae0e998818326adcb47ed27ddf9761c7dc")))
        (sha256
          (base32
            "0jh0pfyqdks9xk43765vgm4569a8ny01pk3gy2p3vr5gdgfdm4a3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("flycheck-ameba.el")))
    (home-page
      "https://github.com/crystal-ameba/ameba.el")
    (synopsis "Add support for Ameba to Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-ameba")
    (license #f)))

(define-public emacs-flycheck-apertium
  (package
    (name "emacs-flycheck-apertium")
    (version "20181211.1038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/flycheck-apertium.git")
               (commit
                 "22b60a17836477ac1edd15dc85b14f88ca871ba9")))
        (sha256
          (base32
            "0313h4yh85xndzvy3yzznar79ys0ng3rdsz0xa237xqsf71ypg4z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments
      '(#:files ("flycheck-apertium.el" "dix.xsd")))
    (home-page "http://wiki.apertium.org/wiki/Emacs")
    (synopsis "Apertium checkers in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-apertium")
    (license #f)))

(define-public emacs-flycheck-aspell
  (package
    (name "emacs-flycheck-aspell")
    (version "20230408.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leotaku/flycheck-aspell.git")
               (commit
                 "14784edce6b61d198c11cb2a8d42bb4502033bf4")))
        (sha256
          (base32
            "1s6danwqgkzrq9n408z5wfjfdnmcjd1bi4372xz9vfwbi4yd2nir"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("flycheck-aspell.el")))
    (home-page
      "https://github.com/leotaku/flycheck-aspell")
    (synopsis "Aspell checker for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-aspell")
    (license #f)))

(define-public emacs-flycheck-ats2
  (package
    (name "emacs-flycheck-ats2")
    (version "20170225.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drvink/flycheck-ats2.git")
               (commit
                 "9f77add8408462af35bdddf87e37a661880255e3")))
        (sha256
          (base32
            "1fv3r49i8dgszaq5rs8dwnwcj6rgx922ww01ikrq3b4c9y17srpz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "http://github.com/drvink/flycheck-ats2")
    (synopsis "Flycheck: ATS2 support")
    (description
      "Documentation at https://melpa.org/#/flycheck-ats2")
    (license #f)))

(define-public emacs-flycheck-bashate
  (package
    (name "emacs-flycheck-bashate")
    (version "20200625.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-bashate.git")
               (commit
                 "5e673c591d017329d0a07a61dc1223fa98639ee2")))
        (sha256
          (base32
            "1gaih50mkyby0r4qnmc03dy111ik4and5p6r3lvsflpvd3hcxjn3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-bashate")
    (synopsis "Integrate bashate with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-bashate")
    (license #f)))

(define-public emacs-flycheck-buf-lint
  (package
    (name "emacs-flycheck-buf-lint")
    (version "20230724.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shuxiao9058/flycheck-buf-lint.git")
               (commit
                 "51c439dcb9fa40966256d8cce835f7b7aabf44d0")))
        (sha256
          (base32
            "1gq8abj5ld2hqhwc0p7qmf8vfy8nj3pfzzdba2yh8zx8l22r2h3i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck emacs-s))
    (home-page
      "https://github.com/shuxiao9058/flycheck-buf-lint")
    (synopsis
      "Flycheck checker for protobuf with buf.build")
    (description
      "Documentation at https://melpa.org/#/flycheck-buf-lint")
    (license #f)))

(define-public emacs-flycheck-cask
  (package
    (name "emacs-flycheck-cask")
    (version "20200926.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-cask.git")
               (commit
                 "4b2ede6362ded4a45678dfbef1876faa42edbd58")))
        (sha256
          (base32
            "0fzcknz2gicpx5rqf8qdxiy1g2kppy2qzsgszxm28mbahf0913bb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-cask")
    (synopsis "Cask support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-cask")
    (license #f)))

(define-public emacs-flycheck-cfn
  (package
    (name "emacs-flycheck-cfn")
    (version "20231030.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/worr/cfn-mode.git")
               (commit
                 "5f90b7a5cdd1b5b0b93f4daab63fbd4ab1fe02c4")))
        (sha256
          (base32
            "07qsi45v3kdp9d1ap63ppgpdpmddznbn3cbvvw81wbwys3gax1j1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments
      '(#:files ("flycheck-cfn/flycheck-cfn.el")))
    (home-page "https://gitlab.com/worr/cfn-mode")
    (synopsis
      "Flycheck backend for AWS cloudformation")
    (description
      "Documentation at https://melpa.org/#/flycheck-cfn")
    (license #f)))

(define-public emacs-flycheck-checkbashisms
  (package
    (name "emacs-flycheck-checkbashisms")
    (version "20230313.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cuonglm/flycheck-checkbashisms.git")
               (commit
                 "ca8f11679c77d6702f34e773bdde185ceb47a05d")))
        (sha256
          (base32
            "17mb37dz8a9qfprknca3higzrb39dyn5zv396nd8z5zi9b9fmrh1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/cuonglm/flycheck-checkbashisms")
    (synopsis "checkbashisms checker for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-checkbashisms")
    (license #f)))

(define-public emacs-flycheck-checkpatch
  (package
    (name "emacs-flycheck-checkpatch")
    (version "20170217.1025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zpp0/flycheck-checkpatch.git")
               (commit
                 "6461fc7b0d493eb9863814055f8bce5fa35739de")))
        (sha256
          (base32
            "1651xmw01n5h7x81y3cvsamdmb67jcf385ax52dkp8miyq1a090r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/zpp0/flycheck-checkpatch")
    (synopsis
      "Flycheck support for checkpatch.pl tool")
    (description
      "Documentation at https://melpa.org/#/flycheck-checkpatch")
    (license #f)))

(define-public emacs-flycheck-clang-analyzer
  (package
    (name "emacs-flycheck-clang-analyzer")
    (version "20211214.648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-clang-analyzer.git")
               (commit
                 "646d9f3a80046ab231a07526778695d5decad92d")))
        (sha256
          (base32
            "1v6h5602vf831qnlxxncbvc6hjvshr2gkg878ksdgb2bl708a1gx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-clang-analyzer")
    (synopsis
      "Integrate Clang Analyzer with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-clang-analyzer")
    (license #f)))

(define-public emacs-flycheck-clang-tidy
  (package
    (name "emacs-flycheck-clang-tidy")
    (version "20201115.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ch1bo/flycheck-clang-tidy.git")
               (commit
                 "f9ae7306bd6ca08b689b36c1e8f6f6b91d61db5f")))
        (sha256
          (base32
            "1akb41ndwqva34i059cyprsx9b8v3pxgvl082d36x86zplg06ssa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/ch1bo/flycheck-clang-tidy")
    (synopsis
      "Flycheck syntax checker using clang-tidy")
    (description
      "Documentation at https://melpa.org/#/flycheck-clang-tidy")
    (license #f)))

(define-public emacs-flycheck-clangcheck
  (package
    (name "emacs-flycheck-clangcheck")
    (version "20150712.710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kumar8600/flycheck-clangcheck.git")
               (commit
                 "24a9424c484420073a24443a829fd5779752362b")))
        (sha256
          (base32
            "1ckzs32wzqpnw89rrw3l7i4gbyn25wagbadsc4mcrixml5nf0mck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/kumar8600/flycheck-clangcheck")
    (synopsis
      "A Flycheck checker difinition for ClangCheck.")
    (description
      "Documentation at https://melpa.org/#/flycheck-clangcheck")
    (license #f)))

(define-public emacs-flycheck-clj-kondo
  (package
    (name "emacs-flycheck-clj-kondo")
    (version "20211227.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/borkdude/flycheck-clj-kondo.git")
               (commit
                 "d8a6ee9a16aa24b5be01f1edf9843d41bdc75555")))
        (sha256
          (base32
            "010gzxwvr2p2wv358r76ajkn48ilgmkmv7z6bckqbap0cjhrqq43"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/borkdude/flycheck-clj-kondo")
    (synopsis "Add clj-kondo linter to flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-clj-kondo")
    (license #f)))

(define-public emacs-flycheck-clojure
  (package
    (name "emacs-flycheck-clojure")
    (version "20191215.2227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/squiggly-clojure.git")
               (commit
                 "592c4f89efb5112784cbf94c9ea6fdd045771b62")))
        (sha256
          (base32
            "0yyy1c385jn0m6ql7vf9za4waqznr4mvv7fd234ygcbvhqn4pfdz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-flycheck))
    (arguments
      '(#:files ("elisp/flycheck-clojure/*.el")))
    (home-page
      "https://github.com/clojure-emacs/squiggly-clojure")
    (synopsis "Flycheck: Clojure support")
    (description
      "Documentation at https://melpa.org/#/flycheck-clojure")
    (license #f)))

(define-public emacs-flycheck-clolyze
  (package
    (name "emacs-flycheck-clolyze")
    (version "20190422.2134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DLaps/flycheck-clolyze.git")
               (commit
                 "c8b27602dd505aeae6486feb6f584754079baf51")))
        (sha256
          (base32
            "163qlcjwzg8yg7ygg8h99484basz76fsqwdgv8s7v7kyfsclbjq8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/DLaps/flycheck-clolyze")
    (synopsis "Add Clolyze to to flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-clolyze")
    (license #f)))

(define-public emacs-flycheck-color-mode-line
  (package
    (name "emacs-flycheck-color-mode-line")
    (version "20230106.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-color-mode-line.git")
               (commit
                 "df9be4c5bf26c4dc5ddaeed8179c4d66bdaa91f5")))
        (sha256
          (base32
            "0hrpljkq5djgpz9llk7hmqfym9svq3l8nhlbd27bhpv95bdp58w9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/flycheck/flycheck-color-mode-line")
    (synopsis
      "Change mode line color with Flycheck status")
    (description
      "Documentation at https://melpa.org/#/flycheck-color-mode-line")
    (license #f)))

(define-public emacs-flycheck-coverity
  (package
    (name "emacs-flycheck-coverity")
    (version "20170704.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-coverity.git")
               (commit
                 "cb211e3dd50413a5042eb20175be518214591c9d")))
        (sha256
          (base32
            "17c5lppa5axw6wga3k8zqmn5f2syadlqbavrqgsi8k8nlcckxy1x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/alexmurray/flycheck-coverity")
    (synopsis "Integrate Coverity with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-coverity")
    (license #f)))

(define-public emacs-flycheck-credo
  (package
    (name "emacs-flycheck-credo")
    (version "20170526.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/flycheck-credo.git")
               (commit
                 "e88f11ead53805c361ec7706e44c3dfee1daa19f")))
        (sha256
          (base32
            "04i7fbqpkjpsfa8vjpkdhg1sj5isczxwncdp4vr9x3vll3svblm7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/aaronjensen/flycheck-credo")
    (synopsis "flycheck checker for elixir credo")
    (description
      "Documentation at https://melpa.org/#/flycheck-credo")
    (license #f)))

(define-public emacs-flycheck-crystal
  (package
    (name "emacs-flycheck-crystal")
    (version "20200805.2344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/crystal-lang-tools/emacs-crystal-mode.git")
               (commit
                 "3e37f282af06a8b82d266b2d7a7863f3df2ffc3b")))
        (sha256
          (base32
            "1rwm7srb3xlsja4hana83an9a6l9f9rmi299qkjxhjcry8x9p78g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files ("flycheck-crystal.el")))
    (home-page
      "https://github.com/crystal-lang-tools/emacs-crystal-mode")
    (synopsis "Add support for Crystal to Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-crystal")
    (license #f)))

(define-public emacs-flycheck-css-colorguard
  (package
    (name "emacs-flycheck-css-colorguard")
    (version "20161031.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Simplify/flycheck-css-colorguard.git")
               (commit
                 "ae94fa0396acd99f9ec36d9572459df793f37fe8")))
        (sha256
          (base32
            "1vy5yjf98b7dk9lniz3rgk33agg8f1x8488lvm28ljdq3jfdgcfw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/Simplify/flycheck-css-colorguard/")
    (synopsis "Detect similar colors in CSS")
    (description
      "Documentation at https://melpa.org/#/flycheck-css-colorguard")
    (license #f)))

(define-public emacs-flycheck-cstyle
  (package
    (name "emacs-flycheck-cstyle")
    (version "20160905.2341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-cstyle.git")
               (commit
                 "207285140a353d08cf1fc450cacab158bc98ba82")))
        (sha256
          (base32
            "19wwv4r3nh79bdfcqp55qmknl0gwicy7dcaz28hm3sswbjpfv3rw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-cstyle")
    (synopsis "Integrate cstyle with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-cstyle")
    (license #f)))

(define-public emacs-flycheck-cython
  (package
    (name "emacs-flycheck-cython")
    (version "20170724.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-cython.git")
               (commit
                 "ecc4454d35ab5317ab66a04406f36f0c1dbc0b76")))
        (sha256
          (base32
            "1v17skw0wn7a7nkc1vrs0bbzihnjw0dwvyyd0lydsihzxl5z2r5g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support Cython in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-cython")
    (license #f)))

(define-public emacs-flycheck-d-unittest
  (package
    (name "emacs-flycheck-d-unittest")
    (version "20160522.417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-d-unittest.git")
               (commit
                 "3e614f23cb4a5566fd7988dbcaaf254af81c7718")))
        (sha256
          (base32
            "0lrxyrvdkj88qh78jmamrnji770vjsr6h01agl7hvd4n2xvlxcym"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/tom-tan/flycheck-d-unittest/")
    (synopsis "Add D unittest support to flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-d-unittest")
    (license #f)))

(define-public emacs-flycheck-dedukti
  (package
    (name "emacs-flycheck-dedukti")
    (version "20171103.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rafoo/flycheck-dedukti.git")
               (commit
                 "3dbff5646355f39d57a3ec514f560a6b0082a1cd")))
        (sha256
          (base32
            "1ffpxnwl3wx244n44mbw81g00nhnykd0lnid29f4aw1av7w6nw8l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dedukti-mode))
    (home-page
      "https://github.com/rafoo/flycheck-dedukti")
    (synopsis "Flycheck integration of Dedukti")
    (description
      "Documentation at https://melpa.org/#/flycheck-dedukti")
    (license #f)))

(define-public emacs-flycheck-deno
  (package
    (name "emacs-flycheck-deno")
    (version "20230212.1754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/flycheck-deno.git")
               (commit
                 "e7cd15a6a05be73d1f83a16d2efa6b49a105a9cd")))
        (sha256
          (base32
            "12xy90xlzgrcb4kwh9xlnav7c8kdszf9i4qrk0klkj3p0xbpj0qd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/flycheck/flycheck-deno")
    (synopsis "Flycheck for deno-lint")
    (description
      "Documentation at https://melpa.org/#/flycheck-deno")
    (license #f)))

(define-public emacs-flycheck-dialyxir
  (package
    (name "emacs-flycheck-dialyxir")
    (version "20170515.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/flycheck-dialyxir.git")
               (commit
                 "adfb73374cb2bee75724822972f405f2ec371199")))
        (sha256
          (base32
            "1kzvq99f052mdj4ml1m6nvxhv0kqqblmpdgnwcm89krf0qfl4gjg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/aaronjensen/flycheck-dialyxir")
    (synopsis "flycheck checker for elixir dialyxir")
    (description
      "Documentation at https://melpa.org/#/flycheck-dialyxir")
    (license #f)))

(define-public emacs-flycheck-dialyzer
  (package
    (name "emacs-flycheck-dialyzer")
    (version "20160326.1430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-dialyzer.git")
               (commit
                 "a5df0db95ac69f397b5f85d325a6d88cf8974f64")))
        (sha256
          (base32
            "1i5wm2r6rck6864a60mm6kv31vgvqnq49hi9apvhyywfn6sycwkf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support dialyzer in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-dialyzer")
    (license #f)))

(define-public emacs-flycheck-dmd-dub
  (package
    (name "emacs-flycheck-dmd-dub")
    (version "20210412.1608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atilaneves/flycheck-dmd-dub.git")
               (commit
                 "818bfed45ac8597b6ad568c71eb9428138a125c8")))
        (sha256
          (base32
            "19xgj1z1b6m30syq2ps99v1gk76prmvh27nqj83nbqz57nqa0vjb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck emacs-f))
    (home-page
      "http://github.com/atilaneves/flycheck-dmd-dub")
    (synopsis
      "Sets flycheck-dmd-include-paths from dub package information")
    (description
      "Documentation at https://melpa.org/#/flycheck-dmd-dub")
    (license #f)))

(define-public emacs-flycheck-dogma
  (package
    (name "emacs-flycheck-dogma")
    (version "20170125.721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/flycheck-dogma.git")
               (commit
                 "eea1844a81e87e2488b05e703a93272d0fc3bc74")))
        (sha256
          (base32
            "0wmp4q1jzb6giwrv8ajgqriy155mcc7jnj5sycpfk3hw6q74js66"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/aaronjensen/flycheck-dogma")
    (synopsis "flycheck checker for elixir dogma")
    (description
      "Documentation at https://melpa.org/#/flycheck-dogma")
    (license #f)))

(define-public emacs-flycheck-drstring
  (package
    (name "emacs-flycheck-drstring")
    (version "20200210.1903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielmartin/flycheck-drstring.git")
               (commit
                 "d8d5a560e792a6657ef5ac69934c74f1ed51372d")))
        (sha256
          (base32
            "0vcp3zbpi5vb8cs01fzb4268gj9ijq9qndqarwnls8w9wky4548w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-swift-mode))
    (home-page
      "https://github.com/danielmartin/flycheck-drstring")
    (synopsis "Doc linting for Swift using DrString")
    (description
      "Documentation at https://melpa.org/#/flycheck-drstring")
    (license #f)))

(define-public emacs-flycheck-dtrace
  (package
    (name "emacs-flycheck-dtrace")
    (version "20180903.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/flycheck-dtrace.git")
               (commit
                 "951fab3a15c11d92b9fac1ea4791a80dfe034a00")))
        (sha256
          (base32
            "1qkzir3lzz4lc5kn55qb52cm5y7iy8w1ljq6xxzcjxfbk9980y0y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Flycheck: DTrace support")
    (description
      "Documentation at https://melpa.org/#/flycheck-dtrace")
    (license #f)))

(define-public emacs-flycheck-eask
  (package
    (name "emacs-flycheck-eask")
    (version "20230212.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-eask.git")
               (commit
                 "1940bcdcf80d8e7ef45ecea4b4e52688845b8582")))
        (sha256
          (base32
            "0lmfidszbya71s06qwrdml6hnmdn504whh8rn9ni1iiclgi20104"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/flycheck/flycheck-eask")
    (synopsis "Eask support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-eask")
    (license #f)))

(define-public emacs-flycheck-eglot
  (package
    (name "emacs-flycheck-eglot")
    (version "20230630.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/intramurz/flycheck-eglot.git")
               (commit
                 "9ff8d0068be59b1450964b390349d75a68af21ed")))
        (sha256
          (base32
            "1ab4vp8qyhmg0ckr2h0bw1nm3lwh8zwckgjvzmr3lwcv6drcq67h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot emacs-flycheck))
    (home-page
      "https://github.com/intramurz/flycheck-eglot")
    (synopsis "Flycheck support for eglot")
    (description
      "Documentation at https://melpa.org/#/flycheck-eglot")
    (license #f)))

(define-public emacs-flycheck-eldev
  (package
    (name "emacs-flycheck-eldev")
    (version "20230905.1754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-eldev.git")
               (commit
                 "e3d5cdaf8183bd9d1cf66857d21bf86052b1d703")))
        (sha256
          (base32
            "0fikkqgclf86whagjmda86qvanvk631np97fivaj9d8ry6sqrnyy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-eldev")
    (synopsis "Eldev support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-eldev")
    (license #f)))

(define-public emacs-flycheck-elixir
  (package
    (name "emacs-flycheck-elixir")
    (version "20210413.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-elixir.git")
               (commit
                 "b57a77a21d6cf9621b3387831cba34135c4fa35d")))
        (sha256
          (base32
            "10y2z3w2hjycy0hx8zbhma88i2v9fs5xs7pwz3k56jnv95ipjmpy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support Elixir in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-elixir")
    (license #f)))

(define-public emacs-flycheck-elm
  (package
    (name "emacs-flycheck-elm")
    (version "20181107.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bsermons/flycheck-elm.git")
               (commit
                 "1b60050efd4729bfba548f3e5adbcb58436667cb")))
        (sha256
          (base32
            "1kjms9d2c98ffd1qxs879qhg0n4jzic0r5kni9y4gz3v09ww8zms"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/bsermons/flycheck-elm")
    (synopsis
      "Flycheck support for the elm language")
    (description
      "Documentation at https://melpa.org/#/flycheck-elm")
    (license #f)))

(define-public emacs-flycheck-elsa
  (package
    (name "emacs-flycheck-elsa")
    (version "20230217.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-elsa/flycheck-elsa.git")
               (commit
                 "d60db9544d0c4213f2478bcea0fd0e668e31cf34")))
        (sha256
          (base32
            "1ig9dc7ch3cdxp4p24v21h7hrdph9y5jy9421bfww6agymbj8i85"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/emacs-elsa/flycheck-elsa")
    (synopsis "Flycheck for Elsa")
    (description
      "Documentation at https://melpa.org/#/flycheck-elsa")
    (license #f)))

(define-public emacs-flycheck-falco-rules
  (package
    (name "emacs-flycheck-falco-rules")
    (version "20231020.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/falcosecurity/flycheck-falco-rules.git")
               (commit
                 "4bdc576abb13569354281badeaafe4abeee7fb3d")))
        (sha256
          (base32
            "12d5r2f6r5rh1a8aq87bm7hi1dck8pm1f59f8gnsad8dl5fbx00m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/falcosecurity/flycheck-falco-rules")
    (synopsis
      "On-the-fly syntax checking for falco rules files")
    (description
      "Documentation at https://melpa.org/#/flycheck-falco-rules")
    (license #f)))

(define-public emacs-flycheck-flawfinder
  (package
    (name "emacs-flycheck-flawfinder")
    (version "20211214.647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-flawfinder.git")
               (commit
                 "85701b849ea1ed8438ed4b7ae236e99d0f5528c7")))
        (sha256
          (base32
            "1wfba0p54qnr2s6nhzg1vapzppb7m124whasfrl4ki124c4sf6v1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/alexmurray/flycheck-flawfinder")
    (synopsis "Integrate flawfinder with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-flawfinder")
    (license #f)))

(define-public emacs-flycheck-flow
  (package
    (name "emacs-flycheck-flow")
    (version "20190304.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-flow.git")
               (commit
                 "9e8e52cfc98af6a23fd906f9cb5d5d470d8cf82d")))
        (sha256
          (base32
            "14qldlisbmxzammr500gyha2hiv2xgyzfc6mysqii06kbcqn1ik1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support Flow in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-flow")
    (license #f)))

(define-public emacs-flycheck-ghcmod
  (package
    (name "emacs-flycheck-ghcmod")
    (version "20150114.632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/scturtle/flycheck-ghcmod.git")
               (commit
                 "6bb7b7d879f05bbae54e99eb04806c877adf3ccc")))
        (sha256
          (base32
            "0q1m1f3vhw1wy0pa3njy55z28psznbw2xwmwk2v1p5c86n74ns8d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/scturtle/flycheck-ghcmod")
    (synopsis
      "A flycheck checker for Haskell using ghcmod")
    (description
      "Documentation at https://melpa.org/#/flycheck-ghcmod")
    (license #f)))

(define-public emacs-flycheck-golangci-lint
  (package
    (name "emacs-flycheck-golangci-lint")
    (version "20230523.1855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/weijiangan/flycheck-golangci-lint.git")
               (commit
                 "9def093e416e9a6ddd3cae8590dbb7ff6314925a")))
        (sha256
          (base32
            "1j28zwglv0qygzzsd7rp71gswgidcq7mkaph7z915xci92r2r3ap"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/weijiangan/flycheck-golangci-lint")
    (synopsis "Flycheck checker for golangci-lint")
    (description
      "Documentation at https://melpa.org/#/flycheck-golangci-lint")
    (license #f)))

(define-public emacs-flycheck-gometalinter
  (package
    (name "emacs-flycheck-gometalinter")
    (version "20180424.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/favadi/flycheck-gometalinter.git")
               (commit
                 "1e3eede14da405b914a7d8b00300846e4393cb83")))
        (sha256
          (base32
            "10gskp8ch904s3lw7g4sixfhwyx74grdivdl2wnsvd44im9zlw6c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/favadi/flycheck-gometalinter")
    (synopsis "flycheck checker for gometalinter")
    (description
      "Documentation at https://melpa.org/#/flycheck-gometalinter")
    (license #f)))

(define-public emacs-flycheck-google-cpplint
  (package
    (name "emacs-flycheck-google-cpplint")
    (version "20230816.734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-google-cpplint.git")
               (commit
                 "59feb38c47cf95176636afc65325741a2d9ae6f3")))
        (sha256
          (base32
            "0d8ncrklyb6sslp8p64wjc92qfxrb3d1mx7ja2yf3g6jhs5r9p9n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/flycheck/flycheck-google-cpplint/")
    (synopsis
      "Help to comply with the Google C++ Style Guide")
    (description
      "Documentation at https://melpa.org/#/flycheck-google-cpplint")
    (license #f)))

(define-public emacs-flycheck-gradle
  (package
    (name "emacs-flycheck-gradle")
    (version "20190315.234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flycheck-gradle.git")
               (commit
                 "1ca08bbc343362a923cbdc2010f66e41655e92ab")))
        (sha256
          (base32
            "14zvx7f2nszf8p14aibqa4pdg3ly7yw66a58bw2whjw9zfi9rnr0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/jojojames/flycheck-gradle")
    (synopsis "Flycheck extension for Gradle.")
    (description
      "Documentation at https://melpa.org/#/flycheck-gradle")
    (license #f)))

(define-public emacs-flycheck-grammalecte
  (package
    (name "emacs-flycheck-grammalecte")
    (version "20230605.1035")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/flycheck-grammalecte-"
               version
               ".tar"))
        (sha256
          (base32
            "076c045pqvagyq1cas5fn1gb5ysbl9qlii4xnppc6klpra4zjpbz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://git.umaneti.net/flycheck-grammalecte/")
    (synopsis "Integrate Grammalecte with Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-grammalecte")
    (license #f)))

(define-public emacs-flycheck-grammarly
  (package
    (name "emacs-flycheck-grammarly")
    (version "20221231.1654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/flycheck-grammarly.git")
               (commit
                 "d4a788acc3875a1ffdd7460ab3377a887413c582")))
        (sha256
          (base32
            "1mg6x85dmawfjmxc5vcq546ykz3m3qby2l3hnaagh7srwvvz09cy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-grammarly emacs-s))
    (home-page
      "https://github.com/emacs-grammarly/flycheck-grammarly")
    (synopsis "Grammarly support for Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-grammarly")
    (license #f)))

(define-public emacs-flycheck-guile
  (package
    (name "emacs-flycheck-guile")
    (version "20230405.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flatwhatson/flycheck-guile.git")
               (commit
                 "dd7bbdc48fd21cf8d270c913c56cd580f8ec3d03")))
        (sha256
          (base32
            "1klmd62hqfh7ajjm95vnib4hihgc1i79nsqmpwvg3l4i2cnrwx7x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-geiser))
    (home-page
      "https://notabug.org/flatwhatson/flycheck-guile")
    (synopsis "A Flycheck checker for GNU Guile")
    (description
      "Documentation at https://melpa.org/#/flycheck-guile")
    (license #f)))

(define-public emacs-flycheck-haskell
  (package
    (name "emacs-flycheck-haskell")
    (version "20230706.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-haskell.git")
               (commit
                 "b7c4861aa754220b7d0cfc05aa0895bb35665683")))
        (sha256
          (base32
            "0fmmzwnrrki8bw6nsspcsgzkcxmsrgfkm2200nqgk27fqppjgpgw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-haskell-mode
            emacs-dash))
    (arguments '(#:files (:defaults "*.hs")))
    (home-page
      "https://github.com/flycheck/flycheck-haskell")
    (synopsis
      "Flycheck: Automatic Haskell configuration")
    (description
      "Documentation at https://melpa.org/#/flycheck-haskell")
    (license #f)))

(define-public emacs-flycheck-hdevtools
  (package
    (name "emacs-flycheck-hdevtools")
    (version "20160926.702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-hdevtools.git")
               (commit
                 "8248ebaf8376ee5e37ff47c814a291550a7bdcf2")))
        (sha256
          (base32
            "1al9kyj7n0cjc4s1m41389bzvvrckg28598v506zd5hqvaiynsp0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-hdevtools")
    (synopsis
      "A flycheck checker for Haskell using hdevtools")
    (description
      "Documentation at https://melpa.org/#/flycheck-hdevtools")
    (license #f)))

(define-public emacs-flycheck-hl-todo
  (package
    (name "emacs-flycheck-hl-todo")
    (version "20230807.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alvarogonzalezsotillo/flycheck-hl-todo.git")
               (commit
                 "abbef3892f785ef400c6c6929e764efdd9b23c28")))
        (sha256
          (base32
            "060l48vahnijx957pzp0zbjvlpp5f8x8xdm2d6x9qxkq2rninbss"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hl-todo emacs-flycheck))
    (home-page
      "https://github.com/alvarogonzalezsotillo/flycheck-hl-todo")
    (synopsis "Display hl-todo keywords in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-hl-todo")
    (license #f)))

(define-public emacs-flycheck-hledger
  (package
    (name "emacs-flycheck-hledger")
    (version "20230710.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/flycheck-hledger.git")
               (commit
                 "9b7ccd3d49765dd68885d1fa0fb48823ea11fb2e")))
        (sha256
          (base32
            "0clgbliwiwllnsxf5j7p3smlf487lrgy2a1rdgmjij3qa55wbl99"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/DamienCassou/flycheck-hledger/")
    (synopsis
      "Flycheck module to check hledger journals")
    (description
      "Documentation at https://melpa.org/#/flycheck-hledger")
    (license #f)))

(define-public emacs-flycheck-indent
  (package
    (name "emacs-flycheck-indent")
    (version "20200129.2046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/indent-lint.el.git")
               (commit
                 "aee76faf54a55e0bcb5dc07a667d7f5999299c9b")))
        (sha256
          (base32
            "19yixxsrwdm4wqch5011mk4gimsyh9rqzvrxkg7l7baa7am8v902"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-indent-lint emacs-flycheck))
    (arguments '(#:files ("flycheck-indent.el")))
    (home-page
      "https://github.com/conao3/indent-lint.el")
    (synopsis "Indent-lint frontend for flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-indent")
    (license #f)))

(define-public emacs-flycheck-indicator
  (package
    (name "emacs-flycheck-indicator")
    (version "20200331.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gexplorer/flycheck-indicator.git")
               (commit
                 "e00d9a20cbc21d6814c27cc9206296da394478e8")))
        (sha256
          (base32
            "0y3dzamm7xcac9fcgx88z48l6nkgmz5lx0a6lnxxywkh0h1y2kqn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/gexplorer/flycheck-indicator")
    (synopsis
      "A fancy mode line indicator for `flycheck-mode'")
    (description
      "Documentation at https://melpa.org/#/flycheck-indicator")
    (license #f)))

(define-public emacs-flycheck-ini-pyinilint
  (package
    (name "emacs-flycheck-ini-pyinilint")
    (version "20190312.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/danieljrmay/flycheck-ini-pyinilint.git")
               (commit
                 "7febbea9ed407eccc4bfd24ae0d3afd1c19394f7")))
        (sha256
          (base32
            "07cw1j9k662ci19l3xpjxx4hasx5pkvi1q3f68mgkmbprbjvxqml"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://gitlab.com/danieljrmay/flycheck-ini-pyinilint")
    (synopsis "Flycheck integration for PyINILint")
    (description
      "Documentation at https://melpa.org/#/flycheck-ini-pyinilint")
    (license #f)))

(define-public emacs-flycheck-inline
  (package
    (name "emacs-flycheck-inline")
    (version "20200808.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-inline.git")
               (commit
                 "8e00b4c5951a9515a450a14aefe92e9f6ddcfbde")))
        (sha256
          (base32
            "1s505lk5rdc3p40w5g4cpzviaksclvfdisl457gpwjpjv0m7fwd4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/flycheck/flycheck-inline")
    (synopsis "Display Flycheck errors inline")
    (description
      "Documentation at https://melpa.org/#/flycheck-inline")
    (license #f)))

(define-public emacs-flycheck-irony
  (package
    (name "emacs-flycheck-irony")
    (version "20180604.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sarcasm/flycheck-irony.git")
               (commit
                 "42dbecd4a865cabeb301193bb4d660e26ae3befe")))
        (sha256
          (base32
            "00ggn7v1nj2zb7rvwmjrhybd1vcp07n74krdy28z9xwh7w59wyq7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-irony))
    (home-page
      "https://github.com/Sarcasm/flycheck-irony/")
    (synopsis "Flycheck: C/C++ support via Irony")
    (description
      "Documentation at https://melpa.org/#/flycheck-irony")
    (license #f)))

(define-public emacs-flycheck-jest
  (package
    (name "emacs-flycheck-jest")
    (version "20220530.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flycheck-jest.git")
               (commit
                 "8181c5d2e1318c6ddcff21c6f3f6d76413545645")))
        (sha256
          (base32
            "0lhvgffn08ipafyh7icldbkgslcvqr1pja70fas54f3s077sql2k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/jojojames/flycheck-jest")
    (synopsis "Flycheck extension for Jest.")
    (description
      "Documentation at https://melpa.org/#/flycheck-jest")
    (license #f)))

(define-public emacs-flycheck-joker
  (package
    (name "emacs-flycheck-joker")
    (version "20200412.2346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/candid82/flycheck-joker.git")
               (commit
                 "93576295fef7a749bf779eeece5edd85e21868e2")))
        (sha256
          (base32
            "1hz5nlrhbrlwwk8rcjvc3jhj0g9wgm6xw903ap8fxq470mj99gln"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis
      "Add Clojure syntax checker (via Joker) to flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-joker")
    (license #f)))

(define-public emacs-flycheck-julia
  (package
    (name "emacs-flycheck-julia")
    (version "20170729.2141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gdkrmr/flycheck-julia.git")
               (commit
                 "213b60a5a9a1cb7887260e1d159b5bb27167cbb6")))
        (sha256
          (base32
            "0wk8mc8j67dmc3mxzrhypgxmyywwrjh5q5llj4m2mgf0j7yp2576"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/gdkrmr/flycheck-julia")
    (synopsis "Julia support for Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-julia")
    (license #f)))

(define-public emacs-flycheck-keg
  (package
    (name "emacs-flycheck-keg")
    (version "20200726.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/keg.el.git")
               (commit
                 "f0a719892aed5b1b4b644f1339d1ace99c656100")))
        (sha256
          (base32
            "0vk4fdkai0ssq31ycckkz4iwp35ip5d8lnyisv4m3b98jv3pb6k0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-keg emacs-flycheck))
    (arguments '(#:files ("flycheck-keg.el")))
    (home-page "https://github.com/conao3/keg.el")
    (synopsis "Flycheck for Keg projects")
    (description
      "Documentation at https://melpa.org/#/flycheck-keg")
    (license #f)))

(define-public emacs-flycheck-kotlin
  (package
    (name "emacs-flycheck-kotlin")
    (version "20230111.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whirm/flycheck-kotlin.git")
               (commit
                 "a2a6abb9a7f85c6fb15ce327459ec3c8ff780188")))
        (sha256
          (base32
            "1cpcxh40ia52bmz5jv38lk55g9rwb65wqvbr2gc4p8xapvp1g6nw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support kotlin in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-kotlin")
    (license #f)))

(define-public emacs-flycheck-languagetool
  (package
    (name "emacs-flycheck-languagetool")
    (version "20230329.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-languagetool/flycheck-languagetool.git")
               (commit
                 "a6c7328f7c681a9a55b261d14639971c4b2318cb")))
        (sha256
          (base32
            "1qr9qgwhginacd106h21yng4qmvbh99qsajykg2qmywxphnliy2h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/emacs-languagetool/flycheck-languagetool")
    (synopsis "Flycheck support for LanguageTool")
    (description
      "Documentation at https://melpa.org/#/flycheck-languagetool")
    (license #f)))

(define-public emacs-flycheck-ledger
  (package
    (name "emacs-flycheck-ledger")
    (version "20200304.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flycheck-ledger.git")
               (commit
                 "628e25ba66604946085571652a94a54f4d1ad96f")))
        (sha256
          (base32
            "1djrj3is0dzrl2703bw7bclf33dp4xqmy144q7xj5pvpb9v3kf50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/purcell/flycheck-ledger")
    (synopsis
      "Flycheck integration for ledger files")
    (description
      "Documentation at https://melpa.org/#/flycheck-ledger")
    (license #f)))

(define-public emacs-flycheck-lilypond
  (package
    (name "emacs-flycheck-lilypond")
    (version "20211006.2102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hinrik/flycheck-lilypond.git")
               (commit
                 "78f8c16cd67f9f6d3f1806e1fd403222723ba400")))
        (sha256
          (base32
            "1pasdrc17rxgqdldlv979vs5m99l0bkndpljdw6ldlx86hmflmn8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/hinrik/flycheck-lilypond")
    (synopsis "LilyPond support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-lilypond")
    (license #f)))

(define-public emacs-flycheck-liquidhs
  (package
    (name "emacs-flycheck-liquidhs")
    (version "20170412.2326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ucsd-progsys/flycheck-liquidhs.el.git")
               (commit
                 "c27252ac24d77f4b6eec76a4ba9cd61761a3fba9")))
        (sha256
          (base32
            "1v5s252w2ai0rrci0rkq6wsx110pw8hp60n67990jg6l6lpvir2s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/ucsd-progsys/liquidhaskell/flycheck-liquid.el")
    (synopsis
      "A flycheck checker for Haskell using liquid (i.e. liquidhaskell)")
    (description
      "Documentation at https://melpa.org/#/flycheck-liquidhs")
    (license #f)))

(define-public emacs-flycheck-mercury
  (package
    (name "emacs-flycheck-mercury")
    (version "20181118.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-mercury.git")
               (commit
                 "b6807a8db70981e21a91a93324c31e49de85c89f")))
        (sha256
          (base32
            "15pjqglpcwm4wy0cxk1man3ar0n56qi1bjrr1fxfjq2xwsgsfagh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-s emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-mercury")
    (synopsis "Mercury support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-mercury")
    (license #f)))

(define-public emacs-flycheck-mmark
  (package
    (name "emacs-flycheck-mmark")
    (version "20190713.1323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmark-md/flycheck-mmark.git")
               (commit
                 "67d6216229337c9c020a8aecd6ae2417de29b5e8")))
        (sha256
          (base32
            "1hmh7pzv55c53n46ajvqc1r3sfkz60pa1iz7nms3fc97m7rnc1j8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/mmark-md/flycheck-mmark")
    (synopsis
      "Flycheck checker for the MMark markdown processor")
    (description
      "Documentation at https://melpa.org/#/flycheck-mmark")
    (license #f)))

(define-public emacs-flycheck-mypy
  (package
    (name "emacs-flycheck-mypy")
    (version "20200113.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-flycheck-mypy.git")
               (commit
                 "5b4e14ab0cbce2ff35fee7e69b5b95eafd609c80")))
        (sha256
          (base32
            "1cx1rm40ns3y5bdbk8hfycdaq16p4zxkjjss02xs6hl96yvc4kaj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support mypy in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-mypy")
    (license #f)))

(define-public emacs-flycheck-nim
  (package
    (name "emacs-flycheck-nim")
    (version "20190927.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ALSchwalm/flycheck-nim.git")
               (commit
                 "ddfade51001571c2399f78bcc509e0aa8eb752a4")))
        (sha256
          (base32
            "19xxwj66q45499s9jvw6rq8im0g7wxl9m66kq2a9ykds4v7sprlm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-flycheck))
    (home-page
      "https://github.com/ALSchwalm/flycheck-nim")
    (synopsis
      "Defines a flycheck syntax checker for nim")
    (description
      "Documentation at https://melpa.org/#/flycheck-nim")
    (license #f)))

(define-public emacs-flycheck-nimsuggest
  (package
    (name "emacs-flycheck-nimsuggest")
    (version "20171027.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/flycheck-nimsuggest.git")
               (commit
                 "dc9a5de1cb3ee05db5794d824610959a1f603bc9")))
        (sha256
          (base32
            "1bf65hrz0s6f180kn2ir8l5qn7in789w8pyy96b9gqn21z50vb9d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/yuutayamada/flycheck-nimsuggest")
    (synopsis
      "flycheck backend for Nim using nimsuggest")
    (description
      "Documentation at https://melpa.org/#/flycheck-nimsuggest")
    (license #f)))

(define-public emacs-flycheck-objc-clang
  (package
    (name "emacs-flycheck-objc-clang")
    (version "20210911.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GyazSquare/flycheck-objc-clang.git")
               (commit
                 "0a86156fad0d6f02e8e6b4c5594f7173c96d6481")))
        (sha256
          (base32
            "122j1imz755lhfhlnzl4gggghbvpqyq6r6iix3qq60kzb3hpq1b2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/GyazSquare/flycheck-objc-clang")
    (synopsis
      "Flycheck: Objective-C support using Clang")
    (description
      "Documentation at https://melpa.org/#/flycheck-objc-clang")
    (license #f)))

(define-public emacs-flycheck-ocaml
  (package
    (name "emacs-flycheck-ocaml")
    (version "20220730.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-ocaml.git")
               (commit
                 "77f8ddbd9bfc3a11957ac7ec7e45d5fa9179b192")))
        (sha256
          (base32
            "0ndqd5s43la6nyrzff7w4d7kb7ya77i0givi8p8cik4r8nfxwjnd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-merlin))
    (home-page
      "https://github.com/flycheck/flycheck-ocaml")
    (synopsis "Flycheck: OCaml support")
    (description
      "Documentation at https://melpa.org/#/flycheck-ocaml")
    (license #f)))

(define-public emacs-flycheck-package
  (package
    (name "emacs-flycheck-package")
    (version "20210509.2325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flycheck-package.git")
               (commit
                 "3a6aaed29ff61418c48c0251e1432c30748ae739")))
        (sha256
          (base32
            "1q94pab1sgc9jvfmyci6zafcr6kr5sg2928sma33hlmahsyq18hr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-package-lint))
    (home-page
      "https://github.com/purcell/flycheck-package")
    (synopsis
      "A Flycheck checker for elisp package authors")
    (description
      "Documentation at https://melpa.org/#/flycheck-package")
    (license #f)))

(define-public emacs-flycheck-pact
  (package
    (name "emacs-flycheck-pact")
    (version "20180920.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kadena-io/flycheck-pact.git")
               (commit
                 "0e10045064ef89ec8b6f5a473073d47b976a2ca3")))
        (sha256
          (base32
            "072jc0vrjg531ydk5bjrjpmbvdk81yw75jqjnvb7alkib6jn5f9r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-pact-mode))
    (home-page
      "http://github.com/kadena-io/flycheck-pact")
    (synopsis "Flycheck support for pact-mode")
    (description
      "Documentation at https://melpa.org/#/flycheck-pact")
    (license #f)))

(define-public emacs-flycheck-pest
  (package
    (name "emacs-flycheck-pest")
    (version "20200710.2327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksqsf/pest-mode.git")
               (commit
                 "af677327f185113442e95b00986097b30cab650c")))
        (sha256
          (base32
            "01wy3v1aj2891wgbr7rwpaw9xavfrqbyiqiv01q6jjdvc5vl0rwi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-pest-mode))
    (arguments '(#:files ("flycheck-pest.el")))
    (home-page "https://github.com/ksqsf/pest-mode")
    (synopsis "Flycheck integration for Pest -")
    (description
      "Documentation at https://melpa.org/#/flycheck-pest")
    (license #f)))

(define-public emacs-flycheck-php-noverify
  (package
    (name "emacs-flycheck-php-noverify")
    (version "20211005.401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Junker/flycheck-php-noverify.git")
               (commit
                 "3c5cfa5b790bb7f0a8da7f3caee8e4782b67f8ac")))
        (sha256
          (base32
            "0p95h0j9v3qq4yihynp9g62rcx77p54v0q1ddwhafzzkshqqcs7f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/Junker/flycheck-php-noverify")
    (synopsis
      "Flycheck checker for PHP Noverify linter")
    (description
      "Documentation at https://melpa.org/#/flycheck-php-noverify")
    (license #f)))

(define-public emacs-flycheck-phpstan
  (package
    (name "emacs-flycheck-phpstan")
    (version "20230417.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpstan.el.git")
               (commit
                 "2dc25cb2f3d83484ea0eb063c9ffca8148828a2b")))
        (sha256
          (base32
            "0drsp230nxs336zzfy8gjr7r3p7m8w9rp4ih1zjwarzl1svpp7yp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-phpstan))
    (arguments '(#:files ("flycheck-phpstan.el")))
    (home-page
      "https://github.com/emacs-php/phpstan.el")
    (synopsis "Flycheck integration for PHPStan")
    (description
      "Documentation at https://melpa.org/#/flycheck-phpstan")
    (license #f)))

(define-public emacs-flycheck-pkg-config
  (package
    (name "emacs-flycheck-pkg-config")
    (version "20230119.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/flycheck-pkg-config.git")
               (commit
                 "c4e4028f6621187365b7362566ac2786206765a1")))
        (sha256
          (base32
            "1i0pk4nzw5jl3d67k71h6iwiw5xmqa6qns3q2x0mwdk5kylb91n9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-flycheck))
    (home-page "unspecified")
    (synopsis "configure flycheck using pkg-config")
    (description
      "Documentation at https://melpa.org/#/flycheck-pkg-config")
    (license #f)))

(define-public emacs-flycheck-plantuml
  (package
    (name "emacs-flycheck-plantuml")
    (version "20171018.111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-plantuml.git")
               (commit
                 "183be89e1dbba0b38237dd198dff600e0790309d")))
        (sha256
          (base32
            "1fbdbpwrlkvbgv693ndr3zamkf3gp28v94jg911fsav8bk08f6pq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-plantuml-mode))
    (home-page
      "https://github.com/alexmurray/flycheck-plantuml")
    (synopsis "Integrate plantuml with flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-plantuml")
    (license #f)))

(define-public emacs-flycheck-pony
  (package
    (name "emacs-flycheck-pony")
    (version "20210118.1327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ponylang/flycheck-pony.git")
               (commit
                 "205143d22902521b4f1f03e7d49d17c62338dea6")))
        (sha256
          (base32
            "1cgdqbkfcq3nd8jybhbjfna75wmqfy5zpb9ip1gdli0r700idsm2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/seantallen/flycheck-pony")
    (synopsis "Pony support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-pony")
    (license #f)))

(define-public emacs-flycheck-popup-tip
  (package
    (name "emacs-flycheck-popup-tip")
    (version "20170812.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-popup-tip.git")
               (commit
                 "ef86aad907f27ca076859d8d9416f4f7727619c6")))
        (sha256
          (base32
            "1bi6f9nm4bylsbjv4qnkar35s6xzdf2cc2cxi3g691p9527apdz6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-popup))
    (home-page
      "https://github.com/flycheck/flycheck-popup-tip/")
    (synopsis
      "Display Flycheck error messages using popup.el")
    (description
      "Documentation at https://melpa.org/#/flycheck-popup-tip")
    (license #f)))

(define-public emacs-flycheck-pos-tip
  (package
    (name "emacs-flycheck-pos-tip")
    (version "20200516.1600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-pos-tip.git")
               (commit
                 "dc57beac0e59669926ad720c7af38b27c3a30467")))
        (sha256
          (base32
            "15h4m5cfk0vh1g630vlwfxmcpa1jdalrrldnvijsqla99mb2jm1w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-pos-tip))
    (home-page
      "https://github.com/flycheck/flycheck-pos-tip")
    (synopsis
      "Display Flycheck errors in GUI tooltips")
    (description
      "Documentation at https://melpa.org/#/flycheck-pos-tip")
    (license #f)))

(define-public emacs-flycheck-posframe
  (package
    (name "emacs-flycheck-posframe")
    (version "20220715.133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/flycheck-posframe.git")
               (commit
                 "19896b922c76a0f460bf3fe8d8ebc2f9ac9028d8")))
        (sha256
          (base32
            "1cdxabqmp8cijzsc3a7qbacqj11cxpimsphrpqnwk3x5y0y83nlj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-posframe))
    (home-page
      "https://github.com/alexmurray/flycheck-posframe")
    (synopsis
      "Show flycheck error messages using posframe.el")
    (description
      "Documentation at https://melpa.org/#/flycheck-posframe")
    (license #f)))

(define-public emacs-flycheck-projectile
  (package
    (name "emacs-flycheck-projectile")
    (version "20201031.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbfalcon/flycheck-projectile.git")
               (commit
                 "ce6e9e8793a55dace13d5fa13badab2dca3b5ddb")))
        (sha256
          (base32
            "0d0y27k1nzj0clzsw8hnlkgsd5pc05kifmqkr64q50fz4kvg4zx7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-projectile))
    (arguments '(#:files ("flycheck-projectile.el")))
    (home-page
      "https://github.com/nbfalcon/flycheck-projectile")
    (synopsis "Project-wide errors")
    (description
      "Documentation at https://melpa.org/#/flycheck-projectile")
    (license #f)))

(define-public emacs-flycheck-prospector
  (package
    (name "emacs-flycheck-prospector")
    (version "20180524.450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chocoelho/flycheck-prospector.git")
               (commit
                 "92f2680573290ba4a69a2d6e140f44680efce6a8")))
        (sha256
          (base32
            "00jlw18y68yq0fyvfzhvw89a4nmv1ah4c8h4d6g79rl5djnb48hk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/chocoelho/flycheck-prospector")
    (synopsis "Support prospector in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-prospector")
    (license #f)))

(define-public emacs-flycheck-psalm
  (package
    (name "emacs-flycheck-psalm")
    (version "20211002.1555")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/psalm.el.git")
               (commit
                 "28d546a79cb865a78b94cd7e929d66d720505faa")))
        (sha256
          (base32
            "0r5qa0i42dkv0qrs2mksjx7w0yl98mdkg18blckk49w2gd8srdjr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-psalm))
    (arguments '(#:files ("flycheck-psalm.el")))
    (home-page
      "https://github.com/emacs-php/psalm.el")
    (synopsis "Flycheck integration for Psalm")
    (description
      "Documentation at https://melpa.org/#/flycheck-psalm")
    (license #f)))

(define-public emacs-flycheck-pycheckers
  (package
    (name "emacs-flycheck-pycheckers")
    (version "20220923.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/msherry/flycheck-pycheckers.git")
               (commit
                 "897fba15787df94c1ce6a48551f1b149940ffc25")))
        (sha256
          (base32
            "1sdiixvc3rx4ig7p0gag58imc6gjsqr75zvkygnag2y0mfl3vzic"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments
      '(#:files (:defaults ("bin" "bin/pycheckers.py"))))
    (home-page
      "https://github.com/msherry/flycheck-pycheckers")
    (synopsis
      "multiple syntax checker for Python, using Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-pycheckers")
    (license #f)))

(define-public emacs-flycheck-pyflakes
  (package
    (name "emacs-flycheck-pyflakes")
    (version "20170330.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/flycheck-pyflakes.git")
               (commit
                 "61b045939e3743b2162b7e4e73249c66fc2b8f65")))
        (sha256
          (base32
            "03p0666vpprp6ijkvx9ypaw58bdq42gh533270plv2k5l8r22cl1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis "Support pyflakes in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-pyflakes")
    (license #f)))

(define-public emacs-flycheck-pyre
  (package
    (name "emacs-flycheck-pyre")
    (version "20190215.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/linnik/flycheck-pyre.git")
               (commit
                 "0560122caae207d99d8af1ac2b4e5d6f6a1ce444")))
        (sha256
          (base32
            "0f58127197q6yfylz53nigyn7v91pcsdd91ywfgq5lrl0f5fvmdy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/linnik/flycheck-pyre")
    (synopsis "Support Pyre in flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-pyre")
    (license #f)))

(define-public emacs-flycheck-raku
  (package
    (name "emacs-flycheck-raku")
    (version "20220420.732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Raku/flycheck-raku.git")
               (commit
                 "4da1970a75396aff1957b07f7579c1de6b817e6b")))
        (sha256
          (base32
            "1dwi6zz4jk807r4vx26bldzh7zhk5gb2p6045ss5sgjcirsllvn2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/Raku/flycheck-raku")
    (synopsis "Raku support in Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-raku")
    (license #f)))

(define-public emacs-flycheck-relint
  (package
    (name "emacs-flycheck-relint")
    (version "20200721.2217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flycheck-relint.git")
               (commit
                 "4d112871b82d5ea6d0d3e4aaacc55a45536707b7")))
        (sha256
          (base32
            "1plqica209q1x8kzyy4iz97bvd8vqxgv1l00mlf946q201ps7yb1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-relint))
    (home-page
      "https://github.com/purcell/flycheck-relint")
    (synopsis
      "A Flycheck checker for elisp regular expressions")
    (description
      "Documentation at https://melpa.org/#/flycheck-relint")
    (license #f)))

(define-public emacs-flycheck-rtags
  (package
    (name "emacs-flycheck-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-rtags))
    (arguments '(#:files ("src/flycheck-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags Flycheck integration")
    (description
      "Documentation at https://melpa.org/#/flycheck-rtags")
    (license #f)))

(define-public emacs-flycheck-rust
  (package
    (name "emacs-flycheck-rust")
    (version "20190319.1546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flycheck/flycheck-rust.git")
               (commit
                 "a139cd53c5062697e9ed94ad80b803c37d999600")))
        (sha256
          (base32
            "1fh6j5w2387nh2fwwjphkhq17cgj5m2q5k0fhidvgc2w65lzbr1r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-dash))
    (home-page
      "https://github.com/flycheck/flycheck-rust")
    (synopsis
      "Flycheck: Rust additions and Cargo support")
    (description
      "Documentation at https://melpa.org/#/flycheck-rust")
    (license #f)))

(define-public emacs-flycheck-stan
  (package
    (name "emacs-flycheck-stan")
    (version "20211129.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stan-dev/stan-mode.git")
               (commit
                 "150bbbe5fd3ad2b5a3dbfba9d291e66eeea1a581")))
        (sha256
          (base32
            "06y4gvw8g4mjyiv77rznivqphh9sayjmi9aqr9nhxlf6i19a6hqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-stan-mode))
    (arguments
      '(#:files
        ("flycheck-stan/*.el"
         "flycheck-stan/error_msgs.txt"
         (:exclude
           "flycheck-stan/test-*.el"
           "flycheck-stan/flycheck-stan-error-msgs.el"))))
    (home-page
      "https://github.com/stan-dev/stan-mode/tree/master/flycheck-stan")
    (synopsis "Add Stan support for Flycheck")
    (description
      "Documentation at https://melpa.org/#/flycheck-stan")
    (license #f)))

(define-public emacs-flycheck-status-emoji
  (package
    (name "emacs-flycheck-status-emoji")
    (version "20180516.229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liblit/flycheck-status-emoji.git")
               (commit
                 "4bd113ab42dec9544b66e0a27ed9008ce8148433")))
        (sha256
          (base32
            "0ldy9lhh6mirjz02pnrf7z235jz55k4sdysbqxjhfidsszvp9v6w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/liblit/flycheck-status-emoji")
    (synopsis
      "Show flycheck status using cute, compact emoji")
    (description
      "Documentation at https://melpa.org/#/flycheck-status-emoji")
    (license #f)))

(define-public emacs-flycheck-swift
  (package
    (name "emacs-flycheck-swift")
    (version "20170129.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/swift-emacs/flycheck-swift.git")
               (commit
                 "4c5ad401252400a78da395fd56a71e67ff8c2761")))
        (sha256
          (base32
            "094vpmpjq0skhkq634p3zgj3nmsiq1dl8k0z7hzafnaw2y157z1s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis
      "Flycheck extension for Apple's Swift.")
    (description
      "Documentation at https://melpa.org/#/flycheck-swift")
    (license #f)))

(define-public emacs-flycheck-swift3
  (package
    (name "emacs-flycheck-swift3")
    (version "20221227.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GyazSquare/flycheck-swift3.git")
               (commit
                 "14cb83c71a03bb7ae0952ee1707783219fda980e")))
        (sha256
          (base32
            "1yg1sfzp4w164rfkqvdw7qfkixmb5bdq0pidncznfa9rdxz0i9j3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/GyazSquare/flycheck-swift3")
    (synopsis
      "Flycheck: Swift support for Apple swift-mode")
    (description
      "Documentation at https://melpa.org/#/flycheck-swift3")
    (license #f)))

(define-public emacs-flycheck-swiftlint
  (package
    (name "emacs-flycheck-swiftlint")
    (version "20180830.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flycheck-swiftlint.git")
               (commit
                 "8861ddbd9c1c2a951630d9ea29162ad0916580cb")))
        (sha256
          (base32
            "0v1n9q5kcncd9dyfl0xwr378in8law41ciazdfd38ks0xjjppqvh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/jojojames/flycheck-swiftlint")
    (synopsis "Flycheck extension for Swiftlint.")
    (description
      "Documentation at https://melpa.org/#/flycheck-swiftlint")
    (license #f)))

(define-public emacs-flycheck-swiftx
  (package
    (name "emacs-flycheck-swiftx")
    (version "20200814.845")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nhojb/flycheck-swiftx.git")
               (commit
                 "84f42393dea362d3bdfc9253a205a17ec7a12a76")))
        (sha256
          (base32
            "0v5km3hf58xysal526l4l2jpyibh0l6f367vwmn4zi64cl5hvf3p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-xcode-project))
    (home-page
      "https://github.com/nhojb/flycheck-swiftx")
    (synopsis "Flycheck: Swift backend")
    (description
      "Documentation at https://melpa.org/#/flycheck-swiftx")
    (license #f)))

(define-public emacs-flycheck-tcl
  (package
    (name "emacs-flycheck-tcl")
    (version "20180327.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nwidger/flycheck-tcl.git")
               (commit
                 "7ca23f4673e178b9f5dcc8a82b86cf05b15d7236")))
        (sha256
          (base32
            "17mmj0yx7d7cwyq35ll1lw4j0yyha172375apvanrkpgpzjpnvrq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/nwidger/flycheck-tcl")
    (synopsis
      "A flycheck checker for Tcl using tclchecker")
    (description
      "Documentation at https://melpa.org/#/flycheck-tcl")
    (license #f)))

(define-public emacs-flycheck-tip
  (package
    (name "emacs-flycheck-tip")
    (version "20171020.1048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/flycheck-tip.git")
               (commit
                 "9b0072d92e6b4a52834bf5a34120a0f5e1c8c2fd")))
        (sha256
          (base32
            "1adcxz2chy0qcv5z79hhj05gdzk4l0jijy5iy9nd3sg8sclxf6nq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-popup))
    (home-page
      "https://github.com/yuutayamada/flycheck-tip")
    (synopsis
      "Show flycheck/flymake errors by tooltip")
    (description
      "Documentation at https://melpa.org/#/flycheck-tip")
    (license #f)))

(define-public emacs-flycheck-title
  (package
    (name "emacs-flycheck-title")
    (version "20210321.558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/flycheck-title.git")
               (commit
                 "74e4375f372f7b9ce0fdfa34dc74a048376679ae")))
        (sha256
          (base32
            "0ivdv7gsbi3p6nzkyr0dl4iw3846dwys9mrx3pbnf9awzrcihnid"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "unspecified")
    (synopsis
      "show flycheck errors in the frame title")
    (description
      "Documentation at https://melpa.org/#/flycheck-title")
    (license #f)))

(define-public emacs-flycheck-vale
  (package
    (name "emacs-flycheck-vale")
    (version "20220929.608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/flycheck-vale.git")
               (commit
                 "7c7ebc3de058a321cb76348a01f45f02dc55d2f0")))
        (sha256
          (base32
            "086b2ljx3n2jpjm2vl7p0mnjbhx3v45kjrxd5y7q4ilhi29g5cpf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/abingham/flycheck-vale")
    (synopsis "flycheck integration for vale")
    (description
      "Documentation at https://melpa.org/#/flycheck-vale")
    (license #f)))

(define-public emacs-flycheck-vdm
  (package
    (name "emacs-flycheck-vdm")
    (version "20190304.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-vdm-mode))
    (arguments '(#:files ("flycheck-vdm.el")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis "Syntax checking for vdm-mode")
    (description
      "Documentation at https://melpa.org/#/flycheck-vdm")
    (license #f)))

(define-public emacs-flycheck-xcode
  (package
    (name "emacs-flycheck-xcode")
    (version "20180122.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flycheck-xcode.git")
               (commit
                 "b76f872c8985801951a095b8b3c1572b94189f9e")))
        (sha256
          (base32
            "1mihq4w8vbcrazx81svx81dnb84ba5h93jxyvaxly5nxxjw1i5bj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/jojojames/flycheck-xcode")
    (synopsis
      "Flycheck extension for Apple's Xcode.")
    (description
      "Documentation at https://melpa.org/#/flycheck-xcode")
    (license #f)))

(define-public emacs-flycheck-yamllint
  (package
    (name "emacs-flycheck-yamllint")
    (version "20170326.1309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krzysztof-magosa/flycheck-yamllint.git")
               (commit
                 "1e9fe3b2d3e42d551b94473816a8eeee637b446c")))
        (sha256
          (base32
            "1w7b6v1zlq8c95pddx6a2rffmgghv90dpnzz6vczg37hyad3a2np"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/krzysztof-magosa/flycheck-yamllint")
    (synopsis "Flycheck integration for YAMLLint")
    (description
      "Documentation at https://melpa.org/#/flycheck-yamllint")
    (license #f)))

(define-public emacs-flycheck-yang
  (package
    (name "emacs-flycheck-yang")
    (version "20180312.1831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andaru/flycheck-yang.git")
               (commit
                 "47881fc42ef0163c47064b72b5d6dbef4f83d778")))
        (sha256
          (base32
            "0bkbl1pas44bl6s3xjdb5zjbd6bmfjk39md5ds1ix4wchnkjm3iy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yang-mode emacs-flycheck))
    (home-page "unspecified")
    (synopsis "YANG flycheck checker")
    (description
      "Documentation at https://melpa.org/#/flycheck-yang")
    (license #f)))

(define-public emacs-flycheck-ycmd
  (package
    (name "emacs-flycheck-ycmd")
    (version "20181016.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-ycmd.git")
               (commit
                 "c17ff9e0250a9b39d23af37015a2b300e2f36fed")))
        (sha256
          (base32
            "0amdz2ss953lm39yky1dv3zp20ig97mxsk7z81694bpxnhn4kxad"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-flycheck emacs-ycmd))
    (arguments '(#:files ("flycheck-ycmd.el")))
    (home-page
      "https://github.com/abingham/emacs-ycmd")
    (synopsis "flycheck integration for ycmd")
    (description
      "Documentation at https://melpa.org/#/flycheck-ycmd")
    (license #f)))

(define-public emacs-flymake-actionlint
  (package
    (name "emacs-flymake-actionlint")
    (version "20231104.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/flymake-actionlint.git")
               (commit
                 "17ee78db1e1639ac8272d5c0919b82865b638aaf")))
        (sha256
          (base32
            "1ln8ajn6vscnq4wkyqcqd8lw5bx2ypzi9qr9piv895g73667bd4h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/ROCKTAKEY/flymake-actionlint")
    (synopsis "A Flymake handler for actionlint")
    (description
      "Documentation at https://melpa.org/#/flymake-actionlint")
    (license #f)))

(define-public emacs-flymake-aspell
  (package
    (name "emacs-flymake-aspell")
    (version "20230408.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leotaku/flycheck-aspell.git")
               (commit
                 "14784edce6b61d198c11cb2a8d42bb4502033bf4")))
        (sha256
          (base32
            "1s6danwqgkzrq9n408z5wfjfdnmcjd1bi4372xz9vfwbi4yd2nir"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("flymake-aspell.el")))
    (home-page
      "https://github.com/leotaku/flycheck-aspell")
    (synopsis "Aspell checker for flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-aspell")
    (license #f)))

(define-public emacs-flymake-clippy
  (package
    (name "emacs-flymake-clippy")
    (version "20231102.1616")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/flymake-clippy-"
               version
               ".tar"))
        (sha256
          (base32
            "0ffn544ri00iai5zzwyigdjp35ba6q6i4qvcm3hqcn7l6zm2m83g"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~mgmarlow/flymake-clippy/")
    (synopsis "Flymake backend for Clippy")
    (description
      "Documentation at https://melpa.org/#/flymake-clippy")
    (license #f)))

(define-public emacs-flymake-coffee
  (package
    (name "emacs-flymake-coffee")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-coffee.git")
               (commit
                 "dee295acf30820ed15fe0de17137d50bc27fc80c")))
        (sha256
          (base32
            "0706jbi3jcmffxmcpvh8w3007q8sh48kgrcjip5c9hhfqpagayld"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-coffee")
    (synopsis "A flymake handler for coffee script")
    (description
      "Documentation at https://melpa.org/#/flymake-coffee")
    (license #f)))

(define-public emacs-flymake-collection
  (package
    (name "emacs-flymake-collection")
    (version "20230606.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/flymake-collection.git")
               (commit
                 "845c52a1aead7485450c62b48a92096160d99a25")))
        (sha256
          (base32
            "1dpqlcxnrbba10zqx3nwv3pf0qxkdgksk0lavcyhj238fzc9yvrd"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults "src/*.el" "src/checkers/*.el")))
    (home-page
      "https://github.com/mohkale/flymake-collection")
    (synopsis
      "Collection of checkers for flymake, bringing flymake to the level of flycheck")
    (description
      "Documentation at https://melpa.org/#/flymake-collection")
    (license #f)))

(define-public emacs-flymake-cspell
  (package
    (name "emacs-flymake-cspell")
    (version "20230208.2155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/flymake-cspell.git")
               (commit
                 "c68bf7eef99ddb2fbd780f175e869df2db5d768f")))
        (sha256
          (base32
            "05k8aiiik2ws3hdppg6kv8avq2dc7mvn08hs28brrzm3d8h6ma65"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/flymake-cspell")
    (synopsis "A Flymake backend for CSpell")
    (description
      "Documentation at https://melpa.org/#/flymake-cspell")
    (license #f)))

(define-public emacs-flymake-css
  (package
    (name "emacs-flymake-css")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-css.git")
               (commit
                 "de090163ba289910ceeb61b13368ce42d0f2dfd8")))
        (sha256
          (base32
            "18rqzah8p7mqwkddaav1d4r146amvn8jppazvsvc5vs01syj83m9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-css")
    (synopsis
      "Flymake support for css using csslint")
    (description
      "Documentation at https://melpa.org/#/flymake-css")
    (license #f)))

(define-public emacs-flymake-cursor
  (package
    (name "emacs-flymake-cursor")
    (version "20220506.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flymake/emacs-flymake-cursor.git")
               (commit
                 "95806594cacddbbc0c3aa2351a6a7cf28e73a8bf")))
        (sha256
          (base32
            "19h47khw9p68yk9z4z7jrakniiwc1b3ca1r2017h3ldzmpacwa6y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/flymake/emacs-flymake-cursor")
    (synopsis
      "Show flymake messages in the minibuffer after delay")
    (description
      "Documentation at https://melpa.org/#/flymake-cursor")
    (license #f)))

(define-public emacs-flymake-diagnostic-at-point
  (package
    (name "emacs-flymake-diagnostic-at-point")
    (version "20180815.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meqif/flymake-diagnostic-at-point.git")
               (commit
                 "379616b1c6f5ebeaf08fbe54ae765008a78b3be7")))
        (sha256
          (base32
            "1wbzrxxz5z1xg2lwmqgglvixxf1xm3gl6mdyj9idsbym05azm3hg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/meqif/flymake-diagnostic-at-point")
    (synopsis "Display flymake diagnostics at point")
    (description
      "Documentation at https://melpa.org/#/flymake-diagnostic-at-point")
    (license #f)))

(define-public emacs-flymake-eask
  (package
    (name "emacs-flymake-eask")
    (version "20231022.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flymake/flymake-eask.git")
               (commit
                 "c9d67d061f6c317dc68b174106aab722203a5d06")))
        (sha256
          (base32
            "1n17pp0461pqsbm6ifk5j2b805h9zw7y5sfl0f3qhbl7x1sc3gxw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/flymake/flymake-eask")
    (synopsis "Eask support in Flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-eask")
    (license #f)))

(define-public emacs-flymake-easy
  (package
    (name "emacs-flymake-easy")
    (version "20141022.1828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-easy.git")
               (commit
                 "de41ea49503f71f997e5c359a2ad08df696c0147")))
        (sha256
          (base32
            "1mylcsklnv3q27q1gvf7wrila39rmxab1ypmvjh5p56d91y6pszc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/flymake-easy")
    (synopsis
      "Helpers for easily building flymake checkers")
    (description
      "Documentation at https://melpa.org/#/flymake-easy")
    (license #f)))

(define-public emacs-flymake-elisp-config
  (package
    (name "emacs-flymake-elisp-config")
    (version "20230711.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/flymake-elisp-config.git")
               (commit
                 "3607b1ee738141f67ae803b4daadd4e2906ff324")))
        (sha256
          (base32
            "1lzpl2x9rlvz1ribdk4178v0s7mjzfb9zlla7xgsy0w3d9l59gdl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ROCKTAKEY/flymake-elisp-config")
    (synopsis
      "Setup load-path for flymake on Emacs Lisp mode")
    (description
      "Documentation at https://melpa.org/#/flymake-elisp-config")
    (license #f)))

(define-public emacs-flymake-elixir
  (package
    (name "emacs-flymake-elixir")
    (version "20130810.1417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/flymake-elixir.git")
               (commit
                 "3810566cffe35d04cc3f01e27fe397d68d52f802")))
        (sha256
          (base32
            "04w6g4wixrpfidxbk2bwazhvf0cx3c2v2mxnycqqlqkg0m0sb0fn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A flymake handler for elixir-mode .ex files.")
    (description
      "Documentation at https://melpa.org/#/flymake-elixir")
    (license #f)))

(define-public emacs-flymake-eslint
  (package
    (name "emacs-flymake-eslint")
    (version "20231018.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/orzechowskid/flymake-eslint.git")
               (commit
                 "e30c9a14e79c7151d92773fcc8c5bf3bcf4a3a6a")))
        (sha256
          (base32
            "0xr455qcnzjbgbnxzy0pk56nwgv48i552ygj00b2i0maifny70ya"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/orzechowskid/flymake-eslint")
    (synopsis
      "A Flymake backend for Javascript using eslint")
    (description
      "Documentation at https://melpa.org/#/flymake-eslint")
    (license #f)))

(define-public emacs-flymake-flycheck
  (package
    (name "emacs-flymake-flycheck")
    (version "20230826.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-flycheck.git")
               (commit
                 "cc50a97ee1384d260c56aca257a1dbf770084330")))
        (sha256
          (base32
            "05and3jmmfsdi1lhqg7lpsph5rn2p1jj036blrd762ipqb4s90v4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/purcell/flymake-flycheck")
    (synopsis
      "Use flycheck checkers as flymake backends")
    (description
      "Documentation at https://melpa.org/#/flymake-flycheck")
    (license #f)))

(define-public emacs-flymake-gjshint
  (package
    (name "emacs-flymake-gjshint")
    (version "20130327.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/flymake-gjshint-el.git")
               (commit
                 "dc957c14cb060819585de8aedb330e24efa4b784")))
        (sha256
          (base32
            "14kbqyw4v1c51dx7pfgqbn8x4j8j3rgyyq2fa9klqzxpldcskl24"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A flymake handler for javascript using both jshint and gjslint")
    (description
      "Documentation at https://melpa.org/#/flymake-gjshint")
    (license #f)))

(define-public emacs-flymake-go
  (package
    (name "emacs-flymake-go")
    (version "20150714.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/robert-zaremba/flymake-go.git")
               (commit
                 "ae83761aa908c1a50ff34af04f00dcc46bca2ce9")))
        (sha256
          (base32
            "03gh0y988pksghmmvb5av2vnlbcsncafvn4nwihsis0bhys8k28q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/robert-zaremba/flymake-go")
    (synopsis "A flymake handler for go-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-go")
    (license #f)))

(define-public emacs-flymake-go-staticcheck
  (package
    (name "emacs-flymake-go-staticcheck")
    (version "20220804.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/flymake-go-staticcheck.git")
               (commit
                 "9098f7e07ea6513667dc6af6d9ad2fa854464d20")))
        (sha256
          (base32
            "15gwg431lk7n8n21dsaic3k0rjw6lbsc2g394hr3xzirywk3g40i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/s-kostyaev/flymake-go-staticcheck")
    (synopsis "Go staticcheck linter for flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-go-staticcheck")
    (license #f)))

(define-public emacs-flymake-golangci
  (package
    (name "emacs-flymake-golangci")
    (version "20191028.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/shackra/flymake-golangci.git")
               (commit
                 "dfc31a1a6ae3f087b49fe6f5f21b3866780aa91c")))
        (sha256
          (base32
            "1py7ssjz4q5r28c8lzga5qi8x4gmdg3z0ga0cyskiba6krvv45ry"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://gitlab.com/shackra/flymake-golangci")
    (synopsis
      "A flymake handler for go-mode files using Golang CI lint")
    (description
      "Documentation at https://melpa.org/#/flymake-golangci")
    (license #f)))

(define-public emacs-flymake-gradle
  (package
    (name "emacs-flymake-gradle")
    (version "20190315.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flymake-gradle.git")
               (commit
                 "dbedd29b78d4828ef57d4de20867be5df3eaab99")))
        (sha256
          (base32
            "0g6h09lz68b4dvqv5sksr7gkab0599fbm07xnc2mk01lzbas43b0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/flymake-gradle")
    (synopsis "Flymake extension for Gradle.")
    (description
      "Documentation at https://melpa.org/#/flymake-gradle")
    (license #f)))

(define-public emacs-flymake-grammarly
  (package
    (name "emacs-flymake-grammarly")
    (version "20221231.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/flymake-grammarly.git")
               (commit
                 "078edd6e083067f2ad3b3beaa0098c16cebe3994")))
        (sha256
          (base32
            "1496hmwbp2jyy7mn4yrjrxsr3r662s8815vh6w6dj730d9kqr2mq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-grammarly emacs-s))
    (home-page
      "https://github.com/emacs-grammarly/flymake-grammarly")
    (synopsis "Flymake support for Grammarly")
    (description
      "Documentation at https://melpa.org/#/flymake-grammarly")
    (license #f)))

(define-public emacs-flymake-hadolint
  (package
    (name "emacs-flymake-hadolint")
    (version "20220328.823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/flymake-hadolint.git")
               (commit
                 "82a6df7f6cc95e1ab95c5d28f2edcd8c1d4c7382")))
        (sha256
          (base32
            "07fanb8ifdpwfnf1rr1h4v2dihmdnnxsikb9s9qxmfbpf0rmjnf9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/buzztaiki/flymake-hadolint")
    (synopsis
      "Flymake backend for hadolint, a Dockerfile linter")
    (description
      "Documentation at https://melpa.org/#/flymake-hadolint")
    (license #f)))

(define-public emacs-flymake-haml
  (package
    (name "emacs-flymake-haml")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-haml.git")
               (commit
                 "22a81e8484734552d461e7ae7305664dc244447e")))
        (sha256
          (base32
            "0pgp2gl3wdwrzcik5b5csn4qp8iv6pc51brx8p7jrwn7bz4lkb82"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-haml")
    (synopsis "A flymake handler for haml files")
    (description
      "Documentation at https://melpa.org/#/flymake-haml")
    (license #f)))

(define-public emacs-flymake-haskell-multi
  (package
    (name "emacs-flymake-haskell-multi")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-haskell-multi.git")
               (commit
                 "b564a94312259885b1380272eb867bf52a164020")))
        (sha256
          (base32
            "1h21hy5fjwa5qxl31rq3jjp3wwkipdwaliq0ci184rw48kw51xjh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (arguments '(#:files ("*.el" "haskell_multi")))
    (home-page
      "https://github.com/purcell/flymake-haskell-multi")
    (synopsis
      "Syntax-check haskell-mode using both ghc and hlint")
    (description
      "Documentation at https://melpa.org/#/flymake-haskell-multi")
    (license #f)))

(define-public emacs-flymake-hledger
  (package
    (name "emacs-flymake-hledger")
    (version "20230710.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/flymake-hledger.git")
               (commit
                 "b42b66186688fbe8dc904d01d9a5378456e011c9")))
        (sha256
          (base32
            "0dx7zky6nfcajpvkgn2jmdgw9b0k6pjsl7my3vcbanvg0863g9il"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/flymake-hledger")
    (synopsis
      "Flymake module to check hledger journals")
    (description
      "Documentation at https://melpa.org/#/flymake-hledger")
    (license #f)))

(define-public emacs-flymake-hlint
  (package
    (name "emacs-flymake-hlint")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-hlint.git")
               (commit
                 "f910736b26784efc9a2fa29503f45c1f1dd0aa38")))
        (sha256
          (base32
            "157f2l6hllwl12h8f502rq2kl33s202k9bcyfy2cmnn6vhky1b8s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-hlint")
    (synopsis
      "A flymake handler for haskell-mode files using hlint")
    (description
      "Documentation at https://melpa.org/#/flymake-hlint")
    (license #f)))

(define-public emacs-flymake-joker
  (package
    (name "emacs-flymake-joker")
    (version "20200315.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beetleman/flymake-joker.git")
               (commit
                 "fc132beedac9e6f415b72e578e77318fd13af9ee")))
        (sha256
          (base32
            "1pqi6d1kgn5s6bkabi8jxk26ffwqq7g3rl3xgas49rn9vgqwqmq1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-quickdef))
    (home-page
      "https://github.com/beetleman/flymake-joker")
    (synopsis
      "Add Clojure syntax checker (via Joker) to flymake")
    (description
      "Documentation at https://melpa.org/#/flymake-joker")
    (license #f)))

(define-public emacs-flymake-jshint
  (package
    (name "emacs-flymake-jshint")
    (version "20140319.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/flymake-jshint.el.git")
               (commit
                 "79dd554c227883c487db38ac111306c8d5382c95")))
        (sha256
          (base32
            "0ywm9fpb7d7ry2fly8719fa41q97yj9za3phqhv6j1chzaxvcv3a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page "unspecified")
    (synopsis "making flymake work with JSHint")
    (description
      "Documentation at https://melpa.org/#/flymake-jshint")
    (license #f)))

(define-public emacs-flymake-jslint
  (package
    (name "emacs-flymake-jslint")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-jslint.git")
               (commit
                 "8edb82be605542b0ef62d38d818adcdde335eecb")))
        (sha256
          (base32
            "0i6bqpbibsbqhpqfy9zl0awiqkmddi3q8xlrslcjd429f0g5f1ad"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-jslint")
    (synopsis
      "A flymake handler for javascript using jslint")
    (description
      "Documentation at https://melpa.org/#/flymake-jslint")
    (license #f)))

(define-public emacs-flymake-json
  (package
    (name "emacs-flymake-json")
    (version "20180511.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-json.git")
               (commit
                 "03b4e5e7ad11938781257a783e717ab95fe65952")))
        (sha256
          (base32
            "1yayfh4j155fpwybh26w6hvdg1whrd8wmaz8w406s4rqpsw93q92"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-json")
    (synopsis
      "A flymake handler for json using jsonlint")
    (description
      "Documentation at https://melpa.org/#/flymake-json")
    (license #f)))

(define-public emacs-flymake-kondor
  (package
    (name "emacs-flymake-kondor")
    (version "20211026.501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/turbo-cafe/flymake-kondor.git")
               (commit
                 "784e57f36812a37e323409b90b935ef3c6920a22")))
        (sha256
          (base32
            "1vcl1q07faqqmrryyia36hbgf78g3cs51pbi0bx41yzz779ribvk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/turbo-cafe/flymake-kondor")
    (synopsis "Linter with clj-kondo")
    (description
      "Documentation at https://melpa.org/#/flymake-kondor")
    (license #f)))

(define-public emacs-flymake-ktlint
  (package
    (name "emacs-flymake-ktlint")
    (version "20180831.346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flymake-ktlint.git")
               (commit
                 "56aab6f2d22061999050783dbc3166cdb456d0bb")))
        (sha256
          (base32
            "1nri5rq28plaq69a5k5kx65rzk8yyppyqpjhjicr7dqaa00ibnwy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/flymake-ktlint")
    (synopsis "Flymake extension for Ktlint.")
    (description
      "Documentation at https://melpa.org/#/flymake-ktlint")
    (license #f)))

(define-public emacs-flymake-languagetool
  (package
    (name "emacs-flymake-languagetool")
    (version "20230122.1609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-languagetool/flymake-languagetool.git")
               (commit
                 "ad8c724147d5a3a9f6ee59e0c7581e68fba4a2f8")))
        (sha256
          (base32
            "1h1c0anbch18i66qr6vjb0lf1ygx7y06inqy9r6wss51261l2cly"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-languagetool/flymake-languagetool")
    (synopsis "Flymake support for LanguageTool")
    (description
      "Documentation at https://melpa.org/#/flymake-languagetool")
    (license #f)))

(define-public emacs-flymake-less
  (package
    (name "emacs-flymake-less")
    (version "20151111.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-less.git")
               (commit
                 "32d3c28a9a5c52b82d1741ff9d715013b6498421")))
        (sha256
          (base32
            "0ggi8a4j4glpsar0sqg8q06rscajjaziis5ann31wphx88rc5wd7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page "unspecified")
    (synopsis
      "Flymake handler for LESS stylesheets (lesscss.org)")
    (description
      "Documentation at https://melpa.org/#/flymake-less")
    (license #f)))

(define-public emacs-flymake-lua
  (package
    (name "emacs-flymake-lua")
    (version "20170129.154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sroccaserra/flymake-lua.git")
               (commit
                 "84589f20066921a5b79cf3a1f914a223a2552d2a")))
        (sha256
          (base32
            "1f4nigl65g1g5w15ddf33ypk2b07xph964pkdq1bw81451vmvzhn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Flymake for Lua")
    (description
      "Documentation at https://melpa.org/#/flymake-lua")
    (license #f)))

(define-public emacs-flymake-markdownlint
  (package
    (name "emacs-flymake-markdownlint")
    (version "20220320.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shaohme/flymake-markdownlint.git")
               (commit
                 "59e3520668d9394c573e07b7980a2d48d9f6086c")))
        (sha256
          (base32
            "1d51gfk0yw9hxr3i48v7b7g3zh2pdwlygxy2gdcjcy4a4ih1014s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shaohme/flymake-markdownlint")
    (synopsis "Markdown linter with markdownlint")
    (description
      "Documentation at https://melpa.org/#/flymake-markdownlint")
    (license #f)))

(define-public emacs-flymake-nasm
  (package
    (name "emacs-flymake-nasm")
    (version "20210310.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/flymake-nasm.git")
               (commit
                 "27e58d7f3a48ca6fc12238fe6c888a3fdffc3f75")))
        (sha256
          (base32
            "0j4zai3par1i27szs2rws72qrqjcr3yz55pp56hl397r40kzwgmq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-quickdef))
    (home-page
      "http://github.com/juergenhoetzel/flymake-nasm")
    (synopsis
      "A flymake handler for asm-mode files using nasm")
    (description
      "Documentation at https://melpa.org/#/flymake-nasm")
    (license #f)))

(define-public emacs-flymake-perlcritic
  (package
    (name "emacs-flymake-perlcritic")
    (version "20120328.814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flymake/emacs-flymake-perlcritic.git")
               (commit
                 "c70eb881d4fb27aeb72c0bf8de6707b9de49bd51")))
        (sha256
          (base32
            "1w7msjg4sa0h0a4ycl9382agv1bhzcr9z0i6hmhcg7333rd31ilh"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el" ("bin" "bin/flymake_perlcritic"))))
    (home-page
      "https://github.com/illusori/emacs-flymake-perlcritic")
    (synopsis
      "Flymake handler for Perl to invoke Perl::Critic")
    (description
      "Documentation at https://melpa.org/#/flymake-perlcritic")
    (license #f)))

(define-public emacs-flymake-pest
  (package
    (name "emacs-flymake-pest")
    (version "20200710.2327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksqsf/pest-mode.git")
               (commit
                 "af677327f185113442e95b00986097b30cab650c")))
        (sha256
          (base32
            "01wy3v1aj2891wgbr7rwpaw9xavfrqbyiqiv01q6jjdvc5vl0rwi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pest-mode))
    (arguments '(#:files ("flymake-pest.el")))
    (home-page "https://github.com/ksqsf/pest-mode")
    (synopsis "A flymake handler for Pest files")
    (description
      "Documentation at https://melpa.org/#/flymake-pest")
    (license #f)))

(define-public emacs-flymake-php
  (package
    (name "emacs-flymake-php")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-php.git")
               (commit
                 "c045d01e002ba5e09b05f40e25bf5068d02126bc")))
        (sha256
          (base32
            "03fk8kzlwbs9k91ra91r7djxlpv5mhbha33dnyz50sqwa52cg8ck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-php")
    (synopsis "A flymake handler for php-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-php")
    (license #f)))

(define-public emacs-flymake-phpcs
  (package
    (name "emacs-flymake-phpcs")
    (version "20210213.732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flymake/flymake-phpcs.git")
               (commit
                 "32489c0878289c3d454aa8a02e1c7bef22922acc")))
        (sha256
          (base32
            "1amq3cxr5vm88hakpma0ks8dhn7wc894l5kl57ac8z0y8bczkkr6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/senda-akiha/flymake-phpcs/")
    (synopsis
      "making flymake work with PHP CodeSniffer")
    (description
      "Documentation at https://melpa.org/#/flymake-phpcs")
    (license #f)))

(define-public emacs-flymake-phpstan
  (package
    (name "emacs-flymake-phpstan")
    (version "20230417.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpstan.el.git")
               (commit
                 "2dc25cb2f3d83484ea0eb063c9ffca8148828a2b")))
        (sha256
          (base32
            "0drsp230nxs336zzfy8gjr7r3p7m8w9rp4ih1zjwarzl1svpp7yp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-phpstan))
    (arguments '(#:files ("flymake-phpstan.el")))
    (home-page
      "https://github.com/emacs-php/phpstan.el")
    (synopsis
      "Flymake backend for PHP using PHPStan")
    (description
      "Documentation at https://melpa.org/#/flymake-phpstan")
    (license #f)))

(define-public emacs-flymake-puppet
  (package
    (name "emacs-flymake-puppet")
    (version "20170801.554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benprew/flymake-puppet.git")
               (commit
                 "8a772395f4ccc59d883712ab53a92a17c1d9a429")))
        (sha256
          (base32
            "00w87qa7r8rigmpv58vpjwpn9x13sv7db5m6z4cqh76qkgkghgqi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/benprew/flymake-puppet")
    (synopsis "Flymake handler using puppet-lint")
    (description
      "Documentation at https://melpa.org/#/flymake-puppet")
    (license #f)))

(define-public emacs-flymake-python-pyflakes
  (package
    (name "emacs-flymake-python-pyflakes")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-python-pyflakes.git")
               (commit
                 "1d65c26bf65a5dcbd29fcd967e2feb90e1e7a33d")))
        (sha256
          (base32
            "0hsvw6rxg3k1ymrav0bf5q3siqr9v2jp4c4h1f98szrj2lp200fm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-python-pyflakes")
    (synopsis
      "A flymake handler for python-mode files using pyflakes (or flake8)")
    (description
      "Documentation at https://melpa.org/#/flymake-python-pyflakes")
    (license #f)))

(define-public emacs-flymake-quickdef
  (package
    (name "emacs-flymake-quickdef")
    (version "20200308.2342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karlotness/flymake-quickdef.git")
               (commit
                 "150c5839768a3d32f988f9dc08052978a68f2ad7")))
        (sha256
          (base32
            "19gfd539l97j8xbrq1fw83b54mxbcamlz9m896088d3p01zf8b0g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/karlotness/flymake-quickdef")
    (synopsis "Quickly define a new Flymake backend")
    (description
      "Documentation at https://melpa.org/#/flymake-quickdef")
    (license #f)))

(define-public emacs-flymake-racket
  (package
    (name "emacs-flymake-racket")
    (version "20210105.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/flymake-racket.git")
               (commit
                 "3d3e5f2a9ab696670f9e52baa4dde7b84b7542df")))
        (sha256
          (base32
            "0p935dr74m73w2qs65a2x6chw2zrjq903vdwpmvq3pn2dk4djdf0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/flymake-racket")
    (synopsis "Flymake extension for Racket.")
    (description
      "Documentation at https://melpa.org/#/flymake-racket")
    (license #f)))

(define-public emacs-flymake-rakudo
  (package
    (name "emacs-flymake-rakudo")
    (version "20220424.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Raku/flymake-rakudo.git")
               (commit
                 "f8e3d03a7207876cd891174702efd572d74f2e49")))
        (sha256
          (base32
            "1j6v1hdwp1jidx9i28gfkzp9hllzkw3r5qd3ggrb96lbqc5hmyi5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flymake-collection))
    (home-page
      "https://github.com/Raku/flymake-rakudo")
    (synopsis "Flymake syntax checker for Rakudo")
    (description
      "Documentation at https://melpa.org/#/flymake-rakudo")
    (license #f)))

(define-public emacs-flymake-relint
  (package
    (name "emacs-flymake-relint")
    (version "20230803.120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/flymake-relint.git")
               (commit
                 "744251e2565bda27c0ca977a22d40cc0acaa6c91")))
        (sha256
          (base32
            "18a02a358wa556v27yis7cx8sj19gjh9mk6n3nz595kql96zpd28"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-relint))
    (home-page
      "https://github.com/liuyinz/flymake-relint")
    (synopsis "A relint Flymake backend")
    (description
      "Documentation at https://melpa.org/#/flymake-relint")
    (license #f)))

(define-public emacs-flymake-ruby
  (package
    (name "emacs-flymake-ruby")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-ruby.git")
               (commit
                 "6c320c6fb686c5223bf975cc35178ad6b195e073")))
        (sha256
          (base32
            "0hzyxhg6y1rknvgj2ycivwrlrw7fznw9jrin5n9z627mzpjpfcnk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-ruby")
    (synopsis
      "A flymake handler for ruby-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-ruby")
    (license #f)))

(define-public emacs-flymake-ruff
  (package
    (name "emacs-flymake-ruff")
    (version "20231105.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/flymake-ruff.git")
               (commit
                 "1355c72cd216ca4a18d3d3a065aa4a7ed1b2871c")))
        (sha256
          (base32
            "13jqp8sij2p5zki51jvmyq848bi101p2rfgj4il79rb8il8yava5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erickgnavar/flymake-ruff")
    (synopsis
      "A flymake plugin for python files using ruff")
    (description
      "Documentation at https://melpa.org/#/flymake-ruff")
    (license #f)))

(define-public emacs-flymake-sass
  (package
    (name "emacs-flymake-sass")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-sass.git")
               (commit
                 "2de28148e92deb93bff3d55fe14e7c67ac476056")))
        (sha256
          (base32
            "05v83l05knqv2inharmhjvzmjskjlany7dnwp5dz44bvy0jhnm39"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-sass")
    (synopsis
      "Flymake handler for sass and scss files")
    (description
      "Documentation at https://melpa.org/#/flymake-sass")
    (license #f)))

(define-public emacs-flymake-shell
  (package
    (name "emacs-flymake-shell")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/flymake-shell.git")
               (commit
                 "a16cf453056b9849cc7c912bb127fb0b08fc6dab")))
        (sha256
          (base32
            "1ki0zk5ijfkf4blavl62b55jnjzxw2b7blaxg51arpvvbflqmmlh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/purcell/flymake-shell")
    (synopsis
      "A flymake syntax-checker for shell scripts")
    (description
      "Documentation at https://melpa.org/#/flymake-shell")
    (license #f)))

(define-public emacs-flymake-shellcheck
  (package
    (name "emacs-flymake-shellcheck")
    (version "20220308.2218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/federicotdn/flymake-shellcheck.git")
               (commit
                 "688638177b4e23ecc192975e3062274ca904ada1")))
        (sha256
          (base32
            "1x5blblaf1h6jz4v6l10w2gy7xkbwzzw2a4s0afdicm0r1wc7v44"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/federicotdn/flymake-shellcheck")
    (synopsis
      "A bash/sh Flymake backend powered by ShellCheck")
    (description
      "Documentation at https://melpa.org/#/flymake-shellcheck")
    (license #f)))

(define-public emacs-flymake-solidity
  (package
    (name "emacs-flymake-solidity")
    (version "20170805.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kootenpv/flymake-solidity.git")
               (commit
                 "48bfe9525f764d8a68cc0270905dbf45bfd00bb8")))
        (sha256
          (base32
            "0v8sf5m0mygqahjyadxgffdf7p59wb0qnghyxajhc69sbg58hnnd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/kootenvp/flymake-solidity")
    (synopsis
      "A flymake handler for solidity using solc")
    (description
      "Documentation at https://melpa.org/#/flymake-solidity")
    (license #f)))

(define-public emacs-flymake-sqlfluff
  (package
    (name "emacs-flymake-sqlfluff")
    (version "20231105.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/flymake-sqlfluff.git")
               (commit
                 "598dff268231f74ba902e2c607c85dd014fbee28")))
        (sha256
          (base32
            "0r32vhb9krjhq4xk0bmzk43x756jcw39k7vl0ps10zha7p7mnm69"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erickgnavar/flymake-sqlfluff")
    (synopsis
      "A flymake plugin for SQL files using sqlfluff")
    (description
      "Documentation at https://melpa.org/#/flymake-sqlfluff")
    (license #f)))

(define-public emacs-flymake-swi-prolog
  (package
    (name "emacs-flymake-swi-prolog")
    (version "20220404.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~eshel/flymake-swi-prolog")
               (commit
                 "ae0e4b706a40b71c007ed6cb0ec5425d49bea4c3")))
        (sha256
          (base32
            "07wpm394vm026ihw1lzndmrw8bx9fk48bh6569llvcw439ni0mzy"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~eshel/flymake-swi-prolog")
    (synopsis "A Flymake backend for SWI-Prolog")
    (description
      "Documentation at https://melpa.org/#/flymake-swi-prolog")
    (license #f)))

(define-public emacs-flymake-vala
  (package
    (name "emacs-flymake-vala")
    (version "20150326.531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daniellawrence/flymake-vala.git")
               (commit
                 "c3674f461fc84fb0300cd3a562fb903a59782745")))
        (sha256
          (base32
            "0qpr0frcn3w0f6yz8vgavwbxvn6wb0qkfk653v4cfy57dvslr4wf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/daniellawrence/flymake-vala")
    (synopsis
      "A flymake handler for vala-mode files")
    (description
      "Documentation at https://melpa.org/#/flymake-vala")
    (license #f)))

(define-public emacs-flymake-vnu
  (package
    (name "emacs-flymake-vnu")
    (version "20230310.440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theneosloth/flymake-vnu.git")
               (commit
                 "e9c6038f69ad1523e603026155d9acd5fc3d5aac")))
        (sha256
          (base32
            "1k0ayc38kjwciq7dj2zlq2y1kfvgdj55yl6xn1mwafxy7kywgplg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/theneosloth/flymake-vnu")
    (synopsis
      "Flymake extension for the v.Nu HTML validator.")
    (description
      "Documentation at https://melpa.org/#/flymake-vnu")
    (license #f)))

(define-public emacs-flymake-yaml
  (package
    (name "emacs-flymake-yaml")
    (version "20130423.1548")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/flymake-yaml.git")
               (commit
                 "24cb5b744a1796e554e6dbfc6eeb237d06a00b10")))
        (sha256
          (base32
            "0mdam39a85csi9b90wak9j3zkd25lj6x54affwkg3fym8yphmplm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flymake-easy))
    (home-page
      "https://github.com/yasuyk/flymake-yaml")
    (synopsis "A flymake handler for YAML")
    (description
      "Documentation at https://melpa.org/#/flymake-yaml")
    (license #f)))

(define-public emacs-flymake-yamllint
  (package
    (name "emacs-flymake-yamllint")
    (version "20230226.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shaohme/flymake-yamllint.git")
               (commit
                 "020d2a33568c8069801db9dd6992b8961a58de8d")))
        (sha256
          (base32
            "0ccq6j8x43arxm43rys1mcfppmq60zlfp5hbznxbzy208jck47rv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shaohme/flymake-yamllint")
    (synopsis "YAML linter with yamllint")
    (description
      "Documentation at https://melpa.org/#/flymake-yamllint")
    (license #f)))

(define-public emacs-flymd
  (package
    (name "emacs-flymd")
    (version "20160617.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mola-T/flymd.git")
               (commit
                 "84d5a68bcfed4a295952c33ffcd11e880978d9d7")))
        (sha256
          (base32
            "0j2mmr9f0d3zkhb92zc820iw4vkz958rm3ca7l9k3gx37cc4sn2l"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "flymd.html")))
    (home-page "https://github.com/mola-T/flymd")
    (synopsis "On the fly markdown preview")
    (description
      "Documentation at https://melpa.org/#/flymd")
    (license #f)))

(define-public emacs-flyparens
  (package
    (name "emacs-flyparens")
    (version "20140723.1846")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jiyoo/flyparens.git")
               (commit
                 "af9b8cfd647d0e5f97684d613dc2eea7cfc19398")))
        (sha256
          (base32
            "07hy1kyw4cbxydmhp4scsy3dcbk2s50rmdp8rch1vbcjk5lj4mvb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Check for unbalanced parens on the fly")
    (description
      "Documentation at https://melpa.org/#/flyparens")
    (license #f)))

(define-public emacs-flyspell-correct
  (package
    (name "emacs-flyspell-correct")
    (version "20220520.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "7d7b6b01188bd28e20a13736ac9f36c3367bd16e")))
        (sha256
          (base32
            "1b6h3wjmxg9d1d3mfvw6fsgkr1w0d14zxllv9jb5cscl5lq8rbmm"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("flyspell-correct.el" "flyspell-correct-ido.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via custom interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct")
    (license #f)))

(define-public emacs-flyspell-correct-avy-menu
  (package
    (name "emacs-flyspell-correct-avy-menu")
    (version "20220520.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "7d7b6b01188bd28e20a13736ac9f36c3367bd16e")))
        (sha256
          (base32
            "1b6h3wjmxg9d1d3mfvw6fsgkr1w0d14zxllv9jb5cscl5lq8rbmm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flyspell-correct emacs-avy-menu))
    (arguments
      '(#:files ("flyspell-correct-avy-menu.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via avy-menu interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct-avy-menu")
    (license #f)))

(define-public emacs-flyspell-correct-helm
  (package
    (name "emacs-flyspell-correct-helm")
    (version "20220520.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "7d7b6b01188bd28e20a13736ac9f36c3367bd16e")))
        (sha256
          (base32
            "1b6h3wjmxg9d1d3mfvw6fsgkr1w0d14zxllv9jb5cscl5lq8rbmm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flyspell-correct emacs-helm))
    (arguments
      '(#:files ("flyspell-correct-helm.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via helm interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct-helm")
    (license #f)))

(define-public emacs-flyspell-correct-ivy
  (package
    (name "emacs-flyspell-correct-ivy")
    (version "20220520.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "7d7b6b01188bd28e20a13736ac9f36c3367bd16e")))
        (sha256
          (base32
            "1b6h3wjmxg9d1d3mfvw6fsgkr1w0d14zxllv9jb5cscl5lq8rbmm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flyspell-correct emacs-ivy))
    (arguments
      '(#:files ("flyspell-correct-ivy.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via ivy interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct-ivy")
    (license #f)))

(define-public emacs-flyspell-correct-popup
  (package
    (name "emacs-flyspell-correct-popup")
    (version "20220520.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/flyspell-correct.git")
               (commit
                 "7d7b6b01188bd28e20a13736ac9f36c3367bd16e")))
        (sha256
          (base32
            "1b6h3wjmxg9d1d3mfvw6fsgkr1w0d14zxllv9jb5cscl5lq8rbmm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flyspell-correct emacs-popup))
    (arguments
      '(#:files ("flyspell-correct-popup.el")))
    (home-page
      "https://github.com/d12frosted/flyspell-correct")
    (synopsis
      "Correcting words with flyspell via popup interface")
    (description
      "Documentation at https://melpa.org/#/flyspell-correct-popup")
    (license #f)))

(define-public emacs-flyspell-lazy
  (package
    (name "emacs-flyspell-lazy")
    (version "20210308.1253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/flyspell-lazy.git")
               (commit
                 "0fc5996bcee20b46cbd227ae948d343c3bef7339")))
        (sha256
          (base32
            "1r9sz6p8p2g3n59pqfqllr5324pg7q3fji6lki9qpy0l5yd6j1p4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/flyspell-lazy")
    (synopsis
      "Improve flyspell responsiveness using idle timers")
    (description
      "Documentation at https://melpa.org/#/flyspell-lazy")
    (license #f)))

(define-public emacs-flyspell-popup
  (package
    (name "emacs-flyspell-popup")
    (version "20170529.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/flyspell-popup.git")
               (commit
                 "29311849bfd253b9b689bf331860b4c4d3bd4dde")))
        (sha256
          (base32
            "0x7jilwb0fgzsr7ma59sgd0d4122cl0hwzr28vi3z5s8wdab7nc4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/xuchunyang/flyspell-popup")
    (synopsis
      "Correcting words with Flyspell in popup menus")
    (description
      "Documentation at https://melpa.org/#/flyspell-popup")
    (license #f)))

(define-public emacs-fm-bookmarks
  (package
    (name "emacs-fm-bookmarks")
    (version "20170104.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/fm-bookmarks.el.git")
               (commit
                 "11dacfd16a926bfecba96a94c6b13e162c7717f7")))
        (sha256
          (base32
            "0is4617ivga8qrw19y7fy883fgczzdxvrl15ja1dydzj2cbn5d97"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kuanyui/fm-bookmarks.el")
    (synopsis
      "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired")
    (description
      "Documentation at https://melpa.org/#/fm-bookmarks")
    (license #f)))

(define-public emacs-fn
  (package
    (name "emacs-fn")
    (version "20210304.1812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/troyp/fn.el.git")
               (commit
                 "98e3fe1b4785e162d9aca978a2db106baa79260f")))
        (sha256
          (base32
            "0qaxbqwqxxgvw1lb6icsv3mx215mg682n3jsrmqfsvgl9nc97ps6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Concise anonymous functions for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/fn")
    (license #f)))

(define-public emacs-focus
  (package
    (name "emacs-focus")
    (version "20221016.1846")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larstvei/Focus.git")
               (commit
                 "2507ec4ec5a9402647ef85540669db1815520c15")))
        (sha256
          (base32
            "0qbzbs18isxyf5yiz64vyxvzjpfjdaafxnas2lhx3sjkgglb08i2"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/larstvei/Focus")
    (synopsis
      "Dim the font color of text in surrounding sections")
    (description
      "Documentation at https://melpa.org/#/focus")
    (license #f)))

(define-public emacs-focus-autosave-mode
  (package
    (name "emacs-focus-autosave-mode")
    (version "20160519.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/focus-autosave-mode.el.git")
               (commit
                 "2e0844fabb6f0dc9e0f31928e4785febf38b9e35")))
        (sha256
          (base32
            "08wibc6rzy5qj3anzd076ncjd8wwr4vpak7fdjv29aai1gkzsc9j"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically save files in focus-out-hook.")
    (description
      "Documentation at https://melpa.org/#/focus-autosave-mode")
    (license #f)))

(define-public emacs-foggy-night-theme
  (package
    (name "emacs-foggy-night-theme")
    (version "20190123.1614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/foggy-night-theme.git")
               (commit
                 "14894e06ee5c6e14db36f2cb07387ee971c1736f")))
        (sha256
          (base32
            "1rjhb8gjlnw002y8sjn2d976qdsjgvp9hsrlca1h5wmmkfha9knp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Dark low contrast theme with soft and muted colors.")
    (description
      "Documentation at https://melpa.org/#/foggy-night-theme")
    (license #f)))

(define-public emacs-fold-dwim
  (package
    (name "emacs-fold-dwim")
    (version "20140208.1637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/fold-dwim.git")
               (commit
                 "c46f4bb2ce91b4e307136320e72c28dd50b6cd8b")))
        (sha256
          (base32
            "1yz1wis31asw6xa5maliyd1ck2q02xnnh7dc6swgj9cb4wi7k6i1"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.dur.ac.uk/p.j.heslin/Software/Emacs")
    (synopsis
      "Unified user interface for Emacs folding modes")
    (description
      "Documentation at https://melpa.org/#/fold-dwim")
    (license #f)))

(define-public emacs-fold-dwim-org
  (package
    (name "emacs-fold-dwim-org")
    (version "20131203.1351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/fold-dwim-org.git")
               (commit
                 "c09bb2b46d65afbd1d0febc6fded7495be7a3037")))
        (sha256
          (base32
            "14jvbkahwvv4wb0s9vp8gqmlpv1d4269j5rsjxn79q5pawjzslxw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fold-dwim))
    (home-page
      "https://github.com/mlf176f2/fold-dwim-org")
    (synopsis "Fold DWIM bound to org key-strokes.")
    (description
      "Documentation at https://melpa.org/#/fold-dwim-org")
    (license #f)))

(define-public emacs-fold-this
  (package
    (name "emacs-fold-this")
    (version "20191107.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/fold-this.el.git")
               (commit
                 "c3912c738cf0515f65162479c55999e2992afce5")))
        (sha256
          (base32
            "0cnfkz2bjyk0fkbxa80h500f7pig7q0rdifmj56d4whzhg2jsicg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("fold-this.el")))
    (home-page
      "https://github.com/magnars/fold-this.el")
    (synopsis "Just fold this region please")
    (description
      "Documentation at https://melpa.org/#/fold-this")
    (license #f)))

(define-public emacs-folding
  (package
    (name "emacs-folding")
    (version "20231003.959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaalto/project-emacs--folding-mode.git")
               (commit
                 "f6fc3af1de39ac94b1642595232457b9060c3f45")))
        (sha256
          (base32
            "1s2adff853w1ix0s1zapqcql4vhmyy56rixkcb06niv5pr2pwpg7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A folding-editor-like minor mode.")
    (description
      "Documentation at https://melpa.org/#/folding")
    (license #f)))

(define-public emacs-font-lock-profiler
  (package
    (name "emacs-font-lock-profiler")
    (version "20170208.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/font-lock-profiler.git")
               (commit
                 "6e096458416888a4f63cca0d6bc5965a052753c8")))
        (sha256
          (base32
            "186fvyfbakz54fr8j1l7cijvaklw96m1hfbjyw7nha08zc2m1hw5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/font-lock-profiler")
    (synopsis
      "Coverage and timing tool for font-lock keywords.")
    (description
      "Documentation at https://melpa.org/#/font-lock-profiler")
    (license #f)))

(define-public emacs-font-lock-studio
  (package
    (name "emacs-font-lock-studio")
    (version "20220629.1909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/font-lock-studio.git")
               (commit
                 "78472ae1f65721b4da17756ee7e506f3d0487033")))
        (sha256
          (base32
            "0gyzl2rz9kzrpvb3pfkcwbd0b7rxjxlklzc7zfh7ch6xxg0ghslw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/font-lock-studio")
    (synopsis
      "interactive debugger for Font Lock keywords.")
    (description
      "Documentation at https://melpa.org/#/font-lock-studio")
    (license #f)))

(define-public emacs-font-utils
  (package
    (name "emacs-font-utils")
    (version "20210405.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/font-utils.git")
               (commit
                 "abc572eb0dc30a26584c0058c3fe6c7273a10003")))
        (sha256
          (base32
            "0hx3k2zx2kdavivr1b957jq7kcwk301yzw77aprxzbs7jz73a35x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persistent-soft emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/font-utils")
    (synopsis
      "Utility functions for working with fonts")
    (description
      "Documentation at https://melpa.org/#/font-utils")
    (license #f)))

(define-public emacs-fontawesome
  (package
    (name "emacs-fontawesome")
    (version "20170305.1356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/fontawesome.git")
               (commit
                 "a743f80bfd53767ca9ee32da34c5ca032172a480")))
        (sha256
          (base32
            "1mkyd2bbyd9avw2qaidkzkpv8i7lfiv9189bj49dxklg92823sip"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-fontawesome")
    (synopsis "fontawesome utility")
    (description
      "Documentation at https://melpa.org/#/fontawesome")
    (license #f)))

(define-public emacs-fontify-face
  (package
    (name "emacs-fontify-face")
    (version "20210503.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/fontify-face.git")
               (commit
                 "d1386c88ccc77ccfb40b888ff90d6181325d14f8")))
        (sha256
          (base32
            "1fi8sa7d6p6zgpvrnmpl85jfxqnl43053krb4h2lw0cgxd2wbd1v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fuco1/fontify-face")
    (synopsis
      "Fontify symbols representing faces with that face.")
    (description
      "Documentation at https://melpa.org/#/fontify-face")
    (license #f)))

(define-public emacs-fontsloth
  (package
    (name "emacs-fontsloth")
    (version "20230516.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jollm/fontsloth.git")
               (commit
                 "8dd771aae34ce282036c7533735e6251770fcbd0")))
        (sha256
          (base32
            "16yk55nvpn8s4cv9wlfm2zp9wvaianal7c5pkk2jxildw7ras55x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-logito
            emacs-pcache
            emacs-stream))
    (home-page "https://github.com/jollm/fontsloth")
    (synopsis "Elisp otf/ttf font loader/renderer")
    (description
      "Documentation at https://melpa.org/#/fontsloth")
    (license #f)))

(define-public emacs-for
  (package
    (name "emacs-for")
    (version "20230828.832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/usaoc/elisp-for.git")
               (commit
                 "c0e9046d363a86a88fdcf73eacc09839aae4dd5a")))
        (sha256
          (base32
            "0wsp9s02kl2py2czmiwrb2nkh0x3y61zps6x84dpjq8yk1xk0y6a"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/usaoc/elisp-for")
    (synopsis "Iteration and sequence")
    (description
      "Documentation at https://melpa.org/#/for")
    (license #f)))

(define-public emacs-forecast
  (package
    (name "emacs-forecast")
    (version "20191004.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "8a3b529d5ece261a8847298ea03ed35615cc9bfa")))
        (sha256
          (base32
            "16zalqjd2llwkp7v0218crgf3k34py8zx6lj6z7i3kbmxm9nb27q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("forecast.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#forecast-el")
    (synopsis "Weather forecasts")
    (description
      "Documentation at https://melpa.org/#/forecast")
    (license #f)))

(define-public emacs-foreign-regexp
  (package
    (name "emacs-foreign-regexp")
    (version "20200325.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k-talo/foreign-regexp.el.git")
               (commit
                 "e2dd47f2160cadc194eb156e7c76c3c869e6706e")))
        (sha256
          (base32
            "0bqhabpv992ss8rw3fgym6q5kq1d6b9ycs0a5ndgjpcz19rmlr66"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" ("bin" "bin/*.pl" "bin/*.rb"))))
    (home-page "unspecified")
    (synopsis
      "search and replace by foreign regexp.")
    (description
      "Documentation at https://melpa.org/#/foreign-regexp")
    (license #f)))

(define-public emacs-foreman-mode
  (package
    (name "emacs-foreman-mode")
    (version "20170725.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/foreman-mode.git")
               (commit
                 "22b3bb13134b617870ed1e888af739f4818be929")))
        (sha256
          (base32
            "01qanhif24czcmhpdfkcjs019ss4r79f7y2wfbzmj6w4z7g3rikk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-dash-functional
            emacs-f))
    (home-page
      "http://github.com/zweifisch/foreman-mode")
    (synopsis
      "View and manage Procfile-based applications")
    (description
      "Documentation at https://melpa.org/#/foreman-mode")
    (license #f)))

(define-public emacs-forest-blue-theme
  (package
    (name "emacs-forest-blue-theme")
    (version "20160627.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olkinn/forest-blue-emacs.git")
               (commit
                 "58096ce1a25615d2bae806c3775bae3e2775019d")))
        (sha256
          (base32
            "1qm74cfnc13wgv0c3657nd3xbgn492r24m5m2i0ipnpq49cddccf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs theme with a dark background.")
    (description
      "Documentation at https://melpa.org/#/forest-blue-theme")
    (license #f)))

(define-public emacs-forge
  (package
    (name "emacs-forge")
    (version "20231107.2046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/forge.git")
               (commit
                 "5dcca0e0c0378499b086543be2ec292ddd8beb5b")))
        (sha256
          (base32
            "1zfr4ci3vw7y6nq9j75smdga02nzqyrj08v35qd1i7j7kdpppp3l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-closql
            emacs-dash
            emacs-emacsql
            emacs-ghub
            emacs-magit
            emacs-markdown-mode
            emacs-yaml))
    (home-page "https://github.com/magit/forge")
    (synopsis "Access Git forges from Magit.")
    (description
      "Documentation at https://melpa.org/#/forge")
    (license #f)))

(define-public emacs-form-feed
  (package
    (name "emacs-form-feed")
    (version "20210508.1627")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/form-feed-"
               version
               ".el"))
        (sha256
          (base32
            "14x9xldishazb0w7xk9yccpkyl0p122cgl1f5jqfc74v8w95pxfg"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/form-feed")
    (synopsis
      "Display ^L glyphs as horizontal lines")
    (description
      "Documentation at https://melpa.org/#/form-feed")
    (license #f)))

(define-public emacs-form-feed-st
  (package
    (name "emacs-form-feed-st")
    (version "20231002.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leodag/form-feed-st.git")
               (commit
                 "f91c8daf35b7588e0aa24c8716c8cfd8ff0067c8")))
        (sha256
          (base32
            "0wj7icy2nj2kc1ayzgmrnn3slcw1ws6l9m89yr8h8j7wyrcnhkxz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leodag/form-feed-st")
    (synopsis
      "Display ^L glyphs as full-width horizontal lines")
    (description
      "Documentation at https://melpa.org/#/form-feed-st")
    (license #f)))

(define-public emacs-format-all
  (package
    (name "emacs-format-all")
    (version "20231107.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-format-all-the-code.git")
               (commit
                 "4fcd421233e3c6a5bb643fc15a2d331fc8f977d6")))
        (sha256
          (base32
            "1m22c6nbqdvbvbmv8j8i1r9b5xxcnbxdrl2alc0n1l3ryflwchmn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inheritenv emacs-language-id))
    (home-page
      "https://github.com/lassik/emacs-format-all-the-code")
    (synopsis
      "Auto-format C, C++, JS, Python, Ruby and 50 other languages")
    (description
      "Documentation at https://melpa.org/#/format-all")
    (license #f)))

(define-public emacs-format-sql
  (package
    (name "emacs-format-sql")
    (version "20150422.1333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paetzke/format-sql.el.git")
               (commit
                 "97f475c245cd6c81a72a265678e2087cee66ac7b")))
        (sha256
          (base32
            "0mikksamljps1czacgqavlnzzhgs8s3f8q4jza6v3csf8kgp5zd0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paetzke/format-sql.el")
    (synopsis
      "Use format-sql to make your SQL readable in directly Emacs.")
    (description
      "Documentation at https://melpa.org/#/format-sql")
    (license #f)))

(define-public emacs-format-table
  (package
    (name "emacs-format-table")
    (version "20181223.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/functionreturnfunction/format-table.git")
               (commit
                 "dfcae3a867e574577fc09a43b045889ff155b58f")))
        (sha256
          (base32
            "1z9l1qmv5hw7bgchi5f68nzsz9arjwsazvd6viq6k6jmjzncli6q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/functionreturnfunction/format-table")
    (synopsis "Parse and reformat tabular data.")
    (description
      "Documentation at https://melpa.org/#/format-table")
    (license #f)))

(define-public emacs-forth-mode
  (package
    (name "emacs-forth-mode")
    (version "20231016.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larsbrinkhoff/forth-mode.git")
               (commit
                 "aaacce775b910afe06a02a56ecfceb3288c84b64")))
        (sha256
          (base32
            "0pj7fr7lh6s6kanz86zhyxf2s56dl7dffc1ifh3zjwwk85dhrr9m"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults "backend" (:exclude "build.el"))))
    (home-page
      "http://github.com/larsbrinkhoff/forth-mode")
    (synopsis "Programming language mode for Forth")
    (description
      "Documentation at https://melpa.org/#/forth-mode")
    (license #f)))

(define-public emacs-fortpy
  (package
    (name "emacs-fortpy")
    (version "20150715.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rosenbrockc/fortpy-el.git")
               (commit
                 "c614517e9396ef7a78be3b8786fbf303879cf43b")))
        (sha256
          (base32
            "1nqx2igxmwswjcrnzdjpx5qcjr60zjy3q9cadq5disms17wdcr6y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-epc
            emacs-auto-complete
            emacs-python-environment
            emacs-pos-tip))
    (arguments
      '(#:files ("fortpy*" "Makefile" "setup.py")))
    (home-page "unspecified")
    (synopsis "a Fortran auto-completion for Emacs")
    (description
      "Documentation at https://melpa.org/#/fortpy")
    (license #f)))

(define-public emacs-fortune-cookie
  (package
    (name "emacs-fortune-cookie")
    (version "20181223.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andschwa/fortune-cookie.git")
               (commit
                 "6c1c08f5be83822c0b762872ab25e3dbee96f333")))
        (sha256
          (base32
            "0gnidiryappk9naazwv0dd3b1dyd284zkwnhy2b1z3zkc9i7awfq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andschwa/fortune-cookie")
    (synopsis
      "Print a fortune in your scratch buffer.")
    (description
      "Documentation at https://melpa.org/#/fortune-cookie")
    (license #f)))

(define-public emacs-fountain-mode
  (package
    (name "emacs-fountain-mode")
    (version "20231104.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/fountain-mode.git")
               (commit
                 "e2c0b952b297d99dd16f2d55f883eec8bfdfa896")))
        (sha256
          (base32
            "1m6xvda2bx5pxzklc0nlzfc9a9fbnvysld2zha59qdjlr9zzi298"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "contrib/*")))
    (home-page "https://www.fountain-mode.org")
    (synopsis
      "Major mode for screenwriting in Fountain markup")
    (description
      "Documentation at https://melpa.org/#/fountain-mode")
    (license #f)))

(define-public emacs-fpga
  (package
    (name "emacs-fpga")
    (version "20230913.2241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/fpga.git")
               (commit
                 "4045ef84a97e10cc82f7248069a9c7e0efe4647a")))
        (sha256
          (base32
            "0rvihi6l0xc65zglsxcf2vjgicxjcmm177kvz6n8j5sp3khqyaqd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gmlarumbe/fpga")
    (synopsis "FPGA & ASIC Utils")
    (description
      "Documentation at https://melpa.org/#/fpga")
    (license #f)))

(define-public emacs-fraktur-mode
  (package
    (name "emacs-fraktur-mode")
    (version "20160815.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grettke/fraktur-mode.git")
               (commit
                 "514baf5546aed12a0d9fa0fe66e87cdcc7843b08")))
        (sha256
          (base32
            "169d9j7jk3li96fkn2sr257835flkcpml24l4bmzp8j3q57a7wxw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grettke/fraktur-mode")
    (synopsis
      "Easily insert Unicode mathematical Fraktur characters")
    (description
      "Documentation at https://melpa.org/#/fraktur-mode")
    (license #f)))

(define-public emacs-frame-local
  (package
    (name "emacs-frame-local")
    (version "20180330.940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiencs/frame-local.git")
               (commit
                 "7ee1106c3bcd4022f48421f8cb1ef4f995da816e")))
        (sha256
          (base32
            "0zfxsxdh3bd3fd566zl0byp13p5b8f4cgkwl637imvarvahczigp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sebastiencs/frame-local")
    (synopsis "Variables local to a frame")
    (description
      "Documentation at https://melpa.org/#/frame-local")
    (license #f)))

(define-public emacs-frame-mode
  (package
    (name "emacs-frame-mode")
    (version "20230823.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/frame-mode.git")
               (commit
                 "ab5e568a7c7259d31c252c263458bd76490241d0")))
        (sha256
          (base32
            "044ppidaapay08nw4gv85ir5ivxwwbys0gdvg6mbpf142qk093hb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/IvanMalison/frame-mode")
    (synopsis "Use frames instead of windows")
    (description
      "Documentation at https://melpa.org/#/frame-mode")
    (license #f)))

(define-public emacs-frame-purpose
  (package
    (name "emacs-frame-purpose")
    (version "20211011.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/frame-purpose.el.git")
               (commit
                 "7d498147445cc0afb87b922a8225d2e163e5ed5a")))
        (sha256
          (base32
            "03qalcx8hbf6r0jmh7hf1r4san13fbgaaabcs4c50cam7kdv525r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/alphapapa/frame-purpose.el")
    (synopsis "Purpose-specific frames")
    (description
      "Documentation at https://melpa.org/#/frame-purpose")
    (license #f)))

(define-public emacs-frame-tag
  (package
    (name "emacs-frame-tag")
    (version "20170111.6")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liangzan/frame-tag.el.git")
               (commit
                 "73d6163568c7d32952175e663318b872f995a4e5")))
        (sha256
          (base32
            "1ks8qw1vq30mjp7bpgrk3f11jhm9viibiap6zjk8r5rykjzl1ifv"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/liangzan/frame-tag.el")
    (synopsis
      "Minor mode that assigns a unique number to each frame for easy switching")
    (description
      "Documentation at https://melpa.org/#/frame-tag")
    (license #f)))

(define-public emacs-frames-only-mode
  (package
    (name "emacs-frames-only-mode")
    (version "20210107.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/frames-only-mode.git")
               (commit
                 "d3f6647c484656ddabdac5d18546599a03823cd4")))
        (sha256
          (base32
            "02wai424sxxmaz7ilfm4ap4jl5rpx5dajg534x6vxm5alfjhlpag"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/davidshepherd7/frames-only-mode")
    (synopsis "Use frames instead of Emacs windows")
    (description
      "Documentation at https://melpa.org/#/frames-only-mode")
    (license #f)))

(define-public emacs-frameshot
  (package
    (name "emacs-frameshot")
    (version "20230515.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/frameshot.git")
               (commit
                 "f74d99be64dc7afa4bdea106c0597c1fa59b9a3d")))
        (sha256
          (base32
            "0qwffkpjh5zsj487yi5m5j5y7vxqc67pga5nj127nbg4rdmjs3ng"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/frameshot")
    (synopsis "Take screenshots of a frame")
    (description
      "Documentation at https://melpa.org/#/frameshot")
    (license #f)))

(define-public emacs-framesize
  (package
    (name "emacs-framesize")
    (version "20131017.2132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-framesize.git")
               (commit
                 "f2dbf5d2513b2bc45f2085370a55c1754b6025da")))
        (sha256
          (base32
            "11h9xw6jnw7dacyv1jch2a77xp7hfb93690m7hhazy6l87xmm4dk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-key-chord))
    (home-page
      "http://github.com/nicferrier/emacs-framesize")
    (synopsis "change the size of frames in Emacs")
    (description
      "Documentation at https://melpa.org/#/framesize")
    (license #f)))

(define-public emacs-frecency
  (package
    (name "emacs-frecency")
    (version "20170909.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/frecency.el.git")
               (commit
                 "6d57aee131d96315aedf6cb7d6e5d6d09bf71503")))
        (sha256
          (base32
            "1hxjvfys5kqwvl21jj5sfb6bpqxdgdhsrniq821y324glc8s38xc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-a emacs-dash))
    (home-page
      "http://github.com/alphapapa/frecency.el")
    (synopsis
      "Library for sorting items by frequency and recency of access")
    (description
      "Documentation at https://melpa.org/#/frecency")
    (license #f)))

(define-public emacs-frecentf
  (package
    (name "emacs-frecentf")
    (version "20210330.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.launchpad.net/frecentf.el")
               (commit
                 "19e2c48a8b8c8ee8cae5c93b58b57a0aa81a8c46")))
        (sha256
          (base32
            "1gjzis2jshsq5sdi5rv3a29cmk4iv7y6k2awxlddq3biyf80ialb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-frecency emacs-persist emacs-async))
    (home-page "https://launchpad.net/frecentf.el")
    (synopsis "Pervasive recentf using frecency")
    (description
      "Documentation at https://melpa.org/#/frecentf")
    (license #f)))

(define-public emacs-free-keys
  (package
    (name "emacs-free-keys")
    (version "20211116.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/free-keys.git")
               (commit
                 "7348ce68192871b8a69b687ec124d9f816d493ca")))
        (sha256
          (base32
            "0f99vykxvvcsdqs03ig5kyd3vdrclk8mcryn7b310ysg840ksrw8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Fuco1/free-keys")
    (synopsis
      "Show free keybindings for modkeys or prefixes")
    (description
      "Documentation at https://melpa.org/#/free-keys")
    (license #f)))

(define-public emacs-freeradius-mode
  (package
    (name "emacs-freeradius-mode")
    (version "20190401.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/VersBinarii/freeradius-mode.git")
               (commit
                 "cf8bf0359cf6c77848facbd24b764b3e111b4c2d")))
        (sha256
          (base32
            "0ggkflx4lhyxqr7sgf1f3z0i3glmqyvl4bn16clh9ybl14q22rli"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/VersBinarii/freeradius-mode")
    (synopsis
      "major mode for FreeRadius server config files")
    (description
      "Documentation at https://melpa.org/#/freeradius-mode")
    (license #f)))

(define-public emacs-freeze-it
  (package
    (name "emacs-freeze-it")
    (version "20220301.148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/freeze-it.git")
               (commit
                 "ad92e33a7ebd860905da60d194833516bf61cbf5")))
        (sha256
          (base32
            "0gvc6f8jdvrfwhm5rlvrjd6lbvw1j84z3pwcfajpgyr1a5y6gx49"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/freeze-it")
    (synopsis
      "Minor mode to make your previous writing read-only")
    (description
      "Documentation at https://melpa.org/#/freeze-it")
    (license #f)))

(define-public emacs-friendly-remote-shell
  (package
    (name "emacs-friendly-remote-shell")
    (version "20230916.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-shell.git")
               (commit
                 "5cafa3f6313ce04a47c8996ea1ac6b617d155d46")))
        (sha256
          (base32
            "1f3wdddk178xwklf6xxnxq2sqb3fw6rx07xwdw6crkz6d7pjqikr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-with-shell-interpreter
            emacs-friendly-tramp-path
            emacs-friendly-shell))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "friendly-shell-command.el"
            "friendly-shell.el"))))
    (home-page
      "https://github.com/p3r7/friendly-shell")
    (synopsis
      "Human-friendly remote interactive shells")
    (description
      "Documentation at https://melpa.org/#/friendly-remote-shell")
    (license #f)))

(define-public emacs-friendly-shell
  (package
    (name "emacs-friendly-shell")
    (version "20230916.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-shell.git")
               (commit
                 "5cafa3f6313ce04a47c8996ea1ac6b617d155d46")))
        (sha256
          (base32
            "1f3wdddk178xwklf6xxnxq2sqb3fw6rx07xwdw6crkz6d7pjqikr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-with-shell-interpreter))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "friendly-shell-command.el"
            "friendly-remote-shell.el"))))
    (home-page
      "https://github.com/p3r7/friendly-shell")
    (synopsis "Better shell-mode API")
    (description
      "Documentation at https://melpa.org/#/friendly-shell")
    (license #f)))

(define-public emacs-friendly-shell-command
  (package
    (name "emacs-friendly-shell-command")
    (version "20230916.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-shell.git")
               (commit
                 "5cafa3f6313ce04a47c8996ea1ac6b617d155d46")))
        (sha256
          (base32
            "1f3wdddk178xwklf6xxnxq2sqb3fw6rx07xwdw6crkz6d7pjqikr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-with-shell-interpreter))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "friendly-shell.el"
            "friendly-remote-shell.el"))))
    (home-page
      "https://github.com/p3r7/friendly-shell")
    (synopsis "Better shell-command API")
    (description
      "Documentation at https://melpa.org/#/friendly-shell-command")
    (license #f)))

(define-public emacs-friendly-tramp-path
  (package
    (name "emacs-friendly-tramp-path")
    (version "20200502.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/friendly-tramp-path.git")
               (commit
                 "be572b8953b9e5a3a35c30bb64c2936d3e9802ba")))
        (sha256
          (base32
            "0w99py469ylkg9jg9fdxalv3axd57ld9rgwhgfy1r8rpp7xch7pn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/p3r7/prf-tramp")
    (synopsis
      "Human-friendly TRAMP path construction")
    (description
      "Documentation at https://melpa.org/#/friendly-tramp-path")
    (license #f)))

(define-public emacs-frimacs
  (package
    (name "emacs-frimacs")
    (version "20230805.1731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pdo/frimacs.git")
               (commit
                 "0ff73440dcaced28cf35e5e542c8936702395185")))
        (sha256
          (base32
            "0qnxsggq14fs06f70sm9b5wv799hqnqqp769b5rvv950qck0hfhq"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         ("data" "data/*.dat")
         (:exclude "frimacs-build-utils.el"))))
    (home-page "https://github.com/pdo/frimacs")
    (synopsis
      "An environment for the FriCAS computer algebra system")
    (description
      "Documentation at https://melpa.org/#/frimacs")
    (license #f)))

(define-public emacs-fringe-current-line
  (package
    (name "emacs-fringe-current-line")
    (version "20140111.411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyanagi/fringe-current-line.git")
               (commit
                 "0ef000bac76abae30601222e6f06c7d133ab4942")))
        (sha256
          (base32
            "0zwlnzbi91hkfz1jgj9s9pxwi21s21cwp6psdm687wj2a3wy4231"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kyanagi/fringe-current-line/raw/master/fringe-current-line.el")
    (synopsis "show current line on the fringe.")
    (description
      "Documentation at https://melpa.org/#/fringe-current-line")
    (license #f)))

(define-public emacs-fringe-helper
  (package
    (name "emacs-fringe-helper")
    (version "20140620.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/fringe-helper.el.git")
               (commit
                 "ef4a9c023bae18ec1ddd7265f1f2d6d2e775efdd")))
        (sha256
          (base32
            "0ra9rc53l1gvkqank8apasl3r7wz2yfjrcvmfk3wpxhh24ppxv9d"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/fringe-helper/")
    (synopsis "helper functions for fringe bitmaps")
    (description
      "Documentation at https://melpa.org/#/fringe-helper")
    (license #f)))

(define-public emacs-frog-jump-buffer
  (package
    (name "emacs-frog-jump-buffer")
    (version "20221114.141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/frog-jump-buffer.git")
               (commit
                 "ab830cb7a5af9429866ba88fb37589a0366d8bf2")))
        (sha256
          (base32
            "0996896n7135xzxxhh50phhb1y06rcycj2gxx7p26p7aa72ambc3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-avy emacs-dash emacs-frog-menu))
    (home-page
      "https://github.com/waymondo/frog-jump-buffer")
    (synopsis
      "The fastest buffer-jumping Emacs lisp package around.")
    (description
      "Documentation at https://melpa.org/#/frog-jump-buffer")
    (license #f)))

(define-public emacs-frontside-javascript
  (package
    (name "emacs-frontside-javascript")
    (version "20220315.1057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thefrontside/frontmacs.git")
               (commit
                 "18816534a977fbd28848389b58c22b6538cfdeec")))
        (sha256
          (base32
            "1nhsjkp0dm9875a1w86vvfwd1gsssvcmk144wvflvw40br9ss7h1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-add-node-modules-path
            emacs-company
            emacs-flycheck
            emacs-js2-mode
            emacs-js2-refactor
            emacs-rjsx-mode
            emacs-tide
            emacs-web-mode
            emacs-lsp-mode))
    (arguments
      '(#:files
        ("packages/javascript/*.el"
         (:exclude "packages/javascript/*-test.el"))))
    (home-page
      "https://github.com/thefrontside/frontmacs")
    (synopsis "JS  development that just work™️")
    (description
      "Documentation at https://melpa.org/#/frontside-javascript")
    (license #f)))

(define-public emacs-fsbot-data-browser
  (package
    (name "emacs-fsbot-data-browser")
    (version "20220830.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Benaiah/fsbot-data-browser.git")
               (commit
                 "27455860fec01ca47bf98b85f093cc24b9852bef")))
        (sha256
          (base32
            "10l6s1jfhrbsxi60la10viqnwsfdxn7gxnbbsjyimpda9kh2ny8y"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/benaiah/fsbot-data-browser")
    (synopsis
      "browse the fsbot database using tabulated-list-mode")
    (description
      "Documentation at https://melpa.org/#/fsbot-data-browser")
    (license #f)))

(define-public emacs-fsharp-mode
  (package
    (name "emacs-fsharp-mode")
    (version "20230622.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fsharp/emacs-fsharp-mode.git")
               (commit
                 "b4d31c3da018cfbb3d1f9e6fd416d8777f0835bd")))
        (sha256
          (base32
            "1rhyc7yhpi4bjzq5f6bm3v4ab16prl6fvp9kjif6lq6ihh8xb520"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults (:exclude "eglot-fsharp.el"))))
    (home-page "unspecified")
    (synopsis
      "Support for the F# programming language")
    (description
      "Documentation at https://melpa.org/#/fsharp-mode")
    (license #f)))

(define-public emacs-fstar-mode
  (package
    (name "emacs-fstar-mode")
    (version "20230506.1606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/FStarLang/fstar-mode.el.git")
               (commit
                 "7d353de89248f1df6edd1f5672ab4d39f5d1353d")))
        (sha256
          (base32
            "0ivq0m7nfdbfdmlbrz48ysi29868alzmbjm1ljyqzd8q397h1wll"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-company
            emacs-quick-peek
            emacs-yasnippet
            emacs-flycheck
            emacs-company-quickhelp))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/FStarLang/fstar-mode.el")
    (synopsis "Support for F* programming")
    (description
      "Documentation at https://melpa.org/#/fstar-mode")
    (license #f)))

(define-public emacs-fuel
  (package
    (name "emacs-fuel")
    (version "20230824.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/factor/factor.git")
               (commit
                 "e10b64dbc53a8583098e73580a1eb9ff4ce0c709")))
        (sha256
          (base32
            "0fscknmhqc1lzjrv920wlch33vbxkys4290n51r9mrgz830lg41s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/fuel/*.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for the Factor programming language.")
    (description
      "Documentation at https://melpa.org/#/fuel")
    (license #f)))

(define-public emacs-fuff
  (package
    (name "emacs-fuff")
    (version "20170202.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joelmo/fuff.git")
               (commit
                 "278e849913df87bd8756c59382282d87474802c3")))
        (sha256
          (base32
            "12s25c0abvghkhfbxcf77d2dc20y3xn9df7mfk8mkfwnlwdss2ga"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joelmo/fuff")
    (synopsis
      "Find files with findutils, recursively")
    (description
      "Documentation at https://melpa.org/#/fuff")
    (license #f)))

(define-public emacs-full-ack
  (package
    (name "emacs-full-ack")
    (version "20140223.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/full-ack.git")
               (commit
                 "761d846e105b150f8e6d13d7a8983f0248313a45")))
        (sha256
          (base32
            "0bjny4ryrs788myhiaf3ir99vadf2v4swa5gkz9i36a7j6wzpgk5"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/full-ack/")
    (synopsis "a front-end for ack")
    (description
      "Documentation at https://melpa.org/#/full-ack")
    (license #f)))

(define-public emacs-fullframe
  (package
    (name "emacs-fullframe")
    (version "20210226.1057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tomterl/fullframe")
               (commit
                 "886b831c001b44ec95aec4ff36e8bc1b3003c786")))
        (sha256
          (base32
            "1q276p3bagx9fhzyzjmz449f95k1z287x4p34980d06klj11lrab"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Generalized automatic execution in a single frame")
    (description
      "Documentation at https://melpa.org/#/fullframe")
    (license #f)))

(define-public emacs-function-args
  (package
    (name "emacs-function-args")
    (version "20220516.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/function-args.git")
               (commit
                 "beba049751fed78666c87bd146a6f1cf149bb819")))
        (sha256
          (base32
            "1j92ll2afvcp891fxra3sawxg000cs3ra01wxksiil2dg5zpzzkn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/abo-abo/function-args")
    (synopsis "C++ completion for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/function-args")
    (license #f)))

(define-public emacs-fuo
  (package
    (name "emacs-fuo")
    (version "20190812.927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/feeluown/emacs-fuo.git")
               (commit
                 "0e4122f94a336a50c02bc96652d25ac3d74bedeb")))
        (sha256
          (base32
            "1cv30sgjngnl0274viaf42dw9sr0v1kdw31na7lzznqx6q8laz47"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/cosven/emacs-fuo")
    (synopsis "feeluown client.")
    (description
      "Documentation at https://melpa.org/#/fuo")
    (license #f)))

(define-public emacs-furl
  (package
    (name "emacs-furl")
    (version "20150509.316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/furl-el.git")
               (commit
                 "014438271e0ef27333dfcd599cb247f12a20d870")))
        (sha256
          (base32
            "0wrmbvx0risdjkaxqmh4li6iwvg4635cdpjvw32k2wkdsyn2dlsb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Friendly URL retrieval")
    (description
      "Documentation at https://melpa.org/#/furl")
    (license #f)))

(define-public emacs-fussy
  (package
    (name "emacs-fussy")
    (version "20230921.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/fussy.git")
               (commit
                 "2ff8317c403b15d3c898f7dcd8511b6d16f92c1d")))
        (sha256
          (base32
            "10xf40xsl3x91d2b4c4vqg4cb99izv8n0gcic5nybdxcm7f8sfpb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flx))
    (home-page "https://github.com/jojojames/fussy")
    (synopsis "Fuzzy completion style using `flx'")
    (description
      "Documentation at https://melpa.org/#/fussy")
    (license #f)))

(define-public emacs-futhark-mode
  (package
    (name "emacs-futhark-mode")
    (version "20230511.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diku-dk/futhark-mode.git")
               (commit
                 "8e830a65983c5175b0116360eddefa3ae4fea897")))
        (sha256
          (base32
            "13skbn103411s06fz3vppcnlq56vp35m7slnxw3azf8zq4bb7m4k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/diku-dk/futhark-mode")
    (synopsis
      "major mode for editing Futhark source files")
    (description
      "Documentation at https://melpa.org/#/futhark-mode")
    (license #f)))

(define-public emacs-fuz
  (package
    (name "emacs-fuz")
    (version "20200104.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rustify-emacs/fuz.el.git")
               (commit
                 "fee874aa35d2ee6b12b836290b5c8eaa44175a28")))
        (sha256
          (base32
            "1xswm8my29i4fddy64k21b1vclbr5fjb0pisb4hs8ynkk5w1kw2a"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("fuz*.el" "Cargo.toml" "Cargo.lock" "src")))
    (home-page "https://github.com/cireu/fuz.el")
    (synopsis
      "Fast and precise fuzzy scoring/matching utils")
    (description
      "Documentation at https://melpa.org/#/fuz")
    (license #f)))

(define-public emacs-fuzzy
  (package
    (name "emacs-fuzzy")
    (version "20221231.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/auto-complete/fuzzy-el.git")
               (commit
                 "fc7ca5bc81f1798596bc1d254d74a5ea95edc432")))
        (sha256
          (base32
            "0i0wpsbr3d2bv9pjkdx6a5188csw2vi53rprk1j05bv0wcm81ark"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/auto-complete/fuzzy-el")
    (synopsis "Fuzzy Matching")
    (description
      "Documentation at https://melpa.org/#/fuzzy")
    (license #f)))

(define-public emacs-fuzzy-finder
  (package
    (name "emacs-fuzzy-finder")
    (version "20210906.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/fuzzy-finder-el.git")
               (commit
                 "915a281fc8e50df84dcc205f9357e8314d60fa54")))
        (sha256
          (base32
            "15b6nbkv8xpvin8i1443s1mnpag5p33asgwpxijrmwp3xm2xkyl6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/fuzzy-finder-el")
    (synopsis "Fuzzy Finder App Integration")
    (description
      "Documentation at https://melpa.org/#/fuzzy-finder")
    (license #f)))

(define-public emacs-fvwm-mode
  (package
    (name "emacs-fvwm-mode")
    (version "20230214.2149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theBlackDragon/fvwm-mode.git")
               (commit
                 "574c0370f6199c9a1492923bf0d35fdd26738d24")))
        (sha256
          (base32
            "100al4f4jchg9mmq6in2dv948msx0j56qd3qzjmb5az7hy19ncnj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/theBlackDragon/fvwm-mode")
    (synopsis
      "A major mode for editing Fvwm configuration files")
    (description
      "Documentation at https://melpa.org/#/fvwm-mode")
    (license #f)))

(define-public emacs-fwb-cmds
  (package
    (name "emacs-fwb-cmds")
    (version "20230213.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/fwb-cmds.git")
               (commit
                 "1b375c6890de61eaccc97c92f2b46de6f9205417")))
        (sha256
          (base32
            "0wqkd8p04hklp1hysppp83rx3d32qv62ln5baf725f3xz0lilv21"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/fwb-cmds")
    (synopsis
      "misc frame, window and buffer commands")
    (description
      "Documentation at https://melpa.org/#/fwb-cmds")
    (license #f)))

(define-public emacs-fxrd-mode
  (package
    (name "emacs-fxrd-mode")
    (version "20170728.1801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/msherry/fxrd-mode.git")
               (commit
                 "18a603474abb5a786a8d9f20c283d5f7beed3540")))
        (sha256
          (base32
            "1yprlpxxh7bbxg8filgb00lqqlavbz03h7hqf4280aiypkwi0y86"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments
      '(#:files (:defaults "fxrd-modes/*el")))
    (home-page
      "https://github.com/msherry/fxrd-mode")
    (synopsis
      "Major mode for editing fixed field width files")
    (description
      "Documentation at https://melpa.org/#/fxrd-mode")
    (license #f)))

(define-public emacs-fyure
  (package
    (name "emacs-fyure")
    (version "20130216.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/fyure.git")
               (commit
                 "b6977f1eb148e8b63259f7233b55bb050e44d9b8")))
        (sha256
          (base32
            "08x5li0mshrlamr7vswy7xh358bqhh3pngjr4ckswfi0l2r5fjbd"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("fyure.el" "fyure.py")))
    (home-page "unspecified")
    (synopsis
      "An interface to fix Japanese hyoki-yure")
    (description
      "Documentation at https://melpa.org/#/fyure")
    (license #f)))

(define-public emacs-fzf
  (package
    (name "emacs-fzf")
    (version "20230403.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bling/fzf.el.git")
               (commit
                 "3a55b983921c620fb5a2cc811f42aa4daaad8266")))
        (sha256
          (base32
            "1apf2w783gadbl93il6hwidwadnkw5wlkyby29gz3x1rg6v42x8h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bling/fzf.el")
    (synopsis "A front-end for fzf.")
    (description
      "Documentation at https://melpa.org/#/fzf")
    (license #f)))

(define-public emacs-gameoflife
  (package
    (name "emacs-gameoflife")
    (version "20200614.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/gameoflife.git")
               (commit
                 "2483f3d98dbcf7f1633f551cc3691f5659b4b942")))
        (sha256
          (base32
            "1a57fc8ylrdlqlywp81b71jd93hiwkxy6gxpi8358d6d4czslvq7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/gameoflife")
    (synopsis
      "Screensaver running Conway's Game of Life")
    (description
      "Documentation at https://melpa.org/#/gameoflife")
    (license #f)))

(define-public emacs-gams-ac
  (package
    (name "emacs-gams-ac")
    (version "20180423.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShiroTakeda/gams-ac.git")
               (commit
                 "66d04ff36033f54205c19bc1d893e926d4dbf02e")))
        (sha256
          (base32
            "1hjbzwgzwqwpyfm8db1r1q14bbk42hrl5469gqfzjq0423wy7szw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-gams-mode))
    (home-page
      "https://github.com/ShiroTakeda/gams-ac")
    (synopsis
      "auto-complete source file for GAMS mode")
    (description
      "Documentation at https://melpa.org/#/gams-ac")
    (license #f)))

(define-public emacs-gams-mode
  (package
    (name "emacs-gams-mode")
    (version "20231005.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShiroTakeda/gams-mode.git")
               (commit
                 "0e7382bf9613329d2e411ced73536205326a910b")))
        (sha256
          (base32
            "01hbkylql40p4yczckc22gm3g5qsh4aw1xcp3vmj8bc9n63k77zj"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("gams-mode.el"
         "gams-logo.xpm"
         "gams-commands.txt")))
    (home-page
      "http://shirotakeda.org/en/gams/gams-mode/")
    (synopsis
      "Major mode for General Algebraic Modeling System (GAMS)")
    (description
      "Documentation at https://melpa.org/#/gams-mode")
    (license #f)))

(define-public emacs-gandalf-theme
  (package
    (name "emacs-gandalf-theme")
    (version "20130809.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/gandalf-theme-emacs.git")
               (commit
                 "4e472fc851431458537d458d09c1f5895e338536")))
        (sha256
          (base32
            "0sn3y1ilbg532mg941qmzipvzq86q31x86ypaf0h0m4015r7l59v"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Gandalf color theme")
    (description
      "Documentation at https://melpa.org/#/gandalf-theme")
    (license #f)))

(define-public emacs-gap-mode
  (package
    (name "emacs-gap-mode")
    (version "20230802.108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gvol/gap-mode.git")
               (commit
                 "643f8a26ea1fe6aa3390c95e257718ed6b0b2149")))
        (sha256
          (base32
            "1yrdgm72wii9i9sa6hdmg7im0yg0jagyf9jg5x56csiz3dh81ywz"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "emacs.gaprc")))
    (home-page "https://gitlab.com/gvol/gap-mode")
    (synopsis
      "Major mode for editing files in the GAP programming language.")
    (description
      "Documentation at https://melpa.org/#/gap-mode")
    (license #f)))

(define-public emacs-gather
  (package
    (name "emacs-gather")
    (version "20141230.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-gather.git")
               (commit
                 "50809fbc22d70a1c724c2dd99ac5a1f818ffeb6b")))
        (sha256
          (base32
            "0j0dg7nl9kmanayvw0712x5c5x9h48qmqdsyi0pijvgmv8l5slg5"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("gather.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el")
    (synopsis "Gather string in buffer.")
    (description
      "Documentation at https://melpa.org/#/gather")
    (license #f)))

(define-public emacs-gcmh
  (package
    (name "emacs-gcmh")
    (version "20201116.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/koral/gcmh.git")
               (commit
                 "0089f9c3a6d4e9a310d0791cf6fa8f35642ecfd9")))
        (sha256
          (base32
            "0yh1ap8phv3x44rp0yr6z884xqw2apanbx4c0acqglvj0gaaqx25"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/koral/gcmh")
    (synopsis "the Garbage Collector Magic Hack")
    (description
      "Documentation at https://melpa.org/#/gcmh")
    (license #f)))

(define-public emacs-gcode-mode
  (package
    (name "emacs-gcode-mode")
    (version "20230823.2141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/gcode-mode.el.git")
               (commit
                 "4b54553a698d81e52dde14037df94774c7f30b95")))
        (sha256
          (base32
            "13nafw4rz1xfzcag0390xxs1nqadplvkrkiw72h0i8y2kwa9yya3"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/gcode-mode.el")
    (synopsis "Simple G-Code major mode")
    (description
      "Documentation at https://melpa.org/#/gcode-mode")
    (license #f)))

(define-public emacs-gdscript-mode
  (package
    (name "emacs-gdscript-mode")
    (version "20231024.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/godotengine/emacs-gdscript-mode.git")
               (commit
                 "8a28276daaa23f10e986367b80dc751c5d26829e")))
        (sha256
          (base32
            "1hwagkbfrrd5bgwykl6hq56jmg0264hd6iz1nljl3n06k1gm3p90"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/godotengine/emacs-gdscript-mode/")
    (synopsis
      "Major mode for Godot's GDScript language")
    (description
      "Documentation at https://melpa.org/#/gdscript-mode")
    (license #f)))

(define-public emacs-geben
  (package
    (name "emacs-geben")
    (version "20220827.105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/geben.git")
               (commit
                 "1779492d73534e18fbcfdd7c6cc175859527d019")))
        (sha256
          (base32
            "161916kz125ah5msh8c02inmlr3rr858k6ywb18x27pnqx6n8lvg"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ahungry/geben")
    (synopsis
      "DBGp protocol frontend, a script debugger")
    (description
      "Documentation at https://melpa.org/#/geben")
    (license #f)))

(define-public emacs-geben-helm-projectile
  (package
    (name "emacs-geben-helm-projectile")
    (version "20170524.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/geben-helm-projectile.git")
               (commit
                 "31ce0faca5dcc71924884f03fd5a7a25d00ccd9b")))
        (sha256
          (base32
            "0a1srhwfbgkvndjfi9irg5s6snlxyqrw1vwyqg1sn8aqnbpgib04"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-geben emacs-helm-projectile))
    (home-page
      "https://github.com/ahungry/geben-helm-projectile")
    (synopsis "Integrate helm-projectile with geben")
    (description
      "Documentation at https://melpa.org/#/geben-helm-projectile")
    (license #f)))

(define-public emacs-geeknote
  (package
    (name "emacs-geeknote")
    (version "20220213.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/avendael/emacs-geeknote.git")
               (commit
                 "ce2738aebeeda35f9d31027e9b7bad0813b975c3")))
        (sha256
          (base32
            "18z0m2qlsr9bs1m5wp88p7snd25wxz8i829z8ybkny6ax1vfi0y1"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/avendael/emacs-geeknote")
    (synopsis
      "Use Evernote in Emacs through geeknote")
    (description
      "Documentation at https://melpa.org/#/geeknote")
    (license #f)))

(define-public emacs-geiser
  (package
    (name "emacs-geiser")
    (version "20231001.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/geiser.git")
               (commit
                 "172376d5cea32925d87f3f7b745c125038135e69")))
        (sha256
          (base32
            "1yy7xvwkp45ivqa957wsjm82s89xinzz6nkdy4fd9d6d9279al3w"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("elisp/*.el" "doc/dir" "doc/geiser.texi")))
    (home-page "https://gitlab.com/emacs-geiser/")
    (synopsis
      "GNU Emacs and Scheme talk to each other")
    (description
      "Documentation at https://melpa.org/#/geiser")
    (license #f)))

(define-public emacs-geiser-chez
  (package
    (name "emacs-geiser-chez")
    (version "20230707.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/chez.git")
               (commit
                 "605a81ff7b2d2b275a3ec68e3ce7e5b50f85014d")))
        (sha256
          (base32
            "0rny2wj90fdq5mar8cf3pcw1spld9s8nzlqrl3g0ivfrpgw6ar49"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/chez")
    (synopsis "Chez and Geiser talk to each other")
    (description
      "Documentation at https://melpa.org/#/geiser-chez")
    (license #f)))

(define-public emacs-geiser-chibi
  (package
    (name "emacs-geiser-chibi")
    (version "20211204.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/chibi.git")
               (commit
                 "5a6a5a580ea45cd4974df21629a8d50cbe3d6e99")))
        (sha256
          (base32
            "071m2cvwanra9rd8vmybw8xd4k9a23x02cyy12f7qyjy5fp9s968"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/chibi")
    (synopsis
      "Chibi Scheme's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-chibi")
    (license #f)))

(define-public emacs-geiser-chicken
  (package
    (name "emacs-geiser-chicken")
    (version "20220717.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/chicken.git")
               (commit
                 "a480598b5908c95bc8d3178a48f13e9072a9235b")))
        (sha256
          (base32
            "0jb0zlg82axp44iy51w7fh96z3pmn2k1idipznhw90hkr3wkiiqw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/chicken")
    (synopsis
      "Chicken's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-chicken")
    (license #f)))

(define-public emacs-geiser-gambit
  (package
    (name "emacs-geiser-gambit")
    (version "20220208.1356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/gambit.git")
               (commit
                 "381d74ca5059b44fe3d8b5daf42214019c6d1a88")))
        (sha256
          (base32
            "1dcrhm1am2dam94a0m7pjkiygah1lw53y2hq0870x1ji4gzgnkl8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/gambit")
    (synopsis
      "Gambit's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-gambit")
    (license #f)))

(define-public emacs-geiser-gauche
  (package
    (name "emacs-geiser-gauche")
    (version "20220503.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/gauche.git")
               (commit
                 "8ff743f6416f00751e24aef8b9791501a40f5421")))
        (sha256
          (base32
            "1ppracwfl1snq0ifdlyxpdlv7fbn3pbxm1hd1ihgqivii5nbya9r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults "geiser-gauche.scm")))
    (home-page
      "https://gitlab.com/emacs-geiser/gauche")
    (synopsis "Gauche scheme support for Geiser")
    (description
      "Documentation at https://melpa.org/#/geiser-gauche")
    (license #f)))

(define-public emacs-geiser-guile
  (package
    (name "emacs-geiser-guile")
    (version "20230425.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/guile.git")
               (commit
                 "ee33af6b4ef8fdaccbdf93c62b50fe17c07a1ade")))
        (sha256
          (base32
            "00jfv96rrjb4jw6yyqpy6dhwv4zrfsm27q2xhl246fbbpi6y8nds"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/guile")
    (synopsis "Guile and Geiser talk to each other")
    (description
      "Documentation at https://melpa.org/#/geiser-guile")
    (license #f)))

(define-public emacs-geiser-kawa
  (package
    (name "emacs-geiser-kawa")
    (version "20210920.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/kawa.git")
               (commit
                 "5896b19642923f74f718eb68d447560b2d26d797")))
        (sha256
          (base32
            "1vv8i3qqk8690p4cpklvy7g3alh5fb3v7h3b91dj1gardzf0vwpf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files
        ("elisp/*.el"
         "pom.xml"
         ".mvn"
         "mvnw"
         "mvnw.cmd"
         "src")))
    (home-page
      "https://gitlab.com/emacs-geiser/kawa")
    (synopsis "Kawa scheme support for Geiser")
    (description
      "Documentation at https://melpa.org/#/geiser-kawa")
    (license #f)))

(define-public emacs-geiser-mit
  (package
    (name "emacs-geiser-mit")
    (version "20211204.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/mit.git")
               (commit
                 "4e90e9ae815e89f3540fb9644e6016c663ef5765")))
        (sha256
          (base32
            "1j06y77nq6q33fhvf4kq0md4xmcrvimiycjgv35cpkxvkcprfafa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files (:defaults ("src" "src/*"))))
    (home-page "https://gitlab.com/emacs-geiser/mit")
    (synopsis
      "MIT/GNU Scheme's implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-mit")
    (license #f)))

(define-public emacs-geiser-racket
  (package
    (name "emacs-geiser-racket")
    (version "20210421.125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/racket.git")
               (commit
                 "22e56ce80389544d3872cf4beb4008fb514b2218")))
        (sha256
          (base32
            "1aqsvmk1hi7kc3j4h8xlza7c6rwm71v98fv5wpw8kmyj9vsp49wx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments
      '(#:files
        (:defaults ("src" "src/*" "bin" "bin/*"))))
    (home-page
      "https://gitlab.com/emacs-geiser/racket")
    (synopsis "Support for Racket in Geiser")
    (description
      "Documentation at https://melpa.org/#/geiser-racket")
    (license #f)))

(define-public emacs-geiser-stklos
  (package
    (name "emacs-geiser-stklos")
    (version "20231004.2013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-geiser/stklos.git")
               (commit
                 "c634fc2049f1616b772f5e9cb78c6171dcc4c34d")))
        (sha256
          (base32
            "0knzjrfkilzksqd482900wbv2p649azmgg5zb65q79mlkqf2qmxp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-geiser))
    (arguments '(#:files (:defaults "geiser.stk")))
    (home-page
      "https://gitlab.com/emacs-geiser/stklos")
    (synopsis
      "STklos Scheme implementation of the geiser protocols")
    (description
      "Documentation at https://melpa.org/#/geiser-stklos")
    (license #f)))

(define-public emacs-gemini-mode
  (package
    (name "emacs-gemini-mode")
    (version "20221127.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.carcosa.net/jmcbray/gemini.el.git")
               (commit
                 "a7dd7c6ea4e036d0d5ecc4a5d284874c400f10ba")))
        (sha256
          (base32
            "1pvlk56mhh4xh4gwzqldfk79jsjbcpivv5scd9811pv3afc30gsx"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.carcosa.net/jmcbray/gemini.el")
    (synopsis
      "A simple highlighting package for text/gemini")
    (description
      "Documentation at https://melpa.org/#/gemini-mode")
    (license #f)))

(define-public emacs-gemini-write
  (package
    (name "emacs-gemini-write")
    (version "20211114.1032")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/gemini-write-"
               version
               ".el"))
        (sha256
          (base32
            "0ix38nnhcajpjxsvbryw0pb006jswgjpx8rb9flsxmszj4dg6fdv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elpher emacs-gemini-mode))
    (home-page
      "https://alexschroeder.ch/cgit/gemini-write")
    (synopsis "Elpher for Titan")
    (description
      "Documentation at https://melpa.org/#/gemini-write")
    (license #f)))

(define-public emacs-general
  (package
    (name "emacs-general")
    (version "20230311.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/general.el.git")
               (commit
                 "7ce8db297e3de258ec43802269438ac7f1918707")))
        (sha256
          (base32
            "1qphbw42w7nvs5vf8a9vyj96jcd9br1v86c1a0cqjwyngfjlawa8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/noctuid/general.el")
    (synopsis
      "Convenience wrappers for keybindings.")
    (description
      "Documentation at https://melpa.org/#/general")
    (license #f)))

(define-public emacs-genrnc
  (package
    (name "emacs-genrnc")
    (version "20140612.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-genrnc.git")
               (commit
                 "da75b1966a73ad215ec2ced4522c25f4d0bf1f9a")))
        (sha256
          (base32
            "08cw1fa25kbhbq2sp1cpn90bz38i9hjfdj93xf6wvki55b52s0nn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deferred
            emacs-concurrent
            emacs-log4e
            emacs-yaxception))
    (arguments '(#:files ("*.el" "*.jar" "*.xsl")))
    (home-page
      "https://github.com/aki2o/emacs-genrnc")
    (synopsis
      "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD.")
    (description
      "Documentation at https://melpa.org/#/genrnc")
    (license #f)))

(define-public emacs-geoip
  (package
    (name "emacs-geoip")
    (version "20200310.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/geoip.el.git")
               (commit
                 "25eb1278788b942c38405c233d3614a1de92ddea")))
        (sha256
          (base32
            "0nbgbqxmpq6c487yx4igph58zmaslqn7z92x9b1xymw58fnlyrm6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/geoip.el")
    (synopsis
      "Find out where an IP address is located via GeoIP2")
    (description
      "Documentation at https://melpa.org/#/geoip")
    (license #f)))

(define-public emacs-geolocation
  (package
    (name "emacs-geolocation")
    (version "20200317.1559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/geolocation.el.git")
               (commit
                 "bc7848832eb0352e3a71f4b9d89d917fe12d18be")))
        (sha256
          (base32
            "1rmnpw5jn06ajij3wq2dfk4blklb16j9gwdncr0c38xsnxm07nv4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred emacs-deferred))
    (home-page
      "https://github.com/gonewest818/geolocation.el")
    (synopsis "Get your location on Earth")
    (description
      "Documentation at https://melpa.org/#/geolocation")
    (license #f)))

(define-public emacs-german-holidays
  (package
    (name "emacs-german-holidays")
    (version "20181213.644")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rudolfochrist/german-holidays.git")
               (commit
                 "a8462dffccaf2b665f2032e646b5370e993a386a")))
        (sha256
          (base32
            "1rf8p42pl7jmmdiibfcamlbr3kg6kslffv8vbpwn20xm2ii13rxz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rudolfochrist/german-holidays")
    (synopsis "German holidays for Emacs calendar")
    (description
      "Documentation at https://melpa.org/#/german-holidays")
    (license #f)))

(define-public emacs-germanium
  (package
    (name "emacs-germanium")
    (version "20220716.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matsuyoshi30/germanium-el.git")
               (commit
                 "7292aa6870cf8b0acb34a8750da32b44d83cd65c")))
        (sha256
          (base32
            "029hfzzdpx89ggbcs53l05yk9v6jwschy7vn4w48zifg4svqdva2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/matsuyoshi30/germanium-el")
    (synopsis
      "Generate image from source code using germanium")
    (description
      "Documentation at https://melpa.org/#/germanium")
    (license #f)))

(define-public emacs-gerrit
  (package
    (name "emacs-gerrit")
    (version "20230102.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisch/gerrit.el.git")
               (commit
                 "76cc426d62f1b4964159706eafa8f5b50b8427ea")))
        (sha256
          (base32
            "0wzb4z4hqx7n5nn7jsgzvjqxd65w9s6fnasz9mpkh9vfvv3zngjg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-s emacs-dash))
    (home-page "https://github.com/thisch/gerrit.el")
    (synopsis "Gerrit client")
    (description
      "Documentation at https://melpa.org/#/gerrit")
    (license #f)))

(define-public emacs-gerrit-download
  (package
    (name "emacs-gerrit-download")
    (version "20150714.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chmouel/gerrit-download.el.git")
               (commit
                 "d568acc7c5935188c9bc19ba72719a6092d9f6fd")))
        (sha256
          (base32
            "1ch8yp0mgk57x0pny9bvkknsqj27fd1rcmpm9s7qpryrwqkp1ix4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/chmouel/gerrit-download.el")
    (synopsis
      "Show gerrit reviews in a diff buffer.")
    (description
      "Documentation at https://melpa.org/#/gerrit-download")
    (license #f)))

(define-public emacs-gf
  (package
    (name "emacs-gf")
    (version "20181028.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GrammaticalFramework/gf-emacs-mode.git")
               (commit
                 "30b3127f229e0db522c7752f6957ca01b2ea2821")))
        (sha256
          (base32
            "1znskia2rvmpag8hs4z8d4m1yzn90ibaab94xd9qyk40f53nk4nl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-ht))
    (home-page
      "https://github.com/GrammaticalFramework/gf-emacs-mode")
    (synopsis "Major mode for editing GF code")
    (description
      "Documentation at https://melpa.org/#/gf")
    (license #f)))

(define-public emacs-ggo-mode
  (package
    (name "emacs-ggo-mode")
    (version "20210310.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkjunker/ggo-mode.git")
               (commit
                 "6a7617b5af3d13029e4d680a375e8107c40d0fac")))
        (sha256
          (base32
            "1l39j3vkjszn3xkg2dk7r8k4fy4hjn0gp5n3bm6wv25wc8946dx4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Gengetopt major mode")
    (description
      "Documentation at https://melpa.org/#/ggo-mode")
    (license #f)))

(define-public emacs-ggtags
  (package
    (name "emacs-ggtags")
    (version "20230602.133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoliu/ggtags.git")
               (commit
                 "4e3630c30fb836872b5d8f2ae3e5d5ae003365d8")))
        (sha256
          (base32
            "1mgdli2kvsg3y6ynsl6547cwwg9f2q0s1cv4b74slpcvq5n1kb90"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/leoliu/ggtags")
    (synopsis
      "emacs frontend to GNU Global source code tagging system")
    (description
      "Documentation at https://melpa.org/#/ggtags")
    (license #f)))

(define-public emacs-gh
  (package
    (name "emacs-gh")
    (version "20230825.1217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/gh.el.git")
               (commit
                 "b5a8d8209340d49ad82dab22d23dae0434499fdf")))
        (sha256
          (base32
            "1vab2qdjyv4c3hfp09vbkqanfwj8ip7zi64gqbg93kf1aig1qgl9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pcache emacs-logito emacs-marshal))
    (home-page "https://github.com/sigma/gh.el")
    (synopsis "A GitHub library for Emacs")
    (description
      "Documentation at https://melpa.org/#/gh")
    (license #f)))

(define-public emacs-gh-md
  (package
    (name "emacs-gh-md")
    (version "20220316.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/gh-md.git")
               (commit
                 "e721fd5e41e682f47f2dd4ce26ef2ba28c7fa0b5")))
        (sha256
          (base32
            "1xnfq6bbc5bgkd0mzkr7r66sd85qfn859swpsp6sr0xfl8cq12wm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/gh-md.el")
    (synopsis "Render markdown using the Github api")
    (description
      "Documentation at https://melpa.org/#/gh-md")
    (license #f)))

(define-public emacs-gh-notify
  (package
    (name "emacs-gh-notify")
    (version "20230117.317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anticomputer/gh-notify.git")
               (commit
                 "e1afdd49deb8ddf1a988e8d3fa699b06dfa92f5f")))
        (sha256
          (base32
            "0vx77b54hyx1f6qq1n57x7sn2080fdb67678jiw3c152jai99kx3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-forge))
    (home-page
      "https://github.com/anticomputer/gh-notify")
    (synopsis
      "A veneer for Magit/Forge GitHub notifications")
    (description
      "Documentation at https://melpa.org/#/gh-notify")
    (license #f)))

(define-public emacs-ghc-imported-from
  (package
    (name "emacs-ghc-imported-from")
    (version "20141124.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/ghc-imported-from-el.git")
               (commit
                 "fcff08628a19f5d26151564659218cc677779b79")))
        (sha256
          (base32
            "1ywwyc2kz1c1s26c412nmzh55cinh84cfiazyyi3jsy5zzwhrbhi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Haskell documentation lookup with ghc-imported-from")
    (description
      "Documentation at https://melpa.org/#/ghc-imported-from")
    (license #f)))

(define-public emacs-ghci-completion
  (package
    (name "emacs-ghci-completion")
    (version "20151125.1257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/manzyuk/ghci-completion.git")
               (commit
                 "c47e23d585d2a3c7b13aac163693fdc4f2bb90e5")))
        (sha256
          (base32
            "17fl3k2sqiavbv3bp6rnp3p89j6pnpkkp7wi26pzzk4675r5k45q"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Completion for GHCi commands in inferior-haskell buffers")
    (description
      "Documentation at https://melpa.org/#/ghci-completion")
    (license #f)))

(define-public emacs-gherkin-mode
  (package
    (name "emacs-gherkin-mode")
    (version "20171224.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/candera/gherkin-mode.git")
               (commit
                 "0313492e7da152f0aa73ddf96c0287ded8f51253")))
        (sha256
          (base32
            "15m9a2dcxgmbj0ni2qcxg3vpxvs50pyjvlacm3xd2xhm9wd484hr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "An emacs major mode for editing gherkin files.")
    (description
      "Documentation at https://melpa.org/#/gherkin-mode")
    (license #f)))

(define-public emacs-ghost-blog
  (package
    (name "emacs-ghost-blog")
    (version "20171023.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/javaguirre/ghost-blog-emacs.git")
               (commit
                 "71b358643cc9a2db1bf752281ff94aba9b59e4cc")))
        (sha256
          (base32
            "1fkh7zslkdi7a4x2xrk73acmigbi7yx9k6iaj75zbjfd49gyqj13"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page
      "https://github.com/javaguirre/ghost-blog")
    (synopsis "A package to manage Ghost blog")
    (description
      "Documentation at https://melpa.org/#/ghost-blog")
    (license #f)))

(define-public emacs-ghq
  (package
    (name "emacs-ghq")
    (version "20230510.332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lafrenierejm/emacs-ghq.git")
               (commit
                 "e9d7346c693af6b9473fa8ca3abc729692f582b1")))
        (sha256
          (base32
            "0f6rrbhccajpfwix3a4djb5fcl73d8yj3bmi3kw5ya75z9gcw12p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/lafrenierejm/emacs-ghq")
    (synopsis "Ghq interface for emacs")
    (description
      "Documentation at https://melpa.org/#/ghq")
    (license #f)))

(define-public emacs-ghub
  (package
    (name "emacs-ghub")
    (version "20231026.1306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/ghub.git")
               (commit
                 "0d7c81eee3ba0c6e029605e545173721c39947d7")))
        (sha256
          (base32
            "1mz4kkrs8b3n7gra3j5gy74awbwnk91nph33r2wql7a7zpz3qizc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-treepy))
    (home-page "https://github.com/magit/ghub")
    (synopsis "Client libraries for Git forge APIs.")
    (description
      "Documentation at https://melpa.org/#/ghub")
    (license #f)))

(define-public emacs-ghub+
  (package
    (name "emacs-ghub+")
    (version "20191229.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/ghub-plus.git")
               (commit
                 "b1adef2402d7599911d4dd447a987a0cea04e6fe")))
        (sha256
          (base32
            "0bzri6s5mwvgir9smkz68d5cgcf4glpdmcj8dz8rjxziwrg6k5bz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ghub emacs-apiwrap))
    (home-page
      "https://github.com/vermiculus/ghub-plus")
    (synopsis
      "a thick GitHub API client built on ghub")
    (description
      "Documentation at https://melpa.org/#/ghub+")
    (license #f)))

(define-public emacs-gif-screencast
  (package
    (name "emacs-gif-screencast")
    (version "20230728.1144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/Ambrevar/emacs-gif-screencast.git")
               (commit
                 "6798656d3d3107d16e30cc26bc3928b00e50c1ca")))
        (sha256
          (base32
            "03nhqk52wa74dpy31jxlj24cc4ym251v08cdv0zsdnmj7fl3jp2d"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/ambrevar/emacs-gif-screencast")
    (synopsis "One-frame-per-action GIF recording")
    (description
      "Documentation at https://melpa.org/#/gif-screencast")
    (license #f)))

(define-public emacs-gift-mode
  (package
    (name "emacs-gift-mode")
    (version "20210528.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csrhodes/gift-mode.git")
               (commit
                 "c93354e8fe1173b22f398f17b127875807f15b87")))
        (sha256
          (base32
            "1d974s7i2hi8yxdng2l02pfn2vkv65jzk5lm9p6if2myf5xbwis5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/csrhodes/gift-mode")
    (synopsis
      "major mode for editing GIFT format quizzes")
    (description
      "Documentation at https://melpa.org/#/gift-mode")
    (license #f)))

(define-public emacs-gildas-mode
  (package
    (name "emacs-gildas-mode")
    (version "20181022.649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smaret/gildas-mode.git")
               (commit
                 "d0c9e997e2aa0bcd9b8b7db082d69100448cb1b2")))
        (sha256
          (base32
            "11290b6daly9nn73iw0s6386hzjk3q2iywdhiazxscxaxzhx2c8c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/smaret/gildas-mode")
    (synopsis "Major mode for Gildas")
    (description
      "Documentation at https://melpa.org/#/gildas-mode")
    (license #f)))

(define-public emacs-gist
  (package
    (name "emacs-gist")
    (version "20171128.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/defunkt/gist.el.git")
               (commit
                 "314fe6ab80fae35b95f0734eceb82f72813b6f41")))
        (sha256
          (base32
            "0vbyzww9qmsvdpdc6d6wq6drlq1r9y92807fjhs0frgzmq6dg0rh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gh))
    (home-page "https://github.com/defunkt/gist.el")
    (synopsis
      "Emacs integration for gist.github.com")
    (description
      "Documentation at https://melpa.org/#/gist")
    (license #f)))

(define-public emacs-git
  (package
    (name "emacs-git")
    (version "20140128.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/git.el.git")
               (commit
                 "a3396a7027a7d986598c6a2d6d5599bac918f3da")))
        (sha256
          (base32
            "10siqf21ay6vl1r1v2c93rajzyjc67m4wq9q88pbij0z18vkq2f0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/git.el")
    (synopsis
      "An Elisp API for programmatically using Git")
    (description
      "Documentation at https://melpa.org/#/git")
    (license #f)))

(define-public emacs-git-annex
  (package
    (name "emacs-git-annex")
    (version "20220807.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/git-annex-el.git")
               (commit
                 "92f2d97c89980d2cea85850353836c68903514a1")))
        (sha256
          (base32
            "124qa11qzh5174jaidwkllbfzhi1rw9cxfc9px8bkarzqlizsnys"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/git-annex-el")
    (synopsis
      "Mode for easy editing of git-annex'd files")
    (description
      "Documentation at https://melpa.org/#/git-annex")
    (license #f)))

(define-public emacs-git-assembler-mode
  (package
    (name "emacs-git-assembler-mode")
    (version "20230611.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/git-assembler-mode.el.git")
               (commit
                 "391f507269f4f243d81ebdc1f5d43388dc54bc2f")))
        (sha256
          (base32
            "1j3911q0zdsk5kfdyaxck2hklly5s8vsnj4mwc4qa9ynbg0iyalg"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/git-assembler-mode.el")
    (synopsis "git-assembler major mode")
    (description
      "Documentation at https://melpa.org/#/git-assembler-mode")
    (license #f)))

(define-public emacs-git-attr
  (package
    (name "emacs-git-attr")
    (version "20180925.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnested/emacs-git-attr.git")
               (commit
                 "50df0630eba2a931146f676d349b29bde6b6b37b")))
        (sha256
          (base32
            "181yd1nwg5mvk8i5y49fmqzk6jp0rzx3zl50qq59d48jlj4l5f9f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arnested/emacs-git-attr")
    (synopsis "Git attributes of buffer file")
    (description
      "Documentation at https://melpa.org/#/git-attr")
    (license #f)))

(define-public emacs-git-auto-commit-mode
  (package
    (name "emacs-git-auto-commit-mode")
    (version "20200828.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/git-auto-commit-mode.git")
               (commit
                 "a6b6e0fa183be381463e2b44ef128db1b6c4234b")))
        (sha256
          (base32
            "1vdmrl6qkan3n56idgj2rm4879xc0a9s4w79fpih3w5b6r0cgaj7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ryuslash/git-auto-commit-mode")
    (synopsis
      "Emacs Minor mode to automatically commit and push")
    (description
      "Documentation at https://melpa.org/#/git-auto-commit-mode")
    (license #f)))

(define-public emacs-git-backup
  (package
    (name "emacs-git-backup")
    (version "20191209.2144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/git-backup.git")
               (commit
                 "67e38c659c918e98642171ba3f385a15182347f4")))
        (sha256
          (base32
            "1xbxm3fwfzpvkbw9h0bgrb9wxffzd1j1qj7ryzrd7bqr1p1zav2s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "http://github.com/antham/git-backup")
    (synopsis "Backup each file change using git")
    (description
      "Documentation at https://melpa.org/#/git-backup")
    (license #f)))

(define-public emacs-git-backup-ivy
  (package
    (name "emacs-git-backup-ivy")
    (version "20231030.2155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/walseb/git-backup-ivy.git")
               (commit
                 "8c825ac2fef586e2792e980003e5ae0deb908bbc")))
        (sha256
          (base32
            "1wv0z122sn3p1rs0q62bhylna28308svniwznfix54vxsjxwz1m6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-git-backup))
    (home-page
      "https://github.com/walseb/git-backup-ivy")
    (synopsis "An ivy interface to git-backup")
    (description
      "Documentation at https://melpa.org/#/git-backup-ivy")
    (license #f)))

(define-public emacs-git-blamed
  (package
    (name "emacs-git-blamed")
    (version "20161028.1926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tsgates/git-emacs.git")
               (commit
                 "cef196abf398e2dd11f775d1e6cd8690567408aa")))
        (sha256
          (base32
            "1n6x69z1s3hk6m6w8gpmqyrb2cxfzhi9w7q94d46c3z6r75v18vz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("git-blamed.el")))
    (home-page "unspecified")
    (synopsis
      "Minor mode for incremental blame for Git")
    (description
      "Documentation at https://melpa.org/#/git-blamed")
    (license #f)))

(define-public emacs-git-cliff
  (package
    (name "emacs-git-cliff")
    (version "20231101.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/git-cliff.el.git")
               (commit
                 "d353c2882fa0bec59e6541a2171e9816244eb73d")))
        (sha256
          (base32
            "0hm1pf239clp80s4abzdnlgw3vp8qwlkglaa1qzap8932p3dlscx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liuyinz/git-cliff.el")
    (synopsis
      "Generate and update changelog using git-cliff")
    (description
      "Documentation at https://melpa.org/#/git-cliff")
    (license #f)))

(define-public emacs-git-command
  (package
    (name "emacs-git-command")
    (version "20191028.333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/git-command-el.git")
               (commit
                 "a773d40da39dfb1c6ecf2b0758aa370ddea8f06d")))
        (sha256
          (base32
            "01b2h88a6fxy23p9ggwlj5vv30aw16m8fnqxx9yr9c6yv8p9f5cl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-term-run emacs-with-editor))
    (home-page
      "https://github.com/10sr/git-command-el")
    (synopsis "A Git Command-Line interface")
    (description
      "Documentation at https://melpa.org/#/git-command")
    (license #f)))

(define-public emacs-git-commit
  (package
    (name "emacs-git-commit")
    (version "20231030.2243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit
                 "02630b51896929011a420d9382779c98ecaef687")))
        (sha256
          (base32
            "06cnhwzxjpqb29km9nxjynapxiajaa87s7q32c4igq4yjp3jy0h0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-with-editor))
    (arguments
      '(#:files
        ("lisp/git-commit.el" "lisp/git-commit-pkg.el")))
    (home-page "https://github.com/magit/magit")
    (synopsis "Edit Git commit messages.")
    (description
      "Documentation at https://melpa.org/#/git-commit")
    (license #f)))

(define-public emacs-git-commit-insert-issue
  (package
    (name "emacs-git-commit-insert-issue")
    (version "20230512.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-stuff/git-commit-insert-issue.git")
               (commit
                 "df7ce0549d1db7bab27d401a351ea0d187c4a673")))
        (sha256
          (base32
            "0sqixxq4hn4z79kmsiasi3226r3prfx0rd1iaw89v4xar0cjkm5n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-s
            emacs-ghub
            emacs-bitbucket))
    (home-page
      "https://gitlab.com/emacs-stuff/git-commit-insert-issue/")
    (synopsis
      "Get issues list when typing \"Fixes #\"")
    (description
      "Documentation at https://melpa.org/#/git-commit-insert-issue")
    (license #f)))

(define-public emacs-git-dwim
  (package
    (name "emacs-git-dwim")
    (version "20170126.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/emacs-git-dwim.git")
               (commit
                 "485c732130686c2f28a026e385366006435394b9")))
        (sha256
          (base32
            "0rcrsjx4ifa9y3rd5l4498kvqkh58zx21gl7mqp053jdsqqq1yrx"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/git-dwim.el")
    (synopsis
      "Context-aware git commands such as branch handling")
    (description
      "Documentation at https://melpa.org/#/git-dwim")
    (license #f)))

(define-public emacs-git-grep
  (package
    (name "emacs-git-grep")
    (version "20200920.1751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tychoish/git-grep.el.git")
               (commit
                 "12ff6045e9b6aa42f98abd4ddc44d670268a0849")))
        (sha256
          (base32
            "0c1hfh62vdi9ly530crsz2aghapf0s2z9i3xdvfyyynr1gqs3mis"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "https://github.com/tychoish/git-grep.el")
    (synopsis "Search tools using git grep")
    (description
      "Documentation at https://melpa.org/#/git-grep")
    (license #f)))

(define-public emacs-git-gutter
  (package
    (name "emacs-git-gutter")
    (version "20220922.256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/git-gutter.git")
               (commit
                 "ec28e85d237065cb3c28db4b66d129da6d309f9c")))
        (sha256
          (base32
            "1fx3jp65ibcsv8akd8g4k701cs8yq0sg1bd2qszzfh6lvc4pblmi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/git-gutter")
    (synopsis
      "Port of Sublime Text plugin GitGutter")
    (description
      "Documentation at https://melpa.org/#/git-gutter")
    (license #f)))

(define-public emacs-git-gutter+
  (package
    (name "emacs-git-gutter+")
    (version "20151204.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nonsequitur/git-gutter-plus.git")
               (commit
                 "b7726997806d9a2da9fe84ff00ecf21d62b6f975")))
        (sha256
          (base32
            "0bhrrgdzzj8gwxjx7b2kibp1b6s0vgvykfg0n47iq49m6rqkgi5q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git-commit emacs-dash))
    (arguments '(#:files ("git-gutter+.el")))
    (home-page
      "https://github.com/nonsequitur/git-gutter-plus")
    (synopsis
      "Manage Git hunks straight from the buffer")
    (description
      "Documentation at https://melpa.org/#/git-gutter+")
    (license #f)))

(define-public emacs-git-gutter-fringe
  (package
    (name "emacs-git-gutter-fringe")
    (version "20211003.2228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/git-gutter-fringe.git")
               (commit
                 "648cb5b57faec55711803cdc9434e55a733c3eba")))
        (sha256
          (base32
            "13bqq5r8ys2mmw1ffsm6hn6fji0vq3nx3slw98c9dgbvlprkaiip"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git-gutter emacs-fringe-helper))
    (home-page
      "https://github.com/emacsorphanage/git-gutter-fringe")
    (synopsis "Fringe version of git-gutter.el")
    (description
      "Documentation at https://melpa.org/#/git-gutter-fringe")
    (license #f)))

(define-public emacs-git-gutter-fringe+
  (package
    (name "emacs-git-gutter-fringe+")
    (version "20140729.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nonsequitur/git-gutter-fringe-plus.git")
               (commit
                 "7a2f49d2455a3a872e90e5f7dd4e6b27f1d96cfc")))
        (sha256
          (base32
            "1rsj193zpblndki4khjjlwl2njxb329d42l75ki55msxifqrn4fi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git-gutter+ emacs-fringe-helper))
    (arguments '(#:files ("git-gutter-fringe+.el")))
    (home-page
      "https://github.com/nonsequitur/git-gutter-fringe-plus")
    (synopsis "Fringe version of git-gutter+.el")
    (description
      "Documentation at https://melpa.org/#/git-gutter-fringe+")
    (license #f)))

(define-public emacs-git-identity
  (package
    (name "emacs-git-identity")
    (version "20220721.912")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/git-identity.el.git")
               (commit
                 "f920916a92fad0c551cd0739e48fc09d8709bd8d")))
        (sha256
          (base32
            "1ig7xf9f3hs3xh8428fsjrczfhnxzzjjjij2xhgns6m0kwh5j0r3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-hydra emacs-f))
    (home-page
      "https://github.com/akirak/git-identity.el")
    (synopsis "Identity management for (ma)git")
    (description
      "Documentation at https://melpa.org/#/git-identity")
    (license #f)))

(define-public emacs-git-io
  (package
    (name "emacs-git-io")
    (version "20230322.1038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tejasbubane/emacs-git-io.git")
               (commit
                 "fb25f9432e6454edd621a7512ee7abc6220151a5")))
        (sha256
          (base32
            "1r45rcbyn28mvhqy8bf94mlvdpw6v1bq51gr45xdcfias9ylq48f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tejasbubane/emacs-git-io")
    (synopsis
      "Integration for git.io URL shortening in buffer")
    (description
      "Documentation at https://melpa.org/#/git-io")
    (license #f)))

(define-public emacs-git-lens
  (package
    (name "emacs-git-lens")
    (version "20220922.710")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/git-lens-"
               version
               ".el"))
        (sha256
          (base32
            "00xwa2y7c7lwv68636g82jl0nj29innkmmncpgvdqv8l23xgf5n2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/pidu/git-lens")
    (synopsis
      "Show new, deleted or modified files in branch")
    (description
      "Documentation at https://melpa.org/#/git-lens")
    (license #f)))

(define-public emacs-git-link
  (package
    (name "emacs-git-link")
    (version "20230518.204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sshaw/git-link.git")
               (commit
                 "aded95807f277f30e1607313bdf9ac9a016a2305")))
        (sha256
          (base32
            "0mxhmza01837hqq1pfi6jf8y2bw48k74bccddlzngaa22xiz1d21"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/sshaw/git-link")
    (synopsis
      "Get the GitHub/Bitbucket/GitLab URL for a buffer location")
    (description
      "Documentation at https://melpa.org/#/git-link")
    (license #f)))

(define-public emacs-git-messenger
  (package
    (name "emacs-git-messenger")
    (version "20201202.1637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/git-messenger.git")
               (commit
                 "eade986ef529aa2dac6944ad61b18de55cee0b76")))
        (sha256
          (base32
            "1ffy3im4rj9z85mx8ik6r55srhpj4ldgphgzdgf1vj9i3r2d5pcp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/emacsorphanage/git-messenger")
    (synopsis "Popup last commit of current line")
    (description
      "Documentation at https://melpa.org/#/git-messenger")
    (license #f)))

(define-public emacs-git-modes
  (package
    (name "emacs-git-modes")
    (version "20231101.2323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/git-modes.git")
               (commit
                 "399b1b446644afce8d0949ff85a882bfdbbfb7bf")))
        (sha256
          (base32
            "0npwjcm04gg1cy19gsha5m6my9xa0din860gv3h32cx8q3nizjjc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/magit/git-modes")
    (synopsis
      "Major modes for editing Git configuration files")
    (description
      "Documentation at https://melpa.org/#/git-modes")
    (license #f)))

(define-public emacs-git-msg-prefix
  (package
    (name "emacs-git-msg-prefix")
    (version "20191031.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/git-msg-prefix.el.git")
               (commit
                 "43f6b31c1090371260a2f15b2117a7666920bee7")))
        (sha256
          (base32
            "01fcf0qqy24ji0ka9gh91gdrp81ilq2xjwah3rv2b90yjk8wib60"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "http://github.com/kidd/git-msg-prefix.el")
    (synopsis
      "Insert commit message prefix (issue number)")
    (description
      "Documentation at https://melpa.org/#/git-msg-prefix")
    (license #f)))

(define-public emacs-git-ps1-mode
  (package
    (name "emacs-git-ps1-mode")
    (version "20200113.704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/git-ps1-mode-el.git")
               (commit
                 "6762a309bd593d26258dfbf43e7bc21254a70fbf")))
        (sha256
          (base32
            "1xrp9c7ih5xvq9mhd4h2vwn47khmiycdinzhn4kmp69xy1a93b2c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/git-ps1-mode-el")
    (synopsis
      "Global minor-mode to print __git_ps1 in mode-line")
    (description
      "Documentation at https://melpa.org/#/git-ps1-mode")
    (license #f)))

(define-public emacs-git-time-metric
  (package
    (name "emacs-git-time-metric")
    (version "20181116.2011")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/c301/gtm-emacs-plugin.git")
               (commit
                 "287108ed1d6885dc795eb3bad4476aa08c626186")))
        (sha256
          (base32
            "0cq4jn2vvcm8hyzmmnnvbmffygxnnv0v71kqlgjm8lcil0xsf84d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/c301/gtm-emacs-plugin")
    (synopsis
      "Provide function to record time with gtm ( git time metric )")
    (description
      "Documentation at https://melpa.org/#/git-time-metric")
    (license #f)))

(define-public emacs-git-timemachine
  (package
    (name "emacs-git-timemachine")
    (version "20230630.1214")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/git-timemachine-"
               version
               ".tar"))
        (sha256
          (base32
            "0aryiy1gbzv0wyhvhi848v7y62qkrra2p2agfpjdc0dwm4i1y7n2"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/pidu/git-timemachine")
    (synopsis "Walk through git revisions of a file")
    (description
      "Documentation at https://melpa.org/#/git-timemachine")
    (license #f)))

(define-public emacs-git-walktree
  (package
    (name "emacs-git-walktree")
    (version "20191101.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/git-walktree-el.git")
               (commit
                 "162d9073286c256502df4baa9845790b9f4c2f05")))
        (sha256
          (base32
            "17z0csy00i56l7mmz2xhc1pmq044m17r4xy1azp775h9k9y2n6m9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-git))
    (home-page
      "https://github.com/10sr/git-walktree-el")
    (synopsis "Browse Git tree and blob objects")
    (description
      "Documentation at https://melpa.org/#/git-walktree")
    (license #f)))

(define-public emacs-git-wip-timemachine
  (package
    (name "emacs-git-wip-timemachine")
    (version "20150408.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/itsjeyd/git-wip-timemachine.git")
               (commit
                 "ed4c7931a5f5233bf3e358b1e81647d063526460")))
        (sha256
          (base32
            "1ivnf4vsqk6c7iw1cid7q1hxp7047ajd1mpg0fl002d7m7ginhyl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/itsjeyd/git-wip-timemachine")
    (synopsis
      "Walk through git-wip revisions of a file")
    (description
      "Documentation at https://melpa.org/#/git-wip-timemachine")
    (license #f)))

(define-public emacs-gitconfig
  (package
    (name "emacs-gitconfig")
    (version "20130718.935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/gitconfig.el.git")
               (commit
                 "7612a37ca14009cac8fb8d6b6f54adad739a5741")))
        (sha256
          (base32
            "184q3vsxa9rvhc1n57ms47r73f3zap25wswzi66rm6rmfi2k7678"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs lisp interface to work with git-config variables")
    (description
      "Documentation at https://melpa.org/#/gitconfig")
    (license #f)))

(define-public emacs-github-browse-file
  (package
    (name "emacs-github-browse-file")
    (version "20160205.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/github-browse-file.git")
               (commit
                 "9742a5183af853788c6ecb83fb7ee0b00d1675ac")))
        (sha256
          (base32
            "0i3dkm0j4gh21b7r5vxr6dddql5rj7lg8xlaairvild0ccf3bhdl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/osener/github-browse-file")
    (synopsis
      "View the file you're editing on GitHub")
    (description
      "Documentation at https://melpa.org/#/github-browse-file")
    (license #f)))

(define-public emacs-github-clone
  (package
    (name "emacs-github-clone")
    (version "20210108.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgtized/github-clone.el.git")
               (commit
                 "9e40d6d3c6128407d7456bf71c95ad1fbb473b2a")))
        (sha256
          (base32
            "12mk8cl1mpfapdgxwcm6rlyfg9yyk2wk8hv2486hqb6qb77kdg9i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gh emacs-magit))
    (home-page
      "https://github.com/dgtized/github-clone.el")
    (synopsis "Fork and clone github repos")
    (description
      "Documentation at https://melpa.org/#/github-clone")
    (license #f)))

(define-public emacs-github-dark-vscode-theme
  (package
    (name "emacs-github-dark-vscode-theme")
    (version "20231011.2034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Justintime50/github-dark-vscode-emacs-theme.git")
               (commit
                 "9906e1412d692ea0c115998c1809bcc135e263f6")))
        (sha256
          (base32
            "087vycm8wjzwv271c2wqymplcwyrin5pj9pwcr1y44di658rckj4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justintime50/github-dark-vscode-emacs-theme")
    (synopsis
      "The GitHub Dark Theme from Visual Studio Code")
    (description
      "Documentation at https://melpa.org/#/github-dark-vscode-theme")
    (license #f)))

(define-public emacs-github-elpa
  (package
    (name "emacs-github-elpa")
    (version "20200129.417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/github-elpa.git")
               (commit
                 "04a55c723ffcd84dd35e5438e7e2b9f1cce08d42")))
        (sha256
          (base32
            "19jidx1v3awga0d95shdcz5vgwfw4svpgs5l43d4l340lz84c4dk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-package-build
            emacs-commander
            emacs-git))
    (arguments '(#:files (:defaults "bin")))
    (home-page "https://github.com/10sr/github-elpa")
    (synopsis
      "Build and publish ELPA repositories with GitHub Pages")
    (description
      "Documentation at https://melpa.org/#/github-elpa")
    (license #f)))

(define-public emacs-github-explorer
  (package
    (name "emacs-github-explorer")
    (version "20220305.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/github-explorer.git")
               (commit
                 "49e5c350169b556deaabdcb67e9440bd4d5b4f8b")))
        (sha256
          (base32
            "08d2s9a8sa6r67dirj5nn1hi1k5hivsjm4yz5gawww30v4w6cwil"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-graphql))
    (home-page
      "https://github.com/TxGVNN/github-explorer")
    (synopsis
      "Explore a GitHub repository on the fly")
    (description
      "Documentation at https://melpa.org/#/github-explorer")
    (license #f)))

(define-public emacs-github-linguist
  (package
    (name "emacs-github-linguist")
    (version "20231105.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/github-linguist.el.git")
               (commit
                 "7e24d62266ff0c56b63dc8ca4bf6d39a88aa1d5b")))
        (sha256
          (base32
            "18wh1713zgn2p733n9psqq51ixlxacnbsfw4h8falzahn53mk0j6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/akirak/github-linguist.el")
    (synopsis
      "Run GitHub Linguist on projects to collect information")
    (description
      "Documentation at https://melpa.org/#/github-linguist")
    (license #f)))

(define-public emacs-github-modern-theme
  (package
    (name "emacs-github-modern-theme")
    (version "20171109.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philiparvidsson/GitHub-Modern-Theme-for-Emacs.git")
               (commit
                 "a7e7b8e5e9c122138e79e837caf9b7299e748d44")))
        (sha256
          (base32
            "0agfy3wiznb2ksfa00g7066mb0vps4g74mj6nl9wkvx847dzg34h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs")
    (synopsis "The GitHub color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/github-modern-theme")
    (license #f)))

(define-public emacs-github-notifier
  (package
    (name "emacs-github-notifier")
    (version "20180421.316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/github-notifier.el.git")
               (commit
                 "274f3812926ea371346f639fcee98066f6e8c96f")))
        (sha256
          (base32
            "1qv66sdi8zm8nv1xc32lsmm2bgkxf03hb8sfz59mbvzhy6r7dxin"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/github-notifier.el")
    (synopsis
      "Displays your GitHub notifications unread count in mode-line")
    (description
      "Documentation at https://melpa.org/#/github-notifier")
    (license #f)))

(define-public emacs-github-pullrequest
  (package
    (name "emacs-github-pullrequest")
    (version "20170116.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jakoblind/github-pullrequest.git")
               (commit
                 "6ae5c38b0fc15b638b5ba4490112d9822ce5e267")))
        (sha256
          (base32
            "1yr7v2wdrvwb1slks83bbh857qq1n207rdk48y8qwlcxbk4ygdr6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash emacs-magit))
    (home-page
      "https://github.com/jakoblind/github-pullrequest")
    (synopsis
      "Create and fetch Github Pull requests with ease")
    (description
      "Documentation at https://melpa.org/#/github-pullrequest")
    (license #f)))

(define-public emacs-github-review
  (package
    (name "emacs-github-review")
    (version "20211029.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/charignon/github-review.git")
               (commit
                 "725fbc7b385228f53a7ddc46a92c1276bab4aea8")))
        (sha256
          (base32
            "1261p65wlpl9s5xqq1jfnkj7hrn27a4bn85rxc3allqdl5hc63hd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-ghub
            emacs-dash
            emacs-deferred
            emacs-a))
    (home-page
      "https://github.com/charignon/github-review")
    (synopsis "GitHub based code review")
    (description
      "Documentation at https://melpa.org/#/github-review")
    (license #f)))

(define-public emacs-github-search
  (package
    (name "emacs-github-search")
    (version "20190624.436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/github-search.git")
               (commit
                 "b73efaf19491010522b09db35bb0f1bad1620e63")))
        (sha256
          (base32
            "19qmvwki9nfbd2pz5ld36mzcbj8plfls7snmzssgkpw06n0y68j9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit emacs-gh))
    (home-page
      "https://github.com/IvanMalison/github-search")
    (synopsis
      "Clone repositories by searching github")
    (description
      "Documentation at https://melpa.org/#/github-search")
    (license #f)))

(define-public emacs-github-stars
  (package
    (name "emacs-github-stars")
    (version "20190517.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/github-stars.el.git")
               (commit
                 "a9f25ab2487c886f5d50d26693d49856bd51383b")))
        (sha256
          (base32
            "1wp1zfwa4ai0771pkmcsybw8z8zwbwmqazm9fszyg8dsdns5wz2f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ghub))
    (home-page
      "https://github.com/xuchunyang/github-stars.el")
    (synopsis "Browse your Github Stars")
    (description
      "Documentation at https://melpa.org/#/github-stars")
    (license #f)))

(define-public emacs-github-theme
  (package
    (name "emacs-github-theme")
    (version "20170630.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs.git")
               (commit
                 "29f00a51d949a248a5f6355a97131e216747c797")))
        (sha256
          (base32
            "16ldfz1k0hxc1b785gzrf70hg0q88ijjxp39hb62iax1k1aw9vlw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/philiparvidsson/GitHub-Theme-for-Emacs")
    (synopsis "The GitHub color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/github-theme")
    (license #f)))

(define-public emacs-gitignore-snippets
  (package
    (name "emacs-gitignore-snippets")
    (version "20201118.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/gitignore-snippets.git")
               (commit
                 "0de6945ff0fc6943eebcf92d1cbb66b6a1d8fa60")))
        (sha256
          (base32
            "07qrlyb0n9h3r3b9lvqbd1fi97g3xb27836lgbdpphvvyw92975q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/sei40kr/gitignore-snippets")
    (synopsis "Gitignore.io templates for Yasnippet")
    (description
      "Documentation at https://melpa.org/#/gitignore-snippets")
    (license #f)))

(define-public emacs-gitignore-templates
  (package
    (name "emacs-gitignore-templates")
    (version "20210814.144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/gitignore-templates.el.git")
               (commit
                 "d28cd1cec00242b688861648d36d086818b06099")))
        (sha256
          (base32
            "0x4pg4jpgmbvfw854ps9w3xgp8bgm7n7vmcvk3kp7h2s56l8s2xb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/gitignore-templates.el")
    (synopsis
      "Create .gitignore using GitHub or gitignore.io API")
    (description
      "Documentation at https://melpa.org/#/gitignore-templates")
    (license #f)))

(define-public emacs-gitlab
  (package
    (name "emacs-gitlab")
    (version "20180312.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-gitlab.git")
               (commit
                 "8c2324c02119500f094c2f92dfaba4c9977ce1ba")))
        (sha256
          (base32
            "056c4fb5sj2y4h94klx2g24n1g3qdi7ifzs8ksw5v6hcj9lrkb1n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-pkg-info
            emacs-request))
    (arguments '(#:files ("gitlab*.el")))
    (home-page
      "https://github.com/nlamirault/emacs-gitlab")
    (synopsis "Emacs client for Gitlab")
    (description
      "Documentation at https://melpa.org/#/gitlab")
    (license #f)))

(define-public emacs-gitlab-ci-mode
  (package
    (name "emacs-gitlab-ci-mode")
    (version "20191022.2017")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/joewreschnig/gitlab-ci-mode.git")
               (commit
                 "c861dc5fa17d380d5c3aca99dc3bbec5eee623bc")))
        (sha256
          (base32
            "0yd6s5vy5afkigm87xyh1nnwljplx1wdn5h02224ica0py48fzhd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (home-page
      "https://gitlab.com/joewreschnig/gitlab-ci-mode/")
    (synopsis "Mode for editing GitLab CI files")
    (description
      "Documentation at https://melpa.org/#/gitlab-ci-mode")
    (license #f)))

(define-public emacs-gitlab-ci-mode-flycheck
  (package
    (name "emacs-gitlab-ci-mode-flycheck")
    (version "20190323.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/joewreschnig/gitlab-ci-mode-flycheck.git")
               (commit
                 "eba81cfb7224fd1fa4e4da90d11729cc7ea12f72")))
        (sha256
          (base32
            "1w1simnlffg56j79gal1qf1nlav9f8fmr2zfswfrmcv6cac6fhj9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck emacs-gitlab-ci-mode))
    (home-page
      "https://gitlab.com/joewreschnig/gitlab-ci-mode-flycheck/")
    (synopsis
      "Flycheck support for ‘gitlab-ci-mode’")
    (description
      "Documentation at https://melpa.org/#/gitlab-ci-mode-flycheck")
    (license #f)))

(define-public emacs-gitlab-pipeline
  (package
    (name "emacs-gitlab-pipeline")
    (version "20220921.1044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/gitlab-pipeline.git")
               (commit
                 "8cc070c156d6e45583074ef4eb110b8d1511b0c4")))
        (sha256
          (base32
            "19j6x3hz5fgpgslhiiks5nwv9swj88sf2g290s0254mxyk5ffcn8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ghub))
    (home-page
      "https://github.com/TxGVNN/gitlab-pipeline")
    (synopsis
      "Get infomation about Gitlab pipelines")
    (description
      "Documentation at https://melpa.org/#/gitlab-pipeline")
    (license #f)))

(define-public emacs-gitlab-snip-helm
  (package
    (name "emacs-gitlab-snip-helm")
    (version "20200427.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/gitlab-snip-helm.git")
               (commit
                 "782df679e33646db29e07508311bc8e8624b484e")))
        (sha256
          (base32
            "1mxkcnjgazc1pyjbqqfnhc9phpyrgah960avm2fmi7m9n5v8cf0w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-helm))
    (home-page
      "https://gitlab.com/sasanidas/gitlab-snip-helm")
    (synopsis "Gitlab snippets api helm package")
    (description
      "Documentation at https://melpa.org/#/gitlab-snip-helm")
    (license #f)))

(define-public emacs-gitolite-clone
  (package
    (name "emacs-gitolite-clone")
    (version "20160609.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/gitolite-clone.git")
               (commit
                 "d8a4c2875c984e51137c980b5773f42703602721")))
        (sha256
          (base32
            "11i9hxj76869w1z9xn7wq370v56hx5hm4d7msn4zgp64glpa66j9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-pcache))
    (home-page
      "https://github.com/IvanMalison/gitolite-clone")
    (synopsis
      "Clone gitolite repositories from a completing list")
    (description
      "Documentation at https://melpa.org/#/gitolite-clone")
    (license #f)))

(define-public emacs-gitpatch
  (package
    (name "emacs-gitpatch")
    (version "20170722.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/gitpatch.git")
               (commit
                 "577d5adf65c8133caa325c10e89e1e2fc323c907")))
        (sha256
          (base32
            "1jj12pjwza6cq8a3kr8nqnmm3vxs0wam8h983irry4xr4ifywsn4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/gitpatch")
    (synopsis "Git-format patch toolkit")
    (description
      "Documentation at https://melpa.org/#/gitpatch")
    (license #f)))

(define-public emacs-gitstatus
  (package
    (name "emacs-gitstatus")
    (version "20221113.1951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/igorepst/gitstatus-el.git")
               (commit
                 "c3e30341d0add9728010e566b9eb031c76414b47")))
        (sha256
          (base32
            "061wy9clb5w25r6g65wv4pdkp9cbhp2z8fv4v1np4gnwcvgjm26y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/igorepst/gitstatus-el")
    (synopsis "Common front-end for `gitstatusd'")
    (description
      "Documentation at https://melpa.org/#/gitstatus")
    (license #f)))

(define-public emacs-gitter
  (package
    (name "emacs-gitter")
    (version "20220316.138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/gitter.el.git")
               (commit
                 "49327c91eb50cfea633af8fd32b0643691d75cb7")))
        (sha256
          (base32
            "0m8np2pxmgziirmprs70jbflilc98b7zlx1g07i6mhp39xw1sx98"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/gitter.el")
    (synopsis "An Emacs Gitter client")
    (description
      "Documentation at https://melpa.org/#/gitter")
    (license #f)))

(define-public emacs-gkroam
  (package
    (name "emacs-gkroam")
    (version "20220923.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kinneyzhang/gkroam.git")
               (commit
                 "7a6f2899e676ce4720b102cd9eb4410e05613958")))
        (sha256
          (base32
            "0r26lmi0r847klx246i35banb55m1ll8ng0dk0j7q92yikb7v3jf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-db emacs-company))
    (home-page
      "https://github.com/Kinneyzhang/gkroam")
    (synopsis
      "A lightweight org-mode Roam Research replica")
    (description
      "Documentation at https://melpa.org/#/gkroam")
    (license #f)))

(define-public emacs-gl-conf-mode
  (package
    (name "emacs-gl-conf-mode")
    (version "20170714.1310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/llloret/gitolite-emacs.git")
               (commit
                 "9136a9b737e0a5b6471a91571d104c487c43f35b")))
        (sha256
          (base32
            "0wls3sfplrf7wkg7g7fxx4s87cvm3p7myxw6k91np6pbfh8p0s9q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/llloret/gitolite-emacs")
    (synopsis
      "Mode for editing gitolite config files")
    (description
      "Documentation at https://melpa.org/#/gl-conf-mode")
    (license #f)))

(define-public emacs-global-tags
  (package
    (name "emacs-global-tags")
    (version "20211120.347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.launchpad.net/global-tags.el")
               (commit
                 "aaa37da4c538f35a90149ef4ad3d8b0922af54ab")))
        (sha256
          (base32
            "0d1xil1cw0jrk4ciifph2qdhk0qb1h906zgryy74yaj3gd2dx7ak"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-ht))
    (home-page
      "https://launchpad.net/global-tags.el")
    (synopsis
      "Elisp API and editor integration for GNU global")
    (description
      "Documentation at https://melpa.org/#/global-tags")
    (license #f)))

(define-public emacs-glsl-mode
  (package
    (name "emacs-glsl-mode")
    (version "20210808.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimhourihan/glsl-mode.git")
               (commit
                 "9b2e5f28e489a1f73c4aed734105618ac0dc0c43")))
        (sha256
          (base32
            "101y46bdxxgp58li66pwqn6c3skww72gkfmhxpps2v2ijxcvqkl9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimhourihan/glsl-mode")
    (synopsis
      "major mode for Open GLSL shader files")
    (description
      "Documentation at https://melpa.org/#/glsl-mode")
    (license #f)))

(define-public emacs-glue
  (package
    (name "emacs-glue")
    (version "20230112.2159")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/glue-"
               version
               ".el"))
        (sha256
          (base32
            "0ayqgb75wyrxnxk3wn0605xdf8hk52sdg92jp2snc5n7g4gqffyp"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~hajovonta/glue/")
    (synopsis
      "Emacs - Common Lisp interop using SLIME or SLY")
    (description
      "Documentation at https://melpa.org/#/glue")
    (license #f)))

(define-public emacs-gmail-message-mode
  (package
    (name "emacs-gmail-message-mode")
    (version "20160627.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/gmail-mode.git")
               (commit
                 "ec36672a9dc93c09ebe2f77597b498d11883d008")))
        (sha256
          (base32
            "0xcdd3abcrqr7nabdmmh0kgfar64hhgnrhsiwg3q201cymhnv49p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ham-mode))
    (home-page
      "http://github.com/Bruce-Connor/gmail-message-mode")
    (synopsis
      "A major-mode for editing gmail messages using markdown syntax.")
    (description
      "Documentation at https://melpa.org/#/gmail-message-mode")
    (license #f)))

(define-public emacs-gmail2bbdb
  (package
    (name "emacs-gmail2bbdb")
    (version "20170423.1144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/gmail2bbdb.git")
               (commit
                 "a84fa385cfaec7fc5f1518c368e52722da139f99")))
        (sha256
          (base32
            "1qbf3r8a66xlrbni3hv5q5b5v3izis5aid06228rfpc2hwa97hr7"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/gmail2bbdb")
    (synopsis
      "import email and name into bbdb from vcard.")
    (description
      "Documentation at https://melpa.org/#/gmail2bbdb")
    (license #f)))

(define-public emacs-gmpl-mode
  (package
    (name "emacs-gmpl-mode")
    (version "20220121.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/gmpl-mode.git")
               (commit
                 "97b103eea8b18f7e27b0f0be6cb4809a4156c032")))
        (sha256
          (base32
            "1592sn1wzlmg65wc05103dyklprrwn048qgfhlims9618zapk5yr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing GMPL(MathProg) files")
    (description
      "Documentation at https://melpa.org/#/gmpl-mode")
    (license #f)))

(define-public emacs-gmsh-mode
  (package
    (name "emacs-gmsh-mode")
    (version "20211204.826")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/gmsh-mode.git")
               (commit
                 "2b7c573f378f7e9210400115d4d9dfd879f8a4ad")))
        (sha256
          (base32
            "0yipszmblbz2zz784ys78zqzcm44blnvlm79gch2prl56gi0hl3r"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/matsievskiysv/gmsh-mode")
    (synopsis
      "Highlight GMSH mesh generator script syntax")
    (description
      "Documentation at https://melpa.org/#/gmsh-mode")
    (license #f)))

(define-public emacs-gn-mode
  (package
    (name "emacs-gn-mode")
    (version "20190428.1812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lashtear/gn-mode.git")
               (commit
                 "fcf8e1e500d953364e97e7ebc5708a2c00fa3cd2")))
        (sha256
          (base32
            "0dz5kgzbgsssr38z2kg6m915cvfys42ag1k42bsra3la2pixywfx"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/lashtear/gn-mode")
    (synopsis
      "major mode for editing GN (generate ninja) files")
    (description
      "Documentation at https://melpa.org/#/gn-mode")
    (license #f)))

(define-public emacs-gnome-calendar
  (package
    (name "emacs-gnome-calendar")
    (version "20161110.1256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/gnome-calendar.el.git")
               (commit
                 "489f9f15f7bb35696b1cc19db75b554ae8328df2")))
        (sha256
          (base32
            "1aca65g4rfpsm4yk5k2bj6kbb2wrf6s14m8jgv1p94mqmzkj7rlq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Integration with the GNOME Shell calendar")
    (description
      "Documentation at https://melpa.org/#/gnome-calendar")
    (license #f)))

(define-public emacs-gnome-screencast
  (package
    (name "emacs-gnome-screencast")
    (version "20210125.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-gnome-screencast.git")
               (commit
                 "6450ee470e84ff14a15c5c3c0489c79ff593f165")))
        (sha256
          (base32
            "0809psw8jz344hm4vzhapdr79l325dz57p88x509f8kq3fsvv44f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/emacs-gnome-screencast")
    (synopsis
      "Use Gnome screen recording functionality using elisp")
    (description
      "Documentation at https://melpa.org/#/gnome-screencast")
    (license #f)))

(define-public emacs-gnomenm
  (package
    (name "emacs-gnomenm")
    (version "20150316.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-nm.git")
               (commit
                 "9065cda44ffc9e06239b8189a0154d31314c3b4d")))
        (sha256
          (base32
            "1svnvm9fqqx4mrk9jjn11pzqwk71w8kyyd9wwxam8gz22ykw5jb2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-kv))
    (home-page
      "http://github.com/nicferrier/emacs-nm")
    (synopsis
      "Emacs interface to Gnome nmcli command")
    (description
      "Documentation at https://melpa.org/#/gnomenm")
    (license #f)))

(define-public emacs-gntp
  (package
    (name "emacs-gntp")
    (version "20141025.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tekai/gntp.el.git")
               (commit
                 "767571135e2c0985944017dc59b0be79af222ef5")))
        (sha256
          (base32
            "1nvyjjjydrimpxy4cpg90si7sr8lmldbhlcm2mx8npklp9pn5y3a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Growl Notification Protocol for Emacs")
    (description
      "Documentation at https://melpa.org/#/gntp")
    (license #f)))

(define-public emacs-gnu-apl-mode
  (package
    (name "emacs-gnu-apl-mode")
    (version "20220404.341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lokedhs/gnu-apl-mode.git")
               (commit
                 "c8695b0d55b5167263a843252ffd21a589018427")))
        (sha256
          (base32
            "03hwnzzxn5d1wdw93dgznflsx9m9hb133gv54pbrij2454pkvm4g"))))
    (build-system melpa-build-system)
    (home-page "http://www.gnu.org/software/apl/")
    (synopsis "Integrate GNU APL with Emacs")
    (description
      "Documentation at https://melpa.org/#/gnu-apl-mode")
    (license #f)))

(define-public emacs-gnu-indent
  (package
    (name "emacs-gnu-indent")
    (version "20221127.2112")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/gnu-indent-"
               version
               ".el"))
        (sha256
          (base32
            "1kd53radyw89kkhnyccsnn1pbb9k42gxqj2as3ywiwmni56ccr1x"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/akib/emacs-gnu-indent")
    (synopsis "Indent your code with GNU Indent")
    (description
      "Documentation at https://melpa.org/#/gnu-indent")
    (license #f)))

(define-public emacs-gnuplot
  (package
    (name "emacs-gnuplot")
    (version "20230323.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-gnuplot/gnuplot.git")
               (commit
                 "f99effa21f85a4c0963fec6a38e9112a8157d27e")))
        (sha256
          (base32
            "1r2hi7dg3xlz3d4bfm1a8z6v7y5xsxh5dp936hjcbgp4a41395c2"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("gnuplot.el"
         "gnuplot-gui.el"
         "gnuplot-context.el")))
    (home-page
      "https://github.com/emacs-gnuplot/gnuplot")
    (synopsis
      "Major-mode and interactive frontend for gnuplot")
    (description
      "Documentation at https://melpa.org/#/gnuplot")
    (license #f)))

(define-public emacs-gnuplot-mode
  (package
    (name "emacs-gnuplot-mode")
    (version "20171013.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkmcc/gnuplot-mode.git")
               (commit
                 "601f6392986f0cba332c87678d31ae0d0a496ce7")))
        (sha256
          (base32
            "14f0yh1rjqc3337j4sbqzfb7pjim2c8a7wk1a73xkrdkmjn82vgb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkmcc/gnuplot-mode")
    (synopsis
      "Major mode for editing gnuplot scripts")
    (description
      "Documentation at https://melpa.org/#/gnuplot-mode")
    (license #f)))

(define-public emacs-gnus-alias
  (package
    (name "emacs-gnus-alias")
    (version "20230818.1830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/gnus-alias.git")
               (commit
                 "cf1783a9294bc2f72bfafcaea288c159c4e3dee5")))
        (sha256
          (base32
            "0cs0cyi7hj7ga9aiqz4dafc07xrk3l5g9zzlbda9l90xbvyfssa0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "an alternative to gnus-posting-styles")
    (description
      "Documentation at https://melpa.org/#/gnus-alias")
    (license #f)))

(define-public emacs-gnus-desktop-notify
  (package
    (name "emacs-gnus-desktop-notify")
    (version "20180623.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/gnus-desktop-notify.el.git")
               (commit
                 "b438feb59136621a8ab979f0e2784f7002398d06")))
        (sha256
          (base32
            "0h7w5wrkrd0jw8nmgbkzq8wam7ynvy7flhjg4frphzmimlhysli2"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.thregr.org/~wavexx/software/gnus-desktop-notify.el/")
    (synopsis
      "Gnus Desktop Notification global minor mode")
    (description
      "Documentation at https://melpa.org/#/gnus-desktop-notify")
    (license #f)))

(define-public emacs-gnus-notes
  (package
    (name "emacs-gnus-notes")
    (version "20221206.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deusmax/gnus-notes.git")
               (commit
                 "1381a63f9879dd28dc8fd47acfe708045ae1d5f4")))
        (sha256
          (base32
            "0mm30frswkdp0ry69ylx6fpfnlgp08sa4ipihrbid1kymhj6k3rr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bbdb
            emacs-helm
            emacs-hydra
            emacs-s
            emacs-lv
            emacs-async))
    (home-page
      "https://github.com/deusmax/gnus-notes")
    (synopsis
      "Keep handy notes of read Gnus articles with helm and org")
    (description
      "Documentation at https://melpa.org/#/gnus-notes")
    (license #f)))

(define-public emacs-gnus-recent
  (package
    (name "emacs-gnus-recent")
    (version "20230602.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/gnus-recent.git")
               (commit
                 "5f85ddccd116b6c0cddf47795f25f930b7b767c4")))
        (sha256
          (base32
            "114pq08a8i9362lp8h6lgky8pd1mcf93lw50zq2qigwixac5cp7m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("gnus-recent.el")))
    (home-page
      "https://github.com/unhammer/gnus-recent")
    (synopsis "Article breadcrumbs for Gnus")
    (description
      "Documentation at https://melpa.org/#/gnus-recent")
    (license #f)))

(define-public emacs-gnus-select-account
  (package
    (name "emacs-gnus-select-account")
    (version "20170722.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/gnus-select-account.git")
               (commit
                 "ddc8c135eeaf90f5b6692a033af2badae36e68ce")))
        (sha256
          (base32
            "0csq8cqv028g3mrvk88l0nlj3dk5fh67c10hdjwvxbf7winv0391"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/gnus-select-account")
    (synopsis
      "Select an account before writing a mail in gnus")
    (description
      "Documentation at https://melpa.org/#/gnus-select-account")
    (license #f)))

(define-public emacs-gnus-summary-ext
  (package
    (name "emacs-gnus-summary-ext")
    (version "20180113.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/gnus-summary-ext.git")
               (commit
                 "025fd853fe9280ae696a89ec2c2cac9befd010aa")))
        (sha256
          (base32
            "07ww2nc03daz70f2ajw7b2gin22xa306001zclhrxkm1cpjif2fi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/gnus-summary-ext")
    (synopsis
      "Extra limit and process mark commands for the gnus summary buffer")
    (description
      "Documentation at https://melpa.org/#/gnus-summary-ext")
    (license #f)))

(define-public emacs-gnus-summary-repo
  (package
    (name "emacs-gnus-summary-repo")
    (version "20190617.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/gnus-summary-repo.git")
               (commit
                 "d0cb218fea13563c1b2bfba3e72716fb860f767c")))
        (sha256
          (base32
            "1ljbgksdnqkgh5m41l95lir5l53r1q1j1rz5nlvhhdv1jlxp19q7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TxGVNN/gnus-summary-repo")
    (synopsis
      "Import and export files between IMAP and local by using GNUS")
    (description
      "Documentation at https://melpa.org/#/gnus-summary-repo")
    (license #f)))

(define-public emacs-gnus-x-gm-raw
  (package
    (name "emacs-gnus-x-gm-raw")
    (version "20140610.2156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/gnus-x-gm-raw.git")
               (commit
                 "978bdfcecc8844465b71641c2e909fcdc66b22be")))
        (sha256
          (base32
            "1i3f67x2l9l5c5agspbkxr2mmh3rpq3009d8yzh6r1lih0b4hril"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-log4e emacs-yaxception))
    (home-page
      "https://github.com/aki2o/gnus-x-gm-raw")
    (synopsis
      "Search mail of Gmail using X-GM-RAW as web interface")
    (description
      "Documentation at https://melpa.org/#/gnus-x-gm-raw")
    (license #f)))

(define-public emacs-go
  (package
    (name "emacs-go")
    (version "20220414.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/el-go.git")
               (commit
                 "79690579496b0df85a1c94199aca968371b58b3c")))
        (sha256
          (base32
            "1jygy0d3w86b963zv888b7kfg8bzs3hnhmi6r2lkjp6j25hd584i"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "back-ends" "stone.wav")))
    (home-page "http://eschulte.github.io/el-go/")
    (synopsis
      "Play GO, translate and transfer between GO back ends")
    (description
      "Documentation at https://melpa.org/#/go")
    (license #f)))

(define-public emacs-go-add-tags
  (package
    (name "emacs-go-add-tags")
    (version "20211122.1812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/go-add-tags.git")
               (commit
                 "93ecde9f82bc960493eaf6921d46a5adc3699ffc")))
        (sha256
          (base32
            "1428apsypqggfaim57y3yh6hl6wayl4zpsg4k3jinnwsg82avbz4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/syohex/emacs-go-add-tags")
    (synopsis "Add field tags for struct fields")
    (description
      "Documentation at https://melpa.org/#/go-add-tags")
    (license #f)))

(define-public emacs-go-autocomplete
  (package
    (name "emacs-go-autocomplete")
    (version "20170626.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/go-autocomplete.git")
               (commit
                 "5327738ec1be51061a3f31010c89bdd4924ca496")))
        (sha256
          (base32
            "0a5zga3jxs4pidcakd88im9ddin8xfn7y6xjp27x645fm5in4j05"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auto-complete))
    (home-page "unspecified")
    (synopsis
      "auto-complete-mode backend for go-mode")
    (description
      "Documentation at https://melpa.org/#/go-autocomplete")
    (license #f)))

(define-public emacs-go-complete
  (package
    (name "emacs-go-complete")
    (version "20190409.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vibhavp/go-complete.git")
               (commit
                 "056294014f37a1004958ec17ebd6748deed63502")))
        (sha256
          (base32
            "021mc1lq4xvmj8dvnpr6hhfs08cd0r07d520h498b345y6a6ihdg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/vibhavp/go-complete")
    (synopsis "Native code completion for Go")
    (description
      "Documentation at https://melpa.org/#/go-complete")
    (license #f)))

(define-public emacs-go-direx
  (package
    (name "emacs-go-direx")
    (version "20150316.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/go-direx.git")
               (commit
                 "8f2206469328ee932c7f1892f5e1fb02dec98432")))
        (sha256
          (base32
            "09rxz40bkr0l75v3lmf8lcwqsgjiv5c8zjmwzy2d4syj4qv69c5y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-direx))
    (home-page
      "https://github.com/syohex/emacs-go-direx")
    (synopsis
      "Tree style source code viewer for Go language")
    (description
      "Documentation at https://melpa.org/#/go-direx")
    (license #f)))

(define-public emacs-go-dlv
  (package
    (name "emacs-go-dlv")
    (version "20220126.1436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/go-dlv.el.git")
               (commit
                 "0a296bc3b7b4dcf0c140a78c5ca3e1a8c6b7ea1a")))
        (sha256
          (base32
            "0dql0c272n6zmfgbk30abipkhhdfncm4kj6wb9pslfi4fmrk7czq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page "https://github.com/benma/go-dlv.el/")
    (synopsis
      "Go Delve - Debug Go programs interactively with the GUD.")
    (description
      "Documentation at https://melpa.org/#/go-dlv")
    (license #f)))

(define-public emacs-go-eldoc
  (package
    (name "emacs-go-eldoc")
    (version "20170305.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/go-eldoc.git")
               (commit
                 "cbbd2ea1e94a36004432a9ac61414cb5a95a39bd")))
        (sha256
          (base32
            "1029qg6ida3cw4ynxll6ykpnqkpbrbrx12nnzcplhc25vqpz7hik"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/syohex/emacs-go-eldoc")
    (synopsis "eldoc for go-mode")
    (description
      "Documentation at https://melpa.org/#/go-eldoc")
    (license #f)))

(define-public emacs-go-errcheck
  (package
    (name "emacs-go-errcheck")
    (version "20160723.43")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dominikh/go-errcheck.el.git")
               (commit
                 "9db21eccecedc2490793f176246094167164af31")))
        (sha256
          (base32
            "1ngzgkmcbk6qa3p97hch75k446h15515arsdfv7mqb4m5va6429h"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "errcheck integration for go-mode")
    (description
      "Documentation at https://melpa.org/#/go-errcheck")
    (license #f)))

(define-public emacs-go-expr-completion
  (package
    (name "emacs-go-expr-completion")
    (version "20200817.1750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fujimisakari/emacs-go-expr-completion.git")
               (commit
                 "66bba78f52a732b978848e3a4c99fa2afeb6c25f")))
        (sha256
          (base32
            "0gbxgf36p24gjh9n5swmvyzl4h518lx63zyf0b80xnrvb7d5qi46"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fujimisakari/emacs-go-expr-completion")
    (synopsis "Complement the return values for Go")
    (description
      "Documentation at https://melpa.org/#/go-expr-completion")
    (license #f)))

(define-public emacs-go-fill-struct
  (package
    (name "emacs-go-fill-struct")
    (version "20230308.1034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/go-fill-struct.git")
               (commit
                 "9e2e4be5af716ecadba809e73ddc95d4c772b2d9")))
        (sha256
          (base32
            "0f468f062r6pj3k0mlsq86fs6zdg7lrxzmn888hqrkaf0f7drbyi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/s-kostyaev/go-fill-struct")
    (synopsis "Fill struct for golang.")
    (description
      "Documentation at https://melpa.org/#/go-fill-struct")
    (license #f)))

(define-public emacs-go-gen-test
  (package
    (name "emacs-go-gen-test")
    (version "20230616.2053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/go-gen-test.git")
               (commit
                 "af00a9abbaba2068502327ecdef574fd894a884b")))
        (sha256
          (base32
            "0q81zkyrl1njwxq29rx7gq9m9w3jags6akxzl7jd9yrnl4k2l27p"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("go-gen-test.el")))
    (home-page
      "https://github.com/s-kostyaev/go-gen-test")
    (synopsis
      "Generate tests for go code with gotests")
    (description
      "Documentation at https://melpa.org/#/go-gen-test")
    (license #f)))

(define-public emacs-go-gopath
  (package
    (name "emacs-go-gopath")
    (version "20160705.1034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iced/go-gopath.git")
               (commit
                 "5172fc53f21edbf9347d5ee7d1d745da1ec88a15")))
        (sha256
          (base32
            "0gqb3k33y42gchc89rw3k1pvb7ai9ka50ljfd4avk31fdpr4dln5"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/iced/go-gopath/")
    (synopsis
      "Will guess GOPATH using gb and projectile.")
    (description
      "Documentation at https://melpa.org/#/go-gopath")
    (license #f)))

(define-public emacs-go-guru
  (package
    (name "emacs-go-guru")
    (version "20220114.2239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dominikh/go-mode.el.git")
               (commit
                 "08aa90d52f0e7d2ad02f961b554e13329672d7cb")))
        (sha256
          (base32
            "1zdyhjg3crvcw093zw2nv3kzs583i26ba6pbs8jyhqnnysl7llfc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (arguments '(#:files ("go-guru.el")))
    (home-page "unspecified")
    (synopsis
      "Integration of the Go 'guru' analysis tool into Emacs.")
    (description
      "Documentation at https://melpa.org/#/go-guru")
    (license #f)))

(define-public emacs-go-imenu
  (package
    (name "emacs-go-imenu")
    (version "20181029.1029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/go-imenu.el.git")
               (commit
                 "4f3f334ed0b6f6afaca6b9775636a52ad3843053")))
        (sha256
          (base32
            "1ar2fw7wnlxvdj61vhd9sfqrd0yrb65r7ldjvfdpp1jv9mg50vad"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brantou/go-imenu.el")
    (synopsis "Enhance imenu for go language")
    (description
      "Documentation at https://melpa.org/#/go-imenu")
    (license #f)))

(define-public emacs-go-impl
  (package
    (name "emacs-go-impl")
    (version "20210621.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/go-impl.git")
               (commit
                 "1eebba6ccd02d11a5a82ad4540a8d562797bc3b3")))
        (sha256
          (base32
            "1i48vawn2a76bdbvv02mw7c5ny7g8dxk6b6xw2y9z0iijmbr0dzl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/syohex/emacs-go-impl")
    (synopsis "impl integration for go-mode")
    (description
      "Documentation at https://melpa.org/#/go-impl")
    (license #f)))

(define-public emacs-go-imports
  (package
    (name "emacs-go-imports")
    (version "20190715.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasushi-saito/go-imports.git")
               (commit
                 "55681e815da93b6f927213c4aa352ae33db97c37")))
        (sha256
          (base32
            "12xgkhc5nqrj5x306ninysyd78dwa3p3bvf69qqi2g0a9ngl8d3x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "find-packages.pl")))
    (home-page
      "https://github.com/yasushi-saito/go-imports")
    (synopsis
      "Insert go import statement given package name")
    (description
      "Documentation at https://melpa.org/#/go-imports")
    (license #f)))

(define-public emacs-go-mode
  (package
    (name "emacs-go-mode")
    (version "20230823.2304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dominikh/go-mode.el.git")
               (commit
                 "8dce1e3ba1cdc34a856ad53c8421413cfe33660e")))
        (sha256
          (base32
            "0l002gcjmwrfkc4972hc8sal6xaja05s50rg7cbv2q9axb18rcqj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("go-mode.el")))
    (home-page
      "https://github.com/dominikh/go-mode.el")
    (synopsis
      "Major mode for the Go programming language")
    (description
      "Documentation at https://melpa.org/#/go-mode")
    (license #f)))

(define-public emacs-go-noisegate
  (package
    (name "emacs-go-noisegate")
    (version "20200502.703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/go-noisegate/go-noisegate.el.git")
               (commit
                 "e3fc198c234131c94f7d307b7f7c6ef623fb93b7")))
        (sha256
          (base32
            "12b4l3sl1pykz7v73vsjsicbqpmylsmwhlyprpiimc0r1is5km3m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/go-noisegate/go-noisegate.el")
    (synopsis "Run Golang tests with Noise Gate")
    (description
      "Documentation at https://melpa.org/#/go-noisegate")
    (license #f)))

(define-public emacs-go-playground
  (package
    (name "emacs-go-playground")
    (version "20221127.1342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grafov/go-playground.git")
               (commit
                 "e70aeb111fbb4487b464a813feb8ecad1542dc1c")))
        (sha256
          (base32
            "0r7rds41m899ikc6lnjhlkkrhljmazsddk8f050nzngdfb60p3sa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-go-mode emacs-gotest))
    (home-page
      "https://github.com/grafov/go-playground")
    (synopsis
      "Local Golang playground for short snippets.")
    (description
      "Documentation at https://melpa.org/#/go-playground")
    (license #f)))

(define-public emacs-go-playground-cli
  (package
    (name "emacs-go-playground-cli")
    (version "20160503.914")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kosh04/emacs-go-playground.git")
               (commit
                 "60beebd98e3930641d41cee0189c579626f223bc")))
        (sha256
          (base32
            "1fcm65r1sy2fmcp2i7mwc7mxqiaf4aaxda4i2qrm8s25cxsffir7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-deferred
            emacs-names
            emacs-s
            emacs-f))
    (arguments '(#:files ("go-playground-cli.el")))
    (home-page
      "https://github.com/kosh04/go-playground-cli")
    (synopsis "Go Playground client tool")
    (description
      "Documentation at https://melpa.org/#/go-playground-cli")
    (license #f)))

(define-public emacs-go-projectile
  (package
    (name "emacs-go-projectile")
    (version "20200609.131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dougm/go-projectile.git")
               (commit
                 "ad4ca3b5695a0e31e95e3cc4ccab498f87d68303")))
        (sha256
          (base32
            "1ai34z7n56cczz6qb0vbcrqbjrkmxwv9r928pjbw58812nycj1mh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-go-mode
            emacs-go-eldoc
            emacs-go-rename
            emacs-go-guru
            emacs-dash))
    (home-page
      "https://github.com/dougm/go-projectile")
    (synopsis "Go add-ons for Projectile")
    (description
      "Documentation at https://melpa.org/#/go-projectile")
    (license #f)))

(define-public emacs-go-rename
  (package
    (name "emacs-go-rename")
    (version "20220114.2239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dominikh/go-mode.el.git")
               (commit
                 "08aa90d52f0e7d2ad02f961b554e13329672d7cb")))
        (sha256
          (base32
            "1zdyhjg3crvcw093zw2nv3kzs583i26ba6pbs8jyhqnnysl7llfc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (arguments '(#:files ("go-rename.el")))
    (home-page "unspecified")
    (synopsis
      "Integration of the 'gorename' tool into Emacs.")
    (description
      "Documentation at https://melpa.org/#/go-rename")
    (license #f)))

(define-public emacs-go-scratch
  (package
    (name "emacs-go-scratch")
    (version "20150810.440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shosti/go-scratch.el.git")
               (commit
                 "3f68cbcce04f59eb8e83af109164731ec0454be0")))
        (sha256
          (base32
            "1a6vg2vwgnafb61pwrd837fwlq5gs80wawbzjsnykawnmcaag8pm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page "unspecified")
    (synopsis "*scratch* buffer for Go")
    (description
      "Documentation at https://melpa.org/#/go-scratch")
    (license #f)))

(define-public emacs-go-snippets
  (package
    (name "emacs-go-snippets")
    (version "20180113.611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/toumorokoshi/go-snippets.git")
               (commit
                 "d437df148879566ffe7f2e503a3cf2602aa9fb28")))
        (sha256
          (base32
            "0rs2yj9bh0snf13hfj9bvyawl16j8416naz6h52l21q72ymd4b0k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for go")
    (description
      "Documentation at https://melpa.org/#/go-snippets")
    (license #f)))

(define-public emacs-go-stacktracer
  (package
    (name "emacs-go-stacktracer")
    (version "20150430.2142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samertm/go-stacktracer.el.git")
               (commit
                 "a2ac6d801b389f80ca4e2fcc1ab44513a9e55976")))
        (sha256
          (base32
            "0n5nsyfwx2pdlwx6bl35wrfyady5dwraimv92f58mhc344ajd70y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/samertm/go-stacktracer.el")
    (synopsis "parse Go stack traces")
    (description
      "Documentation at https://melpa.org/#/go-stacktracer")
    (license #f)))

(define-public emacs-go-tag
  (package
    (name "emacs-go-tag")
    (version "20230111.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/emacs-go-tag.git")
               (commit
                 "33f2059551d5298ca228d90f525b99d1a8d70364")))
        (sha256
          (base32
            "1nmxw99xqhr9sg5lafqjs7x033br8xz9106zc96gxf07v6zgbxy2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/brantou/emacs-go-tag")
    (synopsis "Edit Golang struct field tag")
    (description
      "Documentation at https://melpa.org/#/go-tag")
    (license #f)))

(define-public emacs-go-translate
  (package
    (name "emacs-go-translate")
    (version "20230503.303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lorniu/go-translate.git")
               (commit
                 "e5680e294f0e18d945c9f18ff7f4e6610c1ed50b")))
        (sha256
          (base32
            "0pb0b407hqrz0g2askwj40vig2q54rsik7ib1388xkfqdm4l246j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lorniu/go-translate")
    (synopsis
      "Translation framework supports multiple engines such as Google/Bing/DeepL")
    (description
      "Documentation at https://melpa.org/#/go-translate")
    (license #f)))

(define-public emacs-gobgen
  (package
    (name "emacs-gobgen")
    (version "20161020.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gergelypolonkai/gobgen.el.git")
               (commit
                 "ed2c2b0d217deae293096f3cf14aa492791ddd4f")))
        (sha256
          (base32
            "1isda941gzrl9r2xxaxbsqjxq146cmnhl04m634m8m0q2d751pwk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Generate GObject descendants using a detailed form")
    (description
      "Documentation at https://melpa.org/#/gobgen")
    (license #f)))

(define-public emacs-god-mode
  (package
    (name "emacs-god-mode")
    (version "20221230.708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/god-mode.git")
               (commit
                 "607aff10a7b27a8aa0c1a15c2c39337ab17cfda7")))
        (sha256
          (base32
            "032c82cgf8dafc3w951f2n2a1327rxz9126ri8vz9n3fblwdizj5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/god-mode")
    (synopsis
      "Minor mode for God-like command entering")
    (description
      "Documentation at https://melpa.org/#/god-mode")
    (license #f)))

(define-public emacs-godoctor
  (package
    (name "emacs-godoctor")
    (version "20180710.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/microamp/godoctor.el.git")
               (commit
                 "4b45ff3d0572f0e84056e4c3ba91fcc178199859")))
        (sha256
          (base32
            "12gga1ghc54r6f2adyaq30hm2yxspvgg54zd4k82c3d6cj51qwci"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/microamp/godoctor.el")
    (synopsis "Frontend for godoctor")
    (description
      "Documentation at https://melpa.org/#/godoctor")
    (license #f)))

(define-public emacs-gofmt-tag
  (package
    (name "emacs-gofmt-tag")
    (version "20231024.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/M1ndo/gofmt-tag.git")
               (commit
                 "93d746bda753f892c547d4c366d175c5b972fdd2")))
        (sha256
          (base32
            "1q0whcp1r3lrkim6dnllxdw59qlqz47rkgsmvwh9dq2jaqiid0pd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/m1ndo/gofmt-tag")
    (synopsis "Format and align go struct tags")
    (description
      "Documentation at https://melpa.org/#/gofmt-tag")
    (license #f)))

(define-public emacs-goggles
  (package
    (name "emacs-goggles")
    (version "20230428.1547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/goggles.git")
               (commit
                 "4a22853a4ff18c1c1a2149945de9a5ed0a23a2c9")))
        (sha256
          (base32
            "13nm2c39p88wzlgacqby80rnrarscjgpladciy4naaf3lnbf3zsb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/minad/goggles")
    (synopsis "Pulse modified regions")
    (description
      "Documentation at https://melpa.org/#/goggles")
    (license #f)))

(define-public emacs-gold-mode
  (package
    (name "emacs-gold-mode")
    (version "20140607.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/gold-mode-el.git")
               (commit
                 "6d3aa59602b1b835495271c8c9741ac344c2eab1")))
        (sha256
          (base32
            "1k4i9z9h4m0h0y92mncr96jir63q5h1bix5bpnlfxhxl5w8pvk1q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sws-mode))
    (home-page
      "https://github.com/yuutayamada/gold-mode-el")
    (synopsis "Major mode for editing .gold files")
    (description
      "Documentation at https://melpa.org/#/gold-mode")
    (license #f)))

(define-public emacs-golden-ratio
  (package
    (name "emacs-golden-ratio")
    (version "20230912.1825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roman/golden-ratio.el.git")
               (commit
                 "375c9f287dfad68829582c1e0a67d0c18119dab9")))
        (sha256
          (base32
            "0a635a3h6jx0clgwmhwc48i14y3xy5q29y37lp2sjnbxx1hlmkli"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatic resizing of Emacs windows to the golden ratio")
    (description
      "Documentation at https://melpa.org/#/golden-ratio")
    (license #f)))

(define-public emacs-golden-ratio-scroll-screen
  (package
    (name "emacs-golden-ratio-scroll-screen")
    (version "20221102.240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/golden-ratio-scroll-screen.git")
               (commit
                 "ed82ac7e9129c7be5983b44def0b9239b54d4dcf")))
        (sha256
          (base32
            "12w5xdpnmpqyf3phl4y822w3sz84x2a0xv2jqkhzz0paywn1abb6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jixiuf/golden-ratio-scroll-screen")
    (synopsis
      "Scroll half screen down or up, and highlight current line")
    (description
      "Documentation at https://melpa.org/#/golden-ratio-scroll-screen")
    (license #f)))

(define-public emacs-golint
  (package
    (name "emacs-golint")
    (version "20180221.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/golang/lint.git")
               (commit
                 "6edffad5e6160f5949cdefc81710b2706fbcd4f6")))
        (sha256
          (base32
            "1n7lrr3282q3li4f06afms444qy13rfd316za0drqihakwyki2jk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/emacs/*.el")))
    (home-page "https://github.com/golang/lint")
    (synopsis "lint for the Go source code")
    (description
      "Documentation at https://melpa.org/#/golint")
    (license #f)))

(define-public emacs-gom-mode
  (package
    (name "emacs-gom-mode")
    (version "20131008.253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/gom-mode.git")
               (commit
                 "972e33df1d38ff323bc97de87477305826013701")))
        (sha256
          (base32
            "1anjzlg53kjdqfjcdahbxy8zk9hdha075c1f9nzrnnbbqvmirbbb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-gom-mode")
    (synopsis "Major mode for Gomfile")
    (description
      "Documentation at https://melpa.org/#/gom-mode")
    (license #f)))

(define-public emacs-gomacro-mode
  (package
    (name "emacs-gomacro-mode")
    (version "20200326.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/storvik/gomacro-mode.git")
               (commit
                 "3112e56d2d5e645a3e0fd877f3e810dbccbf989f")))
        (sha256
          (base32
            "1f3y46q7djr1riz7x26gc7a1gf9p8sfdrnlqyiwzmi9vkk6h8wdz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page
      "https://github.com/storvik/gomacro-mode")
    (synopsis "Gomacro mode and Go REPL integration")
    (description
      "Documentation at https://melpa.org/#/gomacro-mode")
    (license #f)))

(define-public emacs-good-scroll
  (package
    (name "emacs-good-scroll")
    (version "20211101.942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/io12/good-scroll.el.git")
               (commit
                 "a7ffd5c0e5935cebd545a0570f64949077f71ee3")))
        (sha256
          (base32
            "0f1zs3fjz5yc25qjka5g60018554ssdbp4j7xj275pmzrc78915w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/io12/good-scroll.el")
    (synopsis "Good pixel line scrolling")
    (description
      "Documentation at https://melpa.org/#/good-scroll")
    (license #f)))

(define-public emacs-google
  (package
    (name "emacs-google")
    (version "20140416.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hober/google-el.git")
               (commit
                 "3b3189a8b201c8d36fed6e61496274e530dd40bd")))
        (sha256
          (base32
            "06p1dpnmg7lhdff1g7c04qq8f9srgkmnm42jlqy85k87j3p5ys2i"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs interface to the Google API")
    (description
      "Documentation at https://melpa.org/#/google")
    (license #f)))

(define-public emacs-google-c-style
  (package
    (name "emacs-google-c-style")
    (version "20220210.1659")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/styleguide.git")
               (commit
                 "af78b49ac4fef8083094d5105f72528ee7d09073")))
        (sha256
          (base32
            "00vryh0h5sc72f49172nxnxwkphw811k58ivkmal97zd2v3m6w7g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Google's C/C++ style for c-mode")
    (description
      "Documentation at https://melpa.org/#/google-c-style")
    (license #f)))

(define-public emacs-google-contacts
  (package
    (name "emacs-google-contacts")
    (version "20201012.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/google-contacts.el.git")
               (commit
                 "8923c238fe0906184d2254b33ba72792ed12cd47")))
        (sha256
          (base32
            "0s07bcd1d9z9y0cl68baikcf3b781r4r1xi04yyi65l25ds36pg3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-oauth2))
    (home-page
      "https://github.com/jd/google-contacts.el")
    (synopsis "Support for Google Contacts in Emacs")
    (description
      "Documentation at https://melpa.org/#/google-contacts")
    (license #f)))

(define-public emacs-google-maps
  (package
    (name "emacs-google-maps")
    (version "20181121.1532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/google-maps.el.git")
               (commit
                 "2eb16ff609f5a9f8d02c15238a111fbb7db6c146")))
        (sha256
          (base32
            "1bl0dnksbf14d0xcnvdy9qpvzc5c8jwkxpmfvgayj6djikxnw2md"))))
    (build-system melpa-build-system)
    (home-page
      "https://julien.danjou.info/projects/emacs-packages#google-maps")
    (synopsis "Access Google Maps from Emacs")
    (description
      "Documentation at https://melpa.org/#/google-maps")
    (license #f)))

(define-public emacs-google-this
  (package
    (name "emacs-google-this")
    (version "20170810.1215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/emacs-google-this.git")
               (commit
                 "8a2e3ca5da6a8c89bfe99a21486c6c7db125dc84")))
        (sha256
          (base32
            "1dbra309w8awmi0g0pp7r2dm9nwrj2j9lpl7md8wa89rnzazwahl"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("google-this.el")))
    (home-page
      "http://github.com/Malabarba/emacs-google-this")
    (synopsis
      "A set of functions and bindings to google under point.")
    (description
      "Documentation at https://melpa.org/#/google-this")
    (license #f)))

(define-public emacs-google-translate
  (package
    (name "emacs-google-translate")
    (version "20220921.245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atykhonov/google-translate.git")
               (commit
                 "e60dd6eeb9cdb931d9d8bfbefc29a48ef9a21bd9")))
        (sha256
          (base32
            "07w3vcinb4wzcancfmhi7ips6dr2lg6va1xlm74kvk5n8vqafp8a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/atykhonov/google-translate")
    (synopsis "Emacs interface to Google Translate")
    (description
      "Documentation at https://melpa.org/#/google-translate")
    (license #f)))

(define-public emacs-goose-theme
  (package
    (name "emacs-goose-theme")
    (version "20160828.1245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tokenrove/goose-theme.git")
               (commit
                 "acd017b50ab25a75fd1331eb3de66467e2042e9c")))
        (sha256
          (base32
            "1mmdvjsgnwgs6akhyj96fgj30mz53djdq85dl5q4cmiznlbma7hy"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/thwg/goose-theme")
    (synopsis "A gray color theme")
    (description
      "Documentation at https://melpa.org/#/goose-theme")
    (license #f)))

(define-public emacs-gore-mode
  (package
    (name "emacs-gore-mode")
    (version "20151123.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergey-pashaev/gore-mode.git")
               (commit
                 "94d7f3e99104e06167967c98fdc201049c433c2d")))
        (sha256
          (base32
            "0l022aqpnb38q6kgdqpbxrc1r7fljwl7xq14yi5jb7qgzw2v43cz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-go-mode))
    (home-page "unspecified")
    (synopsis
      "Simple mode for gore, a command-line evaluator for golang.")
    (description
      "Documentation at https://melpa.org/#/gore-mode")
    (license #f)))

(define-public emacs-gorepl-mode
  (package
    (name "emacs-gorepl-mode")
    (version "20170905.945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/manute/gorepl-mode.git")
               (commit
                 "6a73bf352e8d893f89cad36c958c4db2b5e35e07")))
        (sha256
          (base32
            "0ydiq55ylm8ph2r5nlv9p7a5bnnxk3c9731l7mbzdhd43f734dld"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-hydra))
    (home-page
      "http://www.github.com/manute/gorepl-mode")
    (synopsis
      "Go REPL Interactive Development in top of Gore")
    (description
      "Documentation at https://melpa.org/#/gorepl-mode")
    (license #f)))

(define-public emacs-gotest
  (package
    (name "emacs-gotest")
    (version "20230221.945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/gotest.el.git")
               (commit
                 "490189e68d743a851bfb42d0017428a7550e8615")))
        (sha256
          (base32
            "19lpr9wa73415jmdl1acijz54h5sdsj95wxigigbiqdhq6pd301p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "https://github.com/nlamirault/gotest.el")
    (synopsis "Launch GO unit tests")
    (description
      "Documentation at https://melpa.org/#/gotest")
    (license #f)))

(define-public emacs-gotham-theme
  (package
    (name "emacs-gotham-theme")
    (version "20220107.1730")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/gotham-theme-"
               version
               ".el"))
        (sha256
          (base32
            "0gvvwg6jbgsfr39p7kcgp3b04gb55aybpdd2vaclvmznjxahqbis"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/gotham-theme")
    (synopsis "A very dark Emacs color theme")
    (description
      "Documentation at https://melpa.org/#/gotham-theme")
    (license #f)))

(define-public emacs-goto-char-preview
  (package
    (name "emacs-goto-char-preview")
    (version "20230111.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/goto-char-preview.git")
               (commit
                 "feee79f83194155e67f5b16ca57b51b2d941b2ee")))
        (sha256
          (base32
            "19qnf1x0kysxjfx4dkl13f7cfv6s1cqmcjbnmmjvk7x8mah88qx2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-vs/goto-char-preview")
    (synopsis
      "Preview character when executing `goto-char` command")
    (description
      "Documentation at https://melpa.org/#/goto-char-preview")
    (license #f)))

(define-public emacs-goto-chg
  (package
    (name "emacs-goto-chg")
    (version "20220107.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-evil/goto-chg.git")
               (commit
                 "278cd3e6d5107693aa2bb33189ca503f22f227d0")))
        (sha256
          (base32
            "0rgdzhan4n5bd78wvivacqkp0g7jvnwzgh0571p2m4yra09a36mv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-evil/goto-chg")
    (synopsis "Go to last change")
    (description
      "Documentation at https://melpa.org/#/goto-chg")
    (license #f)))

(define-public emacs-goto-last-change
  (package
    (name "emacs-goto-last-change")
    (version "20150109.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/camdez/goto-last-change.el.git")
               (commit
                 "58b0928bc255b47aad318cd183a5dce8f62199cc")))
        (sha256
          (base32
            "1f0zlvva7d7iza1v79yjp0bm7vd011q4cy14g1saryll32z115z5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/camdez/goto-last-change.el")
    (synopsis
      "Move point through buffer-undo-list positions")
    (description
      "Documentation at https://melpa.org/#/goto-last-change")
    (license #f)))

(define-public emacs-goto-last-point
  (package
    (name "emacs-goto-last-point")
    (version "20230406.1822")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/goto-last-point-"
               version
               ".tar"))
        (sha256
          (base32
            "0df55m4yi0arvsjy3359vcpx4q0hxfyghsq53y0hdywpvnxgydja"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/manuel-uberti/goto-last-point")
    (synopsis
      "Record and jump to the last point in the buffer")
    (description
      "Documentation at https://melpa.org/#/goto-last-point")
    (license #f)))

(define-public emacs-goto-line-preview
  (package
    (name "emacs-goto-line-preview")
    (version "20230111.1531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/goto-line-preview.git")
               (commit
                 "c6db484cf401351f7f2f57496b0466b774435947")))
        (sha256
          (base32
            "0wzc5vaw461lzwhs1d9b479ns8wgil528np6xs5rqr3czsm61k44"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-vs/goto-line-preview")
    (synopsis
      "Preview line when executing `goto-line` command")
    (description
      "Documentation at https://melpa.org/#/goto-line-preview")
    (license #f)))

(define-public emacs-govc
  (package
    (name "emacs-govc")
    (version "20230927.1905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vmware/govmomi.git")
               (commit
                 "8726f228c54e3f25c9c1c7a4b58db0b45d30598e")))
        (sha256
          (base32
            "1djsr5dip4y96sknzabv4rnvl93j3aic17wnyni7gdxbj7l7hwci"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-magit-popup
            emacs-json-mode))
    (arguments '(#:files ("govc/emacs/*.el")))
    (home-page
      "https://github.com/vmware/govmomi/tree/main/govc/emacs")
    (synopsis
      "Interface to govc for managing VMware ESXi and vCenter")
    (description
      "Documentation at https://melpa.org/#/govc")
    (license #f)))

(define-public emacs-govet
  (package
    (name "emacs-govet")
    (version "20170808.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meshelton/govet.git")
               (commit
                 "1c05817cf8b96589076c7ac4e52ee58a860a0cbf")))
        (sha256
          (base32
            "1n223i87xmk8p8h8dswnhhvazy0z53dzl36gmk9y7ck8bd9vz706"))))
    (build-system melpa-build-system)
    (home-page
      "https://godoc.org/golang.org/x/tools/cmd/vet")
    (synopsis
      "linter/problem finder for the Go source code")
    (description
      "Documentation at https://melpa.org/#/govet")
    (license #f)))

(define-public emacs-gpastel
  (package
    (name "emacs-gpastel")
    (version "20231030.713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/gpastel.git")
               (commit
                 "d35505abb1e38ddda61440b033ebd4decac7a25c")))
        (sha256
          (base32
            "0h4g3fjvxn7r7zikxf62znabspnkr9a1wfrs4ij20vb6pzs95lkj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/gpastel")
    (synopsis "Integrates GPaste with the kill-ring")
    (description
      "Documentation at https://melpa.org/#/gpastel")
    (license #f)))

(define-public emacs-gpr-ts-mode
  (package
    (name "emacs-gpr-ts-mode")
    (version "20230813.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brownts/gpr-ts-mode.git")
               (commit
                 "2e4f89743b115b3e09f0574d0a6e67a7422c554c")))
        (sha256
          (base32
            "0g5pxggra2ijlfyw25bp4j8i741pmn0mxy0srqdwvhjlmpy57nhr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brownts/gpr-ts-mode")
    (synopsis
      "Major mode for GNAT project files using Tree-Sitter")
    (description
      "Documentation at https://melpa.org/#/gpr-ts-mode")
    (license #f)))

(define-public emacs-gpr-yasnippets
  (package
    (name "emacs-gpr-yasnippets")
    (version "20230516.627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brownts/gpr-yasnippets.git")
               (commit
                 "d66ea90e8e45f6d0c3bd62185967c26190117296")))
        (sha256
          (base32
            "1j2dwdzb3xgjmcf7b9vx6p4yc7f6f3ryi2lcnq1c6666j8rgiz86"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/brownts/gpr-yasnippets")
    (synopsis "Yasnippets for GNAT project files")
    (description
      "Documentation at https://melpa.org/#/gpr-yasnippets")
    (license #f)))

(define-public emacs-gpt
  (package
    (name "emacs-gpt")
    (version "20231108.150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stuhlmueller/gpt.el.git")
               (commit
                 "fb0ab4b1e95a6ba97c09ff072fc91ac7c7f22afa")))
        (sha256
          (base32
            "0vqxf5zfsaa1ddqp80fhyyfpgpi5my1dzxpsd9zzbf7cma383r00"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "gpt.py")))
    (home-page
      "https://github.com/stuhlmueller/gpt.el")
    (synopsis
      "Run instruction-following language models")
    (description
      "Documentation at https://melpa.org/#/gpt")
    (license #f)))

(define-public emacs-gpt-commit
  (package
    (name "emacs-gpt-commit")
    (version "20230716.331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ywkim/gpt-commit.git")
               (commit
                 "66badff3de08055f69b9ff892f9d6580b01268db")))
        (sha256
          (base32
            "1xvs8x083l0xd0qdw13vcd38q27wm6yya2njvsd4583w1bxb1v32"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-request))
    (home-page "https://github.com/ywkim/gpt-commit")
    (synopsis "Commit messages with GPT in Emacs")
    (description
      "Documentation at https://melpa.org/#/gpt-commit")
    (license #f)))

(define-public emacs-gptai
  (package
    (name "emacs-gptai")
    (version "20230530.1853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antonhibl/gptai.git")
               (commit
                 "e7b8b91b425986868e8bc0edcac384ba47d4d4b7")))
        (sha256
          (base32
            "0qp051vz0jpb2db3724vrv7g2hrpvrsqyvq1zzpxf3360pqfsjhc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/antonhibl/gptai")
    (synopsis "Integrate with the OpenAI API")
    (description
      "Documentation at https://melpa.org/#/gptai")
    (license #f)))

(define-public emacs-gptel
  (package
    (name "emacs-gptel")
    (version "20231108.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/gptel.git")
               (commit
                 "0109d0d1c067aee8fc3228f1f34d766043258cc3")))
        (sha256
          (base32
            "15lwqgydkzqc4zp9dfyiqlphm14pr5f588gwi8pxw36dmpgik927"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/karthink/gptel")
    (synopsis "A simple multi-LLM client")
    (description
      "Documentation at https://melpa.org/#/gptel")
    (license #f)))

(define-public emacs-grab-mac-link
  (package
    (name "emacs-grab-mac-link")
    (version "20210511.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/grab-mac-link.el.git")
               (commit
                 "2c722016ca01bd4265d57c4a7d55712c94cf4ea5")))
        (sha256
          (base32
            "1019304mw72swkw1dkhbcrfl0acg6gj0m1cwg2w8d89dba2ddbw8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/grab-mac-link.el")
    (synopsis
      "Grab link from Mac Apps and insert it into Emacs")
    (description
      "Documentation at https://melpa.org/#/grab-mac-link")
    (license #f)))

(define-public emacs-grab-x-link
  (package
    (name "emacs-grab-x-link")
    (version "20191113.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/grab-x-link.git")
               (commit
                 "d898db46e4864118359fdedfe915e180de3fe290")))
        (sha256
          (base32
            "0npz0da2rcckv0zcf2f8vpjcdnii3z99x6c5c4z7jd4xgkp004xs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/grab-x-link")
    (synopsis
      "Grab links from X11 apps and insert into Emacs")
    (description
      "Documentation at https://melpa.org/#/grab-x-link")
    (license #f)))

(define-public emacs-gradle-mode
  (package
    (name "emacs-gradle-mode")
    (version "20150313.1905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacobono/emacs-gradle-mode.git")
               (commit
                 "e4d665d5784ecda7ddfba015f07c69be3cfc45f2")))
        (sha256
          (base32
            "0xs2278gamzg0710bm1fkhjh1p75m2l1jcl98ldhyjhvaf9d0ysc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/jacobono/emacs-gradle-mode")
    (synopsis
      "Gradle integration with Emacs' compile")
    (description
      "Documentation at https://melpa.org/#/gradle-mode")
    (license #f)))

(define-public emacs-grails
  (package
    (name "emacs-grails")
    (version "20221110.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lifeisfoo/emacs-grails.git")
               (commit
                 "3019f86e555ee94388795a0475cfa213e3897bbb")))
        (sha256
          (base32
            "17kl8fc1s72in3bq10mv25xrkvz3rx065fz0xq94q00wjwkmm5ry"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lifeisfoo/emacs-grails")
    (synopsis "Minor mode for Grails projects")
    (description
      "Documentation at https://melpa.org/#/grails")
    (license #f)))

(define-public emacs-grails-mode
  (package
    (name "emacs-grails-mode")
    (version "20220407.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes.git")
               (commit
                 "29210e5a969c02169b68e04f2e28e3bf2fc13363")))
        (sha256
          (base32
            "1m1j5c7pjs4iv39m8axxp5cq648misvhh7fyyfs22lv3yf805q1l"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("grails-mode.el")))
    (home-page "http://blog.wolfman.com")
    (synopsis
      "minor-mode that adds some Grails project management to a grails project")
    (description
      "Documentation at https://melpa.org/#/grails-mode")
    (license #f)))

(define-public emacs-grammarly
  (package
    (name "emacs-grammarly")
    (version "20221231.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/grammarly.git")
               (commit
                 "0d9fbee337cb8dd316e5dcf0bff91e44c115dd0d")))
        (sha256
          (base32
            "1ljlfnvlp7lpr6sc89xnp8jy5m0n5sfrcs43y60b0wnvxxj4w1k9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-request emacs-websocket))
    (home-page
      "https://github.com/emacs-grammarly/grammarly")
    (synopsis "Grammarly API interface")
    (description
      "Documentation at https://melpa.org/#/grammarly")
    (license #f)))

(define-public emacs-grandshell-theme
  (package
    (name "emacs-grandshell-theme")
    (version "20180606.517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/grandshell-theme.git")
               (commit
                 "0ed8e4273607dd4fcaa742b4097259233b09eda6")))
        (sha256
          (base32
            "04vx5p1ffln5b9rxgfi15q735plxcjvskby3c5k4slgwf4p91bpq"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/grandshell-theme")
    (synopsis
      "Dark color theme for Emacs > 24 with intensive colors.")
    (description
      "Documentation at https://melpa.org/#/grandshell-theme")
    (license #f)))

(define-public emacs-graphene
  (package
    (name "emacs-graphene")
    (version "20180529.1112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/graphene.git")
               (commit
                 "cc8477fcfb7771ea4e5bbaf3c01f9e679234c1c1")))
        (sha256
          (base32
            "0j0igcmfl61c4pakqmyxpwr4kjar9i81vkl84rw19phc7k9497nb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-exec-path-from-shell
            emacs-ppd-sr-speedbar
            emacs-sr-speedbar
            emacs-ido-completing-read+
            emacs-smex
            emacs-web-mode
            emacs-smartparens
            emacs-graphene-meta-theme
            emacs-flycheck
            emacs-company))
    (arguments '(#:files ("lib/*")))
    (home-page
      "https://github.com/rdallasgray/graphene")
    (synopsis "Friendly Emacs defaults")
    (description
      "Documentation at https://melpa.org/#/graphene")
    (license #f)))

(define-public emacs-graphene-meta-theme
  (package
    (name "emacs-graphene-meta-theme")
    (version "20180615.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/graphene-meta-theme.git")
               (commit
                 "a4deb38957ee2aeb861d5601b304bf28d9f867ec")))
        (sha256
          (base32
            "0d85xny9zvp3aaz07bgv6n9z7g53dbyh7w61c1pjv6bb0zdinp4j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rdallasgray/graphene")
    (synopsis
      "Integrated theming for common packages")
    (description
      "Documentation at https://melpa.org/#/graphene-meta-theme")
    (license #f)))

(define-public emacs-graphql
  (package
    (name "emacs-graphql")
    (version "20221128.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/graphql.el.git")
               (commit
                 "b57b5ca5d2d0837e1fb4a4f30c051d5f3e643f0f")))
        (sha256
          (base32
            "18k2c2b7y5qgc7qpkqjmz1nv61w470ja3vwprmy5dlkzficzqsvf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vermiculus/graphql.el")
    (synopsis "GraphQL utilities")
    (description
      "Documentation at https://melpa.org/#/graphql")
    (license #f)))

(define-public emacs-graphql-doc
  (package
    (name "emacs-graphql-doc")
    (version "20220527.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ifitzpatrick/graphql-doc.el.git")
               (commit
                 "d37140267e0c426c7c18aff31900aa1650257394")))
        (sha256
          (base32
            "008wnng94pm2p1xjpbvzzm2l29yq1635j45xywgcj66vknsvvijg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-promise))
    (home-page
      "https://github.com/ifitzpatrick/graphql-doc.el")
    (synopsis "GraphQL Documentation Explorer")
    (description
      "Documentation at https://melpa.org/#/graphql-doc")
    (license #f)))

(define-public emacs-graphql-mode
  (package
    (name "emacs-graphql-mode")
    (version "20230923.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davazp/graphql-mode.git")
               (commit
                 "49a391b5290e3354b07f7b77ded97a154c084f46")))
        (sha256
          (base32
            "15hzpcyc73ixlqm4bnl60n07lvci76wgj7d3fc0wanvmfwqhp6py"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davazp/graphql-mode")
    (synopsis
      "Major mode for editing GraphQL schemas")
    (description
      "Documentation at https://melpa.org/#/graphql-mode")
    (license #f)))

(define-public emacs-graphql-ts-mode
  (package
    (name "emacs-graphql-ts-mode")
    (version "20230911.2036")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/graphql-ts-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "157qc5j6cj22j4qdql3y51d1bmppn2b6m0iibfa1jfns7hk85i4n"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~joram/graphql-ts-mode/")
    (synopsis "Tree-sitter support for GraphQL")
    (description
      "Documentation at https://melpa.org/#/graphql-ts-mode")
    (license #f)))

(define-public emacs-graphviz-dot-mode
  (package
    (name "emacs-graphviz-dot-mode")
    (version "20230325.1050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ppareit/graphviz-dot-mode.git")
               (commit
                 "8ff793b13707cb511875f56e167ff7f980a31136")))
        (sha256
          (base32
            "02z2qyzqvwyqighzsgn1v0s72lq28j5h039qbaf8gcmn7mipif0r"))))
    (build-system melpa-build-system)
    (home-page
      "https://ppareit.github.io/graphviz-dot-mode/")
    (synopsis
      "Mode for the dot-language used by graphviz (att).")
    (description
      "Documentation at https://melpa.org/#/graphviz-dot-mode")
    (license #f)))

(define-public emacs-grapnel
  (package
    (name "emacs-grapnel")
    (version "20131001.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/grapnel.git")
               (commit
                 "fbd0f9a51139973d35e4014855964fa435e8ecaf")))
        (sha256
          (base32
            "0nvl8mh7jxailisq31h5bi64s9b74ah1465wiwh18x502swr2s3c"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("grapnel.el")))
    (home-page
      "http://www.github.com/leathekd/grapnel")
    (synopsis
      "HTTP request lib with flexible callback dispatch")
    (description
      "Documentation at https://melpa.org/#/grapnel")
    (license #f)))

(define-public emacs-grass-mode
  (package
    (name "emacs-grass-mode")
    (version "20170503.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plantarum/grass-mode.git")
               (commit
                 "8a7e9dcb2295eef1ec25d886b05e09c876bd8398")))
        (sha256
          (base32
            "023s9kn012z6m4aprsq77zv4kvfvwfics5gcdja7ig4xwqqrzymq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Provides Emacs modes for interacting with the GRASS GIS program")
    (description
      "Documentation at https://melpa.org/#/grass-mode")
    (license #f)))

(define-public emacs-grayscale-theme
  (package
    (name "emacs-grayscale-theme")
    (version "20171005.802")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/belak/emacs-grayscale-theme.git")
               (commit
                 "53ad50e10e68f2f076ebfc96e10ecef7a932d38d")))
        (sha256
          (base32
            "034pa35cjl07bhqdyw3xrcl97xcdg7jg0jvgn034fs3hssmsyxgv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/belak/emacs-grayscale-theme")
    (synopsis "A simple grayscale theme")
    (description
      "Documentation at https://melpa.org/#/grayscale-theme")
    (license #f)))

(define-public emacs-greek-polytonic
  (package
    (name "emacs-greek-polytonic")
    (version "20190303.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhanschoo/greek-polytonic.git")
               (commit
                 "114cba0f57cc077871693c799b807df2292341ec")))
        (sha256
          (base32
            "09prvjnhvirip6s0rlsp7pyyaj9xswvvjskxb2977ymki8ijxmqf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jhanschoo/greek-polytonic")
    (synopsis
      "Quail package for inputting polytonic Greek")
    (description
      "Documentation at https://melpa.org/#/greek-polytonic")
    (license #f)))

(define-public emacs-green-is-the-new-black-theme
  (package
    (name "emacs-green-is-the-new-black-theme")
    (version "20230828.2225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fredcamps/green-is-the-new-black-emacs.git")
               (commit
                 "ad6f349e7e3a626f790af994424d3f015ac0d3ee")))
        (sha256
          (base32
            "0av0slr1cf5a2a7y9nfjcdxmyjzajdsgncdjaqz7rqcz2m2sdsxd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fredcamps/green-is-the-new-black-emacs")
    (synopsis
      "A cool and minimalist green blackened theme engine")
    (description
      "Documentation at https://melpa.org/#/green-is-the-new-black-theme")
    (license #f)))

(define-public emacs-green-phosphor-theme
  (package
    (name "emacs-green-phosphor-theme")
    (version "20150515.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aalpern/emacs-color-theme-green-phosphor.git")
               (commit
                 "fa42f598626adfdc5450e5c380fa2d5df6110f28")))
        (sha256
          (base32
            "0rgv96caigcjffg1983274p4ff1icx1xh5bj7rcd53hai5ag16mp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aalpern/emacs-color-theme-green-phosphor")
    (synopsis
      "A light color theme with muted, autumnal colors.")
    (description
      "Documentation at https://melpa.org/#/green-phosphor-theme")
    (license #f)))

(define-public emacs-green-screen-theme
  (package
    (name "emacs-green-screen-theme")
    (version "20180816.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rbanffy/green-screen-emacs.git")
               (commit
                 "774e8f6c033786406267f71ec07319d906a30b75")))
        (sha256
          (base32
            "0f12lqgfi1vlhq8p5ia04vlmvmyb4f40q7dm2nbh5y8r6k89hisg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rbanffy/green-screen-emacs")
    (synopsis
      "A nice color theme for those who miss green CRTs")
    (description
      "Documentation at https://melpa.org/#/green-screen-theme")
    (license #f)))

(define-public emacs-gregorio-mode
  (package
    (name "emacs-gregorio-mode")
    (version "20170705.1451")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jsrjenkins/gregorio-mode.git")
               (commit
                 "736fd3d05fb67f707cca1a7ce24e3ee7ca5e9567")))
        (sha256
          (base32
            "1w13a3irak6i74kl7va8d2simd2kjvw5253s8jvapi1mg4ifw379"))))
    (build-system melpa-build-system)
    (home-page
      "https://jsrjenkins.github.io/gregorio-mode/")
    (synopsis "Gregorio Mode for .gabc files")
    (description
      "Documentation at https://melpa.org/#/gregorio-mode")
    (license #f)))

(define-public emacs-grep-a-lot
  (package
    (name "emacs-grep-a-lot")
    (version "20210618.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ZungBang/emacs-grep-a-lot.git")
               (commit
                 "223819dbea049bdeb5f97f9849fce139a5f16a75")))
        (sha256
          (base32
            "06rrbwb5ms2m3mhsg1l4hqnn7x379019kkdfm8gys5kxv4mfp22l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ZungBang/emacs-grep-a-lot")
    (synopsis
      "manages multiple search results buffers for grep.el")
    (description
      "Documentation at https://melpa.org/#/grep-a-lot")
    (license #f)))

(define-public emacs-grey-paper-theme
  (package
    (name "emacs-grey-paper-theme")
    (version "20230415.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gugod/grey-paper-theme.git")
               (commit
                 "4e5b8a31f586e2aa5c5d9bd939f0f518d919522e")))
        (sha256
          (base32
            "13vnl4gm1id1r30wdn91czj24m12zq3nkzs2a4i7p5g8r2pvygdl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gugod/grey-paper-theme")
    (synopsis
      "A greyscale theme with look-n-feel of an eink display")
    (description
      "Documentation at https://melpa.org/#/grey-paper-theme")
    (license #f)))

(define-public emacs-greymatters-theme
  (package
    (name "emacs-greymatters-theme")
    (version "20150621.1123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/greymatters-theme.git")
               (commit
                 "a7220a8c6cf18ccae2b76946b6f01188a7c9d5d1")))
        (sha256
          (base32
            "14c09m9p6556rrf0qfad4zsv7qxa5flamzg6fa83cxh0qfg7wjbp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/greymatters-theme")
    (license #f)))

(define-public emacs-grip-mode
  (package
    (name "emacs-grip-mode")
    (version "20230206.323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/grip-mode.git")
               (commit
                 "5809fb62f6dd7b4bfa7685203aaa1474fca70f4e")))
        (sha256
          (base32
            "0xs48g2xk7dvi0ywsqdy9y6hriizyy2qhpdy1hmbkcn8midlzmkm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/seagle0128/grip-mode")
    (synopsis
      "Instant GitHub-flavored Markdown/Org preview using grip.")
    (description
      "Documentation at https://melpa.org/#/grip-mode")
    (license #f)))

(define-public emacs-grizzl
  (package
    (name "emacs-grizzl")
    (version "20160818.737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grizzl/grizzl.git")
               (commit
                 "1e917253ce2b846f0272b8356fad3dbff9cd513a")))
        (sha256
          (base32
            "1hw932zvhyxajdgd0h18vr3w0sr0vp4334phlr1aysv7rjfgnpkr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/grizzl/grizzl")
    (synopsis "Fast fuzzy search index for Emacs.")
    (description
      "Documentation at https://melpa.org/#/grizzl")
    (license #f)))

(define-public emacs-groovy-imports
  (package
    (name "emacs-groovy-imports")
    (version "20210505.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mbezjak/emacs-groovy-imports.git")
               (commit
                 "a60c3202973e3185091db623d960f71840a22205")))
        (sha256
          (base32
            "1bsmf64ycmfnsb0r0nyaky1h3x2fpr4qyck3ihw16pa6d7spaw8c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-pcache))
    (home-page
      "http://www.github.com/mbezjak/emacs-groovy-imports")
    (synopsis "Code for dealing with Groovy imports")
    (description
      "Documentation at https://melpa.org/#/groovy-imports")
    (license #f)))

(define-public emacs-groovy-mode
  (package
    (name "emacs-groovy-mode")
    (version "20230318.533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes.git")
               (commit
                 "7b8520b2e2d3ab1d62b35c426e17ac25ed0120bb")))
        (sha256
          (base32
            "0190k4hbc3pjxf7zs2ckp4c7z4rbb7nsam2kmw8mvkyj7kq5gb8d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments '(#:files ("*groovy*.el")))
    (home-page
      "https://github.com/Groovy-Emacs-Modes/groovy-emacs-modes")
    (synopsis "Major mode for Groovy source files")
    (description
      "Documentation at https://melpa.org/#/groovy-mode")
    (license #f)))

(define-public emacs-gruber-darker-theme
  (package
    (name "emacs-gruber-darker-theme")
    (version "20231026.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/gruber-darker-theme.git")
               (commit
                 "2e9f99c41fe8ef0557e9ea0f3b94ef50c68b5557")))
        (sha256
          (base32
            "07076fwxqi04ri8hmxjpf348lc4ms2lgjdzk8009sliixhh0mdzl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rexim/gruber-darker-theme")
    (synopsis
      "Gruber Darker color theme for Emacs 24.")
    (description
      "Documentation at https://melpa.org/#/gruber-darker-theme")
    (license #f)))

(define-public emacs-grugru
  (package
    (name "emacs-grugru")
    (version "20230121.1825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/grugru.git")
               (commit
                 "088f26330be161cfad4835e155595ec60dcb335a")))
        (sha256
          (base32
            "094kwvm136nw3p1l2bxkbp97qnsg46g0b3mgskm323bcdggj1g12"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/grugru")
    (synopsis "Rotate text at point")
    (description
      "Documentation at https://melpa.org/#/grugru")
    (license #f)))

(define-public emacs-grunt
  (package
    (name "emacs-grunt")
    (version "20160316.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gempesaw/grunt.el.git")
               (commit
                 "4c269e2738658643ec2ed9ef61a2a3d71b08d304")))
        (sha256
          (base32
            "1xd6gv9bkqnj7j5mcnwvl1mxjmzvxqhp135hxj0ijc0ybdybacf7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/gempesaw/grunt.el")
    (synopsis
      "Some glue to stick Emacs and Gruntfiles together")
    (description
      "Documentation at https://melpa.org/#/grunt")
    (license #f)))

(define-public emacs-gruvbox-theme
  (package
    (name "emacs-gruvbox-theme")
    (version "20230921.120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/greduan/emacs-theme-gruvbox.git")
               (commit
                 "9ee1159acd15ee014d5643cdaa4e00e06efa6d63")))
        (sha256
          (base32
            "1nm0rspn7d53ymcmgvnk69rnlzcqn87m332dncwzj9d2f4mz1l6b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://github.com/greduan/emacs-theme-gruvbox")
    (synopsis
      "A retro-groove colour theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/gruvbox-theme")
    (license #f)))

(define-public emacs-gs-mode
  (package
    (name "emacs-gs-mode")
    (version "20151202.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyr/emacs-grads.git")
               (commit
                 "1a13051db21b999c7682a015b33a03096ff9d891")))
        (sha256
          (base32
            "1d89gxyzv0z0nk7v1aa4qa0xfms2g2dsrr07cw0d99xsnyxfky31"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("gs-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing GrADS script files")
    (description
      "Documentation at https://melpa.org/#/gs-mode")
    (license #f)))

(define-public emacs-gscholar-bibtex
  (package
    (name "emacs-gscholar-bibtex")
    (version "20190130.555")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/gscholar-bibtex.git")
               (commit
                 "3b651e3de116860eb1f1aef9b547a561784871fe")))
        (sha256
          (base32
            "0wwjz4k1hsc1z489ygz4kh3dh23d7pnkgg2js07as7038hmhkjcb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)")
    (description
      "Documentation at https://melpa.org/#/gscholar-bibtex")
    (license #f)))

(define-public emacs-gsettings
  (package
    (name "emacs-gsettings")
    (version "20210407.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-gsettings.git")
               (commit
                 "9f9fb1fe946bbba46307c26355f355225ea7262a")))
        (sha256
          (base32
            "1pq18kz6dqk45ib70sch38ql63smpv7s80ik478ajjysks3882rc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-gvariant emacs-s))
    (home-page
      "https://github.com/wbolster/emacs-gsettings")
    (synopsis "GSettings (Gnome) helpers")
    (description
      "Documentation at https://melpa.org/#/gsettings")
    (license #f)))

(define-public emacs-gsnip
  (package
    (name "emacs-gsnip")
    (version "20220206.1526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaiwk/gsnip.git")
               (commit
                 "4d473b726b3f3b6bb7d1b5f66a9d368588ce0f86")))
        (sha256
          (base32
            "1slnvkpzhzffvnwyqr5bjgw84j0rapwr7mnaky9925l0rrv3fz6h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-aio emacs-log4e))
    (home-page
      "https://github.com/kaiwk/gitlab-snippet")
    (synopsis "A gitlab snippet client")
    (description
      "Documentation at https://melpa.org/#/gsnip")
    (license #f)))

(define-public emacs-gtk-pomodoro-indicator
  (package
    (name "emacs-gtk-pomodoro-indicator")
    (version "20191007.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/gtk-pomodoro-indicator.git")
               (commit
                 "338e6dca6d749cfc85195907bba593f9f6855715")))
        (sha256
          (base32
            "1nl2ji5wvmfzchxpnmsgxn4v2lybyymyyh99lw3riqg6gb0phl9l"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el" "*.py" "icons" "pomodoro_indicator")))
    (home-page
      "https://github.com/abo-abo/gtk-pomodoro-indicator")
    (synopsis
      "A pomodoro indicator for the GTK tray")
    (description
      "Documentation at https://melpa.org/#/gtk-pomodoro-indicator")
    (license #f)))

(define-public emacs-gtk-variant
  (package
    (name "emacs-gtk-variant")
    (version "20200416.2136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bepvte/gtk-variant.el.git")
               (commit
                 "e0653e4a654b7800dc15f7e1a06a956b77d2aabe")))
        (sha256
          (base32
            "0aclxzxsh0ixibnw86d8gcyq5yzbfqzmz02rh2djk7l27yg50f10"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bepvte/gtk-variant.el")
    (synopsis
      "Set the GTK theme variant (titlebar color)")
    (description
      "Documentation at https://melpa.org/#/gtk-variant")
    (license #f)))

(define-public emacs-guake
  (package
    (name "emacs-guake")
    (version "20221029.1811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-guake.git")
               (commit
                 "2753ce833b95bd1f042ac0e4b7adfe34975a88ed")))
        (sha256
          (base32
            "0j22rsvw5c2cm68s6r8zyydmwj8nn9v8npp7x8s8mcg1rlh00ifm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/emacs-guake")
    (synopsis "Interact with Guake via DBus")
    (description
      "Documentation at https://melpa.org/#/guake")
    (license #f)))

(define-public emacs-guess-language
  (package
    (name "emacs-guess-language")
    (version "20220408.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/guess-language.el.git")
               (commit
                 "b1fc363ca2c30b8a8ddaf2e366bca7770c8cfbec")))
        (sha256
          (base32
            "1sgzvi6ax05rfnjdlmhkd52sr26b6w3q1lfcrrv6rdzsifarh2iv"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("guess-language.el" "trigrams/*")))
    (home-page
      "https://github.com/tmalsburg/guess-language.el")
    (synopsis "Robust automatic language detection")
    (description
      "Documentation at https://melpa.org/#/guess-language")
    (license #f)))

(define-public emacs-guide-key
  (package
    (name "emacs-guide-key")
    (version "20150108.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kai2nenobu/guide-key.git")
               (commit
                 "8f8b839f42edd53af13d588254f07727108ae312")))
        (sha256
          (base32
            "0awx1s5qsg92flha8i0j72zg4kax2h2vi62qikk19sniiwdlrv4i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-popwin emacs-s))
    (home-page
      "https://github.com/kai2nenobu/guide-key")
    (synopsis
      "Guide the following key bindings automatically and dynamically")
    (description
      "Documentation at https://melpa.org/#/guide-key")
    (license #f)))

(define-public emacs-guide-key-tip
  (package
    (name "emacs-guide-key-tip")
    (version "20161011.823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/guide-key-tip.git")
               (commit
                 "02c5d4b0b65f3e91be5a47f0ff1ae5e86e00c64e")))
        (sha256
          (base32
            "1xkrfjmhprnj8i39a85wfcs5whm93fw8l57c606wdhiwqj719ciz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-guide-key emacs-pos-tip))
    (home-page
      "https://github.com/aki2o/guide-key-tip")
    (synopsis
      "Show guide-key.el hints using pos-tip.el")
    (description
      "Documentation at https://melpa.org/#/guide-key-tip")
    (license #f)))

(define-public emacs-guix
  (package
    (name "emacs-guix")
    (version "20231005.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.savannah.gnu.org/git/guix/emacs-guix.git")
               (commit
                 "9ce92d95d0246f9fe3d767eb718b24e1ee20d11c")))
        (sha256
          (base32
            "02vdbrz4v71pzm25w1ba1j1ks4rdlfrb1k7i1jdq0i42am2161q7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-geiser
            emacs-bui
            emacs-magit-popup
            emacs-edit-indirect))
    (arguments
      '(#:files
        ("elisp/*.el"
         "doc/*.texi"
         ("images" "images/*.svg")
         ("scheme" "scheme/*")
         (:exclude "scheme/Makefile.am"))))
    (home-page
      "https://emacs-guix.gitlab.io/website/")
    (synopsis "Interface for GNU Guix")
    (description
      "Documentation at https://melpa.org/#/guix")
    (license #f)))

(define-public emacs-gulp-task-runner
  (package
    (name "emacs-gulp-task-runner")
    (version "20170718.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/gulp-task-runner.git")
               (commit
                 "877990e956b1d71e2d9c7c3e5a129ad199b9debb")))
        (sha256
          (base32
            "13qy4x4ap43qm5w2vrsy6w01z2s2kymfr9qvlj2yri4xk3r4vrps"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Gulp task runner")
    (description
      "Documentation at https://melpa.org/#/gulp-task-runner")
    (license #f)))

(define-public emacs-gumshoe
  (package
    (name "emacs-gumshoe")
    (version "20230302.457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Overdr0ne/gumshoe.git")
               (commit
                 "3b65ee2496d6de3c7c47a821b38a5a19e0b64c2a")))
        (sha256
          (base32
            "1xs25f7di94fb32ahh6h5rkv37bn9vrdahkp0hp4c7s9jpvxf5im"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Overdr0ne/gumshoe")
    (synopsis
      "Scoped spatial and temporal POINT movement tracking")
    (description
      "Documentation at https://melpa.org/#/gumshoe")
    (license #f)))

(define-public emacs-guru-mode
  (package
    (name "emacs-guru-mode")
    (version "20211025.1157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/guru-mode.git")
               (commit
                 "a3370e547eab260d24774cd50ccbe865373c8631")))
        (sha256
          (base32
            "0h7d41l7rybljpb49hvkh14kc7bnh56rfrqzldpdry1qk3mr9bhj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("guru-mode.el")))
    (home-page
      "https://github.com/bbatsov/guru-mode")
    (synopsis "Become an Emacs guru")
    (description
      "Documentation at https://melpa.org/#/guru-mode")
    (license #f)))

(define-public emacs-gvariant
  (package
    (name "emacs-gvariant")
    (version "20210507.1310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-gvariant.git")
               (commit
                 "f2e87076845800cbaaeed67f175ad4e4a9c01e37")))
        (sha256
          (base32
            "1m6gwplzps0hykzszh0vh4rs48hcfi99vxb4i870y46lq2y8x2xb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parsec))
    (home-page
      "https://github.com/wbolster/emacs-gvariant")
    (synopsis "GVariant (GLib) helpers")
    (description
      "Documentation at https://melpa.org/#/gvariant")
    (license #f)))

(define-public emacs-gvpr-mode
  (package
    (name "emacs-gvpr-mode")
    (version "20201007.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rodw/gvpr-lib.git")
               (commit
                 "ef6ec2d4a4c9de68078c94a0e43b05bf77ec4674")))
        (sha256
          (base32
            "11g9gdn9b22fypk4nmjqbs04xkmqdxdgx0mzahwnqlpjv47q9sdg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("extra/*.el")))
    (home-page
      "https://raw.github.com/rodw/gvpr-lib/master/extra/gvpr-mode.el")
    (synopsis
      "A major mode offering basic syntax coloring for gvpr scripts.")
    (description
      "Documentation at https://melpa.org/#/gvpr-mode")
    (license #f)))

(define-public emacs-gxref
  (package
    (name "emacs-gxref")
    (version "20170411.1753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dedi/gxref.git")
               (commit
                 "380b02c3c3c2586c828456716eef6a6392bb043b")))
        (sha256
          (base32
            "1c5j28rwqx53qdsqglif8yblhm2bwm4qzpl2dg0l0g3pr8pk8zjk"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dedi/gxref")
    (synopsis "xref backend using GNU Global.")
    (description
      "Documentation at https://melpa.org/#/gxref")
    (license #f)))

(define-public emacs-h5dump-mode
  (package
    (name "emacs-h5dump-mode")
    (version "20221128.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/berquist/h5dump-mode.git")
               (commit
                 "3c9e4608112da91db76bf316417023bed0422ef3")))
        (sha256
          (base32
            "17qqvl99vyfcxa90wkpqd2r7b2s05nnp4jnf3lhflx8s3dzmnpzy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/berquist/h5dump-mode")
    (synopsis
      "Major mode for navigating h5dump output")
    (description
      "Documentation at https://melpa.org/#/h5dump-mode")
    (license #f)))

(define-public emacs-habamax-theme
  (package
    (name "emacs-habamax-theme")
    (version "20181001.850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/habamax/habamax-theme.git")
               (commit
                 "6e86a1b23b6e2aaf40d4374b5673da00a28be447")))
        (sha256
          (base32
            "0k96mdxg28bbm14d6rdlin8l4c75i9wicj3mxrd0bys0shxl9jm6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/habamax/habamax-theme")
    (synopsis
      "Boring white background color that gets the job done.")
    (description
      "Documentation at https://melpa.org/#/habamax-theme")
    (license #f)))

(define-public emacs-habitica
  (package
    (name "emacs-habitica")
    (version "20220215.1758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/emacs-habitica.git")
               (commit
                 "9e1fde7f359f7f6a6976b857fbbdbc8dd4fd3327")))
        (sha256
          (base32
            "0xi0yvm4v2mjyml44jbprdl9lza7lhxmf2j177nbgvn8zgfjc7ac"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abrochard/emacs-habitica")
    (synopsis "Interface for habitica.com")
    (description
      "Documentation at https://melpa.org/#/habitica")
    (license #f)))

(define-public emacs-hack-mode
  (package
    (name "emacs-hack-mode")
    (version "20230227.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hhvm/hack-mode.git")
               (commit
                 "278e4cc4032bff92060496cf1179643cfc6f9c0f")))
        (sha256
          (base32
            "0b7831sklgal1zky772qdmg6b2a1kdy4nwhz398rb8shx66fx4pm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/hhvm/hack-mode")
    (synopsis
      "Major mode for the Hack programming language")
    (description
      "Documentation at https://melpa.org/#/hack-mode")
    (license #f)))

(define-public emacs-hacker-typer
  (package
    (name "emacs-hacker-typer")
    (version "20170206.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/emacs-hacker-typer.git")
               (commit
                 "d5a23714a4ccc5071580622f278597d5973f40bd")))
        (sha256
          (base32
            "13wp7cg9d9ij44inxxyk1knczglxrbfaq50wyhc4x5zfhz5yw7wx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "hackerman.png")))
    (home-page
      "http://github.com/therockmandolinist/emacs-hacker-typer")
    (synopsis "Pretend to write code like a pro")
    (description
      "Documentation at https://melpa.org/#/hacker-typer")
    (license #f)))

(define-public emacs-hackernews
  (package
    (name "emacs-hackernews")
    (version "20230127.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clarete/hackernews.el.git")
               (commit
                 "dcb312194b60e9841a63455ba893d60856099c79")))
        (sha256
          (base32
            "1ga427kv77m5wr5pyjzag1mjqcyk2qh9avzn7qfmpdmfjrlrqhyb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/clarete/hackernews.el")
    (synopsis "Hacker News Client for Emacs")
    (description
      "Documentation at https://melpa.org/#/hackernews")
    (license #f)))

(define-public emacs-haki-theme
  (package
    (name "emacs-haki-theme")
    (version "20231103.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/idlip/haki.git")
               (commit
                 "790686fd26681c9602b534075efa09a522a5847d")))
        (sha256
          (base32
            "0h2bgrqi49x4s3znyxiaxa4is5rl4cab94dysycardlhw1gn9cld"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/idlip/haki")
    (synopsis
      "An elegant, high-contrast dark theme in modern sense")
    (description
      "Documentation at https://melpa.org/#/haki-theme")
    (license #f)))

(define-public emacs-hal-mode
  (package
    (name "emacs-hal-mode")
    (version "20160704.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/machinekoder/hal-mode.git")
               (commit
                 "cd2f66f219ee520198d4586fb6b169cef7ad3f21")))
        (sha256
          (base32
            "0xibwmngijq0wv9hkahs5nh02qj3ma0bkczl07hx8wnl6j27f0nj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/strahlex/hal-mode/")
    (synopsis "Major mode for editing HAL files")
    (description
      "Documentation at https://melpa.org/#/hal-mode")
    (license #f)))

(define-public emacs-halloweenie-theme
  (package
    (name "emacs-halloweenie-theme")
    (version "20231011.1252")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/halloweenie-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "08rxgj1mnvvf1iy1kyfq70dbpahdqwiwhq0k8q4fd8s4ydxyh479"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://cicadas.surf/cgit/halloweenie-theme.git")
    (synopsis
      "Dark and spooky Halloween color theme")
    (description
      "Documentation at https://melpa.org/#/halloweenie-theme")
    (license #f)))

(define-public emacs-ham-mode
  (package
    (name "emacs-ham-mode")
    (version "20150811.1306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/ham-mode.git")
               (commit
                 "3a141986a21c2aa6eefb428983352abb8b7907d2")))
        (sha256
          (base32
            "0d3xmagl18pas19zbpg27j0lmdiry23df48z4vkjsrcllqg25v5g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-html-to-markdown emacs-markdown-mode))
    (home-page
      "http://github.com/Bruce-Connor/ham-mode")
    (synopsis
      "Html As Markdown. Transparently edit an html file using markdown")
    (description
      "Documentation at https://melpa.org/#/ham-mode")
    (license #f)))

(define-public emacs-hamburg-theme
  (package
    (name "emacs-hamburg-theme")
    (version "20160123.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/hamburg-theme.git")
               (commit
                 "aacefdf1501d97a5afc0e63c8ead4b2463323028")))
        (sha256
          (base32
            "1rnkzl51h263nck1bd0jyb7q58b54d764gcsh7wqxfgzs1jfr4am"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Color Theme with a dark blue background.")
    (description
      "Documentation at https://melpa.org/#/hamburg-theme")
    (license #f)))

(define-public emacs-hamburger-menu
  (package
    (name "emacs-hamburger-menu")
    (version "20220509.1341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/iain/hamburger-menu-mode.git")
               (commit
                 "06bc9d6872007a31226d7410d497a0acd98b272b")))
        (sha256
          (base32
            "0wwsfc114s1rksrja2cxhl2kkk550imm3rnwnwq9ng0nv855qc5m"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/iain/hamburger-menu-mode")
    (synopsis "Mode line hamburger menu")
    (description
      "Documentation at https://melpa.org/#/hamburger-menu")
    (license #f)))

(define-public emacs-haml-mode
  (package
    (name "emacs-haml-mode")
    (version "20230608.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/haml-mode.git")
               (commit
                 "fe83c65c1f002f7c36480b758727c1afbad9a1b2")))
        (sha256
          (base32
            "1flq3j9jn8ra4n604w1rj0xdxr69d4c96zlhlrg1a2h12glbw66x"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nex3/haml-mode")
    (synopsis "Major mode for editing Haml files")
    (description
      "Documentation at https://melpa.org/#/haml-mode")
    (license #f)))

(define-public emacs-hamlet-mode
  (package
    (name "emacs-hamlet-mode")
    (version "20131208.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lightquake/hamlet-mode.git")
               (commit
                 "7362b955e556a3d007fa06945a27e5b99349527d")))
        (sha256
          (base32
            "1njrpb1s2v9skyfbgb28clrxyvyp8i4b8kwa68ynvq3vjb4fnws6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/lightquake/hamlet-mode")
    (synopsis "Hamlet editing mode")
    (description
      "Documentation at https://melpa.org/#/hamlet-mode")
    (license #f)))

(define-public emacs-hammy
  (package
    (name "emacs-hammy")
    (version "20231108.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/hammy.el.git")
               (commit
                 "c28a4a704f57f0e889110063edaf0f186feace0f")))
        (sha256
          (base32
            "04dwvi0mzp8c1kxyswifr65q05yfc4f0dxd6f8jnqy7n9vhmqalq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-svg-lib emacs-ts))
    (home-page
      "https://github.com/alphapapa/hammy.el")
    (synopsis
      "Programmable, interactive interval timers")
    (description
      "Documentation at https://melpa.org/#/hammy")
    (license #f)))

(define-public emacs-handle
  (package
    (name "emacs-handle")
    (version "20191029.856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/handle.git")
               (commit
                 "e27b2d0b229923f81a2c8afa3e9c65ae9e84a0da")))
        (sha256
          (base32
            "1w77p85ww1fjqgybi75s9bayqxyfvy040nr0gvsv3lmkri2mhglm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parent-mode))
    (home-page "https://gitlab.com/jjzmajic/handle")
    (synopsis
      "A handle for major-mode generic functions.")
    (description
      "Documentation at https://melpa.org/#/handle")
    (license #f)))

(define-public emacs-handlebars-mode
  (package
    (name "emacs-handlebars-mode")
    (version "20150211.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielevans/handlebars-mode.git")
               (commit
                 "81f6b73fea8f397807781a1b51568397af21a6ef")))
        (sha256
          (base32
            "0w443knp6kvjm2m79cni5d17plyhbsl0a4kip7yrpv5nmg370q3p"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A major mode for editing Handlebars files.")
    (description
      "Documentation at https://melpa.org/#/handlebars-mode")
    (license #f)))

(define-public emacs-handlebars-sgml-mode
  (package
    (name "emacs-handlebars-sgml-mode")
    (version "20130623.2333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacott/handlebars-sgml-mode.git")
               (commit
                 "c76df93a9a8c1b1b3efdcc4add32bf93304192a4")))
        (sha256
          (base32
            "1z37di9vk1l35my8kl8jnyqlkr1rnp0iz13hpc0r065mib67v58k"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jacott/handlebars-sgml-mode")
    (synopsis
      "Add Handlebars contextual indenting support to sgml-mode")
    (description
      "Documentation at https://melpa.org/#/handlebars-sgml-mode")
    (license #f)))

(define-public emacs-handoff
  (package
    (name "emacs-handoff")
    (version "20150917.600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/handoff.el.git")
               (commit
                 "75dc7a7e352f38679f65d0ca80ad158798e168bd")))
        (sha256
          (base32
            "0whn8rc98dhncgizzrb22nx6b6cm655q1cf2fpn6g3knq1c2471r"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/handoff.el")
    (synopsis
      "Get your hand off that mouse, damn it!")
    (description
      "Documentation at https://melpa.org/#/handoff")
    (license #f)))

(define-public emacs-hardcore-mode
  (package
    (name "emacs-hardcore-mode")
    (version "20151114.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/hardcore-mode.el.git")
               (commit
                 "b1dda19692b4a7a58a689e81784a9b35be39e70d")))
        (sha256
          (base32
            "124k803pgxc7fz325yy6jcyam69f5fk9kdwfgmnwwca9ablq4cfb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Disable arrow keys + optionally backspace and return")
    (description
      "Documentation at https://melpa.org/#/hardcore-mode")
    (license #f)))

(define-public emacs-hardhat
  (package
    (name "emacs-hardhat")
    (version "20210515.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/hardhat.git")
               (commit
                 "908cb130be3d56921a3687a00b974ba5eef3a11f")))
        (sha256
          (base32
            "0pk1wilkwi9g0l23b70lb37prmbj0h4gs193pri4fiygz4lwgvw2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ignoramus))
    (home-page
      "http://github.com/rolandwalker/hardhat")
    (synopsis
      "Protect against clobbering user-writable files")
    (description
      "Documentation at https://melpa.org/#/hardhat")
    (license #f)))

(define-public emacs-harpoon
  (package
    (name "emacs-harpoon")
    (version "20230521.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/otavioschwanck/harpoon.el.git")
               (commit
                 "7b64b701e46b9117217c8b01e49e00db78463985")))
        (sha256
          (base32
            "0g6klm12hkwsc5l4ilpysh7wsadghm2y0576zqrrgp451597baci"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-hydra))
    (home-page
      "https://github.com/otavioschwanck/harpoon.el")
    (synopsis "Bookmarks on steroids")
    (description
      "Documentation at https://melpa.org/#/harpoon")
    (license #f)))

(define-public emacs-harvest
  (package
    (name "emacs-harvest")
    (version "20170822.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostajh/harvest.el.git")
               (commit
                 "7acbc0564b250521b67131ee2a0a92720239454f")))
        (sha256
          (base32
            "0wzv67kkfyaw19ddw0ra45p6rja6bk6d1xi3ak5lkyzvgqvylr3b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper emacs-hydra emacs-s))
    (home-page
      "https://github.com/kostajh/harvest.el")
    (synopsis "Harvest integration")
    (description
      "Documentation at https://melpa.org/#/harvest")
    (license #f)))

(define-public emacs-haskell-emacs
  (package
    (name "emacs-haskell-emacs")
    (version "20160904.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knupfer/haskell-emacs.git")
               (commit
                 "a2c6a079175904689eed7c6c200754bfa85d1ed9")))
        (sha256
          (base32
            "1xpaqcj33vyzs5yv2w4dahw8a2vb6zcb3z7y2aqc5jdg3fx9ypam"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "*.hs" "*.org" "Foreign")))
    (home-page
      "https://github.com/knupfer/haskell-emacs")
    (synopsis "Write emacs extensions in haskell")
    (description
      "Documentation at https://melpa.org/#/haskell-emacs")
    (license #f)))

(define-public emacs-haskell-emacs-base
  (package
    (name "emacs-haskell-emacs-base")
    (version "20160904.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knupfer/haskell-emacs.git")
               (commit
                 "a2c6a079175904689eed7c6c200754bfa85d1ed9")))
        (sha256
          (base32
            "1xpaqcj33vyzs5yv2w4dahw8a2vb6zcb3z7y2aqc5jdg3fx9ypam"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haskell-emacs))
    (arguments
      '(#:files
        ("modules/base/*.el" "modules/base/*.hs")))
    (home-page
      "https://github.com/knupfer/haskell-emacs/modules/base")
    (synopsis "Haskell functions from Prelude")
    (description
      "Documentation at https://melpa.org/#/haskell-emacs-base")
    (license #f)))

(define-public emacs-haskell-emacs-text
  (package
    (name "emacs-haskell-emacs-text")
    (version "20160904.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knupfer/haskell-emacs.git")
               (commit
                 "a2c6a079175904689eed7c6c200754bfa85d1ed9")))
        (sha256
          (base32
            "1xpaqcj33vyzs5yv2w4dahw8a2vb6zcb3z7y2aqc5jdg3fx9ypam"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haskell-emacs))
    (arguments
      '(#:files
        ("modules/text/*.el" "modules/text/*.hs")))
    (home-page
      "https://github.com/knupfer/haskell-emacs/modules/text")
    (synopsis "Haskell functions from Data.Text")
    (description
      "Documentation at https://melpa.org/#/haskell-emacs-text")
    (license #f)))

(define-public emacs-haskell-mode
  (package
    (name "emacs-haskell-mode")
    (version "20231026.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/haskell/haskell-mode.git")
               (commit
                 "ef3fe51f7c207db3c55b9a3a720b3af665d2e606")))
        (sha256
          (base32
            "15d4wkpv35bbzskiwia0jzl9m5pvs5pl70qs6np6yz7hwq4c524r"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "NEWS" "logo.svg")))
    (home-page
      "https://github.com/haskell/haskell-mode")
    (synopsis "A Haskell editing mode")
    (description
      "Documentation at https://melpa.org/#/haskell-mode")
    (license #f)))

(define-public emacs-haskell-snippets
  (package
    (name "emacs-haskell-snippets")
    (version "20210228.344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/haskell/haskell-snippets.git")
               (commit
                 "1c29c4a68ce89848b8d371c6510d1de3b586c8b3")))
        (sha256
          (base32
            "1lwnggarmavyf164cfzbzzkq9ffahhd3bz7gw644czs49sndcawf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "https://github.com/haskell/haskell-snippets")
    (synopsis "Yasnippets for Haskell")
    (description
      "Documentation at https://melpa.org/#/haskell-snippets")
    (license #f)))

(define-public emacs-haskell-tab-indent
  (package
    (name "emacs-haskell-tab-indent")
    (version "20200514.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.spwhitton.name/haskell-tab-indent")
               (commit
                 "3239e814d6999f31ad845cc58df53395ad299059")))
        (sha256
          (base32
            "0319nr4l56p0d2gpybkc2lkkhwi6qmf2gjpgpajpcz11ms9m8x5z"))))
    (build-system melpa-build-system)
    (home-page
      "https://spwhitton.name/tech/code/haskell-tab-indent/")
    (synopsis
      "tab-based indentation for haskell-mode")
    (description
      "Documentation at https://melpa.org/#/haskell-tab-indent")
    (license #f)))

(define-public emacs-hasklig-mode
  (package
    (name "emacs-hasklig-mode")
    (version "20211017.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/hasklig-mode.git")
               (commit
                 "d708937592f9e2d28ae5622086b9c24d60cd8ac2")))
        (sha256
          (base32
            "0dyg2l96wgyl2l8iqvzqvh2rmxyqn8bgiss5r93f9c3daam7jyca"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/minad/hasklig-mode")
    (synopsis "Hasklig ligatures")
    (description
      "Documentation at https://melpa.org/#/hasklig-mode")
    (license #f)))

(define-public emacs-hass
  (package
    (name "emacs-hass")
    (version "20230529.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purplg/hass.git")
               (commit
                 "4c9da37c5217177d43dbd2cb9cd458c01b834c54")))
        (sha256
          (base32
            "15mrp8ibynlr3fjhgqia9m0fc0jrkj4x9apw6j2dka19cv00vs1m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-websocket))
    (home-page "https://github.com/purplg/hass")
    (synopsis "Interact with Home Assistant")
    (description
      "Documentation at https://melpa.org/#/hass")
    (license #f)))

(define-public emacs-haste
  (package
    (name "emacs-haste")
    (version "20141030.2034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rlister/emacs-haste-client.git")
               (commit
                 "22d05aacc3296ab50a7361222ab139fb4d447c25")))
        (sha256
          (base32
            "1gmh455ahd9if11f8mrqbfky24c784bb4fgdl3pj8i0n5sl51i88"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rlister/emacs-haste-client")
    (synopsis
      "Emacs client for hastebin (http://hastebin.com/about.md)")
    (description
      "Documentation at https://melpa.org/#/haste")
    (license #f)))

(define-public emacs-haxe-imports
  (package
    (name "emacs-haxe-imports")
    (version "20170330.2304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/accidentalrebel/emacs-haxe-imports.git")
               (commit
                 "f104a641f3dfe698359d9aca1f28d9383cf43e04")))
        (sha256
          (base32
            "09crkm4ibi4m23qw4saqm0nm2i4cv40md3p768j2vniamby2q78f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-pcache))
    (home-page
      "http://www.github.com/accidentalrebel/emacs-haxe-imports")
    (synopsis "Code for dealing with Haxe imports")
    (description
      "Documentation at https://melpa.org/#/haxe-imports")
    (license #f)))

(define-public emacs-haxe-mode
  (package
    (name "emacs-haxe-mode")
    (version "20220930.251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/haxe-mode.git")
               (commit
                 "4d51bd4bf75aef53d1671e22ce6555e4daf883db")))
        (sha256
          (base32
            "0dfjr6k0w996ygds0d5w0msx83bincvwnmmwaq8sxhdi3rnx26r2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/haxe-mode")
    (synopsis "Major mode for editing Haxe files")
    (description
      "Documentation at https://melpa.org/#/haxe-mode")
    (license #f)))

(define-public emacs-haxor-mode
  (package
    (name "emacs-haxor-mode")
    (version "20160618.1129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krzysztof-magosa/haxor-mode.git")
               (commit
                 "6fa25a8e6b6a59481bc0354c2fe1e0ed53cbdc91")))
        (sha256
          (base32
            "0pdfvqbz4wmjl15wi3k4h7myij8v63vmyiq8g9fai18f7ad2klp1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/krzysztof-magosa/haxor-mode")
    (synopsis
      "Major mode for editing Haxor Assembly Files")
    (description
      "Documentation at https://melpa.org/#/haxor-mode")
    (license #f)))

(define-public emacs-hayoo
  (package
    (name "emacs-hayoo")
    (version "20140831.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/hayoo.el.git")
               (commit
                 "3ca2fb0c4d5f337d0410c21b2702dd147014e984")))
        (sha256
          (base32
            "0pjxyhh8a02i54a9jsqr8p1mcqfl6k9b8gv9lnzb242gy4518y3l"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/benma/hayoo.el/")
    (synopsis
      "Query hayoo and show results in a tabulated buffer.")
    (description
      "Documentation at https://melpa.org/#/hayoo")
    (license #f)))

(define-public emacs-hc-zenburn-theme
  (package
    (name "emacs-hc-zenburn-theme")
    (version "20150928.1633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edran/hc-zenburn-emacs.git")
               (commit
                 "fd0024a5191cdce204d91c8f1db99ba31640f6e9")))
        (sha256
          (base32
            "0rgcj47h7a67qkw6696pcm1a4g4ryx8nrz55s69fw86958fp08hk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("hc-zenburn-theme.el")))
    (home-page
      "https:github.com/edran/hc-zenburn-emacs")
    (synopsis
      "An higher contrast version of the Zenburn theme.")
    (description
      "Documentation at https://melpa.org/#/hc-zenburn-theme")
    (license #f)))

(define-public emacs-hcl-mode
  (package
    (name "emacs-hcl-mode")
    (version "20230302.1029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hcl-emacs/hcl-mode.git")
               (commit
                 "751b79247f326ab52e00032e805775c37ad9f080")))
        (sha256
          (base32
            "08zhsnhwa422j2723m8pp4zpvvrra5xl7vhl4gdfn06vk01v43pi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/emacs-hcl-mode")
    (synopsis "Major mode for Hashicorp")
    (description
      "Documentation at https://melpa.org/#/hcl-mode")
    (license #f)))

(define-public emacs-headlong
  (package
    (name "emacs-headlong")
    (version "20150417.1526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/headlong.git")
               (commit
                 "f6830f87f236eee88263cb6976125f72422abe72")))
        (sha256
          (base32
            "06hq6p6a4fzprbj4r885vsvzddlvx0wxqk5kik06v5bm7hjmnyrq"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/headlong")
    (synopsis "reckless completion")
    (description
      "Documentation at https://melpa.org/#/headlong")
    (license #f)))

(define-public emacs-heaven-and-hell
  (package
    (name "emacs-heaven-and-hell")
    (version "20190713.1830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/valignatev/heaven-and-hell.git")
               (commit
                 "e1febfd60d060c110a1e43c5f093cd8537251308")))
        (sha256
          (base32
            "1bgs638nsn9hyvc9wbc2jpqm5i3hblld1mhmf0h9z0j6fjr0aapx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/valignatev/heaven-and-hell")
    (synopsis "easy toggle light/dark themes")
    (description
      "Documentation at https://melpa.org/#/heaven-and-hell")
    (license #f)))

(define-public emacs-heex-ts-mode
  (package
    (name "emacs-heex-ts-mode")
    (version "20231007.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wkirschbaum/heex-ts-mode.git")
               (commit
                 "80f35c61eb99393179b58a75c0fdd9b546d25136")))
        (sha256
          (base32
            "19ivdadhxxdgc34ghwb3nlp02l81r083l6w6c7zz384y08amal3p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wkirschbaum/elixir-ts-mode")
    (synopsis
      "Major mode for Heex with tree-sitter support")
    (description
      "Documentation at https://melpa.org/#/heex-ts-mode")
    (license #f)))

(define-public emacs-helm
  (package
    (name "emacs-helm")
    (version "20231108.1729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm.git")
               (commit
                 "2534c228ef6699cb2588349c44627835fc444278")))
        (sha256
          (base32
            "1iq9cpf4nywfiw1f3ki5jcxpb2mlyqm6pgqfa6alfkkpvgrap9l3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-wfnames emacs-popup))
    (arguments
      '(#:files
        ("*.el"
         "emacs-helm.sh"
         (:exclude
           "helm-lib.el"
           "helm-source.el"
           "helm-multi-match.el"
           "helm-core.el"))))
    (home-page "https://emacs-helm.github.io/helm/")
    (synopsis
      "Helm is an Emacs incremental and narrowing framework")
    (description
      "Documentation at https://melpa.org/#/helm")
    (license #f)))

(define-public emacs-helm-ack
  (package
    (name "emacs-helm-ack")
    (version "20141030.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-ack.git")
               (commit
                 "889bc225318d14c6e3be80e73b1d9d6fb30e48c3")))
        (sha256
          (base32
            "04rvbafa77blps7x7cmlsciys8fgmvhfhq4v51pk8z5q3j1lrgc5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/syohex/emacs-helm-ack")
    (synopsis "Ack command with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ack")
    (license #f)))

(define-public emacs-helm-ad
  (package
    (name "emacs-helm-ad")
    (version "20151209.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tnoda/helm-ad.git")
               (commit
                 "8ac044705d8620ee354a9cfa8cc1b865e83c0d55")))
        (sha256
          (base32
            "0hxfgdn56c7qr64r59g9hvxxwa4mw0ad9c9m0z5cj85bsdd7rlx4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-helm))
    (home-page "unspecified")
    (synopsis "helm source for Active Directory")
    (description
      "Documentation at https://melpa.org/#/helm-ad")
    (license #f)))

(define-public emacs-helm-ag
  (package
    (name "emacs-helm-ag")
    (version "20221017.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-ag.git")
               (commit
                 "2f5e41ae979394208989c25f4cdc73a0532fede9")))
        (sha256
          (base32
            "07mxpsay8an9m97g8vbvz09mgb781wh11w2v3s28gyhg8awsk4sq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/syohex/emacs-helm-ag")
    (synopsis
      "The silver searcher with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ag")
    (license #f)))

(define-public emacs-helm-apt
  (package
    (name "emacs-helm-apt")
    (version "20231005.423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-apt.git")
               (commit
                 "3ddbb62f483d2bbdbfcab4160040eaad22a82d67")))
        (sha256
          (base32
            "09d18xi57h9c0m3j1wfqhfwdj6asn93zdrm6jn2bxd1gfa86625v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-apt")
    (synopsis
      "Helm interface for Debian/Ubuntu packages (apt-*)")
    (description
      "Documentation at https://melpa.org/#/helm-apt")
    (license #f)))

(define-public emacs-helm-atoms
  (package
    (name "emacs-helm-atoms")
    (version "20201013.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/helm-atoms.git")
               (commit
                 "7e6f91a16f556c96ae1b0d1f965ea56861bb6372")))
        (sha256
          (base32
            "0r61r1w8n5lvri7b32abahx0indim7hz6c9y95l54blqjx4yqzf0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/dantecatalfamo/helm-atoms")
    (synopsis "Reverse variable lookup using Helm")
    (description
      "Documentation at https://melpa.org/#/helm-atoms")
    (license #f)))

(define-public emacs-helm-aws
  (package
    (name "emacs-helm-aws")
    (version "20180514.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/helm-aws.git")
               (commit
                 "b36c744b3f00f458635a91d1f5158fccbb5baef6")))
        (sha256
          (base32
            "11683s12dabgi9j6cyx0i147pgz4jdd240xviry7w3cxgarqki8y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-s))
    (home-page "https://github.com/istib/helm-aws")
    (synopsis
      "Manage AWS EC2 server instances directly from Emacs")
    (description
      "Documentation at https://melpa.org/#/helm-aws")
    (license #f)))

(define-public emacs-helm-backup
  (package
    (name "emacs-helm-backup")
    (version "20180911.614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antham/helm-backup.git")
               (commit
                 "691fe542f38fc7c8cca409997f6a0ff5d76ad6c2")))
        (sha256
          (base32
            "0zi1md5f1haqcrclqfk4ilvr6hbm389kl3ajnyx230rq22vmb9ca"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-s))
    (home-page
      "http://github.com/antham/helm-backup")
    (synopsis "Backup each file change using git")
    (description
      "Documentation at https://melpa.org/#/helm-backup")
    (license #f)))

(define-public emacs-helm-bbdb
  (package
    (name "emacs-helm-bbdb")
    (version "20190728.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-bbdb.git")
               (commit
                 "db69114ff1af8bf48b5a222242e3a8dd6e101e67")))
        (sha256
          (base32
            "1yfz5s83589jazyfzyrzh84iv0db2akbwj796gadpb3yhn17pl4v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-bbdb))
    (home-page
      "https://github.com/emacs-helm/helm-bbdb")
    (synopsis "Helm interface for bbdb")
    (description
      "Documentation at https://melpa.org/#/helm-bbdb")
    (license #f)))

(define-public emacs-helm-bibtex
  (package
    (name "emacs-helm-bibtex")
    (version "20231009.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/helm-bibtex.git")
               (commit
                 "d8baeaa4c69fde4a179102c8271c1db804e5155e")))
        (sha256
          (base32
            "0jpx75nx546cd4c8ph8nz5a8kq8g711z3r96nm08jm264fgr3dl0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bibtex-completion emacs-helm))
    (arguments '(#:files ("helm-bibtex.el")))
    (home-page
      "https://github.com/tmalsburg/helm-bibtex")
    (synopsis "A bibliography manager based on Helm")
    (description
      "Documentation at https://melpa.org/#/helm-bibtex")
    (license #f)))

(define-public emacs-helm-bibtexkey
  (package
    (name "emacs-helm-bibtexkey")
    (version "20140214.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kenbeese/helm-bibtexkey.git")
               (commit
                 "aa1637ea5c8c5f1817e480fc2a3750cafab3d99f")))
        (sha256
          (base32
            "10k7hjfz9jmfpbmsv20jy9vr6fqxx1yp8v115hprqvw057iifsl9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments '(#:files ("*.el" "*.py")))
    (home-page
      "https://github.com/kenbeese/helm-bibtexkey")
    (synopsis "Bibtexkey source for helm")
    (description
      "Documentation at https://melpa.org/#/helm-bibtexkey")
    (license #f)))

(define-public emacs-helm-bind-key
  (package
    (name "emacs-helm-bind-key")
    (version "20141109.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/helm-bind-key.el.git")
               (commit
                 "9da6ad8b7530e72fb4ac67be8c6a482898dddc25")))
        (sha256
          (base32
            "1wmcy7q4ys2sf8ya5l4n7a6bq5m9d6m19amjfwkmkh4ajkwl041y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bind-key emacs-helm))
    (home-page "unspecified")
    (synopsis "helm-source for for bind-key.")
    (description
      "Documentation at https://melpa.org/#/helm-bind-key")
    (license #f)))

(define-public emacs-helm-bitbucket
  (package
    (name "emacs-helm-bitbucket")
    (version "20220722.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dragonwasrobot/helm-bitbucket.git")
               (commit
                 "9d07a274584ad364a2620c6389f86d90502f2640")))
        (sha256
          (base32
            "1xlzxdslbmhgiv1hd65jihnhfhq00442jh9a43f9cdb7hz42fm92"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/dragonwasrobot/helm-bitbucket")
    (synopsis "Search Bitbucket with Helm")
    (description
      "Documentation at https://melpa.org/#/helm-bitbucket")
    (license #f)))

(define-public emacs-helm-bm
  (package
    (name "emacs-helm-bm")
    (version "20160321.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-bm.git")
               (commit
                 "d66341f5646c23178d4d8bffb6cfebe3fb73f1d7")))
        (sha256
          (base32
            "011k37p4vnzm1x8vyairllanvjfknskl20bdfv0glf64xgbdpfil"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bm emacs-helm emacs-s))
    (home-page "https://github.com/yasuyk/helm-bm")
    (synopsis "helm sources for bm.el")
    (description
      "Documentation at https://melpa.org/#/helm-bm")
    (license #f)))

(define-public emacs-helm-books
  (package
    (name "emacs-helm-books")
    (version "20170325.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grugrut/helm-books.git")
               (commit
                 "625aadec1541a5ca36951e4ce1301f4b6fe2bf3f")))
        (sha256
          (base32
            "1d3nps765gxmadhbd1yqn4qvs23bczglwhxkciprky7ixm5lx53k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/grugrut/helm-books")
    (synopsis "Helm interface for searching books")
    (description
      "Documentation at https://melpa.org/#/helm-books")
    (license #f)))

(define-public emacs-helm-bufler
  (package
    (name "emacs-helm-bufler")
    (version "20230916.916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/bufler.el.git")
               (commit
                 "8bfbcd54127f01f812d6e13fa11f55566034fa19")))
        (sha256
          (base32
            "0p6b6wjcsg2ls7jwgyf8k04jz57y6sw85hz1cky1v7hl2kdl5371"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bufler emacs-helm))
    (arguments '(#:files ("helm-bufler.el")))
    (home-page
      "https://github.com/alphapapa/bufler.el")
    (synopsis "Helm source for Bufler")
    (description
      "Documentation at https://melpa.org/#/helm-bufler")
    (license #f)))

(define-public emacs-helm-bundle-show
  (package
    (name "emacs-helm-bundle-show")
    (version "20190526.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-bundle-show.git")
               (commit
                 "70f1ca7d1847c7d5cd5a3e488562cd4a295b809f")))
        (sha256
          (base32
            "12wz98fcs8v8w74ck4jqbh47pp5956xxh9ld5kpym9zrm39adpq2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-bundle-show")
    (synopsis "Bundle show with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-bundle-show")
    (license #f)))

(define-public emacs-helm-c-moccur
  (package
    (name "emacs-helm-c-moccur")
    (version "20151230.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/helm-c-moccur.el.git")
               (commit
                 "b0a906f85fa352db091f88b91a9c510de607dfe9")))
        (sha256
          (base32
            "0w4svbg32y63v049plvk7djc1m2amjzrr1v979d9s6jbnnpzlb5c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-color-moccur))
    (home-page "unspecified")
    (synopsis "helm source for color-moccur.el")
    (description
      "Documentation at https://melpa.org/#/helm-c-moccur")
    (license #f)))

(define-public emacs-helm-c-yasnippet
  (package
    (name "emacs-helm-c-yasnippet")
    (version "20230911.444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/helm-c-yasnippet.git")
               (commit
                 "c5880e740da101fde7a995e94a7b16c330e57583")))
        (sha256
          (base32
            "026i2cywf3gvhbvnc996i76vv1pqzi21j6v8zwm198dj1f1wg4kw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-yasnippet))
    (home-page "unspecified")
    (synopsis "helm source for yasnippet.el")
    (description
      "Documentation at https://melpa.org/#/helm-c-yasnippet")
    (license #f)))

(define-public emacs-helm-catkin
  (package
    (name "emacs-helm-catkin")
    (version "20190425.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gollth/helm-catkin.git")
               (commit
                 "d33c71cecd35616dfa7c3b81d8f51c128405977f")))
        (sha256
          (base32
            "0pggn78lxfq6gmvyxr9y1j5qbcnkfh5f8vavxjpnch6k9xq0591x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-xterm-color))
    (home-page
      "https://github.com/gollth/helm-catkin")
    (synopsis
      "Package for compile ROS workspaces with catkin-tools")
    (description
      "Documentation at https://melpa.org/#/helm-catkin")
    (license #f)))

(define-public emacs-helm-charinfo
  (package
    (name "emacs-helm-charinfo")
    (version "20170810.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mandoku/helm-charinfo.git")
               (commit
                 "91798a49dc115342a7e01e48b264e9a0bf5ea414")))
        (sha256
          (base32
            "1ifj6zz5k7qjalg06fvfc7rdmlha0n9hll2hiq7mrcj7lfac6jga"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/cwittern/helm-charinfo")
    (synopsis
      "A helm source for character information")
    (description
      "Documentation at https://melpa.org/#/helm-charinfo")
    (license #f)))

(define-public emacs-helm-chrome
  (package
    (name "emacs-helm-chrome")
    (version "20160719.520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/helm-chrome.git")
               (commit
                 "fd630ace4b4b4f33355a973743bbfe0c90ce4830")))
        (sha256
          (base32
            "0r8s85fs5lnwdn377z5zgi3d090k2n1mgiyxwgy49i8yirssgz51"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/kawabata/helm-chrome")
    (synopsis "Helm interface for Chrome bookmarks")
    (description
      "Documentation at https://melpa.org/#/helm-chrome")
    (license #f)))

(define-public emacs-helm-chrome-control
  (package
    (name "emacs-helm-chrome-control")
    (version "20190707.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-chrome-control.git")
               (commit
                 "e6758763099959e961e218bb1122526323f7ee5e")))
        (sha256
          (base32
            "186m2zq978hzdixh4cbdjp6mfigdaiqhmx25895574vn3wv4xmj7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (arguments '(#:files (:defaults "*.js")))
    (home-page
      "https://github.com/xuchunyang/helm-chrome-control")
    (synopsis
      "Control Chrome tabs with Helm (macOS only)")
    (description
      "Documentation at https://melpa.org/#/helm-chrome-control")
    (license #f)))

(define-public emacs-helm-chrome-history
  (package
    (name "emacs-helm-chrome-history")
    (version "20191031.1233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-chrome-history.git")
               (commit
                 "f9002d4c12df65a99830376b126dbbeae3ef2148")))
        (sha256
          (base32
            "18vgy5kaj0cmrar7ahcxiy9jva006zd7yfcgyi5h99yv62g76j72"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/xuchunyang/helm-chrome-history")
    (synopsis "Browse Chrome History with Helm")
    (description
      "Documentation at https://melpa.org/#/helm-chrome-history")
    (license #f)))

(define-public emacs-helm-chronos
  (package
    (name "emacs-helm-chronos")
    (version "20150528.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dxknight/helm-chronos.git")
               (commit
                 "a14fc3d65dd96ce6616234b3f7b8b08b4c1817ef")))
        (sha256
          (base32
            "1dmj4f8pris1i7wvfplp4dbnyfm403l6rplxfrfi0cd9afg7m68i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-chronos emacs-helm))
    (home-page
      "http://github.com/dxknight/helm-chronos")
    (synopsis "helm interface for chronos timers")
    (description
      "Documentation at https://melpa.org/#/helm-chronos")
    (license #f)))

(define-public emacs-helm-cider
  (package
    (name "emacs-helm-cider")
    (version "20220706.944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/helm-cider.git")
               (commit
                 "fe7e48befdb0b20ea1b0fb3626a8a725e54ae626")))
        (sha256
          (base32
            "0kj3465klq4a1awfp5xzk9rvrz3gv9n6d8b1k1lsmh4vvm4bsb6g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-helm-core))
    (home-page
      "https://github.com/clojure-emacs/helm-cider")
    (synopsis "Helm interface to CIDER")
    (description
      "Documentation at https://melpa.org/#/helm-cider")
    (license #f)))

(define-public emacs-helm-cider-history
  (package
    (name "emacs-helm-cider-history")
    (version "20150719.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungi/helm-cider-history.git")
               (commit
                 "c391fcb2e162a02001605a0b9449783575a831fd")))
        (sha256
          (base32
            "18j4ikb3q8ygdq74zqzm83wgb39x7w209n3186mm051n8lfmkaif"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-cider))
    (home-page
      "https://github.com/Kungi/helm-cider-history")
    (synopsis "Helm interface for cider history")
    (description
      "Documentation at https://melpa.org/#/helm-cider-history")
    (license #f)))

(define-public emacs-helm-circe
  (package
    (name "emacs-helm-circe")
    (version "20160207.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lesharris/helm-circe.git")
               (commit
                 "9091651d9fdd8d49d8ff6f9dcf3a2ae416c9f15a")))
        (sha256
          (base32
            "1gwg299s8ps0q97iw6p515gwn73rjk1icgl3j7cj1s143njjg122"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-circe))
    (home-page
      "https://github.com/lesharris/helm-circe")
    (synopsis "helm circe buffer management.")
    (description
      "Documentation at https://melpa.org/#/helm-circe")
    (license #f)))

(define-public emacs-helm-clojuredocs
  (package
    (name "emacs-helm-clojuredocs")
    (version "20160405.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mbuczko/helm-clojuredocs.git")
               (commit
                 "5a7f0f2cb401be0b09e73262a1c18265ab9a3cea")))
        (sha256
          (base32
            "015b8zxh91ljhqvn6z43gy08di54xcw9skw0i7frj3d7gk984qhl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edn emacs-helm))
    (home-page
      "https://github.com/mbuczko/helm-clojuredocs")
    (synopsis "search for help in clojuredocs.org")
    (description
      "Documentation at https://melpa.org/#/helm-clojuredocs")
    (license #f)))

(define-public emacs-helm-codesearch
  (package
    (name "emacs-helm-codesearch")
    (version "20221219.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/youngker/helm-codesearch.el.git")
               (commit
                 "bd5a7e3ece98f2940cb09be56d3e56da97d4c865")))
        (sha256
          (base32
            "12lay84wys9hwry68nyxfa0visjv6bhndc3nyhggwd44i30wvx8c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-helm))
    (home-page "unspecified")
    (synopsis "helm interface for codesearch")
    (description
      "Documentation at https://melpa.org/#/helm-codesearch")
    (license #f)))

(define-public emacs-helm-comint
  (package
    (name "emacs-helm-comint")
    (version "20231102.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-comint.git")
               (commit
                 "9215b2aa8f42f62cbda66a1503832abb7f491549")))
        (sha256
          (base32
            "029dhxy73lhpbpsw7n3sj8z18c2syy59551pfd31k8kas98ck52j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/benedicthw/helm-comint.git")
    (synopsis "Comint prompt navigation for helm")
    (description
      "Documentation at https://melpa.org/#/helm-comint")
    (license #f)))

(define-public emacs-helm-commandlinefu
  (package
    (name "emacs-helm-commandlinefu")
    (version "20150611.545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-commandlinefu.git")
               (commit
                 "9ee7e018c5db23ae9c8d1c8fa969876f15b7280d")))
        (sha256
          (base32
            "0fxrmvb64lav4aqs61z3a4d2mcp9s2nw7fvysyjn0r1291pkzk9j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/xuchunyang/helm-commandlinefu")
    (synopsis
      "Search and browse commandlinefu.com from helm")
    (description
      "Documentation at https://melpa.org/#/helm-commandlinefu")
    (license #f)))

(define-public emacs-helm-company
  (package
    (name "emacs-helm-company")
    (version "20231108.612")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodel-the-Vociferous/helm-company.git")
               (commit
                 "a653ff05023a21dfa087d196d6ca27e382eb28b2")))
        (sha256
          (base32
            "0zg878i48kmgw9lj772c3kx5v13k9k2afz98j65jx2bjbcm9f338"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-company))
    (home-page
      "https://github.com/Sodel-the-Vociferous/helm-company")
    (synopsis "Helm interface for company-mode")
    (description
      "Documentation at https://melpa.org/#/helm-company")
    (license #f)))

(define-public emacs-helm-core
  (package
    (name "emacs-helm-core")
    (version "20231108.1729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm.git")
               (commit
                 "2534c228ef6699cb2588349c44627835fc444278")))
        (sha256
          (base32
            "1iq9cpf4nywfiw1f3ki5jcxpb2mlyqm6pgqfa6alfkkpvgrap9l3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (arguments
      '(#:files
        ("helm-core.el"
         "helm-lib.el"
         "helm-source.el"
         "helm-multi-match.el")))
    (home-page "https://emacs-helm.github.io/helm/")
    (synopsis "Development files for Helm")
    (description
      "Documentation at https://melpa.org/#/helm-core")
    (license #f)))

(define-public emacs-helm-cscope
  (package
    (name "emacs-helm-cscope")
    (version "20190615.41")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha22jp/helm-cscope.el.git")
               (commit
                 "af1d9e7f4460a88d7400b5a74d5da68084089ac1")))
        (sha256
          (base32
            "1ynn49ngx3y4m9y820sf3rbyzw3k5gs0xf1bsxi3h8hdvyqd7j9p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xcscope emacs-helm))
    (home-page
      "https://github.com/alpha22jp/helm-cscope.el")
    (synopsis "Helm interface for xcscope.el.")
    (description
      "Documentation at https://melpa.org/#/helm-cscope")
    (license #f)))

(define-public emacs-helm-css-scss
  (package
    (name "emacs-helm-css-scss")
    (version "20230522.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-css-scss.git")
               (commit
                 "2169d83d8fdc661241df208cb3235112735d936e")))
        (sha256
          (base32
            "0jjjw7fw2ngrpgvd599vjd291zr8zr1m7xnxfq2dpqc3mf0s397z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/ShingoFukuyama/helm-css-scss")
    (synopsis
      "CSS/SCSS/LESS Selectors with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-css-scss")
    (license #f)))

(define-public emacs-helm-ctest
  (package
    (name "emacs-helm-ctest")
    (version "20220721.400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danlamanna/helm-ctest.git")
               (commit
                 "48edc9fa862219da34feb423c06c33d8f6d43722")))
        (sha256
          (base32
            "14n8inbpg4abxnda8x06m5myy2l5ddcmicyl44ycmfaqbk379mih"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-helm-core))
    (home-page "unspecified")
    (synopsis "Run ctest from within emacs")
    (description
      "Documentation at https://melpa.org/#/helm-ctest")
    (license #f)))

(define-public emacs-helm-dash
  (package
    (name "emacs-helm-dash")
    (version "20190527.1118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dash-docs-el/helm-dash.git")
               (commit
                 "7f853bd34da666f0e9a883011c80f451b06f6c59")))
        (sha256
          (base32
            "0r192vzry1212ihabg9pgw9xar8zdgnbgy0vsgvfm8s5wj6ny7jp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash-docs emacs-helm))
    (home-page
      "https://github.com/dash-docs-el/helm-dash")
    (synopsis
      "Offline documentation browser for +150 APIs using Dash docsets.")
    (description
      "Documentation at https://melpa.org/#/helm-dash")
    (license #f)))

(define-public emacs-helm-descbinds
  (package
    (name "emacs-helm-descbinds")
    (version "20190501.935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-descbinds.git")
               (commit
                 "b72515982396b6e336ad7beb6767e95a80fca192")))
        (sha256
          (base32
            "1bp2n32lvb1fhnwzk8s782i928m8mklv77jz5rq0ag1q7y740r31"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-descbinds")
    (synopsis
      "A convenient `describe-bindings' with `helm'")
    (description
      "Documentation at https://melpa.org/#/helm-descbinds")
    (license #f)))

(define-public emacs-helm-describe-modes
  (package
    (name "emacs-helm-describe-modes")
    (version "20160212.518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-describe-modes.git")
               (commit
                 "11fb36af119b784539d31c6160002de1957408aa")))
        (sha256
          (base32
            "1d5b85m33hsdb4wswh9wpid0ghsr2zrj3f6ky587lc32s4bs0w0z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-describe-modes")
    (synopsis
      "Helm interface to major and minor modes.")
    (description
      "Documentation at https://melpa.org/#/helm-describe-modes")
    (license #f)))

(define-public emacs-helm-dictionary
  (package
    (name "emacs-helm-dictionary")
    (version "20230922.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-dictionary.git")
               (commit
                 "fc1c097cc53dd3451bfb49ea7e99fdfc6d93bc16")))
        (sha256
          (base32
            "1fypysfpl8n6np7mz2wrfy3clhbyy8lnr6c69nlxxs4nznlwyvip"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-dictionary")
    (synopsis
      "Helm source for looking up dictionaries")
    (description
      "Documentation at https://melpa.org/#/helm-dictionary")
    (license #f)))

(define-public emacs-helm-directory
  (package
    (name "emacs-helm-directory")
    (version "20170709.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-helm-directory.git")
               (commit
                 "51bd7cd6e40a84a7efda894283ec76a0107830ad")))
        (sha256
          (base32
            "18lv8s7lw6zw97v4q5810f9cn43ybiygl139i2hf5p37p48d8fyy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masasam/emacs-helm-directory")
    (synopsis
      "selecting directory before select the file")
    (description
      "Documentation at https://melpa.org/#/helm-directory")
    (license #f)))

(define-public emacs-helm-dired-history
  (package
    (name "emacs-helm-dired-history")
    (version "20170524.1046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/helm-dired-history.git")
               (commit
                 "281523f9fc46cf00fafd670ba5cd16552a607212")))
        (sha256
          (base32
            "1bqavj5ljr350dckyf39i9plkb0rbhyd17ka94n2g6daapgpq0x6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jixiuf/helm-dired-history")
    (synopsis
      "Show dired history with helm.el support.")
    (description
      "Documentation at https://melpa.org/#/helm-dired-history")
    (license #f)))

(define-public emacs-helm-dired-recent-dirs
  (package
    (name "emacs-helm-dired-recent-dirs")
    (version "20131228.1414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonkyy/helm-dired-recent-dirs.git")
               (commit
                 "3bcd125b44f5a707588ae3868777d91192351523")))
        (sha256
          (base32
            "14sifdrfg8ydvi9mj8qm2bfphbffglxrkb5ky4q5b3j96bn8v110"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "Show recent dirs with helm.el support.")
    (description
      "Documentation at https://melpa.org/#/helm-dired-recent-dirs")
    (license #f)))

(define-public emacs-helm-dogears
  (package
    (name "emacs-helm-dogears")
    (version "20230608.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/dogears.el.git")
               (commit
                 "080bfa184ffd88b6dcf9aca88b6ee601213043a8")))
        (sha256
          (base32
            "06cvpy06i45m5ydpm8j0w7y5y080bwfjarh8v187lhbs9pg2jpkp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dogears emacs-helm))
    (arguments '(#:files ("helm-dogears.el")))
    (home-page
      "https://github.com/alphapapa/dogears.el")
    (synopsis "Helm source for Dogears")
    (description
      "Documentation at https://melpa.org/#/helm-dogears")
    (license #f)))

(define-public emacs-helm-emmet
  (package
    (name "emacs-helm-emmet")
    (version "20160713.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-emmet.git")
               (commit
                 "f0364e736b10cf44232053a78de04133a88185ae")))
        (sha256
          (base32
            "1zl6vhzbf29864q97q5v7c318x36y1a4cjm0i7kgj3hc6qla5j88"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-emmet-mode))
    (home-page
      "https://github.com/yasuyk/helm-emmet")
    (synopsis
      "helm sources for emmet-mode's snippets")
    (description
      "Documentation at https://melpa.org/#/helm-emmet")
    (license #f)))

(define-public emacs-helm-emms
  (package
    (name "emacs-helm-emms")
    (version "20220314.1633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-emms.git")
               (commit
                 "aefa44ab77808626c4951be2df49a2eab7820805")))
        (sha256
          (base32
            "07ric1lghxdccq30jr3nfzkqa0mpx61kp4mjyi0zsxqcwfyz7zx3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-emms))
    (home-page
      "https://github.com/emacs-helm/helm-emms")
    (synopsis "Emms for Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-emms")
    (license #f)))

(define-public emacs-helm-esa
  (package
    (name "emacs-helm-esa")
    (version "20190721.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-esa.git")
               (commit
                 "d93b4af404346870cb2cf9c257d055332ef3f577")))
        (sha256
          (base32
            "1lqih8qadk1miwi8fv7syfd7i2rzbg669b96my177g0i57sah4mw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-request))
    (home-page
      "https://github.com/masutaka/emacs-helm-esa")
    (synopsis "Esa with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-esa")
    (license #f)))

(define-public emacs-helm-etags-plus
  (package
    (name "emacs-helm-etags-plus")
    (version "20201003.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/helm-etags-plus.git")
               (commit
                 "52598fe69636add4b62cd9873041de5c6db9b7ac")))
        (sha256
          (base32
            "1mpwka62lk040693hllb5hrsf4n5vwkx6khi9i9dbyyc5xgppjm0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jixiuf/helm-etags-plus")
    (synopsis "Another Etags helm.el interface")
    (description
      "Documentation at https://melpa.org/#/helm-etags-plus")
    (license #f)))

(define-public emacs-helm-evil-markers
  (package
    (name "emacs-helm-evil-markers")
    (version "20200506.715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xueeinstein/helm-evil-markers.git")
               (commit
                 "0245f0c268e0eaec85df51ab2deba7ac961f6770")))
        (sha256
          (base32
            "0b1db6x2hz9rixchn9qfp2ak27a2vbz2l4g0fd7mys5c0llbwj1r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-evil))
    (home-page
      "https://github.com/xueeinstein/helm-evil-markers")
    (synopsis "Show evil markers with helm")
    (description
      "Documentation at https://melpa.org/#/helm-evil-markers")
    (license #f)))

(define-public emacs-helm-eww
  (package
    (name "emacs-helm-eww")
    (version "20190315.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-eww.git")
               (commit
                 "76ba59fda8dd6f32a1bc7c6df0b43c6f76169911")))
        (sha256
          (base32
            "0hpq1h0p69c9k6hkd2mjpprx213sc5475q7pr2zpmwrjdzgcv70z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-eww")
    (synopsis "Helm UI wrapper for EWW.")
    (description
      "Documentation at https://melpa.org/#/helm-eww")
    (license #f)))

(define-public emacs-helm-ext
  (package
    (name "emacs-helm-ext")
    (version "20200722.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/helm-ext.git")
               (commit
                 "c30f7772ec577a5ce1de3215f0507826e0725a69")))
        (sha256
          (base32
            "1sb3z1c1p9wal5g6fz8b948pvaarg4yhcmjqmpd2y7b85hzapgp1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "A few extensions to Helm")
    (description
      "Documentation at https://melpa.org/#/helm-ext")
    (license #f)))

(define-public emacs-helm-exwm
  (package
    (name "emacs-helm-exwm")
    (version "20210215.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-exwm.git")
               (commit
                 "5b35a42ff10fbcbf673268987df700ea6b6288e8")))
        (sha256
          (base32
            "1j7a3jn1599cy7n2q42vqc9kwz252k018vy3sbj8a8v0cz2xvy5z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-exwm))
    (home-page
      "https://github.com/emacs-helm/helm-exwm")
    (synopsis "Helm for EXWM buffers")
    (description
      "Documentation at https://melpa.org/#/helm-exwm")
    (license #f)))

(define-public emacs-helm-file-preview
  (package
    (name "emacs-helm-file-preview")
    (version "20220720.531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/helm-file-preview.git")
               (commit
                 "bebd4e9c42543c9003984442701db2c384c21f3e")))
        (sha256
          (base32
            "03yp6qfx1qnn97pj0kbydh9qx8zb2cpy0g4l33caasa67128wk5a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jcs-elpa/helm-file-preview")
    (synopsis
      "Preview the current helm file selection")
    (description
      "Documentation at https://melpa.org/#/helm-file-preview")
    (license #f)))

(define-public emacs-helm-firefox
  (package
    (name "emacs-helm-firefox")
    (version "20220420.1346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-firefox.git")
               (commit
                 "571cf8dfcbe43d91f9890eebefc88d7572c62e75")))
        (sha256
          (base32
            "0x93x29d74mqbq78jcxq06w9myfml7yni5p2zfdyqva7q725wsgb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-firefox")
    (synopsis "Firefox bookmarks")
    (description
      "Documentation at https://melpa.org/#/helm-firefox")
    (license #f)))

(define-public emacs-helm-fish-completion
  (package
    (name "emacs-helm-fish-completion")
    (version "20200908.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-fish-completion.git")
               (commit
                 "2a2001b3a876da3c468ffec8935572509c485aac")))
        (sha256
          (base32
            "1j2vfngq3512naaayv9kx0d1q2zg1xgs69l8afc7swg72h0l0imw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-fish-completion))
    (home-page
      "https://github.com/emacs-helm/helm-fish-completion")
    (synopsis "Helm interface for fish completion")
    (description
      "Documentation at https://melpa.org/#/helm-fish-completion")
    (license #f)))

(define-public emacs-helm-flx
  (package
    (name "emacs-helm-flx")
    (version "20221020.1739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/helm-flx.git")
               (commit
                 "5220099e695a3586dba2d59640217fe378e66310")))
        (sha256
          (base32
            "173yabrl1whjlisklj4lm2amw5apyjbhl2a3xgbjvpk10mvxm0if"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-flx))
    (home-page
      "https://github.com/PythonNut/helm-flx")
    (synopsis "Sort helm candidates by flx score")
    (description
      "Documentation at https://melpa.org/#/helm-flx")
    (license #f)))

(define-public emacs-helm-flycheck
  (package
    (name "emacs-helm-flycheck")
    (version "20160710.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-flycheck.git")
               (commit
                 "3cf7d3bb194acacc6395f88360588013d92675d6")))
        (sha256
          (base32
            "1a2yfxhz04klwhcandqvfzysxp6b7bxyxx1xk1x3kds5hif5fkl4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-flycheck emacs-helm-core))
    (home-page
      "https://github.com/yasuyk/helm-flycheck")
    (synopsis "Show flycheck errors with helm")
    (description
      "Documentation at https://melpa.org/#/helm-flycheck")
    (license #f)))

(define-public emacs-helm-flymake
  (package
    (name "emacs-helm-flymake")
    (version "20160610.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tam17aki/helm-flymake.git")
               (commit
                 "72cf18a1a1f843db9bb5d58301739ea9ccb1655b")))
        (sha256
          (base32
            "05wpclg4ibp0ida692m3s8nknx4aizfcdgxgfzlwczgdgw0922kn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/tam17aki")
    (synopsis "helm interface for flymake")
    (description
      "Documentation at https://melpa.org/#/helm-flymake")
    (license #f)))

(define-public emacs-helm-flyspell
  (package
    (name "emacs-helm-flyspell")
    (version "20170210.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pronobis/helm-flyspell.git")
               (commit
                 "8d4d947c687cb650cb149aa2271ad5201ea92594")))
        (sha256
          (base32
            "0q0xcgg8w9rrlsrrnk0l7qd8q7jc6x1agm2i769j21wpyfv1nbns"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/pronobis/helm-flyspell")
    (synopsis
      "Helm extension for correcting words with flyspell")
    (description
      "Documentation at https://melpa.org/#/helm-flyspell")
    (license #f)))

(define-public emacs-helm-frame
  (package
    (name "emacs-helm-frame")
    (version "20220803.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chee/helm-frame.git")
               (commit
                 "1b5e895e9199deeea049010e5fe4de7a338f41f3")))
        (sha256
          (base32
            "0c7qb16yad5qfv40d419mgf4307mif46733ws1cnwxnhvz4dfxqd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "open helm buffers in a dedicated frame")
    (description
      "Documentation at https://melpa.org/#/helm-frame")
    (license #f)))

(define-public emacs-helm-fuz
  (package
    (name "emacs-helm-fuz")
    (version "20200812.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rustify-emacs/fuz.el.git")
               (commit
                 "fee874aa35d2ee6b12b836290b5c8eaa44175a28")))
        (sha256
          (base32
            "1xswm8my29i4fddy64k21b1vclbr5fjb0pisb4hs8ynkk5w1kw2a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fuz emacs-helm))
    (arguments '(#:files ("helm-fuz.el")))
    (home-page "https://github.com/cireu/fuz.el")
    (synopsis "Integrate Helm and Fuz")
    (description
      "Documentation at https://melpa.org/#/helm-fuz")
    (license #f)))

(define-public emacs-helm-fuzzier
  (package
    (name "emacs-helm-fuzzier")
    (version "20160605.2145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EphramPerdition/helm-fuzzier.git")
               (commit
                 "8798dcf3583b863df5b9dea7fe3b0179ba1c35bc")))
        (sha256
          (base32
            "1250mh0ydap0sifcyrgs32dnr6c8d723v4c55yvwm23dzvzwycp8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "http://github.com/EphramPerdition/helm-fuzzier")
    (synopsis "Better fuzzy matching for Helm")
    (description
      "Documentation at https://melpa.org/#/helm-fuzzier")
    (license #f)))

(define-public emacs-helm-fuzzy
  (package
    (name "emacs-helm-fuzzy")
    (version "20220704.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/helm-fuzzy.git")
               (commit
                 "8b80a2d371f754c597bdbd30373a38490a2f1499")))
        (sha256
          (base32
            "0q5lbjhddarm16zhwbxc924k11694rk80vxh80np3j2fyzj4xba9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-flx))
    (home-page
      "https://github.com/jcs-elpa/helm-fuzzy")
    (synopsis "Fuzzy matching for helm source")
    (description
      "Documentation at https://melpa.org/#/helm-fuzzy")
    (license #f)))

(define-public emacs-helm-fuzzy-find
  (package
    (name "emacs-helm-fuzzy-find")
    (version "20171106.400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-fuzzy-find.git")
               (commit
                 "de2abbf7ca13609587325bacd4a1ed4376b5c927")))
        (sha256
          (base32
            "1dacvnkqqiax02c627z9qi61iyqgr0j3qqmjp29h0v494czvrdbs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/xuchunyang/helm-fuzzy-find")
    (synopsis "Find file using Fuzzy Search")
    (description
      "Documentation at https://melpa.org/#/helm-fuzzy-find")
    (license #f)))

(define-public emacs-helm-ghq
  (package
    (name "emacs-helm-ghq")
    (version "20210724.744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-ghq.git")
               (commit
                 "7b47ac91e42762f2ecbbceeaadc05b86c9fe5f14")))
        (sha256
          (base32
            "0a4piipqnsj0rnwmqz3vj674ljmy1bl33qr9hv959pw5b3jzqfh0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-ghq")
    (synopsis "Ghq with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ghq")
    (license #f)))

(define-public emacs-helm-ghs
  (package
    (name "emacs-helm-ghs")
    (version "20170715.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iory/emacs-helm-ghs.git")
               (commit
                 "17a70bf16255d90d67c8350e88200ec8bfd47563")))
        (sha256
          (base32
            "1jc51anmkr44db4kbcwza17x3ln78ihpslrf2v9xs0sq0ggw1rva"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/iory/emacs-helm-ghs")
    (synopsis "ghs with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ghs")
    (license #f)))

(define-public emacs-helm-git
  (package
    (name "emacs-helm-git")
    (version "20120630.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/helm-git.git")
               (commit
                 "cb96a52b5aecadd3c27aba7749d14e43ab128d55")))
        (sha256
          (base32
            "1yfy4a52hx44r32i0b75bka8gfcn5lp61jl86lzrsi2cr9wg10pn"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/maio/helm-git")
    (synopsis "Helm extension for Git.")
    (description
      "Documentation at https://melpa.org/#/helm-git")
    (license #f)))

(define-public emacs-helm-git-grep
  (package
    (name "emacs-helm-git-grep")
    (version "20170614.1411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-git-grep.git")
               (commit
                 "744cea07dba6e6a5effbdba83f1b786c78fd86d3")))
        (sha256
          (base32
            "172m7wbgx9qnv9n1slbzpd9j24p6blddik49z6bq3zdg1vlnf3dv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/yasuyk/helm-git-grep")
    (synopsis
      "helm for git grep, an incremental git-grep(1)")
    (description
      "Documentation at https://melpa.org/#/helm-git-grep")
    (license #f)))

(define-public emacs-helm-github-stars
  (package
    (name "emacs-helm-github-stars")
    (version "20190428.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sliim/helm-github-stars.git")
               (commit
                 "c891690218b0d8b957ea6cb45b1b6cffd15a6950")))
        (sha256
          (base32
            "0050i3apv72klqi3s0zw5sv4r4sizx4vlw07l52i39ij7bzjhkzz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/Sliim/helm-github-stars")
    (synopsis
      "Helm interface for your github's stars")
    (description
      "Documentation at https://melpa.org/#/helm-github-stars")
    (license #f)))

(define-public emacs-helm-gitignore
  (package
    (name "emacs-helm-gitignore")
    (version "20230310.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-gitignore.git")
               (commit
                 "85c34065e6fceac8fa7287e6ec79ea3d1182d654")))
        (sha256
          (base32
            "124v48in81iqpsl2xmifk72yr8bqlsgbr9qmdbdym51x4b4ghznm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-git-modes emacs-helm emacs-request))
    (home-page
      "https://github.com/jupl/helm-gitignore")
    (synopsis
      "Generate .gitignore files with gitignore.io.")
    (description
      "Documentation at https://melpa.org/#/helm-gitignore")
    (license #f)))

(define-public emacs-helm-gitlab
  (package
    (name "emacs-helm-gitlab")
    (version "20180312.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-gitlab.git")
               (commit
                 "8c2324c02119500f094c2f92dfaba4c9977ce1ba")))
        (sha256
          (base32
            "056c4fb5sj2y4h94klx2g24n1g3qdi7ifzs8ksw5v6hcj9lrkb1n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-helm emacs-gitlab))
    (arguments '(#:files ("helm-gitlab.el")))
    (home-page
      "https://github.com/nlamirault/emacs-gitlab")
    (synopsis "Helm interface to Gitlab")
    (description
      "Documentation at https://melpa.org/#/helm-gitlab")
    (license #f)))

(define-public emacs-helm-go-package
  (package
    (name "emacs-helm-go-package")
    (version "20161103.153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-go-package.git")
               (commit
                 "e42c563936c205ceedb930a687c11b4bb56447bc")))
        (sha256
          (base32
            "1169q25paz7x3hia5px4vmn06zzss179q9179x95vx8vfr43ny08"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core
            emacs-go-mode
            emacs-deferred))
    (home-page
      "https://github.com/yasuyk/helm-go-package")
    (synopsis
      "helm sources for Go programming language's package")
    (description
      "Documentation at https://melpa.org/#/helm-go-package")
    (license #f)))

(define-public emacs-helm-google
  (package
    (name "emacs-helm-google")
    (version "20210527.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/helm-google.git")
               (commit
                 "27834161391c350ef790062391cb7eab1d59fb62")))
        (sha256
          (base32
            "1rb1pmzr6szg8jjm43dndnk99v4i5zb1wp24rs9w8zmhygdn8jf4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://framagit.org/steckerhalter/helm-google")
    (synopsis
      "Emacs Helm Interface for quick Google searches")
    (description
      "Documentation at https://melpa.org/#/helm-google")
    (license #f)))

(define-public emacs-helm-grepint
  (package
    (name "emacs-helm-grepint")
    (version "20200811.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kopoli/helm-grepint.git")
               (commit
                 "9aec98428823b749eb14d2c8512b46b59ca9f8ca")))
        (sha256
          (base32
            "1fmpk9ynish20daajnx4c2s8bnlngb8sv3nwspxkk8fvv0c3p39i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/kopoli/helm-grepint")
    (synopsis "Generic helm interface to grep")
    (description
      "Documentation at https://melpa.org/#/helm-grepint")
    (license #f)))

(define-public emacs-helm-growthforecast
  (package
    (name "emacs-helm-growthforecast")
    (version "20140120.344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daichirata/helm-growthforecast.git")
               (commit
                 "0f94ac090d6c354058ad89a86e5c18385c136d9b")))
        (sha256
          (base32
            "0p0mk44y2z875ra8mzcb6vlf4rbkiq9yank5hdxvg2x2sxsaambk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/daic-h/helm-growthforecast")
    (synopsis "helm extensions for growthforecast.")
    (description
      "Documentation at https://melpa.org/#/helm-growthforecast")
    (license #f)))

(define-public emacs-helm-gtags
  (package
    (name "emacs-helm-gtags")
    (version "20200602.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-gtags.git")
               (commit
                 "a15fe1dd272d252ad933d8129db1dce02fd41adb")))
        (sha256
          (base32
            "1kc1jzk10nfd2v20g8dwnb6a944afrwdwnkzl06w4ba8k4yim7gi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/syohex/emacs-helm-gtags")
    (synopsis "GNU GLOBAL helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-gtags")
    (license #f)))

(define-public emacs-helm-hatena-bookmark
  (package
    (name "emacs-helm-hatena-bookmark")
    (version "20210724.732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-hatena-bookmark.git")
               (commit
                 "a6a2b37370ac84ca2cae5ef65b2b144a010b1584")))
        (sha256
          (base32
            "0zwngldnh6ys9m7v0fc4nwk1bcrwqvip08114vn4dcv8kl3lnxvv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-hatena-bookmark")
    (synopsis "Hatena::Bookmark with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-hatena-bookmark")
    (license #f)))

(define-public emacs-helm-hayoo
  (package
    (name "emacs-helm-hayoo")
    (version "20151014.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/markus1189/helm-hayoo.git")
               (commit
                 "dd4c0c8c87521026edf1b808c4de01fa19b7c693")))
        (sha256
          (base32
            "08pfzs030d8g5s7vkpgicz4srp5cr3xpd84lhrr24ncrhbszxar9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "Source and configured helm for searching hayoo")
    (description
      "Documentation at https://melpa.org/#/helm-hayoo")
    (license #f)))

(define-public emacs-helm-helm-commands
  (package
    (name "emacs-helm-helm-commands")
    (version "20130902.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/helm-helm-commands.git")
               (commit
                 "3a05aa19c976501343ad9ae630a36810921a85f6")))
        (sha256
          (base32
            "05ksfx54ar2j4mypzwh0gfir8r26s4f1i4xw319q5pa1y2100cpn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/vapniks/helm-helm-commands")
    (synopsis "List all helm commands with helm")
    (description
      "Documentation at https://melpa.org/#/helm-helm-commands")
    (license #f)))

(define-public emacs-helm-hoogle
  (package
    (name "emacs-helm-hoogle")
    (version "20161027.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/helm-hoogle.git")
               (commit
                 "73969a9d46d2121a849a01a9f7ed3636d01f7bbc")))
        (sha256
          (base32
            "043bddm6lldl6wkifr1plqip7laai771z1a1l0x2h35l3g8c64h0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jwiegley/haskell-config")
    (synopsis
      "Use helm to navigate query results from Hoogle")
    (description
      "Documentation at https://melpa.org/#/helm-hoogle")
    (license #f)))

(define-public emacs-helm-hunks
  (package
    (name "emacs-helm-hunks")
    (version "20171217.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/torgeir/helm-hunks.el.git")
               (commit
                 "6392bf716f618eac23ce81140aceb0dfacb9c6d0")))
        (sha256
          (base32
            "1ih2pgyhshv8nl7hhchd4h0pbjgj45irp5dy1fq2gy05v4rn7wi4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "A helm interface for git hunks - browsing, staging, unstaging and killing")
    (description
      "Documentation at https://melpa.org/#/helm-hunks")
    (license #f)))

(define-public emacs-helm-icons
  (package
    (name "emacs-helm-icons")
    (version "20231027.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyoncho/helm-icons.git")
               (commit
                 "0d113719ee72cb7b6bb7db29f7200d667bd86607")))
        (sha256
          (base32
            "1rnw3vkxrsx8xvvi43anvmljw22av072wyda9jlxflk8agbhpdw6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-treemacs))
    (home-page
      "https://github.com/yyoncho/helm-icons")
    (synopsis "Helm icons")
    (description
      "Documentation at https://melpa.org/#/helm-icons")
    (license #f)))

(define-public emacs-helm-idris
  (package
    (name "emacs-helm-idris")
    (version "20141202.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/helm-idris.git")
               (commit
                 "a2f45d6817974f318b55ad9b7fd19d5df132d47e")))
        (sha256
          (base32
            "0128nrhwyzslzl0l7wcjxn3dlx3h1sjmwnbbnp2fj4bjk7chc59q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-idris-mode))
    (home-page "unspecified")
    (synopsis
      "A Helm datasource for Idris documentation, queried from the compiler")
    (description
      "Documentation at https://melpa.org/#/helm-idris")
    (license #f)))

(define-public emacs-helm-img
  (package
    (name "emacs-helm-img")
    (version "20151224.2321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtmtcode/helm-img.git")
               (commit
                 "aa3f8a5dce8d0413bf07584f07153a39015c2bfc")))
        (sha256
          (base32
            "0py4xs27z2jvg99i6qaf2ccz0mvk6bb9cvdyz8v8ngmnj3rw2vla"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/l3msh0/helm-img")
    (synopsis
      "Utilities for making image sources for helm.")
    (description
      "Documentation at https://melpa.org/#/helm-img")
    (license #f)))

(define-public emacs-helm-img-tiqav
  (package
    (name "emacs-helm-img-tiqav")
    (version "20151224.2322")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtmtcode/helm-img-tiqav.git")
               (commit
                 "33a7e9508bc8f37d53320b56c92b53d321a57bb0")))
        (sha256
          (base32
            "04vdin0n3514c8bycdjrwk3l6pkarrwanlklnm75315b91nkkbcp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-img))
    (home-page "https://github.com/l3msh0/helm-img")
    (synopsis "An helm-source for joking.")
    (description
      "Documentation at https://melpa.org/#/helm-img-tiqav")
    (license #f)))

(define-public emacs-helm-ispell
  (package
    (name "emacs-helm-ispell")
    (version "20220721.323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-ispell.git")
               (commit
                 "03e74ae7ebb17589a9f8860d1e2ae37f57378735")))
        (sha256
          (base32
            "18lyswpv06x7fz99y3qxyz2n8r6gwrbix5pr58h1zhjax5j42wrh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/syohex/emacs-helm-ispell")
    (synopsis
      "ispell-complete-word with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-ispell")
    (license #f)))

(define-public emacs-helm-itunes
  (package
    (name "emacs-helm-itunes")
    (version "20151013.648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anschwa/helm-itunes.git")
               (commit
                 "966de755a5aadbe02311a6cef77bd4790e84c263")))
        (sha256
          (base32
            "1czgf5br89x192g3lh3x2n998f79hi1n2f309ll264qnl35kv14w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/daschwa/helm-itunes")
    (synopsis "Play local iTunes and Spotify tracks")
    (description
      "Documentation at https://melpa.org/#/helm-itunes")
    (license #f)))

(define-public emacs-helm-j-cheatsheet
  (package
    (name "emacs-helm-j-cheatsheet")
    (version "20170217.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/helm-j-cheatsheet.git")
               (commit
                 "6c47e7162b9ba2de4b41221d01180146973d860b")))
        (sha256
          (base32
            "0ayv6aqmwjy95gc9cpyx0s71486rvlmn04iwgfn43mr192c38y9p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments '(#:files ("helm-j-cheatsheet.el")))
    (home-page
      "https://github.com/abo-abo/helm-j-cheatsheet")
    (synopsis "Quick J reference for Emacs")
    (description
      "Documentation at https://melpa.org/#/helm-j-cheatsheet")
    (license #f)))

(define-public emacs-helm-jira
  (package
    (name "emacs-helm-jira")
    (version "20180802.815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/romandecker/helm-jira.git")
               (commit
                 "75d6ed5bd7a041fa8c1adb21cbbbe57b5a7c7cc7")))
        (sha256
          (base32
            "08cczc4jnkdgvzs0s3wq2dqmhnsvyhpl65dydmi7pmayl7zg6jir"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/DeX3/helm-jira")
    (synopsis
      "Helm bindings for JIRA/Bitbucket/stash")
    (description
      "Documentation at https://melpa.org/#/helm-jira")
    (license #f)))

(define-public emacs-helm-js-codemod
  (package
    (name "emacs-helm-js-codemod")
    (version "20190921.942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/torgeir/helm-js-codemod.el.git")
               (commit
                 "29b1b3c441f0d7e450a3c65b5ff9e72023dc6314")))
        (sha256
          (base32
            "15lksdyk5z4xszfsdk290pm6ri5r9c2ki9jxmwppkqpd52w2dxck"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-js-codemod))
    (home-page "unspecified")
    (synopsis
      "A helm interface for running js-codemods")
    (description
      "Documentation at https://melpa.org/#/helm-js-codemod")
    (license #f)))

(define-public emacs-helm-jstack
  (package
    (name "emacs-helm-jstack")
    (version "20150603.422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raghavgautam/helm-jstack.git")
               (commit
                 "2064f7215dcf4ccbd6a7b8784223251507746da4")))
        (sha256
          (base32
            "0vhqpcv8xi6a6q7n6xxahdzijr1x5s40fvk9nc44q55psbyv627g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "Helm interface to Jps & Jstack for Java/JVM processes")
    (description
      "Documentation at https://melpa.org/#/helm-jstack")
    (license #f)))

(define-public emacs-helm-kythe
  (package
    (name "emacs-helm-kythe")
    (version "20170709.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MaskRay/emacs-helm-kythe.git")
               (commit
                 "eabbef4948f8ec7c7b2fac498e9145dfdb10ca82")))
        (sha256
          (base32
            "1ws7vl0pvznmxb7yj77kfv4l52xkzblhsl68lfkf9cdxcj9g6177"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-helm))
    (home-page
      "https://github.com/MaskRay/emacs-helm-kythe")
    (synopsis "Google Kythe helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-kythe")
    (license #f)))

(define-public emacs-helm-lastpass
  (package
    (name "emacs-helm-lastpass")
    (version "20180722.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-lastpass.git")
               (commit
                 "82e1ffb6ae77d9d9e29c398eb013cd20ce963f77")))
        (sha256
          (base32
            "0pri9zsjg0zii7dpsr56dy5204q0mld5wi22iay3kqpiyxghhssv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-csv))
    (home-page
      "https://github.com/xuchunyang/helm-lastpass")
    (synopsis "Helm interface of LastPass")
    (description
      "Documentation at https://melpa.org/#/helm-lastpass")
    (license #f)))

(define-public emacs-helm-lean
  (package
    (name "emacs-helm-lean")
    (version "20210305.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "4a90f2ae6e33c162a3dd6f624fb080c2ed8e8494")))
        (sha256
          (base32
            "1zikz4qaxabs3j86gljpp2qbhbzxsjzz544k9vsngibd468dszlv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-helm emacs-lean-mode))
    (arguments '(#:files ("helm-lean.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "Helm interfaces for lean-mode")
    (description
      "Documentation at https://melpa.org/#/helm-lean")
    (license #f)))

(define-public emacs-helm-lib-babel
  (package
    (name "emacs-helm-lib-babel")
    (version "20180510.1324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/helm-lib-babel.git")
               (commit
                 "41bc0cdea8a604c6c8dc83ed5066644d33688fad")))
        (sha256
          (base32
            "1jrpaip5v9kzk0rf8wivsq8irdfd39svxd7p3v80cwgrrl7546xj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/dfeich/helm-lib-babel.el")
    (synopsis
      "helm insertion of babel function references")
    (description
      "Documentation at https://melpa.org/#/helm-lib-babel")
    (license #f)))

(define-public emacs-helm-lines
  (package
    (name "emacs-helm-lines")
    (version "20220103.1909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/torgeir/helm-lines.el.git")
               (commit
                 "f5ad178818d223f32a0bf60d370b50c01df5f3da")))
        (sha256
          (base32
            "0w68k1q9p48kyjzcfdrmrp5milydf5yi6w4f8p87bzc0jfaynfr8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/torgeir/helm-lines.el/")
    (synopsis
      "A helm interface for completing by lines")
    (description
      "Documentation at https://melpa.org/#/helm-lines")
    (license #f)))

(define-public emacs-helm-lobsters
  (package
    (name "emacs-helm-lobsters")
    (version "20230820.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julienXX/helm-lobste.rs.git")
               (commit
                 "3a1af0d063ca24fe0187daff12110171b942c7d3")))
        (sha256
          (base32
            "1kmj8nms1lsfj00n4s1bpnl8l4z3sqfrk4f03px0xwgzi77bvk4a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/julienXX/helm-lobste.rs")
    (synopsis "helm front-end for lobste.rs")
    (description
      "Documentation at https://melpa.org/#/helm-lobsters")
    (license #f)))

(define-public emacs-helm-ls-git
  (package
    (name "emacs-helm-ls-git")
    (version "20230924.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-ls-git.git")
               (commit
                 "35b3a548694039463749cc18bd628e8f4e3c8019")))
        (sha256
          (base32
            "0j762wgwmyls60q8w3g960c0b6ba2l0p91iqylz03ww1ipgixrwj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-ls-git")
    (synopsis "list git files.")
    (description
      "Documentation at https://melpa.org/#/helm-ls-git")
    (license #f)))

(define-public emacs-helm-ls-hg
  (package
    (name "emacs-helm-ls-hg")
    (version "20150909.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-ls-hg.git")
               (commit
                 "61b91a22fcfb62d0fc56e361ec01ce96973c7165")))
        (sha256
          (base32
            "1msrsqiwk7bg5gry5cia8a6c7ifymfyn738hk8g2qwzzw4vkxxcs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "List hg files in hg project.")
    (description
      "Documentation at https://melpa.org/#/helm-ls-hg")
    (license #f)))

(define-public emacs-helm-ls-svn
  (package
    (name "emacs-helm-ls-svn")
    (version "20190316.2203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/helm-ls-svn.git")
               (commit
                 "a6043e1187282f649e2cb9f0e722a42daf41294b")))
        (sha256
          (base32
            "0jh3q2nx3hn6v1qvip5sbfsvf9zy74ppn1rl037d0hlssh6qir9j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://svn.macports.org/repository/macports/users/chunyang/helm-ls-svn.el/helm-ls-svn.el")
    (synopsis "helm extension to list svn files")
    (description
      "Documentation at https://melpa.org/#/helm-ls-svn")
    (license #f)))

(define-public emacs-helm-lsp
  (package
    (name "emacs-helm-lsp")
    (version "20210419.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/helm-lsp.git")
               (commit
                 "c2c6974dadfac459b1a69a1217441283874cea92")))
        (sha256
          (base32
            "0xpz9qrcbxknnncqf0hw7hs9k6sv9dckzsf081k2zmsks3l5qh4p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-helm))
    (home-page "https://github.com/yyoncho/helm-lsp")
    (synopsis "LSP helm integration")
    (description
      "Documentation at https://melpa.org/#/helm-lsp")
    (license #f)))

(define-public emacs-helm-lxc
  (package
    (name "emacs-helm-lxc")
    (version "20200323.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/montag451/helm-lxc.git")
               (commit
                 "37fe2d7ed97967edf59a3b68b1434910516ae24f")))
        (sha256
          (base32
            "1xnkwmdcdjfvslahhslw2xnlcym9fvb3m8384c455bas6s180qxh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-lxc-tramp))
    (home-page
      "https://github.com/montag451/helm-lxc")
    (synopsis
      "Helm interface to manage LXC containers")
    (description
      "Documentation at https://melpa.org/#/helm-lxc")
    (license #f)))

(define-public emacs-helm-make
  (package
    (name "emacs-helm-make")
    (version "20200620.27")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/helm-make.git")
               (commit
                 "ebd71e85046d59b37f6a96535e01993b6962c559")))
        (sha256
          (base32
            "14jvhhw4chl94dgfwbyy7yirwchvcz5zrsgr9w6qy4z0fhqba41a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/helm-make")
    (synopsis "Select a Makefile target with helm")
    (description
      "Documentation at https://melpa.org/#/helm-make")
    (license #f)))

(define-public emacs-helm-migemo
  (package
    (name "emacs-helm-migemo")
    (version "20151010.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/helm-migemo.git")
               (commit
                 "66c6a19d07c6a385daefd2090d0709d26b608b4e")))
        (sha256
          (base32
            "0gzlprf5js4y3vzkf7si2xc7ai5j97b5cqrs002hyjj5ij4f2vix"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-migemo))
    (home-page
      "https://github.com/emacs-jp/helm-migemo")
    (synopsis "Migemo plug-in for helm")
    (description
      "Documentation at https://melpa.org/#/helm-migemo")
    (license #f)))

(define-public emacs-helm-mode-manager
  (package
    (name "emacs-helm-mode-manager")
    (version "20210108.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/helm-mode-manager.git")
               (commit
                 "7df8ed3ddd46a0402838b748d317c01454346164")))
        (sha256
          (base32
            "0j1mlqdqii6vpp748ydvcs0fxlwkrwf5bsbys8h34rjhb7x75dq4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/istib/helm-mode-manager")
    (synopsis
      "Select and toggle major and minor modes with helm")
    (description
      "Documentation at https://melpa.org/#/helm-mode-manager")
    (license #f)))

(define-public emacs-helm-mt
  (package
    (name "emacs-helm-mt")
    (version "20160918.452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfdeshom/helm-mt.git")
               (commit
                 "d2bff4100118483bc398c56d0ff095294209265b")))
        (sha256
          (base32
            "1wci63y0vjvrvrylkhhrz8p9q0ml6la5cpj4rx5cwin9rkmislm6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-multi-term))
    (home-page "https://github.com/dfdeshom/helm-mt")
    (synopsis "helm multi-term management")
    (description
      "Documentation at https://melpa.org/#/helm-mt")
    (license #f)))

(define-public emacs-helm-mu
  (package
    (name "emacs-helm-mu")
    (version "20230408.2126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-mu.git")
               (commit
                 "d3c23b63281ae7d1be7bd6ac0ea66dd0739deed3")))
        (sha256
          (base32
            "08d5i50nm651ak0kng420s8abl7gx7l0dgzr2a3hakyds06c5vgv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-mu")
    (synopsis
      "Helm search for e-mails and contacts in mu4e")
    (description
      "Documentation at https://melpa.org/#/helm-mu")
    (license #f)))

(define-public emacs-helm-navi
  (package
    (name "emacs-helm-navi")
    (version "20230517.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-navi.git")
               (commit
                 "cc3f9a0fad6301f7bb717a8dbde4087fd9a884f6")))
        (sha256
          (base32
            "0lb19kjib8k7mlzakk21smsh27swc6cp852pdrb81dx8vfvh5phj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm
            emacs-helm-org
            emacs-navi-mode
            emacs-s))
    (home-page
      "http://github.com/emacs-helm/helm-navi")
    (synopsis "Helm for navi-mode")
    (description
      "Documentation at https://melpa.org/#/helm-navi")
    (license #f)))

(define-public emacs-helm-nixos-options
  (package
    (name "emacs-helm-nixos-options")
    (version "20151013.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nixos-options emacs-helm))
    (arguments '(#:files ("helm-nixos-options.el")))
    (home-page
      "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis "Helm Interface for nixos-options")
    (description
      "Documentation at https://melpa.org/#/helm-nixos-options")
    (license #f)))

(define-public emacs-helm-notmuch
  (package
    (name "emacs-helm-notmuch")
    (version "20190320.1048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-notmuch.git")
               (commit
                 "97a01497e079a7b6505987e9feba6b603bbec288")))
        (sha256
          (base32
            "1k038dbdpaa411gl4071x19fklhnizhr346plxw23lsnxir9dhqc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-notmuch))
    (home-page
      "https://github.com/emacs-helm/helm-notmuch")
    (synopsis "Search emails with Notmuch and Helm")
    (description
      "Documentation at https://melpa.org/#/helm-notmuch")
    (license #f)))

(define-public emacs-helm-open-github
  (package
    (name "emacs-helm-open-github")
    (version "20220721.415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-open-github.git")
               (commit
                 "5e6d700d1b484bd6cd44bc30674e96d157870c3f")))
        (sha256
          (base32
            "1sgzwipp3lqprxw2dr5pqibxx4a81aa9vkiqsvz8irjqb03fcic6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-gh))
    (home-page
      "https://github.com/syohex/emacs-helm-open-github")
    (synopsis "Utilities of Opening Github Page")
    (description
      "Documentation at https://melpa.org/#/helm-open-github")
    (license #f)))

(define-public emacs-helm-org
  (package
    (name "emacs-helm-org")
    (version "20231022.620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-org.git")
               (commit
                 "c80e53315ce6b096e2d0e630702df924bf00bf6a")))
        (sha256
          (base32
            "1nlqlaxxs5zk2ara3k2986jjfsj1zbknwx40jliqq39dky0ksblh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-org")
    (synopsis
      "Helm for org headlines and keywords completion")
    (description
      "Documentation at https://melpa.org/#/helm-org")
    (license #f)))

(define-public emacs-helm-org-multi-wiki
  (package
    (name "emacs-helm-org-multi-wiki")
    (version "20210228.1853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-multi-wiki.git")
               (commit
                 "bf8039aadddaf02569fab473f766071ef7e63563")))
        (sha256
          (base32
            "0hmn9yy2d7wy6zz81ddd96rksmvs9k5529dfqrkrpl4v3bn3g52d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-multi-wiki
            emacs-org-ql
            emacs-dash
            emacs-helm-org-ql
            emacs-helm))
    (arguments '(#:files ("helm-org-multi-wiki.el")))
    (home-page
      "https://github.com/akirak/org-multi-wiki")
    (synopsis "Helm interface to org-multi-wiki")
    (description
      "Documentation at https://melpa.org/#/helm-org-multi-wiki")
    (license #f)))

(define-public emacs-helm-org-ql
  (package
    (name "emacs-helm-org-ql")
    (version "20231023.2352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-ql.git")
               (commit
                 "ee01bcb6e84e950efc7a9ebe9a423223e9737d47")))
        (sha256
          (base32
            "0fqrwbkylzm52bcx7g0838i5yrdzb2zyn70pkzj5p7mkb5n9l046"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-helm-org
            emacs-org-ql))
    (arguments '(#:files ("helm-org-ql.el")))
    (home-page "https://github.com/alphapapa/org-ql")
    (synopsis "Helm support for org-ql")
    (description
      "Documentation at https://melpa.org/#/helm-org-ql")
    (license #f)))

(define-public emacs-helm-org-recent-headings
  (package
    (name "emacs-helm-org-recent-headings")
    (version "20211011.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-recent-headings.git")
               (commit
                 "97418d581ea030f0718794e50b005e9bae44582e")))
        (sha256
          (base32
            "1y11rlnhi36lzhc1cagninv6hlcwbvj88xfr0g0xzpbzy7hys021"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-helm
            emacs-org-recent-headings
            emacs-s))
    (arguments
      '(#:files ("helm-org-recent-headings.el")))
    (home-page
      "http://github.com/alphapapa/org-recent-headings")
    (synopsis "Helm source for org-recent-headings")
    (description
      "Documentation at https://melpa.org/#/helm-org-recent-headings")
    (license #f)))

(define-public emacs-helm-org-rifle
  (package
    (name "emacs-helm-org-rifle")
    (version "20230821.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-rifle.git")
               (commit
                 "03a52265040b8c6510a8269213d750c451779c38")))
        (sha256
          (base32
            "0wgphpa9qymrc36i4wniwm9dddx6inmj2mdv7hkb1kbld3b5apsg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-helm emacs-s))
    (home-page
      "http://github.com/alphapapa/helm-org-rifle")
    (synopsis "Rifle through your Org files")
    (description
      "Documentation at https://melpa.org/#/helm-org-rifle")
    (license #f)))

(define-public emacs-helm-orgcard
  (package
    (name "emacs-helm-orgcard")
    (version "20220721.756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/helm-orgcard.git")
               (commit
                 "d58d35627bb1714bb2cb095f696706b6881233ed")))
        (sha256
          (base32
            "05ah4ha9zg1fzs60hs2zdfnxwy7cbrn35c8r6rrryy59dn40jzxc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/emacs-jp/helm-orgcard")
    (synopsis "browse the orgcard by helm")
    (description
      "Documentation at https://melpa.org/#/helm-orgcard")
    (license #f)))

(define-public emacs-helm-osx-app
  (package
    (name "emacs-helm-osx-app")
    (version "20190717.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-osx-app.git")
               (commit
                 "634ed5d721a20af265825a018e9df3ee6640daee")))
        (sha256
          (base32
            "04p2fp7mp2q1ava457cg1vm6ycag0ig11nmr23fybixdsp1j646j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/xuchunyang/helm-osx-app")
    (synopsis "Launch macOS apps with helm")
    (description
      "Documentation at https://melpa.org/#/helm-osx-app")
    (license #f)))

(define-public emacs-helm-pages
  (package
    (name "emacs-helm-pages")
    (version "20161121.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/helm-pages.git")
               (commit
                 "51dcb9374d1df9feaae85e60cfb39b970554ecba")))
        (sha256
          (base32
            "0znmj13nshzspysnzrn2x6k9fym21n9ywkpjibljy0s05m36nbs5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "Pages in current buffer as Helm datasource")
    (description
      "Documentation at https://melpa.org/#/helm-pages")
    (license #f)))

(define-public emacs-helm-pass
  (package
    (name "emacs-helm-pass")
    (version "20210221.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-pass.git")
               (commit
                 "4ce46f1801f2e76e53482c65aa0619d427a3fbf9")))
        (sha256
          (base32
            "19w24isddzamkikq17vbv3y7ha22i7wc09d2nqw1j0qwhrrfkng9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-password-store))
    (home-page
      "https://github.com/emacs-helm/helm-pass")
    (synopsis
      "helm interface of pass, the standard Unix password manager")
    (description
      "Documentation at https://melpa.org/#/helm-pass")
    (license #f)))

(define-public emacs-helm-perldoc
  (package
    (name "emacs-helm-perldoc")
    (version "20220721.431")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-perldoc.git")
               (commit
                 "affbf0f7357e5e0b33dab74d7193c91632d59b78")))
        (sha256
          (base32
            "0fs1v2cdz545cky9cd4iq1k85mdq1l1fxzy5y5ap9smyc3bysm9v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-deferred))
    (arguments '(#:files (:defaults "*.pl")))
    (home-page
      "https://github.com/syohex/emacs-helm-perldoc")
    (synopsis "perldoc with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-perldoc")
    (license #f)))

(define-public emacs-helm-perspeen
  (package
    (name "emacs-helm-perspeen")
    (version "20170228.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimo1001/helm-perspeen.git")
               (commit
                 "7fe2922d85608bfa9e18269fc44181428b8849ff")))
        (sha256
          (base32
            "1m89c95vzmhsvrg5g7ixz5a5ckw2n983x58cwh8rkmaklavacgsy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-perspeen emacs-helm))
    (home-page
      "https://github.com/jimo1001/helm-perspeen")
    (synopsis "Helm interface for perspeen.")
    (description
      "Documentation at https://melpa.org/#/helm-perspeen")
    (license #f)))

(define-public emacs-helm-phpunit
  (package
    (name "emacs-helm-phpunit")
    (version "20160513.853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eric-hansen/helm-phpunit.git")
               (commit
                 "739f26204ad2ba76c25f45e8eab1e5216f7c3518")))
        (sha256
          (base32
            "0wirqnzprfxbppdawfx6ah5rdawgyvl8b4zn2r3zm9mnj9jci4dw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-phpunit))
    (home-page
      "https://github.com/eric-hansen/phpunit-helm")
    (synopsis "Helm integration for phpunit.el")
    (description
      "Documentation at https://melpa.org/#/helm-phpunit")
    (license #f)))

(define-public emacs-helm-posframe
  (package
    (name "emacs-helm-posframe")
    (version "20230822.2030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/helm-posframe.git")
               (commit
                 "0b6bb016f0ff4980860a9d00574de311748c40b0")))
        (sha256
          (base32
            "1asw6q53xbk7xc0da4w03f8p5z3jhfhg16ggwslgwxx8vjv5zvg7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-helm))
    (home-page
      "https://github.com/tumashu/helm-posframe")
    (synopsis "Using posframe to show helm window")
    (description
      "Documentation at https://melpa.org/#/helm-posframe")
    (license #f)))

(define-public emacs-helm-proc
  (package
    (name "emacs-helm-proc")
    (version "20161006.305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/markus1189/helm-proc.git")
               (commit
                 "576d31c2d74ba3897d56e2acd2b0993f52c2547c")))
        (sha256
          (base32
            "11xahzybwh02ds19y6h5hbpqdj278kcb4239vyykdl3wx8p048a7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis
      "Helm interface for managing system processes")
    (description
      "Documentation at https://melpa.org/#/helm-proc")
    (license #f)))

(define-public emacs-helm-project
  (package
    (name "emacs-helm-project")
    (version "20230608.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmccloud/helm-project.git")
               (commit
                 "4a47ffa78711c3737dc0a58c57a4568a2cc922aa")))
        (sha256
          (base32
            "0qnp4ql0khvm2x19f71zfjbpzcxjymjljkyhnvsf5k4bm7z369ck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/cmccloud/helm-project")
    (synopsis "Helm source for project management")
    (description
      "Documentation at https://melpa.org/#/helm-project")
    (license #f)))

(define-public emacs-helm-project-persist
  (package
    (name "emacs-helm-project-persist")
    (version "20151210.1543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sliim/helm-project-persist.git")
               (commit
                 "357950fbac18090985a750e40d5d8b10ee9dcd53")))
        (sha256
          (base32
            "0j54c1kzsjgr05qx25rg3ylawvyw6n6liypiwaas47vpyfswbxhv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-project-persist))
    (home-page "unspecified")
    (synopsis
      "Helm integration for project-persist package")
    (description
      "Documentation at https://melpa.org/#/helm-project-persist")
    (license #f)))

(define-public emacs-helm-projectile
  (package
    (name "emacs-helm-projectile")
    (version "20231023.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/helm-projectile.git")
               (commit
                 "e2e38825c975269a4971df25e79b2ae98929624e")))
        (sha256
          (base32
            "1q1699qqalgd3pkdhl4bijn9zv2l2bsazjgaiyi2yzmk9ksjwiiq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-projectile))
    (home-page
      "https://github.com/bbatsov/helm-projectile")
    (synopsis "Helm integration for Projectile")
    (description
      "Documentation at https://melpa.org/#/helm-projectile")
    (license #f)))

(define-public emacs-helm-prosjekt
  (package
    (name "emacs-helm-prosjekt")
    (version "20140129.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/prosjekt.git")
               (commit
                 "a864a8be5842223043702395f311e3350c28e9db")))
        (sha256
          (base32
            "1m8zvrv5aws7b0dffk8y6b5mncdk2c4k90mx69jys10fs0gc5hb3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prosjekt emacs-helm))
    (arguments
      '(#:files ("prosjekt/ext/helm/helm-prosjekt.el")))
    (home-page
      "https://github.com/abingham/prosjekt")
    (synopsis "Helm integration for prosjekt.")
    (description
      "Documentation at https://melpa.org/#/helm-prosjekt")
    (license #f)))

(define-public emacs-helm-pt
  (package
    (name "emacs-helm-pt")
    (version "20160214.2342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralesi/helm-pt.git")
               (commit
                 "8acc52911dad1ed0c3975f134a468762afe0b76b")))
        (sha256
          (base32
            "03ys40rr0pvgp35j5scw9c28j184f1c9m58a3x0c8f0lgyfpssjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/ralesi/helm-pt")
    (synopsis
      "Helm interface to the platinum searcher")
    (description
      "Documentation at https://melpa.org/#/helm-pt")
    (license #f)))

(define-public emacs-helm-purpose
  (package
    (name "emacs-helm-purpose")
    (version "20170114.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/helm-purpose.git")
               (commit
                 "9ff4c21c1e9ebc7afb851b738f815df7343bb287")))
        (sha256
          (base32
            "1xh6v5xlf1prgk6mrvkc6qa0r0bz74s5f4z3dl7d00chsi7i2m5v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-window-purpose))
    (home-page
      "https://github.com/bmag/helm-purpose")
    (synopsis "Helm Interface for Purpose")
    (description
      "Documentation at https://melpa.org/#/helm-purpose")
    (license #f)))

(define-public emacs-helm-pydoc
  (package
    (name "emacs-helm-pydoc")
    (version "20220721.433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-pydoc.git")
               (commit
                 "cac7b8953adcab85e898bc42b699c3afde5d33c6")))
        (sha256
          (base32
            "11d34283zh1yffrb2ad4h1ib1n00yx5avas0l39hm56m2gvx6d89"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (arguments '(#:files (:defaults "*.py")))
    (home-page
      "https://github.com/syohex/emacs-helm-pydoc")
    (synopsis "pydoc with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-pydoc")
    (license #f)))

(define-public emacs-helm-qiita
  (package
    (name "emacs-helm-qiita")
    (version "20190526.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masutaka/emacs-helm-qiita.git")
               (commit
                 "5f82010c595f8e122aa3f68148ba8d8ccb1333d8")))
        (sha256
          (base32
            "1vkm2h0ia0gqqjw6cnbyik0fv37zzjwwdzk1cnh7a3s5hsg60i68"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masutaka/emacs-helm-qiita")
    (synopsis "Qiita with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-qiita")
    (license #f)))

(define-public emacs-helm-r
  (package
    (name "emacs-helm-r")
    (version "20120820.14")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/helm-R.el.git")
               (commit
                 "b0eb9d5f6a483a9dbe6eb6cf1f2024d4f5938bc2")))
        (sha256
          (base32
            "0nip0zrmn944wy0x2dc5ryr0m7a948rn2a8cbaajghs7a7zai4cr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-ess))
    (home-page "https://github.com/myuhe/helm-R.el")
    (synopsis
      "helm-sources and some utilities for GNU R.")
    (description
      "Documentation at https://melpa.org/#/helm-R")
    (license #f)))

(define-public emacs-helm-rage
  (package
    (name "emacs-helm-rage")
    (version "20180118.1532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bomgar/helm-rage.git")
               (commit
                 "5d0aefb53d859186181d4bdcfeff7d315339c7b8")))
        (sha256
          (base32
            "0msj3rrv9bwhhwz7r1ayr6qvnxjsq7374j0xfhqbrx49pix4qf3q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-dash emacs-s))
    (arguments '(#:files (:defaults "meme")))
    (home-page "https://github.com/bomgar/helm-rage")
    (synopsis "Helm command for rage characters.")
    (description
      "Documentation at https://melpa.org/#/helm-rage")
    (license #f)))

(define-public emacs-helm-rails
  (package
    (name "emacs-helm-rails")
    (version "20130424.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/helm-rails.git")
               (commit
                 "506d9948d45dfbc575c9c4c0d102c1ad2f511e82")))
        (sha256
          (base32
            "0i5ps5yds21bsrx86piy9bdgca95l1farsrbjpqz88ad8pq6xa9c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-inflections))
    (arguments '(#:files ("helm-rails.el")))
    (home-page "https://github.com/asok/helm-rails")
    (synopsis "Helm extension for Rails projects.")
    (description
      "Documentation at https://melpa.org/#/helm-rails")
    (license #f)))

(define-public emacs-helm-rdefs
  (package
    (name "emacs-helm-rdefs")
    (version "20161130.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/saidie/emacs-helm-rdefs.git")
               (commit
                 "cd3a6b3af3015ee58ef30cb7c81c79ebe5fc867b")))
        (sha256
          (base32
            "0ji7ak9pkmw0wxzmw5a1amvn3pkj90v9jv1yi12w388njxn7qsvj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/saidie/helm-rdefs")
    (synopsis "rdefs with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-rdefs")
    (license #f)))

(define-public emacs-helm-recoll
  (package
    (name "emacs-helm-recoll")
    (version "20220920.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-recoll.git")
               (commit
                 "c054047ecca360c3e02281d8d0c021f654e63f37")))
        (sha256
          (base32
            "0w501j1bm73ryxygkw68xd6d7xyyr2wgd2xh0mzvd5y8djyf70hr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-recoll")
    (synopsis
      "helm interface for the recoll desktop search tool.")
    (description
      "Documentation at https://melpa.org/#/helm-recoll")
    (license #f)))

(define-public emacs-helm-rg
  (package
    (name "emacs-helm-rg")
    (version "20200721.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/helm-rg.git")
               (commit
                 "ee0a3c09da0c843715344919400ab0a0190cc9dc")))
        (sha256
          (base32
            "0m4l894345n0zkbgl0ar4c93v8pyrhblk9zbrjrdr9cfz40bx2kd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-helm))
    (home-page
      "https://github.com/cosmicexplorer/helm-rg")
    (synopsis "a helm interface to ripgrep")
    (description
      "Documentation at https://melpa.org/#/helm-rg")
    (license #f)))

(define-public emacs-helm-rhythmbox
  (package
    (name "emacs-helm-rhythmbox")
    (version "20160524.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrBliss/helm-rhythmbox.git")
               (commit
                 "c92e1ded34ddd4e62e7e9a558259c232e05193fa")))
        (sha256
          (base32
            "1ng73dmligj38xbfdfr8sb69czppks7wfvh5q5xcm2pha828kcwm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/mrBliss/helm-rhythmbox")
    (synopsis
      "control Rhythmbox's play queue via Helm")
    (description
      "Documentation at https://melpa.org/#/helm-rhythmbox")
    (license #f)))

(define-public emacs-helm-robe
  (package
    (name "emacs-helm-robe")
    (version "20151209.355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-robe.git")
               (commit
                 "6e69543b4ee76c5f8f3f2510c76e6d9aed17a370")))
        (sha256
          (base32
            "1qcx036pgrg4xc1y74amd8jkjylnc0g1c4841cc3fbknnn1ap54g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/syohex/emacs-helm-robe")
    (synopsis "completing read function for robe")
    (description
      "Documentation at https://melpa.org/#/helm-robe")
    (license #f)))

(define-public emacs-helm-ros
  (package
    (name "emacs-helm-ros")
    (version "20160812.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidlandry93/helm-ros.git")
               (commit
                 "92b0b215f6a017f0f57f1af15466cc0b2a5a0135")))
        (sha256
          (base32
            "1fgph8wsm2nakn53zj19r59mirzn25r601rljmdv2xpw5h3axywg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-xterm-color))
    (home-page
      "https://www.github.com/davidlandry93/helm-ros")
    (synopsis "Interfaces ROS with helm")
    (description
      "Documentation at https://melpa.org/#/helm-ros")
    (license #f)))

(define-public emacs-helm-rtags
  (package
    (name "emacs-helm-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-rtags))
    (arguments '(#:files ("src/helm-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "A front-end for rtags")
    (description
      "Documentation at https://melpa.org/#/helm-rtags")
    (license #f)))

(define-public emacs-helm-rubygems-local
  (package
    (name "emacs-helm-rubygems-local")
    (version "20130712.111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hadashiA/helm-rubygems-local.git")
               (commit
                 "289cb33d41c703af9791d6da46b55f070013c2e3")))
        (sha256
          (base32
            "0s4hb1fvwr9za5gkz8s5w1kh9qjyygz6g59w7vmrg2d8ds2an03d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/f-kubotar/helm-rubygems-local")
    (synopsis
      "Installed local rubygems find-file for helm")
    (description
      "Documentation at https://melpa.org/#/helm-rubygems-local")
    (license #f)))

(define-public emacs-helm-rubygems-org
  (package
    (name "emacs-helm-rubygems-org")
    (version "20140826.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neomantic/helm-rubygems-org.git")
               (commit
                 "6aaed984f698cbdf9f9aceb0221404563e28764d")))
        (sha256
          (base32
            "1sff8kagyhmwcxf9062il1077d4slvr2kq76abj496610gpb75i0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/neomantic/helm-rubygems-org")
    (synopsis "Use helm to search rubygems.org")
    (description
      "Documentation at https://melpa.org/#/helm-rubygems-org")
    (license #f)))

(define-public emacs-helm-safari
  (package
    (name "emacs-helm-safari")
    (version "20160404.324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-safari.git")
               (commit
                 "664c7f4488829228eed7e90cd53002e14bec555b")))
        (sha256
          (base32
            "1ws5zxanaiaaxpgkcb2914qa8wxp6ml019hfnfcp7amjnajq9pyz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/xuchunyang/helm-safari")
    (synopsis
      "Browse your Safari bookmarks and history")
    (description
      "Documentation at https://melpa.org/#/helm-safari")
    (license #f)))

(define-public emacs-helm-sage
  (package
    (name "emacs-helm-sage")
    (version "20160514.745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/helm-sage.git")
               (commit
                 "f14e9281d8f2162df7d8f9c2ad9ad1248a24803b")))
        (sha256
          (base32
            "0padb6mncgc52wib3dgvdc9r4dp591gf8nblbfnsnxx4zjrcwawb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-sage-shell-mode))
    (home-page
      "https://github.com/stakemori/helm-sage")
    (synopsis
      "A helm extension for sage-shell-mode.")
    (description
      "Documentation at https://melpa.org/#/helm-sage")
    (license #f)))

(define-public emacs-helm-searcher
  (package
    (name "emacs-helm-searcher")
    (version "20221231.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-searcher.git")
               (commit
                 "225480fa89d73eb53478576610f48d035b77cda9")))
        (sha256
          (base32
            "0xmjccgym52fdryggr8lpamxy5d39jxr5mrl76r11n30dr46r1qi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-searcher emacs-s emacs-f))
    (home-page
      "https://github.com/emacs-helm/helm-searcher")
    (synopsis "Helm interface to use searcher")
    (description
      "Documentation at https://melpa.org/#/helm-searcher")
    (license #f)))

(define-public emacs-helm-selected
  (package
    (name "emacs-helm-selected")
    (version "20171223.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/helm-selected.git")
               (commit
                 "a9c769998bc56373d19f0ec9cbbbb4bd89a43c2d")))
        (sha256
          (base32
            "1n6sp6bhlz01b1d87cgrgxhap0ch1bkh7fl45dzidx5fjz9lccdf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-selected))
    (home-page
      "https://github.com/takaxp/helm-selected")
    (synopsis "helm extension for selected.el")
    (description
      "Documentation at https://melpa.org/#/helm-selected")
    (license #f)))

(define-public emacs-helm-selector
  (package
    (name "emacs-helm-selector")
    (version "20210125.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-selector.git")
               (commit
                 "4da4711c4cfd14527abe20d66787beeb49171b26")))
        (sha256
          (base32
            "01lh1df0bnas1p7xlqc4i1jd67f8lxgq0q2zsvx10z8828i76j3v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-selector")
    (synopsis "Helm buffer selector")
    (description
      "Documentation at https://melpa.org/#/helm-selector")
    (license #f)))

(define-public emacs-helm-sheet
  (package
    (name "emacs-helm-sheet")
    (version "20130630.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-sheet.git")
               (commit
                 "d360b68d0ddb09aa1854e7b2f3cb39caeee26463")))
        (sha256
          (base32
            "00wnqcgpf4hqdnqj5zrizr4s0pffb93xwya8k5c3rp4plncrcdzx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/yasuyk/helm-sheet")
    (synopsis "helm sources for sheet")
    (description
      "Documentation at https://melpa.org/#/helm-sheet")
    (license #f)))

(define-public emacs-helm-shell-history
  (package
    (name "emacs-helm-shell-history")
    (version "20210214.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anoopemacs/helm-shell-history.git")
               (commit
                 "0c861f3db721e54053fc65f5651cf548cc1cb600")))
        (sha256
          (base32
            "00dkwym5xkvxa3w4dgpbk22rhrwl7v73cv6ay3pqcv7rjcc2m3s8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/yuutayamada/helm-shell-history")
    (synopsis "Find shell history from helm")
    (description
      "Documentation at https://melpa.org/#/helm-shell-history")
    (license #f)))

(define-public emacs-helm-slime
  (package
    (name "emacs-helm-slime")
    (version "20191016.1601")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-slime.git")
               (commit
                 "7886cc49906a87ebd73be3b71f5dd6b1433a9b7b")))
        (sha256
          (base32
            "1g9fnp818d677xhx2m4820742fyblvmnsygmkdb5530lacdaksh2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-slime))
    (home-page
      "https://github.com/emacs-helm/helm-slime")
    (synopsis
      "helm-sources and some utilities for SLIME.")
    (description
      "Documentation at https://melpa.org/#/helm-slime")
    (license #f)))

(define-public emacs-helm-sly
  (package
    (name "emacs-helm-sly")
    (version "20210205.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-sly.git")
               (commit
                 "3691626c80620e992a338c3222283d9149f1ecb5")))
        (sha256
          (base32
            "06x8wyx1r0s7askkvlbklgz1cszv34qsvv3gryndw350smk1v8kx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-sly))
    (home-page
      "https://github.com/emacs-helm/helm-sly")
    (synopsis
      "Helm sources and some utilities for SLY.")
    (description
      "Documentation at https://melpa.org/#/helm-sly")
    (license #f)))

(define-public emacs-helm-smex
  (package
    (name "emacs-helm-smex")
    (version "20171004.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/helm-smex.git")
               (commit
                 "2269375dfa452b88b5170d1a5d5849ebb2c1e413")))
        (sha256
          (base32
            "0n2ki7g0hygsq4bi5zkhp3v772ld7niiajfznxmv11dgn949a52s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-smex emacs-helm))
    (home-page "unspecified")
    (synopsis "Helm interface for smex")
    (description
      "Documentation at https://melpa.org/#/helm-smex")
    (license #f)))

(define-public emacs-helm-spaces
  (package
    (name "emacs-helm-spaces")
    (version "20161001.1409")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/helm-spaces.git")
               (commit
                 "877e2b5178926308d6a7c2a37477bb12c33a96d4")))
        (sha256
          (base32
            "1cz8aw6zprzfalagma7jmbycwll2chk2l4n5hkgqyhakdfm2ryzm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-core emacs-spaces))
    (home-page
      "https://github.com/yasuyk/helm-spaces")
    (synopsis "helm sources for spaces")
    (description
      "Documentation at https://melpa.org/#/helm-spaces")
    (license #f)))

(define-public emacs-helm-spotify
  (package
    (name "emacs-helm-spotify")
    (version "20160905.2147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/helm-spotify.git")
               (commit
                 "f7a62d1ff88e3127de9be7cd3e818b0a92268ab3")))
        (sha256
          (base32
            "0q3h84zj63b1rnlvmsznrpmvvf0qbic5yb9xkdjcz4jz4h8p3h1w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-multi))
    (home-page
      "https://github.com/krisajenkins/helm-spotify")
    (synopsis "Control Spotify with Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-spotify")
    (license #f)))

(define-public emacs-helm-spotify-plus
  (package
    (name "emacs-helm-spotify-plus")
    (version "20190913.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/helm-spotify-plus.git")
               (commit
                 "c3922ec368250965e483876cde5880d88a40a71b")))
        (sha256
          (base32
            "12zl775l7zikv268vypnb56ly2h0y3sf5wxv5rc2amnmwgrikvra"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-multi))
    (home-page
      "https://github.com/wandersoncferreira/helm-spotify-plus")
    (synopsis
      "Control Spotify search and select music with Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-spotify-plus")
    (license #f)))

(define-public emacs-helm-sql-connect
  (package
    (name "emacs-helm-sql-connect")
    (version "20170319.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eric-hansen/helm-sql-connect.git")
               (commit
                 "5aead55b6f8636140945714d8c332b287ab9ef10")))
        (sha256
          (base32
            "037gri2r9y135av8gbgi9d8k90qs8jlax0bimzcbwdkyhibhzrcp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/eric-hansen/helm-sql-connect")
    (synopsis
      "Choose a database to connect to via Helm.")
    (description
      "Documentation at https://melpa.org/#/helm-sql-connect")
    (license #f)))

(define-public emacs-helm-switch-shell
  (package
    (name "emacs-helm-switch-shell")
    (version "20210713.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamesnvc/helm-switch-shell.git")
               (commit
                 "8d7ba1d99ff12a8f1d6ce3b9684ae8aebf494cf3")))
        (sha256
          (base32
            "04d7hz7gpbcy4vnmwi605n51angn4xbx6kqqqdb8nqvzh4f0y5g1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/jamesnvc/helm-switch-shell")
    (synopsis
      "A Helm source for switching between shell buffers")
    (description
      "Documentation at https://melpa.org/#/helm-switch-shell")
    (license #f)))

(define-public emacs-helm-switch-to-repl
  (package
    (name "emacs-helm-switch-to-repl")
    (version "20210206.844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-switch-to-repl.git")
               (commit
                 "f0e732e7217fc0373b0805245fa15920cf676619")))
        (sha256
          (base32
            "0n8qa549c5syvgqw1h2zrakjjbygddpxzaifaq5irscgdcajrads"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-switch-to-repl")
    (synopsis
      "Helm action to switch directory in REPLs")
    (description
      "Documentation at https://melpa.org/#/helm-switch-to-repl")
    (license #f)))

(define-public emacs-helm-swoop
  (package
    (name "emacs-helm-swoop")
    (version "20210426.547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-swoop.git")
               (commit
                 "1b3285791f1dc1fde548fe67aec07214d698fd57")))
        (sha256
          (base32
            "0wgi7pk2s4syi3fc8l60zcnz34f8ik9y558la0d5ryci4fssrl7i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacsorphanage/helm-swoop")
    (synopsis
      "Efficiently hopping squeezed lines powered by helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-swoop")
    (license #f)))

(define-public emacs-helm-system-packages
  (package
    (name "emacs-helm-system-packages")
    (version "20220515.812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-system-packages.git")
               (commit
                 "e93f4aeaa77b73c6e529141c3fa0ac49b40b6306")))
        (sha256
          (base32
            "1i5dy2hi5xiyb2p2795pk24h8kzmd38pasd51azyx5d0qmjjvb8m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-system-packages")
    (synopsis
      "Helm UI wrapper for system package managers.")
    (description
      "Documentation at https://melpa.org/#/helm-system-packages")
    (license #f)))

(define-public emacs-helm-systemd
  (package
    (name "emacs-helm-systemd")
    (version "20210105.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lompik/helm-systemd.git")
               (commit
                 "8b26ab2d3a5b08c1e03c9312818512d7492bbc9a")))
        (sha256
          (base32
            "11v6pwkhdssg2f6azs3nw1y3s5ysmkxxv1jvgm7yy8gwg04zvcym"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-with-editor))
    (arguments '(#:files ("helm-systemd.el")))
    (home-page "unspecified")
    (synopsis "helm's systemd interface")
    (description
      "Documentation at https://melpa.org/#/helm-systemd")
    (license #f)))

(define-public emacs-helm-tail
  (package
    (name "emacs-helm-tail")
    (version "20220726.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/helm-tail.git")
               (commit
                 "8dc44a87fa1a52199e43b73b55c8ef8fe8069e79")))
        (sha256
          (base32
            "1gn3z14md9b20pkjk8gzjajjqdgb3nmnf10ylanlfh7gx5xjig77"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/akirak/helm-tail")
    (synopsis
      "Read recent output from various sources")
    (description
      "Documentation at https://melpa.org/#/helm-tail")
    (license #f)))

(define-public emacs-helm-taskswitch
  (package
    (name "emacs-helm-taskswitch")
    (version "20221019.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bdc34/helm-taskswitch.git")
               (commit
                 "6e8b62702376c1d30ab52a419dd72cb2a40fd76e")))
        (sha256
          (base32
            "0vpkhpqq4v16ax2cqy2j75ycwq15cc3k128b4jw31bk93225faaf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/bdc34/helm-taskswitch")
    (synopsis
      "Use helm to switch windows and buffers")
    (description
      "Documentation at https://melpa.org/#/helm-taskswitch")
    (license #f)))

(define-public emacs-helm-themes
  (package
    (name "emacs-helm-themes")
    (version "20220721.330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/helm-themes.git")
               (commit
                 "12e856c0346fa69d13d941f27bd3cddb3a3deed2")))
        (sha256
          (base32
            "19wqdf4v8cacfyg709xcmczwbaal32290cbv933wc6ridc5576i7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/syohex/emacs-helm-themes")
    (synopsis
      "Color theme selection with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-themes")
    (license #f)))

(define-public emacs-helm-tramp
  (package
    (name "emacs-helm-tramp")
    (version "20230714.1053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masasam/emacs-helm-tramp.git")
               (commit
                 "6683eae65a106d5afd5575b2b05cdb5529ddc926")))
        (sha256
          (base32
            "1cg9hawb3c6c6h8yfnnf0jamhv82y9xdcqpca497k8b24rcfmmfq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/masasam/emacs-helm-tramp")
    (synopsis
      "Tramp helm interface for ssh, docker, vagrant")
    (description
      "Documentation at https://melpa.org/#/helm-tramp")
    (license #f)))

(define-public emacs-helm-tree-sitter
  (package
    (name "emacs-helm-tree-sitter")
    (version "20220328.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Giedriusj1/helm-tree-sitter.git")
               (commit
                 "ef5209bd1deb56d6cab7a26e6d55615161f2115a")))
        (sha256
          (base32
            "1cmjz8dl8r218r1bx85slzb91xwlrhxq9w73p5ql967wd9dzi60g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-tree-sitter))
    (home-page
      "https://github.com/Giedriusj1/helm-tree-sitter")
    (synopsis "Helm interface for tree-sitter")
    (description
      "Documentation at https://melpa.org/#/helm-tree-sitter")
    (license #f)))

(define-public emacs-helm-twitch
  (package
    (name "emacs-helm-twitch")
    (version "20220420.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BenediktBroich/helm-twitch.git")
               (commit
                 "27fbec24cc250d508cd2f4286da16262752908eb")))
        (sha256
          (base32
            "1sair8har6blwn1s12msz780cfsjpn0fzhy6ckhjh4sw9747808b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-helm
            emacs-twitch-api
            emacs-streamlink))
    (home-page
      "https://github.com/BenediktBroich/helm-twitch")
    (synopsis "Navigate Twitch.tv via `helm'")
    (description
      "Documentation at https://melpa.org/#/helm-twitch")
    (license #f)))

(define-public emacs-helm-unicode
  (package
    (name "emacs-helm-unicode")
    (version "20180608.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bomgar/helm-unicode.git")
               (commit
                 "fbeb0c5e741a6f462520884b744d43a9acbe1d34")))
        (sha256
          (base32
            "1aqwjw0jky07swagxnaqcn28inckavvpnlrwj62fljglip87zrc2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "Helm command for unicode characters.")
    (description
      "Documentation at https://melpa.org/#/helm-unicode")
    (license #f)))

(define-public emacs-helm-w32-launcher
  (package
    (name "emacs-helm-w32-launcher")
    (version "20141223.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/helm-w32-launcher.git")
               (commit
                 "3e59ad62b89dd21d334af0203d445a83eb25dc5b")))
        (sha256
          (base32
            "0xlz9rxx7y9pkrzvxmv42vgys5iwx75zv9g50k8ihwc08z80dhcq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments
      '(#:files (:defaults "helper-src" "license.txt")))
    (home-page
      "https://github.com/Fanael/helm-w32-launcher")
    (synopsis "Start Menu entry launcher using Helm")
    (description
      "Documentation at https://melpa.org/#/helm-w32-launcher")
    (license #f)))

(define-public emacs-helm-w3m
  (package
    (name "emacs-helm-w3m")
    (version "20210315.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-w3m.git")
               (commit
                 "0a25a2b1df9bc660a90d633beb301b3815556e4e")))
        (sha256
          (base32
            "0cdfk1r2rcc5hflwjpmsijss6xf5lwzn7x68jq4b4xdlckkqf9d7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm emacs-w3m))
    (home-page "unspecified")
    (synopsis "W3m bookmark - helm interface.")
    (description
      "Documentation at https://melpa.org/#/helm-w3m")
    (license #f)))

(define-public emacs-helm-wikipedia
  (package
    (name "emacs-helm-wikipedia")
    (version "20221113.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-helm/helm-wikipedia.git")
               (commit
                 "ab040154f2efab9b5eea36b3bd368a66f62efbfb")))
        (sha256
          (base32
            "091xsyvdsxkvg6rszgqymd8y7yp6v37x1k1022qbf9j66m46y9pj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/emacs-helm/helm-wikipedia")
    (synopsis "Wikipedia suggestions")
    (description
      "Documentation at https://melpa.org/#/helm-wikipedia")
    (license #f)))

(define-public emacs-helm-wordnet
  (package
    (name "emacs-helm-wordnet")
    (version "20160128.1507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raghavgautam/helm-wordnet.git")
               (commit
                 "a36dbc6fcb570b812870bc1e190f203e0a0042fc")))
        (sha256
          (base32
            "03a5hzgqak8wg6i2h2p3fr9ij55lqarcsblml8qrnrj27ghcvzzh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/raghavgautam/helm-wordnet")
    (synopsis
      "Helm interface to local wordnet dictionary")
    (description
      "Documentation at https://melpa.org/#/helm-wordnet")
    (license #f)))

(define-public emacs-helm-xcdoc
  (package
    (name "emacs-helm-xcdoc")
    (version "20160116.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fujimisakari/emacs-helm-xcdoc.git")
               (commit
                 "a85612149a6d8e18ab309b3db2d222ce39c42049")))
        (sha256
          (base32
            "1yqr5z5sw7schvaq9pmwg79anp806gikm28s6xvrayzyn4idz2n6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/fujimisakari/emacs-helm-xcdoc")
    (synopsis
      "Search Xcode Document by docsetutil and eww with helm interface")
    (description
      "Documentation at https://melpa.org/#/helm-xcdoc")
    (license #f)))

(define-public emacs-helm-xref
  (package
    (name "emacs-helm-xref")
    (version "20211017.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brotzeit/helm-xref.git")
               (commit
                 "ea0e4ed8a9baf236e4085cbc7178241f109a53fa")))
        (sha256
          (base32
            "1xbz6idr1fnqkqh0fsn9bhwavng6b2s4idc2l302s2vziygcm42d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/brotzeit/helm-xref")
    (synopsis "Helm interface for xref results")
    (description
      "Documentation at https://melpa.org/#/helm-xref")
    (license #f)))

(define-public emacs-helm-youtube
  (package
    (name "emacs-helm-youtube")
    (version "20190101.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maximus12793/helm-youtube.git")
               (commit
                 "e7272f1648c7fa836ea5ac1a61770b4931ab4709")))
        (sha256
          (base32
            "062i1gkwa1rmxaw5mf20vc3nqsj6g6hfbggcglgd3wfn9rckvlqb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-helm))
    (home-page
      "https://github.com/maximus12793/helm-youtube")
    (synopsis
      "Query YouTube and play videos in your browser")
    (description
      "Documentation at https://melpa.org/#/helm-youtube")
    (license #f)))

(define-public emacs-helm-z
  (package
    (name "emacs-helm-z")
    (version "20171204.325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonkyy/helm-z.git")
               (commit
                 "37212220bebea8b9c238cb1bbacd8332b7f26c03")))
        (sha256
          (base32
            "1vz958yiva01yl1qj2pz84savcx8jgkvbywhcp4c3a8x3fikf0yl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "https://github.com/yynozk/helm-z")
    (synopsis
      "Show z directory list with helm.el support.")
    (description
      "Documentation at https://melpa.org/#/helm-z")
    (license #f)))

(define-public emacs-helm-zhihu-daily
  (package
    (name "emacs-helm-zhihu-daily")
    (version "20160625.1145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/helm-zhihu-daily.git")
               (commit
                 "be27dcc6be1eb97663b65581a9a5c0fc81cfaba7")))
        (sha256
          (base32
            "1s8q97pra27bacvm5knj0sjgj7iqljlhxqiniaw8ij8w4fhcdh93"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page
      "https://github.com/xuchunyang/helm-zhihu-daily")
    (synopsis
      "Helm interface for 知乎日报 (http://daily.zhihu.com)")
    (description
      "Documentation at https://melpa.org/#/helm-zhihu-daily")
    (license #f)))

(define-public emacs-help-find
  (package
    (name "emacs-help-find")
    (version "20220929.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/duncanburke/help-find.git")
               (commit
                 "ef7266fc480367c12bff64817c875af940d0c9c0")))
        (sha256
          (base32
            "1m73capf6flcn8d8ykx13va0wvpcqkjj5isdf5wrlaxhayjc2s7r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/duncanburke/help-find")
    (synopsis
      "Additional help functions for working with keymaps")
    (description
      "Documentation at https://melpa.org/#/help-find")
    (license #f)))

(define-public emacs-help-find-org-mode
  (package
    (name "emacs-help-find-org-mode")
    (version "20181204.234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/help-find-org-mode.git")
               (commit
                 "aeda7f92c086dab9d8dfcd580fe80b332887a548")))
        (sha256
          (base32
            "18qj0ssmysfr5hlrayhw8m7a1nr1fpzsd5hn15kzbi7kzdnmc18w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/EricCrosson/help-find-org-mode")
    (synopsis
      "Advise help to find org source over tangled code")
    (description
      "Documentation at https://melpa.org/#/help-find-org-mode")
    (license #f)))

(define-public emacs-helpful
  (package
    (name "emacs-helpful")
    (version "20231028.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/helpful.git")
               (commit
                 "a32a5b3d959a7fccf09a71d97b3d7c888ac31c69")))
        (sha256
          (base32
            "1shv5v0rls38znv64g8h80541qyjqk39fpr7wkq5vis8xpfvvpp5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-elisp-refs))
    (home-page "https://github.com/Wilfred/helpful")
    (synopsis "A better *help* buffer")
    (description
      "Documentation at https://melpa.org/#/helpful")
    (license #f)))

(define-public emacs-hemera-theme
  (package
    (name "emacs-hemera-theme")
    (version "20180916.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/emacs-hemera-theme.git")
               (commit
                 "b67c902b210b37b00cac68726822404543147ba8")))
        (sha256
          (base32
            "1q31kz5p97pby26lyb6r0jfcx5pdyax3sfba4lp8dzmxpisz2g2p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GuidoSchmidt/emacs-hemera-theme")
    (synopsis "Light theme")
    (description
      "Documentation at https://melpa.org/#/hemera-theme")
    (license #f)))

(define-public emacs-hemisu-theme
  (package
    (name "emacs-hemisu-theme")
    (version "20130508.1844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrzejsliwa/hemisu-theme.git")
               (commit
                 "5c206561aa2c844ecdf3e3b672c3235e559ddd7f")))
        (sha256
          (base32
            "178dvigiw162m01x7dm8pf61w2n3bq51lvk5q7jzpb9s35pz1697"))))
    (build-system melpa-build-system)
    (home-page
      "http://github/anrzejsliwa/django-theme")
    (synopsis "Hemisu for Emacs.")
    (description
      "Documentation at https://melpa.org/#/hemisu-theme")
    (license #f)))

(define-public emacs-hercules
  (package
    (name "emacs-hercules")
    (version "20200420.747")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wurosh/hercules.git")
               (commit
                 "557da39878d0637395fdded91243b340c37eff7b")))
        (sha256
          (base32
            "1rp37rhkj8jm07dwr74vc68dhrbvyvrxjdavpb0h073ps9vl9dsc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-which-key))
    (home-page
      "https://gitlab.com/jjzmajic/hercules")
    (synopsis
      "An auto-magical, which-key-based hydra banisher.")
    (description
      "Documentation at https://melpa.org/#/hercules")
    (license #f)))

(define-public emacs-heroku
  (package
    (name "emacs-heroku")
    (version "20230811.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/licht1stein/heroku.el.git")
               (commit
                 "b76db3801d759baece7865b238e99e494506dbeb")))
        (sha256
          (base32
            "1k7l7l2fhxyphbcrbdvj5rk98ma9xylcvlv9fm28ccd8ynzdfsrg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-ts))
    (home-page
      "https://github.com./licht1stein/heroku.el")
    (synopsis "Like Magit but for Heroku CLI")
    (description
      "Documentation at https://melpa.org/#/heroku")
    (license #f)))

(define-public emacs-heroku-theme
  (package
    (name "emacs-heroku-theme")
    (version "20150523.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jonathanchu/heroku-theme.git")
               (commit
                 "8083643fe92ec3a1c3eb82f1b8dc2236c9c9691d")))
        (sha256
          (base32
            "15hk0v6ck076mahsz4spq75jcnv587fx4d3w50c7bdh423fl0xvx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jonathanchu/color-theme-heroku")
    (synopsis "Heroku color theme")
    (description
      "Documentation at https://melpa.org/#/heroku-theme")
    (license #f)))

(define-public emacs-hexo
  (package
    (name "emacs-hexo")
    (version "20221130.1642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/hexo.el.git")
               (commit
                 "77b15d224c4a7632c2f52bd7444516746a4c2315")))
        (sha256
          (base32
            "19wlndadx8s6g8nq7ckq4k1b4m49cy7bscgfr2h4axdkgs5pgqy9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kuanyui/hexo.el")
    (synopsis "Major mode & tools for Hexo")
    (description
      "Documentation at https://melpa.org/#/hexo")
    (license #f)))

(define-public emacs-hfst-mode
  (package
    (name "emacs-hfst-mode")
    (version "20160708.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/hfst-mode.git")
               (commit
                 "ac1bb9dd92545d3e7fdc05c83996c227cc15c6b8")))
        (sha256
          (base32
            "0zsz8542kh51clzy8j7g29bwm8zcnfxm9sjzh3xjpqk2ziqf4ii6"))))
    (build-system melpa-build-system)
    (home-page "http://wiki.apertium.org/wiki/Emacs")
    (synopsis "major mode for editing HFST files")
    (description
      "Documentation at https://melpa.org/#/hfst-mode")
    (license #f)))

(define-public emacs-hg-histedit
  (package
    (name "emacs-hg-histedit")
    (version "20210302.2334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/hg-histedit.git")
               (commit
                 "a05149483b9c5f7848ece0ba6028c900595a6a25")))
        (sha256
          (base32
            "04zps0d4s99f5a8ahrpyf8b6qw0c1y7rd1bsaq9nc6m4qblsvwc8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-with-editor))
    (home-page
      "https://github.com/jojojames/hg-histedit")
    (synopsis "Edit HG histedit files")
    (description
      "Documentation at https://melpa.org/#/hg-histedit")
    (license #f)))

(define-public emacs-hgignore-mode
  (package
    (name "emacs-hgignore-mode")
    (version "20220804.1326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/hgignore-mode.git")
               (commit
                 "c65810347f39904b985187c5e2aaf27b184f3cae")))
        (sha256
          (base32
            "1nwrkyb2przdw9fam7b6y8jwgd36ma5pggiqf54xy9m6fdn2s8ac"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/omajid/hgignore-mode")
    (synopsis
      "a major mode for editing hgignore files")
    (description
      "Documentation at https://melpa.org/#/hgignore-mode")
    (license #f)))

(define-public emacs-hgrc-mode
  (package
    (name "emacs-hgrc-mode")
    (version "20150409.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/hgrc-mode.git")
               (commit
                 "314e8320b82cc1ce74b1bd372f296252e7a23090")))
        (sha256
          (base32
            "1ky5s7hzqbxgasdz285q3rnvzh3irwsq61rlivjrcxyfdxdjbbvp"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/omajid/hgrc-mode")
    (synopsis "major mode for editing hgrc files")
    (description
      "Documentation at https://melpa.org/#/hgrc-mode")
    (license #f)))

(define-public emacs-hi2
  (package
    (name "emacs-hi2")
    (version "20141005.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nilcons/hi2.git")
               (commit
                 "c9d199727b5cdcb9e36a972b38131ce4611fd6c8")))
        (sha256
          (base32
            "1s08sgbh5v59lqskd0s1dscs6dy7z5mkqqkabs3gd35agbfvbmlf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/errge/hi2")
    (synopsis "indentation module for Haskell Mode")
    (description
      "Documentation at https://melpa.org/#/hi2")
    (license #f)))

(define-public emacs-hiccup-cli
  (package
    (name "emacs-hiccup-cli")
    (version "20210211.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/hiccup-cli.git")
               (commit
                 "c554f94e6aed2c755ed9e4391f5a090d6289b1ee")))
        (sha256
          (base32
            "1r3hxs37ak617sig8hl55s9bn71krb84aly3hh6cp1pzrsm39wjb"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("elisp/*.el" "elisp/*.el.in")))
    (home-page
      "https://github.com/kwrooijen/hiccup-cli")
    (synopsis "Convert HTML to Hiccup syntax")
    (description
      "Documentation at https://melpa.org/#/hiccup-cli")
    (license #f)))

(define-public emacs-hide-lines
  (package
    (name "emacs-hide-lines")
    (version "20210513.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/hide-lines.git")
               (commit
                 "f0828c15e50db5eddb905de783e7683b04d1eca3")))
        (sha256
          (base32
            "1pw0wp1pzy6snycvz12nj0q7jxxj07h3lqas184w44nhrira7qhj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/hide-lines")
    (synopsis
      "Commands for hiding lines based on a regexp")
    (description
      "Documentation at https://melpa.org/#/hide-lines")
    (license #f)))

(define-public emacs-hide-mode-line
  (package
    (name "emacs-hide-mode-line")
    (version "20211112.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-hide-mode-line.git")
               (commit
                 "bc5d293576c5e08c29e694078b96a5ed85631942")))
        (sha256
          (base32
            "12mfhg0r3gvy59ijy44vsircn251nmisp04k9vvgd2yhykpsr1j6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hlissner/emacs-hide-mode-line")
    (synopsis
      "minor mode that hides/masks your modeline")
    (description
      "Documentation at https://melpa.org/#/hide-mode-line")
    (license #f)))

(define-public emacs-hidepw
  (package
    (name "emacs-hidepw")
    (version "20200326.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jekor/hidepw.git")
               (commit
                 "73f099da79d73fe4087472df3469d8b9b20a59f2")))
        (sha256
          (base32
            "1lcm5nfpcrvy3700g1zzi89j59n0508xvk3v66x9px5aq6a8xk2j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jekor/hidepw")
    (synopsis "Minor mode to hide passwords")
    (description
      "Documentation at https://melpa.org/#/hidepw")
    (license #f)))

(define-public emacs-hideshow-org
  (package
    (name "emacs-hideshow-org")
    (version "20120223.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shanecelis/hideshow-org.git")
               (commit
                 "16419e52e6cdd2f46f755144c0ab11ce00d1a626")))
        (sha256
          (base32
            "1dr06b9njzih8z97k62l9w3x0a801x4bp043zvk7av9qkz8izl2r"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provides org-mode like hide and show for hideshow.el")
    (description
      "Documentation at https://melpa.org/#/hideshow-org")
    (license #f)))

(define-public emacs-hierarchy
  (package
    (name "emacs-hierarchy")
    (version "20190425.842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/hierarchy.git")
               (commit
                 "fed505b8e71bf51772887c8a94bb57f5b8838b63")))
        (sha256
          (base32
            "0bsmnyhpsa7x4jp4zc4inyi0rrjm34fbxa3m49hw8kq5ap7dps5k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/hierarchy")
    (synopsis
      "Library to create and display hierarchy structures")
    (description
      "Documentation at https://melpa.org/#/hierarchy")
    (license #f)))

(define-public emacs-highlight
  (package
    (name "emacs-highlight")
    (version "20210318.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/highlight.git")
               (commit
                 "28557cb8d99b96eb509aaec1334c7cdda162517f")))
        (sha256
          (base32
            "1klrc2w0wg9ajm973b7blkjcwscqni6nxaqkcmimava398lxss2l"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.emacswiki.org/emacs/download/highlight.el")
    (synopsis "Highlighting commands.")
    (description
      "Documentation at https://melpa.org/#/highlight")
    (license #f)))

(define-public emacs-highlight-blocks
  (package
    (name "emacs-highlight-blocks")
    (version "20190318.1557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-blocks.git")
               (commit
                 "33cf3d36662faa36c86c8d53e4d5a3922efa3eb8")))
        (sha256
          (base32
            "04v5y04v4n06ig8zld6axrxpz07s70sn5ckxcy8gnz5qm0zvr7mx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/highlight-blocks")
    (synopsis "Highlight the blocks point is in")
    (description
      "Documentation at https://melpa.org/#/highlight-blocks")
    (license #f)))

(define-public emacs-highlight-context-line
  (package
    (name "emacs-highlight-context-line")
    (version "20181122.2203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ska2342/highlight-context-line.git")
               (commit
                 "6b334e8207c780835a05b6909b4d826898c33d26")))
        (sha256
          (base32
            "0pzb6pnshcglbjpfk7y2s8qissmldr27phyh1v3mvq2q09pyskb6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ska2342/highlight-context-line/")
    (synopsis "Improve orientation when scrolling")
    (description
      "Documentation at https://melpa.org/#/highlight-context-line")
    (license #f)))

(define-public emacs-highlight-defined
  (package
    (name "emacs-highlight-defined")
    (version "20210411.222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-defined.git")
               (commit
                 "4420bdda419875dacb065468aafe273b2022580e")))
        (sha256
          (base32
            "0a9nn1jnbgv93kz1iz5iay34d0p7lkpd8ic619ysk8qcksc0yn2i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/highlight-defined")
    (synopsis
      "Syntax highlighting of known Elisp symbols")
    (description
      "Documentation at https://melpa.org/#/highlight-defined")
    (license #f)))

(define-public emacs-highlight-doxygen
  (package
    (name "emacs-highlight-doxygen")
    (version "20200520.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/highlight-doxygen.git")
               (commit
                 "eec4874e2e89d4eb39091aad89a67dff8f8ec84c")))
        (sha256
          (base32
            "0r3rv1px43r265716l3g20c1ss4381h1mc1kjxin22vdmrj6cmxy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/highlight-doxygen")
    (synopsis "Highlight Doxygen comments")
    (description
      "Documentation at https://melpa.org/#/highlight-doxygen")
    (license #f)))

(define-public emacs-highlight-escape-sequences
  (package
    (name "emacs-highlight-escape-sequences")
    (version "20201214.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/highlight-escape-sequences.git")
               (commit
                 "fae976568c04b6fe8a9f2d854c8fe23b357a6878")))
        (sha256
          (base32
            "1a1jcmfijipxl5frkbliav06qd0r5yb1l7a8w2gx33bc6q09yahx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dgutov/highlight-escape-sequences")
    (synopsis "Highlight escape sequences")
    (description
      "Documentation at https://melpa.org/#/highlight-escape-sequences")
    (license #f)))

(define-public emacs-highlight-function-calls
  (package
    (name "emacs-highlight-function-calls")
    (version "20230416.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/highlight-function-calls.git")
               (commit
                 "e2ed2da188aea5879b59ffffefdc5eca10e7ba83")))
        (sha256
          (base32
            "11i7ni7m6r08ziq9mk6r9wr5l1ky1yw30hpid6yk31sviik06jkz"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alphapapa/highlight-function-calls")
    (synopsis "Highlight function/macro calls")
    (description
      "Documentation at https://melpa.org/#/highlight-function-calls")
    (license #f)))

(define-public emacs-highlight-indent-guides
  (package
    (name "emacs-highlight-indent-guides")
    (version "20200820.2328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarthFennec/highlight-indent-guides.git")
               (commit
                 "cf352c85cd15dd18aa096ba9d9ab9b7ab493e8f6")))
        (sha256
          (base32
            "0wh1sfbbbz52ppr0fkl0csc4n46ipx36dli9pp9nsvpz9r28pc1g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarthFennec/highlight-indent-guides")
    (synopsis "Minor mode to highlight indentation")
    (description
      "Documentation at https://melpa.org/#/highlight-indent-guides")
    (license #f)))

(define-public emacs-highlight-indentation
  (package
    (name "emacs-highlight-indentation")
    (version "20210221.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antonj/Highlight-Indentation-for-Emacs.git")
               (commit
                 "d88db4248882da2d4316e76ed673b4ac1fa99ce3")))
        (sha256
          (base32
            "02a3r3f6nd37yx1gsr6nv168wmx5r5c7b47a5r5fw16d2zlkfmix"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/antonj/Highlight-Indentation-for-Emacs")
    (synopsis
      "Minor modes for highlighting indentation")
    (description
      "Documentation at https://melpa.org/#/highlight-indentation")
    (license #f)))

(define-public emacs-highlight-leading-spaces
  (package
    (name "emacs-highlight-leading-spaces")
    (version "20151216.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrBliss/highlight-leading-spaces.git")
               (commit
                 "840db19d863dd97993fd9f893f5be501627b6354")))
        (sha256
          (base32
            "1vy6j63jp83ljdqkrqglpys74yfh7p61sd0lqiwczgr5nqyc60rl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrBliss/highlight-leading-spaces")
    (synopsis "Highlight leading spaces")
    (description
      "Documentation at https://melpa.org/#/highlight-leading-spaces")
    (license #f)))

(define-public emacs-highlight-numbers
  (package
    (name "emacs-highlight-numbers")
    (version "20181013.1744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-numbers.git")
               (commit
                 "8b4744c7f46c72b1d3d599d4fb75ef8183dee307")))
        (sha256
          (base32
            "075ip8h7bdin0yvvhn5nkwnz58arlaw1imr866ghp12q5rl4shmc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parent-mode))
    (home-page
      "https://github.com/Fanael/highlight-numbers")
    (synopsis "Highlight numbers in source code")
    (description
      "Documentation at https://melpa.org/#/highlight-numbers")
    (license #f)))

(define-public emacs-highlight-operators
  (package
    (name "emacs-highlight-operators")
    (version "20170213.2220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/highlight-operators.git")
               (commit
                 "7696b43419505d6e3511ad2781f9f1dd3c55ef8c")))
        (sha256
          (base32
            "1h5whrc1iphzq0g8x9mmkhjkbmbdg9i9bvr1y8zrwrs8za8k127y"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "a face for operators in programming modes")
    (description
      "Documentation at https://melpa.org/#/highlight-operators")
    (license #f)))

(define-public emacs-highlight-parentheses
  (package
    (name "emacs-highlight-parentheses")
    (version "20220408.845")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~tsdh/highlight-parentheses.el")
               (commit
                 "438a1cb2563e2a2496be4678cc0df8d5b22caf5d")))
        (sha256
          (base32
            "0ixjai9w9x4sm1lx9yljl58r7ydbbjlkb0a2pbv316l8qph8w44r"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~tsdh/highlight-parentheses.el/")
    (synopsis "Highlight surrounding parentheses")
    (description
      "Documentation at https://melpa.org/#/highlight-parentheses")
    (license #f)))

(define-public emacs-highlight-quoted
  (package
    (name "emacs-highlight-quoted")
    (version "20140916.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/highlight-quoted.git")
               (commit
                 "24103478158cd19fbcfb4339a3f1fa1f054f1469")))
        (sha256
          (base32
            "1gq8inxfni9zgz2brqm4nlswgr8b0spq15wr532xfrgr456g10ks"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/highlight-quoted")
    (synopsis
      "Highlight Lisp quotes and quoted symbols")
    (description
      "Documentation at https://melpa.org/#/highlight-quoted")
    (license #f)))

(define-public emacs-highlight-refontification
  (package
    (name "emacs-highlight-refontification")
    (version "20170211.2024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/highlight-refontification.git")
               (commit
                 "32632897d88c4611fadb08517ca00ef5cbc989b6")))
        (sha256
          (base32
            "1k6af947h70ivkj31mk3nv2vkxlfpqvpwq8za53n2l7adsjdlf73"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/highlight-refontification")
    (synopsis "Visualize font-lock refontification.")
    (description
      "Documentation at https://melpa.org/#/highlight-refontification")
    (license #f)))

(define-public emacs-highlight-stages
  (package
    (name "emacs-highlight-stages")
    (version "20210306.418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/highlight-stages.git")
               (commit
                 "95daa710f3d8fc83f42c5da38003fc71ae0da1fc")))
        (sha256
          (base32
            "0yhwsbpnlsfnbppviwnn0y3gm02rds684841301sbmawplz457z7"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "highlight staged (quasi-quoted) expressions")
    (description
      "Documentation at https://melpa.org/#/highlight-stages")
    (license #f)))

(define-public emacs-highlight-symbol
  (package
    (name "emacs-highlight-symbol")
    (version "20160102.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/highlight-symbol.el.git")
               (commit
                 "7a789c779648c55b16e43278e51be5898c121b3a")))
        (sha256
          (base32
            "19cgyk0sh8nsmf3jbi92i8qsdx4l4yilfq5jj9zfdbj9p5gvwx96"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/highlight-symbol/")
    (synopsis
      "automatic and manual symbol highlighting")
    (description
      "Documentation at https://melpa.org/#/highlight-symbol")
    (license #f)))

(define-public emacs-highlight-thing
  (package
    (name "emacs-highlight-thing")
    (version "20230217.728")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/highlight-thing.el.git")
               (commit
                 "ad788d7a7ee9eb287a8cca3adb21510b89270dca")))
        (sha256
          (base32
            "1p829ydpc1qhqabwi0xaa9yy4rqz9wbkphq7kdly6qiz59jasdq1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgeller/highlight-thing.el")
    (synopsis
      "Minimalistic minor mode to highlight current thing under point.")
    (description
      "Documentation at https://melpa.org/#/highlight-thing")
    (license #f)))

(define-public emacs-highlight-unique-symbol
  (package
    (name "emacs-highlight-unique-symbol")
    (version "20130612.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hitode909/emacs-highlight-unique-symbol.git")
               (commit
                 "4141bf86a94e30d94d9af9c29d40b16886226e1c")))
        (sha256
          (base32
            "0hhc2l4pz6q8injpplv6b5l08l8q2lnjdpwabp7gwmhraq54rhjx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page
      "https://github.com/hitode909/emacs-highlight-unique-symbol")
    (synopsis
      "highlight symbols which not appear in the repository")
    (description
      "Documentation at https://melpa.org/#/highlight-unique-symbol")
    (license #f)))

(define-public emacs-highlight2clipboard
  (package
    (name "emacs-highlight2clipboard")
    (version "20151020.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/highlight2clipboard.git")
               (commit
                 "6ce58a060d9c5843ccb8c79ec2bba7858c68ac15")))
        (sha256
          (base32
            "06nnqry36ncqacfzd8yvc4q59bwk3vgf9a14rkpph2hk2rfvq2m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (arguments '(#:files (:defaults "bin")))
    (home-page "unspecified")
    (synopsis
      "Copy text to clipboard with highlighting.")
    (description
      "Documentation at https://melpa.org/#/highlight2clipboard")
    (license #f)))

(define-public emacs-hima-theme
  (package
    (name "emacs-hima-theme")
    (version "20230421.314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meain/hima-theme.git")
               (commit
                 "052acabce532c040b9d38b12db2797f324a26bae")))
        (sha256
          (base32
            "0d10i3s9nqc4rlz2bfkiyvzgqbfqzn0as10w6xp0n98ak4q4iczg"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/meain/hima-theme")
    (synopsis "A minimal theme with pretty colors")
    (description
      "Documentation at https://melpa.org/#/hima-theme")
    (license #f)))

(define-public emacs-himalaya
  (package
    (name "emacs-himalaya")
    (version "20230711.925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/himalaya-emacs.git")
               (commit
                 "087c66964182221250c746f65584f332c97a4c86")))
        (sha256
          (base32
            "1990s0risfhvg30hh9xg75nyl9qd15j0dkn0gf77lsh5fnmhlymh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dantecatalfamo/himalaya-emacs")
    (synopsis
      "Interface for the himalaya email client")
    (description
      "Documentation at https://melpa.org/#/himalaya")
    (license #f)))

(define-public emacs-hindent
  (package
    (name "emacs-hindent")
    (version "20230517.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaimaruseac/hindent.git")
               (commit
                 "67c78e7ae2ca8046fcf1df2711dea7f26a43cf90")))
        (sha256
          (base32
            "1k628ww27k3n2dp3i6k2kprazl9ql4977vrxn2m8rpp34sfqn6w1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("elisp/*.el")))
    (home-page
      "https://github.com/chrisdone/hindent")
    (synopsis
      "Indent haskell code using the \"hindent\" program")
    (description
      "Documentation at https://melpa.org/#/hindent")
    (license #f)))

(define-public emacs-hippie-exp-ext
  (package
    (name "emacs-hippie-exp-ext")
    (version "20160502.2326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/hippie-exp-ext.git")
               (commit
                 "4eda13f90da51ab217d024701f4c30f91ffcb90e")))
        (sha256
          (base32
            "141ikpyns1gd6kjply8m9jy9gifx5xdw5bn4p29hrxgiw994a78d"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/hippie-exp-ext.el")
    (synopsis "Extension of hippie-expand")
    (description
      "Documentation at https://melpa.org/#/hippie-exp-ext")
    (license #f)))

(define-public emacs-hippie-expand-slime
  (package
    (name "emacs-hippie-expand-slime")
    (version "20170723.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/hippie-expand-slime.git")
               (commit
                 "39bbae94896a62854d31754debdfae71d35fec62")))
        (sha256
          (base32
            "1l2j5k4jk8jpm1vdf0z5zwa287859afsgd3gda778sdsiy38l6r7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/hippie-expand-slime")
    (synopsis
      "Hook slime's completion into hippie-expand")
    (description
      "Documentation at https://melpa.org/#/hippie-expand-slime")
    (license #f)))

(define-public emacs-hippie-namespace
  (package
    (name "emacs-hippie-namespace")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/hippie-namespace.git")
               (commit
                 "d0d0f15c67ab8bef5e9d1e29a89ecd3613a60b49")))
        (sha256
          (base32
            "0b5wrid428s11afc48d6mdifmd31gmzyrj9zcpd3jwk63ydiihdc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/hippie-namespace")
    (synopsis
      "Special treatment for namespace prefixes in hippie-expand")
    (description
      "Documentation at https://melpa.org/#/hippie-namespace")
    (license #f)))

(define-public emacs-hippo-themes
  (package
    (name "emacs-hippo-themes")
    (version "20230626.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kimim/emacs-hippo-theme.git")
               (commit
                 "ab04264f651807fd41617bca0216c2b2e6cdb79f")))
        (sha256
          (base32
            "1ligj4frj4zl490byyzbxqrpwqjak45vgzgs5rl8p731m7rksg2v"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kimim/emacs-hippo-theme")
    (synopsis "Hippo color theme")
    (description
      "Documentation at https://melpa.org/#/hippo-themes")
    (license #f)))

(define-public emacs-historian
  (package
    (name "emacs-historian")
    (version "20200203.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/historian.el.git")
               (commit
                 "852cb4e72c0f78c8dbb2c972bdcb4e7b0108ff4c")))
        (sha256
          (base32
            "031624grhvv5ix3gvnd8lzpws80lb5r272yggl1k57rsayyv55ix"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("historian.el")))
    (home-page
      "https://github.com/PythonNut/historian.el")
    (synopsis
      "Persistently store selected minibuffer candidates")
    (description
      "Documentation at https://melpa.org/#/historian")
    (license #f)))

(define-public emacs-history
  (package
    (name "emacs-history")
    (version "20160821.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tcw165/history.git")
               (commit
                 "5317663fb45bbd5e96d258cb0807dcc266ce67ff")))
        (sha256
          (base32
            "1ghbpfmmp5p0wvivd79165dx5kia8qkmac3a6asg2d6l1h9y58n1"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("images" "images/*.xpm" "images/*.png"))))
    (home-page "https://github.com/boyw165/history")
    (synopsis
      "History utility for source code navigation")
    (description
      "Documentation at https://melpa.org/#/history")
    (license #f)))

(define-public emacs-historyf
  (package
    (name "emacs-historyf")
    (version "20151124.159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k1LoW/emacs-historyf.git")
               (commit
                 "196c058ceb092fdd56b0e4ce85b7e714d6f72224")))
        (sha256
          (base32
            "0fgm1m9mq1zn5gnrynf332hamif05qhh8haqci7gii7crzy47c0g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/k1LoW/emacs-historyf")
    (synopsis "file history library like browser")
    (description
      "Documentation at https://melpa.org/#/historyf")
    (license #f)))

(define-public emacs-hive
  (package
    (name "emacs-hive")
    (version "20131217.1512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/hive-el.git")
               (commit
                 "11b5172e081ad8079fc78758bef6f306f82ae32b")))
        (sha256
          (base32
            "097lrj9lgfa7szww324hlqywwkbi31n1pxfqyg0zbfj45djkp9bx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Hive SQL mode extension")
    (description
      "Documentation at https://melpa.org/#/hive")
    (license #f)))

(define-public emacs-hiwin
  (package
    (name "emacs-hiwin")
    (version "20150825.827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshida-mediba/hiwin-mode.git")
               (commit
                 "6ee8ed051405653bd9b7332d7e9fbb591d954051")))
        (sha256
          (base32
            "177blksgncxpxd1zi9kmbcfjnpd3ll1szjxiyc4am8a6hs1dyyqk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Visible active window mode.")
    (description
      "Documentation at https://melpa.org/#/hiwin")
    (license #f)))

(define-public emacs-hl-anything
  (package
    (name "emacs-hl-anything")
    (version "20160422.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hl-anything/hl-anything-emacs.git")
               (commit
                 "8696bc55a8cba408f0fc83a907a9ec529d79e558")))
        (sha256
          (base32
            "10ps1rb5fqwaw4lz3nz2rbsry4y81asmi5557g229h8xjhp6gpnm"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("images" "images/*.xpm" "images/*.png"))))
    (home-page "unspecified")
    (synopsis
      "Highlight symbols, selections, enclosing parens and more.")
    (description
      "Documentation at https://melpa.org/#/hl-anything")
    (license #f)))

(define-public emacs-hl-block-mode
  (package
    (name "emacs-hl-block-mode")
    (version "20230521.2306")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/hl-block-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "1gqb5l5m659bpfxckm7drj98qmmn9cgd2vxywh5pj955aa6d77vg"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-hl-block-mode")
    (synopsis "Highlighting nested blocks")
    (description
      "Documentation at https://melpa.org/#/hl-block-mode")
    (license #f)))

(define-public emacs-hl-indent
  (package
    (name "emacs-hl-indent")
    (version "20170429.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikirill/hl-indent.git")
               (commit
                 "bdb2e0177a7c8b29af26998e688b856adc6ded93")))
        (sha256
          (base32
            "0fwb64ja5ij97308pnd7g6l5mascavcp7jcar8igxv9yyqnw6pfi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikirill/hl-indent")
    (synopsis "Highlight irregular indentation.")
    (description
      "Documentation at https://melpa.org/#/hl-indent")
    (license #f)))

(define-public emacs-hl-indent-scope
  (package
    (name "emacs-hl-indent-scope")
    (version "20230801.344")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/hl-indent-scope-"
               version
               ".tar"))
        (sha256
          (base32
            "1mpxx6r6b4jqxn0gd14wzavpkkzy5n7ghqv6cb594q3xv4pscnhs"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-hl-indent-scope")
    (synopsis "Highlight indentation by scope")
    (description
      "Documentation at https://melpa.org/#/hl-indent-scope")
    (license #f)))

(define-public emacs-hl-prog-extra
  (package
    (name "emacs-hl-prog-extra")
    (version "20230820.39")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/hl-prog-extra-"
               version
               ".tar"))
        (sha256
          (base32
            "1m71mxn2b66g9pnkc6nbizn8kngzdzjgsl0pzhmx9cz3kazfzxj3"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-hl-prog-extra")
    (synopsis
      "Customizable highlighting for source-code")
    (description
      "Documentation at https://melpa.org/#/hl-prog-extra")
    (license #f)))

(define-public emacs-hl-sentence
  (package
    (name "emacs-hl-sentence")
    (version "20171018.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/hl-sentence.git")
               (commit
                 "86ae38d3103bd20da5485cbdd59dfbd396c45ee4")))
        (sha256
          (base32
            "1rzc74ckj06qs8kq2bd1cgqvgjd2qc3zxmk7bvgg6dy2m9nj52cm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/milkypostman/hl-sentence")
    (synopsis
      "highlight a sentence based on customizable face")
    (description
      "Documentation at https://melpa.org/#/hl-sentence")
    (license #f)))

(define-public emacs-hl-todo
  (package
    (name "emacs-hl-todo")
    (version "20230829.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/hl-todo.git")
               (commit
                 "70ce48470c85f1441de2c9428a240c3287995846")))
        (sha256
          (base32
            "1rq16zrdmq9j2jrsg136r5qbqvsgd2bkgpb2wmxca91kfx86r2qq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/hl-todo")
    (synopsis "Highlight TODO and similar keywords")
    (description
      "Documentation at https://melpa.org/#/hl-todo")
    (license #f)))

(define-public emacs-hledger-mode
  (package
    (name "emacs-hledger-mode")
    (version "20231001.834")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/narendraj9/hledger-mode.git")
               (commit
                 "1b9c65298c34933d6667773d7fa1e89c9841038d")))
        (sha256
          (base32
            "1a0mdclam4s7f8cbikzcb17613x42bq0dyzbsxy1fqgil5n3qhv2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-async emacs-htmlize))
    (home-page
      "https://github.com/narendraj9/hledger-mode.git")
    (synopsis
      "A mode for writing journal entries for hledger.")
    (description
      "Documentation at https://melpa.org/#/hledger-mode")
    (license #f)))

(define-public emacs-hlint-refactor
  (package
    (name "emacs-hlint-refactor")
    (version "20190115.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpickering/hlint-refactor-mode.git")
               (commit
                 "c4307f86aad6d02e32e9b30cb6edc115584c791c")))
        (sha256
          (base32
            "1c71w9s34n0i7mm4njchxn6s3ri1y6mh3akgbg4nq41d42h8iap3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mpickering/hlint-refactor-mode")
    (synopsis "Apply HLint suggestions")
    (description
      "Documentation at https://melpa.org/#/hlint-refactor")
    (license #f)))

(define-public emacs-hlinum
  (package
    (name "emacs-hlinum")
    (version "20180422.412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/hlinum-mode.git")
               (commit
                 "5646d9c0b9e7598b20b2004eab5439fdc6dbeda5")))
        (sha256
          (base32
            "1w442h5wzxylrbmqn1blpv2pmvyvq7avsk5h8xxsjfqw5580riri"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tom-tan/hlinum-mode/")
    (synopsis
      "Extension for linum.el to highlight current line number")
    (description
      "Documentation at https://melpa.org/#/hlinum")
    (license #f)))

(define-public emacs-hmac
  (package
    (name "emacs-hmac")
    (version "20201004.1819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grimnebulin/emacs-hmac.git")
               (commit
                 "f2b99a9a10becfff207cf9418c6dce78364b1a4b")))
        (sha256
          (base32
            "0qlvfzyvxxhdacc8wl4mb451jjf4dv0gnkq7341cqz0gp4yy1n73"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grimnebulin/emacs-hmac")
    (synopsis
      "Hash-based message authentication code")
    (description
      "Documentation at https://melpa.org/#/hmac")
    (license #f)))

(define-public emacs-hnreader
  (package
    (name "emacs-hnreader")
    (version "20221117.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-hnreader.git")
               (commit
                 "8444e177035e236e991f9ea73074c053a45426ad")))
        (sha256
          (base32
            "0v49fvc3phvff2scwlvjdy98y91dmkywij9dl8j95i5iahksq2fp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-request))
    (home-page
      "https://github.com/thanhvg/emacs-hnreader/")
    (synopsis "A hackernews reader")
    (description
      "Documentation at https://melpa.org/#/hnreader")
    (license #f)))

(define-public emacs-hoa-mode
  (package
    (name "emacs-hoa-mode")
    (version "20200610.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.lrde.epita.fr/spot/emacs-modes.git")
               (commit
                 "18f5c981e256f867f29a93376ccdc04717b159cd")))
        (sha256
          (base32
            "1814si09xjimmn1a8yp6q13lz1lr6cwnaz7fqfszqcil8lldcwvx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("hoa-mode.el")))
    (home-page
      "https://gitlab.lrde.epita.fr/spot/emacs-modes")
    (synopsis "Major mode for the HOA format")
    (description
      "Documentation at https://melpa.org/#/hoa-mode")
    (license #f)))

(define-public emacs-holiday-pascha-etc
  (package
    (name "emacs-holiday-pascha-etc")
    (version "20160822.58")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/holiday-pascha-etc.git")
               (commit
                 "eb198656f63cb8679fb0e3a8248782df071a0f3c")))
        (sha256
          (base32
            "1dd0k7r5kx15sph12vzakhq27zh7vy9r541qdp8w5051k6apw3pw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/hexmode/holiday-pascha-etc")
    (synopsis
      "Eastern Christian analog to holiday-easter-etc")
    (description
      "Documentation at https://melpa.org/#/holiday-pascha-etc")
    (license #f)))

(define-public emacs-holy-books
  (package
    (name "emacs-holy-books")
    (version "20211025.127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/holy-books.git")
               (commit
                 "02c2956d36631d3d8c8b4bacdcf0a5cdd1f3136d")))
        (sha256
          (base32
            "011a9wg0b68cf2pcr2w5my4dlawaa9yzz98mnsv71v8ny42rzgs6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://alhassy.github.io/holy-books/")
    (synopsis
      "Org-mode links/tooltips/lookups for Quran & Bible")
    (description
      "Documentation at https://melpa.org/#/holy-books")
    (license #f)))

(define-public emacs-home-end
  (package
    (name "emacs-home-end")
    (version "20190109.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-home-end.git")
               (commit
                 "fbddad2c1268720ce17662a232b48f666e489526")))
        (sha256
          (base32
            "0wabzpah1vkg8ns21agvrs9s7rm1r0cxghmfv6c2zq71886glv1y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-keypress-multi-event))
    (home-page
      "https://www.github.com/Boruch_Baum/emacs-home-end")
    (synopsis "Smart multi-purpose home / end keys")
    (description
      "Documentation at https://melpa.org/#/home-end")
    (license #f)))

(define-public emacs-homebrew-mode
  (package
    (name "emacs-homebrew-mode")
    (version "20220907.1656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dunn/homebrew-mode.git")
               (commit
                 "e32da1397ce176766e39c286861ef4c40d64bbf5")))
        (sha256
          (base32
            "1nslh3k6nvx5cgk2zjrfh9lhwkrs089p0hf93p0k8all3pvb7jbz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inf-ruby emacs-dash))
    (home-page
      "https://github.com/dunn/homebrew-mode")
    (synopsis
      "Minor mode for editing Homebrew formulae")
    (description
      "Documentation at https://melpa.org/#/homebrew-mode")
    (license #f)))

(define-public emacs-honcho
  (package
    (name "emacs-honcho")
    (version "20230224.420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/honcho.el.git")
               (commit
                 "95846309c6a4ce45f29f215d43847beb510b6aca")))
        (sha256
          (base32
            "1ixwhf6an3jpdpg8my2i5g9yhbkpx1d2hnhp0ca46ys431zc1nyy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/honcho.el")
    (synopsis "Run and manage long-running services")
    (description
      "Documentation at https://melpa.org/#/honcho")
    (license #f)))

(define-public emacs-hookify
  (package
    (name "emacs-hookify")
    (version "20141216.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/hookify.git")
               (commit
                 "21baae7393b07257de5796402fde0ca72fb00d77")))
        (sha256
          (base32
            "0sg4h0m1ds3f6kpzd3vk30g6x2xl74r5j9bidw658f3mmai7m1l8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://github.com/Silex/hookify")
    (synopsis
      "Interactive commands to create temporary hooks")
    (description
      "Documentation at https://melpa.org/#/hookify")
    (license #f)))

(define-public emacs-horizon-theme
  (package
    (name "emacs-horizon-theme")
    (version "20200720.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aodhneine/horizon-theme.el.git")
               (commit
                 "9595549c514a9376c61d5d303405f6a6982e9e46")))
        (sha256
          (base32
            "1m7wwf17p7qa6dmm0qykz0qnqz7rxvxhsmn9287y8f6wahzd8yfb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aodhneine/horizon-theme.el")
    (synopsis "A beautifully warm dual theme")
    (description
      "Documentation at https://melpa.org/#/horizon-theme")
    (license #f)))

(define-public emacs-horoscope
  (package
    (name "emacs-horoscope")
    (version "20180409.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/horoscope.el.git")
               (commit
                 "f4c683e991adce0a8f9023f15050f306f9b9a9ed")))
        (sha256
          (base32
            "17k4j4q19l4ahxlzzic1jlbbh7l378j9vgnrcrvpm0lxa9ipclk0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/horoscope.el")
    (synopsis "generate horoscopes.")
    (description
      "Documentation at https://melpa.org/#/horoscope")
    (license #f)))

(define-public emacs-hotfuzz
  (package
    (name "emacs-hotfuzz")
    (version "20231108.1101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/axelf4/hotfuzz.git")
               (commit
                 "2a4d9d32b3e4ae41b78bdf538352b85b88b39187")))
        (sha256
          (base32
            "04q1pxqn090ri1z8igdq0mm1sy0p25q43pzhq5vx85gagsckw5kz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/axelf4/hotfuzz")
    (synopsis "Fuzzy completion style")
    (description
      "Documentation at https://melpa.org/#/hotfuzz")
    (license #f)))

(define-public emacs-hound
  (package
    (name "emacs-hound")
    (version "20200122.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryoung786/hound.el.git")
               (commit
                 "35e2cdc81fcc904b450a7ef3ec00fd25df6a4431")))
        (sha256
          (base32
            "04pb5yhv4ysmm9ngpipxglbwd6msxr4d0jd64mixxq77g2yfmfm4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis
      "Display hound search results in a compilation window")
    (description
      "Documentation at https://melpa.org/#/hound")
    (license #f)))

(define-public emacs-hover
  (package
    (name "emacs-hover")
    (version "20220129.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericdallo/hover.el.git")
               (commit
                 "2b826735bb8d3bcfced489a1e0fa21b10fbc967e")))
        (sha256
          (base32
            "1ihpwl8rlpxmalpccnkd3xk6ngd4gxz29gjyyhka7p825as5nywm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/ericdallo/hover.el")
    (synopsis "Package to use hover with flutter")
    (description
      "Documentation at https://melpa.org/#/hover")
    (license #f)))

(define-public emacs-howdoi
  (package
    (name "emacs-howdoi")
    (version "20150204.43")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atykhonov/emacs-howdoi.git")
               (commit
                 "5fbf7069ee160c597a328e5ce5fb32920e1ca88f")))
        (sha256
          (base32
            "01sj9c8mxqaif8wh6zz9v2czjaq7vcdi66drldyjmifkln6rg2v8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/atykhonov/emacs-howdoi/")
    (synopsis "Instant coding answers via Emacs.")
    (description
      "Documentation at https://melpa.org/#/howdoi")
    (license #f)))

(define-public emacs-howdoyou
  (package
    (name "emacs-howdoyou")
    (version "20230928.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-howdoyou.git")
               (commit
                 "10f31a10803c3fd4c304f3a4495d57a0b9cf9ab5")))
        (sha256
          (base32
            "04rq68czkw4zlsa5mfcb68hzmpj6wr98jylx5hnas4l8hr0hs081"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-request))
    (home-page
      "https://github.com/thanhvg/howdoyou/")
    (synopsis
      "A stackoverflow and its sisters' sites reader")
    (description
      "Documentation at https://melpa.org/#/howdoyou")
    (license #f)))

(define-public emacs-howm
  (package
    (name "emacs-howm")
    (version "20230730.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaorahi/howm.git")
               (commit
                 "a1effcaea96365ed97428d93624d1e0d987dea00")))
        (sha256
          (base32
            "1dsar6c1aql8rkyswvz5g5yysdlvhd0a2djiq45b047xiizcbmxc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "*.el.in"))))
    (home-page "https://kaorahi.github.io/howm/")
    (synopsis "Wiki-like note-taking tool")
    (description
      "Documentation at https://melpa.org/#/howm")
    (license #f)))

(define-public emacs-hsluv
  (package
    (name "emacs-hsluv")
    (version "20181127.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hsluv/hsluv-emacs.git")
               (commit
                 "c3bc5228e30d66e7dee9ff1a0694c2b976862fc0")))
        (sha256
          (base32
            "19q8qlq4s2kfydpadkq1zd92611dvq7dr8vlhlbd9gplzpx7dhfd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hsluv/hsluv-emacs")
    (synopsis "hsluv color space conversions")
    (description
      "Documentation at https://melpa.org/#/hsluv")
    (license #f)))

(define-public emacs-ht
  (package
    (name "emacs-ht")
    (version "20230703.558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/ht.el.git")
               (commit
                 "1c49aad1c820c86f7ee35bf9fff8429502f60fef")))
        (sha256
          (base32
            "1vyk81xav1ghdb39fqi99yf6yvzsh6p007v7yhzk1bbqqffkvqdj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "The missing hash table library for Emacs")
    (description
      "Documentation at https://melpa.org/#/ht")
    (license #f)))

(define-public emacs-html-check-frag
  (package
    (name "emacs-html-check-frag")
    (version "20201106.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TobiasZawada/html-check-frag.git")
               (commit
                 "b9d1f2003a126c2e8b6d469964ec2278ad55c9df")))
        (sha256
          (base32
            "1glkix6ixk4ya7b9np7h82y395g6cb880yy5hrx0iyim02cb0r87"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Check html-fragments")
    (description
      "Documentation at https://melpa.org/#/html-check-frag")
    (license #f)))

(define-public emacs-html-script-src
  (package
    (name "emacs-html-script-src")
    (version "20130807.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/html-script-src.el.git")
               (commit
                 "66460f8ab1b24656e6f3ce5bd50cff6a81be8422")))
        (sha256
          (base32
            "0k9ga0qi6h33akip2vrpclfp4zljnbw5ax40lxyxc1813hwkdrmh"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rejeep/html-script-src")
    (synopsis
      "Insert <script src=\"..\"> for popular JavaScript libraries")
    (description
      "Documentation at https://melpa.org/#/html-script-src")
    (license #f)))

(define-public emacs-html-to-hiccup
  (package
    (name "emacs-html-to-hiccup")
    (version "20230727.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plexus/html-to-hiccup.git")
               (commit
                 "6879354b8f33ca0c35cf0929581d419cd0ec9ea1")))
        (sha256
          (base32
            "17yikmrzr2dzlmx1lnb4j81sn557zxjqbd7qsw3v43kp418yf1b2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/plexus/html-to-hiccup")
    (synopsis "Convert HTML to Hiccup syntax")
    (description
      "Documentation at https://melpa.org/#/html-to-hiccup")
    (license #f)))

(define-public emacs-html-to-markdown
  (package
    (name "emacs-html-to-markdown")
    (version "20151105.840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/html-to-markdown.git")
               (commit
                 "60c5498c801be186478cf7c05be05b4430c4a144")))
        (sha256
          (base32
            "09n3zm9ivln8ng80fv5vwwzh9mj355ni685axda3m85xfxgai8gi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/html-to-markdown")
    (synopsis
      "HTML to Markdown converter written in Emacs-lisp.")
    (description
      "Documentation at https://melpa.org/#/html-to-markdown")
    (license #f)))

(define-public emacs-html2org
  (package
    (name "emacs-html2org")
    (version "20170418.501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/html2org.el.git")
               (commit
                 "6904aed40259ad8afccff079ebd8a07bff319ebc")))
        (sha256
          (base32
            "0dryk622fz0yj939pbs0fbb9i4m8qjnmkcxjsssws8f90plk06af"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/lujun9972/html2org.el")
    (synopsis "Convert html to org format text")
    (description
      "Documentation at https://melpa.org/#/html2org")
    (license #f)))

(define-public emacs-htmlize
  (package
    (name "emacs-htmlize")
    (version "20210825.2150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hniksic/emacs-htmlize.git")
               (commit
                 "dd27bc3f26efd728f2b1f01f9e4ac4f61f2ffbf9")))
        (sha256
          (base32
            "0kzkspq9cqdz9z6vibx39kpci07fpwm399nl9bpykc1vbj8cm44f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hniksic/emacs-htmlize")
    (synopsis
      "Convert buffer text and decorations to HTML.")
    (description
      "Documentation at https://melpa.org/#/htmlize")
    (license #f)))

(define-public emacs-htmltagwrap
  (package
    (name "emacs-htmltagwrap")
    (version "20220704.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/htmltagwrap.git")
               (commit
                 "aeabbb7606e033bccbb70d2a1c463ba8a733a4e9")))
        (sha256
          (base32
            "1khzdwyi6qdpazhpbr749wbcybak2x5gqjqyman002dnpwaxy2fb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/htmltagwrap")
    (synopsis "Wraps a chunk of HTML code in tags")
    (description
      "Documentation at https://melpa.org/#/htmltagwrap")
    (license #f)))

(define-public emacs-http
  (package
    (name "emacs-http")
    (version "20201010.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/http.el.git")
               (commit
                 "5fdceed1fbf36e274e578e349a53ce922c574774")))
        (sha256
          (base32
            "0anpwnbjif6aahv8wg4mrd6afch9brnzgbgcx05p18dnc1hjxzbm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-edit-indirect))
    (home-page "https://github.com/emacs-pe/http.el")
    (synopsis "Yet another HTTP client")
    (description
      "Documentation at https://melpa.org/#/http")
    (license #f)))

(define-public emacs-http-post-simple
  (package
    (name "emacs-http-post-simple")
    (version "20170715.940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/http-post-simple.git")
               (commit
                 "f53697fca278c741051aeb668b00466b5e0fd3fe")))
        (sha256
          (base32
            "0krdbvvvzn323vx554yw7947nddl3icfjk4wf5kfx7fim5v3mdn6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "HTTP POST requests using the url library")
    (description
      "Documentation at https://melpa.org/#/http-post-simple")
    (license #f)))

(define-public emacs-http-twiddle
  (package
    (name "emacs-http-twiddle")
    (version "20221203.1351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hassy/http-twiddle.git")
               (commit
                 "c07e8620183ec710623db35e26dd839b84c56007")))
        (sha256
          (base32
            "1r8lb9qzrvpkh8qjba7pjmq4jw2na6grjckydm3s2m65lq618vjg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hassy/http-twiddle/blob/master/http-twiddle.el")
    (synopsis
      "send & twiddle & resend HTTP requests")
    (description
      "Documentation at https://melpa.org/#/http-twiddle")
    (license #f)))

(define-public emacs-httpcode
  (package
    (name "emacs-httpcode")
    (version "20121002.345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rspivak/httpcode.el.git")
               (commit
                 "a45e735082b09477cd704a99294d336cdbeb12ba")))
        (sha256
          (base32
            "02jz8qwxl69zhwvpmlqc15znr8x4f30paqszmm7xrrrz5x1c1rn4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rspivak/httpcode.el")
    (synopsis
      "explains the meaning of an HTTP status code")
    (description
      "Documentation at https://melpa.org/#/httpcode")
    (license #f)))

(define-public emacs-httprepl
  (package
    (name "emacs-httprepl")
    (version "20141101.1734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregsexton/httprepl.el.git")
               (commit
                 "cfa3693267a8ed1c96a86a126823f37dbfe077d8")))
        (sha256
          (base32
            "0wd4wmy99mx677x4sdbp57bxxll1fsnnf8hk97r85xdmmjsmrkld"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/gregsexton/httprepl.el")
    (synopsis "An HTTP REPL")
    (description
      "Documentation at https://melpa.org/#/httprepl")
    (license #f)))

(define-public emacs-huecycle
  (package
    (name "emacs-huecycle")
    (version "20210830.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pnor/huecycle.git")
               (commit
                 "a05e32351dcff3e61b5f15800556adfe1939c112")))
        (sha256
          (base32
            "1qnid40hmz3yw5jr1i9xr91d57hjh90s98js48nk6m0sjbkkbb4r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/pnor/huecycle")
    (synopsis "Idle color animation")
    (description
      "Documentation at https://melpa.org/#/huecycle")
    (license #f)))

(define-public emacs-hugsql-ghosts
  (package
    (name "emacs-hugsql-ghosts")
    (version "20211124.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rkaercher/hugsql-ghosts.git")
               (commit
                 "7cd242cc2e70ac48959c42be725c81d7fe00b314")))
        (sha256
          (base32
            "1jn8958jabn8zxq11rs9b0r3ga3vznjd9qn40ka8n54rp4hnj1l9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-cider))
    (home-page
      "https://github.com/rkaercher/hugsql-ghosts")
    (synopsis
      "Display hugsql defqueries in clojure code as an overlay")
    (description
      "Documentation at https://melpa.org/#/hugsql-ghosts")
    (license #f)))

(define-public emacs-humanoid-themes
  (package
    (name "emacs-humanoid-themes")
    (version "20230308.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/humanoid-colors/emacs-humanoid-themes.git")
               (commit
                 "d6d41b365501650c18939c3394762bc163c87e40")))
        (sha256
          (base32
            "0ns0i5jr0fbk51v7jxldkjr1ahsck8ikz013lvrxn9ssrgrwkn6x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/humanoid-colors/emacs-humanoid-themes")
    (synopsis
      "Color themes with a dark and light variant")
    (description
      "Documentation at https://melpa.org/#/humanoid-themes")
    (license #f)))

(define-public emacs-hungarian-holidays
  (package
    (name "emacs-hungarian-holidays")
    (version "20161020.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gergelypolonkai/hungarian-holidays.git")
               (commit
                 "653108769279499d84a79267c90e640d98823872")))
        (sha256
          (base32
            "0jjparw5axydjf2lj8asccmksbbj9zgdiv2kc211h122q5712gvm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Adds a list of Hungarian public holidays to Emacs calendar")
    (description
      "Documentation at https://melpa.org/#/hungarian-holidays")
    (license #f)))

(define-public emacs-hungry-delete
  (package
    (name "emacs-hungry-delete")
    (version "20210409.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/hungry-delete.git")
               (commit
                 "d919e555e5c13a2edf4570f3ceec84f0ade71657")))
        (sha256
          (base32
            "1hjihncj6q971zj1xfnfmyvx8wv19wdnglnmz1278fwsgrcs050d"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nflath/hungry-delete")
    (synopsis "hungry delete minor mode")
    (description
      "Documentation at https://melpa.org/#/hungry-delete")
    (license #f)))

(define-public emacs-hush
  (package
    (name "emacs-hush")
    (version "20231008.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tirimia/hush.git")
               (commit
                 "51c7960820de0576bbf0c3c286cb1264854d20aa")))
        (sha256
          (base32
            "18yspmwn9wd00arfj80wj6lk7khcgn1arjbs2y8zqv8g7ms9xvh6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tirimia/hush")
    (synopsis
      "Pluggable secret manager (auth-source alternative)")
    (description
      "Documentation at https://melpa.org/#/hush")
    (license #f)))

(define-public emacs-hy-mode
  (package
    (name "emacs-hy-mode")
    (version "20211016.2011")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hylang/hy-mode.git")
               (commit
                 "df814865a1faa8414dacdbb35b2a9029995312ec")))
        (sha256
          (base32
            "1aavih2l4kwv25vw8iai18mjl7w66ih3yvblqfhcpmgbihnv4fp0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "http://github.com/hylang/hy-mode")
    (synopsis "Major mode for Hylang")
    (description
      "Documentation at https://melpa.org/#/hy-mode")
    (license #f)))

(define-public emacs-hyai
  (package
    (name "emacs-hyai")
    (version "20170301.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iquiw/hyai.git")
               (commit
                 "9efad2ac6a57059b3be624588f649e276a96fdd4")))
        (sha256
          (base32
            "0fw6qh0aajsyxrp5gg4wnwf61h112k73vvdn14x0zvd8i4fkm6hw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/iquiw/hyai")
    (synopsis "Haskell Yet Another Indentation")
    (description
      "Documentation at https://melpa.org/#/hyai")
    (license #f)))

(define-public emacs-hybrid-reverse-theme
  (package
    (name "emacs-hybrid-reverse-theme")
    (version "20220921.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Riyyi/emacs-hybrid-reverse.git")
               (commit
                 "5c60e7428d3c135c5f027d09f4474ed776f80d8d")))
        (sha256
          (base32
            "1ac2fwfny4fnp3d9027zhfcv6ykrsxh8agqa76894fzsn6ns2cjn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/riyyi/emacs-hybrid-reverse")
    (synopsis
      "Emacs theme with material color scheme")
    (description
      "Documentation at https://melpa.org/#/hybrid-reverse-theme")
    (license #f)))

(define-public emacs-hydandata-light-theme
  (package
    (name "emacs-hydandata-light-theme")
    (version "20190809.1925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chkhd/hydandata-light-theme.git")
               (commit
                 "180c3797fa7ef3e4bb679baaf5b492c33bbb9b8b")))
        (sha256
          (base32
            "157s8lssp6b4sjlm84qjg5wzgvgsgzqzpdh4y6g042xpgaz8b8nw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chkhd/hydandata-light-theme")
    (synopsis
      "A light color theme that is easy on your eyes")
    (description
      "Documentation at https://melpa.org/#/hydandata-light-theme")
    (license #f)))

(define-public emacs-hyde
  (package
    (name "emacs-hyde")
    (version "20160508.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nibrahim/Hyde.git")
               (commit
                 "a8cd6ed00ecd8d7de0ded2f4867015b412b15b76")))
        (sha256
          (base32
            "14sk9gai7sscvwgbl7y3dzz8fdhrqynilscmdimlncpm15w56m6i"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode to help create and manage Jekyll blogs")
    (description
      "Documentation at https://melpa.org/#/hyde")
    (license #f)))

(define-public emacs-hydra
  (package
    (name "emacs-hydra")
    (version "20220910.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/hydra.git")
               (commit
                 "317e1de33086637579a7aeb60f77ed0405bf359b")))
        (sha256
          (base32
            "1nbp0kpxb0m4igyjji1b8zi06am4l5m2m6rmxgz0jvks8cyri6dm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lv))
    (arguments
      '(#:files (:defaults (:exclude "lv.el"))))
    (home-page "https://github.com/abo-abo/hydra")
    (synopsis "Make bindings that stick around.")
    (description
      "Documentation at https://melpa.org/#/hydra")
    (license #f)))

(define-public emacs-hyperdrive
  (package
    (name "emacs-hyperdrive")
    (version "20231108.2105")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/hyperdrive-"
               version
               ".tar"))
        (sha256
          (base32
            "0gw8bbx734sd4an7kz1iizbjdr7akcflmdwf6kfyynsm4zl1flc0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-plz
            emacs-persist
            emacs-taxy-magit-section))
    (home-page
      "https://git.sr.ht/~ushin/hyperdrive.el")
    (synopsis "P2P filesystem")
    (description
      "Documentation at https://melpa.org/#/hyperdrive")
    (license #f)))

(define-public emacs-hyperkitty
  (package
    (name "emacs-hyperkitty")
    (version "20220226.1951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maxking/hyperkitty.el.git")
               (commit
                 "2c1d22ff017d096c359aa151e6a29f7214a58118")))
        (sha256
          (base32
            "1ymrzy0l6r6kvrf6p6xwb8dlg4gj8h14xam56d94fbh6mhr53z50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/maxking/hyperkitty.el")
    (synopsis
      "Emacs interface for Hyperkitty archives")
    (description
      "Documentation at https://melpa.org/#/hyperkitty")
    (license #f)))

(define-public emacs-hyperlist-mode
  (package
    (name "emacs-hyperlist-mode")
    (version "20230119.28")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/hyperlist-mode.git")
               (commit
                 "480dbf33ca72e7b5fade952aaf0d5a5eb43acb1d")))
        (sha256
          (base32
            "0rjlhqrr4plgx8fw8sbj8mv05w9gdc0ac34igm6lxgb4amkrvs00"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vifon/hyperlist-mode")
    (synopsis "A major-mode for viewing Hyperlists")
    (description
      "Documentation at https://melpa.org/#/hyperlist-mode")
    (license #f)))

(define-public emacs-hyperspace
  (package
    (name "emacs-hyperspace")
    (version "20230518.442")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/hyperspace-"
               version
               ".tar"))
        (sha256
          (base32
            "0xi673sqz5x1c9hmx4jr2m6fyzm91p80jll2jnzg7z9f022l9jmk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ieure/hyperspace-el")
    (synopsis "Get there from here")
    (description
      "Documentation at https://melpa.org/#/hyperspace")
    (license #f)))

(define-public emacs-i-ching
  (package
    (name "emacs-i-ching")
    (version "20230530.937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/i-ching.git")
               (commit
                 "2f1e8393b09f926188eb640604f5bc637707315e")))
        (sha256
          (base32
            "1g1j0yb6x9bmlz3ld5w7wwgaxn7dw3nfba5jmlhg83q6m6h168qi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/zzkt/i-ching")
    (synopsis "The Book of Changes")
    (description
      "Documentation at https://melpa.org/#/i-ching")
    (license #f)))

(define-public emacs-i2b2-mode
  (package
    (name "emacs-i2b2-mode")
    (version "20140710.104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danlamanna/i2b2-mode.git")
               (commit
                 "db10efcfc8bed369a516bbf7526ede41f98cb95a")))
        (sha256
          (base32
            "17k41rah17l9kf7bvlm83x71nzz4aizgn7254cl5sb59mdhcm8pm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Highlights corresponding PHI data in the text portion of an i2b2 XML Document.")
    (description
      "Documentation at https://melpa.org/#/i2b2-mode")
    (license #f)))

(define-public emacs-i3bar
  (package
    (name "emacs-i3bar")
    (version "20230724.305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Stebalien/i3bar.el.git")
               (commit
                 "82efd5c87a3b3e9bcb5257c0a678f861f24e477e")))
        (sha256
          (base32
            "15wqx8jhms9w22v9jdc2c3lshbaqfm0192qmckygjh86iyjqv041"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Stebalien/i3bar.el")
    (synopsis
      "Display status from an i3status command in the tab bar")
    (description
      "Documentation at https://melpa.org/#/i3bar")
    (license #f)))

(define-public emacs-i3wm
  (package
    (name "emacs-i3wm")
    (version "20170822.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.flintfam.org/swf-projects/emacs-i3.git")
               (commit
                 "71391dc61063fee77ad174f3b2ca25c60b41009e")))
        (sha256
          (base32
            "16rwqfg517ask3y6mqxw689w8xx4i51nq8js5wnzbz9a55aj776n"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.flintfam.org/swf-projects/emacs-i3")
    (synopsis "i3wm integration library")
    (description
      "Documentation at https://melpa.org/#/i3wm")
    (license #f)))

(define-public emacs-i3wm-config-mode
  (package
    (name "emacs-i3wm-config-mode")
    (version "20220913.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/i3wm-Config-Mode.git")
               (commit
                 "188e3978807ec39eba3cb69d973c0062af324215")))
        (sha256
          (base32
            "1ccddw0xrs65z3nj53ga718sr28fi57sl20x3i6i848imgzvpq7l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Alexander-Miller/i3wm-Config-Mode")
    (synopsis
      "Better syntax highlighting for i3wm's config file")
    (description
      "Documentation at https://melpa.org/#/i3wm-config-mode")
    (license #f)))

(define-public emacs-ialign
  (package
    (name "emacs-ialign")
    (version "20220629.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkcms/interactive-align.git")
               (commit
                 "bc4d30d79f2f4b413288195ef19894ac0fd258b7")))
        (sha256
          (base32
            "18hldv1id2s3rhh6bsxnv6g0lvw912vlgidwz8540nl6j9vr64dv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkcms/interactive-align")
    (synopsis "visual align-regexp")
    (description
      "Documentation at https://melpa.org/#/ialign")
    (license #f)))

(define-public emacs-iasm-mode
  (package
    (name "emacs-iasm-mode")
    (version "20171023.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RAttab/iasm-mode.git")
               (commit
                 "abbec7f308f9ce97beeb57e459fff35f559b4c18")))
        (sha256
          (base32
            "0hvpcckhlxab5f7w4s6iw5lhdbjrqn0l8gayg1w42rn6gssr3rap"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/RAttab/iasm-mode")
    (synopsis "interactive assembly major mode.")
    (description
      "Documentation at https://melpa.org/#/iasm-mode")
    (license #f)))

(define-public emacs-ibrowse
  (package
    (name "emacs-ibrowse")
    (version "20230926.2056")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ibrowse-"
               version
               ".tar"))
        (sha256
          (base32
            "0v9vj54silmbzmng5zi4gk30l4c9i0cbx4mraqwsw4j1mkaqmx2b"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~ngraves/ibrowse.el")
    (synopsis "Interact with your browser")
    (description
      "Documentation at https://melpa.org/#/ibrowse")
    (license #f)))

(define-public emacs-ibuffer-git
  (package
    (name "emacs-ibuffer-git")
    (version "20110508.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrockway/ibuffer-git.git")
               (commit
                 "d326319c05ddb8280885b31f9094040c1b365876")))
        (sha256
          (base32
            "1s5qvlf310b0z7q9k1xhcf4qmyfqd37jpqd67ciahaxk7cp224rd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "show git status in ibuffer column")
    (description
      "Documentation at https://melpa.org/#/ibuffer-git")
    (license #f)))

(define-public emacs-ibuffer-project
  (package
    (name "emacs-ibuffer-project")
    (version "20220321.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-ibuffer-project.git")
               (commit
                 "bfc0ec1f27b02b8ab816dcfd9073e5d78dae1aed")))
        (sha256
          (base32
            "0x25xzlvqgpf2s00595vbgyk322h74n46x2dbcp2v3158b0cj86c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-ibuffer-project")
    (synopsis
      "Group ibuffer's list by project or any function")
    (description
      "Documentation at https://melpa.org/#/ibuffer-project")
    (license #f)))

(define-public emacs-ibuffer-projectile
  (package
    (name "emacs-ibuffer-projectile")
    (version "20230817.610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ibuffer-projectile.git")
               (commit
                 "710ecac1578273bf31debe52870f5844472e3428")))
        (sha256
          (base32
            "1n9fqkwjxilzlb86ia95pjdv8lbgvsp8lwkw47v9kjvq2vnmarv5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "https://github.com/purcell/ibuffer-projectile")
    (synopsis
      "Group ibuffer's list by projectile root")
    (description
      "Documentation at https://melpa.org/#/ibuffer-projectile")
    (license #f)))

(define-public emacs-ibuffer-rcirc
  (package
    (name "emacs-ibuffer-rcirc")
    (version "20150215.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/ibuffer-rcirc.git")
               (commit
                 "8a4409b1c679d65c819dee4085faf929840e79f8")))
        (sha256
          (base32
            "15lapyj7qkkw1i1g1aizappm7gxkfnxhvd4fq66lghkzb76clz2m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgallina/ibuffer-rcirc")
    (synopsis "Ibuffer integration for rcirc")
    (description
      "Documentation at https://melpa.org/#/ibuffer-rcirc")
    (license #f)))

(define-public emacs-ibuffer-sidebar
  (package
    (name "emacs-ibuffer-sidebar")
    (version "20210508.836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/ibuffer-sidebar.git")
               (commit
                 "fb685e1e43db979e25713081d8ae4073453bbd5e")))
        (sha256
          (base32
            "04x87gngmvyj4nfq1dm3h9jr6b0kvikxsg1533kdkz9k72khs3n3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/ibuffer-sidebar")
    (synopsis "Sidebar for `ibuffer'")
    (description
      "Documentation at https://melpa.org/#/ibuffer-sidebar")
    (license #f)))

(define-public emacs-ibuffer-tramp
  (package
    (name "emacs-ibuffer-tramp")
    (version "20180127.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/svend/ibuffer-tramp.git")
               (commit
                 "bcad0bda3a67f55d1be936bf8fa9ef735fe1e3f3")))
        (sha256
          (base32
            "1ry7nbhqhjy6gkxd10s97nbm6flk5nm0l5q8071fprx8xxphqj8f"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/svend/ibuffer-tramp")
    (synopsis
      "Group ibuffer's list by TRAMP connection")
    (description
      "Documentation at https://melpa.org/#/ibuffer-tramp")
    (license #f)))

(define-public emacs-ibuffer-vc
  (package
    (name "emacs-ibuffer-vc")
    (version "20230817.606")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ibuffer-vc.git")
               (commit
                 "1388d2ea18287c74a79d053619dbdfa9090c26a2")))
        (sha256
          (base32
            "0mnxh6annmys4h1xhc2c7l7ajp4pwvdg68n30x7a21ad9qlvizil"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/ibuffer-vc")
    (synopsis
      "Group ibuffer's list by VC project, or show VC status")
    (description
      "Documentation at https://melpa.org/#/ibuffer-vc")
    (license #f)))

(define-public emacs-iceberg-theme
  (package
    (name "emacs-iceberg-theme")
    (version "20220622.1")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/iceberg-theme.el.git")
               (commit
                 "c9fdf9a8f5ff417c206730a84731f64a95483935")))
        (sha256
          (base32
            "03a7mmaykwvmm9yc8ii5k5wgihl88kyq0amp2byjddl7f4mq7zak"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-solarized-theme))
    (home-page
      "https://github.com/conao3/iceberg-theme.el")
    (synopsis
      "Well-designed, eye-friendly, dark blue color scheme")
    (description
      "Documentation at https://melpa.org/#/iceberg-theme")
    (license #f)))

(define-public emacs-icl-mode
  (package
    (name "emacs-icl-mode")
    (version "20221003.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/icl-mode.git")
               (commit
                 "1ef19c3c1c7f2667796907391d5337bbc2d73df3")))
        (sha256
          (base32
            "0jzly3l4a6769ins869chb752297p4702xcbxq8qx96wdigipsdz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/CeleritasCelery/icl-mode")
    (synopsis "Support for IEEE 1687 ICL/PDL")
    (description
      "Documentation at https://melpa.org/#/icl-mode")
    (license #f)))

(define-public emacs-icomplete-vertical
  (package
    (name "emacs-icomplete-vertical")
    (version "20220418.2119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/icomplete-vertical.git")
               (commit
                 "f5775d535630199703c936380d210d38249b342c")))
        (sha256
          (base32
            "1xc1sy51xf3mcbx6bprb6g4hzgg1rm7as3nx8q54wma7dllmh092"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oantolin/icomplete-vertical")
    (synopsis
      "Display icomplete candidates vertically")
    (description
      "Documentation at https://melpa.org/#/icomplete-vertical")
    (license #f)))

(define-public emacs-icsql
  (package
    (name "emacs-icsql")
    (version "20231021.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/icsql.git")
               (commit
                 "e3b6be564c89ecf8e7b6adf74e978adbc39b238a")))
        (sha256
          (base32
            "1a9ia0jx3i7j6v3pnlhwa59g8l3wa8g28daamvl550rc18zszwha"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-choice-program emacs-buffer-manage))
    (home-page "https://github.com/plandes/icsql")
    (synopsis "Interactive iSQL iteraface to ciSQL")
    (description
      "Documentation at https://melpa.org/#/icsql")
    (license #f)))

(define-public emacs-id-manager
  (package
    (name "emacs-id-manager")
    (version "20170320.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-id-manager.git")
               (commit
                 "14ebc35db298aac4dedc8aa188bc46bacab81f3b")))
        (sha256
          (base32
            "0k9b12gzvjw06y5ycjkigkj8vcmj4rz57d4hyzip27g1v93vvimc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "id-password management")
    (description
      "Documentation at https://melpa.org/#/id-manager")
    (license #f)))

(define-public emacs-idea-darkula-theme
  (package
    (name "emacs-idea-darkula-theme")
    (version "20230617.2005")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/idea-darkula-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "04c0ys9zgjq9y925d9h397pxq7qnpfc2w0ynds2lbjavyla3dw9k"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fourier/idea-darkula-theme")
    (synopsis
      "Color theme based on IntelliJ IDEA Darkula color theme")
    (description
      "Documentation at https://melpa.org/#/idea-darkula-theme")
    (license #f)))

(define-public emacs-identica-mode
  (package
    (name "emacs-identica-mode")
    (version "20130204.2253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gabrielsaldana/Emacs-Identica-mode.git")
               (commit
                 "cf9183ee11ac922e85c7c908f04e2d00b03111b3")))
        (sha256
          (base32
            "047gzycr49cs8wlmm9j4ry7b7jxmfhmbayx6rbbxs49lba8dgwlk"))))
    (build-system melpa-build-system)
    (home-page
      "http://blog.gabrielsaldana.org/identica-mode-for-emacs/")
    (synopsis
      "Major mode API client for status.net open microblogging")
    (description
      "Documentation at https://melpa.org/#/identica-mode")
    (license #f)))

(define-public emacs-idle-highlight-in-visible-buffers-mode
  (package
    (name "emacs-idle-highlight-in-visible-buffers-mode")
    (version "20181027.1531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ignacy/idle-highlight-in-visible-buffers-mode.git")
               (commit
                 "8d8de309d5bd4b035c01bf7f0cfc6e079c79d898")))
        (sha256
          (base32
            "194r7f4ngwx03n74rs26hqn9wypn9idjizvmffpsjpxfr7wr9z7l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ignacy/idle-highlight-in-visible-buffers")
    (synopsis "highlight the word the point is on")
    (description
      "Documentation at https://melpa.org/#/idle-highlight-in-visible-buffers-mode")
    (license #f)))

(define-public emacs-idle-highlight-mode
  (package
    (name "emacs-idle-highlight-mode")
    (version "20230319.810")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/idle-highlight-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "05yp3sbc2fz6cn1g6748gxzs361nbil2nma1k2xrrkgrwn7v6pl7"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-idle-highlight-mode")
    (synopsis "Highlight the word the point is on")
    (description
      "Documentation at https://melpa.org/#/idle-highlight-mode")
    (license #f)))

(define-public emacs-idle-org-agenda
  (package
    (name "emacs-idle-org-agenda")
    (version "20190106.1844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enisozgen/idle-org-agenda.git")
               (commit
                 "8e6052fc4923c30132052d67d794b76c92851c20")))
        (sha256
          (base32
            "0s9rql5izfc9bxg7xpv8406mirvj1r4djd8crknqsvc6gr0m1b1b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/enisozgen/idle-org-agenda")
    (synopsis
      "Shows your agenda when editor is idle.")
    (description
      "Documentation at https://melpa.org/#/idle-org-agenda")
    (license #f)))

(define-public emacs-idle-require
  (package
    (name "emacs-idle-require")
    (version "20090715.2203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/idle-require.el.git")
               (commit
                 "33592bb098223b4432d7a35a1d65ab83f47c1ec1")))
        (sha256
          (base32
            "0f8rxvc3dk2hi4x524l18fx73xrxy0qqwbybdma4ca67ck9n6xam"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/idle-require/")
    (synopsis
      "load elisp libraries while Emacs is idle")
    (description
      "Documentation at https://melpa.org/#/idle-require")
    (license #f)))

(define-public emacs-ido-at-point
  (package
    (name "emacs-ido-at-point")
    (version "20151113.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/katspaugh/ido-at-point.git")
               (commit
                 "e5907bbe8a3d148d07698b76bd994dc3076e16ee")))
        (sha256
          (base32
            "1bii7vj8pmmijcpvq3a1scky4ais7k6d7zympb3m9dmz355m9rpp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/katspaugh/ido-at-point")
    (synopsis "ido-style completion-at-point")
    (description
      "Documentation at https://melpa.org/#/ido-at-point")
    (license #f)))

(define-public emacs-ido-complete-space-or-hyphen
  (package
    (name "emacs-ido-complete-space-or-hyphen")
    (version "20210206.1505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/ido-complete-space-or-hyphen.git")
               (commit
                 "d1244243e042b8d5b6b991db752a17a44ea169bc")))
        (sha256
          (base32
            "1gl646lj1i2yxmgrgwd0sz9abq3zqf9z4qkl6ilp49ijk4cks63g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarwinAwardWinner/ido-complete-space-or-hyphen")
    (synopsis
      "Allow spaces to also match hyphens in ido")
    (description
      "Documentation at https://melpa.org/#/ido-complete-space-or-hyphen")
    (license #f)))

(define-public emacs-ido-completing-read+
  (package
    (name "emacs-ido-completing-read+")
    (version "20210529.1318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/ido-completing-read-plus.git")
               (commit
                 "49e7967ea8c0ab0a206b40d70fc19be115083fa1")))
        (sha256
          (base32
            "0amjz5l586w6qbhjr32gzcbg2d94k904h5is0030zgy2qswphnfn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-memoize))
    (arguments
      '(#:files ("ido-completing-read+.el")))
    (home-page
      "https://github.com/DarwinAwardWinner/ido-completing-read-plus")
    (synopsis "A completing-read-function using ido")
    (description
      "Documentation at https://melpa.org/#/ido-completing-read+")
    (license #f)))

(define-public emacs-ido-exit-target
  (package
    (name "emacs-ido-exit-target")
    (version "20170717.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/ido-exit-target.git")
               (commit
                 "e56fc6928649c87ccf39d56d84ab53ebaced1f73")))
        (sha256
          (base32
            "1a1bcvmihf22kr8rpv6kyp4b7x79hla5qdys48d6kl06m53gyckp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/waymondo/ido-exit-target")
    (synopsis
      "Commands and keys for selecting other window and frame targets within ido")
    (description
      "Documentation at https://melpa.org/#/ido-exit-target")
    (license #f)))

(define-public emacs-ido-flex-with-migemo
  (package
    (name "emacs-ido-flex-with-migemo")
    (version "20190408.350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/ido-flex-with-migemo.git")
               (commit
                 "da64f2fe3849492d35e155d81a817308a4853473")))
        (sha256
          (base32
            "0r8z8ingq83nkab9khpl9gspihv28gy721hcs0yh1d74wyjc71cr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flx-ido emacs-migemo))
    (home-page
      "https://github.com/ROCKTAKEY/ido-flex-with-migemo")
    (synopsis "use ido with flex and migemo")
    (description
      "Documentation at https://melpa.org/#/ido-flex-with-migemo")
    (license #f)))

(define-public emacs-ido-gnus
  (package
    (name "emacs-ido-gnus")
    (version "20140216.1646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/ido-gnus.git")
               (commit
                 "f5fe3f6aa8086f675ba216abace9e3d5f2e3a089")))
        (sha256
          (base32
            "0ifdwd5vnjv2iyb5bnz8pij35lc0ymmyx8j8zhpkbgjigz8f05ip"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vapniks/ido-gnus")
    (synopsis
      "Access gnus groups or servers using ido")
    (description
      "Documentation at https://melpa.org/#/ido-gnus")
    (license #f)))

(define-public emacs-ido-grid-mode
  (package
    (name "emacs-ido-grid-mode")
    (version "20160122.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larkery/ido-grid-mode.el.git")
               (commit
                 "7cfca3988a6dc3ad18e28abe114218095ff2366f")))
        (sha256
          (base32
            "1ip8g0r0aimhc4a1f06m711zmbs0krxn8hmayk99gk5kkz12igkb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/larkery/ido-grid-mode.el")
    (synopsis
      "Display ido-prospects in the minibuffer in a grid.")
    (description
      "Documentation at https://melpa.org/#/ido-grid-mode")
    (license #f)))

(define-public emacs-ido-hacks
  (package
    (name "emacs-ido-hacks")
    (version "20190206.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/scottjad/ido-hacks.git")
               (commit
                 "d2153a3e8d23436ee07ecae2a106f434361a10c5")))
        (sha256
          (base32
            "0rq5jmij691cccv4x8h8aiclnzx04v08axgz30prp6p71dxlrdms"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Put more IDO in your IDO")
    (description
      "Documentation at https://melpa.org/#/ido-hacks")
    (license #f)))

(define-public emacs-ido-load-library
  (package
    (name "emacs-ido-load-library")
    (version "20140611.1600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/ido-load-library.git")
               (commit
                 "e03b55957c93aa1a7dd190e173e16ec59dbb2ba7")))
        (sha256
          (base32
            "0l69sr3g1n2x61j6sv6hnbiyk8a2qra6y2kh413qp0sfpx4fzchv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persistent-soft emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/ido-load-library")
    (synopsis
      "Load-library alternative using ido-completing-read")
    (description
      "Documentation at https://melpa.org/#/ido-load-library")
    (license #f)))

(define-public emacs-ido-migemo
  (package
    (name "emacs-ido-migemo")
    (version "20191017.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/ido-migemo.git")
               (commit
                 "09a2cc175b500cab7655a25ffc982e78d46ca669")))
        (sha256
          (base32
            "0my4bvi2b4c5q8wdsdhypyk6w6n63pw0240kx3r6kb85l9rg95r3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-migemo))
    (home-page
      "https://github.com/myuhe/ido-migemo.el")
    (synopsis "Migemo plug-in for Ido")
    (description
      "Documentation at https://melpa.org/#/ido-migemo")
    (license #f)))

(define-public emacs-ido-occasional
  (package
    (name "emacs-ido-occasional")
    (version "20150214.1248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ido-occasional.git")
               (commit
                 "d405f1795e1e0c63be411ee2825184738d29c33a")))
        (sha256
          (base32
            "0zlkq29wxd3a4vg0w6ds2jad5h1pja7ccd3l6ppl0kz1b1517qlr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/ido-occasional")
    (synopsis "Use ido where you choose.")
    (description
      "Documentation at https://melpa.org/#/ido-occasional")
    (license #f)))

(define-public emacs-ido-select-window
  (package
    (name "emacs-ido-select-window")
    (version "20131220.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pjones/ido-select-window.git")
               (commit
                 "a64707d8d154664d50d12e26417d586e4c3dd78b")))
        (sha256
          (base32
            "1iifpgdpa98si0g2ykr0xbxcbqrvzqfl6r1dv9zihmxhdr7hs9c8"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page
      "https://github.com/pjones/ido-select-window")
    (synopsis
      "Select a window using ido and buffer names")
    (description
      "Documentation at https://melpa.org/#/ido-select-window")
    (license #f)))

(define-public emacs-ido-skk
  (package
    (name "emacs-ido-skk")
    (version "20151111.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tsukimizake/ido-skk.git")
               (commit
                 "89a2e62799bff2841ff634517c86084c4ce69246")))
        (sha256
          (base32
            "149cznbybwj0gkjyvpnh4kn258kxw449m7cn95n9jbh1r45vljvy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ddskk))
    (home-page
      "https://github.com/tsukimizake/ido-skk")
    (synopsis "ido interface for skk henkan")
    (description
      "Documentation at https://melpa.org/#/ido-skk")
    (license #f)))

(define-public emacs-ido-sort-mtime
  (package
    (name "emacs-ido-sort-mtime")
    (version "20171121.859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pkkm/ido-sort-mtime.git")
               (commit
                 "f638ff0c922af862f5211779f2311a27fde428eb")))
        (sha256
          (base32
            "0isy3rmw69664fsypg58rs42ql43drf27l90yvplnbcqd7nnnb21"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Sort Ido's file list by modification time")
    (description
      "Documentation at https://melpa.org/#/ido-sort-mtime")
    (license #f)))

(define-public emacs-ido-springboard
  (package
    (name "emacs-ido-springboard")
    (version "20170106.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/springboard.git")
               (commit
                 "687d1e5898a880878995dc9bffe93b4598366203")))
        (sha256
          (base32
            "0fn8c4hqblfjvcpg68kj2dmdjqsdnxddqbzgvakl43zckjg8pi01"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ido-springboard.el")))
    (home-page
      "https://github.com/jwiegley/springboard")
    (synopsis
      "Temporarily change default-directory for one command")
    (description
      "Documentation at https://melpa.org/#/ido-springboard")
    (license #f)))

(define-public emacs-ido-vertical-mode
  (package
    (name "emacs-ido-vertical-mode")
    (version "20210205.436")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/creichert/ido-vertical-mode.el.git")
               (commit
                 "b1659e967da0687abceca733b389ace24004fa66")))
        (sha256
          (base32
            "0wihhkbcfsfy3drqhg443vlz931c0nvpr9rdmp8l8m33ca1bbx5i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/creichert/ido-vertical-mode.el")
    (synopsis "Makes ido-mode display vertically")
    (description
      "Documentation at https://melpa.org/#/ido-vertical-mode")
    (license #f)))

(define-public emacs-ido-yes-or-no
  (package
    (name "emacs-ido-yes-or-no")
    (version "20161108.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/ido-yes-or-no.git")
               (commit
                 "c55383b1fce5879e87e7ca6809fc60534508e182")))
        (sha256
          (base32
            "1p50ycsn1mcq5nqa16w10hm8v2pixibvandc91mj5l7s8zspanik"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ido-completing-read+))
    (home-page
      "https://github.com/DarwinAwardWinner/ido-yes-or-no")
    (synopsis
      "Use Ido to answer yes-or-no questions")
    (description
      "Documentation at https://melpa.org/#/ido-yes-or-no")
    (license #f)))

(define-public emacs-idomenu
  (package
    (name "emacs-idomenu")
    (version "20141123.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/birkenfeld/idomenu.git")
               (commit
                 "4b0152d606360c70204fb4c27f68de79ca885386")))
        (sha256
          (base32
            "1vx2g1xgxpcabr49mkl6ggzrpa3k2zhm479j6262vb64swzx33jw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "imenu tag selection a la ido")
    (description
      "Documentation at https://melpa.org/#/idomenu")
    (license #f)))

(define-public emacs-idris-mode
  (package
    (name "emacs-idris-mode")
    (version "20230802.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/idris-hackers/idris-mode.git")
               (commit
                 "37c6b819903191acd85c56ef6f7ccf579b57eea4")))
        (sha256
          (base32
            "1m01n454rsj32w4pvg5y2c9jh88agf81w4x3fmvknjqncx9f1mv8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-prop-menu))
    (arguments
      '(#:files (:defaults "logo-small.png")))
    (home-page
      "https://github.com/idris-hackers/idris-mode")
    (synopsis "Major mode for editing Idris code")
    (description
      "Documentation at https://melpa.org/#/idris-mode")
    (license #f)))

(define-public emacs-ids-edit
  (package
    (name "emacs-ids-edit")
    (version "20170818.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/ids-edit.git")
               (commit
                 "8562a6cbfb3f2d44bc6f62ab15081a80f8fee502")))
        (sha256
          (base32
            "10h64c5n9piq9ly7ipqq33ji8x8vwh9j1h7r05yab8a2sn0h8587"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("ids-edit.el" "ids-cdp.txt" "ucs-strokes.txt")))
    (home-page "http://github.com/kawabata/ids-edit")
    (synopsis
      "IDS (Ideographic Description Sequence) editing tool")
    (description
      "Documentation at https://melpa.org/#/ids-edit")
    (license #f)))

(define-public emacs-iedit
  (package
    (name "emacs-iedit")
    (version "20220216.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorhge/iedit.git")
               (commit
                 "2fff88fe5d480089ef0b235901b3a5e4a1bcefc1")))
        (sha256
          (base32
            "07z659w9m94h79wnvs2fg80f5impidqhsmg6awc3fxwd3ib0yzih"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/victorhge/iedit")
    (synopsis
      "Edit multiple regions in the same way simultaneously.")
    (description
      "Documentation at https://melpa.org/#/iedit")
    (license #f)))

(define-public emacs-ietf-docs
  (package
    (name "emacs-ietf-docs")
    (version "20190420.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/choppsv1/ietf-docs.git")
               (commit
                 "ae157549eae5ec78dcbf215c2f48cb662b73abd0")))
        (sha256
          (base32
            "050c6fpf41xzx5kdpqcpa2rb0fk1a3h3009fdz77v0dp3bxv3a5d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/choppsv1/ietf-docs")
    (synopsis "Fetch, Cache and Load IETF documents")
    (description
      "Documentation at https://melpa.org/#/ietf-docs")
    (license #f)))

(define-public emacs-iflipb
  (package
    (name "emacs-iflipb")
    (version "20220612.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrosdahl/iflipb.git")
               (commit
                 "9ec1888335107bd314e8f40b3e113d525fed8083")))
        (sha256
          (base32
            "1396pl33mszli7ib51kn6pvxyxj4zz9dvzw14a9mp2m0ykkm6f6s"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jrosdahl/iflipb")
    (synopsis
      "Interactively flip between recently visited buffers")
    (description
      "Documentation at https://melpa.org/#/iflipb")
    (license #f)))

(define-public emacs-igist
  (package
    (name "emacs-igist")
    (version "20231030.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KarimAziev/igist.git")
               (commit
                 "3a46811cec944158888fe50ff3bf603035365a50")))
        (sha256
          (base32
            "0wlcjayfzsxm5w3klbzxgwbw4xa8lazl7n121b4ddsx3g6x2000m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ghub))
    (home-page "https://github.com/KarimAziev/igist")
    (synopsis
      "List, create, update and delete GitHub gists")
    (description
      "Documentation at https://melpa.org/#/igist")
    (license #f)))

(define-public emacs-ignoramus
  (package
    (name "emacs-ignoramus")
    (version "20220611.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/ignoramus.git")
               (commit
                 "f5e4a66191be12c2fc3cf42a5e0849fcc8518a3f")))
        (sha256
          (base32
            "072i5l6547p9ilkd5gx2r554kfb6bv0h268hwx421wh0cak0w0dh"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/ignoramus")
    (synopsis "Ignore backups, build files, et al.")
    (description
      "Documentation at https://melpa.org/#/ignoramus")
    (license #f)))

(define-public emacs-igv
  (package
    (name "emacs-igv")
    (version "20141210.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/sbarbit/eigv")
               (commit
                 "47ac6ceede252f451348a2c696398c0cb5279555")))
        (sha256
          (base32
            "11pss3hfxkfkyi273zfajdj43shdl6pn739zfv9jbm75v7m9bz6f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Control Integrative Genomic Viewer within Emacs")
    (description
      "Documentation at https://melpa.org/#/igv")
    (license #f)))

(define-public emacs-image+
  (package
    (name "emacs-image+")
    (version "20150707.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/image-plus.git")
               (commit
                 "6834d0c09bb4df9ecc0d7a559bd7827fed48fffc")))
        (sha256
          (base32
            "0v66wk9nh0raih4jhrzmmyi5lbysjnmbv791vm2230ffi2hmwxnd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-imagex")
    (synopsis
      "Image manipulate extensions for Emacs")
    (description
      "Documentation at https://melpa.org/#/image+")
    (license #f)))

(define-public emacs-image-archive
  (package
    (name "emacs-image-archive")
    (version "20150621.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-image-archive.git")
               (commit
                 "8d29535bd832329ffeeac780aae7aa8919af1175")))
        (sha256
          (base32
            "068z3ygq9p139ikm04xqhhqhc994an5isba5c7kpqs009y09xw3w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-image-archive")
    (synopsis
      "Image thumbnails in archive file with non-blocking")
    (description
      "Documentation at https://melpa.org/#/image-archive")
    (license #f)))

(define-public emacs-image-dired+
  (package
    (name "emacs-image-dired+")
    (version "20150430.544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-image-diredx.git")
               (commit
                 "b68094625d963056ad64e0e44af0e2266b2eadc7")))
        (sha256
          (base32
            "1n2ya9s0ld257a8iryjd0dz0z2zs1xhzfiwsdkq4l4azwxl54m29"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-image-diredx")
    (synopsis "Image-dired extensions")
    (description
      "Documentation at https://melpa.org/#/image-dired+")
    (license #f)))

(define-public emacs-imakado
  (package
    (name "emacs-imakado")
    (version "20141024.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/imakado/emacs-imakado.git")
               (commit
                 "00a1e7eea2cb9e9066343a23927d6c747707902f")))
        (sha256
          (base32
            "0f3xdqhq9nprvl8bnmgrx20h08ddkfak0is29bsqwckkfgn7pmqp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/imakado/emacs-imakado")
    (synopsis
      "imakado's usefull macros and functions")
    (description
      "Documentation at https://melpa.org/#/imakado")
    (license #f)))

(define-public emacs-imake
  (package
    (name "emacs-imake")
    (version "20230511.2108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/imake.git")
               (commit
                 "96ac809dbe9cae0e620bb5b1d5d1fb391f3f4741")))
        (sha256
          (base32
            "0xxh1jci3gvbiv0kcif1b39gfakgwaqd7a8pfwpw7f7prv44ifp6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/imake")
    (synopsis
      "Simple, opinionated make target runner")
    (description
      "Documentation at https://melpa.org/#/imake")
    (license #f)))

(define-public emacs-imapfilter
  (package
    (name "emacs-imapfilter")
    (version "20180318.2222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/imapfilter.git")
               (commit
                 "79bbbe918319bc1e8f42a0bef53dc7c77fe868ea")))
        (sha256
          (base32
            "0lqhwh8kav7f526a40rjdy2hzarzph1i3ig2dmbf02gp32sl7rg9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/imapfilter")
    (synopsis "run the imapfilter executable")
    (description
      "Documentation at https://melpa.org/#/imapfilter")
    (license #f)))

(define-public emacs-imbot
  (package
    (name "emacs-imbot")
    (version "20210423.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/QiangF/imbot.git")
               (commit
                 "a90183954522876ebbf1ce96d88b80e6a31b9d34")))
        (sha256
          (base32
            "1dwa6gvq17p7cj09rf0zwgg6bydny4g7i8mqymfic20vjw2pbmn1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/QiangF/imbot")
    (synopsis
      "Automatic system input method switcher")
    (description
      "Documentation at https://melpa.org/#/imbot")
    (license #f)))

(define-public emacs-imenu-anywhere
  (package
    (name "emacs-imenu-anywhere")
    (version "20210201.1704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/imenu-anywhere.git")
               (commit
                 "06ec33d79e33edf01b9118aead1eabeae8ee08b1")))
        (sha256
          (base32
            "0lbwfhcl40ayxskvmsvdrg8p63qp086xpzw61bqk4b3fxndxl04h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vitoshka/imenu-anywhere")
    (synopsis
      "ido/ivy/helm imenu across same mode/project/etc buffers")
    (description
      "Documentation at https://melpa.org/#/imenu-anywhere")
    (license #f)))

(define-public emacs-imenu-extra
  (package
    (name "emacs-imenu-extra")
    (version "20201229.1035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/imenu-extra.git")
               (commit
                 "a8d867e7cc446afcd4dc71d4f528e58d639840e1")))
        (sha256
          (base32
            "1c64cbxzm287k8hhm1plwphvipf96dp9zb0kyl78ng5c072wmryf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/redguardtoo/imenu-extra")
    (synopsis
      "Add extra items into existing imenu items")
    (description
      "Documentation at https://melpa.org/#/imenu-extra")
    (license #f)))

(define-public emacs-imenu-list
  (package
    (name "emacs-imenu-list")
    (version "20210420.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/imenu-list.git")
               (commit
                 "76f2335ee6f2f066d87fe4e4729219d70c9bc70d")))
        (sha256
          (base32
            "0b7q6h7ky7n20w1p471fmnwyfmc59c9ihgnl72m11dnciiz325wa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bmag/imenu-list")
    (synopsis
      "Show imenu entries in a separate buffer")
    (description
      "Documentation at https://melpa.org/#/imenu-list")
    (license #f)))

(define-public emacs-imenus
  (package
    (name "emacs-imenus")
    (version "20200730.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/imenus.el.git")
               (commit
                 "90200f5f22377903b405082eabe185447968f3e2")))
        (sha256
          (base32
            "04zhyn69bihxqddzsn9j0l6lxjpqkgdvbslh77cfdb4fp02cxsp1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/imenus.el")
    (synopsis
      "Imenu for multiple buffers and without subgroups")
    (description
      "Documentation at https://melpa.org/#/imenus")
    (license #f)))

(define-public emacs-imgbb
  (package
    (name "emacs-imgbb")
    (version "20180609.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/imgbb.el.git")
               (commit
                 "a524a46263835aa474f908827ebab4e8fa586001")))
        (sha256
          (base32
            "1fhhpz29x9vkhzms2qkxblic96kqzg0rqsxj71vgz6fpwdb4f9gy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/ecraven/imgbb.el")
    (synopsis
      "Simple image upload client for imgbb.com")
    (description
      "Documentation at https://melpa.org/#/imgbb")
    (license #f)))

(define-public emacs-immaterial-theme
  (package
    (name "emacs-immaterial-theme")
    (version "20230219.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/petergardfjall/emacs-immaterial-theme.git")
               (commit
                 "20417eaf6f349b3707e515d5d7817896243a8ad1")))
        (sha256
          (base32
            "1xymssi0kyipgy9dyda931795xpvr1afnisaccl9yq53rzibwxfx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/petergardfjall/emacs-immaterial-theme")
    (synopsis
      "A flexible theme based on material design principles")
    (description
      "Documentation at https://melpa.org/#/immaterial-theme")
    (license #f)))

(define-public emacs-immersive-translate
  (package
    (name "emacs-immersive-translate")
    (version "20231001.1557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Elilif/emacs-immersive-translate.git")
               (commit
                 "1d00d558363985fa988fc40cd5093bfc6926d83e")))
        (sha256
          (base32
            "1ghqc6si6yv3fp9s6yg45i5nnr5x66kxd90qg2jmjg2h1fjj61ci"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Elilif/emacs-immersive-translate")
    (synopsis
      "Translate the current buffer immersively")
    (description
      "Documentation at https://melpa.org/#/immersive-translate")
    (license #f)))

(define-public emacs-immortal-scratch
  (package
    (name "emacs-immortal-scratch")
    (version "20160517.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/immortal-scratch.git")
               (commit
                 "faeab0ad6c33c74c0cbd1dfcebffaa0690de40c6")))
        (sha256
          (base32
            "1mx9f8pwnbrm6q9ngdyv64aqkw1izj83m0mf7zqlpww7yfhv1q9b"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "respawn the scratch buffer when it's killed")
    (description
      "Documentation at https://melpa.org/#/immortal-scratch")
    (license #f)))

(define-public emacs-immutant-server
  (package
    (name "emacs-immutant-server")
    (version "20140311.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leathekd/immutant-server.el.git")
               (commit
                 "2a21e65588acb6a976f2998e30b21fdabdba4dbb")))
        (sha256
          (base32
            "0rbamm9qvipgswxng8g1d7rbdbcj7sgwrccg7imcfapwwq7xhj4h"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/leathekd/immutant-server.el")
    (synopsis "Run your Immutant server in Emacs")
    (description
      "Documentation at https://melpa.org/#/immutant-server")
    (license #f)))

(define-public emacs-impatient-mode
  (package
    (name "emacs-impatient-mode")
    (version "20230511.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/impatient-mode.git")
               (commit
                 "a4e4e12852840996b027cb8e9fb2b809c37a0ee3")))
        (sha256
          (base32
            "1cwascc08pzmvgjf0z5fh3w3jf85rgk13haz085qbdkhxsbivav2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-simple-httpd emacs-htmlize))
    (arguments
      '(#:files ("*.html" "*.js" "impatient-mode.el")))
    (home-page "https://github.com/netguy204/imp.el")
    (synopsis "Serve buffers live over HTTP")
    (description
      "Documentation at https://melpa.org/#/impatient-mode")
    (license #f)))

(define-public emacs-impatient-showdown
  (package
    (name "emacs-impatient-showdown")
    (version "20220730.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/impatient-showdown.git")
               (commit
                 "501d8eb255022d832bb30178db154d0004eac18c")))
        (sha256
          (base32
            "0qqg84yyfxc7kb1fxn0kpnsjgi7kphh7cvq9avabl1yiy1s51gq8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-impatient-mode))
    (arguments '(#:files (:defaults "preview.html")))
    (home-page
      "https://github.com/jcs-elpa/impatient-showdown")
    (synopsis
      "Preview markdown buffer live over HTTP using showdown")
    (description
      "Documentation at https://melpa.org/#/impatient-showdown")
    (license #f)))

(define-public emacs-import-js
  (package
    (name "emacs-import-js")
    (version "20220215.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Galooshi/emacs-import-js.git")
               (commit
                 "d2bbb53f96395415f9f01de4fa88d82c1f59ba63")))
        (sha256
          (base32
            "1r2in6zjhp0cywlyncnqblhb0k1bymhbhs7r974khrpf8byw69p9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grizzl))
    (arguments '(#:files ("plugin/import-js.el")))
    (home-page
      "http://github.com/Galooshi/emacs-import-js/")
    (synopsis "Import Javascript dependencies")
    (description
      "Documentation at https://melpa.org/#/import-js")
    (license #f)))

(define-public emacs-import-popwin
  (package
    (name "emacs-import-popwin")
    (version "20170218.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/import-popwin.git")
               (commit
                 "bb05a9e226f8c63fe7b18a3e92010357049ab5ba")))
        (sha256
          (base32
            "0jjm214zfq2kk8vzf67vala46lbbkjyms7qm27qv3yhcbc7ricvn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popwin))
    (home-page
      "https://github.com/syohex/emacs-import-popwin")
    (synopsis
      "popwin buffer near by import statements with popwin")
    (description
      "Documentation at https://melpa.org/#/import-popwin")
    (license #f)))

(define-public emacs-importmagic
  (package
    (name "emacs-importmagic")
    (version "20180520.303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anachronic/importmagic.el.git")
               (commit
                 "701dfcca5f3ab42be0f26a8d381d7116c79be850")))
        (sha256
          (base32
            "035830aizamh4c8hpnmfrbz9v9gy23d3nx0dv366l3q8mrh36l44"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-epc))
    (arguments
      '(#:files (:defaults "importmagicserver.py")))
    (home-page
      "https://github.com/anachronic/importmagic.el")
    (synopsis
      "Fix Python imports using importmagic.")
    (description
      "Documentation at https://melpa.org/#/importmagic")
    (license #f)))

(define-public emacs-impostman
  (package
    (name "emacs-impostman")
    (version "20230111.2012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flashcode/impostman.git")
               (commit
                 "936575500f733c2428ba878f9400f3eef8c9645e")))
        (sha256
          (base32
            "16zd5bk7s1h9yrrsk0ngpzb4cfyj4gkmq70m0ijsc94az7m9rlx3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/flashcode/impostman")
    (synopsis "Import Postman collections")
    (description
      "Documentation at https://melpa.org/#/impostman")
    (license #f)))

(define-public emacs-indent-control
  (package
    (name "emacs-indent-control")
    (version "20231031.116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/indent-control.git")
               (commit
                 "944030cf4137caaf5356519aaf44159073bad50e")))
        (sha256
          (base32
            "0mliv9p3ywyz877qa3r7cws18mkr9n68j9v9ivhg53b6zl15yrkd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/indent-control")
    (synopsis "Management for indentation level")
    (description
      "Documentation at https://melpa.org/#/indent-control")
    (license #f)))

(define-public emacs-indent-guide
  (package
    (name "emacs-indent-guide")
    (version "20210115.400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/indent-guide.git")
               (commit
                 "d388c3387781a370ca13233ff445d03f3c5cf12f")))
        (sha256
          (base32
            "0r303mzxj57l8rclzsmvhnx2p3lhf2k4zvn8a6145wb10jvcwfxi"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "show vertical lines to guide indentation")
    (description
      "Documentation at https://melpa.org/#/indent-guide")
    (license #f)))

(define-public emacs-indent-info
  (package
    (name "emacs-indent-info")
    (version "20210111.745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/terlar/indent-info.el.git")
               (commit
                 "05a787afeb9946714d8b0c724868195a678db49e")))
        (sha256
          (base32
            "14qjl5mw7zmrc2zbcid1alqh67f704giq49qyda8q8n82vi6g8a9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/terlar/indent-info.el")
    (synopsis
      "Show indentation information in status bar")
    (description
      "Documentation at https://melpa.org/#/indent-info")
    (license #f)))

(define-public emacs-indent-lint
  (package
    (name "emacs-indent-lint")
    (version "20230822.46")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/indent-lint.el.git")
               (commit
                 "aee76faf54a55e0bcb5dc07a667d7f5999299c9b")))
        (sha256
          (base32
            "19yixxsrwdm4wqch5011mk4gimsyh9rqzvrxkg7l7baa7am8v902"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async-await
            emacs-async
            emacs-promise))
    (arguments
      '(#:files
        (:defaults (:exclude "flycheck-indent.el"))))
    (home-page
      "https://github.com/conao3/indent-lint.el")
    (synopsis "Async indentation checker")
    (description
      "Documentation at https://melpa.org/#/indent-lint")
    (license #f)))

(define-public emacs-indent-tools
  (package
    (name "emacs-indent-tools")
    (version "20210622.1207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-stuff/indent-tools.git")
               (commit
                 "c731f05fa3950e2e8580ec61b88abbc705639830")))
        (sha256
          (base32
            "0jri2vxd5a4sx93xq6kjcc5zx9yrhv789x3lyq6r2p2422diw2jr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-hydra emacs-yafolding))
    (home-page
      "https://gitlab.com/emacs-stuff/indent-tools/")
    (synopsis
      "Indent, navigate (and more) by blocks of indentation: yaml, python etc.")
    (description
      "Documentation at https://melpa.org/#/indent-tools")
    (license #f)))

(define-public emacs-indian-ext
  (package
    (name "emacs-indian-ext")
    (version "20231009.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paddymcall/indian-ext.git")
               (commit
                 "80ea22eea203c8eb4c28f59fceb8d276395ecb0f")))
        (sha256
          (base32
            "02ig5vs2l26c708mpdnkdxbx9d2lg371f61281ji34n9n8fyyy5j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paddymcall/indian-ext")
    (synopsis
      "Extension to Indian language utilities")
    (description
      "Documentation at https://melpa.org/#/indian-ext")
    (license #f)))

(define-public emacs-indicators
  (package
    (name "emacs-indicators")
    (version "20161211.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/indicators.el.git")
               (commit
                 "f62a1201f21453e3aca93f48483e65ae8251432e")))
        (sha256
          (base32
            "0n933jigp0awba2hxg3kwscmfmmqn3jwbrxcw3vw9aj0a5rg5bq6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/indicators.el")
    (synopsis
      "Display the buffer relative location of line in the fringe.")
    (description
      "Documentation at https://melpa.org/#/indicators")
    (license #f)))

(define-public emacs-indium
  (package
    (name "emacs-indium")
    (version "20210309.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/Indium.git")
               (commit
                 "8499e156bf7286846c3a2bf8c9e0c4d4f24b224c")))
        (sha256
          (base32
            "1hii97gz1qpr9nbnpb6am4i6a6vwxnbzcy65gyjvsfc122m3qn03"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-js2-refactor
            emacs-company
            emacs-json-process-client))
    (home-page
      "https://github.com/NicolasPetton/indium")
    (synopsis
      "JavaScript Awesome Development Environment")
    (description
      "Documentation at https://melpa.org/#/indium")
    (license #f)))

(define-public emacs-indy
  (package
    (name "emacs-indy")
    (version "20190807.625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/indy.git")
               (commit
                 "abc5bee424780ad2de5520f8fefbf8e120c0d9ed")))
        (sha256
          (base32
            "1mvmd8vm9w6vhr7ablxk5pylwrga6knhjjbin9l1xlgrpdh2pglp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A minor mode and EDSL to manage your mode's indentation rules.")
    (description
      "Documentation at https://melpa.org/#/indy")
    (license #f)))

(define-public emacs-inf-clojure
  (package
    (name "emacs-inf-clojure")
    (version "20230909.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/inf-clojure.git")
               (commit
                 "9aea5012bf9047781a21a3b62cea134b126f7709")))
        (sha256
          (base32
            "0c72yjqlxcc6qniz2aa0q55cq3dvfmmydji8jjd9r9dd67wv0fvc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "http://github.com/clojure-emacs/inf-clojure")
    (synopsis
      "Run an external Clojure process in an Emacs buffer")
    (description
      "Documentation at https://melpa.org/#/inf-clojure")
    (license #f)))

(define-public emacs-inf-crystal
  (package
    (name "emacs-inf-crystal")
    (version "20180119.211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/inf-crystal.el.git")
               (commit
                 "02007b2a2a3bea44902d7c83c4acba1e39d278e3")))
        (sha256
          (base32
            "18627gvpgw2ay7zcbglw6gwpslgh69hbvynwcyqln4c17fk9h0kw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-crystal-mode))
    (home-page
      "https://github.com/brantou/inf-crystal.el")
    (synopsis
      "Run a Inferior-Crystal process in a buffer")
    (description
      "Documentation at https://melpa.org/#/inf-crystal")
    (license #f)))

(define-public emacs-inf-elixir
  (package
    (name "emacs-inf-elixir")
    (version "20230611.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/J3RN/inf-elixir.git")
               (commit
                 "77ac6af83eb4b816c62f58a0298b1bae0c3d69fd")))
        (sha256
          (base32
            "0vp7x11ggygq1xlzs4zqqy7x0qvyvy7349grczfv78awqzigdhqb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/J3RN/inf-elixir")
    (synopsis "Run an interactive Elixir shell")
    (description
      "Documentation at https://melpa.org/#/inf-elixir")
    (license #f)))

(define-public emacs-inf-mongo
  (package
    (name "emacs-inf-mongo")
    (version "20180408.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/endofunky/inf-mongo.git")
               (commit
                 "2e498d1c88bd1904eeec18ed06b1a0cf8bdc2a92")))
        (sha256
          (base32
            "1m6skisj6r3fbxadpwwgf3a3934b2qvwb7zj975qksxq56ij0wkq"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/endofunky/inf-mongo")
    (synopsis
      "Run a MongoDB shell process in a buffer")
    (description
      "Documentation at https://melpa.org/#/inf-mongo")
    (license #f)))

(define-public emacs-inf-ruby
  (package
    (name "emacs-inf-ruby")
    (version "20231002.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nonsequitur/inf-ruby.git")
               (commit
                 "991fe74b1c1b83412b42832a39aafc2d88ae625c")))
        (sha256
          (base32
            "0dxjcr34xsa0m25yw8pp4iwjq8cqdgs6r8ls4lwfb69rnii7jmn5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nonsequitur/inf-ruby")
    (synopsis "Run a Ruby process in a buffer")
    (description
      "Documentation at https://melpa.org/#/inf-ruby")
    (license #f)))

(define-public emacs-inferior-islisp
  (package
    (name "emacs-inferior-islisp")
    (version "20220924.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/islisp-mode.git")
               (commit
                 "bbf45d02495f9455e91beed01676178dfa5d3561")))
        (sha256
          (base32
            "174zjlgcikaydgx5npsbwqblzc61pxnnpw50nia8jhh8175j2sbl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-islisp-mode))
    (arguments '(#:files ("inferior-islisp.el")))
    (home-page
      "https://gitlab.com/sasanidas/islisp-mode")
    (synopsis "Run inferior ISLisp processes")
    (description
      "Documentation at https://melpa.org/#/inferior-islisp")
    (license #f)))

(define-public emacs-inflections
  (package
    (name "emacs-inflections")
    (version "20210110.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/jump.el.git")
               (commit
                 "55caa66a7cc6e0b1a76143fd40eff38416928941")))
        (sha256
          (base32
            "03fh7i6blnbc0zbmp83fk095hr3q4fdvrvfxad74zghcbc2nk7b7"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("inflections.el")))
    (home-page "https://github.com/eschulte/jump.el")
    (synopsis
      "convert english words between singular and plural")
    (description
      "Documentation at https://melpa.org/#/inflections")
    (license #f)))

(define-public emacs-info-beamer
  (package
    (name "emacs-info-beamer")
    (version "20210427.1033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakra/info-beamer.el.git")
               (commit
                 "6b4cc29f1aec72d8e23b2c25a99cdd84e6cdc92b")))
        (sha256
          (base32
            "064igpiip1b037rs32z8w1g3w7rywyhabi1h92p1zkx3gjlqgpp2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dakra/info-beamer.el")
    (synopsis
      "Utilities for working with info-beamer")
    (description
      "Documentation at https://melpa.org/#/info-beamer")
    (license #f)))

(define-public emacs-info-buffer
  (package
    (name "emacs-info-buffer")
    (version "20170112.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/llvilanova/info-buffer.git")
               (commit
                 "d35dad6e766c6e2ddb8dc6acb4ce5b6e10fbcaa7")))
        (sha256
          (base32
            "0czkp7cf7qmdm1jdn67gxyxz8b4qj2kby8if50d450xqwbx0da7x"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/llvilanova/info-buffer")
    (synopsis
      "Display info topics in separate buffers")
    (description
      "Documentation at https://melpa.org/#/info-buffer")
    (license #f)))

(define-public emacs-info-colors
  (package
    (name "emacs-info-colors")
    (version "20220927.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ubolonton/info-colors.git")
               (commit
                 "2e237c301ba62f0e0286a27c1abe48c4c8441143")))
        (sha256
          (base32
            "0di34jg2r8nlflxln5azaf2a409hr3pwl93x8jdkv070yqyrf69f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ubolonton/info-colors")
    (synopsis "Extra colors for Info-mode")
    (description
      "Documentation at https://melpa.org/#/info-colors")
    (license #f)))

(define-public emacs-info-rename-buffer
  (package
    (name "emacs-info-rename-buffer")
    (version "20200328.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/info-rename-buffer.git")
               (commit
                 "87fb263b18717538fd04878e3358e1e720415db8")))
        (sha256
          (base32
            "07ylrbl9i2d09nspj481hkgcq9vs4ikvl86sfj7594zzdyy6b8qx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oitofelix/info-rename-buffer")
    (synopsis "Rename Info buffers to match manuals")
    (description
      "Documentation at https://melpa.org/#/info-rename-buffer")
    (license #f)))

(define-public emacs-inform
  (package
    (name "emacs-inform")
    (version "20200723.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieter-wilhelm/inform.git")
               (commit
                 "8ff0a19a9f40cfa8283da8ed73de94c35a327423")))
        (sha256
          (base32
            "1rg3v554zjx1mrw1wz2agfrr9317fzj1bqkn82m9r4ys91gx1qh4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dieter-wilhelm/inform")
    (synopsis
      "Symbol links in Info buffers to their help documentation.")
    (description
      "Documentation at https://melpa.org/#/inform")
    (license #f)))

(define-public emacs-inform7
  (package
    (name "emacs-inform7")
    (version "20200430.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/inform7-mode.git")
               (commit
                 "a409bbc6f04264f7f00616a995fa6ecf59d33d0d")))
        (sha256
          (base32
            "1sai118i5ry58jjc3777kn2ca2nhaxszhl0va6gyy7j2cdpg8gpy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/GuiltyDolphin/inform7-mode")
    (synopsis
      "Major mode for working with Inform 7 files")
    (description
      "Documentation at https://melpa.org/#/inform7")
    (license #f)))

(define-public emacs-inherit-local
  (package
    (name "emacs-inherit-local")
    (version "20170409.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shlevy/inherit-local.git")
               (commit
                 "b1f4ff9c41f9d64e4adaf5adcc280b82f084cdc7")))
        (sha256
          (base32
            "1fargashyqn4ga420k3ikc1akf7mw3zcarpg24gh2591p4swa0ih"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shlevy/inherit-local/tree-master/")
    (synopsis "Inherited buffer-local variables")
    (description
      "Documentation at https://melpa.org/#/inherit-local")
    (license #f)))

(define-public emacs-inheritenv
  (package
    (name "emacs-inheritenv")
    (version "20230804.651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/inheritenv.git")
               (commit
                 "00106bb208d06e5f1ec25d0c2f41c000cbb25076")))
        (sha256
          (base32
            "04na9m3z3k94jjqcqps95xcmvjklnddhli2xaac16m4ackw2wv9b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/inheritenv")
    (synopsis
      "Make temp buffers inherit buffer-local environment variables")
    (description
      "Documentation at https://melpa.org/#/inheritenv")
    (license #f)))

(define-public emacs-ini
  (package
    (name "emacs-ini")
    (version "20220827.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EsaLaine/ini.el.git")
               (commit
                 "d50fe629497d51c6390a56bbded1ad77ce12e5af")))
        (sha256
          (base32
            "0zyml2karncshfs0sinmkv6avjgv9nxfdzdvj5r8k7wsd3925p36"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/EsaLaine/ini.el")
    (synopsis
      "Converting between INI files and association lists")
    (description
      "Documentation at https://melpa.org/#/ini")
    (license #f)))

(define-public emacs-ini-mode
  (package
    (name "emacs-ini-mode")
    (version "20230211.1512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/ini-mode.git")
               (commit
                 "5472abc94e564edc6b469c48d2324519a044a77c")))
        (sha256
          (base32
            "1k2xscd9dhxd4znsxn3ryvds8g9yrd82bz4jdx5p2km9czpjrj88"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/ini-mode")
    (synopsis
      "Major mode for Windows-style ini files.")
    (description
      "Documentation at https://melpa.org/#/ini-mode")
    (license #f)))

(define-public emacs-init-loader
  (package
    (name "emacs-init-loader")
    (version "20210703.902")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/init-loader.git")
               (commit
                 "ecab5a66b40227c4173992adfa5cfeae09f1657e")))
        (sha256
          (base32
            "0fkxv7i7jdlj0z5n4hfm8897pfy6jxmk8znpfr9564ay90cp445h"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("init-loader.el")))
    (home-page
      "https://github.com/emacs-jp/init-loader/")
    (synopsis "Loader for configuration files")
    (description
      "Documentation at https://melpa.org/#/init-loader")
    (license #f)))

(define-public emacs-init-open-recentf
  (package
    (name "emacs-init-open-recentf")
    (version "20220220.2004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/init-open-recentf.el.git")
               (commit
                 "51463effe54ca9390ec339b9678968f35a40dbfd")))
        (sha256
          (base32
            "1f1y3wafix0xvffkckbx3yh1sf548xvk6v3lshy859nbcbm4nbha"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/init-open-recentf.el")
    (synopsis
      "Invoke a command immediately after startup")
    (description
      "Documentation at https://melpa.org/#/init-open-recentf")
    (license #f)))

(define-public emacs-initsplit
  (package
    (name "emacs-initsplit")
    (version "20160919.1818")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dabrahams/initsplit.git")
               (commit
                 "c941d436eb2b10b01c76a582c5a2b23fb30751aa")))
        (sha256
          (base32
            "0vz0pfm2m3v0zk65b4ikk6yfpk282nzbm99fbzj8w76yfg240dfn"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("initsplit.el")))
    (home-page
      "http://www.gci-net.com/users/j/johnw/emacs.html")
    (synopsis
      "code to split customizations into different files")
    (description
      "Documentation at https://melpa.org/#/initsplit")
    (license #f)))

(define-public emacs-ink-mode
  (package
    (name "emacs-ink-mode")
    (version "20201105.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/ink-mode.git")
               (commit
                 "63c7ef39acf434a1682951bcf352e8fe1e1ac6d9")))
        (sha256
          (base32
            "1akjzbivwgpywfbazid8r8300nm5wnsj0nw5hmb25xlrcxl88y79"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/Kungsgeten/ink-mode")
    (synopsis
      "Major mode for writing interactive fiction in Ink")
    (description
      "Documentation at https://melpa.org/#/ink-mode")
    (license #f)))

(define-public emacs-inkpot-theme
  (package
    (name "emacs-inkpot-theme")
    (version "20230618.715")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/inkpot-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "1dg2pwcz4j6r1cr23855r8syk93vxbv4ff10f280zf955jpjjv37"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-inkpot-theme")
    (synopsis "A port of vim's inkpot theme")
    (description
      "Documentation at https://melpa.org/#/inkpot-theme")
    (license #f)))

(define-public emacs-inline-crypt
  (package
    (name "emacs-inline-crypt")
    (version "20170824.900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sodel-the-Vociferous/inline-crypt-el.git")
               (commit
                 "281385b383f850fd2e895926b1cef804dd052633")))
        (sha256
          (base32
            "0hjmq8j7y4wnjgk6z92w4ci0ag9fm6rn63z9mi3krvdv154vz2n0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Sodel-the-Vociferous/inline-crypt-el")
    (synopsis "Simple inline encryption via openssl")
    (description
      "Documentation at https://melpa.org/#/inline-crypt")
    (license #f)))

(define-public emacs-inline-docs
  (package
    (name "emacs-inline-docs")
    (version "20230708.222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/inline-docs.git")
               (commit
                 "08eb99f65406993425ccf9937aad013436a7c6ef")))
        (sha256
          (base32
            "1iisz4vsbza658fdj455yambd5njjvid8m8jjmszpf8yi2rgyfd6"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/inline-docs.git")
    (synopsis "Show inline contextual docs.")
    (description
      "Documentation at https://melpa.org/#/inline-docs")
    (license #f)))

(define-public emacs-inliner
  (package
    (name "emacs-inliner")
    (version "20191017.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/inlineR.git")
               (commit
                 "bf6450a3540aa3538546d312324c41befd0a4e54")))
        (sha256
          (base32
            "05by3mzz8gw13c42m2z3cr13zng62mbany0hvixx3jmn1q4hj9r0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/myuhe/inlineR.el")
    (synopsis
      "insert Tag for inline image of R graphics")
    (description
      "Documentation at https://melpa.org/#/inlineR")
    (license #f)))

(define-public emacs-insecure-lock
  (package
    (name "emacs-insecure-lock")
    (version "20230426.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kchanqvq/insecure-lock.git")
               (commit
                 "33b2cf4ecf80d948cf0942aa8bc1787d44c99941")))
        (sha256
          (base32
            "16ijhkvx1sap84zmy2znwwyczpzb42y9a1iwkhgzy4szy0nrc84y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/BlueFlo0d/insecure-lock")
    (synopsis "Extensible screen lock framework")
    (description
      "Documentation at https://melpa.org/#/insecure-lock")
    (license #f)))

(define-public emacs-insert-char-preview
  (package
    (name "emacs-insert-char-preview")
    (version "20201023.2108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/insert-char-preview.git")
               (commit
                 "0e4a62b5407fb1bed8920a4c13cf9a91065e15ad")))
        (sha256
          (base32
            "0cqc23y9n63a7kl2p1zrfcsxnclfxcszfmbh2hmbrs6q05ys0kzg"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/matsievskiysv/insert-char-preview")
    (synopsis "Insert Unicode char")
    (description
      "Documentation at https://melpa.org/#/insert-char-preview")
    (license #f)))

(define-public emacs-insert-esv
  (package
    (name "emacs-insert-esv")
    (version "20201201.722")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sam030820/insert-esv.git")
               (commit
                 "067bdd92ab2fccdfdee3d8707aa570527c74fd6a")))
        (sha256
          (base32
            "10dh7rbr4fhz5db5vm5za8x6cnjbrlgc98af5qr0462zc9gq7xif"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/sam030820/insert-esv/")
    (synopsis "Insert ESV Bible passages")
    (description
      "Documentation at https://melpa.org/#/insert-esv")
    (license #f)))

(define-public emacs-insert-kaomoji
  (package
    (name "emacs-insert-kaomoji")
    (version "20220215.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~pkal/insert-kaomoji")
               (commit
                 "974bb7dc02059253e032c501b2c3c0ece448d472")))
        (sha256
          (base32
            "061809gl7dfz4mis5igz9aiis1gq4np3fk75ydmzm0j9isz4dc2q"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "KAOMOJIS")))
    (home-page
      "https://git.sr.ht/~pkal/insert-kaomoji")
    (synopsis "Easily insert kaomojis")
    (description
      "Documentation at https://melpa.org/#/insert-kaomoji")
    (license #f)))

(define-public emacs-insert-random
  (package
    (name "emacs-insert-random")
    (version "20230212.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-insert-random.git")
               (commit
                 "a13827fd68457f939e46f95a662752f6f344107c")))
        (sha256
          (base32
            "1jlbi6hv7f5aar5mf5zqa3pr6m7qss9hfsi5glgjg26m7633pv7d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-insert-random")
    (synopsis
      "Insert random characters from various character sets")
    (description
      "Documentation at https://melpa.org/#/insert-random")
    (license #f)))

(define-public emacs-insert-shebang
  (package
    (name "emacs-insert-shebang")
    (version "20201203.1648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psachin/insert-shebang.git")
               (commit
                 "cc8cea997a8523bce9f303de993af3a73eb0d2e2")))
        (sha256
          (base32
            "0wvcdv2lfv68r3zyfzr9yahm3gvc60yzk8zi39l70vsgzh4yfq91"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/psachin/insert-shebang")
    (synopsis "Insert shebang line automatically.")
    (description
      "Documentation at https://melpa.org/#/insert-shebang")
    (license #f)))

(define-public emacs-insfactor
  (package
    (name "emacs-insfactor")
    (version "20141117.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/duelinmarkers/insfactor.el.git")
               (commit
                 "7ef5446cebb08a17d4106d2e6f3c053e49e1e829")))
        (sha256
          (base32
            "112s3c0ii8zjc6vlj2im2qd2pl3hb95pq4zibm86gjpw428wd8iy"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/duelinmarkers/insfactor.el")
    (synopsis
      "Client for a Clojure project with insfactor in it")
    (description
      "Documentation at https://melpa.org/#/insfactor")
    (license #f)))

(define-public emacs-inspire
  (package
    (name "emacs-inspire")
    (version "20230514.1030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Simon-Lin/inspire.el.git")
               (commit
                 "825bbd4e19046b0e61aa27a0f88b1daeaaebf1d0")))
        (sha256
          (base32
            "14swfc4z6ky22hkbcwnkcl5yfphql6hsii6v0dbnkrhj0s39wqmi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Simon-Lin/inspire.el")
    (synopsis "an interface for inspirehep.net")
    (description
      "Documentation at https://melpa.org/#/inspire")
    (license #f)))

(define-public emacs-instapaper
  (package
    (name "emacs-instapaper")
    (version "20110419.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.carcosa.net/jmcbray/emacs-instapaper.git")
               (commit
                 "f21531bcb935e7e9b9e8df83dd0e0838adbf9b1b")))
        (sha256
          (base32
            "1ckkdkwhhyc8nwz293m18i526817gldd8br193px0hwfaxqlxadl"))))
    (build-system melpa-build-system)
    (home-page
      "htts://bitbucket.org/jfm/emacs-instapaper")
    (synopsis "No description available.")
    (description
      "Documentation at https://melpa.org/#/instapaper")
    (license #f)))

(define-public emacs-intel-hex-mode
  (package
    (name "emacs-intel-hex-mode")
    (version "20180423.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mschuldt/intel-hex-mode.git")
               (commit
                 "e83c94e1c31a8435a88b3ae395f2bc842ef83217")))
        (sha256
          (base32
            "0jpc6wh3agdh38wdjr1x880iiaj6698nr8dkgx114fsfj1la6f7v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mschuldt/intel-hex-mode")
    (synopsis "Mode for Intel Hex files.")
    (description
      "Documentation at https://melpa.org/#/intel-hex-mode")
    (license #f)))

(define-public emacs-intellij-theme
  (package
    (name "emacs-intellij-theme")
    (version "20171017.1415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fommil/emacs-intellij-theme.git")
               (commit
                 "1bbfff8e6742d18e9b77ed796f44da3b7bd10606")))
        (sha256
          (base32
            "0ml1gi2cn6h3xm5c78vxwv327r0rgimia1vqqi9jb09yb6lckbgj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Inspired by IntelliJ's default theme")
    (description
      "Documentation at https://melpa.org/#/intellij-theme")
    (license #f)))

(define-public emacs-interaction-log
  (package
    (name "emacs-interaction-log")
    (version "20160305.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/michael-heerdegen/interaction-log.el.git")
               (commit
                 "a49a06746d4df6bcfceec3c48dece065d635f9f9")))
        (sha256
          (base32
            "1vmaj14k5idx1ykkp1yl0b9qr4fimwagz7p6c00xi9klvjsx566y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/michael-heerdegen/interaction-log.el")
    (synopsis
      "exhaustive log of interactions with Emacs")
    (description
      "Documentation at https://melpa.org/#/interaction-log")
    (license #f)))

(define-public emacs-interval-list
  (package
    (name "emacs-interval-list")
    (version "20150327.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/interval-list.git")
               (commit
                 "38af7ecf0a493ad8f487074938a2a115f3531177")))
        (sha256
          (base32
            "1zv6m24ryls9hvla3hf8wzp6r7fzbxa1lzr1mb0wz0s292l38wjz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/interval-list")
    (synopsis
      "Interval list data structure for 1D selections")
    (description
      "Documentation at https://melpa.org/#/interval-list")
    (license #f)))

(define-public emacs-interval-tree
  (package
    (name "emacs-interval-tree")
    (version "20130325.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/interval-tree.git")
               (commit
                 "301302f480617091cf3ab6989caac385d52543dc")))
        (sha256
          (base32
            "0fqnn9xhrc9hkaiziafjgg288l6m05416z9kz8l5845fnqsb7pb3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/interval-tree")
    (synopsis
      "Interval tree data structure for 1D range queries")
    (description
      "Documentation at https://melpa.org/#/interval-tree")
    (license #f)))

(define-public emacs-inverse-acme-theme
  (package
    (name "emacs-inverse-acme-theme")
    (version "20210204.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dcjohnson/inverse-acme-theme.git")
               (commit
                 "79008920ce7923312ada6f95a3ec1f96ce513c0b")))
        (sha256
          (base32
            "169zsp8kd8dq8mcfzm228wm8c97rv56clsg6z8dp8aaz7nw1kxgf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/dcjohnson/inverse-acme-theme")
    (synopsis
      "A theme that looks like an inverse of Acme's color scheme.")
    (description
      "Documentation at https://melpa.org/#/inverse-acme-theme")
    (license #f)))

(define-public emacs-io-mode
  (package
    (name "emacs-io-mode")
    (version "20161004.756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/superbobry/io-mode.git")
               (commit
                 "fd65ae769093defcf554d6d637eba6e6dfc29f56")))
        (sha256
          (base32
            "1x3j4asbczfr9vrqd7bms57ngqzaik73sm2njcgjshf9c3js3aa9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/superbobry/io-mode")
    (synopsis
      "Major mode to edit Io language files in Emacs")
    (description
      "Documentation at https://melpa.org/#/io-mode")
    (license #f)))

(define-public emacs-io-mode-inf
  (package
    (name "emacs-io-mode-inf")
    (version "20140128.1934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slackorama/io-emacs.git")
               (commit
                 "6dd2bac3fd87484bb7d97e135b06c29d70b444b6")))
        (sha256
          (base32
            "1ard88kc13c57y9zdkyr012w8rdrwahz8a3fb5v6hwqymg16m20s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/slackorama/io-emacs")
    (synopsis "Interaction with an Io interpreter.")
    (description
      "Documentation at https://melpa.org/#/io-mode-inf")
    (license #f)))

(define-public emacs-iodine-theme
  (package
    (name "emacs-iodine-theme")
    (version "20151031.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/srdja/iodine-theme.git")
               (commit
                 "02fb780e1d8d8a6b9c709bfac399abe1665c6999")))
        (sha256
          (base32
            "14zfxa8fc7h4rkz1hyplwf4q2lga3l5dd7a2xq5kk0kvf2fs4mk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/srdja/iodine-theme")
    (synopsis "A light emacs color theme")
    (description
      "Documentation at https://melpa.org/#/iodine-theme")
    (license #f)))

(define-public emacs-iota
  (package
    (name "emacs-iota")
    (version "20230918.1028")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/iota-"
               version
               ".tar"))
        (sha256
          (base32
            "19bk3s53smkw28x7p05pi4zdhl7icd7dly7x4v6ig7c5757ki6cc"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~mango/iota.el")
    (synopsis
      "Replace marker with increasing integers")
    (description
      "Documentation at https://melpa.org/#/iota")
    (license #f)))

(define-public emacs-ipcalc
  (package
    (name "emacs-ipcalc")
    (version "20210903.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dotemacs/ipcalc.el.git")
               (commit
                 "8d5af5b8e075f204c1e265174c96587886831996")))
        (sha256
          (base32
            "0a7rw26ibhmlnf9jjs6kf610k566mqzjvbd9rlmpwpi8awlfflky"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/dotemacs/ipcalc.el")
    (synopsis "IP subnet calculator")
    (description
      "Documentation at https://melpa.org/#/ipcalc")
    (license #f)))

(define-public emacs-iplayer
  (package
    (name "emacs-iplayer")
    (version "20161120.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csrhodes/iplayer-el.git")
               (commit
                 "b788fffa4b36bbd558047ffa6be51b1f0f462f23")))
        (sha256
          (base32
            "0x82mxbc6f5azzg7c4zrxz1q763k8i3y1kfb79xfspb2i64dgg5g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/csrhodes/iplayer-el")
    (synopsis
      "Browse and download BBC TV/radio shows")
    (description
      "Documentation at https://melpa.org/#/iplayer")
    (license #f)))

(define-public emacs-ipp
  (package
    (name "emacs-ipp")
    (version "20230714.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emarsden/ipp-el.git")
               (commit
                 "2b9359ca49acc558fe15622f63e2d31843cdc1f5")))
        (sha256
          (base32
            "12gywh219l1vqcr691qnjrjam9hj6j7fx9x0vmfykcxwxb9krzm8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emarsden/ipp-el")
    (synopsis
      "Implementation of the Internet Printing Protocol")
    (description
      "Documentation at https://melpa.org/#/ipp")
    (license #f)))

(define-public emacs-ipretty
  (package
    (name "emacs-ipretty")
    (version "20180606.522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/ipretty.git")
               (commit
                 "042f5cc4e6f81d59115e8335c582bb5c571c2585")))
        (sha256
          (base32
            "0vk8k4zfqa0869fg1kzbzzgz65xg7six5m4jm8088pb2nvfn1lrr"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/ipretty")
    (synopsis
      "Interactive Emacs Lisp pretty-printing")
    (description
      "Documentation at https://melpa.org/#/ipretty")
    (license #f)))

(define-public emacs-ipython-shell-send
  (package
    (name "emacs-ipython-shell-send")
    (version "20190220.2246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jackkamm/ipython-shell-send-el.git")
               (commit
                 "0faed86faff02a361f23ce5fc923d0e9b09bb2da")))
        (sha256
          (base32
            "1nx92rmxgrxy9hfi7f2ny3q4zqrzy6jalr85lall7r74aifprrkv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jackkamm/ipython-shell-send-el")
    (synopsis
      "Send code (including magics) to ipython shell")
    (description
      "Documentation at https://melpa.org/#/ipython-shell-send")
    (license #f)))

(define-public emacs-iqa
  (package
    (name "emacs-iqa")
    (version "20200520.1137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/a13/iqa.el.git")
               (commit
                 "c1077aca6553cb2011f21b178e10271a17fe4f58")))
        (sha256
          (base32
            "0rr8m477hma3aaqxzmsayms6qgpf3ff1vx5bgcvbz27ddri375hh"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/a13/iqa.el")
    (synopsis
      "Init file(and directory) Quick Access")
    (description
      "Documentation at https://melpa.org/#/iqa")
    (license #f)))

(define-public emacs-ir-black-theme
  (package
    (name "emacs-ir-black-theme")
    (version "20130303.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmdeldin/ir-black-theme.el.git")
               (commit
                 "36e930d107604b5763c80294a6f92aaa02e6c272")))
        (sha256
          (base32
            "1cy9xwhswj9vahg8zr16r2crm2mm3vczqs73gc580iidasb1q1i2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Port of ir-black theme")
    (description
      "Documentation at https://melpa.org/#/ir-black-theme")
    (license #f)))

(define-public emacs-iregister
  (package
    (name "emacs-iregister")
    (version "20150515.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atykhonov/iregister.el.git")
               (commit
                 "6a48c66187289de5f300492be11c83e98410c018")))
        (sha256
          (base32
            "1ch610b3d0x3nxglp749305syliivamc108rgv9if4ihb67gp8b5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/atykhonov/iregister.el")
    (synopsis
      "Interactive register commands for Emacs.")
    (description
      "Documentation at https://melpa.org/#/iregister")
    (license #f)))

(define-public emacs-irony
  (package
    (name "emacs-irony")
    (version "20231018.1915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sarcasm/irony-mode.git")
               (commit
                 "40e0ce19eb850bdf1f77225f11713cc816250d95")))
        (sha256
          (base32
            "1w0rd74kjgda7mjbf853yavppkgzdfyw1a2hgskbqbbjii3mr1zy"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "server")))
    (home-page
      "https://github.com/Sarcasm/irony-mode")
    (synopsis "C/C++ minor mode powered by libclang")
    (description
      "Documentation at https://melpa.org/#/irony")
    (license #f)))

(define-public emacs-irony-eldoc
  (package
    (name "emacs-irony-eldoc")
    (version "20200622.2214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikirill/irony-eldoc.git")
               (commit
                 "73e79a89fad982a2ba072f2fcc1b4e41f0aa2978")))
        (sha256
          (base32
            "0nwwghsdv11bxqar4ppraxxmm6i076s7nmi9l2c53m708xn4p6pi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-irony))
    (home-page
      "https://github.com/ikirill/irony-eldoc")
    (synopsis "irony-mode support for eldoc-mode")
    (description
      "Documentation at https://melpa.org/#/irony-eldoc")
    (license #f)))

(define-public emacs-iscroll
  (package
    (name "emacs-iscroll")
    (version "20220612.310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/casouri/iscroll.git")
               (commit
                 "76aa4e7e72f907e95715351819d9efb6336b8238")))
        (sha256
          (base32
            "0hz79wfwjwvyn1rvxb3bx9kns9glds61v8n8dgcc5fyahq77r4kj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/casouri/iscroll")
    (synopsis "Smooth scrolling over images")
    (description
      "Documentation at https://melpa.org/#/iscroll")
    (license #f)))

(define-public emacs-isearch-dabbrev
  (package
    (name "emacs-isearch-dabbrev")
    (version "20141224.622")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/isearch-dabbrev.git")
               (commit
                 "1efe7abba4923015cbc2462395deaec5446a9cc8")))
        (sha256
          (base32
            "17d0816awadvsw1qc7r0p6ira75jmgxaj9hsk9ypayxsaf6ynyrb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Dewdrops/isearch-dabbrev")
    (synopsis "Use dabbrev in isearch")
    (description
      "Documentation at https://melpa.org/#/isearch-dabbrev")
    (license #f)))

(define-public emacs-isearch-project
  (package
    (name "emacs-isearch-project")
    (version "20231104.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/isearch-project.git")
               (commit
                 "b5d5d6ddbc5f636d9c1d2fb68a7950b1b3738074")))
        (sha256
          (base32
            "04iq210llgzw5hds3926dc9xbi8f4igj7r4pxj6gwgyriyg5sjaf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/jcs-elpa/isearch-project")
    (synopsis
      "Incremental search through the whole project")
    (description
      "Documentation at https://melpa.org/#/isearch-project")
    (license #f)))

(define-public emacs-isearch-symbol-at-point
  (package
    (name "emacs-isearch-symbol-at-point")
    (version "20130728.2221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/isearch-symbol-at-point.git")
               (commit
                 "51a1029bec1ec414885f9edb7e5947603dffdab2")))
        (sha256
          (base32
            "09z49850c32x0rchxg203cxg504xi2b6cjgnd0i4axcs5fmq7gv9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/re5et/isearch-symbol-at-point")
    (synopsis
      "Use isearch to search for the symbol at point")
    (description
      "Documentation at https://melpa.org/#/isearch-symbol-at-point")
    (license #f)))

(define-public emacs-isend-mode
  (package
    (name "emacs-isend-mode")
    (version "20210106.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/isend-mode.el.git")
               (commit
                 "ea855f63be7febc15bd08aec6229fab9407734fb")))
        (sha256
          (base32
            "0avxwa6d19i5fns27vwpl95f5iawm710jlnrihi5i21ndfm4mcyw"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("isend-mode.el")))
    (home-page
      "https://github.com/ffevotte/isend-mode.el")
    (synopsis
      "Interactively send parts of an Emacs buffer to an interpreter")
    (description
      "Documentation at https://melpa.org/#/isend-mode")
    (license #f)))

(define-public emacs-isgd
  (package
    (name "emacs-isgd")
    (version "20150414.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chmouel/isgd.el.git")
               (commit
                 "764306dadd5a9213799081a48aba22f7c75cca9a")))
        (sha256
          (base32
            "09hx28lmldm7z3x22a0qx34id09fdp3z61pdr61flgny213q1ach"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/chmouel/isgd.el")
    (synopsis
      "Shorten URLs using the isgd.com shortener service")
    (description
      "Documentation at https://melpa.org/#/isgd")
    (license #f)))

(define-public emacs-islisp-mode
  (package
    (name "emacs-islisp-mode")
    (version "20220924.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/islisp-mode.git")
               (commit
                 "bbf45d02495f9455e91beed01676178dfa5d3561")))
        (sha256
          (base32
            "174zjlgcikaydgx5npsbwqblzc61pxnnpw50nia8jhh8175j2sbl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("islisp-mode.el"
         "islisp-hyperdraft.el"
         ("advance" "advance/*")
         ("implementations" "implementations/*"))))
    (home-page
      "https://gitlab.com/sasanidas/islisp-mode")
    (synopsis "Major mode for ISLisp programming")
    (description
      "Documentation at https://melpa.org/#/islisp-mode")
    (license #f)))

(define-public emacs-isortify
  (package
    (name "emacs-isortify")
    (version "20230821.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/isortify.git")
               (commit
                 "96d330b44e5ea586ee69eafd40a2a58296fff902")))
        (sha256
          (base32
            "08dbzpyng7y17j1qhpjr0bv0xyz8f1kmglkbqwrizpxx5kdynjh6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pythonic))
    (home-page
      "https://github.com/proofit404/isortify")
    (synopsis
      "(automatically) format python buffers using isort")
    (description
      "Documentation at https://melpa.org/#/isortify")
    (license #f)))

(define-public emacs-ispc-mode
  (package
    (name "emacs-ispc-mode")
    (version "20201215.852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Munksgaard/ispc-mode.git")
               (commit
                 "722fdc45da2714f8fe0757968589cdb5ccacc8a0")))
        (sha256
          (base32
            "1lv15306wy34a1l3a2lq2y8lpzg1jna0rzdjbddhdanf2b0rhs83"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Munksgaard/ispc-mode")
    (synopsis "Syntax coloring for ispc programs")
    (description
      "Documentation at https://melpa.org/#/ispc-mode")
    (license #f)))

(define-public emacs-iss-mode
  (package
    (name "emacs-iss-mode")
    (version "20141001.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rasmus-toftdahl-olesen/iss-mode.git")
               (commit
                 "3b517aff31529bab33f8d7b562bd17aff0107fd1")))
        (sha256
          (base32
            "0992lzgar0kz9i1sk5vz17q9qzfgl8fkyxa1q0hmhgnpjf503cnj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Mode for InnoSetup install scripts")
    (description
      "Documentation at https://melpa.org/#/iss-mode")
    (license #f)))

(define-public emacs-itail
  (package
    (name "emacs-itail")
    (version "20171112.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/itail.git")
               (commit
                 "6e43c20da03be3b9c6ece93b7dc3495975ec1888")))
        (sha256
          (base32
            "044nzxh1hq41faxw3lix0wy78vfz304pjcaa5a11dqfz7q3gx5cv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/re5et/itail")
    (synopsis "An interactive tail mode")
    (description
      "Documentation at https://melpa.org/#/itail")
    (license #f)))

(define-public emacs-itasca
  (package
    (name "emacs-itasca")
    (version "20170601.1622")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkfurtney/itasca-emacs.git")
               (commit
                 "3d15dd1b70d6db69b0f4758a3e28b8b506cc84ca")))
        (sha256
          (base32
            "0mfcl7ka7r5mx52xvf13i3799ddkdi9sq2q4p2rkgb96r37ia221"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("itasca.el" "ac-dict" "snippets")))
    (home-page
      "http://github.com/jkfurtney/itasca-emacs/")
    (synopsis
      "Major modes for Itasca software data files.")
    (description
      "Documentation at https://melpa.org/#/itasca")
    (license #f)))

(define-public emacs-iter2
  (package
    (name "emacs-iter2")
    (version "20221104.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/iter2.git")
               (commit
                 "5ea6ba6effc4b71e7a4aed16b3f42408f9064c01")))
        (sha256
          (base32
            "0vb6xrv6dnw7x8a2iak8509zz63ss4jkxwg8mbwqgamxcvf39hc8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/doublep/iter2")
    (synopsis "Reimplementation of Elisp generators")
    (description
      "Documentation at https://melpa.org/#/iter2")
    (license #f)))

(define-public emacs-iterator
  (package
    (name "emacs-iterator")
    (version "20210109.1859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/iterator.git")
               (commit
                 "b514d4d1d0167e5973afbc93a34070d1aa967d82")))
        (sha256
          (base32
            "1xl64lz45z4s90ja96wy86qyr0xahk96v5rdvbamnfgw32kkxyh5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/iterator")
    (synopsis
      "A library to create and use elisp iterators objects.")
    (description
      "Documentation at https://melpa.org/#/iterator")
    (license #f)))

(define-public emacs-ivariants
  (package
    (name "emacs-ivariants")
    (version "20170823.224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/emacs-ivariants.git")
               (commit
                 "ca0b74d32b5d2d77a45cc6ad6edc00be0ee85284")))
        (sha256
          (base32
            "16hygfx9gla6yhc3kaiy4m6g910m1hak3v86fnpf12kzvjjs9zfx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivs-edit))
    (arguments '(#:files ("ivariants*.el" "tables")))
    (home-page
      "http://github.com/kawabata/ivariants")
    (synopsis
      "Ideographic variants editor and browser")
    (description
      "Documentation at https://melpa.org/#/ivariants")
    (license #f)))

(define-public emacs-ivs-edit
  (package
    (name "emacs-ivs-edit")
    (version "20170818.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/ivs-edit.git")
               (commit
                 "5db39c234aa7393b591168a4fd0a9a4cbbca347d")))
        (sha256
          (base32
            "1sdl83cf87zbv0ynvb6qlgbpm4d3dqhdn84jhhs5j247r5qzhmz6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files
        ("ivs-edit.el"
         "IVD_Sequences.txt"
         "jp-old-style.txt")))
    (home-page "http://github.com/kawabata/ivs-edit")
    (synopsis
      "IVS (Ideographic Variation Sequence) editing tool")
    (description
      "Documentation at https://melpa.org/#/ivs-edit")
    (license #f)))

(define-public emacs-ivy
  (package
    (name "emacs-ivy")
    (version "20231025.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "8c30f4cab5948aa8d942a3b2bbf5fb6a94d9441d")))
        (sha256
          (base32
            "1iqj27pc2iivmwfh329v0d9g0z1y0whlnamrl7g2bi374h41m368"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "doc/ivy-help.org"
          (:exclude
            "swiper.el"
            "counsel.el"
            "ivy-hydra.el"
            "ivy-avy.el"))))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Incremental Vertical completYon")
    (description
      "Documentation at https://melpa.org/#/ivy")
    (license #f)))

(define-public emacs-ivy-avy
  (package
    (name "emacs-ivy-avy")
    (version "20231025.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "8c30f4cab5948aa8d942a3b2bbf5fb6a94d9441d")))
        (sha256
          (base32
            "1iqj27pc2iivmwfh329v0d9g0z1y0whlnamrl7g2bi374h41m368"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-avy))
    (arguments '(#:files ("ivy-avy.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Avy integration for Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-avy")
    (license #f)))

(define-public emacs-ivy-bibtex
  (package
    (name "emacs-ivy-bibtex")
    (version "20210927.1205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/helm-bibtex.git")
               (commit
                 "aa775340ba691d2322948bfdc6a88158568a1399")))
        (sha256
          (base32
            "1d3mc17ga09m41i06khghlvixr6gsiacifnhdbrfnp0w5592aprk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-bibtex-completion emacs-ivy))
    (arguments '(#:files ("ivy-bibtex.el")))
    (home-page
      "https://github.com/tmalsburg/helm-bibtex")
    (synopsis "A bibliography manager based on Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-bibtex")
    (license #f)))

(define-public emacs-ivy-clipmenu
  (package
    (name "emacs-ivy-clipmenu")
    (version "20220202.2122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wpcarro/ivy-clipmenu.el.git")
               (commit
                 "7c200cd4732821187084fad23547ee3f58365062")))
        (sha256
          (base32
            "1zf0xx3j0mcyppx1a8dhx8h80xi3dxl4fsc6y9pkhrlimlz36qv6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-dash emacs-ivy))
    (home-page
      "https://github.com/wpcarro/ivy-clipmenu.el")
    (synopsis "Ivy client for clipmenu")
    (description
      "Documentation at https://melpa.org/#/ivy-clipmenu")
    (license #f)))

(define-public emacs-ivy-clojuredocs
  (package
    (name "emacs-ivy-clojuredocs")
    (version "20201129.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wandersoncferreira/ivy-clojuredocs.git")
               (commit
                 "8b6de19b3578c72d2b88f898e2290d94c04350f9")))
        (sha256
          (base32
            "1jlax3qymv8j516g319cqs8q6vq34pdrlg7mwwb2vsklynd291c5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edn emacs-ivy))
    (home-page
      "https://github.com/wandersoncferreira/ivy-clojuredocs")
    (synopsis "Search for help in clojuredocs.org")
    (description
      "Documentation at https://melpa.org/#/ivy-clojuredocs")
    (license #f)))

(define-public emacs-ivy-dired-history
  (package
    (name "emacs-ivy-dired-history")
    (version "20210715.48")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/ivy-dired-history.git")
               (commit
                 "dba848929cb063a5536cb442c70be1099e2f5baa")))
        (sha256
          (base32
            "1fkw82am49j49s0s3ql22hl9i2imypb0xkrmsgc7sr2hfsim56sd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-counsel))
    (home-page
      "https://github.com/jixiuf/ivy-dired-history")
    (synopsis "use ivy to open recent directories")
    (description
      "Documentation at https://melpa.org/#/ivy-dired-history")
    (license #f)))

(define-public emacs-ivy-emms
  (package
    (name "emacs-ivy-emms")
    (version "20210817.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/franburstall/ivy-emms.git")
               (commit
                 "dfde98c3bdad8136709eac8382ba048fafdcc6ac")))
        (sha256
          (base32
            "0h7f9yj2dx36pjqdf6n803xhv7m96xgj11hi59kh1rvr8d28pgm0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-emms))
    (home-page
      "https://github.com/franburstall/ivy-emms")
    (synopsis "Ivy interface to emms tracks")
    (description
      "Documentation at https://melpa.org/#/ivy-emms")
    (license #f)))

(define-public emacs-ivy-emoji
  (package
    (name "emacs-ivy-emoji")
    (version "20200316.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sbozzolo/ivy-emoji.git")
               (commit
                 "a1b7d32048278afd9b06536a8af96f533639d146")))
        (sha256
          (base32
            "0h3051qq6xjc7gkl2a8if9b9ak6wnlc4gmh268s8jvi0nd8dfw2z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/sbozzolo/ivy-emoji.git")
    (synopsis "Insert emojis with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-emoji")
    (license #f)))

(define-public emacs-ivy-erlang-complete
  (package
    (name "emacs-ivy-erlang-complete")
    (version "20211019.447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/s-kostyaev/ivy-erlang-complete.git")
               (commit
                 "6913f6ef7c942a5a2c42bc17635d09c91353e7ca")))
        (sha256
          (base32
            "0i06332ycky68ccnyay4c277nl227r0hvbrflswbj4g1rybfdd3q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async
            emacs-counsel
            emacs-ivy
            emacs-erlang))
    (arguments '(#:files (:defaults "bin")))
    (home-page "unspecified")
    (synopsis
      "Erlang context sensitive completion at point using ivy. It also support xref and eldoc.")
    (description
      "Documentation at https://melpa.org/#/ivy-erlang-complete")
    (license #f)))

(define-public emacs-ivy-explorer
  (package
    (name "emacs-ivy-explorer")
    (version "20190909.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clemera/ivy-explorer.git")
               (commit
                 "a413966cfbcecacc082d99297fa1abde0c10d3f3")))
        (sha256
          (base32
            "1720g8i6jq56myv8m9pnr0ab7wagsflm0jgkg7cl3av7zc90zq8r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/clemera/ivy-explorer")
    (synopsis "Dynamic file browsing grid using ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-explorer")
    (license #f)))

(define-public emacs-ivy-file-preview
  (package
    (name "emacs-ivy-file-preview")
    (version "20220704.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/ivy-file-preview.git")
               (commit
                 "3b78a194298290babd1a35ed689f333a271471b6")))
        (sha256
          (base32
            "18k03gp52qykkphh53sj4q33lbw5mhqraqp0ng0md39cwfdwrxsd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-s emacs-f))
    (home-page
      "https://github.com/jcs-elpa/ivy-file-preview")
    (synopsis
      "Preview the current ivy file selection")
    (description
      "Documentation at https://melpa.org/#/ivy-file-preview")
    (license #f)))

(define-public emacs-ivy-fuz
  (package
    (name "emacs-ivy-fuz")
    (version "20191222.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/ivy-fuz.el.git")
               (commit
                 "f171ac73422a4bae1503d63d804e691482ed35b2")))
        (sha256
          (base32
            "0ir1ighdlkh7ff1n607rwqyw2m9x9gr1ss4abdx6walajs7q3dki"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fuz emacs-ivy))
    (home-page "https://github.com/Silex/ivy-fuz.el")
    (synopsis "Integration between fuz and ivy.")
    (description
      "Documentation at https://melpa.org/#/ivy-fuz")
    (license #f)))

(define-public emacs-ivy-gitlab
  (package
    (name "emacs-ivy-gitlab")
    (version "20181228.826")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-gitlab.git")
               (commit
                 "8c2324c02119500f094c2f92dfaba4c9977ce1ba")))
        (sha256
          (base32
            "056c4fb5sj2y4h94klx2g24n1g3qdi7ifzs8ksw5v6hcj9lrkb1n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-ivy emacs-gitlab))
    (arguments '(#:files ("ivy-gitlab.el")))
    (home-page
      "https://github.com/nlamirault/emacs-gitlab")
    (synopsis "Ivy interface to Gitlab")
    (description
      "Documentation at https://melpa.org/#/ivy-gitlab")
    (license #f)))

(define-public emacs-ivy-historian
  (package
    (name "emacs-ivy-historian")
    (version "20210714.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/historian.el.git")
               (commit
                 "852cb4e72c0f78c8dbb2c972bdcb4e7b0108ff4c")))
        (sha256
          (base32
            "031624grhvv5ix3gvnd8lzpws80lb5r272yggl1k57rsayyv55ix"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-historian emacs-ivy emacs-flx))
    (arguments '(#:files ("ivy-historian.el")))
    (home-page
      "https://github.com/PythonNut/historian.el")
    (synopsis
      "Persistently store selected minibuffer candidates")
    (description
      "Documentation at https://melpa.org/#/ivy-historian")
    (license #f)))

(define-public emacs-ivy-hydra
  (package
    (name "emacs-ivy-hydra")
    (version "20231025.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "8c30f4cab5948aa8d942a3b2bbf5fb6a94d9441d")))
        (sha256
          (base32
            "1iqj27pc2iivmwfh329v0d9g0z1y0whlnamrl7g2bi374h41m368"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-hydra))
    (arguments '(#:files ("ivy-hydra.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Additional key bindings for Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-hydra")
    (license #f)))

(define-public emacs-ivy-lobsters
  (package
    (name "emacs-ivy-lobsters")
    (version "20200818.1406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julienXX/ivy-lobsters.git")
               (commit
                 "3f7f90751d15ebcf91253ef3cda18c0aa7d856ff")))
        (sha256
          (base32
            "034ln7r1fgsgpxgmk4iv08pkjkxmdc0c0q44hqv2ryb1zkbwija1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/julienXX/ivy-lobsters")
    (synopsis "Browse lobste.rs stories with ivy.")
    (description
      "Documentation at https://melpa.org/#/ivy-lobsters")
    (license #f)))

(define-public emacs-ivy-migemo
  (package
    (name "emacs-ivy-migemo")
    (version "20230121.1934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/ivy-migemo.git")
               (commit
                 "6022b24e72f073a7b5599f2dea611da3a1282378")))
        (sha256
          (base32
            "1qg60wgykxzhngzg7lw1fdmji8qrdigak9w40qrhsh70vlyssha5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-migemo))
    (home-page
      "https://github.com/ROCKTAKEY/ivy-migemo")
    (synopsis "Use migemo on ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-migemo")
    (license #f)))

(define-public emacs-ivy-mpdel
  (package
    (name "emacs-ivy-mpdel")
    (version "20190428.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpdel/ivy-mpdel.git")
               (commit
                 "a42dcc943914c71975c115195d38c739f25e475c")))
        (sha256
          (base32
            "0zf007j3i9prlsqjaf0xw7ylaim463f867nfc63fpsr508xsn5rd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-libmpdel emacs-mpdel))
    (home-page
      "https://gitlab.petton.fr/mpdel/ivy-mpdel")
    (synopsis "Ivy interface to navigate MPD")
    (description
      "Documentation at https://melpa.org/#/ivy-mpdel")
    (license #f)))

(define-public emacs-ivy-omni-org
  (package
    (name "emacs-ivy-omni-org")
    (version "20200810.1050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/ivy-omni-org.git")
               (commit
                 "a6b284f65b229d9b118b4316c2f6377de93400b1")))
        (sha256
          (base32
            "028c51z4glxxrni1vjdzs9l1475jmcjagpgwaryiqdwx6clia59x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-dash))
    (home-page
      "https://github.com/akirak/ivy-omni-org")
    (synopsis "Browse anything in Org mode")
    (description
      "Documentation at https://melpa.org/#/ivy-omni-org")
    (license #f)))

(define-public emacs-ivy-pass
  (package
    (name "emacs-ivy-pass")
    (version "20170812.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/ivy-pass.git")
               (commit
                 "5b523de1151f2109fdd6a8114d0af12eef83d3c5")))
        (sha256
          (base32
            "18crb4zh2pjf0cmv3b913m9vfng27girjwfqc3mk7vqd1r5a49yk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-password-store))
    (home-page
      "https://github.com/ecraven/ivy-pass/")
    (synopsis "ivy interface for pass")
    (description
      "Documentation at https://melpa.org/#/ivy-pass")
    (license #f)))

(define-public emacs-ivy-posframe
  (package
    (name "emacs-ivy-posframe")
    (version "20211217.234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/ivy-posframe.git")
               (commit
                 "533a8e368fcabfd534761a5c685ce713376fa594")))
        (sha256
          (base32
            "137mh0jgvkawdrv1d7w9giazz57c40n0yw2580q8zmxmv5dvkrl7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-ivy))
    (home-page
      "https://github.com/tumashu/ivy-posframe")
    (synopsis "Using posframe to show Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-posframe")
    (license #f)))

(define-public emacs-ivy-prescient
  (package
    (name "emacs-ivy-prescient")
    (version "20221216.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "72b023f5fc1ae2bbf2f51f1786cc012d40671bf4")))
        (sha256
          (base32
            "1mc9pjb80bxcmzaylfwh0sgpvwbx3h35jalznwz464hw3vqfff83"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-ivy))
    (arguments '(#:files ("ivy-prescient.el")))
    (home-page
      "https://github.com/raxod502/prescient.el")
    (synopsis "prescient.el + Ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-prescient")
    (license #f)))

(define-public emacs-ivy-purpose
  (package
    (name "emacs-ivy-purpose")
    (version "20160724.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/ivy-purpose.git")
               (commit
                 "0495f2f3aed64d7e0028125e76a9a68f8fc4107e")))
        (sha256
          (base32
            "1hiw7mnrr0cnnp0a2mh837pzdaknadwv0sk82vya6blx0a7m691g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-window-purpose))
    (home-page "https://github.com/bmag/ivy-purpose")
    (synopsis "Ivy Interface for Purpose")
    (description
      "Documentation at https://melpa.org/#/ivy-purpose")
    (license #f)))

(define-public emacs-ivy-rich
  (package
    (name "emacs-ivy-rich")
    (version "20230425.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yevgnen/ivy-rich.git")
               (commit
                 "aff9b6bd53e0fdcf350ab83c90e64e651b47dba4")))
        (sha256
          (base32
            "0fn3v6221750hk6hs5rrrr894d53ibgj3yza9rismmj321xwbrh5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page "https://github.com/Yevgnen/ivy-rich")
    (synopsis
      "More friendly display transformer for ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-rich")
    (license #f)))

(define-public emacs-ivy-rtags
  (package
    (name "emacs-ivy-rtags")
    (version "20191222.920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-rtags))
    (arguments '(#:files ("src/ivy-rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags completion back-end for ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-rtags")
    (license #f)))

(define-public emacs-ivy-searcher
  (package
    (name "emacs-ivy-searcher")
    (version "20220704.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/ivy-searcher.git")
               (commit
                 "fcaa8087a0cb9e61bedc2102f47c8b9754968288")))
        (sha256
          (base32
            "00k8xn2jclq27f7y7k5mlqxjn6x3c1jzzsz88cjrrv12ifg698s6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-searcher emacs-s emacs-f))
    (home-page
      "https://github.com/jcs-elpa/ivy-searcher")
    (synopsis "Ivy interface to use searcher")
    (description
      "Documentation at https://melpa.org/#/ivy-searcher")
    (license #f)))

(define-public emacs-ivy-spotify
  (package
    (name "emacs-ivy-spotify")
    (version "20210329.312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/jao/espotify.git")
               (commit
                 "5c1dcf0182135cda4191d4ba206fe2f265100293")))
        (sha256
          (base32
            "06wj2pixhjgqddl9g2wkv7cq9gz9yjb46cb1jrlbya3rdjyfb6h5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-espotify emacs-ivy))
    (arguments '(#:files ("ivy-spotify.el")))
    (home-page "https://codeberg.org/jao/espotify")
    (synopsis "Search spotify with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-spotify")
    (license #f)))

(define-public emacs-ivy-todo
  (package
    (name "emacs-ivy-todo")
    (version "20200323.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/ivy-todo.git")
               (commit
                 "d74501cd334b7d709659946c5e02b21cfd5507de")))
        (sha256
          (base32
            "0j9cdzr5s7zi6qf4cax8bc2jrprgaz85mfvc9cx52ryd3yn8l6g0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/Kungsgeten/ivy-todo")
    (synopsis "Manage org-mode TODOs with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-todo")
    (license #f)))

(define-public emacs-ivy-xcdoc
  (package
    (name "emacs-ivy-xcdoc")
    (version "20160917.1055")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hex2010/emacs-ivy-xcdoc.git")
               (commit
                 "5ea22af36c4c2737fb0bec53432c233482d8b314")))
        (sha256
          (base32
            "1m5ljx395yw70fx643pnf7pk709s9v5b77zvvv3j21d0cjnppqz5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/hex2010/emacs-ivy-xcdoc")
    (synopsis
      "Search Xcode documents with ivy interface.")
    (description
      "Documentation at https://melpa.org/#/ivy-xcdoc")
    (license #f)))

(define-public emacs-ivy-xref
  (package
    (name "emacs-ivy-xref")
    (version "20211008.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/ivy-xref.git")
               (commit
                 "a82e8e117d2dd62c28b6a3e3d6e4cfb11c0bda38")))
        (sha256
          (base32
            "0h4cnhfqgrzm63kfrlz2mhgsk20jkcq18gjx9pvbbhhg59xvvnaj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/alexmurray/ivy-xref")
    (synopsis "Ivy interface for xref results")
    (description
      "Documentation at https://melpa.org/#/ivy-xref")
    (license #f)))

(define-public emacs-ivy-yasnippet
  (package
    (name "emacs-ivy-yasnippet")
    (version "20200704.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkcms/ivy-yasnippet.git")
               (commit
                 "83402d91b4eba5307f71884a72df8e11cc6a994e")))
        (sha256
          (base32
            "07a4bk3hva41qzz8x4qyswa2f89psxhih89k0slhngw5d8iidx3i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy emacs-yasnippet emacs-dash))
    (home-page
      "https://github.com/mkcms/ivy-yasnippet")
    (synopsis "Preview yasnippets with ivy")
    (description
      "Documentation at https://melpa.org/#/ivy-yasnippet")
    (license #f)))

(define-public emacs-ivy-ycmd
  (package
    (name "emacs-ivy-ycmd")
    (version "20180909.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-ivy-ycmd.git")
               (commit
                 "25bfee8f676e4ecbb645e4f30b47083410a00c58")))
        (sha256
          (base32
            "1ywrkx8ddncy4qhv5gh4qf1cpapyvny42i51p91j9ip7xmihy6lm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ycmd emacs-ivy emacs-dash))
    (home-page
      "https://github.com/abingham/emacs-ivy-ycmd")
    (synopsis "Ivy interface to ycmd")
    (description
      "Documentation at https://melpa.org/#/ivy-ycmd")
    (license #f)))

(define-public emacs-ivy-youtube
  (package
    (name "emacs-ivy-youtube")
    (version "20230503.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/squiter/ivy-youtube.git")
               (commit
                 "e7a7cc860e967500857e5fd85d8e397c6d752ee1")))
        (sha256
          (base32
            "0dj7rayjvl4pixws7zc1q382jirqwrhjgfr61hq08y8kbhg0sv7c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-ivy))
    (home-page
      "https://github.com/squiter/ivy-youtube")
    (synopsis
      "Query YouTube and play videos in your browser")
    (description
      "Documentation at https://melpa.org/#/ivy-youtube")
    (license #f)))

(define-public emacs-ix
  (package
    (name "emacs-ix")
    (version "20131027.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theanalyst/ix.el.git")
               (commit
                 "aea4c54a5cc5a6f26637353c16a3a0e70fc76963")))
        (sha256
          (base32
            "069alh9vs6is3hvbwxbwr9g8qq9md5c92wg5bfswi99yciqdvc4i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grapnel))
    (home-page
      "http://www.github.com/theanalyst/ix.el")
    (synopsis
      "Emacs client for http://ix.io pastebin")
    (description
      "Documentation at https://melpa.org/#/ix")
    (license #f)))

(define-public emacs-j-mode
  (package
    (name "emacs-j-mode")
    (version "20171224.1856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellio/j-mode.git")
               (commit
                 "e8725ac8af95498faabb2ca3ab3bd809a8f148e6")))
        (sha256
          (base32
            "0icrwny3cif0iwgyf9i25sj9i5gy056cn9ic2wwwbzqjqb4xg6dd"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zellio/j-mode")
    (synopsis "Major mode for editing J programs")
    (description
      "Documentation at https://melpa.org/#/j-mode")
    (license #f)))

(define-public emacs-jabber
  (package
    (name "emacs-jabber")
    (version "20230715.456")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/jabber-"
               version
               ".tar"))
        (sha256
          (base32
            "1i27vi1d2xyx6winplihfdxcg94g9mip2yjj4nc5h3zfhibn4dp8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fsm emacs-srv))
    (home-page
      "https://codeberg.org/emacs-jabber/emacs-jabber")
    (synopsis "A Jabber client for Emacs.")
    (description
      "Documentation at https://melpa.org/#/jabber")
    (license #f)))

(define-public emacs-jack
  (package
    (name "emacs-jack")
    (version "20221122.632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonyaldon/jack.git")
               (commit
                 "3b4ea97fcc107d0ffd201ea695129af52f390113")))
        (sha256
          (base32
            "1cizszj62ic41zc97glf2mdvm1kd95vdfg2dip3n2p2g0nlk2hjf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tonyaldon/jack")
    (synopsis "HTML generator library")
    (description
      "Documentation at https://melpa.org/#/jack")
    (license #f)))

(define-public emacs-jack-connect
  (package
    (name "emacs-jack-connect")
    (version "20220201.1417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/sbarbit/jack-connect")
               (commit
                 "1acaebfe8f37f0194e95c3e812c9515a6f688eee")))
        (sha256
          (base32
            "1f55fkmhs4vjjsvf4mvhmqp7qjjl0m2qdgz2gbrkgx45v8hzzyx0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Manage jack connections within Emacs")
    (description
      "Documentation at https://melpa.org/#/jack-connect")
    (license #f)))

(define-public emacs-jade-mode
  (package
    (name "emacs-jade-mode")
    (version "20210908.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit
                 "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32
            "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("jade-mode.el")))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "Major mode for editing .jade files")
    (description
      "Documentation at https://melpa.org/#/jade-mode")
    (license #f)))

(define-public emacs-jami-bot
  (package
    (name "emacs-jami-bot")
    (version "20230416.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/hperrey/jami-bot.git")
               (commit
                 "21673c5844f9a1ea9ba49f1a68c72b1fe7cb9f91")))
        (sha256
          (base32
            "0l3vcki9d2hl2md2iwgiwq0487v416ffk6y24r2nf2yx07bvrqys"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/hperrey/jami-bot")
    (synopsis
      "An extendable chat bot for the private messenger GNU Jami")
    (description
      "Documentation at https://melpa.org/#/jami-bot")
    (license #f)))

(define-public emacs-jammer
  (package
    (name "emacs-jammer")
    (version "20210508.1633")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/jammer-"
               version
               ".el"))
        (sha256
          (base32
            "1m4mc941xk74lvyycav5590mwjvsxds0hp85wgcj8hy5w28h0gzi"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/jammer")
    (synopsis
      "Punish yourself for using Emacs inefficiently")
    (description
      "Documentation at https://melpa.org/#/jammer")
    (license #f)))

(define-public emacs-janet-mode
  (package
    (name "emacs-janet-mode")
    (version "20210924.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ALSchwalm/janet-mode.git")
               (commit
                 "9e3254a0249d720d5fa5603f1f8c3ed0612695af")))
        (sha256
          (base32
            "1c95znizd2xs84ggk70qy0lya8s6w83d0d2fl95iccj37r12m00y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ALSchwalm/janet-mode")
    (synopsis "Defines a major mode for Janet")
    (description
      "Documentation at https://melpa.org/#/janet-mode")
    (license #f)))

(define-public emacs-japanese-holidays
  (package
    (name "emacs-japanese-holidays")
    (version "20201229.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/japanese-holidays.git")
               (commit
                 "324b6bf2f55ec050bef49e001caedaabaf4fa35d")))
        (sha256
          (base32
            "1bxbxczsf0b7jiim2anjh16h243khyrcv4k07qg0yy8c9zrl18aq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-jp/japanese-holidays")
    (synopsis
      "Calendar functions for the Japanese calendar")
    (description
      "Documentation at https://melpa.org/#/japanese-holidays")
    (license #f)))

(define-public emacs-jape-mode
  (package
    (name "emacs-jape-mode")
    (version "20140903.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tanzoniteblack/jape-mode.git")
               (commit
                 "85b9182850707b5d107391f6caee5bd401507a7d")))
        (sha256
          (base32
            "0xmv7gw5xms6nhjcl51cw33yvjgw0c6bpnlyca3195x7g34sg1zj"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/tanzoniteblack/jape-mode")
    (synopsis
      "An Emacs editing mode mode for GATE's JAPE files")
    (description
      "Documentation at https://melpa.org/#/jape-mode")
    (license #f)))

(define-public emacs-jar-manifest-mode
  (package
    (name "emacs-jar-manifest-mode")
    (version "20160501.26")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/omajid/jar-manifest-mode.git")
               (commit
                 "270dae14c481300f75ed96dad3a5ae42ca928a1d")))
        (sha256
          (base32
            "1p7w3hq2cyn1245q0zn8m7hpjs8nbp7kqfmd2gzi2k209czipy21"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/omajid/jar-manifest-mode")
    (synopsis
      "Major mode to edit JAR manifest files")
    (description
      "Documentation at https://melpa.org/#/jar-manifest-mode")
    (license #f)))

(define-public emacs-jasminejs-mode
  (package
    (name "emacs-jasminejs-mode")
    (version "20150527.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stoltene2/jasminejs-mode.git")
               (commit
                 "9f8044bf81ab5b4841a30b0bd099916e1b7ff54a")))
        (sha256
          (base32
            "1zcrxijcwqfs6r1cd6w4jq8g3ly0a69nf0cbx93w5v86x2kjpz0l"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("jasminejs-mode.el" "snippets/jasminejs-mode")))
    (home-page
      "https://github.com/stoltene2/jasminejs-mode")
    (synopsis
      "A minor mode for manipulating jasmine test files")
    (description
      "Documentation at https://melpa.org/#/jasminejs-mode")
    (license #f)))

(define-public emacs-jastadd-ast-mode
  (package
    (name "emacs-jastadd-ast-mode")
    (version "20200926.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rudi/jastadd-ast-mode.git")
               (commit
                 "b7a0e32b669e726c8ccc348dd6b18ad4a7c70e1b")))
        (sha256
          (base32
            "1669lchqh07pd5c0b2xv8230dz0189hdn86vm37x8hnv8l742jg6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rudi/jastadd-ast-mode")
    (synopsis
      "Major mode for editing JastAdd AST files")
    (description
      "Documentation at https://melpa.org/#/jastadd-ast-mode")
    (license #f)))

(define-public emacs-java-imports
  (package
    (name "emacs-java-imports")
    (version "20230713.2247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakrone/emacs-java-imports.git")
               (commit
                 "1489813795ecd061896e265720709040bd90d96f")))
        (sha256
          (base32
            "074d9mf1sq12c8nadlbdf59dkx349ww7nbqbj2h3jp1vql7yzx98"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-pcache))
    (home-page
      "http://www.github.com/dakrone/emacs-java-imports")
    (synopsis "Code for dealing with Java imports")
    (description
      "Documentation at https://melpa.org/#/java-imports")
    (license #f)))

(define-public emacs-java-snippets
  (package
    (name "emacs-java-snippets")
    (version "20160627.252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nekop/yasnippet-java-mode.git")
               (commit
                 "6d0e2768823be27dbe07448f4cb244cd657a7136")))
        (sha256
          (base32
            "1mgpb7g28ppbrl6sbyyswz9brrx8b7xjxmv576ija2qlh3whv5gs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "https://github.com/nekop/yasnippet-java-mode")
    (synopsis "Yasnippets for Java")
    (description
      "Documentation at https://melpa.org/#/java-snippets")
    (license #f)))

(define-public emacs-javadoc-lookup
  (package
    (name "emacs-javadoc-lookup")
    (version "20160214.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/javadoc-lookup.git")
               (commit
                 "507a2dd443d60b537b8f779c1847e2cd0ccd1382")))
        (sha256
          (base32
            "16gywcma1s8kslwznlxwlx0xj0gs5g31637kb74vfdplk48f04zj"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" ("webcache" "webcache/*"))))
    (home-page
      "https://github.com/skeeto/javadoc-lookup")
    (synopsis "Javadoc Emacs integration with Maven")
    (description
      "Documentation at https://melpa.org/#/javadoc-lookup")
    (license #f)))

(define-public emacs-javap-mode
  (package
    (name "emacs-javap-mode")
    (version "20120223.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hiredman/javap-mode.git")
               (commit
                 "864c1130e204b2072e1d19cd027b6fce8ebe6629")))
        (sha256
          (base32
            "070r4mg4v937n4h2bmzdbn3vsmmq7ijz69nankqs761jxv5gcwlg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/hiredman/javap-mode")
    (synopsis "Javap major mode")
    (description
      "Documentation at https://melpa.org/#/javap-mode")
    (license #f)))

(define-public emacs-jaword
  (package
    (name "emacs-jaword")
    (version "20210306.420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/jaword.git")
               (commit
                 "783544a265f91b2e568b52311afb36e3691d5ad3")))
        (sha256
          (base32
            "09gn08c9wz60jc8jh5y3bv7qymp0ciz62bk5sjwkwgnq5mkpsf49"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tinysegmenter))
    (home-page "http://zk-phi.github.io/")
    (synopsis
      "Minor-mode for handling Japanese words better")
    (description
      "Documentation at https://melpa.org/#/jaword")
    (license #f)))

(define-public emacs-jazz-theme
  (package
    (name "emacs-jazz-theme")
    (version "20230814.1916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/donderom/jazz-theme.git")
               (commit
                 "b936b392e3ea3b6968530e3d5e5fccb9c454b5f8")))
        (sha256
          (base32
            "19gkn5i685nyzgbapfkwgyyl9av2qlgpa0r8kwnvp1ynsgl4jlxm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/donderom/jazz-theme")
    (synopsis "A warm color theme for Emacs 24+.")
    (description
      "Documentation at https://melpa.org/#/jazz-theme")
    (license #f)))

(define-public emacs-jbeans-theme
  (package
    (name "emacs-jbeans-theme")
    (version "20200924.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/synic/jbeans-emacs.git")
               (commit
                 "a63916a928324c42bfbe3016972c2ecff598b1ae")))
        (sha256
          (base32
            "1kw5czn7ddzhjhdhb8jpqbd2ha8s68fkk4m4iir09wnqdg6icvl8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/synic/jbeans-emacs")
    (synopsis
      "Jbeans theme for GNU Emacs 24 (deftheme)")
    (description
      "Documentation at https://melpa.org/#/jbeans-theme")
    (license #f)))

(define-public emacs-jdecomp
  (package
    (name "emacs-jdecomp")
    (version "20170224.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xiongtx/jdecomp.git")
               (commit
                 "692866abc83deedce62be8d6040cf24dda7fb7a8")))
        (sha256
          (base32
            "00l6mc643na97jrb0k595kwmfg8wc7m5iqjd9l9vvf3dal6389b8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xiongtx/jdecomp")
    (synopsis "Interface to Java decompilers")
    (description
      "Documentation at https://melpa.org/#/jdecomp")
    (license #f)))

(define-public emacs-jdee
  (package
    (name "emacs-jdee")
    (version "20191102.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdee-emacs/jdee.git")
               (commit
                 "b510a29f1fc1bea218a6230fb219922775687c78")))
        (sha256
          (base32
            "0c0jfi3gg85ccid7h9ll0a160lsjb11wxqncs4qnz75d3npmgsw9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-memoize
            emacs-dash
            emacs-s))
    (arguments '(#:files (:defaults "jdee-test.el")))
    (home-page "http://github.com/jdee-emacs/jdee")
    (synopsis
      "Java Development Environment for Emacs")
    (description
      "Documentation at https://melpa.org/#/jdee")
    (license #f)))

(define-public emacs-jedi
  (package
    (name "emacs-jedi")
    (version "20191011.1750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi.git")
               (commit
                 "e942a0e410cbb2a214c9cb30aaf0e47eb0895b78")))
        (sha256
          (base32
            "1c4nqgg1w2qv0mhpi6hhz3xr5kk4bbxc951fhik6dpi2c2w8p73s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-jedi-core emacs-auto-complete))
    (arguments '(#:files ("jedi.el")))
    (home-page "unspecified")
    (synopsis "a Python auto-completion for Emacs")
    (description
      "Documentation at https://melpa.org/#/jedi")
    (license #f)))

(define-public emacs-jedi-core
  (package
    (name "emacs-jedi-core")
    (version "20210503.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi.git")
               (commit
                 "e942a0e410cbb2a214c9cb30aaf0e47eb0895b78")))
        (sha256
          (base32
            "1c4nqgg1w2qv0mhpi6hhz3xr5kk4bbxc951fhik6dpi2c2w8p73s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-epc emacs-python-environment))
    (arguments
      '(#:files
        ("jedi-core.el"
         "jediepcserver.py"
         "Makefile"
         "setup.py")))
    (home-page "unspecified")
    (synopsis
      "Common code of jedi.el and company-jedi.el")
    (description
      "Documentation at https://melpa.org/#/jedi-core")
    (license #f)))

(define-public emacs-jedi-direx
  (package
    (name "emacs-jedi-direx")
    (version "20140310.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-jedi-direx.git")
               (commit
                 "7a2e677400717ed12b959cb5988e7b3fb1c12117")))
        (sha256
          (base32
            "1pgi5vnwz5agrpvy7nwg3gv2nfbbmimhk8dxkg81k6yf1iiqxcap"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jedi emacs-direx))
    (home-page "unspecified")
    (synopsis
      "Tree style source code viewer for Python buffer")
    (description
      "Documentation at https://melpa.org/#/jedi-direx")
    (license #f)))

(define-public emacs-jeison
  (package
    (name "emacs-jeison")
    (version "20190721.1651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SavchenkoValeriy/jeison.git")
               (commit
                 "66e276c1f2f08ca54d2cd60f2c9f974c662aae8b")))
        (sha256
          (base32
            "11k0g077893pd831vbkyiakmvkxzcwgr1g6inx10cscl0yvciq62"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/SavchenkoValeriy/jeison")
    (synopsis
      "A library for declarative JSON parsing")
    (description
      "Documentation at https://melpa.org/#/jeison")
    (license #f)))

(define-public emacs-jekyll-modes
  (package
    (name "emacs-jekyll-modes")
    (version "20141117.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fred-o/jekyll-modes.git")
               (commit
                 "7cb10b50fd2883e3f7b10fdfd98f19f2f0b2381c")))
        (sha256
          (base32
            "0rx72rid7922mhw21j85kxmx0fhpkmkv9jvxmj9izy01xnjbk00c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/fred-o/jekyll-modes")
    (synopsis
      "Major modes (markdown and HTML) for authoring Jekyll content")
    (description
      "Documentation at https://melpa.org/#/jekyll-modes")
    (license #f)))

(define-public emacs-jemdoc-mode
  (package
    (name "emacs-jemdoc-mode")
    (version "20170704.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drdv/jemdoc-mode.git")
               (commit
                 "529b4d4681e1198b9892f340fdd6c3f1592a047a")))
        (sha256
          (base32
            "1f8nn8mv18q3x3k32i6kjis9f3g1ybdjcfaw8hywqwy6k8dr734m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/drdv/jemdoc-mode")
    (synopsis "Major mode for editing jemdoc files")
    (description
      "Documentation at https://melpa.org/#/jemdoc-mode")
    (license #f)))

(define-public emacs-jenkins
  (package
    (name "emacs-jenkins")
    (version "20200524.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmuslimov/jenkins.el.git")
               (commit
                 "bd06cdc57c0cb9217d773eeba06ecc998f10033b")))
        (sha256
          (base32
            "0g99bi3i27ay8xhz409k9ska9yy77j3k687l817k1fyhlyy5lpjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Minimalistic Jenkins client for Emacs")
    (description
      "Documentation at https://melpa.org/#/jenkins")
    (license #f)))

(define-public emacs-jenkins-watch
  (package
    (name "emacs-jenkins-watch")
    (version "20121004.2326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ataylor284/jenkins-watch.git")
               (commit
                 "37b84dfbd98240a57ff798e1ff8bc7dba2913577")))
        (sha256
          (base32
            "0jayhv8j7b527dimhvcs0d7ax25x7v50dk0k6apisqc23psvkq66"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ataylor284/jenkins-watch")
    (synopsis
      "Watch continuous integration build status")
    (description
      "Documentation at https://melpa.org/#/jenkins-watch")
    (license #f)))

(define-public emacs-jenkinsfile-mode
  (package
    (name "emacs-jenkinsfile-mode")
    (version "20230525.2006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/jenkinsfile-mode.git")
               (commit
                 "568865ee419e0592de0dd0717d6769a66d9df111")))
        (sha256
          (base32
            "1hphhahqm65ds4vr2qpa3fsj9ijf7kfaj8jbhzc2q46dakwasibd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-groovy-mode))
    (home-page
      "https://github.com/john2x/jenkinsfile-mode")
    (synopsis
      "Major mode for editing Jenkins declarative pipeline syntax")
    (description
      "Documentation at https://melpa.org/#/jenkinsfile-mode")
    (license #f)))

(define-public emacs-jest
  (package
    (name "emacs-jest")
    (version "20220807.2243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Emiller88/emacs-jest.git")
               (commit
                 "c8145635c54bd7df9711000e889753d267afcdc4")))
        (sha256
          (base32
            "1b6mrr2vjbgmicxfbibysqllgbp09clxszppk9j0284ja6w2avmj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-magit-popup
            emacs-projectile
            emacs-s
            emacs-js2-mode))
    (home-page
      "https://github.com/emiller88/emacs-jest/")
    (synopsis "helpers to run jest")
    (description
      "Documentation at https://melpa.org/#/jest")
    (license #f)))

(define-public emacs-jest-test-mode
  (package
    (name "emacs-jest-test-mode")
    (version "20220722.1947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rymndhng/jest-test-mode.git")
               (commit
                 "3126c5c5c5632da639ea34867a7342d4410d78aa")))
        (sha256
          (base32
            "16cfikwzysng8wm1ihs5dhv59dx5rz85fx9d57dba87gcs0bsvdf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rymndhng/jest-test-mode.el")
    (synopsis
      "Minor mode for running Node.js tests using jest")
    (description
      "Documentation at https://melpa.org/#/jest-test-mode")
    (license #f)))

(define-public emacs-jet
  (package
    (name "emacs-jet")
    (version "20230525.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericdallo/jet.el.git")
               (commit
                 "7d5157aac692fc761d8ed7a9f820fa6522136254")))
        (sha256
          (base32
            "14pilmpa8bp93w5apybgxid0xjn2fyybnf6wjsz3nv7kks50k7mq"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ericdallo/jet.el")
    (synopsis
      "Emacs integration for jet Clojure tool")
    (description
      "Documentation at https://melpa.org/#/jet")
    (license #f)))

(define-public emacs-jetbrains
  (package
    (name "emacs-jetbrains")
    (version "20180301.502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/jetbrains.el.git")
               (commit
                 "56f71a17d455581c10d48f6dbb31d9e2126227bf")))
        (sha256
          (base32
            "0v948k7xjm66px20ad331pskc7svpcrcffh3hbkjsksd4k0pggds"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/emacs-php/jetbrains.el")
    (synopsis "JetBrains IDE bridge")
    (description
      "Documentation at https://melpa.org/#/jetbrains")
    (license #f)))

(define-public emacs-jetbrains-darcula-theme
  (package
    (name "emacs-jetbrains-darcula-theme")
    (version "20230223.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianyepan/jetbrains-darcula-emacs-theme.git")
               (commit
                 "46f153385e50998826ca13e18056c6a972768cfd")))
        (sha256
          (base32
            "1qpjipigq320ri48ah8mnl7lq4hf8drk5lnpqr4csa7cgi83md6l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianpan870102/jetbrains-darcula-emacs-theme")
    (synopsis
      "A complete port of the default JetBrains Darcula theme")
    (description
      "Documentation at https://melpa.org/#/jetbrains-darcula-theme")
    (license #f)))

(define-public emacs-jg-quicknav
  (package
    (name "emacs-jg-quicknav")
    (version "20170809.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeffgran/jg-quicknav.git")
               (commit
                 "c8d53e774d63e68a944092c08a026b57da741038")))
        (sha256
          (base32
            "0rdrryfppgj5smrds5gyyhc4z8x36aq3gxdpckq80rbl4s729chy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/jeffgran/jg-quicknav")
    (synopsis
      "Quickly navigate the file system to find a file.")
    (description
      "Documentation at https://melpa.org/#/jg-quicknav")
    (license #f)))

(define-public emacs-jinja2-mode
  (package
    (name "emacs-jinja2-mode")
    (version "20220117.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paradoxxxzero/jinja2-mode.git")
               (commit
                 "03e5430a7efe1d163a16beaf3c82c5fd2c2caee1")))
        (sha256
          (base32
            "1szcx2fbcdhdpfxwd3hp3snizjmasn5qazh7ygiv73if90airah2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A major mode for jinja2")
    (description
      "Documentation at https://melpa.org/#/jinja2-mode")
    (license #f)))

(define-public emacs-jinx
  (package
    (name "emacs-jinx")
    (version "20231104.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/jinx.git")
               (commit
                 "6f6108896744d1da4887b08e4fe4fff403ac10ac")))
        (sha256
          (base32
            "0jf9p75r13p28n1kv9w85kk9n3nfp4d8p34y76n3rqhh3sib2asg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files
        (:defaults "jinx-mod.c" "emacs-module.h")))
    (home-page "https://github.com/minad/jinx")
    (synopsis "Enchanted Spell Checker")
    (description
      "Documentation at https://melpa.org/#/jinx")
    (license #f)))

(define-public emacs-jira-markup-mode
  (package
    (name "emacs-jira-markup-mode")
    (version "20150601.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mnuessler/jira-markup-mode.git")
               (commit
                 "4fc534c47df26a2f402bf835ebe2ed89474a4062")))
        (sha256
          (base32
            "1ack7dmapva3wc2gm22prd5wd3cmq19sl4xl9f04a3nk2msr6ksx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mnuessler/jira-markup-mode")
    (synopsis
      "Emacs Major mode for JIRA-markup-formatted text files")
    (description
      "Documentation at https://melpa.org/#/jira-markup-mode")
    (license #f)))

(define-public emacs-jiralib2
  (package
    (name "emacs-jiralib2")
    (version "20200520.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nyyManni/jiralib2.git")
               (commit
                 "c21c4e759eff549dbda11099f2f680b78d7f5a01")))
        (sha256
          (base32
            "0yrcc9yfz9gxkhizy03bpysl1wcdbk0m6fj9hkqw3kbgnsk25h4p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash))
    (home-page
      "https://github.com/nyyManni/jiralib2")
    (synopsis "JIRA REST API bindings to Elisp")
    (description
      "Documentation at https://melpa.org/#/jiralib2")
    (license #f)))

(define-public emacs-jist
  (package
    (name "emacs-jist")
    (version "20161229.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/jist.el.git")
               (commit
                 "da0692452e312a99bb27d8708504b521798aca48")))
        (sha256
          (base32
            "13dic7bmj7a8vvjz47s1fnz8p5m22d2m2h2vlkmlq7322qwxxw6p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-magit emacs-request))
    (home-page "https://github.com/emacs-pe/jist.el")
    (synopsis "Gist integration")
    (description
      "Documentation at https://melpa.org/#/jist")
    (license #f)))

(define-public emacs-jit-lock-stealth-progress
  (package
    (name "emacs-jit-lock-stealth-progress")
    (version "20230808.1342")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/jit-lock-stealth-progress-"
               version
               ".tar"))
        (sha256
          (base32
            "045fmyfby32i4vfzkby3ymh5c9hf2wv0l6zxrhb2fw8cvd0ndydh"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-jit-lock-stealth-progress")
    (synopsis "JIT lock stealth mode-line progress")
    (description
      "Documentation at https://melpa.org/#/jit-lock-stealth-progress")
    (license #f)))

(define-public emacs-jknav
  (package
    (name "emacs-jknav")
    (version "20121006.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aculich/jknav.el.git")
               (commit
                 "861245715c728503dad6573278fdd75c271dbf8b")))
        (sha256
          (base32
            "1idby2rjkslw85593qd4zy6an9zz71yzwqc6rck57r54xyfs8mij"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatically enable j/k keys for line-based navigation")
    (description
      "Documentation at https://melpa.org/#/jknav")
    (license #f)))

(define-public emacs-jmt-mode
  (package
    (name "emacs-jmt-mode")
    (version "20230519.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Michael-Allan/Java_Mode_Tamed.git")
               (commit
                 "b5b969f23d4cda1f70107db79a112e802951ce30")))
        (sha256
          (base32
            "13dgahlpb19f3d24vrn51s2kccpjbwrfnfmlgpkfvvh3g6gk80qs"))))
    (build-system melpa-build-system)
    (home-page "http://reluk.ca/project/Java/Emacs/")
    (synopsis "Java Mode Tamed")
    (description
      "Documentation at https://melpa.org/#/jmt-mode")
    (license #f)))

(define-public emacs-jonprl-mode
  (package
    (name "emacs-jonprl-mode")
    (version "20160819.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/jonprl-mode.git")
               (commit
                 "6059bb64891fae45827174e044d6a87ac07172d8")))
        (sha256
          (base32
            "0v4xiq3xf7c52rmyymw8a4ws85ij0xy7pr7625gf15359cs5chs9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files (:defaults "jonprl-icon.png")))
    (home-page "unspecified")
    (synopsis
      "A major mode for editing JonPRL files")
    (description
      "Documentation at https://melpa.org/#/jonprl-mode")
    (license #f)))

(define-public emacs-journalctl-mode
  (package
    (name "emacs-journalctl-mode")
    (version "20231105.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SebastianMeisel/journalctl-mode.git")
               (commit
                 "7f58e205a44f06d0ee2ee49f5d3667f8677e57d2")))
        (sha256
          (base32
            "0lvba3w7y635r24giwmipbnrlnrnj361kkpai10k4cid90f3wwyg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/SebastianMeisel/journalctl-mode")
    (synopsis
      "Sample major mode for  viewing output journalctl")
    (description
      "Documentation at https://melpa.org/#/journalctl-mode")
    (license #f)))

(define-public emacs-jpop
  (package
    (name "emacs-jpop")
    (version "20170410.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/jpop.el.git")
               (commit
                 "7628b03260be96576b34459d45959ee77d8b2110")))
        (sha256
          (base32
            "1x7qha7xyn2j225h7axhskngc8icjhgm3f451iq3qysj22q8g4d6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files (:defaults "create-file-alist.py")))
    (home-page "https://github.com/domtronn/jpop.el")
    (synopsis
      "Lightweight project caching and navigation framework")
    (description
      "Documentation at https://melpa.org/#/jpop")
    (license #f)))

(define-public emacs-jq-format
  (package
    (name "emacs-jq-format")
    (version "20190428.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-jq-format.git")
               (commit
                 "47e1c5adb89b37b4d53fe01302d8c675913c20e7")))
        (sha256
          (base32
            "1g9chp1b3lkrg46b39swrkvp5willi0ay3i177jdp6knbzhj4mq3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/wbolster/emacs-jq-format")
    (synopsis "Reformat JSON and JSONLines using jq")
    (description
      "Documentation at https://melpa.org/#/jq-format")
    (license #f)))

(define-public emacs-jq-mode
  (package
    (name "emacs-jq-mode")
    (version "20230823.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ljos/jq-mode.git")
               (commit
                 "4d9e98e21642007bc32ba75a5c259760f1fcf451")))
        (sha256
          (base32
            "1jifbpa1wgljrzxyg93dhzcxrfmlnxnwlrgfs6627wl4sijh0msi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ljos/jq-mode")
    (synopsis "Edit jq scripts.")
    (description
      "Documentation at https://melpa.org/#/jq-mode")
    (license #f)))

(define-public emacs-jq-ts-mode
  (package
    (name "emacs-jq-ts-mode")
    (version "20231025.2319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/jq-ts-mode.git")
               (commit
                 "b1abef71843dd99349133a75245804aee503c05d")))
        (sha256
          (base32
            "0xjmpk33rhqlw5f9qjhmyc057l8rbrrzhz460zsljx2wm11cvp6d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nverno/jq-ts-mode")
    (synopsis "Tree-sitter support for jq buffers")
    (description
      "Documentation at https://melpa.org/#/jq-ts-mode")
    (license #f)))

(define-public emacs-jquery-doc
  (package
    (name "emacs-jquery-doc")
    (version "20150812.758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/jquery-doc.el.git")
               (commit
                 "24032284919b942ec27707d929bdd8bf48420062")))
        (sha256
          (base32
            "0gh2bgmsbi9lby89ssvl49kpz07jqrfnyg47g6b9xmf5rw42s1z9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "jQuery api documentation interface for emacs")
    (description
      "Documentation at https://melpa.org/#/jquery-doc")
    (license #f)))

(define-public emacs-js-auto-beautify
  (package
    (name "emacs-js-auto-beautify")
    (version "20161031.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Qquanwei/auto-beautify.el.git")
               (commit
                 "180d15af7b5dfaab4ee1954cca2fdc797932f9de")))
        (sha256
          (base32
            "0xwkjq41v32dqc5gq8hcmcvdjg2y38xq6hkw5pja0kyvyk92c82d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-beautify emacs-web-mode))
    (home-page "unspecified")
    (synopsis "auto format you js/jsx file")
    (description
      "Documentation at https://melpa.org/#/js-auto-beautify")
    (license #f)))

(define-public emacs-js-auto-format-mode
  (package
    (name "emacs-js-auto-format-mode")
    (version "20180807.1352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ybiquitous/js-auto-format-mode.git")
               (commit
                 "516abed166d687aa8b197973315bd6ea0900fb62")))
        (sha256
          (base32
            "0l0hk6lfn6rvfxjmnkyigc0qqh6k1jbfg4i3g2s2d994hihdynhp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ybiquitous/js-auto-format-mode")
    (synopsis
      "Minor mode for auto-formatting JavaScript code")
    (description
      "Documentation at https://melpa.org/#/js-auto-format-mode")
    (license #f)))

(define-public emacs-js-codemod
  (package
    (name "emacs-js-codemod")
    (version "20190921.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/torgeir/js-codemod.el.git")
               (commit
                 "056bdf3e5e0c807b8cf17edb5834179a90fb722b")))
        (sha256
          (base32
            "1s87jy1v7vjqpl09w2lafhliqhc5hm9061n7f2gfiw0hhv1xp6bw"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "replace")))
    (home-page "unspecified")
    (synopsis
      "Run js-codemod on current sentence or selected region")
    (description
      "Documentation at https://melpa.org/#/js-codemod")
    (license #f)))

(define-public emacs-js-comint
  (package
    (name "emacs-js-comint")
    (version "20230311.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/js-comint.git")
               (commit
                 "b788bf5d57ad6b902c4096b666c6d78ceff7c116")))
        (sha256
          (base32
            "0si03p6xw0ljxc6rkl2v789z4syqpnswaw6ql29g4f3qykav5xy2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/redguardtoo/js-comint")
    (synopsis "JavaScript interpreter in window.")
    (description
      "Documentation at https://melpa.org/#/js-comint")
    (license #f)))

(define-public emacs-js-doc
  (package
    (name "emacs-js-doc")
    (version "20160715.434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/js-doc.git")
               (commit
                 "f0606e89d5aa89146f96edb38cf69af0068a9d1e")))
        (sha256
          (base32
            "1ffayl6hca9zanbznh6rkql7fbr53id1lyrj2vllx8zakfac4dyv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mooz/js-doc")
    (synopsis "Insert JsDoc style comment easily")
    (description
      "Documentation at https://melpa.org/#/js-doc")
    (license #f)))

(define-public emacs-js-format
  (package
    (name "emacs-js-format")
    (version "20170119.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/futurist/js-format.el.git")
               (commit
                 "544bda9be72b74ec2d442543ba60cff727d96669")))
        (sha256
          (base32
            "18wr2z2w2fqgy51f5m5izrnywarxn6w4qs04lsgbwlsc6ahpwwpf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (arguments
      '(#:files (:defaults "*.js" "*.json" "styles")))
    (home-page
      "http://github.com/futurist/js-format.el")
    (synopsis
      "Format or transform code style using NodeJS server with different javascript formatter")
    (description
      "Documentation at https://melpa.org/#/js-format")
    (license #f)))

(define-public emacs-js-import
  (package
    (name "emacs-js-import")
    (version "20230131.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jakoblind/js-import.git")
               (commit
                 "9f8b6bc4f080c7146ce7ee5dd5a6572aeb6f1cc7")))
        (sha256
          (base32
            "1nlcfqy4wciai7g9zdjy4lx50dipv6yq74fladgsw7yq98hpg501"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-projectile emacs-dash))
    (home-page
      "https://github.com/jakoblind/js-import")
    (synopsis
      "Import Javascript files from your current project or dependencies")
    (description
      "Documentation at https://melpa.org/#/js-import")
    (license #f)))

(define-public emacs-js-react-redux-yasnippets
  (package
    (name "emacs-js-react-redux-yasnippets")
    (version "20200316.1144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sooqua/js-react-redux-yasnippets.git")
               (commit
                 "9f509043f01fa59bff4daf31b2e95d63f8deab4a")))
        (sha256
          (base32
            "00icd76y7sp3cby6n1mkxma4h6aqkrq6cqsnbqrpsgq99qqy30my"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "https://github.com/sooqua/js-react-redux-yasnippets")
    (synopsis "JavaScript,React,Redux yasnippets")
    (description
      "Documentation at https://melpa.org/#/js-react-redux-yasnippets")
    (license #f)))

(define-public emacs-js2-closure
  (package
    (name "emacs-js2-closure")
    (version "20170816.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jart/js2-closure.git")
               (commit
                 "f59db386d7d0693935d0bf52babcd2c203c06d04")))
        (sha256
          (base32
            "09zfmxi9m883lzsafnws06ifpq92b2i9q05pxk085vgkdpq35nss"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page "http://github.com/jart/js2-closure")
    (synopsis "Google Closure dependency manager")
    (description
      "Documentation at https://melpa.org/#/js2-closure")
    (license #f)))

(define-public emacs-js2-highlight-vars
  (package
    (name "emacs-js2-highlight-vars")
    (version "20170418.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/js2-highlight-vars.el.git")
               (commit
                 "e3bb177e50f76b272e8073a94d4f46be6512a163")))
        (sha256
          (base32
            "0yy8sqkn6c7r377qr2id4z550vw1x70xjd4i7yg0g1rj7q1kg98l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page
      "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode")
    (synopsis
      "highlight occurrences of the variable under cursor")
    (description
      "Documentation at https://melpa.org/#/js2-highlight-vars")
    (license #f)))

(define-public emacs-js2-mode
  (package
    (name "emacs-js2-mode")
    (version "20230628.238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/js2-mode.git")
               (commit
                 "79bc78d77db0d2e8e43dc0f9e0504ad90bcbc26d")))
        (sha256
          (base32
            "1mgqxpsaa5ks9nrsljybw97kcb5rgh1a5si3h98h1firns1vapwp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mooz/js2-mode/")
    (synopsis "Improved JavaScript editing mode")
    (description
      "Documentation at https://melpa.org/#/js2-mode")
    (license #f)))

(define-public emacs-js2-refactor
  (package
    (name "emacs-js2-refactor")
    (version "20210306.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/js-emacs/js2-refactor.el.git")
               (commit
                 "a0977c4ce1918cc266db9d6cd7a2ab63f3a76b9a")))
        (sha256
          (base32
            "0pjadcb5i8g8wkaf4hvh270r5z3qcsksnpcq5gzacqbgz5j2qcaf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-s
            emacs-multiple-cursors
            emacs-dash
            emacs-s
            emacs-yasnippet))
    (home-page "unspecified")
    (synopsis
      "A JavaScript refactoring library for emacs.")
    (description
      "Documentation at https://melpa.org/#/js2-refactor")
    (license #f)))

(define-public emacs-js2hl
  (package
    (name "emacs-js2hl")
    (version "20201119.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/js2hl.git")
               (commit
                 "ab01c290860ab0d8f43afcf1f7466fdced24e123")))
        (sha256
          (base32
            "12g1yah3k0k0p6nlrq8j9iq5l59zalknix60s1zj24bssac5y0zj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page
      "https://github.com/redguardtoo/js2hl")
    (synopsis
      "Highlight/rename things using js2-mode parser")
    (description
      "Documentation at https://melpa.org/#/js2hl")
    (license #f)))

(define-public emacs-js3-mode
  (package
    (name "emacs-js3-mode")
    (version "20160515.1550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tamzinblake/js3-mode.git")
               (commit
                 "229aeb374f1b1f3ee5c59b8ba3eebb6385c232cb")))
        (sha256
          (base32
            "0yd2lck1kq01pxk86jpxff5ih6fxx1a1wvl7v8b5ys7gi33fjqz2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "An improved JavaScript editing mode")
    (description
      "Documentation at https://melpa.org/#/js3-mode")
    (license #f)))

(define-public emacs-jscs
  (package
    (name "emacs-jscs")
    (version "20151015.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/papaeye/emacs-jscs.git")
               (commit
                 "9d39d0f2355e69a020bf76242504f3a33e013ccf")))
        (sha256
          (base32
            "1bqsv2drhcs8ia7nxss33f80p2mhcl4mr1nalphzw6s1f4mq2sgy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/papaeye/emacs-jscs")
    (synopsis
      "Consistent JavaScript editing using JSCS")
    (description
      "Documentation at https://melpa.org/#/jscs")
    (license #f)))

(define-public emacs-jsdoc
  (package
    (name "emacs-jsdoc")
    (version "20230831.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/jsdoc.el.git")
               (commit
                 "4efdae3b94b1bedc167625d5705daed74fcbc967")))
        (sha256
          (base32
            "1dm5rysglvrwljimpcy3fm55a0slkp8fsmwl4s5h4rlfki71fb7f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/isamert/jsdoc.el")
    (synopsis "Insert JSDoc comments")
    (description
      "Documentation at https://melpa.org/#/jsdoc")
    (license #f)))

(define-public emacs-jsfmt
  (package
    (name "emacs-jsfmt")
    (version "20180920.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brettlangdon/jsfmt.el.git")
               (commit
                 "ca141a135c7700eaedef92561d334e1fb7dc28a1")))
        (sha256
          (base32
            "13b2y6q6hqgdf32vyph407jlgki8xf5kflqz8zi0hcrmb8wkrd5x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brettlangdon/jsfmt.el")
    (synopsis
      "Interface to jsfmt command for javascript files")
    (description
      "Documentation at https://melpa.org/#/jsfmt")
    (license #f)))

(define-public emacs-json-mode
  (package
    (name "emacs-json-mode")
    (version "20230805.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/json-emacs/json-mode.git")
               (commit
                 "481d5d9f4003fc14d116bf31d1bf71d14960d7d9")))
        (sha256
          (base32
            "0k4sfw3dq1wlfz2hyw72h6wgf1sss8xjcc1bnwwn7ip4balwi1yf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-json-snatcher))
    (home-page
      "https://github.com/joshwnj/json-mode")
    (synopsis "Major mode for editing JSON files")
    (description
      "Documentation at https://melpa.org/#/json-mode")
    (license #f)))

(define-public emacs-json-navigator
  (package
    (name "emacs-json-navigator")
    (version "20230904.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/json-navigator.git")
               (commit
                 "f3489153e8509f88296786cb00e31f59597a43f2")))
        (sha256
          (base32
            "1sa4c4pxmfjp9k0549ljk2alan316n1ms2r4lcfqcci5ls51hv0l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/json-navigator")
    (synopsis "View and navigate JSON structures")
    (description
      "Documentation at https://melpa.org/#/json-navigator")
    (license #f)))

(define-public emacs-json-par
  (package
    (name "emacs-json-par")
    (version "20230917.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taku0/json-par.git")
               (commit
                 "bbafcc911fce4ebfb30d9f9a0bc226b1983cf7b1")))
        (sha256
          (base32
            "0mphal0j5hn5hi9i8gpb95csqbw06b7msszggpkxl6lhp3d5sbbm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-json-mode))
    (home-page "https://github.com/taku0/json-par")
    (synopsis
      "Minor mode for structural editing of JSON")
    (description
      "Documentation at https://melpa.org/#/json-par")
    (license #f)))

(define-public emacs-json-process-client
  (package
    (name "emacs-json-process-client")
    (version "20230903.1305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/json-process-client.git")
               (commit
                 "c4385859ada9b7803698a1f0199fea7fc8880214")))
        (sha256
          (base32
            "1n4spfyv7g88mkvca0cxc34qvp3x8vc838hmyp7x4ijr87lp8inm"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.petton.fr/nico/json-process-client")
    (synopsis
      "Interact with a TCP process using JSON")
    (description
      "Documentation at https://melpa.org/#/json-process-client")
    (license #f)))

(define-public emacs-json-reformat
  (package
    (name "emacs-json-reformat")
    (version "20220905.2342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gongo/json-reformat.git")
               (commit
                 "9120ab67c5379c44bc7a7a07ca858670cea4f32f")))
        (sha256
          (base32
            "133p77y3xqhqp6njajwry40l865hzsvag4k6cmhva8jxpl0zsz06"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gongo/json-reformat")
    (synopsis "Reformatting tool for JSON")
    (description
      "Documentation at https://melpa.org/#/json-reformat")
    (license #f)))

(define-public emacs-json-rpc
  (package
    (name "emacs-json-rpc")
    (version "20200417.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elisp-json-rpc.git")
               (commit
                 "81a5a520072e20d18aeab2aac4d66c046b031e56")))
        (sha256
          (base32
            "13s18mjh6dpdxvva9yx4841rxvayxsvaj3vblxril6zm2wcqw2lm"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("json-rpc.el")))
    (home-page
      "https://github.com/skeeto/elisp-json-rpc")
    (synopsis "JSON-RPC library")
    (description
      "Documentation at https://melpa.org/#/json-rpc")
    (license #f)))

(define-public emacs-json-rpc-server
  (package
    (name "emacs-json-rpc-server")
    (version "20220205.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/json-rpc-server.el.git")
               (commit
                 "9bf7efd5c69f429acbac41f33a1c9fdaddcb9914")))
        (sha256
          (base32
            "1zpgc20b0rdfl7kr1smm8xww4j852w341hxl7awi4ixapgjpd0h0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcaw/json-rpc-server.el")
    (synopsis "Server-side JSON-RPC library.")
    (description
      "Documentation at https://melpa.org/#/json-rpc-server")
    (license #f)))

(define-public emacs-json-snatcher
  (package
    (name "emacs-json-snatcher")
    (version "20200916.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Sterlingg/json-snatcher.git")
               (commit
                 "b28d1c0670636da6db508d03872d96ffddbc10f2")))
        (sha256
          (base32
            "1nxvi2iqcfp802rn3d2q4b91904nnxfp8w2d4zgak26ry7pjl90h"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/sterlingg/json-snatcher")
    (synopsis
      "Grabs the path to JSON values in a JSON file")
    (description
      "Documentation at https://melpa.org/#/json-snatcher")
    (license #f)))

(define-public emacs-jsonian
  (package
    (name "emacs-jsonian")
    (version "20230914.116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iwahbe/jsonian.git")
               (commit
                 "22bd5e20a653595b901ccfdc8780a0038755984d")))
        (sha256
          (base32
            "1v4wd0xc1xr4zibbs9pq2kaxqf86jxcmdwxinhkhkh450c6rfcwh"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/iwahbe/jsonian")
    (synopsis "A major mode for editing JSON files")
    (description
      "Documentation at https://melpa.org/#/jsonian")
    (license #f)))

(define-public emacs-jsonl
  (package
    (name "emacs-jsonl")
    (version "20190623.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ebpa/jsonl.el.git")
               (commit
                 "3dd0b7bb2b4bce9f9de7367941f0cc78f82049c9")))
        (sha256
          (base32
            "0c69yldiyg8q7dhqdcchkz20l44ckpmg8nri2740jg9wkwkj4wiz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ebpa/jsonl.el")
    (synopsis
      "Utility functions for working with line-delimited JSON")
    (description
      "Documentation at https://melpa.org/#/jsonl")
    (license #f)))

(define-public emacs-jsonnet-mode
  (package
    (name "emacs-jsonnet-mode")
    (version "20220121.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tminor/jsonnet-mode.git")
               (commit
                 "cef3d352408599a63655002af655d11757579253")))
        (sha256
          (base32
            "1whfv2dylkl4kppxjvd3gynmy73wmn13jj23b5zdcmvzyqkr0mzi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mgyucht/jsonnet-mode")
    (synopsis "Major mode for editing jsonnet files")
    (description
      "Documentation at https://melpa.org/#/jsonnet-mode")
    (license #f)))

(define-public emacs-jss
  (package
    (name "emacs-jss")
    (version "20130508.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/segv/jss.git")
               (commit
                 "41749257aecf13c7bd6ed489b5ab3304d06e40bc")))
        (sha256
          (base32
            "07yd7sxb5f2mbm2nva7b2nwyxxkmsi2rdd5qig0bq1b2mf3g5l83"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket emacs-js2-mode))
    (arguments '(#:files ("jss*.el")))
    (home-page "unspecified")
    (synopsis
      "An emacs interface to webkit and mozilla debuggers")
    (description
      "Documentation at https://melpa.org/#/jss")
    (license #f)))

(define-public emacs-jst
  (package
    (name "emacs-jst")
    (version "20150604.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/jst-mode.git")
               (commit
                 "2a3fd16c992f7790dc67134ef06a814c3d20579c")))
        (sha256
          (base32
            "16jgmabcqrjb3v9c6q711jqn9dna88bmzm4880mdry69ixwcydxy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash emacs-pcache))
    (home-page
      "https://github.com/cheunghy/jst-mode")
    (synopsis "JS test mode")
    (description
      "Documentation at https://melpa.org/#/jst")
    (license #f)))

(define-public emacs-jtags
  (package
    (name "emacs-jtags")
    (version "20160211.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.code.sf.net/p/jtags/code")
               (commit
                 "b50daa48510f71e74ce0ec2eb85030896a79cf96")))
        (sha256
          (base32
            "03w5y9c1109kpsn6xnxdaz3maiwbvxywqshc1l5wngfc85jwiv8y"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/lisp/*.el")))
    (home-page "http://jtags.sourceforge.net")
    (synopsis
      "enhanced tags functionality for Java development")
    (description
      "Documentation at https://melpa.org/#/jtags")
    (license #f)))

(define-public emacs-julia-formatter
  (package
    (name "emacs-julia-formatter")
    (version "20230525.1742")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/julia-formatter-"
               version
               ".tar"))
        (sha256
          (base32
            "137y5c28xiz82ad61cvp1bkcqzw0cf9dpljprnz78n4k1pqj22ln"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-session-async))
    (home-page
      "https://codeberg.org/FelipeLema/julia-formatter.el")
    (synopsis "Use JuliaFormatter.jl for julia code")
    (description
      "Documentation at https://melpa.org/#/julia-formatter")
    (license #f)))

(define-public emacs-julia-mode
  (package
    (name "emacs-julia-mode")
    (version "20230712.1524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JuliaEditorSupport/julia-emacs.git")
               (commit
                 "7a8c868e0d3e51ba4a2c621ee22ca9599e0e4bbb")))
        (sha256
          (base32
            "0xwd4kq69ray6bk8hwjxnqf7myc3mn36chc2l9jn7a0x1f8x6k10"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/JuliaEditorSupport/julia-emacs")
    (synopsis
      "Major mode for editing Julia source code")
    (description
      "Documentation at https://melpa.org/#/julia-mode")
    (license #f)))

(define-public emacs-julia-repl
  (package
    (name "emacs-julia-repl")
    (version "20231026.1005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tpapp/julia-repl.git")
               (commit
                 "4947319bc948b3f80d61b0d65a719737275949b8")))
        (sha256
          (base32
            "0vfpc4glkbl4ccz34i6fx9ny6zl9h69lw0sbv2rr526y7rr1cr7a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/tpapp/julia-repl")
    (synopsis "A minor mode for a Julia REPL")
    (description
      "Documentation at https://melpa.org/#/julia-repl")
    (license #f)))

(define-public emacs-julia-shell
  (package
    (name "emacs-julia-shell")
    (version "20161125.1910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dennisog/julia-shell-mode.git")
               (commit
                 "583a0b2ca20461ab4356929fd0f2212c22341b69")))
        (sha256
          (base32
            "182r7x7w3xnx7c54izz3rlz0khcwh7v21m89qpq99f9dvcs6273k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-julia-mode))
    (arguments '(#:files (:defaults "*.jl")))
    (home-page "unspecified")
    (synopsis
      "Major mode for an inferior Julia shell")
    (description
      "Documentation at https://melpa.org/#/julia-shell")
    (license #f)))

(define-public emacs-julia-snail
  (package
    (name "emacs-julia-snail")
    (version "20231026.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gcv/julia-snail.git")
               (commit
                 "97ca00411e16a2c1815090ca5aa05b3a36776a75")))
        (sha256
          (base32
            "168x8g2m30ci2msjfk09bbczpa33h4ax57b23hcwy5czk9511w70"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-julia-mode
            emacs-s
            emacs-spinner
            emacs-popup))
    (arguments
      '(#:files
        (:defaults "*.jl" "*.toml" "extensions")))
    (home-page "https://github.com/gcv/julia-snail")
    (synopsis "Julia Snail")
    (description
      "Documentation at https://melpa.org/#/julia-snail")
    (license #f)))

(define-public emacs-julia-ts-mode
  (package
    (name "emacs-julia-ts-mode")
    (version "20230921.1433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ronisbr/julia-ts-mode.git")
               (commit
                 "758004341a3f7bde2927401af5afbad67594fa8c")))
        (sha256
          (base32
            "0jdqy463aisklj72nj3j0q8ck5gdws3j8r0y2fd7yqcjmslcblrh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-julia-mode))
    (home-page
      "https://github.com/ronisbr/julia-ts-mode")
    (synopsis
      "Major mode for Julia source code using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/julia-ts-mode")
    (license #f)))

(define-public emacs-julia-vterm
  (package
    (name "emacs-julia-vterm")
    (version "20230815.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shg/julia-vterm.el.git")
               (commit
                 "6d67b618a6f2714d283095b088b12859fb663df9")))
        (sha256
          (base32
            "02al9s2fb9a1nf6s31szbh0pxw32rljj8fpmx9bs132c54x79ph8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vterm))
    (home-page
      "https://github.com/shg/julia-vterm.el")
    (synopsis "A mode for Julia REPL using vterm")
    (description
      "Documentation at https://melpa.org/#/julia-vterm")
    (license #f)))

(define-public emacs-jumblr
  (package
    (name "emacs-jumblr")
    (version "20170727.2043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkmcc/jumblr.git")
               (commit
                 "34533dfb9db8538c005f4eaffafeff7ed193729f")))
        (sha256
          (base32
            "0nn2m27c70nykin4iakrna0c61qd1hr09czrfmfpk06k70iifjky"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments '(#:files ("jumblr.el" "dict")))
    (home-page "https://github.com/mkmcc/jumblr")
    (synopsis "an anagram game for emacs")
    (description
      "Documentation at https://melpa.org/#/jumblr")
    (license #f)))

(define-public emacs-jump
  (package
    (name "emacs-jump")
    (version "20210110.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/jump.el.git")
               (commit
                 "55caa66a7cc6e0b1a76143fd40eff38416928941")))
        (sha256
          (base32
            "03fh7i6blnbc0zbmp83fk095hr3q4fdvrvfxad74zghcbc2nk7b7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-findr emacs-inflections))
    (arguments '(#:files ("jump.el")))
    (home-page "http://github.com/eschulte/jump.el")
    (synopsis
      "build functions which contextually jump between files")
    (description
      "Documentation at https://melpa.org/#/jump")
    (license #f)))

(define-public emacs-jump-char
  (package
    (name "emacs-jump-char")
    (version "20180601.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/jump-char.git")
               (commit
                 "1e31a3c687f2b3c71bbfab881c6d75915534bb9e")))
        (sha256
          (base32
            "1nzln2l6sy67qz30107sgyhhfacy85im9vdlbv1hp4fzdmxxkx84"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lewang/jump-char")
    (synopsis "navigation by char")
    (description
      "Documentation at https://melpa.org/#/jump-char")
    (license #f)))

(define-public emacs-jump-to-line
  (package
    (name "emacs-jump-to-line")
    (version "20130122.1653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ongaeshi/jump-to-line.git")
               (commit
                 "01ef8c3529d85e6c59cc20840acbc4a8e8325bc8")))
        (sha256
          (base32
            "1s9plmg323m1p625xqnks0yqz0zlsjacdj7pv8f783r0d9jmfq3s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Jump to line number at point.")
    (description
      "Documentation at https://melpa.org/#/jump-to-line")
    (license #f)))

(define-public emacs-jump-tree
  (package
    (name "emacs-jump-tree")
    (version "20171014.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yangwen0228/jump-tree.git")
               (commit
                 "282267dc6305889e31d46b405b7ad4dfe5923b66")))
        (sha256
          (base32
            "0r6cwpks4aylndvq5lcny3799fag05zm36gd11043wca7sgr90fz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yangwen0228/jump-tree")
    (synopsis "Treat position history as a tree")
    (description
      "Documentation at https://melpa.org/#/jump-tree")
    (license #f)))

(define-public emacs-jumplist
  (package
    (name "emacs-jumplist")
    (version "20151120.345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ganmacs/jumplist.git")
               (commit
                 "c482d137d95bc5e1bcd790cdbde25b7f729b2502")))
        (sha256
          (base32
            "0ykzvy8034mchq6ffyi7vqnwyrj6gnqqgn39ki81pv97qh8hh8yl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ganmacs/jumplist")
    (synopsis
      "Jump like vim jumplist or ex jumplist")
    (description
      "Documentation at https://melpa.org/#/jumplist")
    (license #f)))

(define-public emacs-jupyter
  (package
    (name "emacs-jupyter")
    (version "20231020.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jupyter/jupyter.git")
               (commit
                 "3a31920d48dc5e0d1028fb676cf20d13ea9f78ad")))
        (sha256
          (base32
            "17fblp4pwgm3vf415rp6l510nhrl4s3ssiimnwjmghyc2v2988j4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zmq
            emacs-simple-httpd
            emacs-websocket))
    (arguments
      '(#:files
        (:defaults "Makefile" "widget.html" "js")))
    (home-page
      "https://github.com/nnicandro/emacs-jupyter")
    (synopsis "Jupyter")
    (description
      "Documentation at https://melpa.org/#/jupyter")
    (license #f)))

(define-public emacs-just-mode
  (package
    (name "emacs-just-mode")
    (version "20230303.2255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leon-barrett/just-mode.el.git")
               (commit
                 "d7f52eab8fa3828106f80acb1e2176e5877b7191")))
        (sha256
          (base32
            "103jwkmg3dphmr885rpbxjp3x8xw45c0zbcvwarkv4bjhph8y4vh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leon-barrett/just-mode.el")
    (synopsis "Justfile editing mode")
    (description
      "Documentation at https://melpa.org/#/just-mode")
    (license #f)))

(define-public emacs-justl
  (package
    (name "emacs-justl")
    (version "20230913.232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/justl.el.git")
               (commit
                 "1364da34e2afa951e74ff40037cabc86b7525b58")))
        (sha256
          (base32
            "0bf54v5lpgm87p0l7srjj2yx7yi6p351flgbjiz2qy55hl2ahks2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-inheritenv))
    (home-page "https://github.com/psibi/justl.el")
    (synopsis "Major mode for driving just files")
    (description
      "Documentation at https://melpa.org/#/justl")
    (license #f)))

(define-public emacs-jvm-mode
  (package
    (name "emacs-jvm-mode")
    (version "20150422.708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martintrojer/jvm-mode.el.git")
               (commit
                 "3355dbaf5b0185aadfbad24160399abb32c5bea0")))
        (sha256
          (base32
            "0k91cdjlpil8npc4d3zsgx2gk41crl7qgm9r85khcgxs59kmkniw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/martintrojer/jvm-mode.el")
    (synopsis "Monitor and manage your JVMs")
    (description
      "Documentation at https://melpa.org/#/jvm-mode")
    (license #f)))

(define-public emacs-k8s-mode
  (package
    (name "emacs-k8s-mode")
    (version "20230305.1039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/emacs-k8s-mode.git")
               (commit
                 "83266cecd6a39cdf57d124270646047860bfb7ab")))
        (sha256
          (base32
            "0vnq41dg20nwixcdabjz88pnhdis8c1rpc7g7sxmkzk8gfgcilmv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (arguments
      '(#:files
        ("*.el"
         ("snippets/k8s-mode" "snippets/k8s-mode/*"))))
    (home-page
      "https://github.com/TxGVNN/emacs-k8s-mode")
    (synopsis
      "Major mode for Kubernetes configuration file")
    (description
      "Documentation at https://melpa.org/#/k8s-mode")
    (license #f)))

(define-public emacs-kaesar
  (package
    (name "emacs-kaesar")
    (version "20230626.2314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-kaesar.git")
               (commit
                 "740eaea4d2510b78d30cceabf4be2c3daca66cf7")))
        (sha256
          (base32
            "04dswlg8l9f69aav0ns6c4q4asjv9yi6sv5wn49xj3agj15qzm6p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kaesar-pbkdf2))
    (arguments '(#:files ("kaesar.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-kaesar")
    (synopsis "AES algorithm encrypt/decrypt")
    (description
      "Documentation at https://melpa.org/#/kaesar")
    (license #f)))

(define-public emacs-kaesar-file
  (package
    (name "emacs-kaesar-file")
    (version "20230614.332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-kaesar.git")
               (commit
                 "740eaea4d2510b78d30cceabf4be2c3daca66cf7")))
        (sha256
          (base32
            "04dswlg8l9f69aav0ns6c4q4asjv9yi6sv5wn49xj3agj15qzm6p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kaesar))
    (arguments '(#:files ("kaesar-file.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-kaesar")
    (synopsis "AES encrypt/decrypt file")
    (description
      "Documentation at https://melpa.org/#/kaesar-file")
    (license #f)))

(define-public emacs-kaesar-mode
  (package
    (name "emacs-kaesar-mode")
    (version "20230626.401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-kaesar.git")
               (commit
                 "740eaea4d2510b78d30cceabf4be2c3daca66cf7")))
        (sha256
          (base32
            "04dswlg8l9f69aav0ns6c4q4asjv9yi6sv5wn49xj3agj15qzm6p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kaesar))
    (arguments '(#:files ("kaesar-mode.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-kaesar")
    (synopsis "AES encrypt/decrypt buffer")
    (description
      "Documentation at https://melpa.org/#/kaesar-mode")
    (license #f)))

(define-public emacs-kaesar-pbkdf2
  (package
    (name "emacs-kaesar-pbkdf2")
    (version "20230626.2314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-kaesar.git")
               (commit
                 "740eaea4d2510b78d30cceabf4be2c3daca66cf7")))
        (sha256
          (base32
            "04dswlg8l9f69aav0ns6c4q4asjv9yi6sv5wn49xj3agj15qzm6p"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("kaesar-pbkdf2.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-kaesar")
    (synopsis "PBKDF2 extension for kaesar.el")
    (description
      "Documentation at https://melpa.org/#/kaesar-pbkdf2")
    (license #f)))

(define-public emacs-kakapo-mode
  (package
    (name "emacs-kakapo-mode")
    (version "20171004.451")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/listx/kakapo-mode.git")
               (commit
                 "292e07203c676361a1d918deb5acf2123cd70eaf")))
        (sha256
          (base32
            "00rl5y7wra7kyp867ps2inx0vng9jrmym0sm4jhnk6pqj50c8i9y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/listx/kakapo-mode")
    (synopsis
      "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment.")
    (description
      "Documentation at https://melpa.org/#/kakapo-mode")
    (license #f)))

(define-public emacs-kakoune
  (package
    (name "emacs-kakoune")
    (version "20230206.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmorag/kakoune.el.git")
               (commit
                 "b39c5605e896c55ea246f755c46171bd6d0768a8")))
        (sha256
          (base32
            "00581hhj6rw2p4d3kjfifd1xylacjsgjcg29f2svd412xlmhkm2j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ryo-modal
            emacs-multiple-cursors
            emacs-expand-region))
    (home-page
      "https://github.com/jmorag/kakoune.el")
    (synopsis
      "A simulation, but not emulation, of kakoune")
    (description
      "Documentation at https://melpa.org/#/kakoune")
    (license #f)))

(define-public emacs-kaleidoscope
  (package
    (name "emacs-kaleidoscope")
    (version "20170808.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/algernon/kaleidoscope.el.git")
               (commit
                 "af4034dcace867c4ede0bce744d5cb888c318f23")))
        (sha256
          (base32
            "1f352ki7yj1z5y2xpbmwi5f8nim208nbg94760hzwkjkk7rd71k2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("kaleidoscope.el")))
    (home-page
      "https://github.com/algernon/kaleidoscope.el")
    (synopsis
      "Controlling Kaleidoscope-powered devices.")
    (description
      "Documentation at https://melpa.org/#/kaleidoscope")
    (license #f)))

(define-public emacs-kaleidoscope-evil-state-flash
  (package
    (name "emacs-kaleidoscope-evil-state-flash")
    (version "20170728.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/algernon/kaleidoscope.el.git")
               (commit
                 "af4034dcace867c4ede0bce744d5cb888c318f23")))
        (sha256
          (base32
            "1f352ki7yj1z5y2xpbmwi5f8nim208nbg94760hzwkjkk7rd71k2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-kaleidoscope emacs-s))
    (arguments
      '(#:files ("kaleidoscope-evil-state-flash.el")))
    (home-page
      "https://github.com/algernon/kaleidoscope.el")
    (synopsis
      "Flash keyboard LEDs when changing Evil state")
    (description
      "Documentation at https://melpa.org/#/kaleidoscope-evil-state-flash")
    (license #f)))

(define-public emacs-kana
  (package
    (name "emacs-kana")
    (version "20210531.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chenyanming/kana.git")
               (commit
                 "d3d550aad67ef8625b3860598bf3622f5b2a7d32")))
        (sha256
          (base32
            "0d5qnqhvnxw5009mq34jnnc19r01y4kz0ypnv1mby80g8jz2gl62"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/chenyanming/kana")
    (synopsis "Learn Japanese hiragana and katakana")
    (description
      "Documentation at https://melpa.org/#/kana")
    (license #f)))

(define-public emacs-kanagawa-theme
  (package
    (name "emacs-kanagawa-theme")
    (version "20231023.114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Meritamen/kanagawa-theme.git")
               (commit
                 "b3f44012c97a16f29bc731782adfdb4cfd792b1c")))
        (sha256
          (base32
            "0c6zsjgfxji1nnms6pgy1w24fzjhnii2xldkyw4rh5vrhcb9nf93"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://github.com/Meritamen/kanagawa-theme")
    (synopsis "Retro elegant theme")
    (description
      "Documentation at https://melpa.org/#/kanagawa-theme")
    (license #f)))

(define-public emacs-kanban
  (package
    (name "emacs-kanban")
    (version "20230210.1505")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/kanban-"
               version
               ".tar"))
        (sha256
          (base32
            "0y4ypqj412rgxm3hc4vlrh0pdq9hnzmnahi8csv20jgy6i4mcfbh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Parse org-todo headlines to use org-tables as Kanban tables")
    (description
      "Documentation at https://melpa.org/#/kanban")
    (license #f)))

(define-public emacs-kanji-mode
  (package
    (name "emacs-kanji-mode")
    (version "20230928.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wsgac/kanji-mode.git")
               (commit
                 "731b3a5447bcb899ba1d86b645a344e0915d04f3")))
        (sha256
          (base32
            "0qgwl8iza0dkrpfsc5xpc1fgjmrxd6x4gxkid8wxn270s9mzal68"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "kanji")))
    (home-page "http://github.com/wsgac/kanji-mode ")
    (synopsis
      "View stroke order for kanji characters at cursor")
    (description
      "Documentation at https://melpa.org/#/kanji-mode")
    (license #f)))

(define-public emacs-kaocha-runner
  (package
    (name "emacs-kaocha-runner")
    (version "20230511.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/kaocha-runner.el.git")
               (commit
                 "9ba7b47d3a3834964f7fcad389081b3b282f692c")))
        (sha256
          (base32
            "0slspzc3zppavmdnw8xpih1iiqyqbyx4mm286lz0naw7g4yrpb12"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-cider emacs-parseedn))
    (home-page
      "https://github.com/magnars/kaocha-runner.el")
    (synopsis
      "A package for running Kaocha tests via CIDER.")
    (description
      "Documentation at https://melpa.org/#/kaocha-runner")
    (license #f)))

(define-public emacs-kaolin-themes
  (package
    (name "emacs-kaolin-themes")
    (version "20231004.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ogdenwebb/emacs-kaolin-themes.git")
               (commit
                 "8f2cd166b3e5d19d83ab7de73a62069929238306")))
        (sha256
          (base32
            "0f5y1ri1pdgy088lxp9h8h5cvnfyi5dkvyvyxzjh00kaj10d3va5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (arguments '(#:files (:defaults "themes/*.el")))
    (home-page
      "https://github.com/ogdenwebb/emacs-kaolin-themes")
    (synopsis "A set of eye pleasing themes")
    (description
      "Documentation at https://melpa.org/#/kaolin-themes")
    (license #f)))

(define-public emacs-kaomoji
  (package
    (name "emacs-kaomoji")
    (version "20220721.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/kaomoji.el.git")
               (commit
                 "fba0018a13eba70c2bffc6153dcfee99937fa3d6")))
        (sha256
          (base32
            "1zmi7q0vsyx5m50f34vr2fhij1id03dkj2l93hlqyz5037wij1ka"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (home-page
      "https://github.com/kuanyui/kaomoji.el")
    (synopsis "Input kaomoji superb easily")
    (description
      "Documentation at https://melpa.org/#/kaomoji")
    (license #f)))

(define-public emacs-kapacitor
  (package
    (name "emacs-kapacitor")
    (version "20190414.1908")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Manoj321/kapacitor-el.git")
               (commit
                 "e3300d8b4017a2f66b0d929cb85bcc7ee2612072")))
        (sha256
          (base32
            "05vrfii2n2g2q60dzgw23ck6gxxm3d7fsabi4z0g3k9gc6wrsl5l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup))
    (home-page
      "http://github.com/Manoj321/kapacitor-el")
    (synopsis "Main file for kapacitor-mode")
    (description
      "Documentation at https://melpa.org/#/kapacitor")
    (license #f)))

(define-public emacs-karma
  (package
    (name "emacs-karma")
    (version "20160220.1245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/karma.el.git")
               (commit
                 "31d3e7708246183d7ed0686be92bf23140af348c")))
        (sha256
          (base32
            "12v242kfcx849j8w95v2g7djh9xqbx8n033iaxyavfxnz0pp7zdl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pkg-info))
    (home-page "http://github.com/tonini/karma.el")
    (synopsis "Karma Test Runner Emacs Integration")
    (description
      "Documentation at https://melpa.org/#/karma")
    (license #f)))

(define-public emacs-kconfig-mode
  (package
    (name "emacs-kconfig-mode")
    (version "20220604.1415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/delaanthonio/kconfig-mode.git")
               (commit
                 "cd87b71c8c1739d026645ece0bbd20055a7a2d4a")))
        (sha256
          (base32
            "114hjz7k8p8xmpfbv2img98qfkb46wn4mz5sdbl7278f973z2yqv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/delaanthonio/kconfig-mode")
    (synopsis "Major mode for editing Kconfig files")
    (description
      "Documentation at https://melpa.org/#/kconfig-mode")
    (license #f)))

(define-public emacs-kconfig-ref
  (package
    (name "emacs-kconfig-ref")
    (version "20230814.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seokbeomKim/kconfig-ref.git")
               (commit
                 "a3f602032cd3b9a7167505bd8ad0f156ae34c0b8")))
        (sha256
          (base32
            "06gdjmnxl6aciclqjha56z5q4k0ix6yy4mabgy5smqnd2j2z4myk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-emacsql))
    (home-page
      "https://github.com/seokbeomkim/kconfig-ref")
    (synopsis
      "A simple package for looking up kconfig symbol quickly")
    (description
      "Documentation at https://melpa.org/#/kconfig-ref")
    (license #f)))

(define-public emacs-kdeconnect
  (package
    (name "emacs-kdeconnect")
    (version "20231029.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/carldotac/kdeconnect.el.git")
               (commit
                 "2548bae3b79df23d3fb765391399410e2b935eb9")))
        (sha256
          (base32
            "1qfy9hav2gzp4p1ahf0lvxig047wk9z9jnnka198w8ii78il1r8l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/carldotac/kdeconnect.el")
    (synopsis "An interface for KDE Connect")
    (description
      "Documentation at https://melpa.org/#/kdeconnect")
    (license #f)))

(define-public emacs-keepass-mode
  (package
    (name "emacs-keepass-mode")
    (version "20211030.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ifosch/keepass-mode.git")
               (commit
                 "f432bb60f9f3bd027025140d723906dcabeefaef")))
        (sha256
          (base32
            "0wrzbcd070l8yjqxg7mmglc3kfgy420y3wnykky198y83xsv3qy2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ifosch/keepass-mode")
    (synopsis "Mode for KeePass DB.")
    (description
      "Documentation at https://melpa.org/#/keepass-mode")
    (license #f)))

(define-public emacs-keg
  (package
    (name "emacs-keg")
    (version "20230709.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/keg.el.git")
               (commit
                 "c0d24fdad4248e0291685b47a02df54e9f980aba")))
        (sha256
          (base32
            "0bd5jp1qy4d4v71jfn3qp7rfwfbjvsbcmk9c6m4dympv1w9dp56d"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "keg-mode.el" "flycheck-keg.el"))))
    (home-page "https://github.com/conao3/keg.el")
    (synopsis
      "Modern Elisp package development system")
    (description
      "Documentation at https://melpa.org/#/keg")
    (license #f)))

(define-public emacs-keg-mode
  (package
    (name "emacs-keg-mode")
    (version "20220307.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/keg.el.git")
               (commit
                 "c28ce03bbaee51874246aa798c8532a1c0df7495")))
        (sha256
          (base32
            "0n8xzmg2ycmhhp4msnsjz26mphw2v947nrfw6ch7aps8x86yb114"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("keg-mode.el")))
    (home-page "https://github.com/conao3/keg.el")
    (synopsis "Major mode for editing Keg files")
    (description
      "Documentation at https://melpa.org/#/keg-mode")
    (license #f)))

(define-public emacs-kele
  (package
    (name "emacs-kele")
    (version "20230326.33")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jinnovation/kele.el.git")
               (commit
                 "4bdcd97845c2db6471b5f9f873541c8e1bc353fa")))
        (sha256
          (base32
            "040nls6qq2gd1iqk7mirjd3pvhc4zpgqlni4jgnimrdqj63x9g7n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async
            emacs-dash
            emacs-f
            emacs-ht
            emacs-plz
            emacs-s
            emacs-yaml))
    (home-page
      "https://github.com/jinnovation/kele.el")
    (synopsis
      "Spritzy Kubernetes cluster management")
    (description
      "Documentation at https://melpa.org/#/kele")
    (license #f)))

(define-public emacs-kerl
  (package
    (name "emacs-kerl")
    (version "20150424.2005")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/correl/kerl.el.git")
               (commit
                 "1732ee26213f021bf040919c45ad276aafcaae14")))
        (sha256
          (base32
            "1kkzs7nrcr74qn1m456vaj52a9j3ah4biakimz06hls415l56yk9"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/correl/kerl.el/")
    (synopsis "Emacs integration for kerl")
    (description
      "Documentation at https://melpa.org/#/kerl")
    (license #f)))

(define-public emacs-key-assist
  (package
    (name "emacs-key-assist")
    (version "20230122.718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-key-assist.git")
               (commit
                 "41a958ca6b038586bfdcf01045bb8b9d379248fe")))
        (sha256
          (base32
            "099g9y3ky8hmgrq68idcjwa3452jdkggblgz397824kj13d7z02b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Boruch-Baum/emacs-key-assist")
    (synopsis
      "Minibuffer keybinding cheatsheet and launcher")
    (description
      "Documentation at https://melpa.org/#/key-assist")
    (license #f)))

(define-public emacs-key-chord
  (package
    (name "emacs-key-chord")
    (version "20230522.223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/key-chord.git")
               (commit
                 "e724def60fdf6473858f2962ae276cf4413473eb")))
        (sha256
          (base32
            "0hg7bf35m3r02xv4wnmgx37cllvp74wxvh00593xi5i99dr7bl03"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "map pairs of simultaneously pressed keys to commands")
    (description
      "Documentation at https://melpa.org/#/key-chord")
    (license #f)))

(define-public emacs-key-combo
  (package
    (name "emacs-key-combo")
    (version "20230323.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/key-combo.git")
               (commit
                 "16fb73522d53547ef38f3710aff7c0b01005d576")))
        (sha256
          (base32
            "1cvbdb9b2fjxy1m3n84pcl79hbans07vj9aqdf0ldnzh40n8xm51"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/uk-ar/key-combo")
    (synopsis "map key sequence to commands")
    (description
      "Documentation at https://melpa.org/#/key-combo")
    (license #f)))

(define-public emacs-key-intercept
  (package
    (name "emacs-key-intercept")
    (version "20140211.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarao/key-intercept-el.git")
               (commit
                 "d9a60edb4ce893f2d3d94f242164fdcc62d43cf2")))
        (sha256
          (base32
            "143nfs8pgi5yy3mjq7nirffplk4vb8kik4q7zypynh2pddip30a4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/tarao/key-intercept-el")
    (synopsis "Intercept prefix keys")
    (description
      "Documentation at https://melpa.org/#/key-intercept")
    (license #f)))

(define-public emacs-key-leap
  (package
    (name "emacs-key-leap")
    (version "20160831.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MartinRykfors/key-leap.git")
               (commit
                 "b3f6ef15c8a13870475d5af159fa24b30f97dea0")))
        (sha256
          (base32
            "1f2k7jpxfvjirxzjc5c4s4lpg1hdgw8k7lfchx362jqijny1ipfp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MartinRykfors/key-leap")
    (synopsis
      "Leap between lines by typing keywords")
    (description
      "Documentation at https://melpa.org/#/key-leap")
    (license #f)))

(define-public emacs-key-quiz
  (package
    (name "emacs-key-quiz")
    (version "20200226.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/federicotdn/key-quiz.git")
               (commit
                 "6d31fcf78a1ab1841f735dfb5cbd2bf6b2ed25db")))
        (sha256
          (base32
            "19cszpr5m6j5xj18wl4myn7ifw27rrwbmhd0wcsds28b4czw2mhm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/federicotdn/key-quiz")
    (synopsis "Emacs Keys Quiz")
    (description
      "Documentation at https://melpa.org/#/key-quiz")
    (license #f)))

(define-public emacs-key-seq
  (package
    (name "emacs-key-seq")
    (version "20150907.756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vlevit/key-seq.el.git")
               (commit
                 "e29b083a6427d061638749194fc249ef69ad2cc0")))
        (sha256
          (base32
            "05vpydcgiaya35b62cdjxna9y02vnwzzg6p8jh0dkr9k44h4iy3f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-key-chord))
    (home-page "http://github.com/vlevit/key-seq.el")
    (synopsis
      "map pairs of sequentially pressed keys to commands")
    (description
      "Documentation at https://melpa.org/#/key-seq")
    (license #f)))

(define-public emacs-keycast
  (package
    (name "emacs-keycast")
    (version "20231105.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/keycast.git")
               (commit
                 "6a6f9106270f65b0bae3afb2ccdc52a3b5fbe340")))
        (sha256
          (base32
            "0n7pxrd7n56500xnn3w9m9c73zqaan1v9cqbcyd7nrhyb4dnbc10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/keycast")
    (synopsis "Show current command and its binding")
    (description
      "Documentation at https://melpa.org/#/keycast")
    (license #f)))

(define-public emacs-keychain-environment
  (package
    (name "emacs-keychain-environment")
    (version "20180318.2223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/keychain-environment.git")
               (commit
                 "d3643196de6dc79ea77f9f4805028350fd76100b")))
        (sha256
          (base32
            "0wzs77nwal6apinc39d4arj3lralv2cb9aw9gkikk46fgk404hwj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/keychain-environment")
    (synopsis "load keychain environment variables")
    (description
      "Documentation at https://melpa.org/#/keychain-environment")
    (license #f)))

(define-public emacs-keydef
  (package
    (name "emacs-keydef")
    (version "20090428.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/keydef.git")
               (commit
                 "dff2be9f58d12d8c6a490ad0c1b2b10b55528dc0")))
        (sha256
          (base32
            "0dkc51bmix4b8czs2wg6vz8vk32qlll1b9fjmx6xshrxm85cyhvv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "a simpler way to define keys, with kbd syntax")
    (description
      "Documentation at https://melpa.org/#/keydef")
    (license #f)))

(define-public emacs-keyfreq
  (package
    (name "emacs-keyfreq")
    (version "20231107.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dacap/keyfreq.git")
               (commit
                 "c6955162307f37c2ac631d9daf118781009f8dda")))
        (sha256
          (base32
            "18iw0jwr9hmxv5vikqf28sknml0k14rvddp80s2cm6bglaz4sdc3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "track command frequencies")
    (description
      "Documentation at https://melpa.org/#/keyfreq")
    (license #f)))

(define-public emacs-keymap-utils
  (package
    (name "emacs-keymap-utils")
    (version "20230213.1152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/keymap-utils.git")
               (commit
                 "1806ff73b0a68e84234d65c7d08a18cf3f0d29e5")))
        (sha256
          (base32
            "1amcipkd4k8kfrlnq5sqzgwwhd42kx6aw5fnallidahz8pw79s7g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/keymap-utils")
    (synopsis "Keymap utilities")
    (description
      "Documentation at https://melpa.org/#/keymap-utils")
    (license #f)))

(define-public emacs-keypress-multi-event
  (package
    (name "emacs-keypress-multi-event")
    (version "20190109.530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-keypress-multi-event.git")
               (commit
                 "f7041deccd9d03066c2fe41c3443c42a4713ac02")))
        (sha256
          (base32
            "1pj621z2ywwx6kybhyifm9grp9bkhk6f3fwancn0x53c33zp2daq"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/Boruch_Baum/emacs-keypress-multi-event")
    (synopsis
      "Perform different actions for the same keypress.")
    (description
      "Documentation at https://melpa.org/#/keypress-multi-event")
    (license #f)))

(define-public emacs-keypression
  (package
    (name "emacs-keypression")
    (version "20200819.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chuntaro/emacs-keypression.git")
               (commit
                 "9427241f3fa539e4b5ad7581a05eb7e49f2cf518")))
        (sha256
          (base32
            "0p2pag2hzxswsf5hzjfm0nf4wpp40lsmxf1x6n9vfwfrpfk5b9ar"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chuntaro/emacs-keypression")
    (synopsis "Keystroke visualizer")
    (description
      "Documentation at https://melpa.org/#/keypression")
    (license #f)))

(define-public emacs-keyset
  (package
    (name "emacs-keyset")
    (version "20150220.530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/keyset.git")
               (commit
                 "45ce83c4b56f064874256db37e697a63b2c69e65")))
        (sha256
          (base32
            "0fcz1qw3mw4m8albs1ybixrcz8yqgwip69fr99cd5bxfyr6zqj6d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/HKey/keyset")
    (synopsis
      "A small library for structuring key bindings.")
    (description
      "Documentation at https://melpa.org/#/keyset")
    (license #f)))

(define-public emacs-keystore-mode
  (package
    (name "emacs-keystore-mode")
    (version "20190409.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterpaul/keystore-mode.git")
               (commit
                 "43bd5926348298d077c7221f37902c990df3f951")))
        (sha256
          (base32
            "06cznkqkm04zz5lqfb514aqvsr2p13arzysixv0ss0bqpvdq7cv7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-origami emacs-s))
    (arguments '(#:files ("*.el")))
    (home-page
      "https://github.com/peterpaul/keystore-mode")
    (synopsis
      "A major mode for viewing and managing (java) keystores")
    (description
      "Documentation at https://melpa.org/#/keystore-mode")
    (license #f)))

(define-public emacs-keyswap
  (package
    (name "emacs-keyswap")
    (version "20160813.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hardenedapple/keyswap.el.git")
               (commit
                 "cd682a7c4a8d64d6bae6a005db5045232e5e7b95")))
        (sha256
          (base32
            "191i2b2xx6180sly0dd6b1z6npsrzjqhxrbak9wm6yblx7alsgn2"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/hardenedapple/keyswap.el")
    (synopsis "swap bindings between key pairs")
    (description
      "Documentation at https://melpa.org/#/keyswap")
    (license #f)))

(define-public emacs-keytar
  (package
    (name "emacs-keytar")
    (version "20221231.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/keytar.git")
               (commit
                 "51c8f2f1f207cc67af4e67731ee056860e107811")))
        (sha256
          (base32
            "067gmril73ri1zsakh284vxaw8sqmyr9vflmsh7a3033p4gabw4w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-grammarly/keytar")
    (synopsis "Emacs Lisp interface for node-keytar")
    (description
      "Documentation at https://melpa.org/#/keytar")
    (license #f)))

(define-public emacs-keyword-search
  (package
    (name "emacs-keyword-search")
    (version "20180424.1102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/keyword-search/keyword-search.git")
               (commit
                 "f8475ecaddb8804a9be6bee47678207c86ac8dee")))
        (sha256
          (base32
            "1ymqnpm9his2bkchq23vwazprwyw0d2sdgza7zjxvs3q0f4nj0vx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juhp/keyword-search")
    (synopsis "browser keyword search from Emacs")
    (description
      "Documentation at https://melpa.org/#/keyword-search")
    (license #f)))

(define-public emacs-kfg
  (package
    (name "emacs-kfg")
    (version "20140909.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/czipperz/kfg.git")
               (commit
                 "d2c9dd26618fb2f7bf1e7b6eae193b1cceba3c97")))
        (sha256
          (base32
            "0xq835xzywks4b4kaz5i0pp759i23kibs5gkvvxasw0dncqh7j5c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/abingham/kfg")
    (synopsis "an emacs configuration system")
    (description
      "Documentation at https://melpa.org/#/kfg")
    (license #f)))

(define-public emacs-khalel
  (package
    (name "emacs-khalel")
    (version "20230606.1909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/hperrey/khalel.git")
               (commit
                 "85df973fe2785caee08d4ef5b23bdaae424a8d98")))
        (sha256
          (base32
            "1k88v8cg1b2dkb9v1jxmbl2sx22gz7xqqppbrnmlafyf3m3bg2hv"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/hperrey/khalel")
    (synopsis
      "Import, edit and create calendar events through khal")
    (description
      "Documentation at https://melpa.org/#/khalel")
    (license #f)))

(define-public emacs-khardel
  (package
    (name "emacs-khardel")
    (version "20230903.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/khardel.git")
               (commit
                 "1c0a0e7c817250c1d0ffc8cff9cc1998e746ea96")))
        (sha256
          (base32
            "11xqgfssjkd1pcwgky2gsij2d4nykgmq0gnal8bazz78pwsgnwrk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (home-page
      "https://github.com/DamienCassou/khardel")
    (synopsis "Integrate with khard")
    (description
      "Documentation at https://melpa.org/#/khardel")
    (license #f)))

(define-public emacs-khoj
  (package
    (name "emacs-khoj")
    (version "20231018.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/khoj-ai/khoj.git")
               (commit
                 "6dc0df3afbdcc2913fc65461cf07d4ba92273924")))
        (sha256
          (base32
            "0c6xdq7bwv03z0i0hgjbrp7bkcqbxkads4ip5alarzbhgfdnka8i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files ("src/interface/emacs/*.el")))
    (home-page
      "https://github.com/khoj-ai/khoj/tree/master/src/interface/emacs")
    (synopsis "AI copilot for your Second Brain")
    (description
      "Documentation at https://melpa.org/#/khoj")
    (license #f)))

(define-public emacs-kibit-helper
  (package
    (name "emacs-kibit-helper")
    (version "20150508.1533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brunchboy/kibit-helper.git")
               (commit
                 "16bdfff785ee05d8e74a5780f6808506d990cef7")))
        (sha256
          (base32
            "0s2hb2lvfmcvm3n1fg4biaafc1p7j7w990d7w15gicaw6rr2j4nr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://www.github.com/brunchboy/kibit-helper")
    (synopsis
      "Conveniently use the Kibit Leiningen plugin from Emacs")
    (description
      "Documentation at https://melpa.org/#/kibit-helper")
    (license #f)))

(define-public emacs-kill-file-path
  (package
    (name "emacs-kill-file-path")
    (version "20230306.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chyla/kill-file-path.git")
               (commit
                 "5dcbce69cbae17665216a32dd20f27de54c62972")))
        (sha256
          (base32
            "1jn1sgvzjqnfzw40qm8miqp6q9gfd96n908njg50vhlir7b39c3n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chyla/kill-file-path/kill-file-path.el")
    (synopsis "Copy file name into kill ring")
    (description
      "Documentation at https://melpa.org/#/kill-file-path")
    (license #f)))

(define-public emacs-kill-or-bury-alive
  (package
    (name "emacs-kill-or-bury-alive")
    (version "20230606.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/kill-or-bury-alive.git")
               (commit
                 "688057ffbfad75e4155c11c122d650b9ddeea0c4")))
        (sha256
          (base32
            "1ccp9hifqx8nrnwxlw82zbyf13mvfhn9whb9hc624gakwxkzg5c8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrkkrp/kill-or-bury-alive")
    (synopsis "Precise control over buffer killing")
    (description
      "Documentation at https://melpa.org/#/kill-or-bury-alive")
    (license #f)))

(define-public emacs-kill-ring-search
  (package
    (name "emacs-kill-ring-search")
    (version "20140422.1555")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/kill-ring-search.el.git")
               (commit
                 "23535b4a01a1cb1574604e36c49614e84e85c883")))
        (sha256
          (base32
            "0yrc09k64rv5is4wvss938mkj2pkvbr98lr3ahsi7p0aqn7s444v"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/kill-ring-search/")
    (synopsis "incremental search for the kill ring")
    (description
      "Documentation at https://melpa.org/#/kill-ring-search")
    (license #f)))

(define-public emacs-killer
  (package
    (name "emacs-killer")
    (version "20190128.10")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/killer.git")
               (commit
                 "ace0547944933440384ceeb5876b1f68c082d540")))
        (sha256
          (base32
            "06nzxd9nc1d569354xj7w88i0y5l99pyag691aribsh771rxbfz4"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/tarsius/killer")
    (synopsis "kill and delete text")
    (description
      "Documentation at https://melpa.org/#/killer")
    (license #f)))

(define-public emacs-kite
  (package
    (name "emacs-kite")
    (version "20130201.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jscheid/kite.git")
               (commit
                 "7ed74d1147a6ddd152d3da65dc30df3517d53144")))
        (sha256
          (base32
            "1cr4i66lws6yhyxmyx5jw6d5x7i75435mafkkych4nfa0mv4vicd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page "unspecified")
    (synopsis "WebKit inspector front-end")
    (description
      "Documentation at https://melpa.org/#/kite")
    (license #f)))

(define-public emacs-kite-mini
  (package
    (name "emacs-kite-mini")
    (version "20160508.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tungd/kite-mini.el.git")
               (commit
                 "a68619dbc109c7989f3448426d8c1ee9e797c11f")))
        (sha256
          (base32
            "1qmg5mdf3zhmpa4kdvkh62y6if6mj4ag885dg7y6461dg2y6ymlh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-websocket))
    (home-page
      "https://github.com/tungd/kite-mini.el")
    (synopsis
      "Remotely evaluate JavaScript in the WebKit debugger")
    (description
      "Documentation at https://melpa.org/#/kite-mini")
    (license #f)))

(define-public emacs-kivy-mode
  (package
    (name "emacs-kivy-mode")
    (version "20210318.2106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kivy/kivy.git")
               (commit
                 "ee040926edd6e68d13e8799484c25d6e2911397b")))
        (sha256
          (base32
            "1shsaf4gglh2x7hyix6hzb5jba43k73ndn1r1g3766nk0bryj2jn"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("kivy/tools/highlight/kivy-mode.el")))
    (home-page "unspecified")
    (synopsis
      "Emacs major mode for editing Kivy files")
    (description
      "Documentation at https://melpa.org/#/kivy-mode")
    (license #f)))

(define-public emacs-kiwix
  (package
    (name "emacs-kiwix")
    (version "20220316.847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/kiwix.el.git")
               (commit
                 "444f686a7f75db788d54f544b923a3532732eb8b")))
        (sha256
          (base32
            "1pdm69ghdfzv738c5y1b61d12cfafkvcmmjf0v4m3qai2xxqk4sn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://repo.or.cz/kiwix.el.git")
    (synopsis
      "Searching offline Wikipedia through Kiwix.")
    (description
      "Documentation at https://melpa.org/#/kiwix")
    (license #f)))

(define-public emacs-kixtart-mode
  (package
    (name "emacs-kixtart-mode")
    (version "20150611.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryrun/kixtart-mode.git")
               (commit
                 "1c2356797e7b766bbaaa2b341176a8b10499cd79")))
        (sha256
          (base32
            "1ld3ccg8q7hmjrj60rxvmmfy4dpm2lvlshjqdf9ifgjzp221g4vb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ryrun/kixtart-mode")
    (synopsis
      "major mode for Kixtart scripting files")
    (description
      "Documentation at https://melpa.org/#/kixtart-mode")
    (license #f)))

(define-public emacs-kkp
  (package
    (name "emacs-kkp")
    (version "20230906.939")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benjaminor/kkp.git")
               (commit
                 "fc42a998d77e50c93b66493d7e6e34126e060f3b")))
        (sha256
          (base32
            "10jjhzpxh6kas3kr6488v4b4yg2ynxxar7m233qifjpxdq2inz5j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/benjaminor/kkp")
    (synopsis
      "Enable support for the Kitty Keyboard Protocol")
    (description
      "Documentation at https://melpa.org/#/kkp")
    (license #f)))

(define-public emacs-klere-theme
  (package
    (name "emacs-klere-theme")
    (version "20230822.144")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/klere-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "1sp0d5719znx1p489z0zncdr7rlp5j1f1pb5ac35a229r5gz20sv"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/WammKD/emacs-klere-theme")
    (synopsis
      "A dark theme with lambent color highlights and incremental grays")
    (description
      "Documentation at https://melpa.org/#/klere-theme")
    (license #f)))

(define-public emacs-klondike
  (package
    (name "emacs-klondike")
    (version "20230606.704")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/klondike-"
               version
               ".tar"))
        (sha256
          (base32
            "15qwdx0i9p0hbw8rq39aj29m57ckbxb3bmy7zgm005zhm3g44dqg"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/WammKD/Emacs-Klondike")
    (synopsis "Klondike")
    (description
      "Documentation at https://melpa.org/#/klondike")
    (license #f)))

(define-public emacs-kmacro-x
  (package
    (name "emacs-kmacro-x")
    (version "20230502.1253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/kmacro-x.el.git")
               (commit
                 "b5f6b408a9134f3db14c0516c5ba48d68178a175")))
        (sha256
          (base32
            "1qcs1pn2mkgfxs3975c95xflzl45zkf66kslp9c2lvlw668xyg9i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vifon/kmacro-x.el")
    (synopsis
      "Keyboard macro helpers and extensions")
    (description
      "Documentation at https://melpa.org/#/kmacro-x")
    (license #f)))

(define-public emacs-know-your-http-well
  (package
    (name "emacs-know-your-http-well")
    (version "20160208.2305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/for-GET/know-your-http-well.git")
               (commit
                 "3cc5ab6d2764ab7aacb1b6e026abaccbeb6c37f2")))
        (sha256
          (base32
            "0hni9xvv0759nqwhngijiqkvpiz7alyd4ydf0mvi2vkmbxkci8n1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/*.el")))
    (home-page "unspecified")
    (synopsis
      "Look up the meaning of HTTP headers, methods, relations, status codes")
    (description
      "Documentation at https://melpa.org/#/know-your-http-well")
    (license #f)))

(define-public emacs-kodi-remote
  (package
    (name "emacs-kodi-remote")
    (version "20190622.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spiderbit/kodi-remote.el.git")
               (commit
                 "f5e932036c16e2b61a63020e006fc601e38d181e")))
        (sha256
          (base32
            "1gck7lvqxcr9ikrzlpvcf4408cq6i4s8ijgb0kdsbkfzv0w86934"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-f))
    (home-page
      "http://github.com/spiderbit/kodi-remote.el")
    (synopsis "Remote Control for Kodi")
    (description
      "Documentation at https://melpa.org/#/kodi-remote")
    (license #f)))

(define-public emacs-kolon-mode
  (package
    (name "emacs-kolon-mode")
    (version "20140122.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samvtran/kolon-mode.git")
               (commit
                 "5af0955e280ae991862189ebecd3937c5fc8fb9f")))
        (sha256
          (base32
            "0yr4yxwxgxp5pm9f8gaqlikxp26inv01inq0ya42dzam5yphkafw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/samvtran/kolon-mode")
    (synopsis
      "Syntax highlighting for Text::Xslate's Kolon syntax")
    (description
      "Documentation at https://melpa.org/#/kolon-mode")
    (license #f)))

(define-public emacs-koopa-mode
  (package
    (name "emacs-koopa-mode")
    (version "20230905.2243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sch0lars/koopa-mode.git")
               (commit
                 "82c81a641e106f270d45427f6d0139aabbd8523c")))
        (sha256
          (base32
            "05qx7w1lhirsc7b3w0v3gdsdc5i90vraxg74w7l21h60773aws4n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-company))
    (home-page
      "https://github.com/sch0lars/koopa-mode")
    (synopsis
      "A major mode for Microsoft PowerShell")
    (description
      "Documentation at https://melpa.org/#/koopa-mode")
    (license #f)))

(define-public emacs-kooten-theme
  (package
    (name "emacs-kooten-theme")
    (version "20161023.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kootenpv/emacs-kooten-theme.git")
               (commit
                 "d10197b4dd7af02cd14aeab2573c273a294798c3")))
        (sha256
          (base32
            "1vc97d3i7jh4fbpan7lfnmsm32c4gwgrg11j2vq7z3rwm42wkkyr"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kootenpv/emacs-kooten-theme")
    (synopsis "Dark color theme")
    (description
      "Documentation at https://melpa.org/#/kooten-theme")
    (license #f)))

(define-public emacs-korean-holidays
  (package
    (name "emacs-korean-holidays")
    (version "20190102.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tttuuu888/korean-holidays.git")
               (commit
                 "3f90ed86f46f8e5533f23baa40e2513ac497ca2b")))
        (sha256
          (base32
            "0y88b4mr73qcshr87750jkjzz1mc2wwra6ca3y8spv4qc6cadwls"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tttuuu888/korean-holidays")
    (synopsis "Korean holidays for calendar.")
    (description
      "Documentation at https://melpa.org/#/korean-holidays")
    (license #f)))

(define-public emacs-kosmos-theme
  (package
    (name "emacs-kosmos-theme")
    (version "20170502.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/habamax/kosmos-theme.git")
               (commit
                 "616456d2376a75dc31190ad65137d179fbad4336")))
        (sha256
          (base32
            "193zwgwfnj0lyk0msa16y0dfg7asp953p3jm56d9wdacggbcraj9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/habamax/kosmos-theme")
    (synopsis
      "Black and lightgray theme with not so much syntax highlighting.")
    (description
      "Documentation at https://melpa.org/#/kosmos-theme")
    (license #f)))

(define-public emacs-kotlin-mode
  (package
    (name "emacs-kotlin-mode")
    (version "20230123.1859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode.git")
               (commit
                 "fddd747e5b4736e8b27a147960f369b86179ddff")))
        (sha256
          (base32
            "0wbv3pjanmf97wchhg1w8ahvpxn8kgpnl45pmwqg019xj9yfpgpb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Emacs-Kotlin-Mode-Maintainers/kotlin-mode")
    (synopsis "Major mode for kotlin")
    (description
      "Documentation at https://melpa.org/#/kotlin-mode")
    (license #f)))

(define-public emacs-kotlin-ts-mode
  (package
    (name "emacs-kotlin-ts-mode")
    (version "20231026.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/bricka/emacs-kotlin-ts-mode.git")
               (commit
                 "0cb57244d00616e310ed14fb2f2b29bfa82c649d")))
        (sha256
          (base32
            "1j1mgd9dacp4vabfhqa64asr84d1p48123q1n3cn0lq1nga4l615"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/bricka/emacs-kotlin-ts-mode")
    (synopsis
      "A mode for editing Kotlin files based on tree-sitter")
    (description
      "Documentation at https://melpa.org/#/kotlin-ts-mode")
    (license #f)))

(define-public emacs-kpm-list
  (package
    (name "emacs-kpm-list")
    (version "20170924.1352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KMahoney/kpm-list.git")
               (commit
                 "e0f5112e5ce8ec1b603f4428fa51681c68bb28f5")))
        (sha256
          (base32
            "1achcr3v0d85narnxqpbfxy9qfk537kl83wiq5lyfy3lwqqf7dmp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/KMahoney/kpm-list/")
    (synopsis
      "An emacs buffer list that tries to intelligently group together buffers.")
    (description
      "Documentation at https://melpa.org/#/kpm-list")
    (license #f)))

(define-public emacs-kroman
  (package
    (name "emacs-kroman")
    (version "20150827.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/kroman-el.git")
               (commit
                 "90402b6ae40383e75d8ba97d66eee93eebf40f70")))
        (sha256
          (base32
            "11axxmhdpwgrcyjz200pf5bqzjw9wz4085r8p1n2vr5gx98374fr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Korean hangul romanization")
    (description
      "Documentation at https://melpa.org/#/kroman")
    (license #f)))

(define-public emacs-ksp-cfg-mode
  (package
    (name "emacs-ksp-cfg-mode")
    (version "20190414.2348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lashtear/ksp-cfg-mode.git")
               (commit
                 "faec8bd8456c67276d065eb68c88a30efcef59ef")))
        (sha256
          (base32
            "192s6hz71i0d8bwxn2pdl9yggs2l5fd6jxlxmry8fpk04qg3lqrg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/lashtear/ksp-cfg-mode")
    (synopsis "major mode for editing KSP CFG files")
    (description
      "Documentation at https://melpa.org/#/ksp-cfg-mode")
    (license #f)))

(define-public emacs-ksp-mode
  (package
    (name "emacs-ksp-mode")
    (version "20221220.1136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/youngker/ksp-mode.el.git")
               (commit
                 "89b91b8ed6753867e30aa494e5d80325dfe25569")))
        (sha256
          (base32
            "1pw40a7acs0xxabmyfn359b2zcgmb5c1fv98q1x0276ws0hh0jzw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/youngker/ksp-mode.el")
    (synopsis "Major mode for editing ksp files")
    (description
      "Documentation at https://melpa.org/#/ksp-mode")
    (license #f)))

(define-public emacs-kubectx-mode
  (package
    (name "emacs-kubectx-mode")
    (version "20230914.553")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/terjesannum/emacs-kubectx-mode.git")
               (commit
                 "3153c19a28402a515c53ce22ccc08e750597182e")))
        (sha256
          (base32
            "1cbh5sipwdvr2a8fq4dxglp1vhsxzqyakvg61hv08nbskqadvh89"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/terjesannum/emacs-kubectx-mode")
    (synopsis
      "Change kubectl context/namespace and show in mode line")
    (description
      "Documentation at https://melpa.org/#/kubectx-mode")
    (license #f)))

(define-public emacs-kubedoc
  (package
    (name "emacs-kubedoc")
    (version "20231018.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0bobo/kubedoc.el.git")
               (commit
                 "e169cb7e7254d0c0f1e7a7eda5e27a0092366e1d")))
        (sha256
          (base32
            "0jw5v17yl06whnms25zfcxcabjfm99khqszbpjpjxkv8lg6kdl38"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/r0bobo/kubedoc.el/")
    (synopsis "Kubernetes API Documentation")
    (description
      "Documentation at https://melpa.org/#/kubedoc")
    (license #f)))

(define-public emacs-kubel
  (package
    (name "emacs-kubel")
    (version "20231013.1753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/kubel.git")
               (commit
                 "a84f09cca8cdc71d55aa78304db4156df46d04e8")))
        (sha256
          (base32
            "1m46gj5246ch0hyj7nnl67n305ib6gjqs4wka9mb6dmjrixxwry6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-yaml-mode))
    (arguments
      '(#:files (:defaults (:exclude "kubel-evil.el"))))
    (home-page "https://github.com/abrochard/kubel")
    (synopsis
      "Control Kubernetes with limited permissions")
    (description
      "Documentation at https://melpa.org/#/kubel")
    (license #f)))

(define-public emacs-kubel-evil
  (package
    (name "emacs-kubel-evil")
    (version "20220909.2028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/kubel.git")
               (commit
                 "aa6040d2aff9b8b99eb6692a0227357258622ddb")))
        (sha256
          (base32
            "1sabfz0h9vpskfw44a9g2qny1mrh1cvrrlhkxv5814hx35fxk61g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-kubel emacs-evil))
    (arguments '(#:files ("kubel-evil.el")))
    (home-page "https://github.com/abrochard/kubel")
    (synopsis
      "extension for kubel to provide evil keybindings")
    (description
      "Documentation at https://melpa.org/#/kubel-evil")
    (license #f)))

(define-public emacs-kubernetes
  (package
    (name "emacs-kubernetes")
    (version "20221229.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kubernetes-el/kubernetes-el.git")
               (commit
                 "099004511670c7fd52a619c5758047bb3172ba36")))
        (sha256
          (base32
            "113c490gp69pkq9rnw5s7vfkr8pw14q7lv205gwx8awg129frnpn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-magit-section
            emacs-magit-popup
            emacs-with-editor
            emacs-request
            emacs-s))
    (arguments
      '(#:files
        (:defaults (:exclude "kubernetes-evil.el"))))
    (home-page
      "https://github.com/kubernetes-el/kubernetes-el")
    (synopsis "Magit-like porcelain for Kubernetes")
    (description
      "Documentation at https://melpa.org/#/kubernetes")
    (license #f)))

(define-public emacs-kubernetes-evil
  (package
    (name "emacs-kubernetes-evil")
    (version "20220625.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kubernetes-el/kubernetes-el.git")
               (commit
                 "d26b6caa6e5e3bb2f7cab10aef77e084549fcbb2")))
        (sha256
          (base32
            "1xkmx6nk34y393miaxp7a77gv5pzw2aqyfadq0bb7xiwkdsyif0m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-kubernetes emacs-evil))
    (arguments '(#:files ("kubernetes-evil.el")))
    (home-page "unspecified")
    (synopsis
      "Kubernetes keybindings for evil-mode.")
    (description
      "Documentation at https://melpa.org/#/kubernetes-evil")
    (license #f)))

(define-public emacs-kubernetes-helm
  (package
    (name "emacs-kubernetes-helm")
    (version "20230221.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/kubernetes-helm.git")
               (commit
                 "f70e2efa6ef869143ccb2f158f4ab7df91dcc58f")))
        (sha256
          (base32
            "1nsjnfabg4nqvy5z2pbxjcsqykk9as12frq5lgrypiax42rx2wp0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (home-page
      "https://github.com/abrochard/kubernetes-helm")
    (synopsis
      "extension for helm, the package manager for kubernetes")
    (description
      "Documentation at https://melpa.org/#/kubernetes-helm")
    (license #f)))

(define-public emacs-kubernetes-tramp
  (package
    (name "emacs-kubernetes-tramp")
    (version "20181228.922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gruggiero/kubernetes-tramp.git")
               (commit
                 "8713571b66940f8f3f496b55baa23cdf1df7a869")))
        (sha256
          (base32
            "05xbpdgxglqw7s2chay32s5kmglpd446dg3vh02d1462lh474snf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gruggiero/kubernetes-tramp")
    (synopsis
      "TRAMP integration for kubernetes containers")
    (description
      "Documentation at https://melpa.org/#/kubernetes-tramp")
    (license #f)))

(define-public emacs-kurecolor
  (package
    (name "emacs-kurecolor")
    (version "20221213.124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/kurecolor.git")
               (commit
                 "ac67ceba85839ab1ced96fad605bf023b697263f")))
        (sha256
          (base32
            "0xi330md4av8qczm5973ps2qvmx4fc0z28547viq5as3v897psn2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/emacsfodder/kurecolor.el")
    (synopsis "color editing goodies")
    (description
      "Documentation at https://melpa.org/#/kurecolor")
    (license #f)))

(define-public emacs-kuronami-theme
  (package
    (name "emacs-kuronami-theme")
    (version "20220602.339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inj0h/kuronami.git")
               (commit
                 "a51d5ff3883bd94d0a181bb5d60f747190eda4f6")))
        (sha256
          (base32
            "0mrk8d0z09cbvqisl44ln50bbmfim0j876v91x73428vr7k46z0d"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/inj0h/kuronami")
    (synopsis
      "A deep blue theme with cool autumnal colors")
    (description
      "Documentation at https://melpa.org/#/kuronami-theme")
    (license #f)))

(define-public emacs-kv
  (package
    (name "emacs-kv")
    (version "20140108.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-kv.git")
               (commit
                 "721148475bce38a70e0b678ba8aa923652e8900e")))
        (sha256
          (base32
            "0r0lz2s6gvy04fwnafai668jsf4546h4k6zd6isx5wpk0n33pj5m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("kv.el")))
    (home-page "unspecified")
    (synopsis "key/value data structure functions")
    (description
      "Documentation at https://melpa.org/#/kv")
    (license #f)))

(define-public emacs-kwin
  (package
    (name "emacs-kwin")
    (version "20220120.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/reactormonk/kwin-minor-mode.git")
               (commit
                 "20fac6508e5535a26df783ba05f04d1800b7382c")))
        (sha256
          (base32
            "1zs0wn0ff5hbv4rgqa7137s3269dqi7fg9bam56rw5qrr72lq5a2"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/reactormonk/kwin-minor-mode")
    (synopsis
      "communicatewith the KWin window manager")
    (description
      "Documentation at https://melpa.org/#/kwin")
    (license #f)))

(define-public emacs-laas
  (package
    (name "emacs-laas")
    (version "20230331.1806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tecosaur/LaTeX-auto-activating-snippets.git")
               (commit
                 "a00f0aba237b85b3e5fd60cf84de5759d1bf5d48")))
        (sha256
          (base32
            "0mjq9lkd6r8mlmji0a1i9rjn1xbd6g0swzr3x55k9srla3nm2l0k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex emacs-aas))
    (home-page
      "https://github.com/tecosaur/LaTeX-auto-activating-snippets")
    (synopsis
      "A bundle of as-you-type LaTeX snippets")
    (description
      "Documentation at https://melpa.org/#/laas")
    (license #f)))

(define-public emacs-lab
  (package
    (name "emacs-lab")
    (version "20231106.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/lab.el.git")
               (commit
                 "31ba215e5eb9f5a02190f64b4d5046bf468f0195")))
        (sha256
          (base32
            "1nr7gasl9dvba2k0xqq358fw8fpj5rarm8y7fmqdlin2cp5pg1yd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-memoize
            emacs-request
            emacs-s
            emacs-f))
    (home-page "https://github.com/isamert/lab.el")
    (synopsis "An interface for GitLab")
    (description
      "Documentation at https://melpa.org/#/lab")
    (license #f)))

(define-public emacs-lab-themes
  (package
    (name "emacs-lab-themes")
    (version "20200815.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MetroWind/lab-theme.git")
               (commit
                 "9d7deb9635959d3a50ccb1082eb1207275f4b3e8")))
        (sha256
          (base32
            "0ifpg3vz84x87a1xsx0db79v14bfdnbaha6p4hcvaj67hi58qa81"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MetroWind/lab-theme")
    (synopsis
      "A custom theme carefully constructed in the LAB space")
    (description
      "Documentation at https://melpa.org/#/lab-themes")
    (license #f)))

(define-public emacs-labburn-theme
  (package
    (name "emacs-labburn-theme")
    (version "20221208.1611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksjogo/labburn-theme.git")
               (commit
                 "bd0de2fdcf285d981f32e3e5ebc56fe3c9b589a5")))
        (sha256
          (base32
            "0nj61wqszm6wi4hvvc640iy1b65k8cwfggcys49p30f6f6jk6hlm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ksjogo/labburn-theme")
    (synopsis "A lab color space zenburn theme.")
    (description
      "Documentation at https://melpa.org/#/labburn-theme")
    (license #f)))

(define-public emacs-lacquer
  (package
    (name "emacs-lacquer")
    (version "20230824.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zakudriver/lacquer.git")
               (commit
                 "c8a0fb81f18001b3d510f545ba253ed4f9a50f5b")))
        (sha256
          (base32
            "0vdaq863q0hk79y5i2j9py732b22d7vcdnlcsan88j4rr1c5zbc3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zakudriver/lacquer")
    (synopsis
      "Switch theme/font by selecting from a cache")
    (description
      "Documentation at https://melpa.org/#/lacquer")
    (license #f)))

(define-public emacs-laguna-theme
  (package
    (name "emacs-laguna-theme")
    (version "20220804.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HenryNewcomer/laguna-theme.git")
               (commit
                 "680ab8c936cb1c249b5a6a07976bcc83ef217e25")))
        (sha256
          (base32
            "02ma47pmjavhfdswz3kp6s5icw93f1v9rkyirn0viz6pcxjn6ksd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/HenryNewcomer/laguna-theme")
    (synopsis "An updated blue-green Laguna Theme.")
    (description
      "Documentation at https://melpa.org/#/laguna-theme")
    (license #f)))

(define-public emacs-lambdapi-mode
  (package
    (name "emacs-lambdapi-mode")
    (version "20230728.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Deducteam/lambdapi.git")
               (commit
                 "e16893661355d35db3a48f0821981b72486d4841")))
        (sha256
          (base32
            "1nz3jm68qk6gsfv5g7yz5f690vdva382c47djplswfky3kkyq9rm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eglot
            emacs-math-symbol-lists
            emacs-highlight))
    (arguments
      '(#:files
        ("editors/emacs/*.el"
         (:exclude "editors/emacs/lambdapi-site-file.el"))))
    (home-page
      "https://github.com/Deducteam/lambdapi")
    (synopsis
      "A major mode for editing Lambdapi source code")
    (description
      "Documentation at https://melpa.org/#/lambdapi-mode")
    (license #f)))

(define-public emacs-lammps-mode
  (package
    (name "emacs-lammps-mode")
    (version "20180801.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HaoZeke/lammps-mode.git")
               (commit
                 "a5b68d7a59975770b56ee8f6e66fa4f703a72ffe")))
        (sha256
          (base32
            "1ma33bszv7d6am47n5r74ja4ks7n46m8xfkkr3vcqymlfhbdpq73"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lammps/lammps/tree/master/tools/emacs")
    (synopsis
      "basic syntax highlighting for LAMMPS files")
    (description
      "Documentation at https://melpa.org/#/lammps-mode")
    (license #f)))

(define-public emacs-lang-refactor-perl
  (package
    (name "emacs-lang-refactor-perl")
    (version "20131122.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jplindstrom/emacs-lang-refactor-perl.git")
               (commit
                 "691bd69639de6b7af357e3b7143563ececd9c497")))
        (sha256
          (base32
            "135k7inkvdz51j7al3nndaamrkyn989vlv1mxcp8lwx8cgq0rqfj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jplindstrom/emacs-lang-refactor-perl")
    (synopsis
      "Simple refactorings, primarily for Perl")
    (description
      "Documentation at https://melpa.org/#/lang-refactor-perl")
    (license #f)))

(define-public emacs-langdoc
  (package
    (name "emacs-langdoc")
    (version "20150218.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tom-tan/langdoc.git")
               (commit
                 "2c7223bacb116992d700ecb19a60df5c09c63424")))
        (sha256
          (base32
            "0svci7xs4iysv8ysf93g382arip0xpgi0fllw8xx2vrd70sz7lff"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tom-tan/langdoc/")
    (synopsis
      "Help to define help document mode for various languages")
    (description
      "Documentation at https://melpa.org/#/langdoc")
    (license #f)))

(define-public emacs-langtool
  (package
    (name "emacs-langtool")
    (version "20230222.326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-langtool.git")
               (commit
                 "d86101eafe9a994eb0425e08e7c1795e9cb0cd42")))
        (sha256
          (base32
            "0wbjmkxlj79iffd7v64d6qpv97jc0jwfcy3849dglm8xygx9x7cg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("langtool.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-langtool")
    (synopsis
      "Grammar check utility using LanguageTool")
    (description
      "Documentation at https://melpa.org/#/langtool")
    (license #f)))

(define-public emacs-langtool-ignore-fonts
  (package
    (name "emacs-langtool-ignore-fonts")
    (version "20210526.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cjl8zf/langtool-ignore-fonts.git")
               (commit
                 "c3291c85b733b9047653cbb1f525655394610bdb")))
        (sha256
          (base32
            "1pmpnpbl1xanprmikawcy9v4441q3381mmyp1v0mgf0dyzg871m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-langtool))
    (arguments
      '(#:files (:defaults (:exclude "doc/*"))))
    (home-page
      "https://github.com/cjl8zf/langtool-ignore-fonts")
    (synopsis
      "Force langtool to ignore certain fonts")
    (description
      "Documentation at https://melpa.org/#/langtool-ignore-fonts")
    (license #f)))

(define-public emacs-langtool-popup
  (package
    (name "emacs-langtool-popup")
    (version "20230222.401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-langtool.git")
               (commit
                 "d86101eafe9a994eb0425e08e7c1795e9cb0cd42")))
        (sha256
          (base32
            "0wbjmkxlj79iffd7v64d6qpv97jc0jwfcy3849dglm8xygx9x7cg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (arguments '(#:files ("langtool-popup.el")))
    (home-page
      "https://github.com/mhayashi1120/Emacs-langtool")
    (synopsis
      "Popup message extension for langtool.el")
    (description
      "Documentation at https://melpa.org/#/langtool-popup")
    (license #f)))

(define-public emacs-language-detection
  (package
    (name "emacs-language-detection")
    (version "20161123.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andreasjansson/language-detection.el.git")
               (commit
                 "54a6ecf55304fba7d215ef38a4ec96daff2f35a4")))
        (sha256
          (base32
            "0p8kim8idh7hg9398kpgjawkxq9hb6fraxpamdkflg8gjk0h5ppa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andreasjansson/language-detection.el")
    (synopsis
      "Automatic language detection from code snippets")
    (description
      "Documentation at https://melpa.org/#/language-detection")
    (license #f)))

(define-public emacs-language-id
  (package
    (name "emacs-language-id")
    (version "20231018.1049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-language-id.git")
               (commit
                 "84d7b997a78b78b64fb4b348008a9aaa67467d27")))
        (sha256
          (base32
            "1bpkny62i8w25743ziqj4cv9vblfa0hbgq22zlmgifsihx21h5fd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-language-id")
    (synopsis
      "Library to work with programming language identifiers")
    (description
      "Documentation at https://melpa.org/#/language-id")
    (license #f)))

(define-public emacs-languagetool
  (package
    (name "emacs-languagetool")
    (version "20230325.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PillFall/languagetool.el.git")
               (commit
                 "b136d531129eb488dc4134784e34c4afedcb0c2f")))
        (sha256
          (base32
            "18rynn9gv7kwaivp836lkkllrc51h6yn64x4r279fg1w4psrq94b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/PillFall/Emacs-LanguageTool.el")
    (synopsis
      "LanguageTool integration for grammar and spell check")
    (description
      "Documentation at https://melpa.org/#/languagetool")
    (license #f)))

(define-public emacs-lark-mode
  (package
    (name "emacs-lark-mode")
    (version "20230327.1003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taquangtrung/lark-mode.git")
               (commit
                 "9e19b40df29d273cf3aec9ddd0e739d3b3d9b3a8")))
        (sha256
          (base32
            "1q0hfln8xa78q2r4zw0vm66by8nr9n7pvrn096ys5ggi5835cgah"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taquangtrung/lark-mode")
    (synopsis
      "Major mode for editing Lark parser code")
    (description
      "Documentation at https://melpa.org/#/lark-mode")
    (license #f)))

(define-public emacs-lastfm
  (package
    (name "emacs-lastfm")
    (version "20211018.838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaiolteanu/lastfm.el.git")
               (commit
                 "b4b19f0aadc5087febeeb3f59944a89c4cdcf325")))
        (sha256
          (base32
            "0yp6gzxs6hxfqhdwhp5vldjsxl1y6qvj4i3s5fdvcf0sjdjncvxw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-anaphora
            emacs-memoize
            emacs-elquery
            emacs-s))
    (home-page
      "https://github.com/mihaiolteanu/lastfm.el/")
    (synopsis "Last.fm API for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/lastfm")
    (license #f)))

(define-public emacs-lastpass
  (package
    (name "emacs-lastpass")
    (version "20201229.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/storvik/emacs-lastpass.git")
               (commit
                 "2366de7824b6c5f8e9ec6811d219dc06794e8630")))
        (sha256
          (base32
            "065nbgcs2q8gqw8alfa6lbabma6vjsqzl4mfkfpzgk566dan2x1p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/storvik/emacs-lastpass")
    (synopsis "LastPass command wrapper")
    (description
      "Documentation at https://melpa.org/#/lastpass")
    (license #f)))

(define-public emacs-latex-change-env
  (package
    (name "emacs-latex-change-env")
    (version "20230810.542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/slotThe/change-env.git")
               (commit
                 "968f38f0699c72ed5e8be2d0531424d16280f0f4")))
        (sha256
          (base32
            "04ivfpp1rm4zf47s11qkc9g1dnvymy5xm62q842g77icf12vgv0m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://gitlab.com/slotThe/change-env")
    (synopsis
      "Change in and out of LaTeX environments")
    (description
      "Documentation at https://melpa.org/#/latex-change-env")
    (license #f)))

(define-public emacs-latex-extra
  (package
    (name "emacs-latex-extra")
    (version "20220817.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/latex-extra.git")
               (commit
                 "a81e7588448f85c5fcc3f3fc71cf957d0928a656")))
        (sha256
          (base32
            "0sajg5vmygnkcnmkrpf8r7c4b8v95hgsv1y6pz868jpznmldnxkb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "http://github.com/Malabarba/latex-extra")
    (synopsis
      "Adds several useful functionalities to LaTeX-mode.")
    (description
      "Documentation at https://melpa.org/#/latex-extra")
    (license #f)))

(define-public emacs-latex-labeler
  (package
    (name "emacs-latex-labeler")
    (version "20231014.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/X9hRRDys/latex-labeler.git")
               (commit
                 "d45dedbc74887c59f15c5a3dcd7546d2c29c30a4")))
        (sha256
          (base32
            "1qss7fw2b9rnl6fzb230z5jgs1m8glpaq1qhjkxa7fpm52zc49s5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/X9hRRDys/latex-labeler")
    (synopsis "Simplify equation labeling in LaTeX")
    (description
      "Documentation at https://melpa.org/#/latex-labeler")
    (license #f)))

(define-public emacs-latex-math-preview
  (package
    (name "emacs-latex-math-preview")
    (version "20211228.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/latex-math-preview/latex-math-preview.git")
               (commit
                 "1c082179493eed3ce8bc255f87791eb4acb1fbdb")))
        (sha256
          (base32
            "11kx0fk4lxhwjwy66xy4gvw77ffvghazc1wqld7nbck85wzp33h6"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/latex-math-preview/latex-math-preview")
    (synopsis
      "preview LaTeX mathematical expressions.")
    (description
      "Documentation at https://melpa.org/#/latex-math-preview")
    (license #f)))

(define-public emacs-latex-pretty-symbols
  (package
    (name "emacs-latex-pretty-symbols")
    (version "20151112.1044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/epa095/latex-pretty-symbols.el.git")
               (commit
                 "83d5888147bb734a94dfd4847a11e975a7d86ba8")))
        (sha256
          (base32
            "0h9hncf2ghfkd3i3342ajj1niykhfr0aais3j6sjg1vkm16xbr3b"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/mortiferus/latex-pretty-symbols.el")
    (synopsis
      "Display many latex symbols as their unicode counterparts")
    (description
      "Documentation at https://melpa.org/#/latex-pretty-symbols")
    (license #f)))

(define-public emacs-latex-preview-pane
  (package
    (name "emacs-latex-preview-pane")
    (version "20181008.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jsinglet/latex-preview-pane.git")
               (commit
                 "5297668a89996b50b2b62f99cba01cc544dbed2e")))
        (sha256
          (base32
            "1m4f5p53275k8i9p0y105kkrp9nx1bwn6726my9s5dwnjhr5dnp2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.txt")))
    (home-page
      "http://www.emacswiki.org/emacs/LaTeXPreviewPane")
    (synopsis
      "Makes LaTeX editing less painful by providing a updatable preview pane")
    (description
      "Documentation at https://melpa.org/#/latex-preview-pane")
    (license #f)))

(define-public emacs-latex-table-wizard
  (package
    (name "emacs-latex-table-wizard")
    (version "20230903.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enricoflor/latex-table-wizard.git")
               (commit
                 "b55d215dbef321194dbf10553d4c0d3b244a50f0")))
        (sha256
          (base32
            "0ay07w6pvhh1r2zkyz8lzd71h2qkvcc58xd6sc0pcl0s2i7qfwy5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/enricoflor/latex-table-wizard")
    (synopsis "Magic editing of LaTeX tables")
    (description
      "Documentation at https://melpa.org/#/latex-table-wizard")
    (license #f)))

(define-public emacs-latex-unicode-math-mode
  (package
    (name "emacs-latex-unicode-math-mode")
    (version "20170123.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Christoph-D/latex-unicode-math-mode.git")
               (commit
                 "eb4a5c9f9b00a58d2ca80f90782a851f4c8497b8")))
        (sha256
          (base32
            "1bsqaz14mb092cvq8fk4kkcgifhbpmnndlvvz8qhyfh8i5i92i8b"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.sty")))
    (home-page
      "https://github.com/Christoph-D/latex-unicode-math-mode")
    (synopsis
      "Input method for Unicode math symbols")
    (description
      "Documentation at https://melpa.org/#/latex-unicode-math-mode")
    (license #f)))

(define-public emacs-latexdiff
  (package
    (name "emacs-latexdiff")
    (version "20190827.1651")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/galaunay/latexdiff.el.git")
               (commit
                 "56d0b240867527d1b43d3ddec14059361929b971")))
        (sha256
          (base32
            "1gkhzladgh0dj5pvak822x6nq7f4h6382647flhv7c65fqszscbf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/galaunay/latexdiff.el")
    (synopsis "Latexdiff integration in Emacs")
    (description
      "Documentation at https://melpa.org/#/latexdiff")
    (license #f)))

(define-public emacs-latvian-holidays
  (package
    (name "emacs-latvian-holidays")
    (version "20230326.2030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ashumilov/latvian-holidays.git")
               (commit
                 "125dcfc7106f8d24ff2e80b1c73eeae1de895d58")))
        (sha256
          (base32
            "064kc7fq0z2fp4ml7bzgq6sgbv9hpjwd7hfy2vwwqv7mbz8dhfyy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ashumilov/latvian-holidays")
    (synopsis "Latvian holidays for the calendar")
    (description
      "Documentation at https://melpa.org/#/latvian-holidays")
    (license #f)))

(define-public emacs-launch
  (package
    (name "emacs-launch")
    (version "20130619.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sfllaw/emacs-launch.git")
               (commit
                 "e7c3b573fc05fe4d3d322389079909311542e799")))
        (sha256
          (base32
            "0ciycsqzyj6ld60c7sfqjq59ln3jvk3w9vy606kqzpcvj01ihmv1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("launch.el")))
    (home-page
      "https://github.com/sfllaw/emacs-launch")
    (synopsis
      "launch files with OS-standard associated applications.")
    (description
      "Documentation at https://melpa.org/#/launch")
    (license #f)))

(define-public emacs-launch-mode
  (package
    (name "emacs-launch-mode")
    (version "20170106.512")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iory/launch-mode.git")
               (commit
                 "25ebd4ba77afcbe729901eb74923dbe9ae81c313")))
        (sha256
          (base32
            "1pjb4gwzkk6djzyfqqxf6y5xvrsh4bi5ijg60zrdlnhivggnfbvn"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.py")))
    (home-page "https://github.com/iory/launch-mode")
    (synopsis "Major mode for launch-formatted text")
    (description
      "Documentation at https://melpa.org/#/launch-mode")
    (license #f)))

(define-public emacs-launchctl
  (package
    (name "emacs-launchctl")
    (version "20210611.2243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pekingduck/launchctl-el.git")
               (commit
                 "c9b7e93f5ec6fa504dfb03d60571cf3e5dc38e12")))
        (sha256
          (base32
            "0hbhbyl4qbc9b7hmkjpwclyfh4xnl5j51j18793wrh28xqpbkf0s"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/pekingduck/launchctl-el")
    (synopsis "Interface to launchctl on Mac OS X.")
    (description
      "Documentation at https://melpa.org/#/launchctl")
    (license #f)))

(define-public emacs-lavender-theme
  (package
    (name "emacs-lavender-theme")
    (version "20170808.1313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-lavender-theme.git")
               (commit
                 "ef5e959b95d7fb8152137bc186c4c24e986c1e3c")))
        (sha256
          (base32
            "0pbpns387fmalkakbdl2q7d2y720m7ai7mnydsinjwlkdrshvj4g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Lavender (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/lavender-theme")
    (license #f)))

(define-public emacs-lavenderless-theme
  (package
    (name "emacs-lavenderless-theme")
    (version "20201222.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-colorless-themes))
    (arguments '(#:files ("lavenderless-theme.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A mostly colorless version of lavender-theme")
    (description
      "Documentation at https://melpa.org/#/lavenderless-theme")
    (license #f)))

(define-public emacs-lcb-mode
  (package
    (name "emacs-lcb-mode")
    (version "20160816.630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peter-b/lcb-mode.git")
               (commit
                 "be0768e9aa6f9b8e76f2230f4f7f4d152a766b9a")))
        (sha256
          (base32
            "0mgcqqhjadm8ckp6x37f9j4xcs61g73m9v8qr4zbw115yci2d0xk"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/peter-b/lcb-mode")
    (synopsis "LiveCode Builder major mode")
    (description
      "Documentation at https://melpa.org/#/lcb-mode")
    (license #f)))

(define-public emacs-lcr
  (package
    (name "emacs-lcr")
    (version "20221012.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jyp/lcr.git")
               (commit
                 "6c345112ffb59f3e7babca6c83942f686b5f554b")))
        (sha256
          (base32
            "0hhn0gqkwki0dfk6j759hmbj1ijn4bs550jh3kgy9jfmnb7cd81l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/jyp/lcr")
    (synopsis "lightweight coroutines")
    (description
      "Documentation at https://melpa.org/#/lcr")
    (license #f)))

(define-public emacs-le-thesaurus
  (package
    (name "emacs-le-thesaurus")
    (version "20230112.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AnselmC/le-thesaurus.el.git")
               (commit
                 "83e8df8957a3b8167cc2bf97849a1eca555ce9a6")))
        (sha256
          (base32
            "00phb69hn8w5zl47k5l8gqlxqjm5ig7rz0v4g47hx7xlnhcsfvj4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/AnselmC/le-thesaurus.el")
    (synopsis
      "Query thesaurus.com for synonyms of a given word")
    (description
      "Documentation at https://melpa.org/#/le-thesaurus")
    (license #f)))

(define-public emacs-leader-key
  (package
    (name "emacs-leader-key")
    (version "20231001.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Havner/leader-key.git")
               (commit
                 "64d2a29e2f667399869f2b0334855a647211e50e")))
        (sha256
          (base32
            "02pyqgml6mfsj70qvingq8ff2qvfs35nb28z465mqpcgfvb8xapv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/havner/leader-key")
    (synopsis
      "Leader key configuration (e.g. for god-mode)")
    (description
      "Documentation at https://melpa.org/#/leader-key")
    (license #f)))

(define-public emacs-leaf
  (package
    (name "emacs-leaf")
    (version "20230803.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf.el.git")
               (commit
                 "466e12a4161fdee53bca60a786a460b4680255f1")))
        (sha256
          (base32
            "1nrks5kf50z9rcr5jbs1ap0fqibssbgpg2dlbnnrxqgmzysm8d9q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/conao3/leaf.el")
    (synopsis
      "Simplify your init.el configuration, extended use-package")
    (description
      "Documentation at https://melpa.org/#/leaf")
    (license #f)))

(define-public emacs-leaf-convert
  (package
    (name "emacs-leaf-convert")
    (version "20210816.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-convert.el.git")
               (commit
                 "da86654f1021445cc42c1a5a9195f15097352209")))
        (sha256
          (base32
            "14pvdkknbng44frlf8accpqd1bc9j99x7xjymgrdbyczbq2srv4n"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-leaf emacs-leaf-keywords emacs-ppp))
    (home-page
      "https://github.com/conao3/leaf-convert.el")
    (synopsis "Convert many format to leaf format")
    (description
      "Documentation at https://melpa.org/#/leaf-convert")
    (license #f)))

(define-public emacs-leaf-defaults
  (package
    (name "emacs-leaf-defaults")
    (version "20210301.118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-defaults.el.git")
               (commit
                 "96ce39d4f16736f1e654e24eac16a2603976c724")))
        (sha256
          (base32
            "1z56x3wnyakilgxak2yyf6rf35072996szxfz712lmdwqs6xfqv4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-leaf emacs-leaf-keywords))
    (home-page
      "https://github.com/conao3/leaf-defaults.el")
    (synopsis "Awesome leaf config collections")
    (description
      "Documentation at https://melpa.org/#/leaf-defaults")
    (license #f)))

(define-public emacs-leaf-keywords
  (package
    (name "emacs-leaf-keywords")
    (version "20210816.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-keywords.el.git")
               (commit
                 "849b579f87c263e2f1d7fb7eda93b6ce441f217e")))
        (sha256
          (base32
            "00fnkk6hl9l64dgmkhsqibhna7gdpazs4j28f7833n1dmg626ki6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-leaf))
    (home-page
      "https://github.com/conao3/leaf-keywords.el")
    (synopsis
      "Additional leaf.el keywords for external packages")
    (description
      "Documentation at https://melpa.org/#/leaf-keywords")
    (license #f)))

(define-public emacs-leaf-manager
  (package
    (name "emacs-leaf-manager")
    (version "20211225.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-manager.el.git")
               (commit
                 "a9fb7fda1432d0cf6bd8546d98a11b3fbe1d84e6")))
        (sha256
          (base32
            "13rgx4ny534r0q9fyf2r0r6lhw97c9g7c75gj0nfwynx7fz3cic9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-leaf emacs-leaf-convert emacs-ppp))
    (home-page
      "https://github.com/conao3/leaf-manager.el")
    (synopsis
      "Configuration manager for leaf based init.el")
    (description
      "Documentation at https://melpa.org/#/leaf-manager")
    (license #f)))

(define-public emacs-leaf-tree
  (package
    (name "emacs-leaf-tree")
    (version "20211105.19")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/leaf-tree.el.git")
               (commit
                 "89c3b8842df067bba67663d309f43aa311acdccd")))
        (sha256
          (base32
            "0him39wsl65nmml9as8gfrix707xjxwvjkwmrgxc9qfjwcxvbvsj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-imenu-list))
    (home-page
      "https://github.com/conao3/leaf-tree.el")
    (synopsis
      "Interactive side-bar feature for init.el using leaf")
    (description
      "Documentation at https://melpa.org/#/leaf-tree")
    (license #f)))

(define-public emacs-lean-mode
  (package
    (name "emacs-lean-mode")
    (version "20230611.728")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover/lean-mode.git")
               (commit
                 "99d6a34dc5b12f6e996e9217fa9f6fe4a6af037a")))
        (sha256
          (base32
            "1m6kzhlifzb2qyb1y578r4jbfm73lxs611zgqjng9nbhprymal33"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-f emacs-flycheck))
    (arguments '(#:files ("lean-*.el")))
    (home-page
      "https://github.com/leanprover/lean-mode")
    (synopsis "A major mode for the Lean 3 language")
    (description
      "Documentation at https://melpa.org/#/lean-mode")
    (license #f)))

(define-public emacs-leanote
  (package
    (name "emacs-leanote")
    (version "20161223.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aborn/leanote-emacs.git")
               (commit
                 "d499e7b59bb1f1a2fabc0e4c26fb101ed62ebc7b")))
        (sha256
          (base32
            "1lg4zml26q97bx9jrmjikhnm3d74b12q2li5h8gpxx9m35wc360c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-pcache
            emacs-s
            emacs-async))
    (home-page
      "https://github.com/aborn/leanote-emacs")
    (synopsis
      "A minor mode writing markdown leanote")
    (description
      "Documentation at https://melpa.org/#/leanote")
    (license #f)))

(define-public emacs-learn-ocaml
  (package
    (name "emacs-learn-ocaml")
    (version "20211003.1412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pfitaxel/learn-ocaml.el.git")
               (commit
                 "ac6ef9cbd39f7d9ac0019e28da09aad5bc2cfae5")))
        (sha256
          (base32
            "1gsv9yir8l53qfz280ji7307vawrifxx80g7bb5kyq7s0k5zfsan"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pfitaxel/learn-ocaml.el")
    (synopsis "Emacs frontend for learn-ocaml")
    (description
      "Documentation at https://melpa.org/#/learn-ocaml")
    (license #f)))

(define-public emacs-ledger-import
  (package
    (name "emacs-ledger-import")
    (version "20230904.1837")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/ledger-import.git")
               (commit
                 "e47e8508794462986b982d6ce3d05bcd17c19242")))
        (sha256
          (base32
            "1w4df52bi17ssxrlf6q9zvhjkkkl0bb0jfgs17lph634i52c7w60"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.petton.fr/mpdel/libmpdel")
    (synopsis
      "Fetch OFX files from bank and push them to Ledger")
    (description
      "Documentation at https://melpa.org/#/ledger-import")
    (license #f)))

(define-public emacs-ledger-mode
  (package
    (name "emacs-ledger-mode")
    (version "20230925.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ledger/ledger-mode.git")
               (commit
                 "105d67626e91acb4550ab860e0dc4247c8a4c79e")))
        (sha256
          (base32
            "03g4w8n5zdbpzx2rbjqa95ybybpnxgshznnrhlfa5191afgci7a6"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("ledger-*.el" "doc/*.texi")))
    (home-page "unspecified")
    (synopsis
      "Helper code for use with the \"ledger\" command-line tool")
    (description
      "Documentation at https://melpa.org/#/ledger-mode")
    (license #f)))

(define-public emacs-leerzeichen
  (package
    (name "emacs-leerzeichen")
    (version "20220626.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgeller/leerzeichen.el.git")
               (commit
                 "9d4126d5f6563569080845a69b0867119a9fd6ea")))
        (sha256
          (base32
            "0wfv37gjj8zbbpwj0l5djhqbn7bzznlr4crl96y87l7dk3z090j7"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/fgeller/leerzeichen.el")
    (synopsis
      "Minor mode to display whitespace characters.")
    (description
      "Documentation at https://melpa.org/#/leerzeichen")
    (license #f)))

(define-public emacs-leetcode
  (package
    (name "emacs-leetcode")
    (version "20230524.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaiwk/leetcode.el.git")
               (commit
                 "e5701191a98d043acdc7112f28d67e3d5c848228")))
        (sha256
          (base32
            "0wdqr5lwgzq5rx47dhilcmldnvmrw16rlbaklbnyn3lfbsj8p18w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-graphql
            emacs-spinner
            emacs-aio
            emacs-log4e))
    (home-page
      "https://github.com/kaiwk/leetcode.el")
    (synopsis "An leetcode client")
    (description
      "Documentation at https://melpa.org/#/leetcode")
    (license #f)))

(define-public emacs-legalese
  (package
    (name "emacs-legalese")
    (version "20200119.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/legalese.git")
               (commit
                 "e465471d2d5a62d35073d93e0f8d40387a82e302")))
        (sha256
          (base32
            "0xg4pyyyzd637i7shhq1frbva5rmy2j7y9cnf7zmms6a5qq4k1af"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jorgenschaefer/legalese")
    (synopsis "Add legalese to your program files")
    (description
      "Documentation at https://melpa.org/#/legalese")
    (license #f)))

(define-public emacs-lem
  (package
    (name "emacs-lem")
    (version "20231022.1416")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lem-"
               version
               ".tar"))
        (sha256
          (base32
            "17whg82afxcfrpn7v6bh0yv9g8axdx0sji2w1fxp2bjw7aj3rgca"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-fedi emacs-markdown-mode))
    (home-page
      "https://codeberg.org/martianh/lem.el")
    (synopsis "A basic lemmy client")
    (description
      "Documentation at https://melpa.org/#/lem")
    (license #f)))

(define-public emacs-lemon-mode
  (package
    (name "emacs-lemon-mode")
    (version "20130216.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/lemon-mode.git")
               (commit
                 "155bfced6c9afc8072a0133d3d1baa54c6d67430")))
        (sha256
          (base32
            "0n6jrm5ilm5wzfrh7yjxn3sr5m10hwdm55b179ild32lh4795zj7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A major mode for editing lemon grammar files")
    (description
      "Documentation at https://melpa.org/#/lemon-mode")
    (license #f)))

(define-public emacs-lentic
  (package
    (name "emacs-lentic")
    (version "20221201.47")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/lentic.git")
               (commit
                 "6af878392e127e75409ae0f4bc08837a8f591d88")))
        (sha256
          (base32
            "134rk1kcfkqnzhn51c0vvkj4839d5lbn0g61bqfpkgsvfpn05wh4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-m-buffer emacs-dash))
    (arguments
      '(#:files
        (:defaults
          "lenticular.org"
          (:exclude "build.el" "noisy-change.el"))))
    (home-page "unspecified")
    (synopsis "One buffer as a view of another")
    (description
      "Documentation at https://melpa.org/#/lentic")
    (license #f)))

(define-public emacs-lentic-server
  (package
    (name "emacs-lentic-server")
    (version "20160717.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/lentic-server.git")
               (commit
                 "8e809fafbb27a98f815b544d9d9ee15843eb6a36")))
        (sha256
          (base32
            "1wc1c6hqhbb5x4fi7lp30bsrfww9g12c41lphswy92qzlij4zbww"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lentic emacs-web-server))
    (home-page "unspecified")
    (synopsis "Web Server for Emacs Literate Source")
    (description
      "Documentation at https://melpa.org/#/lentic-server")
    (license #f)))

(define-public emacs-leo
  (package
    (name "emacs-leo")
    (version "20220111.1045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtenders/emacs-leo.git")
               (commit
                 "12c7133c826925e088e0ddb2ae46f51bf3111af1")))
        (sha256
          (base32
            "0789dsylwxd2k2s1r75bxykasr56zwcbfv6dqmqgmvkx17q9cp6q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mtenders/emacs-leo")
    (synopsis "Interface for dict.leo.org")
    (description
      "Documentation at https://melpa.org/#/leo")
    (license #f)))

(define-public emacs-lesim-mode
  (package
    (name "emacs-lesim-mode")
    (version "20230627.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drghirlanda/lesim-mode.git")
               (commit
                 "74bffc63058f64b3399e685cf0fe0a8f18cc491e")))
        (sha256
          (base32
            "1mwr5y9lr3rj91h2fzl70aasivrkkyv280vk7qs8ja63six8pg9b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/drghirlanda/lesim-mode")
    (synopsis
      "Major mode for Learning Simulator scripts")
    (description
      "Documentation at https://melpa.org/#/lesim-mode")
    (license #f)))

(define-public emacs-less-css-mode
  (package
    (name "emacs-less-css-mode")
    (version "20161001.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/less-css-mode.git")
               (commit
                 "c7fa3d56d83206b28657f2e56439dc62280a2bf2")))
        (sha256
          (base32
            "0nz2vhkpmishlx4gga6lljyjrz7lmnwj3vmvml9jykhiqgvnaf70"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/less-css-mode")
    (synopsis
      "Major mode for editing LESS CSS files (lesscss.org)")
    (description
      "Documentation at https://melpa.org/#/less-css-mode")
    (license #f)))

(define-public emacs-letcheck
  (package
    (name "emacs-letcheck")
    (version "20160202.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/letcheck.git")
               (commit
                 "edf188ca2f85349e971b83f164c6484264e79426")))
        (sha256
          (base32
            "06hggcbz98qhfbvp0fxn89j98d0mmki4wc4k8kfzp5fhg071chbi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Fuco1/letcheck")
    (synopsis
      "Check the erroneous assignments in let forms")
    (description
      "Documentation at https://melpa.org/#/letcheck")
    (license #f)))

(define-public emacs-letterbox-mode
  (package
    (name "emacs-letterbox-mode")
    (version "20170702.125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pacha64/letterbox-mode.git")
               (commit
                 "88c67a51d67216d569a28e8423200883fde096dd")))
        (sha256
          (base32
            "1xzzfr525pn2mj7x6xnvccxhls79bfpi5mqhl9ivisnlgj1bvdjw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/pacha64/letterbox-mode")
    (synopsis "hide sensitive text on a buffer")
    (description
      "Documentation at https://melpa.org/#/letterbox-mode")
    (license #f)))

(define-public emacs-leuven-theme
  (package
    (name "emacs-leuven-theme")
    (version "20231108.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fniessen/emacs-leuven-theme.git")
               (commit
                 "ab33c7a526573e1392f7faa22e87735d3706866c")))
        (sha256
          (base32
            "123jqcgg7wam7ym51sd1wc4qvz16qbq7k30pvy3138z9h5kmizac"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fniessen/emacs-leuven-theme")
    (synopsis
      "Elegant Emacs color theme for a white background")
    (description
      "Documentation at https://melpa.org/#/leuven-theme")
    (license #f)))

(define-public emacs-levenshtein
  (package
    (name "emacs-levenshtein")
    (version "20090830.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/levenshtein.git")
               (commit
                 "070925197ebf6b704e6e00c4f2d2ec783f3df38c")))
        (sha256
          (base32
            "1w6rhp723kn1ns7r0gcblp5q8bvncicnjjsgdangbib1a4l2xw79"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Edit distance between two strings.")
    (description
      "Documentation at https://melpa.org/#/levenshtein")
    (license #f)))

(define-public emacs-lexbind-mode
  (package
    (name "emacs-lexbind-mode")
    (version "20141027.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spacebat/lexbind-mode.git")
               (commit
                 "fa0a6848c1cfd3fbf45db43dc2deef16377d887d")))
        (sha256
          (base32
            "167ayfl1k8dnajw173hh67nbwbk4frmjc4fzc515q67m9d7m5932"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/spacebat/lexbind-mode")
    (synopsis
      "Puts the value of lexical-binding in the mode line")
    (description
      "Documentation at https://melpa.org/#/lexbind-mode")
    (license #f)))

(define-public emacs-lexic
  (package
    (name "emacs-lexic")
    (version "20220501.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tecosaur/lexic.git")
               (commit
                 "f9b3de4d9c2dd1ce5022383e1a504b87bf7d1b09")))
        (sha256
          (base32
            "02iz8dh18gb1q97v8ghcd3lavkf28sqbrk0bx6jzzryp69ickk4h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tecosaur/lexic")
    (synopsis
      "A major mode to find out more about words")
    (description
      "Documentation at https://melpa.org/#/lexic")
    (license #f)))

(define-public emacs-lf
  (package
    (name "emacs-lf")
    (version "20210808.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/lf.git")
               (commit
                 "35db92ca765a0544721fdeea036d77b7d192d083")))
        (sha256
          (base32
            "0c22347dfrjdrn0cn4bqqsw8gd1663hkgycxkfivpyg0d734g5nq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "https://alhassy.github.io/lf.el/")
    (synopsis
      "A Language Features library for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/lf")
    (license #f)))

(define-public emacs-lfe-mode
  (package
    (name "emacs-lfe-mode")
    (version "20220822.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rvirding/lfe.git")
               (commit
                 "98ad0008eea233a48e6555343e63322b5bfb8c6a")))
        (sha256
          (base32
            "14bffvmyq6czfhvmcw332a7y4cyr27f75kzk46qlhlqs6l3rahqx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/inferior-lfe.el"
         "emacs/lfe-mode.el"
         "emacs/lfe-indent.el")))
    (home-page "unspecified")
    (synopsis "Lisp Flavoured Erlang mode")
    (description
      "Documentation at https://melpa.org/#/lfe-mode")
    (license #f)))

(define-public emacs-lgr
  (package
    (name "emacs-lgr")
    (version "20230407.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/emacs-lgr.git")
               (commit
                 "4ab6c22bcbc533acace3c854876f40fa9d2f7819")))
        (sha256
          (base32
            "17r1arvxbnllp5c0d67xf0m5d6qn2kmnfmrnc63v66n3d982v8pr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lgr.el")))
    (home-page "https://github.com/Fuco1/emacs-lgr")
    (synopsis "A fully featured logging framework")
    (description
      "Documentation at https://melpa.org/#/lgr")
    (license #f)))

(define-public emacs-libbcel
  (package
    (name "emacs-libbcel")
    (version "20230826.1233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/libbcel.git")
               (commit
                 "35679c86b6d73817fef17df4119a7a45dfc9f33d")))
        (sha256
          (base32
            "0bidqmnga80vafp79a2m3mx20dv1c3iv6hghhl3r7wmn05wjvvhm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://gitlab.petton.fr/bcel/libbcel")
    (synopsis "Library to connect to basecamp 3 API")
    (description
      "Documentation at https://melpa.org/#/libbcel")
    (license #f)))

(define-public emacs-libelcouch
  (package
    (name "emacs-libelcouch")
    (version "20230903.800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/libelcouch.git")
               (commit
                 "c71842fdbe5d297e5b9be97bb2c59ae5f37bf96e")))
        (sha256
          (base32
            "14ca4kglrhbgh5m84kpzhqq87a66z0k3wjm9aw7753b2wvkiq5al"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/DamienCassou/libelcouch/")
    (synopsis "Communication with CouchDB")
    (description
      "Documentation at https://melpa.org/#/libelcouch")
    (license #f)))

(define-public emacs-liberime
  (package
    (name "emacs-liberime")
    (version "20230113.556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/merrickluo/liberime.git")
               (commit
                 "cc9eb9812fd6f68e78ed6a0c0a85da7a18765753")))
        (sha256
          (base32
            "11c2wj00wwbdxqkzl60sd77cp43rja5v8hrvhrvhg75v62kawva2"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "src"
          "emacs-module"
          "LICENSE"
          "Makefile"
          "README.org")))
    (home-page
      "https://github.com/merrickluo/liberime")
    (synopsis "Rime elisp binding")
    (description
      "Documentation at https://melpa.org/#/liberime")
    (license #f)))

(define-public emacs-liblouis
  (package
    (name "emacs-liblouis")
    (version "20220426.657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liblouis/liblouis-mode.git")
               (commit
                 "a341a0c434cdbe7f46956c8db13203c3fc941a34")))
        (sha256
          (base32
            "1pkrwxqf1qyxfyyinsnmvvlydgydxazfi0xsl28f08a5zgknv0ab"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liblouis/liblouis-mode")
    (synopsis
      "Mode for editing liblouis braille translation tables")
    (description
      "Documentation at https://melpa.org/#/liblouis")
    (license #f)))

(define-public emacs-libmpdee
  (package
    (name "emacs-libmpdee")
    (version "20220825.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andyetitmoves/libmpdee.git")
               (commit
                 "9a84e074385cd085622f94e720a968a0e05ceae5")))
        (sha256
          (base32
            "1l2fjdgjknhyvypwybcvbppfj18qn78bv8jss4f9h1mc70b17kca"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Client end library for mpd, a music playing daemon")
    (description
      "Documentation at https://melpa.org/#/libmpdee")
    (license #f)))

(define-public emacs-libmpdel
  (package
    (name "emacs-libmpdel")
    (version "20230816.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpdel/libmpdel.git")
               (commit
                 "ca5397f1d66462e11c9ff4a49d308d92aef31b29")))
        (sha256
          (base32
            "1170lmj79r3hm05j58l9fgxsn57027pa9syplbqhv37cgpram6np"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mpdel/libmpdel")
    (synopsis "Communication with an MPD server")
    (description
      "Documentation at https://melpa.org/#/libmpdel")
    (license #f)))

(define-public emacs-librera-sync
  (package
    (name "emacs-librera-sync")
    (version "20230902.1006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jumper047/librera-sync.git")
               (commit
                 "19cf9496d71daac67ce4b0ebcdf7f6ac2c3e689a")))
        (sha256
          (base32
            "05lhsl9gcv8y1akxpj1xqy56pba82al6izjm88gy8ssns4nr8aji"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-dash))
    (home-page
      "https://github.com/jumper047/librera-sync")
    (synopsis
      "Sync document's position with Librera Reader for Android")
    (description
      "Documentation at https://melpa.org/#/librera-sync")
    (license #f)))

(define-public emacs-lice
  (package
    (name "emacs-lice")
    (version "20220312.2215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/lice-el.git")
               (commit
                 "0b69ba54057146f1473e85c0760029e584e3eb13")))
        (sha256
          (base32
            "06plnrxj6kgnl9mjcbc48mgagpa60yyyyribwicmcgg9pgrs0wad"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "template")))
    (home-page
      "https://github.com/buzztaiki/lice-el")
    (synopsis "License And Header Template")
    (description
      "Documentation at https://melpa.org/#/lice")
    (license #f)))

(define-public emacs-license-snippets
  (package
    (name "emacs-license-snippets")
    (version "20201117.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sei40kr/license-snippets.git")
               (commit
                 "a729748b7d7f38a916fe61f23db6e7446c0a5e8f")))
        (sha256
          (base32
            "1kld7xg1kxb9mq1g20rzay5zdnjyaw4ss7xksr97qik018vf22y8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/sei40kr/license-snippets")
    (synopsis "LICENSE templates for yasnippet")
    (description
      "Documentation at https://melpa.org/#/license-snippets")
    (license #f)))

(define-public emacs-license-templates
  (package
    (name "emacs-license-templates")
    (version "20230311.11")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/license-templates.git")
               (commit
                 "7c3f2b184b75217e21d382c42ceda3d25bf256fe")))
        (sha256
          (base32
            "09jak7208wzfdrqyq43fjcc8s63n6ma99dmw4a8kg6kjc11y4pvl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/jcs-elpa/license-templates")
    (synopsis "Create LICENSE using GitHub API")
    (description
      "Documentation at https://melpa.org/#/license-templates")
    (license #f)))

(define-public emacs-ligature
  (package
    (name "emacs-ligature")
    (version "20220808.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mickeynp/ligature.el.git")
               (commit
                 "5eb950ada991705fdda4456970b0321241ee2bfa")))
        (sha256
          (base32
            "0dv58y4mifx9in3cfwk5d92aggyv5y1kymp94kxz1k8kdki8pa53"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/mickeynp/ligature.el")
    (synopsis
      "Display typographical ligatures in major modes")
    (description
      "Documentation at https://melpa.org/#/ligature")
    (license #f)))

(define-public emacs-ligature-pragmatapro
  (package
    (name "emacs-ligature-pragmatapro")
    (version "20221127.2252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/ligature-pragmatapro.el.git")
               (commit
                 "85f7b15a5cf5f2ee843bc0469e03602a0251c275")))
        (sha256
          (base32
            "1818lwncgx6iayvxpdmlwv1irbj1vdcmwipf464pvz7dmgfnz8hh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ligature))
    (home-page
      "https://gitlab.com/wavexx/ligature-pragmatapro.el")
    (synopsis "PragmataPro support for ligature.el")
    (description
      "Documentation at https://melpa.org/#/ligature-pragmatapro")
    (license #f)))

(define-public emacs-light-soap-theme
  (package
    (name "emacs-light-soap-theme")
    (version "20150607.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/light-soap-theme.git")
               (commit
                 "76a787bd40c6b567ae68ced7f5d9f9f10725e00d")))
        (sha256
          (base32
            "04dik8z2mg6qr4d3fkd26kg29b4c5crvbnc1lfsrzyrik7ipvsi8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/light-soap-theme")
    (license #f)))

(define-public emacs-line-reminder
  (package
    (name "emacs-line-reminder")
    (version "20231030.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/line-reminder.git")
               (commit
                 "1835ea7dbd4943a165c9786d19cebaceff170a71")))
        (sha256
          (base32
            "1606s3ql0wchi6svv4g688nb562n0s4vlxsaspmp78lx51h93955"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-fringe-helper emacs-ov emacs-ht))
    (home-page
      "https://github.com/emacs-vs/line-reminder")
    (synopsis
      "Line annotation for changed and saved lines")
    (description
      "Documentation at https://melpa.org/#/line-reminder")
    (license #f)))

(define-public emacs-line-up-words
  (package
    (name "emacs-line-up-words")
    (version "20180219.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/janestreet/line-up-words.git")
               (commit
                 "7f5f8d232a647e3966f84aaf35aca7cfb1ea15ca")))
        (sha256
          (base32
            "1bbqlgl955y24jsggzc763dagsv7vnlzcav98f15j9gh54p6h8ws"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/janestreet/line-up-words")
    (synopsis "Align words in an intelligent way")
    (description
      "Documentation at https://melpa.org/#/line-up-words")
    (license #f)))

(define-public emacs-lines-at-once
  (package
    (name "emacs-lines-at-once")
    (version "20180422.247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jiahaowork/lines-at-once.el.git")
               (commit
                 "31bce4b79fe16251b7cf118f0d343b0b46f72360")))
        (sha256
          (base32
            "0r3jqkwwsrcj37m0kvk587aanl2wi50z44q2srhk85aiad4in598"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jiahaowork/lines-at-once.el")
    (synopsis
      "Insert and edit multiple lines at once")
    (description
      "Documentation at https://melpa.org/#/lines-at-once")
    (license #f)))

(define-public emacs-lingr
  (package
    (name "emacs-lingr")
    (version "20100807.1731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lugecy/lingr-el.git")
               (commit
                 "4215a8704492d3c860097cbe2649936c22c196df")))
        (sha256
          (base32
            "0rkx0hk3y79rwhjqs3wvgxhg1rj83mxbqkhhm3jfawp8c1av4f40"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/lugecy/lingr-el")
    (synopsis "Lingr Client for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/lingr")
    (license #f)))

(define-public emacs-linguistic
  (package
    (name "emacs-linguistic")
    (version "20181129.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andcarnivorous/linguistic.git")
               (commit
                 "23e47e98cdb09ee61883669b6d8a11bf6449862c")))
        (sha256
          (base32
            "1bz2w43v1w5xlkbmhmb423nisyhja6qkgwhl68r5vjxqj1gxn2xj"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "graphs.org")))
    (home-page
      "https://github.com/andcarnivorous/linguistic")
    (synopsis
      "A package for basic linguistic analysis.")
    (description
      "Documentation at https://melpa.org/#/linguistic")
    (license #f)))

(define-public emacs-lingva
  (package
    (name "emacs-lingva")
    (version "20220910.1435")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lingva-"
               version
               ".el"))
        (sha256
          (base32
            "13w0bp4kz9gck5j3i1wn763618r9i9y55ziwkb0iijklcaik1xgn"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/martianh/lingva.el")
    (synopsis
      "Access Google Translate without tracking via lingva.ml")
    (description
      "Documentation at https://melpa.org/#/lingva")
    (license #f)))

(define-public emacs-link
  (package
    (name "emacs-link")
    (version "20191111.446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myrkr/dictionary-el.git")
               (commit
                 "bdf0aa7761d1c1a3bc0652b2fdc4a54b3acdb06a")))
        (sha256
          (base32
            "1vm9m36ab7hs58xqzr4g8lp2s78qzlcsy57f8yajrhibwfh5jrs6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("link.el")))
    (home-page "unspecified")
    (synopsis "Hypertext links in text buffers")
    (description
      "Documentation at https://melpa.org/#/link")
    (license #f)))

(define-public emacs-link-hint
  (package
    (name "emacs-link-hint")
    (version "20230405.1801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/link-hint.el.git")
               (commit
                 "36ce929331f2838213bcaa1145ece4b73ce84afe")))
        (sha256
          (base32
            "0154dls98zxpdjy8kzcrk9zp5i0aa180rsfr3hsmgq4ayq6v19yv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/noctuid/link-hint.el")
    (synopsis
      "Use avy to open, copy, etc. visible links")
    (description
      "Documentation at https://melpa.org/#/link-hint")
    (license #f)))

(define-public emacs-linkode
  (package
    (name "emacs-linkode")
    (version "20200607.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/linkode.el.git")
               (commit
                 "675e612e30b74764c57de4117d950ea803b15f74")))
        (sha256
          (base32
            "1iqgii1zdv1q2gcknszxfgs09gvylr2l1yvyp104jriyy8qlsakg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erickgnavar/linkode.el")
    (synopsis
      "Generate a linkode snippet with region/buffer content")
    (description
      "Documentation at https://melpa.org/#/linkode")
    (license #f)))

(define-public emacs-linphone
  (package
    (name "emacs-linphone")
    (version "20130524.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zabbal/emacs-linphone.git")
               (commit
                 "99af3db941b7f4e5272bb48bff96c1ce4ceac302")))
        (sha256
          (base32
            "01yv6239z90hvncwmm9g5nh4xvyxv2ig3h4hsmxdn4kacfxvc84n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zabbal/emacs-linphone")
    (synopsis "Emacs interface to Linphone")
    (description
      "Documentation at https://melpa.org/#/linphone")
    (license #f)))

(define-public emacs-linum-off
  (package
    (name "emacs-linum-off")
    (version "20160217.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/linum-off.git")
               (commit
                 "116e66ac259b183e0763b85616888316ab196822")))
        (sha256
          (base32
            "1pvgp76n2qnm01l5f9mkb9yqwfxag9x23wwqbsna66rmvsag69w0"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/auto-indent-mode.el ")
    (synopsis
      "Provides an interface for turning line-numbering off")
    (description
      "Documentation at https://melpa.org/#/linum-off")
    (license #f)))

(define-public emacs-linum-relative
  (package
    (name "emacs-linum-relative")
    (version "20221025.517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/linum-relative.git")
               (commit
                 "8fbe89ad897921849665a3e8da18cee7d0721441")))
        (sha256
          (base32
            "1igyxlnlqbbbivf52ahm9hxhrc29zyql2x9fi7s3rdjh3ki8y55r"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/linum-relative")
    (synopsis
      "display relative line number in emacs.")
    (description
      "Documentation at https://melpa.org/#/linum-relative")
    (license #f)))

(define-public emacs-liquid-types
  (package
    (name "emacs-liquid-types")
    (version "20151202.735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ucsd-progsys/liquid-types.el.git")
               (commit
                 "cc4bacbbf204ef9cf0756f78dfebee2c6ae14d7b")))
        (sha256
          (base32
            "06rnma2xj2vnbvy1bnls59cagk6qsf862bj1zp6xbmpr1a5l9m4z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-dash
            emacs-popup
            emacs-pos-tip
            emacs-flycheck-liquidhs
            emacs-button-lock))
    (home-page "unspecified")
    (synopsis "show inferred liquid-types")
    (description
      "Documentation at https://melpa.org/#/liquid-types")
    (license #f)))

(define-public emacs-liquidmetal
  (package
    (name "emacs-liquidmetal")
    (version "20220704.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/liquidmetal.git")
               (commit
                 "2d8df67f62b3aba0ea3c1dcdd41d83e39e3d8f8f")))
        (sha256
          (base32
            "1x8allkw2az7g6nz9fbak917rd0gydhvcaqs66xx61qhz26sfr0z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/liquidmetal")
    (synopsis
      "A mimetic poly-alloy of the Quicksilver scoring algorithm")
    (description
      "Documentation at https://melpa.org/#/liquidmetal")
    (license #f)))

(define-public emacs-liso-theme
  (package
    (name "emacs-liso-theme")
    (version "20160410.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/caisah/liso-theme.git")
               (commit
                 "844688245eb860d23043455e165ee24503454c81")))
        (sha256
          (base32
            "01ycjy3amzbplp3zf0x5fahsja92gyg2252xhzcyiazmhaz7gkrd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/caisah/liso-theme")
    (synopsis "Eclectic Dark Theme for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/liso-theme")
    (license #f)))

(define-public emacs-lisp-butt-mode
  (package
    (name "emacs-lisp-butt-mode")
    (version "20210215.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/lisp-butt-mode.git")
               (commit
                 "7330f08dd85ee715096f3596df516877894c6c2f")))
        (sha256
          (base32
            "1hlqairbjlrcbzb4r5fjm80znr9hdgny3vgm27dwwxxa340m0r6i"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/lisp-butt-mode")
    (synopsis "Slim Lisp Butts")
    (description
      "Documentation at https://melpa.org/#/lisp-butt-mode")
    (license #f)))

(define-public emacs-lisp-extra-font-lock
  (package
    (name "emacs-lisp-extra-font-lock")
    (version "20181008.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/lisp-extra-font-lock.git")
               (commit
                 "4605eccbe1a7fcbd3cacf5b71249435413b4db4f")))
        (sha256
          (base32
            "152vcp3mdlv33jf5va4rinl1d0k960gnfhbrqqrafazgx9j3ya8w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/lisp-extra-font-lock")
    (synopsis
      "Highlight bound variables and quoted exprs.")
    (description
      "Documentation at https://melpa.org/#/lisp-extra-font-lock")
    (license #f)))

(define-public emacs-lisp-local
  (package
    (name "emacs-lisp-local")
    (version "20210605.1347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lispunion/emacs-lisp-local.git")
               (commit
                 "22e221c9330d2b5dc07e8b2caa34c83ac7c20b0d")))
        (sha256
          (base32
            "10dflrabhn974k9lr4jvib5vs7v45hj9skryc4wjc09wzz5qphpk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lispunion/emacs-lisp-local")
    (synopsis
      "Allow different Lisp indentation in each buffer")
    (description
      "Documentation at https://melpa.org/#/lisp-local")
    (license #f)))

(define-public emacs-lispxmp
  (package
    (name "emacs-lispxmp")
    (version "20170926.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/lispxmp.git")
               (commit
                 "7ad077b4ee91ce8a42f84eeddb9fc7ea4eac7814")))
        (sha256
          (base32
            "1156jynii783v9sjj3a7s20ysa26mqaq22zk5nbia949hwbibx16"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/lispxmp.el")
    (synopsis "Automagic emacs lisp code annotation")
    (description
      "Documentation at https://melpa.org/#/lispxmp")
    (license #f)))

(define-public emacs-lispy
  (package
    (name "emacs-lispy")
    (version "20230314.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/lispy.git")
               (commit
                 "fe44efd21573868638ca86fc8313241148fabbe3")))
        (sha256
          (base32
            "1jgx95fsnnfk5i3mng8ls98xa8ciljl6a50p2zsixmn23biaxx11"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ace-window
            emacs-iedit
            emacs-swiper
            emacs-hydra
            emacs-zoutline))
    (arguments
      '(#:files
        (:defaults
          "lispy-clojure.clj"
          "lispy-clojure.cljs"
          "lispy-python.py")))
    (home-page "https://github.com/abo-abo/lispy")
    (synopsis "vi-like Paredit")
    (description
      "Documentation at https://melpa.org/#/lispy")
    (license #f)))

(define-public emacs-lispyville
  (package
    (name "emacs-lispyville")
    (version "20220715.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/lispyville.git")
               (commit
                 "14ee8711d58b649aeac03581d22b10ab077f06bd")))
        (sha256
          (base32
            "1jlxcr9vikczhryw3xslfy6hzs2ikcf9khbwaw53ymwdxrmphcci"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lispy emacs-evil))
    (home-page
      "https://github.com/noctuid/lispyville")
    (synopsis
      "A minor mode for integrating evil with lispy.")
    (description
      "Documentation at https://melpa.org/#/lispyville")
    (license #f)))

(define-public emacs-list-environment
  (package
    (name "emacs-list-environment")
    (version "20210930.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgtized/list-environment.el.git")
               (commit
                 "0a72a5a9c1abc090b25202a0387e3f766994b053")))
        (sha256
          (base32
            "1prnav7xg1qchfkj1645vsx2wcpawgim0fkyqlsrzf83j278xn7k"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A tabulated process environment editor")
    (description
      "Documentation at https://melpa.org/#/list-environment")
    (license #f)))

(define-public emacs-list-packages-ext
  (package
    (name "emacs-list-packages-ext")
    (version "20151115.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/list-packages-ext.git")
               (commit
                 "b4dd644e4369c9aa66f5bb8895ea49ebbfd0a27a")))
        (sha256
          (base32
            "02l7q5376ydz6a8i9x74bsx5bbxz8xkasmv1lzvf79d3jbg28l1s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-ht emacs-persistent-soft))
    (home-page "unspecified")
    (synopsis "Extras for list-packages")
    (description
      "Documentation at https://melpa.org/#/list-packages-ext")
    (license #f)))

(define-public emacs-list-unicode-display
  (package
    (name "emacs-list-unicode-display")
    (version "20230216.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/list-unicode-display.git")
               (commit
                 "57b4384ebe0c5d10890ee0dfcf66d0b16e5f5060")))
        (sha256
          (base32
            "0182irm3vai6ngl2xlqpj94qzx673rygzik36amrcw2ji9ssf4f9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Search for and list unicode characters by name")
    (description
      "Documentation at https://melpa.org/#/list-unicode-display")
    (license #f)))

(define-public emacs-list-utils
  (package
    (name "emacs-list-utils")
    (version "20230422.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/list-utils.git")
               (commit
                 "f02dcef36330871855346f9eab97eef58d323d9a")))
        (sha256
          (base32
            "1ry6dmfs10b30w37ffyhbz04nilbf5q5dyi73cxr2dbk0j92lzga"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/list-utils")
    (synopsis "List-manipulation utility functions")
    (description
      "Documentation at https://melpa.org/#/list-utils")
    (license #f)))

(define-public emacs-listenbrainz
  (package
    (name "emacs-listenbrainz")
    (version "20230530.741")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/metabrainz.git")
               (commit
                 "74f79b27e08ec405dd6c3331a9bf96a0e744d792")))
        (sha256
          (base32
            "0ia22n4br562k5gyix2bnwk6kmpgvfn7m0kp74ql78qcnc723yy7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (arguments '(#:files ("listenbrainz.el")))
    (home-page
      "https://github.com/zzkt/listenbrainz")
    (synopsis "ListenBrainz API interface")
    (description
      "Documentation at https://melpa.org/#/listenbrainz")
    (license #f)))

(define-public emacs-lister
  (package
    (name "emacs-lister")
    (version "20230204.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/publicimageltd/lister.git")
               (commit
                 "b256c254f670ebaf50134655fbe430025fff41ab")))
        (sha256
          (base32
            "151wn6g49w15bjnqbnq12ig7f9zdi5d1j21yadp0jvb9jjzk6jg1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/publicimageltd/lister")
    (synopsis "Yet another list printer")
    (description
      "Documentation at https://melpa.org/#/lister")
    (license #f)))

(define-public emacs-lit-mode
  (package
    (name "emacs-lit-mode")
    (version "20141205.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HectorAE/lit-mode.git")
               (commit
                 "c61c403afc8333a5649c5421ab1a6341dc1c7d92")))
        (sha256
          (base32
            "0mr0king5dj20vdycpszxnfs9ch808fhcz3q7svxfngj3d3671wd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for lit")
    (description
      "Documentation at https://melpa.org/#/lit-mode")
    (license #f)))

(define-public emacs-litable
  (package
    (name "emacs-litable")
    (version "20221028.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/litable.git")
               (commit
                 "0a75befedbf826c9779f83500792b044658f2374")))
        (sha256
          (base32
            "14612mv4m8zrh0skshnbcl47dvd9ih2jn80svyyq3hg7dxvmh5wg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "dynamic evaluation replacement with emacs")
    (description
      "Documentation at https://melpa.org/#/litable")
    (license #f)))

(define-public emacs-litanize
  (package
    (name "emacs-litanize")
    (version "20230419.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/litanizer.git")
               (commit
                 "9830fb0eed3ea0ab04d4fdb58856eac23a0c17b4")))
        (sha256
          (base32
            "1v0m7m2ff8fkay0m00wwx96a9z3bfj2q98lfkajb1kp1r3lzh9bb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-enlive emacs-s))
    (home-page "https://github.com/zzkt/litanizer")
    (synopsis "Generate \"Latour Litanies\"")
    (description
      "Documentation at https://melpa.org/#/litanize")
    (license #f)))

(define-public emacs-litecoin-ticker
  (package
    (name "emacs-litecoin-ticker")
    (version "20160612.11")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/llcc/btcbox-ticker.git")
               (commit
                 "3d8047c736e4ee0b8638953f8cc63eaefad34106")))
        (sha256
          (base32
            "03iggfi3r5xjh9yhhpr1pgyayriycyybf8qnrhqkqcamh77kq21f"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("litecoin-ticker.el")))
    (home-page "unspecified")
    (synopsis "litecoin price in modeline")
    (description
      "Documentation at https://melpa.org/#/litecoin-ticker")
    (license #f)))

(define-public emacs-literal-string
  (package
    (name "emacs-literal-string")
    (version "20191023.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joodie/literal-string-mode.git")
               (commit
                 "afffa86e626798ee9f9188ea3be2d5ee6ad17c39")))
        (sha256
          (base32
            "0nh14f3fv0b4i3rlx120s9a0s8gsaip0r15ki38446igl1macbq2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edit-indirect))
    (home-page
      "https://github.com/joodie/literal-string-mode/")
    (synopsis
      "edit string literals in a dedicated buffer")
    (description
      "Documentation at https://melpa.org/#/literal-string")
    (license #f)))

(define-public emacs-literate-calc-mode
  (package
    (name "emacs-literate-calc-mode")
    (version "20231021.804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sulami/literate-calc-mode.el.git")
               (commit
                 "2579d7b28994bb16c3e02577953e7d9669121288")))
        (sha256
          (base32
            "03hzahbjv19krp9jfrh1haqicm9n8ldb05swvbwzy6cq1paslhj9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/sulami/literate-calc-mode.el")
    (synopsis "Inline results from calc")
    (description
      "Documentation at https://melpa.org/#/literate-calc-mode")
    (license #f)))

(define-public emacs-literate-coffee-mode
  (package
    (name "emacs-literate-coffee-mode")
    (version "20170211.1515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/literate-coffee-mode.git")
               (commit
                 "55ce0305495f4a38c8063c4bd63deb1e1252373d")))
        (sha256
          (base32
            "1gm89azjgsdg0c7z9yprpjbph211c5jnqv11pkf1i1r1wzx0wanj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-coffee-mode))
    (home-page
      "https://github.com/syohex/emacs-literate-coffee-mode")
    (synopsis "major-mode for Literate CoffeeScript")
    (description
      "Documentation at https://melpa.org/#/literate-coffee-mode")
    (license #f)))

(define-public emacs-literate-elisp
  (package
    (name "emacs-literate-elisp")
    (version "20220626.932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jingtaozf/literate-elisp.git")
               (commit
                 "62c9ed0478d7e8aa832f848074e15c5be2a0cae7")))
        (sha256
          (base32
            "1z5cvbrpvz24xc8fm753rz3phkmpfpq77kh4r57qcp3fssy8rn02"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jingtaozf/literate-elisp")
    (synopsis
      "Load Emacs Lisp code blocks from Org files")
    (description
      "Documentation at https://melpa.org/#/literate-elisp")
    (license #f)))

(define-public emacs-litex-mode
  (package
    (name "emacs-litex-mode")
    (version "20221107.147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Atreyagaurav/litex-mode.git")
               (commit
                 "ada0a841829759147fc102316459959b92702559")))
        (sha256
          (base32
            "0bmxml82kpw1dx9pkh95jzhxm4y1fwivwbday6spfbdslagmbz9v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-units-mode))
    (home-page
      "https://github.com/Atreyagaurav/litex-mode")
    (synopsis
      "Minor mode for converting lisp to LaTeX")
    (description
      "Documentation at https://melpa.org/#/litex-mode")
    (license #f)))

(define-public emacs-live-code-talks
  (package
    (name "emacs-live-code-talks")
    (version "20180907.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/live-code-talks.git")
               (commit
                 "97f16a9ee4e6ff3e0f9291eaead772c66e3e12ae")))
        (sha256
          (base32
            "1clcm1yps38wdyj415hh7bl20fcpfin92hh5njsldqbvgcpndaqi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-narrowed-page-navigation))
    (home-page "unspecified")
    (synopsis
      "Support for slides with live code in them")
    (description
      "Documentation at https://melpa.org/#/live-code-talks")
    (license #f)))

(define-public emacs-live-preview
  (package
    (name "emacs-live-preview")
    (version "20201010.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-live-preview.git")
               (commit
                 "603a4a1759fbec92e7a1cabc249517c78e59ce7e")))
        (sha256
          (base32
            "1kbfv6qs1wpj0ydg9mc139ifn29rnk6c9p6y5jnvzj15qbd0iih4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-live-preview")
    (synopsis
      "Live preview by any shell command while editing")
    (description
      "Documentation at https://melpa.org/#/live-preview")
    (license #f)))

(define-public emacs-live-py-mode
  (package
    (name "emacs-live-py-mode")
    (version "20231004.537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/donkirkby/live-py-plugin.git")
               (commit
                 "7c6cacd31c41e46b7af4e5d53467160c215a46c7")))
        (sha256
          (base32
            "1vph9vv8g4l17m1hkwcs86nddk4kdjvdhlvk06962v2x8jy4lgqm"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs-live-py-mode/live-py-mode.el"
         "plugin/PySrc/*")))
    (home-page
      "http://donkirkby.github.io/live-py-plugin/")
    (synopsis "Live Coding in Python")
    (description
      "Documentation at https://melpa.org/#/live-py-mode")
    (license #f)))

(define-public emacs-lively
  (package
    (name "emacs-lively")
    (version "20171005.754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/lively.git")
               (commit
                 "348675828c6a81bfa1ac311ca465aad813542c1b")))
        (sha256
          (base32
            "1j8w63hhk1wcxcfqz0wimqijp7p1m8a2n947gwqv8nk1wm40aqg3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "interactively updating text")
    (description
      "Documentation at https://melpa.org/#/lively")
    (license #f)))

(define-public emacs-livereload
  (package
    (name "emacs-livereload")
    (version "20170629.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/emacs-livereload.git")
               (commit
                 "1e501d7e46dbd476c2c7cc9d20b5ac9d41fb1955")))
        (sha256
          (base32
            "1z1v2panxrqpam5ysnilx83y6b4dwxmxqhmbgjwfyd1bdmr4iya4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (arguments
      '(#:files (:defaults "livereload.js")))
    (home-page "unspecified")
    (synopsis "Livereload server")
    (description
      "Documentation at https://melpa.org/#/livereload")
    (license #f)))

(define-public emacs-livescript-mode
  (package
    (name "emacs-livescript-mode")
    (version "20221015.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yhisamatsu/livescript-mode.git")
               (commit
                 "e71a82a400e9d451c966c397bb8fa7887d35637b")))
        (sha256
          (base32
            "1z3vzbhcd1dp7vlk119ap6dnl7c3dlj7lcxg7gvy3xgzqvxkpijq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yhisamatsu/livescript-mode")
    (synopsis
      "Major mode for editing LiveScript files")
    (description
      "Documentation at https://melpa.org/#/livescript-mode")
    (license #f)))

(define-public emacs-livid-mode
  (package
    (name "emacs-livid-mode")
    (version "20131116.1344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pandeiro/livid-mode.git")
               (commit
                 "dfe5212fa64738bc4138bfebf349fbc8bc237c26")))
        (sha256
          (base32
            "178ldzpk8a9m9abn8xlplxn5jgcca71dpkp82bs5g7bsccp3rx6p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-skewer-mode emacs-s))
    (home-page
      "https://github.com/pandeiro/livid-mode")
    (synopsis
      "Live browser eval of JavaScript every time a buffer changes")
    (description
      "Documentation at https://melpa.org/#/livid-mode")
    (license #f)))

(define-public emacs-ll-debug
  (package
    (name "emacs-ll-debug")
    (version "20211002.1031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/replrep/ll-debug.git")
               (commit
                 "a2cfeab46e5100c348b35987fae34f9ea76d7c0b")))
        (sha256
          (base32
            "1pp092g79grn6dxdl9c61qrdgq2ni7m0prk6kjjfn348prs9gjsk"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/replrep/ll-debug")
    (synopsis "Low level debug tools")
    (description
      "Documentation at https://melpa.org/#/ll-debug")
    (license #f)))

(define-public emacs-llama
  (package
    (name "emacs-llama")
    (version "20230831.2227")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/llama-"
               version
               ".tar"))
        (sha256
          (base32
            "08kabqd6jkq7ibyskldg0wgk703j4dpyg6a3h7a9ay3wzcq0i7s7"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~tarsius/llama")
    (synopsis "Compact syntax for short lambda")
    (description
      "Documentation at https://melpa.org/#/llama")
    (license #f)))

(define-public emacs-llama-cpp
  (package
    (name "emacs-llama-cpp")
    (version "20231015.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kurnevsky/llama-cpp.el.git")
               (commit
                 "3e406c53cb82ec1be056dcef40ac37d474852524")))
        (sha256
          (base32
            "01jy3va6d02z2y9a5abzc3jajmwzcbfkz8p9q4hi8zp0b66ji35r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/kurnevsky/llama.el")
    (synopsis "A client for llama-cpp server")
    (description
      "Documentation at https://melpa.org/#/llama-cpp")
    (license #f)))

(define-public emacs-lms
  (package
    (name "emacs-lms")
    (version "20210820.2200")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lms-"
               version
               ".el"))
        (sha256
          (base32
            "0bdw8nrjhnnrdfmpchhx0sb96rk3fndjjykcz4d9z78mjwglks34"))))
    (build-system melpa-build-system)
    (home-page "https://hg.serna.eu/emacs/lms")
    (synopsis
      "Squeezebox / Logitech Media Server frontend")
    (description
      "Documentation at https://melpa.org/#/lms")
    (license #f)))

(define-public emacs-load-bash-alias
  (package
    (name "emacs-load-bash-alias")
    (version "20230310.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daviderestivo/load-bash-alias.git")
               (commit
                 "5daab364e65bdd7abe531b8557d88342b446f0c0")))
        (sha256
          (base32
            "1ri3plim7zk5k01fnvc82xy8p4nrzq17k63dgqgfrw615wid2sfk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/daviderestivo/load-bash-alias")
    (synopsis
      "Convert bash aliases into eshell ones")
    (description
      "Documentation at https://melpa.org/#/load-bash-alias")
    (license #f)))

(define-public emacs-load-env-vars
  (package
    (name "emacs-load-env-vars")
    (version "20180511.2210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diasjorge/emacs-load-env-vars.git")
               (commit
                 "3808520efaf9492033f6e11a9bffd68eabf02a0f")))
        (sha256
          (base32
            "0yw1ihns914k8va5mhphch1zix09x22cpgrbw968mh8hviknyvzr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/diasjorge/emacs-load-env-vars")
    (synopsis
      "Load environment variables from files")
    (description
      "Documentation at https://melpa.org/#/load-env-vars")
    (license #f)))

(define-public emacs-load-relative
  (package
    (name "emacs-load-relative")
    (version "20230214.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocky/emacs-load-relative.git")
               (commit
                 "b7987c265a64435299d6b02f960ed2c894c4a145")))
        (sha256
          (base32
            "1jmi1j8fkvwfawd9q8b6yhqbg8frckjxsgf9jwgiqw9cvakz6wbf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rocky/emacs-load-relative")
    (synopsis
      "Relative file load (within a multi-file Emacs package)")
    (description
      "Documentation at https://melpa.org/#/load-relative")
    (license #f)))

(define-public emacs-load-theme-buffer-local
  (package
    (name "emacs-load-theme-buffer-local")
    (version "20120702.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vic/color-theme-buffer-local.git")
               (commit
                 "e606dec66f16a06140b9aad625a4fd52bca4f936")))
        (sha256
          (base32
            "0c04fy3hc8wc0aabilqx9mcipmd41rmshqjxc3z8m1w0bm4288g1"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("load-theme-buffer-local.el")))
    (home-page
      "http://github.com/vic/color-theme-buffer-local")
    (synopsis
      "Install emacs24 color themes by buffer.")
    (description
      "Documentation at https://melpa.org/#/load-theme-buffer-local")
    (license #f)))

(define-public emacs-loc-changes
  (package
    (name "emacs-loc-changes")
    (version "20230214.1036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocky/emacs-loc-changes.git")
               (commit
                 "622371e432f50626aaac82f8ee2841f71685b0fb")))
        (sha256
          (base32
            "1kfgmpnj26h8y063rqs39k4c98yy840mkj2pblm7vm0s1fhddj1f"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("loc-changes.el")))
    (home-page
      "https://github.com/rocky/emacs-loc-changes")
    (synopsis
      "keep track of positions even after buffer changes")
    (description
      "Documentation at https://melpa.org/#/loc-changes")
    (license #f)))

(define-public emacs-loccur
  (package
    (name "emacs-loccur")
    (version "20210224.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/loccur.git")
               (commit
                 "01b7afa62589432a98171074abb8c5a1e089034a")))
        (sha256
          (base32
            "1b1x1xsiwqzsiss1jc6w990v1vfvbn5d5w67yzmx59s9ldjmdqq2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fourier/loccur")
    (synopsis
      "Perform an occur-like folding in current buffer")
    (description
      "Documentation at https://melpa.org/#/loccur")
    (license #f)))

(define-public emacs-lockfile-mode
  (package
    (name "emacs-lockfile-mode")
    (version "20170625.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/preetpalS/emacs-lockfile-mode.git")
               (commit
                 "fcfef88460cb3cd67c4d83a1801d0326d282feac")))
        (sha256
          (base32
            "1dh41a8dj8h3lrhjajaz886vsimflshk6bc08w71rwvjyy2k8xil"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/preetpalS/emacs-lockfile-mode")
    (synopsis "Major mode for .lock files")
    (description
      "Documentation at https://melpa.org/#/lockfile-mode")
    (license #f)))

(define-public emacs-lodgeit
  (package
    (name "emacs-lodgeit")
    (version "20190802.1308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ionrock/lodgeit-el.git")
               (commit
                 "442637194d48a7105b7747b8d98772f5899f9e21")))
        (sha256
          (base32
            "1lw9d6908si7rw5802vwpnfklpahqsabkl21nzg77a4pp3pgy80v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ionrock/lodgeit-el")
    (synopsis "Paste to a lodgeit powered pastebin")
    (description
      "Documentation at https://melpa.org/#/lodgeit")
    (license #f)))

(define-public emacs-log4e
  (package
    (name "emacs-log4e")
    (version "20211019.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/log4e.git")
               (commit
                 "737d275eac28dbdfb0b26d28e99da148bfce9d16")))
        (sha256
          (base32
            "1yagzwai4l9cf8am6a3fixv7n6yv81vx2yc4lcwdavclk81ghfrz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/aki2o/log4e")
    (synopsis "provide logging framework for elisp")
    (description
      "Documentation at https://melpa.org/#/log4e")
    (license #f)))

(define-public emacs-log4j-mode
  (package
    (name "emacs-log4j-mode")
    (version "20230826.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dykstrom/log4j-mode.git")
               (commit
                 "45d5e3ee918f502a160c3a131ce75fd3c38e5c6e")))
        (sha256
          (base32
            "0y8nqn0bz2vsil4m3rs5l4nmj39q6xl8mjw2lllafnn4cj78q6vr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*.el")))
    (home-page
      "https://github.com/dykstrom/log4j-mode")
    (synopsis "Major mode for viewing log files")
    (description
      "Documentation at https://melpa.org/#/log4j-mode")
    (license #f)))

(define-public emacs-logalimacs
  (package
    (name "emacs-logalimacs")
    (version "20131021.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/logaling/logalimacs.git")
               (commit
                 "8286e39502250fc6c3c6656a7f46a8eee8e9a713")))
        (sha256
          (base32
            "0lj3i9i3mg17xws13gzx8myc6d7djgsj47yx4kaq5hycgkni1p7q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popwin emacs-popup emacs-stem))
    (arguments '(#:files ("logalimacs.el")))
    (home-page
      "https://github.com/logaling/logalimacs")
    (synopsis
      "Front-end to logaling-command for Ruby gems")
    (description
      "Documentation at https://melpa.org/#/logalimacs")
    (license #f)))

(define-public emacs-logito
  (package
    (name "emacs-logito")
    (version "20201226.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/logito.git")
               (commit
                 "d5934ce10ba3a70d3fcfb94d742ce3b9136ce124")))
        (sha256
          (base32
            "0bnkc6smvaq37q08q1wbrxw9mlcfbrax304fxw4fx7pc1587av0d"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "logging library for Emacs")
    (description
      "Documentation at https://melpa.org/#/logito")
    (license #f)))

(define-public emacs-logms
  (package
    (name "emacs-logms")
    (version "20220704.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/logms.git")
               (commit
                 "c5c2e8c3850417d8c1b0733b77a364002805863c")))
        (sha256
          (base32
            "0ifjv4c13jd2cgq3l3n88bsca2nayk40wm3v08a86ywmr9bpfrfb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-ht))
    (home-page "https://github.com/jcs-elpa/logms")
    (synopsis
      "Log message with clickable links to context")
    (description
      "Documentation at https://melpa.org/#/logms")
    (license #f)))

(define-public emacs-lognav-mode
  (package
    (name "emacs-lognav-mode")
    (version "20220410.1344")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lognav-mode-"
               version
               ".el"))
        (sha256
          (base32
            "0xzah5n869v29zcvp88sdhynf3wqgq994s5lphgkf4hy7v76gvk7"))))
    (build-system melpa-build-system)
    (home-page
      "https://hg.osdn.net/view/lognav-mode/lognav-mode")
    (synopsis "Navigate Log Error Messages")
    (description
      "Documentation at https://melpa.org/#/lognav-mode")
    (license #f)))

(define-public emacs-logpad
  (package
    (name "emacs-logpad")
    (version "20201113.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dertuxmalwieder/logpad.el.git")
               (commit
                 "166543873e665936b468d9f120155cce515da3f8")))
        (sha256
          (base32
            "1zk14cif28pz45i2f6p8x1b1cvz0xqjhicj75cb87icy7gvpf2pa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dertuxmalwieder/logpad.el")
    (synopsis
      "Simulate Windows Notepad for logging.")
    (description
      "Documentation at https://melpa.org/#/logpad")
    (license #f)))

(define-public emacs-logstash-conf
  (package
    (name "emacs-logstash-conf")
    (version "20210123.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/logstash-conf.el.git")
               (commit
                 "ebc4731c45709ad1e0526f4f4164020ae83cbeff")))
        (sha256
          (base32
            "1bjmd1xy45p4v2307sxd6mna9iqxvvz82sx5jbdf3hz5d71w5vfn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "basic mode for editing logstash configuration")
    (description
      "Documentation at https://melpa.org/#/logstash-conf")
    (license #f)))

(define-public emacs-logview
  (package
    (name "emacs-logview")
    (version "20231014.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doublep/logview.git")
               (commit
                 "9140067afdc2f0d1eb493dc4dfdb53645289dd2b")))
        (sha256
          (base32
            "1sjyxm1a1h971ak5l1js4inx921pf3wx15h220j2pvj4d7arj6f8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-datetime emacs-extmap))
    (home-page "https://github.com/doublep/logview")
    (synopsis "Major mode for viewing log files")
    (description
      "Documentation at https://melpa.org/#/logview")
    (license #f)))

(define-public emacs-lol-data-dragon
  (package
    (name "emacs-lol-data-dragon")
    (version "20200705.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/lol-data-dragon.el.git")
               (commit
                 "0deec9867bd7ba96220ee2968a9b2a94fd474431")))
        (sha256
          (base32
            "136x1yqdzjh6a2vhyd73yhgg6kmwl00c5c14ny5davlghwd5g7aw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/lol-data-dragon.el")
    (synopsis
      "Browse Champions of League of Legends on Data Dragon")
    (description
      "Documentation at https://melpa.org/#/lol-data-dragon")
    (license #f)))

(define-public emacs-lolcat
  (package
    (name "emacs-lolcat")
    (version "20190527.1145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/lolcat.el.git")
               (commit
                 "4855e587a3b9681c077dac4b9f166dd860f439a4")))
        (sha256
          (base32
            "0nbrc3wjmmy70ggwmzagkh5j1my7x6y67fyqgddkdrbnw543gly0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/lolcat.el")
    (synopsis "Rainbows and unicorns!")
    (description
      "Documentation at https://melpa.org/#/lolcat")
    (license #f)))

(define-public emacs-lolcode-mode
  (package
    (name "emacs-lolcode-mode")
    (version "20111002.847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bodil/lolcode-mode.git")
               (commit
                 "1914f1ba87587ecf5f175eeb2144c28e9f039317")))
        (sha256
          (base32
            "0pyfgywmmnlz1arvdxwyw96gr6xcg2sp3bqjli8xfcl8i0nww4kb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bodil/lolcode-mode")
    (synopsis "Major mode for editing LOLCODE")
    (description
      "Documentation at https://melpa.org/#/lolcode-mode")
    (license #f)))

(define-public emacs-look-dired
  (package
    (name "emacs-look-dired")
    (version "20160729.2323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/look-dired.git")
               (commit
                 "9bfa4e5e6f3810705b6426c88493ea0bf6b15640")))
        (sha256
          (base32
            "1yagp35ylznrh3a5ahpzrrxi6ma69ppwqsab3cwss54bi4f02ihn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-look-mode))
    (home-page
      "https://github.com/vapniks/look-dired")
    (synopsis
      "Extensions to look-mode for dired buffers")
    (description
      "Documentation at https://melpa.org/#/look-dired")
    (license #f)))

(define-public emacs-look-mode
  (package
    (name "emacs-look-mode")
    (version "20220626.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/petermao/look-mode.git")
               (commit
                 "726c5b9098926278603a83e978b488371c0e9143")))
        (sha256
          (base32
            "00c9v9jp7bgqr0bi0j6fhl6j2fj2xfk7lxrczxbcsvpx1896il93"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "quick file viewer for image and text file browsing")
    (description
      "Documentation at https://melpa.org/#/look-mode")
    (license #f)))

(define-public emacs-loop
  (package
    (name "emacs-loop")
    (version "20160813.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/loop.el.git")
               (commit
                 "e22807f83a0890dc8a904c51ee0742c34efccc6c")))
        (sha256
          (base32
            "1c89hsi0h783s96d322mvqwlf00ndm2qnrc165wpxrdbns38kbbv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("loop.el")))
    (home-page "unspecified")
    (synopsis "friendly imperative loop structures")
    (description
      "Documentation at https://melpa.org/#/loop")
    (license #f)))

(define-public emacs-loophole
  (package
    (name "emacs-loophole")
    (version "20221126.1556")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/0x60df/loophole.git")
               (commit
                 "dadc3fadc68b13501c4dbe89109f30deb0d3441a")))
        (sha256
          (base32
            "1qjifn3rzqs0k7j2mfc98vkni7mzszc4pqd0i5zz9xald61di1dc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/0x60df/loophole")
    (synopsis "Manage temporary key bindings")
    (description
      "Documentation at https://melpa.org/#/loophole")
    (license #f)))

(define-public emacs-loopy
  (package
    (name "emacs-loopy")
    (version "20231023.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/okamsn/loopy.git")
               (commit
                 "3819e0f74dbde83822fb1d5d26444c3a5c63f408")))
        (sha256
          (base32
            "0w1gffzg2rjimwfwz6wrgskadjsd8cz7hnaqy6da022mskifzh1n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files (:defaults (:exclude "loopy-dash.el"))))
    (home-page "https://github.com/okamsn/loopy")
    (synopsis "A looping macro")
    (description
      "Documentation at https://melpa.org/#/loopy")
    (license #f)))

(define-public emacs-loopy-dash
  (package
    (name "emacs-loopy-dash")
    (version "20230501.225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/okamsn/loopy.git")
               (commit
                 "fdc5f6cf687bdde7b19f9252d1d6c0f49d0ede54")))
        (sha256
          (base32
            "1arkrg9rx7dd8lnwa6y3qrl4z3r81mmdl3mg9had230mpd9bwij5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-loopy emacs-dash))
    (arguments '(#:files ("loopy-dash.el")))
    (home-page "https://github.com/okamsn/loopy")
    (synopsis "Dash destructuring for `loopy'")
    (description
      "Documentation at https://melpa.org/#/loopy-dash")
    (license #f)))

(define-public emacs-lorem-ipsum
  (package
    (name "emacs-lorem-ipsum")
    (version "20221214.1857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jschaf/emacs-lorem-ipsum.git")
               (commit
                 "4e87a899868e908a7a9e1812831d76c8d072f885")))
        (sha256
          (base32
            "10l0dmnp1kjyca5jqbf4j98xchcbf9grlv0nv3ygf167vps40il6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jschaf/emacs-lorem-ipsum")
    (synopsis "Insert dummy pseudo Latin text")
    (description
      "Documentation at https://melpa.org/#/lorem-ipsum")
    (license #f)))

(define-public emacs-lox-mode
  (package
    (name "emacs-lox-mode")
    (version "20200619.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/timmyjose-projects/lox-mode.git")
               (commit
                 "b6935b3f5b131d2c1c7685cf6464274f7cd64943")))
        (sha256
          (base32
            "0yx6j44284zv1ldqk44xfgqbrkcraznr0xfpaxy7797bmn9bajnp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/timmyjose-projects/lox-mode")
    (synopsis
      "Major mode for the Lox programming language")
    (description
      "Documentation at https://melpa.org/#/lox-mode")
    (license #f)))

(define-public emacs-lpy
  (package
    (name "emacs-lpy")
    (version "20231026.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/lpy.git")
               (commit
                 "2c086ec162d4456b99a6095c3c335382a8304734")))
        (sha256
          (base32
            "0vrc7q7b872mm5shi6s7x5wx2d8znnmjd1adsjdxwnaqap4x98gd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lispy))
    (home-page "https://github.com/abo-abo/lpy")
    (synopsis "A lispy interface to Python")
    (description
      "Documentation at https://melpa.org/#/lpy")
    (license #f)))

(define-public emacs-lsp-cfn
  (package
    (name "emacs-lsp-cfn")
    (version "20230701.1533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LaurenceWarne/lsp-cfn.el.git")
               (commit
                 "afef283ae27dc7dfbec997982ba5dc0e062f0a03")))
        (sha256
          (base32
            "1nfq1x6xi345hyk92gac3kpp1jkn1gfml810di3m2pp54j75wiv7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-yaml-mode))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/LaurenceWarne/lsp-cfn.el")
    (synopsis "LSP integration for cfn-lsp-extra")
    (description
      "Documentation at https://melpa.org/#/lsp-cfn")
    (license #f)))

(define-public emacs-lsp-dart
  (package
    (name "emacs-lsp-dart")
    (version "20231028.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-dart.git")
               (commit
                 "e7ee6afc2e165291360fd35d16648307920837c7")))
        (sha256
          (base32
            "0s6pb6nwhkzzdwcqipnpyg93w0p6v757l037sl86cpn9rj3mm6px"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-treemacs
            emacs-lsp-mode
            emacs-dap-mode
            emacs-f
            emacs-dash
            emacs-dart-mode
            emacs-ht))
    (home-page
      "https://emacs-lsp.github.io/lsp-dart")
    (synopsis "Dart support lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-dart")
    (license #f)))

(define-public emacs-lsp-docker
  (package
    (name "emacs-lsp-docker")
    (version "20230824.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-docker.git")
               (commit
                 "6b7701917417e4e74961185051c147e1bf003750")))
        (sha256
          (base32
            "0xnc9lbjflwdhslp8z44dk0dqsq4x9zirwbzgfg95ai2z76ldmny"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-lsp-mode
            emacs-f
            emacs-s
            emacs-yaml
            emacs-ht))
    (home-page
      "https://github.com/emacs-lsp/lsp-docker")
    (synopsis "LSP Docker integration")
    (description
      "Documentation at https://melpa.org/#/lsp-docker")
    (license #f)))

(define-public emacs-lsp-focus
  (package
    (name "emacs-lsp-focus")
    (version "20200906.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-focus.git")
               (commit
                 "d01f0af156e4e78dcb9fa8e080a652cf8f221d30")))
        (sha256
          (base32
            "1pi6vmykp6x5c1yz9cgcf4nc5cbkbxhxqmp6g9aipwd8kwii1xx6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-focus emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-focus")
    (synopsis "focus.el support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-focus")
    (license #f)))

(define-public emacs-lsp-grammarly
  (package
    (name "emacs-lsp-grammarly")
    (version "20230814.1827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-grammarly/lsp-grammarly.git")
               (commit
                 "ac651a717af5e1effcd853846957fa0e85d82061")))
        (sha256
          (base32
            "0rzl1qv1q2sjizxwxx8i1v4wjr0h04xz96aklvg8z810gi3vf92g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-grammarly
            emacs-request
            emacs-s
            emacs-ht))
    (home-page
      "https://github.com/emacs-grammarly/lsp-grammarly")
    (synopsis "LSP Clients for Grammarly")
    (description
      "Documentation at https://melpa.org/#/lsp-grammarly")
    (license #f)))

(define-public emacs-lsp-haskell
  (package
    (name "emacs-lsp-haskell")
    (version "20231011.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-haskell.git")
               (commit
                 "89d16370434e9a247e95b8b701f524f5abfc884b")))
        (sha256
          (base32
            "0j1a6c1vz57xvk64n32qlaqwpvg91zh14ik7ajpyb7xm8gbw5ahv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-haskell-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-haskell")
    (synopsis "Haskell support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-haskell")
    (license #f)))

(define-public emacs-lsp-intellij
  (package
    (name "emacs-lsp-intellij")
    (version "20180831.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Ruin0x11/lsp-intellij.git")
               (commit
                 "cf30f0ac63bd0140e758840b8ab070e8313697b2")))
        (sha256
          (base32
            "0ghw2as9fbnfhrr1nbqk97jcl7yb451xpmfbksxh7mvjm3lhmyvz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/Ruin0x11/lsp-intellij")
    (synopsis "intellij lsp client")
    (description
      "Documentation at https://melpa.org/#/lsp-intellij")
    (license #f)))

(define-public emacs-lsp-ivy
  (package
    (name "emacs-lsp-ivy")
    (version "20220831.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-ivy.git")
               (commit
                 "9ecf4dd9b1207109802bd1882aa621eb1c385106")))
        (sha256
          (base32
            "1k9q5fsv6gqy4k5bprcvmybc2mv0zqj6m4j1wcbp5rkl2596mlhh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-ivy))
    (home-page
      "https://github.com/emacs-lsp/lsp-ivy")
    (synopsis "LSP ivy integration")
    (description
      "Documentation at https://melpa.org/#/lsp-ivy")
    (license #f)))

(define-public emacs-lsp-java
  (package
    (name "emacs-lsp-java")
    (version "20230922.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-java.git")
               (commit
                 "449673da7221a30f1b1756cedcc48b9a2b52a51e")))
        (sha256
          (base32
            "1y1dr9nk50ji48z91gd1drfxqkq2189shria83cclm0lna45zfy1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-markdown-mode
            emacs-dash
            emacs-f
            emacs-ht
            emacs-request
            emacs-treemacs
            emacs-dap-mode))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/lsp-java")
    (synopsis "Java support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-java")
    (license #f)))

(define-public emacs-lsp-javacomp
  (package
    (name "emacs-lsp-javacomp")
    (version "20190124.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tigersoldier/lsp-javacomp.git")
               (commit
                 "82aa4ad6ca03a74565c35e855b318b1887bcd89b")))
        (sha256
          (base32
            "0r0ig73hsa0gyx8s6hr1mbdgf9m1n2zh2v7yhq3405l4if08s5m6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode emacs-s))
    (home-page
      "https://github.com/tigersoldier/lsp-javacomp")
    (synopsis
      "Provide Java IDE features powered by JavaComp.")
    (description
      "Documentation at https://melpa.org/#/lsp-javacomp")
    (license #f)))

(define-public emacs-lsp-jedi
  (package
    (name "emacs-lsp-jedi")
    (version "20230824.1908")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fredcamps/lsp-jedi.git")
               (commit
                 "3c828df8dd422dbb94856cc99db6f9acb52b871d")))
        (sha256
          (base32
            "0a89328vnarndv0a4xfpb4yap6i00q9prlxijg66bkg5l5gchlcl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "http://github.com/fredcamps/lsp-jedi")
    (synopsis
      "Lsp client plugin for Python Jedi Language Server")
    (description
      "Documentation at https://melpa.org/#/lsp-jedi")
    (license #f)))

(define-public emacs-lsp-julia
  (package
    (name "emacs-lsp-julia")
    (version "20230915.654")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gdkrmr/lsp-julia.git")
               (commit
                 "c869b2f6c05a97e5495ed3cc6710a33b4faf41a2")))
        (sha256
          (base32
            "0mbqv324b0km1z4af4hcgbc0493bizrbxr9v97asxvgm8j8bh24p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-julia-mode))
    (arguments
      '(#:files (:defaults "languageserver")))
    (home-page "https://github.com/gdkrmr/lsp-julia")
    (synopsis "Julia support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-julia")
    (license #f)))

(define-public emacs-lsp-latex
  (package
    (name "emacs-lsp-latex")
    (version "20231104.313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/lsp-latex.git")
               (commit
                 "9a59f2634163ea8a0033adf482b57c67c68629d9")))
        (sha256
          (base32
            "0jdwar9x2dlv9ldlshfj0m0n2bmiz7g9c6xqx3izgi132qh3f4lb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-consult))
    (home-page
      "https://github.com/ROCKTAKEY/lsp-latex")
    (synopsis "LSP-mode client for LaTeX, on texlab")
    (description
      "Documentation at https://melpa.org/#/lsp-latex")
    (license #f)))

(define-public emacs-lsp-ltex
  (package
    (name "emacs-lsp-ltex")
    (version "20230416.1826")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-languagetool/lsp-ltex.git")
               (commit
                 "0aefa28dc34c2aeceb4fba149078081d1d61f19c")))
        (sha256
          (base32
            "090vpvb94imrg4q4yrrnkjhfyyz1dwvy17ycia15hpx4r04ys8rz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-languagetool/lsp-ltex")
    (synopsis "LSP Clients for LTEX")
    (description
      "Documentation at https://melpa.org/#/lsp-ltex")
    (license #f)))

(define-public emacs-lsp-metals
  (package
    (name "emacs-lsp-metals")
    (version "20231017.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-metals.git")
               (commit
                 "da7e54ed65f4e153c94b9c54689908dce142ef37")))
        (sha256
          (base32
            "17zs7s6dmaprdc000b9779flk4iw61gi1xgn2wxwq9bxn1l2p9ny"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-scala-mode
            emacs-lsp-mode
            emacs-lsp-treemacs
            emacs-dap-mode
            emacs-dash
            emacs-f
            emacs-ht
            emacs-treemacs
            emacs-posframe))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/lsp-metals")
    (synopsis "Scala Client settings")
    (description
      "Documentation at https://melpa.org/#/lsp-metals")
    (license #f)))

(define-public emacs-lsp-mode
  (package
    (name "emacs-lsp-mode")
    (version "20231108.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-mode.git")
               (commit
                 "75ea20714635e70ca3da460d1fe558f5057eb373")))
        (sha256
          (base32
            "0sfr6c866f5h8vxpjn6b32lcq434c9lvciblsvvhwgrm3lbykcb3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-ht
            emacs-spinner
            emacs-markdown-mode
            emacs-lv))
    (arguments '(#:files (:defaults "clients/*.el")))
    (home-page
      "https://github.com/emacs-lsp/lsp-mode")
    (synopsis "LSP mode")
    (description
      "Documentation at https://melpa.org/#/lsp-mode")
    (license #f)))

(define-public emacs-lsp-mssql
  (package
    (name "emacs-lsp-mssql")
    (version "20230510.1124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-mssql.git")
               (commit
                 "a0dba8f86a2ace7e800a9dc8f814767625a509af")))
        (sha256
          (base32
            "1bsixap2ql98aic6vvxb67c7gslf1dpsrnkms203iv3h3w2ywdmb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-dash
            emacs-f
            emacs-ht
            emacs-lsp-treemacs))
    (arguments
      '(#:files (:defaults "images" "snippets")))
    (home-page
      "https://github.com/emacs-lsp/lsp-mssql")
    (synopsis "MSSQL LSP bindings")
    (description
      "Documentation at https://melpa.org/#/lsp-mssql")
    (license #f)))

(define-public emacs-lsp-origami
  (package
    (name "emacs-lsp-origami")
    (version "20230815.704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-origami.git")
               (commit
                 "86aa06517910141c3d5054eea5f7723461fce6a6")))
        (sha256
          (base32
            "1nvz60iwdh5wkcflyk53lfwsd2yjniribvw95x9968sf9icf2dqw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-origami emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-origami")
    (synopsis "origami.el support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-origami")
    (license #f)))

(define-public emacs-lsp-p4
  (package
    (name "emacs-lsp-p4")
    (version "20190127.1049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dmakarov/p4ls.git")
               (commit
                 "669460d93b87fb876df11b2b68229677e7ad1a26")))
        (sha256
          (base32
            "17w48yfcb2qwjz2pg1kmmijf1s2b0qb4kcz5jsmz3x8swhq4kb22"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (arguments '(#:files ("clients/emacs/*.el")))
    (home-page "https://github.com/dmakarov/p4ls")
    (synopsis "P4 support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-p4")
    (license #f)))

(define-public emacs-lsp-pascal
  (package
    (name "emacs-lsp-pascal")
    (version "20200422.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arjanadriaanse/lsp-pascal.git")
               (commit
                 "b132bdf66748e4abe0d4140f6d061b1ccd56082a")))
        (sha256
          (base32
            "09v79p6wsp775ky1wy5fr0hwh5j33jvdvcarjs20zbdwnrs53am8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/arjanadriaanse/lsp-pascal")
    (synopsis "LSP client for Pascal")
    (description
      "Documentation at https://melpa.org/#/lsp-pascal")
    (license #f)))

(define-public emacs-lsp-pyre
  (package
    (name "emacs-lsp-pyre")
    (version "20190406.335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jra3/lsp-pyre.git")
               (commit
                 "e177b8f5efd1a955b5753aeb5d1894e6d21be35a")))
        (sha256
          (base32
            "0g9vijpq7n38b7rvgbshh4s46m1387d7k2lcvy4md17sak5ivxrg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page "https://github.com/jra3/lsp-pyre")
    (synopsis
      "lsp-mode client for python using pyre")
    (description
      "Documentation at https://melpa.org/#/lsp-pyre")
    (license #f)))

(define-public emacs-lsp-pyright
  (package
    (name "emacs-lsp-pyright")
    (version "20231006.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-pyright.git")
               (commit
                 "2f2631ae242d5770dbe6cb924e44c1ee5671789d")))
        (sha256
          (base32
            "1gk23a56jf1v4f4ag07hzji5pw3mq1rq622ggbvqcbc2i2bnvdn1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-dash emacs-ht))
    (home-page
      "https://github.com/emacs-lsp/lsp-pyright")
    (synopsis "Python LSP client using Pyright")
    (description
      "Documentation at https://melpa.org/#/lsp-pyright")
    (license #f)))

(define-public emacs-lsp-python-ms
  (package
    (name "emacs-lsp-python-ms")
    (version "20230731.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-python-ms.git")
               (commit
                 "7bda327bec7b219d140c34dab4b1e1fbd41bc516")))
        (sha256
          (base32
            "1i7l06cw25fb202fbhqhx8xyfynz6sinka9ybh8n4cxjq19ffm8b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-python-ms")
    (synopsis
      "The lsp-mode client for Microsoft python-language-server")
    (description
      "Documentation at https://melpa.org/#/lsp-python-ms")
    (license #f)))

(define-public emacs-lsp-rescript
  (package
    (name "emacs-lsp-rescript")
    (version "20220314.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjlee/lsp-rescript.git")
               (commit
                 "7baf9adf10234cf964feefae99050268e9bc5681")))
        (sha256
          (base32
            "09jh4q3i0b71srfpsr4w0jk5rn9rz359v8k1pk80636g7448k8gl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-rescript-mode))
    (home-page
      "https://github.com/jjlee/lsp-rescript")
    (synopsis
      "LSP client configuration for lsp-mode and rescript-vscode")
    (description
      "Documentation at https://melpa.org/#/lsp-rescript")
    (license #f)))

(define-public emacs-lsp-scheme
  (package
    (name "emacs-lsp-scheme")
    (version "20230606.1722")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/lsp-scheme-"
               version
               ".tar"))
        (sha256
          (base32
            "1rgh9qa8vs5rg6fxypi3sr1gpafpi3s0fb1mk1vs1sff9x8d59n0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-lsp-mode))
    (home-page
      "https://codeberg.org/rgherdt/emacs-lsp-scheme")
    (synopsis "Scheme support for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-scheme")
    (license #f)))

(define-public emacs-lsp-sonarlint
  (package
    (name "emacs-lsp-sonarlint")
    (version "20230814.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-sonarlint.git")
               (commit
                 "d131779950d5d45c3129eb088cef5fd11099f47c")))
        (sha256
          (base32
            "0qr9cmk148rcvn0swnvhicyy89n6lw8gkchxvvd8lwwl4ky6x9pb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-ht))
    (arguments
      '(#:files
        ("lsp-sonarlint.el"
         ("languages" "languages/*/*.el")
         ("server" "server/*"))))
    (home-page
      "https://github.com/emacs-lsp/lsp-sonarlint")
    (synopsis "Emacs SonarLint lsp client")
    (description
      "Documentation at https://melpa.org/#/lsp-sonarlint")
    (license #f)))

(define-public emacs-lsp-sourcekit
  (package
    (name "emacs-lsp-sourcekit")
    (version "20230815.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-sourcekit.git")
               (commit
                 "1cd5e7d2699598a97bdbcd289d9a88b249db474c")))
        (sha256
          (base32
            "173xqk02k3sh0xblnj12zyj8fh79z1my4vm0yv5mdddyq15b1pqy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/emacs-lsp/lsp-sourcekit")
    (synopsis "sourcekit-lsp client for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-sourcekit")
    (license #f)))

(define-public emacs-lsp-tailwindcss
  (package
    (name "emacs-lsp-tailwindcss")
    (version "20230407.951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/merrickluo/lsp-tailwindcss.git")
               (commit
                 "b36304210421160477a4ab453fa272fc411ce297")))
        (sha256
          (base32
            "0wdfcaj5xr6yjy85x8dm0a80gphnh8r9viaraif0s73g8p50l43j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode emacs-f))
    (home-page
      "https://github.com/merrickluo/lsp-tailwindcss")
    (synopsis "A lsp-mode client for tailwindcss")
    (description
      "Documentation at https://melpa.org/#/lsp-tailwindcss")
    (license #f)))

(define-public emacs-lsp-treemacs
  (package
    (name "emacs-lsp-treemacs")
    (version "20230811.611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-treemacs.git")
               (commit
                 "e66ae2196503d4e84334519e56b4388feffa5060")))
        (sha256
          (base32
            "1x3qylhhk862l88s80r6paagyjh8bw8kamx4hpwh429r88mb9l6v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-ht
            emacs-treemacs
            emacs-lsp-mode))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/emacs-lsp/lsp-treemacs")
    (synopsis "LSP treemacs")
    (description
      "Documentation at https://melpa.org/#/lsp-treemacs")
    (license #f)))

(define-public emacs-lsp-ui
  (package
    (name "emacs-lsp-ui")
    (version "20230811.552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-lsp/lsp-ui.git")
               (commit
                 "0dd39900c8ed8145d207985cb2f65cedd1ffb410")))
        (sha256
          (base32
            "1p6lrxvbrq3lv7a1xmbbrsjmgw75p2ay7bpbgdvimrv56fcdys96"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-lsp-mode
            emacs-markdown-mode))
    (arguments
      '(#:files
        (:defaults "lsp-ui-doc.html" "resources")))
    (home-page "https://github.com/emacs-lsp/lsp-ui")
    (synopsis "UI modules for lsp-mode")
    (description
      "Documentation at https://melpa.org/#/lsp-ui")
    (license #f)))

(define-public emacs-lua-mode
  (package
    (name "emacs-lua-mode")
    (version "20231023.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/immerrr/lua-mode.git")
               (commit
                 "d074e4134b1beae9ed4c9b512af741ca0d852ba3")))
        (sha256
          (base32
            "00gvrmw8pll0cl7srygh2kmbf0g44sk9asj5sm77qvhr8jz4xkkq"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "init-tryout.el"))))
    (home-page "https://immerrr.github.io/lua-mode")
    (synopsis "a major-mode for editing Lua scripts")
    (description
      "Documentation at https://melpa.org/#/lua-mode")
    (license #f)))

(define-public emacs-luarocks
  (package
    (name "emacs-luarocks")
    (version "20170430.2305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/luarocks.el.git")
               (commit
                 "cee27ba0716edf338077387969883226dd2b7484")))
        (sha256
          (base32
            "0rdsjmmi95agb859997qdhbk0dns2jyx2mlg8rync58wna70nmbn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/luarocks.el")
    (synopsis "luarocks tools")
    (description
      "Documentation at https://melpa.org/#/luarocks")
    (license #f)))

(define-public emacs-lurk-mode
  (package
    (name "emacs-lurk-mode")
    (version "20230120.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lurk-lang/lurk-emacs.git")
               (commit
                 "59a3f956944a5ddd43cfd57deeff6b647fc46554")))
        (sha256
          (base32
            "1g64jc7fy5229jv8x25rj4fj344kfbrnrvc9wxgsxv7lfvb770kv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lurk-mode.el")))
    (home-page
      "http://github.com/lurk-lang/lurk-emacs")
    (synopsis "A major mode for editing lurk files")
    (description
      "Documentation at https://melpa.org/#/lurk-mode")
    (license #f)))

(define-public emacs-lush-theme
  (package
    (name "emacs-lush-theme")
    (version "20180816.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andre-richter/emacs-lush-theme.git")
               (commit
                 "645e1959143532df8f7ef90e1184e9556df18af7")))
        (sha256
          (base32
            "0j9gbr3chaxc16yysyaaa1n2cvlrdc1y063l1kxj0mf435d1l7py"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andre-richter/emacs-lush-theme")
    (synopsis "A dark theme with lush colors")
    (description
      "Documentation at https://melpa.org/#/lush-theme")
    (license #f)))

(define-public emacs-lusty-explorer
  (package
    (name "emacs-lusty-explorer")
    (version "20200602.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sjbach/lusty-emacs.git")
               (commit
                 "a746514ccd8df71fc920ba8ad0aa8dca58702631")))
        (sha256
          (base32
            "0sjs3gn7mrmm60v0yi77fha9b6wdqfnydqz9f4dg2fvwj4a9w2rr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lusty-explorer.el")))
    (home-page
      "https://github.com/sjbach/lusty-emacs")
    (synopsis
      "Dynamic filesystem explorer and buffer switcher")
    (description
      "Documentation at https://melpa.org/#/lusty-explorer")
    (license #f)))

(define-public emacs-lux-mode
  (package
    (name "emacs-lux-mode")
    (version "20230823.844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hawk/lux.git")
               (commit
                 "1d318d1c5712990ce1371a77961a01bc040a4c6b")))
        (sha256
          (base32
            "12gjwa4q79368kprb8vss7w6jkqj6pw0q8s2n88wr33cpm3b8pyh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/lux-mode.el")))
    (home-page "https://github.com/hawk/lux")
    (synopsis "Major mode for editing lux files")
    (description
      "Documentation at https://melpa.org/#/lux-mode")
    (license #f)))

(define-public emacs-lv
  (package
    (name "emacs-lv")
    (version "20200507.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/hydra.git")
               (commit
                 "2d553787aca1aceb3e6927e426200e9bb9f056f1")))
        (sha256
          (base32
            "13zjw64x728pm1a44lzzv9s9r5kkss0ncwqzzczhk8bvmsi7m1l3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lv.el")))
    (home-page "unspecified")
    (synopsis "Other echo area")
    (description
      "Documentation at https://melpa.org/#/lv")
    (license #f)))

(define-public emacs-lxc
  (package
    (name "emacs-lxc")
    (version "20140410.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-lxc.git")
               (commit
                 "88bed56c954d1edd9ff5ce0ced2c02dcf9f71835")))
        (sha256
          (base32
            "090gk0il4yyypzjbh2qrjdaldwf90fi30impmh4zcfl73bic5q9q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicferrier/emacs-lxc")
    (synopsis "lxc integration with Emacs")
    (description
      "Documentation at https://melpa.org/#/lxc")
    (license #f)))

(define-public emacs-lxc-tramp
  (package
    (name "emacs-lxc-tramp")
    (version "20230119.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/montag451/lxc-tramp.git")
               (commit
                 "57559701334bb5635b82a252bd00298d06d794fe")))
        (sha256
          (base32
            "0pv45p6yvsivchqkfg6wirf2vcdfmzymjyqr8n201k2c75qjkgdx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/montag451/lxc-tramp")
    (synopsis "TRAMP integration for LXC containers")
    (description
      "Documentation at https://melpa.org/#/lxc-tramp")
    (license #f)))

(define-public emacs-lxd-tramp
  (package
    (name "emacs-lxd-tramp")
    (version "20181023.7")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/onixie/lxd-tramp.git")
               (commit
                 "f335c76245f62b02cf67a9376eca6f3863c8a75a")))
        (sha256
          (base32
            "0byhafxcc4qw08b16fd00nkyqz1jmq7js0l5q4lda4xdpfgl1a65"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/onixie/lxd-tramp.git")
    (synopsis "TRAMP integration for LXD containers")
    (description
      "Documentation at https://melpa.org/#/lxd-tramp")
    (license #f)))

(define-public emacs-lyrics
  (package
    (name "emacs-lyrics")
    (version "20220206.116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/lyrics.el.git")
               (commit
                 "c3d42f1e039941f32f49252e1b1610de337b4470")))
        (sha256
          (base32
            "02b0b68bh4jymx08zy2dsgs134mknk1ygb10mpqmyy1z88785ybd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/lyrics.el")
    (synopsis "Show lyrics")
    (description
      "Documentation at https://melpa.org/#/lyrics")
    (license #f)))

(define-public emacs-lyrics-fetcher
  (package
    (name "emacs-lyrics-fetcher")
    (version "20220717.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/lyrics-fetcher.el.git")
               (commit
                 "a3be34b0153c2c056dc4b55bbc5fbdc2d9f87549")))
        (sha256
          (base32
            "1nyajjxidp2acsbpkbv4whcph6bmwjn31nii2y87xsj8cdv0wrx7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emms emacs-f emacs-request))
    (home-page
      "https://github.com/SqrtMinusOne/lyrics-fetcher.el")
    (synopsis "Fetch song lyrics and album covers")
    (description
      "Documentation at https://melpa.org/#/lyrics-fetcher")
    (license #f)))

(define-public emacs-m-buffer
  (package
    (name "emacs-m-buffer")
    (version "20220719.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/m-buffer-el.git")
               (commit
                 "d2e35bf9293367f1a2d19f259f32a35bd9f4788b")))
        (sha256
          (base32
            "0b961hwyrbabrf732859aqbi3n9s237cx7j96baq9yf2azi6a9fb"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults "m-buffer-doc.org" "m-buffer-doc.css")))
    (home-page "unspecified")
    (synopsis
      "List-Oriented, Functional Buffer Manipulation")
    (description
      "Documentation at https://melpa.org/#/m-buffer")
    (license #f)))

(define-public emacs-mac-pseudo-daemon
  (package
    (name "emacs-mac-pseudo-daemon")
    (version "20200215.513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/mac-pseudo-daemon.git")
               (commit
                 "94240ebb716f11af8427b6295c3f44c0c43419d3")))
        (sha256
          (base32
            "0c3l50qpdzracjncsbjv5chpvjdphhzwqk4jwv31fw6p62i1zvlb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mac-pseudo-daemon.el")))
    (home-page
      "https://github.com/DarwinAwardWinner/osx-pseudo-daemon")
    (synopsis
      "Daemon mode that plays nice with Mac OS.")
    (description
      "Documentation at https://melpa.org/#/mac-pseudo-daemon")
    (license #f)))

(define-public emacs-maces-game
  (package
    (name "emacs-maces-game")
    (version "20170903.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pawelbx/maces-game.git")
               (commit
                 "c0fb795f5642467ea528d2f04d904547e8a77ecd")))
        (sha256
          (base32
            "1sf1h5660fd3mfcca3h1fqk3xssgigkil26wz1kp1kvxfx9lm31m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files (:defaults "words.txt")))
    (home-page
      "https://github.com/pawelbx/anagram-game")
    (synopsis "another anagram game.")
    (description
      "Documentation at https://melpa.org/#/maces-game")
    (license #f)))

(define-public emacs-macports
  (package
    (name "emacs-macports")
    (version "20231104.139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amake/macports.el.git")
               (commit
                 "e70bdc860a047cdd22f0b6f3edea06adc94d0d7f")))
        (sha256
          (base32
            "0izgvmz5xz65s6g7zpllma03hjcgzwc7icbcvfljvsn8mk01zp8b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/amake/macports.el")
    (synopsis "A porcelain for MacPorts")
    (description
      "Documentation at https://melpa.org/#/macports")
    (license #f)))

(define-public emacs-macro-math
  (package
    (name "emacs-macro-math")
    (version "20130328.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/macro-math.el.git")
               (commit
                 "216e59371e9ee39c34117ba79b9acd78bb415750")))
        (sha256
          (base32
            "119c77s3qp1vqc5m2yf7m4s81aphkhsvsnwqmpq6xl08r3592zxz"))))
    (build-system melpa-build-system)
    (home-page
      "http://nschum.de/src/emacs/macro-math/")
    (synopsis "in-buffer mathematical operations")
    (description
      "Documentation at https://melpa.org/#/macro-math")
    (license #f)))

(define-public emacs-macrostep
  (package
    (name "emacs-macrostep")
    (version "20230813.2123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/macrostep.git")
               (commit
                 "0b04a89f698c335c9ea492553470a8d45c113edd")))
        (sha256
          (base32
            "1735wqjb1n5q0pckh2sch2vqr7z2ycl6ns4rr5q3wvf5njpb22sv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/macrostep")
    (synopsis "Interactive macro expander")
    (description
      "Documentation at https://melpa.org/#/macrostep")
    (license #f)))

(define-public emacs-macrostep-geiser
  (package
    (name "emacs-macrostep-geiser")
    (version "20210717.801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbfalcon/macrostep-geiser.git")
               (commit
                 "f6a2d5bb96ade4f23df557649af87ebd0cc45125")))
        (sha256
          (base32
            "0dykvwcvg8n24z3fkx6rv3l1mhzmca4cxj0gsvvqsg9wp0az1fc7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-macrostep emacs-geiser))
    (home-page
      "https://github.com/nbfalcon/macrostep-geiser")
    (synopsis "Macrostep for `geiser'")
    (description
      "Documentation at https://melpa.org/#/macrostep-geiser")
    (license #f)))

(define-public emacs-madhat2r-theme
  (package
    (name "emacs-madhat2r-theme")
    (version "20170203.30")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/madhat2r/madhat2r-theme.git")
               (commit
                 "6b387f09de055cfcc15d74981cd4f32f8f9a7323")))
        (sha256
          (base32
            "1nnjdqqbarzv62ic3ddc2z9wmh93zjia4nvfjmji8213dngrrf88"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/madhat2r/madhat2r-theme")
    (synopsis
      "dark color theme that is easy on the eyes")
    (description
      "Documentation at https://melpa.org/#/madhat2r-theme")
    (license #f)))

(define-public emacs-mag-menu
  (package
    (name "emacs-mag-menu")
    (version "20150505.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/mag-menu.git")
               (commit
                 "9b9277021cd09fb1dba64b1d2a00705d20914bd6")))
        (sha256
          (base32
            "1flamyk7z3r723cczqra0f4yabc6kmgwjaw2bvs3kisppqmmz72g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-splitter))
    (home-page
      "https://github.com/chumpage/mag-menu")
    (synopsis
      "Intuitive keyboard-centric menu system")
    (description
      "Documentation at https://melpa.org/#/mag-menu")
    (license #f)))

(define-public emacs-magic-filetype
  (package
    (name "emacs-magic-filetype")
    (version "20230916.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/magic-filetype.el.git")
               (commit
                 "fce1eaade148eb0dc4ce1d27a4763e280fe48466")))
        (sha256
          (base32
            "0z5xh9bkrf3b4yh0d56jaca62abjr4g0gg72ns2mmy1n653jmz8z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/emacs-php/magic-filetype.el")
    (synopsis "Enhance filetype major mode")
    (description
      "Documentation at https://melpa.org/#/magic-filetype")
    (license #f)))

(define-public emacs-magic-latex-buffer
  (package
    (name "emacs-magic-latex-buffer")
    (version "20210306.422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/magic-latex-buffer.git")
               (commit
                 "903ec91872760e47c0e5715795f8465173615098")))
        (sha256
          (base32
            "0n2f3y6b6n8ipvk99ai1hwqddkwg5y97ks068wvp4rr4fspxkm9k"))))
    (build-system melpa-build-system)
    (home-page "http://zk-phi.github.io/")
    (synopsis
      "Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing")
    (description
      "Documentation at https://melpa.org/#/magic-latex-buffer")
    (license #f)))

(define-public emacs-magik-mode
  (package
    (name "emacs-magik-mode")
    (version "20230817.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roadrunner1776/magik.git")
               (commit
                 "327be988d4c9938ca5d04b6e37bc922525b6de93")))
        (sha256
          (base32
            "0jp3fkgd6jdg1zqpfycd7ry94n7cl1pp8m0mxii6rx52pnrw520c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "http://github.com/roadrunner1776/magik")
    (synopsis "mode for editing Magik + some utils.")
    (description
      "Documentation at https://melpa.org/#/magik-mode")
    (license #f)))

(define-public emacs-magit
  (package
    (name "emacs-magit")
    (version "20231109.935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit
                 "02630b51896929011a420d9382779c98ecaef687")))
        (sha256
          (base32
            "06cnhwzxjpqb29km9nxjynapxiajaa87s7q32c4igq4yjp3jy0h0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-dash
            emacs-git-commit
            emacs-magit-section
            emacs-with-editor))
    (arguments
      '(#:files
        ("lisp/magit*.el"
         "lisp/git-rebase.el"
         "docs/magit.texi"
         "docs/AUTHORS.md"
         "LICENSE"
         "Documentation/magit.texi"
         "Documentation/AUTHORS.md"
         (:exclude
           "lisp/magit-libgit.el"
           "lisp/magit-libgit-pkg.el"
           "lisp/magit-section.el"
           "lisp/magit-section-pkg.el"))))
    (home-page "https://github.com/magit/magit")
    (synopsis "A Git porcelain inside Emacs.")
    (description
      "Documentation at https://melpa.org/#/magit")
    (license #f)))

(define-public emacs-magit-annex
  (package
    (name "emacs-magit-annex")
    (version "20231010.425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-annex.git")
               (commit
                 "abe528633df7ea41b16e5505ba52e5fe05bebf3d")))
        (sha256
          (base32
            "0hdfcrfwq29wmyfd1svpg1kxgmkdqwqqv485nixxjwhz0b1vw0d2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/magit/magit-annex")
    (synopsis "Control git-annex from Magit")
    (description
      "Documentation at https://melpa.org/#/magit-annex")
    (license #f)))

(define-public emacs-magit-commit-mark
  (package
    (name "emacs-magit-commit-mark")
    (version "20230420.304")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/magit-commit-mark-"
               version
               ".tar"))
        (sha256
          (base32
            "03abkq65lzzad0ffj8g5mvlyaayfkasyplzc3qqw42bk6kgbh9xx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://codeberg.org/ideasman42/emacs-magit-commit-mark")
    (synopsis "Support marking commits as read")
    (description
      "Documentation at https://melpa.org/#/magit-commit-mark")
    (license #f)))

(define-public emacs-magit-delta
  (package
    (name "emacs-magit-delta")
    (version "20220125.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dandavison/magit-delta.git")
               (commit
                 "5fc7dbddcfacfe46d3fd876172ad02a9ab6ac616")))
        (sha256
          (base32
            "1kph5r9dy21pgfknpcdzzqfn6rqig5nvp8ksh16y13k3axlzvkiw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-xterm-color))
    (home-page
      "https://github.com/dandavison/magit-delta")
    (synopsis
      "Use Delta when displaying diffs in Magit")
    (description
      "Documentation at https://melpa.org/#/magit-delta")
    (license #f)))

(define-public emacs-magit-diff-flycheck
  (package
    (name "emacs-magit-diff-flycheck")
    (version "20190524.551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ragone/magit-diff-flycheck.git")
               (commit
                 "28acf74f59e385865746cccf4b1e4c4025ae9433")))
        (sha256
          (base32
            "178yby09swm3hlj300vkk3366wjwwf6zijlvphn6drsiw7dmccqm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-flycheck))
    (home-page
      "https://github.com/ragone/magit-diff-flycheck")
    (synopsis "Report errors in diffs")
    (description
      "Documentation at https://melpa.org/#/magit-diff-flycheck")
    (license #f)))

(define-public emacs-magit-filenotify
  (package
    (name "emacs-magit-filenotify")
    (version "20151116.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruediger/magit-filenotify.git")
               (commit
                 "c0865b3c41af20b6cd89de23d3b0beb54c8401a4")))
        (sha256
          (base32
            "0nkxxhxkhy314jv1l3hza84vigl8q7fc8hjjvrx58gfgsfgifx6r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page "unspecified")
    (synopsis
      "Refresh status buffer when git tree changes")
    (description
      "Documentation at https://melpa.org/#/magit-filenotify")
    (license #f)))

(define-public emacs-magit-find-file
  (package
    (name "emacs-magit-find-file")
    (version "20150702.830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bradwright/magit-find-file.el.git")
               (commit
                 "c3ea91bab37d10a814a829728ec972811f728d60")))
        (sha256
          (base32
            "1j3jsrp0qpaa2xd98d1g9z0zc4b93knwajrlnlsc7l6g0vlfsddb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit emacs-dash))
    (home-page
      "https://github.com/bradleywright/magit-find-file.el")
    (synopsis
      "completing-read over all files in Git")
    (description
      "Documentation at https://melpa.org/#/magit-find-file")
    (license #f)))

(define-public emacs-magit-gerrit
  (package
    (name "emacs-magit-gerrit")
    (version "20231002.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-gerrit.git")
               (commit
                 "9b6c476a4a5e715d68081dda45312f7e2bedd484")))
        (sha256
          (base32
            "0gs6zhgywjikxr1lkbbih1ayxl4i4w82vsfg0yqsj6cdbi6r109c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/emacsorphanage/magit-gerrit")
    (synopsis "Magit plugin for Gerrit Code Review")
    (description
      "Documentation at https://melpa.org/#/magit-gerrit")
    (license #f)))

(define-public emacs-magit-gh-pulls
  (package
    (name "emacs-magit-gh-pulls")
    (version "20191230.1944")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/magit-gh-pulls.git")
               (commit
                 "57f3a5158bbc7bfd169ee136fde351cce999e0ca")))
        (sha256
          (base32
            "1halhivvfklxscg1xxk461wgjlh3vl8g991ydj93450b6mw3azaq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-gh emacs-magit emacs-pcache emacs-s))
    (home-page
      "https://github.com/sigma/magit-gh-pulls")
    (synopsis
      "GitHub pull requests extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-gh-pulls")
    (license #f)))

(define-public emacs-magit-gitflow
  (package
    (name "emacs-magit-gitflow")
    (version "20170929.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtatarik/magit-gitflow.git")
               (commit
                 "cc41b561ec6eea947fe9a176349fb4f771ed865b")))
        (sha256
          (base32
            "0jz69wrrzvqadaphmjrr146nzvmphsbl7rmc3ccnpw1gw6gnz81f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup))
    (home-page
      "https://github.com/jtatarik/magit-gitflow")
    (synopsis "gitflow extension for magit")
    (description
      "Documentation at https://melpa.org/#/magit-gitflow")
    (license #f)))

(define-public emacs-magit-imerge
  (package
    (name "emacs-magit-imerge")
    (version "20230522.1054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-imerge.git")
               (commit
                 "b7cfe49a197c2cf5948109921e053711b156389d")))
        (sha256
          (base32
            "0hh73aq6afixq3wqc7fcrbj9jxvwllwyfxnd0k1b5dx2q02nrxyv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/magit/magit-imerge")
    (synopsis "Magit extension for git-imerge")
    (description
      "Documentation at https://melpa.org/#/magit-imerge")
    (license #f)))

(define-public emacs-magit-lfs
  (package
    (name "emacs-magit-lfs")
    (version "20221031.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Ailrun/magit-lfs.git")
               (commit
                 "cd9f46e1840270be27e2c2d9dcf036ff0781f66d")))
        (sha256
          (base32
            "0psnyxrc7fy2vng81mak0ji7kw58ly01frzr5z2xpj08hxx16b3c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit emacs-dash))
    (home-page "https://github.com/ailrun/magit-lfs")
    (synopsis "Magit plugin for Git LFS")
    (description
      "Documentation at https://melpa.org/#/magit-lfs")
    (license #f)))

(define-public emacs-magit-org-todos
  (package
    (name "emacs-magit-org-todos")
    (version "20180709.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielma/magit-org-todos.el.git")
               (commit
                 "9ffa3efb098434d837cab4bacd1601fdfc6fe999")))
        (sha256
          (base32
            "0kxz5q8q5np4zm1ls4hx1h53vlnhj0mnmbq12p5nzk5zcxycbcpz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "http://github.com/danielma/magit-org-todos")
    (synopsis
      "Add local todo items to the magit status buffer")
    (description
      "Documentation at https://melpa.org/#/magit-org-todos")
    (license #f)))

(define-public emacs-magit-p4
  (package
    (name "emacs-magit-p4")
    (version "20220822.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-p4.git")
               (commit
                 "0fd0f882eb14510714393c15c2ccb8d2c259f01e")))
        (sha256
          (base32
            "0wdclkkqlfswqbsg8ld1gqji1rnxpl8s00ym7imgqdf1is961qj1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup emacs-p4))
    (home-page "https://github.com/qoocku/magit-p4")
    (synopsis "git-p4 plug-in for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-p4")
    (license #f)))

(define-public emacs-magit-patch-changelog
  (package
    (name "emacs-magit-patch-changelog")
    (version "20221209.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/magit-patch-changelog.git")
               (commit
                 "fd259cf6ce270a21df2f00b1e031193c8595a7a9")))
        (sha256
          (base32
            "01h07bg1w1gg33saa86ph6ma1y0vn18dbkhhxqnm3x1m1kq9ssi5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/dickmao/magit-patch-changelog")
    (synopsis
      "Generate a patch according to emacs-mirror/CONTRIBUTE")
    (description
      "Documentation at https://melpa.org/#/magit-patch-changelog")
    (license #f)))

(define-public emacs-magit-popup
  (package
    (name "emacs-magit-popup")
    (version "20200719.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-popup.git")
               (commit
                 "d8585fa39f88956963d877b921322530257ba9f5")))
        (sha256
          (base32
            "0znp6gx6vpcsybg774ab06mdgxb7sfk3gki1yp2qhkanav13i6q1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/magit/magit-popup")
    (synopsis
      "Define prefix-infix-suffix command combos")
    (description
      "Documentation at https://melpa.org/#/magit-popup")
    (license #f)))

(define-public emacs-magit-rbr
  (package
    (name "emacs-magit-rbr")
    (version "20181009.2016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fanatoly/magit-rbr.git")
               (commit
                 "029203b3e48537205052a058e964f058cd802c3c")))
        (sha256
          (base32
            "1z48m0al8bb4ppic483jvika9q47c67g7fazk25431sr5rv9h4d2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/fanatoly/magit-rbr")
    (synopsis "Support for git rbr in Magit")
    (description
      "Documentation at https://melpa.org/#/magit-rbr")
    (license #f)))

(define-public emacs-magit-reviewboard
  (package
    (name "emacs-magit-reviewboard")
    (version "20200727.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtamagnan/magit-reviewboard.git")
               (commit
                 "aceedff88921f1dfef8a6b2fb18fe316fb7223a8")))
        (sha256
          (base32
            "0agk53san02n49jna6g2ndw4wbqkpr0kfd4ravbs9b4w6l3r30xb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-s emacs-request))
    (home-page
      "http://github.com/jtamagnan/magit-reviewboard")
    (synopsis
      "Show open Reviewboard reviews in Magit")
    (description
      "Documentation at https://melpa.org/#/magit-reviewboard")
    (license #f)))

(define-public emacs-magit-section
  (package
    (name "emacs-magit-section")
    (version "20231014.1405")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit.git")
               (commit
                 "dd14e0c3c6604f97a447967f0c1ace9947a09e66")))
        (sha256
          (base32
            "1mfhqgk8ag6pwnim9xvw1jpqd3jndqckhf7zix2j3qjj1qhyjzqw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-dash))
    (arguments
      '(#:files
        ("lisp/magit-section.el"
         "lisp/magit-section-pkg.el"
         "docs/magit-section.texi"
         "Documentation/magit-section.texi")))
    (home-page "https://github.com/magit/magit")
    (synopsis "Sections for read-only buffers.")
    (description
      "Documentation at https://melpa.org/#/magit-section")
    (license #f)))

(define-public emacs-magit-stats
  (package
    (name "emacs-magit-stats")
    (version "20230223.1819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LionyxML/magit-stats.git")
               (commit
                 "1197942c6a2f399233c5bcbb9a29f9c05a5eecf1")))
        (sha256
          (base32
            "0dpvqbwxc4wm705an5j34nmrwxcqgyai2i8c966fizvaw4alxr7w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/LionyxML/magit-stats")
    (synopsis "Generates GIT Repo Statistics Report")
    (description
      "Documentation at https://melpa.org/#/magit-stats")
    (license #f)))

(define-public emacs-magit-stgit
  (package
    (name "emacs-magit-stgit")
    (version "20220914.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stacked-git/magit-stgit.git")
               (commit
                 "bf96fa0f40c087329ad7e6a3b1946de7df03559c")))
        (sha256
          (base32
            "03342kkk9lmi0i59slzyl0h8flj90z3nvnmg5p2b9zgvclylscp8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit emacs-magit-popup))
    (home-page "unspecified")
    (synopsis "StGit extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-stgit")
    (license #f)))

(define-public emacs-magit-svn
  (package
    (name "emacs-magit-svn")
    (version "20220314.1451")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/magit-svn.git")
               (commit
                 "b8277081db90977247ae3900ea6afeb0ca644d36")))
        (sha256
          (base32
            "1ywwylxasgyk6gldypvbn6hlbmkp24rx6kcd0qvxsp39bbd0in50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page "unspecified")
    (synopsis "Git-Svn extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-svn")
    (license #f)))

(define-public emacs-magit-tbdiff
  (package
    (name "emacs-magit-tbdiff")
    (version "20220527.2213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/magit-tbdiff.git")
               (commit
                 "55e6443710def357f3f78eea27d5bbe023d868f5")))
        (sha256
          (base32
            "0ypkawcp964r9rx8bl3hppcvkkngljyhy1kpfvfxmqalgy2wr9ig"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/magit/magit-tbdiff")
    (synopsis "Magit extension for range diffs")
    (description
      "Documentation at https://melpa.org/#/magit-tbdiff")
    (license #f)))

(define-public emacs-magit-todos
  (package
    (name "emacs-magit-todos")
    (version "20231027.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/magit-todos.git")
               (commit
                 "d0646dbbf46d75d08e3d7b4c665d7d763a468af1")))
        (sha256
          (base32
            "09bhslihr5h441nrz4ihrwj61wws06i4vapb5aizg8iymcxl7v9a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async
            emacs-dash
            emacs-f
            emacs-hl-todo
            emacs-magit
            emacs-pcre2el
            emacs-s))
    (home-page
      "http://github.com/alphapapa/magit-todos")
    (synopsis "Show source file TODOs in Magit")
    (description
      "Documentation at https://melpa.org/#/magit-todos")
    (license #f)))

(define-public emacs-magit-topgit
  (package
    (name "emacs-magit-topgit")
    (version "20161105.1623")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/greenrd/magit-topgit.git")
               (commit
                 "11489ea798bc88d0ea5244bbf725285eedfefbef")))
        (sha256
          (base32
            "1y7ss475ibjx354m73jn5dxd98g33jcijx48b30p45rbm6ha3i8q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page "unspecified")
    (synopsis "TopGit extension for Magit")
    (description
      "Documentation at https://melpa.org/#/magit-topgit")
    (license #f)))

(define-public emacs-magit-vcsh
  (package
    (name "emacs-magit-vcsh")
    (version "20230402.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.smrk.net/magit-vcsh.el")
               (commit
                 "fd6c86c066b14bbf78644d38eca9711d6d9544a1")))
        (sha256
          (base32
            "0mq437z9ng2i2amkv26bw9ak7ddw40h2q4wmpf517bv2s7qxfgi1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit emacs-vcsh))
    (home-page "http://git.smrk.net/magit-vcsh.el")
    (synopsis "Magit vcsh integration")
    (description
      "Documentation at https://melpa.org/#/magit-vcsh")
    (license #f)))

(define-public emacs-magithub
  (package
    (name "emacs-magithub")
    (version "20220315.117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/magithub.git")
               (commit
                 "dd62c7057155c0a334e6d9087779a2923d2300b8")))
        (sha256
          (base32
            "1v8nsv1y4fa3y2skx1w3gbf438zlf00zlmsxkh692kmvbkx4sdf4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit
            emacs-s
            emacs-ghub+
            emacs-git-commit
            emacs-markdown-mode))
    (home-page
      "https://github.com/vermiculus/magithub")
    (synopsis "Magit interfaces for GitHub")
    (description
      "Documentation at https://melpa.org/#/magithub")
    (license #f)))

(define-public emacs-magma-mode
  (package
    (name "emacs-magma-mode")
    (version "20211018.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ThibautVerron/magma-mode.git")
               (commit
                 "dd784445bc8cddf4a3ebe0f60009bed1f722f597")))
        (sha256
          (base32
            "0p413pjfznqrv62175kkzpf3nvnq35081kq76rvwlzh00skvpjdl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (arguments
      '(#:files
        ("*.el"
         "snippets"
         ("data" "data/magma_symbols.txt")
         ("bin" "bin/build_completion_table.sh"))))
    (home-page
      "https://github.com/ThibautVerron/magma-mode")
    (synopsis "Mode for editing Magma source code")
    (description
      "Documentation at https://melpa.org/#/magma-mode")
    (license #f)))

(define-public emacs-magnatune
  (package
    (name "emacs-magnatune")
    (version "20151030.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eikek/magnatune.el.git")
               (commit
                 "605b01505ba30589c77ebb4c96834b5072ccbdd4")))
        (sha256
          (base32
            "1hqz26zm4bdz5wavna4j9yia3ns4z19dnszl7k0lcpgbgmb0wh8y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "unspecified")
    (synopsis "browse magnatune's music catalog")
    (description
      "Documentation at https://melpa.org/#/magnatune")
    (license #f)))

(define-public emacs-magrant
  (package
    (name "emacs-magrant")
    (version "20210706.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/magrant.git")
               (commit
                 "6309c001355126e3ade79493479b517925943d17")))
        (sha256
          (base32
            "0fg4hi65qdix0lpfw29ymy2naskn2af661pzg695f47xhknsir1r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-tablist
            emacs-transient
            emacs-friendly-shell-command))
    (home-page "https://github.com/p3r7/magrant")
    (synopsis "Transient Interface to Vagrant")
    (description
      "Documentation at https://melpa.org/#/magrant")
    (license #f)))

(define-public emacs-majapahit-themes
  (package
    (name "emacs-majapahit-themes")
    (version "20221207.121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/majapahit-themes.git")
               (commit
                 "7200f16f0fd4cc18e8c7d82b62cc351b610609af")))
        (sha256
          (base32
            "0r47k03m21w206kq8n3q10374xxw0278l8wilb2ls1bmr2bsd2sa"))))
    (build-system melpa-build-system)
    (home-page
      "http:/gitlab.com/franksn/majapahit-theme/")
    (synopsis
      "Color theme with a dark and light versions")
    (description
      "Documentation at https://melpa.org/#/majapahit-themes")
    (license #f)))

(define-public emacs-major-mode-hydra
  (package
    (name "emacs-major-mode-hydra")
    (version "20231003.2050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jerrypnz/major-mode-hydra.el.git")
               (commit
                 "d0a5dadee97c3752fcdef113cf2ba1923972a480")))
        (sha256
          (base32
            "0waghp59ybzcgy1l0bg29qfiqps95vc062p3x80a3ksl68ylll89"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-pretty-hydra))
    (arguments '(#:files ("major-mode-hydra.el")))
    (home-page
      "https://github.com/jerrypnz/major-mode-hydra.el")
    (synopsis
      "Major mode keybindings managed by Hydra")
    (description
      "Documentation at https://melpa.org/#/major-mode-hydra")
    (license #f)))

(define-public emacs-major-mode-icons
  (package
    (name "emacs-major-mode-icons")
    (version "20220210.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/major-mode-icons.git")
               (commit
                 "b0214e0af13cd3691c4d28f03e3108bd98ec7a85")))
        (sha256
          (base32
            "04zhns2ziwkz67zlnh4qc7faqq751f9mc5b38zmkh6nidlhfhjj5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline emacs-all-the-icons))
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://repo.or.cz/major-mode-icons.git")
    (synopsis
      "display icon for major-mode on mode-line.")
    (description
      "Documentation at https://melpa.org/#/major-mode-icons")
    (license #f)))

(define-public emacs-make-color
  (package
    (name "emacs-make-color")
    (version "20140625.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/make-color.el.git")
               (commit
                 "5ca1383ca9228bca82120b238bdc119f302b75c0")))
        (sha256
          (base32
            "1wmpy1d966zzxwar2ng825zlch5fwsslsi1706ss9v7zl7i9wggd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/make-color.el")
    (synopsis
      "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys")
    (description
      "Documentation at https://melpa.org/#/make-color")
    (license #f)))

(define-public emacs-make-it-so
  (package
    (name "emacs-make-it-so")
    (version "20190625.1036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/make-it-so.git")
               (commit
                 "b73dfb640588123c9eece230ad72b37604f5c126")))
        (sha256
          (base32
            "0p6xhyinzzkrwzbpxqfm8hlii0ikvmmylya240bwsa77w0g1k6xq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-swiper))
    (arguments
      '(#:files ("make-it-so.el" "recipes")))
    (home-page
      "https://github.com/abo-abo/make-it-so")
    (synopsis
      "Transform files with Makefile recipes.")
    (description
      "Documentation at https://melpa.org/#/make-it-so")
    (license #f)))

(define-public emacs-makefile-executor
  (package
    (name "emacs-makefile-executor")
    (version "20230224.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Olivia5k/makefile-executor.el.git")
               (commit
                 "d1d98eaf522a767561f6c7cbd8d2526be58b3ec5")))
        (sha256
          (base32
            "0wm0i2m124dglwq0szp6pdh2r0dln0xpgscw2immi9cchcmgcy4f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-s))
    (home-page
      "https://github.com/Olivia5k/makefile-executor.el")
    (synopsis
      "Commands for conveniently running makefile targets")
    (description
      "Documentation at https://melpa.org/#/makefile-executor")
    (license #f)))

(define-public emacs-makey
  (package
    (name "emacs-makey")
    (version "20131231.1430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mickeynp/makey.git")
               (commit
                 "c0b6bd5956744dd64052e54574e35d39f7c9d75b")))
        (sha256
          (base32
            "19hm9riqinbw1ria63290c5d6hszkbjrzvgsjr74pw5d7gzw4vwv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "interactive commandline mode")
    (description
      "Documentation at https://melpa.org/#/makey")
    (license #f)))

(define-public emacs-malinka
  (package
    (name "emacs-malinka")
    (version "20171202.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LefterisJP/malinka.git")
               (commit
                 "d4aa517c7a9022eae16c758c7efdb3a0403542d7")))
        (sha256
          (base32
            "1rnzvx1nc01sw9fklm36lyllqm6dizj64gnlqbs4nammx7z0spi1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-rtags
            emacs-projectile))
    (home-page
      "https://github.com/LefterisJP/malinka")
    (synopsis
      "A C/C++ project configuration package for Emacs")
    (description
      "Documentation at https://melpa.org/#/malinka")
    (license #f)))

(define-public emacs-mallard-mode
  (package
    (name "emacs-mallard-mode")
    (version "20131204.425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhradilek/emacs-mallard-mode.git")
               (commit
                 "c48170c1ace4959abcc5fb1df0d4cb149cff44c1")))
        (sha256
          (base32
            "18x3cssfn81k8hg4frj7dhzphg784321z51wbbvn3bjhq7s6j3a2"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("mallard-mode.el" "schema")))
    (home-page
      "https://github.com/jhradilek/emacs-mallard-mode")
    (synopsis "Major mode for editing Mallard files")
    (description
      "Documentation at https://melpa.org/#/mallard-mode")
    (license #f)))

(define-public emacs-mallard-snippets
  (package
    (name "emacs-mallard-snippets")
    (version "20131023.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhradilek/emacs-mallard-snippets.git")
               (commit
                 "70c5293f10722f2ace73bdf74d9a18f95b040edc")))
        (sha256
          (base32
            "0qk7i47nmyp4llwp6x0i1i5dk82ck26iyz1sjvvlihaw8a5akny2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet emacs-mallard-mode))
    (arguments
      '(#:files ("mallard-snippets.el" "snippets")))
    (home-page
      "https://github.com/jhradilek/emacs-mallard-snippets")
    (synopsis "Yasnippets for Mallard")
    (description
      "Documentation at https://melpa.org/#/mallard-snippets")
    (license #f)))

(define-public emacs-malyon
  (package
    (name "emacs-malyon")
    (version "20161208.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/speedenator/malyon.git")
               (commit
                 "0d9882650720b4a791556f5e2d917388965d6fc0")))
        (sha256
          (base32
            "0an1yvp0p624rxd8n5phiwvznw35ripqhlwzwyv2bw7lc1rscllr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/speedenator/malyon")
    (synopsis
      "mode to execute Z-code files version 3, 5, 8")
    (description
      "Documentation at https://melpa.org/#/malyon")
    (license #f)))

(define-public emacs-mame
  (package
    (name "emacs-mame")
    (version "20231021.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Iacob/elmame.git")
               (commit
                 "04322e0b036198112417cf688ddf6b711010561e")))
        (sha256
          (base32
            "15slirx6x9rp2dfkphzrw3v09m2wbz6my8zkhf7cnlfdb9fmkhbi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Iacob/elmame")
    (synopsis "A MAME front-end")
    (description
      "Documentation at https://melpa.org/#/mame")
    (license #f)))

(define-public emacs-man-commands
  (package
    (name "emacs-man-commands")
    (version "20151221.2221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/man-commands.git")
               (commit
                 "f4ba0c3790855d7544dff92d470d212f24de1d9d")))
        (sha256
          (base32
            "1lfq4hsq2n33l58ja5kzy6bwk9jxbcdsg6y8gqlk71lcslzqldrk"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nflath/man-commands")
    (synopsis
      "Add interactive commands for every manpages installed in your computer.")
    (description
      "Documentation at https://melpa.org/#/man-commands")
    (license #f)))

(define-public emacs-manage-minor-mode
  (package
    (name "emacs-manage-minor-mode")
    (version "20210108.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/manage-minor-mode.git")
               (commit
                 "f4b37fffec7b6608a597e6a3f6900634802807b4")))
        (sha256
          (base32
            "0shk5n4a88r347h1fhayn0gzi242mc5b7i6b4aw0s63kw2yd4h6r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ShingoFukuyama/manage-minor-mode")
    (synopsis "Manage your minor-modes easily")
    (description
      "Documentation at https://melpa.org/#/manage-minor-mode")
    (license #f)))

(define-public emacs-manage-minor-mode-table
  (package
    (name "emacs-manage-minor-mode-table")
    (version "20220616.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/manage-minor-mode-table.git")
               (commit
                 "e47d0e1856f0a9eb9935abdaf6e14e67ef2ab4cc")))
        (sha256
          (base32
            "1aqmm5r0wqdfvac3nqwpali2b8lk7vwjs9fww5dhcwmsna8mr9vk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-manage-minor-mode))
    (home-page
      "https://github.com/jcs-elpa/manage-minor-mode-table")
    (synopsis "Manage minor-modes in table")
    (description
      "Documentation at https://melpa.org/#/manage-minor-mode-table")
    (license #f)))

(define-public emacs-mandm-theme
  (package
    (name "emacs-mandm-theme")
    (version "20231102.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/choppsv1/emacs-mandm-theme.git")
               (commit
                 "b173b41743d3e9668df2ec59df0378d8295d9902")))
        (sha256
          (base32
            "1fg86pl4v023rpaaapgzbg2gskc6vp2ha2rkgbmq9c2f5ca9y7sl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/choppsv1/emacs-mandm-theme.git")
    (synopsis "An M&M color theme.")
    (description
      "Documentation at https://melpa.org/#/mandm-theme")
    (license #f)))

(define-public emacs-mandoku
  (package
    (name "emacs-mandoku")
    (version "20180403.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mandoku/mandoku.git")
               (commit
                 "d65dbaa329ecf931f4142be72862972ea6a24e63")))
        (sha256
          (base32
            "1iqwgzjy2vlrx0kdkjjfxxm097m17ay9r6966gyi8iiip99hjn50"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-github-clone))
    (arguments '(#:files ("lisp/*.el" "lisp/*.org")))
    (home-page "http://www.mandoku.org")
    (synopsis
      "A tool to access repositories of premodern Chinese texts")
    (description
      "Documentation at https://melpa.org/#/mandoku")
    (license #f)))

(define-public emacs-mandoku-tls
  (package
    (name "emacs-mandoku-tls")
    (version "20171118.240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mandoku/mandoku-tls.git")
               (commit
                 "ffeebf5bd451ac1806ddfe1744fbbd036a56f902")))
        (sha256
          (base32
            "16399qifjj4hnfw4a62jwxfwnc7k8lmiy3bz8iwzlc91jjic7zdc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-mandoku
            emacs-github-clone
            emacs-hydra
            emacs-helm
            emacs-helm-charinfo))
    (home-page
      "https://github.com/mandoku/mandoku-tls")
    (synopsis "A tool to access the TLS database")
    (description
      "Documentation at https://melpa.org/#/mandoku-tls")
    (license #f)))

(define-public emacs-map-progress
  (package
    (name "emacs-map-progress")
    (version "20190128.16")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/map-progress.git")
               (commit
                 "1fb916159cd054c233ce3c80d9d01adfae640297")))
        (sha256
          (base32
            "1hbk35l9aljp4jqg8cv67q6b2jbcx0g665j90fygxqibrf6r52a8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/map-progress")
    (synopsis "mapping macros that report progress")
    (description
      "Documentation at https://melpa.org/#/map-progress")
    (license #f)))

(define-public emacs-map-regexp
  (package
    (name "emacs-map-regexp")
    (version "20190128.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/map-regexp.git")
               (commit
                 "ae2d1c22f786ad987aef3e319925e80160a887a0")))
        (sha256
          (base32
            "1ybhizafdhzm7fg8s6gm13fbrz1vnrc7ifq8gvrrm89wl3qi5z7f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/map-regexp")
    (synopsis
      "map over matches of a regular expression")
    (description
      "Documentation at https://melpa.org/#/map-regexp")
    (license #f)))

(define-public emacs-marcopolo
  (package
    (name "emacs-marcopolo")
    (version "20160421.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/marcopolo.git")
               (commit
                 "9193aabdf12223087b5ed58f1507d5d8a24a4381")))
        (sha256
          (base32
            "1yc0sgzh1qprhdrzjqc88d6g4xvw80fblcvjl6yn6kihv1ymz091"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-pkg-info
            emacs-request))
    (home-page
      "https://github.com/nlamirault/marcopolo")
    (synopsis
      "Emacs client to the Docker HUB/Registry API")
    (description
      "Documentation at https://melpa.org/#/marcopolo")
    (license #f)))

(define-public emacs-marginalia
  (package
    (name "emacs-marginalia")
    (version "20231028.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/marginalia.git")
               (commit
                 "e4ff0838da33bf5102ee009ff28d541f0b51c9a3")))
        (sha256
          (base32
            "0q83ia4dh0jj17m8s66ps7nfzib8656w2ig6w2jnmv63qfzfyx3d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/marginalia")
    (synopsis
      "Enrich existing commands with completion annotations")
    (description
      "Documentation at https://melpa.org/#/marginalia")
    (license #f)))

(define-public emacs-mark-multiple
  (package
    (name "emacs-mark-multiple")
    (version "20121118.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/mark-multiple.el.git")
               (commit
                 "f6a53c7c5283d640ae718f4548b0fda78877a375")))
        (sha256
          (base32
            "1x3anvy3hlmydxyfzr1rhaiy502yi1yz3v54sg8wc1w7jrvwaj29"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Sorta lets you mark several regions at once.")
    (description
      "Documentation at https://melpa.org/#/mark-multiple")
    (license #f)))

(define-public emacs-mark-thing-at
  (package
    (name "emacs-mark-thing-at")
    (version "20231019.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/mark-thing-at.git")
               (commit
                 "06cc38fb92c0c1badb06f6744f0110742ffdfe6c")))
        (sha256
          (base32
            "12dnkicqqk22sqf9vmrxf9bdlmjq2z0x9b3vv3qf817rskz7xkwh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-choice-program))
    (home-page
      "https://github.com/plandes/mark-thing-at")
    (synopsis "Mark a pattern at the current point")
    (description
      "Documentation at https://melpa.org/#/mark-thing-at")
    (license #f)))

(define-public emacs-mark-tools
  (package
    (name "emacs-mark-tools")
    (version "20130614.1025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stsquad/emacs-mark-tools.git")
               (commit
                 "a11b61effa90bd0abc876d12573674d36fc17f0c")))
        (sha256
          (base32
            "0k4zvbs09mkr8vdffv18s55rn9cyxldzav9vw04lm7v296k94ivz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/stsquad/emacs-mark-tools")
    (synopsis
      "Some simple tools to access the mark-ring in Emacs")
    (description
      "Documentation at https://melpa.org/#/mark-tools")
    (license #f)))

(define-public emacs-markdown-changelog
  (package
    (name "emacs-markdown-changelog")
    (version "20230805.1720")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plandes/markdown-changelog.git")
               (commit
                 "81d7c1c03722089daa3749bfb031d7f849772572")))
        (sha256
          (base32
            "0v2vnpv9638ra56z5r320p6fp3mj7brr1rf8n1pan8j3fr3g1zyz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/plandes/markdown-changelog")
    (synopsis "Maintain changelog entries")
    (description
      "Documentation at https://melpa.org/#/markdown-changelog")
    (license #f)))

(define-public emacs-markdown-mode
  (package
    (name "emacs-markdown-mode")
    (version "20231028.853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jrblevin/markdown-mode.git")
               (commit
                 "b1a862f0165b7bafe0f874738a55be1b1720dd7d")))
        (sha256
          (base32
            "0r9z4vlan1255118kdand9mr9rkdr8kmvrxr9q8bclyz8dk6fr54"))))
    (build-system melpa-build-system)
    (home-page
      "https://jblevins.org/projects/markdown-mode/")
    (synopsis
      "Major mode for Markdown-formatted text")
    (description
      "Documentation at https://melpa.org/#/markdown-mode")
    (license #f)))

(define-public emacs-markdown-preview-eww
  (package
    (name "emacs-markdown-preview-eww")
    (version "20160111.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/niku/markdown-preview-eww.git")
               (commit
                 "5853f836425c877c8a956501f0adda137ef1d3b7")))
        (sha256
          (base32
            "1i5gr3j9dq41p2zl4bfyvzv6i5z7hgrxzrycmbdc3s7nja36k9z4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/niku/markdown-preview-eww")
    (synopsis "Realtime preview by eww")
    (description
      "Documentation at https://melpa.org/#/markdown-preview-eww")
    (license #f)))

(define-public emacs-markdown-preview-mode
  (package
    (name "emacs-markdown-preview-mode")
    (version "20230707.803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ancane/markdown-preview-mode.git")
               (commit
                 "68242b3907dc065aa35412bfd928b43d8052d321")))
        (sha256
          (base32
            "1fxlipd2q0qbyzmjqrxvg2jfb6rbpsngxvsz66j26nx5k0p98168"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket
            emacs-markdown-mode
            emacs-web-server))
    (arguments
      '(#:files
        (:defaults "preview.html" "favicon.ico")))
    (home-page
      "https://github.com/ancane/markdown-preview-mode")
    (synopsis
      "markdown realtime preview minor mode.")
    (description
      "Documentation at https://melpa.org/#/markdown-preview-mode")
    (license #f)))

(define-public emacs-markdown-soma
  (package
    (name "emacs-markdown-soma")
    (version "20230819.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonm23/markdown-soma.git")
               (commit
                 "a80ed319a835efeaf7d71f49df0be143939bcc13")))
        (sha256
          (base32
            "11p486r79rklfqad7ar9cbyg4czla59fl0zcc0asa5zgdav17mww"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page
      "https://github.com/jasonm23/markdown-soma")
    (synopsis "Live preview for Markdown")
    (description
      "Documentation at https://melpa.org/#/markdown-soma")
    (license #f)))

(define-public emacs-markdown-toc
  (package
    (name "emacs-markdown-toc")
    (version "20210905.738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ardumont/markdown-toc.git")
               (commit
                 "3d724e518a897343b5ede0b976d6fb46c46bcc01")))
        (sha256
          (base32
            "01l48njg0x7gkssvw9nv3yq97866r945izbggx9y3z5ckr1w4hlc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-markdown-mode))
    (home-page
      "http://github.com/ardumont/markdown-toc")
    (synopsis
      "A simple TOC generator for markdown file")
    (description
      "Documentation at https://melpa.org/#/markdown-toc")
    (license #f)))

(define-public emacs-markdownfmt
  (package
    (name "emacs-markdownfmt")
    (version "20160609.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-markdownfmt.git")
               (commit
                 "187a74eb4fd9e8520ce08da42d1d292b9af7f2b7")))
        (sha256
          (base32
            "01rxl997rb7f71mbvygavsxaq2vr17f2nnpbg7i551lg82xrsbb4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nlamirault/emacs-markdownfmt")
    (synopsis "Format markdown using markdownfmt")
    (description
      "Documentation at https://melpa.org/#/markdownfmt")
    (license #f)))

(define-public emacs-markless
  (package
    (name "emacs-markless")
    (version "20220702.1811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Shirakumo/markless.el.git")
               (commit
                 "34075802ff66ae74c95b58b280712ab94eda30be")))
        (sha256
          (base32
            "0fm27gyy74jgm6bp065jcgnbwzkpy5di3c2grvzifc5cv9a46r8z"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/shirakumo/markless.el/")
    (synopsis "Major mode for Markless documents")
    (description
      "Documentation at https://melpa.org/#/markless")
    (license #f)))

(define-public emacs-markup
  (package
    (name "emacs-markup")
    (version "20170420.1129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/markup.el.git")
               (commit
                 "876da2d3f23473475bb0fd0a1480ae11d2671291")))
        (sha256
          (base32
            "0rggadka5aqgrik3qky6s75s5yb5bfj6fcpxjz1iyrwi0fka0akd"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("markup.el")))
    (home-page "http://github.com/leoc/markup.el")
    (synopsis "Simple markup generation helpers.")
    (description
      "Documentation at https://melpa.org/#/markup")
    (license #f)))

(define-public emacs-markup-faces
  (package
    (name "emacs-markup-faces")
    (version "20141110.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sensorflo/markup-faces.git")
               (commit
                 "98a807ed82473eb41c6a201ed7ef816d6bcd67b0")))
        (sha256
          (base32
            "1w6i1m7xdr9cijnmdj35cl99r12vl83qws0qlfhrgvisilshnr27"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sensorflo/markup-faces")
    (synopsis
      "collection of faces for markup language modes")
    (description
      "Documentation at https://melpa.org/#/markup-faces")
    (license #f)))

(define-public emacs-marmalade-client
  (package
    (name "emacs-marmalade-client")
    (version "20141231.2007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-marmalade-upload.git")
               (commit
                 "f315dea57e4fbebd9ee0668c0bafd4c45c7b754a")))
        (sha256
          (base32
            "017k109nfif5mzkj547py8pdnzlr4sxb74yqqsl944znflq67blr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web emacs-kv emacs-gh))
    (home-page
      "https://github.com/nicferrier/emacs-marmalade-upload")
    (synopsis "client for marmalade API from emacs")
    (description
      "Documentation at https://melpa.org/#/marmalade-client")
    (license #f)))

(define-public emacs-marquee-header
  (package
    (name "emacs-marquee-header")
    (version "20221230.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/marquee-header.git")
               (commit
                 "fd3ffa6bbe301277e90d5947b1482d3e0d7dcfa2")))
        (sha256
          (base32
            "13z55m8565ysw6z9d1ahd3ssq0ffnww9yh930pnw5j3ph8yxaiq5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/marquee-header")
    (synopsis
      "Code interface for displaying marquee in header")
    (description
      "Documentation at https://melpa.org/#/marquee-header")
    (license #f)))

(define-public emacs-marshal
  (package
    (name "emacs-marshal")
    (version "20201223.1853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/marshal.el.git")
               (commit
                 "490496d974d03906f784707ecc2e0ac36ed84b96")))
        (sha256
          (base32
            "13yf61sw5rmqb8dshk1v9j348jkdfqql55dqvs9srb3ypj8b02v9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page "https://github.com/sigma/marshal.el")
    (synopsis
      "eieio extension for automatic (un)marshalling")
    (description
      "Documentation at https://melpa.org/#/marshal")
    (license #f)))

(define-public emacs-maruo-macro-mode
  (package
    (name "emacs-maruo-macro-mode")
    (version "20160616.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/maruo-macro-mode.el.git")
               (commit
                 "8fc9a38ad051eafa8eb94038711acc52c5d1d8d5")))
        (sha256
          (base32
            "0r005yap50jf6b5jc7314ds17g1nn2irn1agidi74fbrwfbndxgm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing Hidemaru/Maruo macro script")
    (description
      "Documentation at https://melpa.org/#/maruo-macro-mode")
    (license #f)))

(define-public emacs-masm-mode
  (package
    (name "emacs-masm-mode")
    (version "20200308.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/YiGeeker/masm-mode.git")
               (commit
                 "626b9255c2bb967a53d1d50be0b98a1bcae3250c")))
        (sha256
          (base32
            "1k6wcksddy0k02hrqfaifr61c09pg6kpcqpmfm9zkb444pdqjn17"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/YiGeeker/masm-mode")
    (synopsis "MASM x86 and x64 assembly major mode")
    (description
      "Documentation at https://melpa.org/#/masm-mode")
    (license #f)))

(define-public emacs-mastodon
  (package
    (name "emacs-mastodon")
    (version "20231030.1922")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/mastodon-"
               version
               ".tar"))
        (sha256
          (base32
            "0vvrvar79g6dv9cjckpvsw12ci650xvky3wbhawjc4sdg8yjnpvs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-persist))
    (home-page
      "https://codeberg.org/martianh/mastodon.el")
    (synopsis
      "Client for fediverse services using the Mastodon API")
    (description
      "Documentation at https://melpa.org/#/mastodon")
    (license #f)))

(define-public emacs-material-theme
  (package
    (name "emacs-material-theme")
    (version "20210904.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpaulik/emacs-material-theme.git")
               (commit
                 "6823009bc92f82aa3a90e27e1009f7da8e87b648")))
        (sha256
          (base32
            "1c0z2dxfwzgl71xwli3dmyn96xadm5wnhnp5inv5f01mp7iwhf8a"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/cpaulik/emacs-material-theme")
    (synopsis
      "A Theme based on the colors of the Google Material Design")
    (description
      "Documentation at https://melpa.org/#/material-theme")
    (license #f)))

(define-public emacs-math-preview
  (package
    (name "emacs-math-preview")
    (version "20230425.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/math-preview.git")
               (commit
                 "620de35fc8cf940eba5a567767eac2288708d8cb")))
        (sha256
          (base32
            "0ni08900p0pbajw143iw0b7a62qiqcm9b6jy7pqgpn437vydjx1z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://gitlab.com/matsievskiysv/math-preview")
    (synopsis "Preview TeX math equations inline")
    (description
      "Documentation at https://melpa.org/#/math-preview")
    (license #f)))

(define-public emacs-math-symbol-lists
  (package
    (name "emacs-math-symbol-lists")
    (version "20220828.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/math-symbol-lists.git")
               (commit
                 "ac3eb053d3b576fcdd192b0ac6ad5090ea3a7079")))
        (sha256
          (base32
            "13p9ayli5szra459vb4a3p3z9ckrzjg54kqsdyd9wdw0lfrw4mfa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vspinu/math-symbol-lists")
    (synopsis
      "Lists of Unicode math symbols and latex commands")
    (description
      "Documentation at https://melpa.org/#/math-symbol-lists")
    (license #f)))

(define-public emacs-math-symbols
  (package
    (name "emacs-math-symbols")
    (version "20201005.2313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/math-symbols.git")
               (commit
                 "091b81cb40ceaff97614999ffe85b572ace182f0")))
        (sha256
          (base32
            "0zahy3k4bhjrhw2ndjhcxvx6yljv44zhjs5ik3az9n46dim7agx3"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("math-symbols*.el" "unimathsymbols.txt")))
    (home-page
      "https://github.com/kawabata/math-symbols")
    (synopsis
      "Math Symbol Input methods and conversion tools")
    (description
      "Documentation at https://melpa.org/#/math-symbols")
    (license #f)))

(define-public emacs-math-tex-convert
  (package
    (name "emacs-math-tex-convert")
    (version "20221210.1937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enricoflor/math-tex-convert.git")
               (commit
                 "8b174d05e8e5269322a1ee90f94cf1ed018d4976")))
        (sha256
          (base32
            "0y8mk22jklj0bappvfjmkz8cf9j9ppsbgp770fvc6m62xf544jlx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-math-symbol-lists emacs-auctex))
    (home-page
      "https://github.com/enricoflor/math-tex-convert")
    (synopsis
      "Convert LaTeX macros to unicode and back")
    (description
      "Documentation at https://melpa.org/#/math-tex-convert")
    (license #f)))

(define-public emacs-matlab-mode
  (package
    (name "emacs-matlab-mode")
    (version "20230712.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.code.sf.net/p/matlab-emacs/src")
               (commit
                 "803f9d3d8ee25950ad5352ec0651b2531aaa29e5")))
        (sha256
          (base32
            "0niww19zl7vbg48m5caggwhzwp6d56my1dlk43vv4s9bn5s64p0b"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         "*.m"
         ("toolbox" "toolbox/*.m")
         ("toolbox/+emacs" "toolbox/+emacs/*.m")
         ("toolbox/+emacs/@Breakpoints"
          "toolbox/+emacs/@Breakpoints/*.m")
         ("toolbox/+emacs/@EmacsServer"
          "toolbox/+emacs/@EmacsServer/*.m")
         ("toolbox/+emacs/@Stack"
          "toolbox/+emacs/@Stack/*.m")
         ("templates" "templates/*.srt"))))
    (home-page "unspecified")
    (synopsis "Major mode for MATLAB(R) dot-m files")
    (description
      "Documentation at https://melpa.org/#/matlab-mode")
    (license #f)))

(define-public emacs-maude-mode
  (package
    (name "emacs-maude-mode")
    (version "20230504.937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rudi/maude-mode.git")
               (commit
                 "2e1f68a890493d964f933d6e40b0ede047f70ede")))
        (sha256
          (base32
            "0f84q5xa4d55w2i56n4jzpyz7phrbnjg4l5343y4yxh9pb4hc0d3"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rudi/abs-mode")
    (synopsis
      "Emacs mode for the programming language Maude")
    (description
      "Documentation at https://melpa.org/#/maude-mode")
    (license #f)))

(define-public emacs-maven-test-mode
  (package
    (name "emacs-maven-test-mode")
    (version "20141220.557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rranelli/maven-test-mode.git")
               (commit
                 "a19151861df2ad8ae4880a2e7c86ddf848cb569a")))
        (sha256
          (base32
            "1xn2yyr8mr90cynbxgv0h5v180pzf0ydnjr9spg34mrdicqlki6c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/rranelli/maven-test-mode")
    (synopsis
      "Utilities for navigating test files and running maven test tasks.")
    (description
      "Documentation at https://melpa.org/#/maven-test-mode")
    (license #f)))

(define-public emacs-maxframe
  (package
    (name "emacs-maxframe")
    (version "20170120.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmm5t/maxframe.el.git")
               (commit
                 "f7048ce95443f2c06cb6b140814451e3a037103a")))
        (sha256
          (base32
            "0kjhfc2jlhq9qdwigx1iq8wpvzfr7jlv8jfqa2j2va8h0jp2jnp6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "maximize the emacs frame based on display size")
    (description
      "Documentation at https://melpa.org/#/maxframe")
    (license #f)))

(define-public emacs-maxima
  (package
    (name "emacs-maxima")
    (version "20230529.1658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sasanidas/maxima.git")
               (commit
                 "2de798f6644753772553cd0420d3c419ed50dd0b")))
        (sha256
          (base32
            "1gjdmdg496lkgm7xkgvfl4b4xir91kzn7sizyrgwdj845i9lfjmp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-test-simple))
    (arguments
      '(#:files
        ("maxima.el"
         "maxima-font-lock.el"
         ("keywords" "keywords/*"))))
    (home-page "https://gitlab.com/sasanidas/maxima")
    (synopsis "Major mode for Maxima")
    (description
      "Documentation at https://melpa.org/#/maxima")
    (license #f)))

(define-public emacs-mb-url
  (package
    (name "emacs-mb-url")
    (version "20230811.442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dochang/mb-url.git")
               (commit
                 "a9f1e8ab46858c35a600ce304748a7db65400bef")))
        (sha256
          (base32
            "1bihsi0qlvkz817jbbw3352rvmb9iy73l4m9gqr33ca3sxs6qavq"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/dochang/mb-url")
    (synopsis
      "Multiple Backends for Emacs URL package")
    (description
      "Documentation at https://melpa.org/#/mb-url")
    (license #f)))

(define-public emacs-mbe
  (package
    (name "emacs-mbe")
    (version "20151126.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ijp/mbe.el.git")
               (commit
                 "bb10aa8f26bb7e9b1d5746934c94edb00402940c")))
        (sha256
          (base32
            "1zywygdgnp2zr8fxqhl0cbrgbl43931k936b9imhqi96p6622pb6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mbe.el")))
    (home-page "https://github.com/ijp/mbe.el")
    (synopsis "Macros by Example")
    (description
      "Documentation at https://melpa.org/#/mbe")
    (license #f)))

(define-public emacs-mbo70s-theme
  (package
    (name "emacs-mbo70s-theme")
    (version "20170808.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-mbo70s-theme.git")
               (commit
                 "bed3db8965708ed4e9482b224a9b084765c052f2")))
        (sha256
          (base32
            "19hha9xwfqvdgsws69x0mcm93yfllp44hdl1xw9zlhj8f4ihizh5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "70s style palette, with similarities to mbo theme")
    (description
      "Documentation at https://melpa.org/#/mbo70s-theme")
    (license #f)))

(define-public emacs-mbsync
  (package
    (name "emacs-mbsync")
    (version "20200128.1053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/mbsync-el.git")
               (commit
                 "d3c81da81ce5b154c0d048047a47277338721a70")))
        (sha256
          (base32
            "10xxgvzjb7bl3lzgjkdsnnkd9wphkc2pm621agyjlayzcjnldz5p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dimitri/mbsync-el")
    (synopsis "run mbsync to fetch mails")
    (description
      "Documentation at https://melpa.org/#/mbsync")
    (license #f)))

(define-public emacs-mc-calc
  (package
    (name "emacs-mc-calc")
    (version "20200420.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hatheroldev/mc-calc.git")
               (commit
                 "74a046a5728919a4d1135ca62738326b0dde278c")))
        (sha256
          (base32
            "0498088pgbpywqdla8mzhpq4izzbdbqwq9cjzg0050y598pinpqq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-multiple-cursors))
    (home-page
      "https://github.com/hatheroldev/mc-calc")
    (synopsis "Combine multiple-cursors and calc")
    (description
      "Documentation at https://melpa.org/#/mc-calc")
    (license #f)))

(define-public emacs-mc-extras
  (package
    (name "emacs-mc-extras")
    (version "20181109.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/mc-extras.el.git")
               (commit
                 "053abc52181b8718559d7361a587bbb795faf164")))
        (sha256
          (base32
            "16y48qrd20m20vypvys5jp4v4gc1qrqlkm75s1pk1r68i9zrw481"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-multiple-cursors))
    (home-page "https://github.com/knu/mc-extras.el")
    (synopsis
      "Extra functions for multiple-cursors mode.")
    (description
      "Documentation at https://melpa.org/#/mc-extras")
    (license #f)))

(define-public emacs-md-readme
  (package
    (name "emacs-md-readme")
    (version "20191112.1943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomas11/md-readme.git")
               (commit
                 "ca99f44de11fab18d1f50d4b1722f2ceee3c814d")))
        (sha256
          (base32
            "1llwvcbwfj5mw100rx2hp8vcr7kawpl18nvy6vxl6brqw7ka0d2s"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "http://github.com/thomas11/md-readme/tree/master")
    (synopsis
      "Markdown-formatted READMEs for your ELisp")
    (description
      "Documentation at https://melpa.org/#/md-readme")
    (license #f)))

(define-public emacs-md4rd
  (package
    (name "emacs-md4rd")
    (version "20230725.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/md4rd.git")
               (commit
                 "2fa198af749e9ddb759e052d911f56a626088903")))
        (sha256
          (base32
            "1p6lrx0basgkj2p893l1lav2mldd8gjm5p4911w7mvpzps1fhxjc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-dash
            emacs-s
            emacs-tree-mode))
    (home-page "https://github.com/ahungry/md4rd")
    (synopsis "Mode for reddit (browse it).")
    (description
      "Documentation at https://melpa.org/#/md4rd")
    (license #f)))

(define-public emacs-media-progress
  (package
    (name "emacs-media-progress")
    (version "20230805.2231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jumper047/media-progress.git")
               (commit
                 "951742e9e741a71bf527a23bf56deeedb12af7bd")))
        (sha256
          (base32
            "0f6h1w8nz9038pmlgmabv28qpq3n80fs812a4gz6773gknd50cjz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("media-progress.el")))
    (home-page
      "https://github.com/jumper047/media-progress")
    (synopsis
      "Display position where media player stopped")
    (description
      "Documentation at https://melpa.org/#/media-progress")
    (license #f)))

(define-public emacs-media-progress-dired
  (package
    (name "emacs-media-progress-dired")
    (version "20230527.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jumper047/media-progress.git")
               (commit
                 "ca492e4a58d3cecf56cfa2e1ee0207c1cb7bbaf9")))
        (sha256
          (base32
            "1i4p9kwd3ifqjbpvz7lq1m7ygllk9mgcklxgnmzl258ii93ksdha"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-media-progress))
    (arguments
      '(#:files ("media-progress-dired.el")))
    (home-page
      "https://github.com/jumper047/media-progress")
    (synopsis
      "Display position where media player stopped in dired buffer")
    (description
      "Documentation at https://melpa.org/#/media-progress-dired")
    (license #f)))

(define-public emacs-media-progress-dirvish
  (package
    (name "emacs-media-progress-dirvish")
    (version "20230520.1547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jumper047/media-progress.git")
               (commit
                 "ca492e4a58d3cecf56cfa2e1ee0207c1cb7bbaf9")))
        (sha256
          (base32
            "1i4p9kwd3ifqjbpvz7lq1m7ygllk9mgcklxgnmzl258ii93ksdha"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dirvish emacs-media-progress))
    (arguments
      '(#:files ("media-progress-dirvish.el")))
    (home-page
      "https://github.com/jumper047/media-progress")
    (synopsis
      "Display position where media player stopped in dirvish")
    (description
      "Documentation at https://melpa.org/#/media-progress-dirvish")
    (license #f)))

(define-public emacs-media-thumbnail
  (package
    (name "emacs-media-thumbnail")
    (version "20220827.2325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/media-thumbnail.git")
               (commit
                 "e90e3b556ec5f342446707475615817d3f96aa80")))
        (sha256
          (base32
            "1lh2h9j3gzkqch4qv7x59346fxkf05dr5jv3zvnf3sp25d5cw79x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/media-thumbnail")
    (synopsis
      "Utility package to provide media icons")
    (description
      "Documentation at https://melpa.org/#/media-thumbnail")
    (license #f)))

(define-public emacs-mediawiki
  (package
    (name "emacs-mediawiki")
    (version "20220923.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/mediawiki-el.git")
               (commit
                 "c28cf78d4fe4969df3af8dcc2adaf71c4212e5ad")))
        (sha256
          (base32
            "0l08k4g6nx2n8pb1iwdhxsbr0szb6xinq94084z8f9jnridlhbwh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hexmode/mediawiki-el")
    (synopsis "mediawiki frontend")
    (description
      "Documentation at https://melpa.org/#/mediawiki")
    (license #f)))

(define-public emacs-meghanada
  (package
    (name "emacs-meghanada")
    (version "20220101.505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mopemope/meghanada-emacs.git")
               (commit
                 "59c46cabb7eee715fe810ce59424934a1286df84")))
        (sha256
          (base32
            "1azjp340wxv25c7bg1y5m8gwmgsdfvlxxcisczz44v87v8jbjhyw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yasnippet
            emacs-company
            emacs-flycheck))
    (home-page
      "https://github.com/mopemope/meghanada-emacs")
    (synopsis "A better java development mode")
    (description
      "Documentation at https://melpa.org/#/meghanada")
    (license #f)))

(define-public emacs-melancholy-theme
  (package
    (name "emacs-melancholy-theme")
    (version "20230330.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/baaash/melancholy-theme.git")
               (commit
                 "a5c4360f57793401b63b0df382e845b4845c8f97")))
        (sha256
          (base32
            "0351m7py16kxfri5z2d4k89ld1x9kvgj82xd0dv9pyp7pkxrfxwz"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/baaash/melancholy-theme")
    (synopsis
      "A dark theme that's pretty sad  -*- lexical-binding: t; -")
    (description
      "Documentation at https://melpa.org/#/melancholy-theme")
    (license #f)))

(define-public emacs-mellow-theme
  (package
    (name "emacs-mellow-theme")
    (version "20170808.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-mellow-theme.git")
               (commit
                 "2bdf18f05f5212b6f269d9a94afe2cf201766891")))
        (sha256
          (base32
            "0cj9lkqgiaq1s2k9ky93jgv5pfbmjznsd54r3iqkiy1zshpkir68"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Mellow (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/mellow-theme")
    (license #f)))

(define-public emacs-melpa-upstream-visit
  (package
    (name "emacs-melpa-upstream-visit")
    (version "20130720.1033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/melpa-upstream-visit.git")
               (commit
                 "7310c74fdead3c0f86ad6eff76cf989e63f70f66")))
        (sha256
          (base32
            "12cp56ppmwpdgf5afx7hd2qb8d1qq8z27191fbbf5zqw8cq5zkpd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis
      "A set of kludges to visit a melpa-hosted package's homepage")
    (description
      "Documentation at https://melpa.org/#/melpa-upstream-visit")
    (license #f)))

(define-public emacs-memento-mori
  (package
    (name "emacs-memento-mori")
    (version "20190628.2147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-memento-mori.git")
               (commit
                 "b99c5ff526079fc5a1e1be097534855da176bc2b")))
        (sha256
          (base32
            "15l993g6ihx3m634y3wdzx0wl4546qdr1xr723qxcvxi0ph16kbx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-memento-mori")
    (synopsis "Reminder of mortality")
    (description
      "Documentation at https://melpa.org/#/memento-mori")
    (license #f)))

(define-public emacs-memoize
  (package
    (name "emacs-memoize")
    (version "20200103.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacs-memoize.git")
               (commit
                 "51b075935ca7070f62fae1d69fe0ff7d8fa56fdd")))
        (sha256
          (base32
            "102f34iw2vslimihf557vwn5599xcw1vf422vypdg3ilk6s8z2ax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/emacs-memoize")
    (synopsis "Memoization functions")
    (description
      "Documentation at https://melpa.org/#/memoize")
    (license #f)))

(define-public emacs-memolist
  (package
    (name "emacs-memolist")
    (version "20150804.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mikanfactory/memolist.el.git")
               (commit
                 "c437a32d3955f859d9bbcbadf0911bbe27d877ff")))
        (sha256
          (base32
            "0avpjmymjwqnaim96c637wb6ch3iyanwdvmn6x83iynvkpr2nm9l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-markdown-mode emacs-ag))
    (home-page
      "http://github.com/mikanfactory/emacs-memolist")
    (synopsis
      "memolist.el is Emacs port of memolist.vim.")
    (description
      "Documentation at https://melpa.org/#/memolist")
    (license #f)))

(define-public emacs-mentor
  (package
    (name "emacs-mentor")
    (version "20230103.1146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skangas/mentor.git")
               (commit
                 "f51dd4f3f87c54b7cc92189924b9d873a53f5a75")))
        (sha256
          (base32
            "1jmgq8n6lf2gkxx1f2nv56dvs335zhcq4kgvmsrdiaay4v4j9pgi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xml-rpc emacs-async emacs-url-scgi))
    (home-page "https://github.com/skangas/mentor")
    (synopsis
      "Frontend for the rTorrent bittorrent client")
    (description
      "Documentation at https://melpa.org/#/mentor")
    (license #f)))

(define-public emacs-meow
  (package
    (name "emacs-meow")
    (version "20231005.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meow-edit/meow.git")
               (commit
                 "f885c02e1c72da722dfc681af30476096528dc5a")))
        (sha256
          (base32
            "0di4pwyz8mbj1x5pbyhrnmi1idyxqb05w1msays1ayv6qc2xjjhv"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/DogLooksGood/meow")
    (synopsis "Yet Another modal editing")
    (description
      "Documentation at https://melpa.org/#/meow")
    (license #f)))

(define-public emacs-merlin
  (package
    (name "emacs-merlin")
    (version "20231108.1124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "f46ebad2216460cf58293b913bb76c5e9bdc968c")))
        (sha256
          (base32
            "1wirkcwi21s8z3210h9fwqbman2fg2366b05vgmgasphirsjdsw0"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/*.el"
         (:exclude
           "emacs/merlin-ac.el"
           "emacs/merlin-company.el"
           "emacs/merlin-iedit.el"))))
    (home-page "https://github.com/ocaml/merlin")
    (synopsis
      "Mode for Merlin, an assistant for OCaml")
    (description
      "Documentation at https://melpa.org/#/merlin")
    (license #f)))

(define-public emacs-merlin-ac
  (package
    (name "emacs-merlin-ac")
    (version "20221123.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "dff6628d4f70698d9ea057b8c2a62be7c575ab18")))
        (sha256
          (base32
            "071mb5qyaazqgd9p9i38wf6bjh6k8idz3vc217f37wnzpq70fdsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-merlin emacs-auto-complete))
    (arguments '(#:files ("emacs/merlin-ac.el")))
    (home-page "http://github.com/ocaml/merlin")
    (synopsis "Merlin and auto-complete integration")
    (description
      "Documentation at https://melpa.org/#/merlin-ac")
    (license #f)))

(define-public emacs-merlin-company
  (package
    (name "emacs-merlin-company")
    (version "20221123.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "dff6628d4f70698d9ea057b8c2a62be7c575ab18")))
        (sha256
          (base32
            "071mb5qyaazqgd9p9i38wf6bjh6k8idz3vc217f37wnzpq70fdsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-merlin emacs-company))
    (arguments
      '(#:files ("emacs/merlin-company.el")))
    (home-page "http://github.com/ocaml/merlin")
    (synopsis "Merlin and company mode integration")
    (description
      "Documentation at https://melpa.org/#/merlin-company")
    (license #f)))

(define-public emacs-merlin-eldoc
  (package
    (name "emacs-merlin-eldoc")
    (version "20230213.555")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Khady/merlin-eldoc.git")
               (commit
                 "bf8edc63d85b35e4def352fa7ce4ea39f43e1fd8")))
        (sha256
          (base32
            "01k9hnhv9wbshwkrhzmy1d6dw1dps0amjpdcjhzyzz3d97kwnjws"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-merlin))
    (home-page
      "https://github.com/khady/merlin-eldoc")
    (synopsis "eldoc for OCaml and Reason")
    (description
      "Documentation at https://melpa.org/#/merlin-eldoc")
    (license #f)))

(define-public emacs-merlin-iedit
  (package
    (name "emacs-merlin-iedit")
    (version "20221123.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/merlin.git")
               (commit
                 "dff6628d4f70698d9ea057b8c2a62be7c575ab18")))
        (sha256
          (base32
            "071mb5qyaazqgd9p9i38wf6bjh6k8idz3vc217f37wnzpq70fdsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-merlin emacs-iedit))
    (arguments '(#:files ("emacs/merlin-iedit.el")))
    (home-page "http://github.com/ocaml/merlin")
    (synopsis "Merlin and iedit integration")
    (description
      "Documentation at https://melpa.org/#/merlin-iedit")
    (license #f)))

(define-public emacs-mermaid-mode
  (package
    (name "emacs-mermaid-mode")
    (version "20230905.1916")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/mermaid-mode.git")
               (commit
                 "4cdc76e459d184fc241b607e9da131ebce9f4ce2")))
        (sha256
          (base32
            "1kad50hgj4xgiy9pi51y4rnqvvbw4glwb3afxv7rql54bvrzzfbm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abrochard/mermaid-mode")
    (synopsis
      "major mode for working with mermaid graphs")
    (description
      "Documentation at https://melpa.org/#/mermaid-mode")
    (license #f)))

(define-public emacs-mermaid-ts-mode
  (package
    (name "emacs-mermaid-ts-mode")
    (version "20231001.1704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JonathanHope/mermaid-ts-mode.git")
               (commit
                 "4f95d4544d5ca2d48ab93c0a133c48d94aed86d3")))
        (sha256
          (base32
            "068k7mlhi2xn0z2jx4jzn0nchpna9bhfk96vyyp69qfdqf5rbpgn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/JonathanHope/mermaid-ts-mode")
    (synopsis "Major mode for Mermaid")
    (description
      "Documentation at https://melpa.org/#/mermaid-ts-mode")
    (license #f)))

(define-public emacs-meson-mode
  (package
    (name "emacs-meson-mode")
    (version "20210820.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wentasah/meson-mode.git")
               (commit
                 "1a2e2abb098c9288c2cdb3affbad76edd98abf59")))
        (sha256
          (base32
            "1bpy0iw5h7vrd3vwzk12bq6b134812dwbxxwsbsmbsk0ji4xyyq3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wentasah/meson-mode")
    (synopsis
      "Major mode for the Meson build system files")
    (description
      "Documentation at https://melpa.org/#/meson-mode")
    (license #f)))

(define-public emacs-mess
  (package
    (name "emacs-mess")
    (version "20230718.1533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Iacob/mess.el.git")
               (commit
                 "65392b0d0ded45de789d4deab28a4ce88de24567")))
        (sha256
          (base32
            "0z5nv47jwqq6a9wwsvx2mzh3kjrjgifc3s68khchnj2h128f1why"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mame))
    (home-page "https://github.com/Iacob/elmame")
    (synopsis "Front-end for MAME MESS")
    (description
      "Documentation at https://melpa.org/#/mess")
    (license #f)))

(define-public emacs-message-attachment-reminder
  (package
    (name "emacs-message-attachment-reminder")
    (version "20230124.520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alexmurray/message-attachment-reminder.git")
               (commit
                 "975381d6e7c6771c462e73abd3398a4ed2a9b86b")))
        (sha256
          (base32
            "1frh5kksypp8lwp3hsfh6fxbm4hbylkq2ll8g9nvq84kaq9m1k84"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alexmurray/message-attachment-reminder")
    (synopsis "Remind if missing attachment")
    (description
      "Documentation at https://melpa.org/#/message-attachment-reminder")
    (license #f)))

(define-public emacs-message-view-patch
  (package
    (name "emacs-message-view-patch")
    (version "20210904.2227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanfarley/message-view-patch.git")
               (commit
                 "40bc2e554fc1d0b6f0c403192c0a3ceaa019a78d")))
        (sha256
          (base32
            "0cmkiggrl42sjx31dwnzac32bs3q2ksmamkq1pjjl8fwshp4g8sv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit))
    (home-page
      "https://github.com/seanfarley/message-view-patch")
    (synopsis "Colorize patch-like emails in mu4e")
    (description
      "Documentation at https://melpa.org/#/message-view-patch")
    (license #f)))

(define-public emacs-messages-are-flowing
  (package
    (name "emacs-messages-are-flowing")
    (version "20191029.954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/messages-are-flowing.git")
               (commit
                 "d582a564a63b7b90764ffc5c618bc5300225d0ab")))
        (sha256
          (base32
            "0lgh8vi6ya7mnzc3ik8189kx6lqh4xfnsxpn7r52q7745x4d8zb1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "visible indication when composing \"flowed\" emails")
    (description
      "Documentation at https://melpa.org/#/messages-are-flowing")
    (license #f)))

(define-public emacs-meta-presenter
  (package
    (name "emacs-meta-presenter")
    (version "20210714.1658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myTerminal/meta-presenter.git")
               (commit
                 "4ab48dacea245b223a0ffd2723ece746bd61c0af")))
        (sha256
          (base32
            "0na573lsgvzpfyam7bsc63lnsrd2acp9djbg3kpng999f2mlrx1r"))))
    (build-system melpa-build-system)
    (home-page "http://ismail.teamfluxion.com")
    (synopsis
      "A simple multi-file presentation tool for Emacs")
    (description
      "Documentation at https://melpa.org/#/meta-presenter")
    (license #f)))

(define-public emacs-metal-archives
  (package
    (name "emacs-metal-archives")
    (version "20210223.1638")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seblemaguer/metal-archives.el.git")
               (commit
                 "a218d63b990365edeef6a2394f72d1f2286aeeae")))
        (sha256
          (base32
            "1mpsc1xvgl6g3bz0dx10i3x5abivna01f1carwyz9w47zs599svk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-ht emacs-request))
    (arguments '(#:files ("metal-archives.el")))
    (home-page
      "https://github.com/seblemaguer/metal-archives.el")
    (synopsis
      "List future releases using Metal-Archives API")
    (description
      "Documentation at https://melpa.org/#/metal-archives")
    (license #f)))

(define-public emacs-metal-archives-shopping-list
  (package
    (name "emacs-metal-archives-shopping-list")
    (version "20230919.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seblemaguer/metal-archives.el.git")
               (commit
                 "15ea07747bd223f111f7fb6ca7b28c9dd0bcc4dc")))
        (sha256
          (base32
            "1dabjg2lhh7bs98fg41w0006v52z49m1i4a9118jfzrnv9p2d2zf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ml
            emacs-alert
            emacs-ht
            emacs-metal-archives))
    (arguments
      '(#:files ("metal-archives-shopping-list.el")))
    (home-page
      "https://github.com/seblemaguer/metal-archives.el")
    (synopsis
      "Add shopping list generation support to metal-archives")
    (description
      "Documentation at https://melpa.org/#/metal-archives-shopping-list")
    (license #f)))

(define-public emacs-metalheart-theme
  (package
    (name "emacs-metalheart-theme")
    (version "20160710.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/MetalHeart-Emacs.git")
               (commit
                 "ec98ea2c11dc1213dae8cbe1fe0cee73ca138bb2")))
        (sha256
          (base32
            "0pc86qh74i6vr0ap2j2sn4nl2c0vv15m4m1myyjmggfxx2f27nnc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Low-contrast theme with a dark blue-green background.")
    (description
      "Documentation at https://melpa.org/#/metalheart-theme")
    (license #f)))

(define-public emacs-metamorph
  (package
    (name "emacs-metamorph")
    (version "20220328.129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/metamorph.git")
               (commit
                 "3633e32a9601c491df32d6c2212dbe63dc6484f4")))
        (sha256
          (base32
            "1wpibd9ib27xp4693d1hq2qcf0yfcdyrc97i5b7zkc4h6ll3hxyc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/AdamNiederer/metamorph")
    (synopsis "Transform your buffers with lisp")
    (description
      "Documentation at https://melpa.org/#/metamorph")
    (license #f)))

(define-public emacs-metascript-mode
  (package
    (name "emacs-metascript-mode")
    (version "20150709.57")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/metascript/metascript-mode.git")
               (commit
                 "edb361c7b0e5de231e5334a17b90652fb1df78f9")))
        (sha256
          (base32
            "1rascpmv17dksyn9y0llmjb8r4484x5ax54w6r83k1x7ha1iacx5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/metascript/metascript-mode")
    (synopsis
      "Major mode for the Metascript programming language")
    (description
      "Documentation at https://melpa.org/#/metascript-mode")
    (license #f)))

(define-public emacs-metaweblog
  (package
    (name "emacs-metaweblog")
    (version "20230501.234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org2blog/org2blog.git")
               (commit
                 "a9eb85449975191f214b566cc091004dd81672d8")))
        (sha256
          (base32
            "06sbz2w04jb6akjky6pw7gmnkbjhslbgkicf7ff5j9v25n9dc9pa"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("metaweblog.el")))
    (home-page
      "https://github.com/org2blog/org2blog")
    (synopsis
      "An XML-RPC MetaWeblog and WordPress API client")
    (description
      "Documentation at https://melpa.org/#/metaweblog")
    (license #f)))

(define-public emacs-metrics-tracker
  (package
    (name "emacs-metrics-tracker")
    (version "20231006.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianxm/emacs-tracker.git")
               (commit
                 "3f32267635e7b73334cc661a01f3b4d31580eaf5")))
        (sha256
          (base32
            "1zhpmzd7g42d7sgl7d1wkr3br2588vrvq319gn0cpn555wnlw5wc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianxm/emacs-tracker")
    (synopsis
      "Generate reports of personal metrics from diary entries")
    (description
      "Documentation at https://melpa.org/#/metrics-tracker")
    (license #f)))

(define-public emacs-metronome
  (package
    (name "emacs-metronome")
    (version "20230515.1850")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/metronome-"
               version
               ".tar"))
        (sha256
          (base32
            "1vhv3d518nnghzcwfyk70jh6g0bj3wcq2kdrsqyf2v3ps2hh3ga8"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~jagrg/metronome")
    (synopsis "The missing metronome for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/metronome")
    (license #f)))

(define-public emacs-mew
  (package
    (name "emacs-mew")
    (version "20230415.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kazu-yamamoto/Mew.git")
               (commit
                 "47886a3b6bc64e5822546318e5a3dd0ff5eeb967")))
        (sha256
          (base32
            "0avzxdlj027pyfs3is8kj4kwgyrl2b6r2n7a0pcbag09f71f8nhi"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("elisp/*.el" "etc" "info/*.info*")))
    (home-page "unspecified")
    (synopsis "Messaging in the Emacs World")
    (description
      "Documentation at https://melpa.org/#/mew")
    (license #f)))

(define-public emacs-mexican-holidays
  (package
    (name "emacs-mexican-holidays")
    (version "20210604.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sggutier/mexican-holidays.git")
               (commit
                 "8e28907ea69f2c0ed9aad9f3b99664ca147379d0")))
        (sha256
          (base32
            "0mly44x0nq26pw8v98k3nnlc8ca1mn20jcqj5k5gzdbp6k49lkxa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sggutier/mexican-holidays")
    (synopsis "Mexico holidays for Emacs calendar.")
    (description
      "Documentation at https://melpa.org/#/mexican-holidays")
    (license #f)))

(define-public emacs-meyvn
  (package
    (name "emacs-meyvn")
    (version "20221206.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielsz/meyvn-el.git")
               (commit
                 "493e652b8fffcbed226f69a2ea82e6f9fc51ab08")))
        (sha256
          (base32
            "1k5r4k2l31vxn7cmfl2ijzlay4klyr66ljzp3c779mz967f0sf5h"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider
            emacs-projectile
            emacs-s
            emacs-dash
            emacs-parseedn
            emacs-parseclj
            emacs-geiser))
    (home-page
      "https://github.com/danielsz/meyvn-el")
    (synopsis "Meyvn client")
    (description
      "Documentation at https://melpa.org/#/meyvn")
    (license #f)))

(define-public emacs-mgmtconfig-mode
  (package
    (name "emacs-mgmtconfig-mode")
    (version "20230925.2253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purpleidea/mgmt.git")
               (commit
                 "b8f8ec8aa3f042b3345d29845b0db03720881e46")))
        (sha256
          (base32
            "10n3a8aapnppb3j7pbihp8y9n5qaqaghhz4gr2y879yzpzq6rz3m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/emacs/*.el")))
    (home-page
      "https://github.com/purpleidea/mgmt/misc/emacs")
    (synopsis
      "mgmt configuration management language")
    (description
      "Documentation at https://melpa.org/#/mgmtconfig-mode")
    (license #f)))

(define-public emacs-mhc
  (package
    (name "emacs-mhc")
    (version "20231006.1305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/mhc.git")
               (commit
                 "186d17bece0419c114db2474bc82e3eeeb1dbb9d")))
        (sha256
          (base32
            "0mwsyk6k9hrcabbkg8f9147fpf3x4dqld20qrc5n4lfk8510dqpy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-calfw))
    (arguments '(#:files ("emacs/mhc*.el")))
    (home-page "http://www.quickhack.net/mhc")
    (synopsis
      "Message Harmonized Calendaring system.")
    (description
      "Documentation at https://melpa.org/#/mhc")
    (license #f)))

(define-public emacs-mic
  (package
    (name "emacs-mic")
    (version "20230725.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/mic.git")
               (commit
                 "95dcc9fa306f579e8de6e417839841efe88ae1fc")))
        (sha256
          (base32
            "19v6q0knrkzchis3bax4h9szbiqxfk0fm83sy0zvd1gqh8jlpfh7"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/mic")
    (synopsis
      "Minimal and combinable configuration manager")
    (description
      "Documentation at https://melpa.org/#/mic")
    (license #f)))

(define-public emacs-mic-paren
  (package
    (name "emacs-mic-paren")
    (version "20170731.1907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/mic-paren.git")
               (commit
                 "d0410c7d805c9aaf51a1bcefaaef092bed5824c4")))
        (sha256
          (base32
            "0f24ibzgra94bwal8b0dpjxa11n42gkmanqswfnjhlvx052v9dxr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "advanced highlighting of matching parentheses")
    (description
      "Documentation at https://melpa.org/#/mic-paren")
    (license #f)))

(define-public emacs-micgoline
  (package
    (name "emacs-micgoline")
    (version "20160415.326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yzprofile/micgoline.git")
               (commit
                 "837504263bb1711203b0f7efecd6b7b5f272fae0")))
        (sha256
          (base32
            "0r6l6iqn5z9wp4w58flnls7kk6300qlxyy04fw0np00nvwsy4qvp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page
      "https://github.com/yzprofile/micgoline")
    (synopsis
      "powerline mode, color schemes from microsoft and google's logo.")
    (description
      "Documentation at https://melpa.org/#/micgoline")
    (license #f)))

(define-public emacs-micromamba
  (package
    (name "emacs-micromamba")
    (version "20230708.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/micromamba.el.git")
               (commit
                 "ce97237986668c31d9b023348f1ef16199276794")))
        (sha256
          (base32
            "182iz522899cc7qm5dc79vnph5jmcpm2hqi259xxs2hdl6mrx8y1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pythonic))
    (home-page
      "https://github.com/SqrtMinusOne/micromamba.el")
    (synopsis
      "A library for working with micromamba environments")
    (description
      "Documentation at https://melpa.org/#/micromamba")
    (license #f)))

(define-public emacs-migemo
  (package
    (name "emacs-migemo")
    (version "20200913.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/migemo.git")
               (commit
                 "f756cba3d5268968da361463c2e29b3a659a3de7")))
        (sha256
          (base32
            "0q2mljzkpci6p8svz17xz48kv4yhh86irg2dpypk0k2dlyr8gykx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emacs-jp/migemo")
    (synopsis
      "Japanese incremental search through dynamic pattern expansion")
    (description
      "Documentation at https://melpa.org/#/migemo")
    (license #f)))

(define-public emacs-milkode
  (package
    (name "emacs-milkode")
    (version "20140927.529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ongaeshi/emacs-milkode.git")
               (commit
                 "ba97e2aeefa1d9d0b3835bf08edd0de248b0c513")))
        (sha256
          (base32
            "1qg64mxsm2cswk52mlj7sx7k6gfnrsdwnf68i7cachri0i8aq4ap"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Command line search and direct jump with Milkode")
    (description
      "Documentation at https://melpa.org/#/milkode")
    (license #f)))

(define-public emacs-mimetypes
  (package
    (name "emacs-mimetypes")
    (version "20201115.1605")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cniles/emacs-mimetypes.git")
               (commit
                 "1663054ce266ed25e47ec707c19f619d33225903")))
        (sha256
          (base32
            "1lgh38pcjnq3va0vcs0rrl0nrf8j6x0fpdwyv3xghskazwsvrxbg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cniles/emacs-mimetypes")
    (synopsis "Guess a file's mimetype by extension")
    (description
      "Documentation at https://melpa.org/#/mimetypes")
    (license #f)))

(define-public emacs-mindre-theme
  (package
    (name "emacs-mindre-theme")
    (version "20220827.1031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erikbackman/mindre-theme.git")
               (commit
                 "fc9ab1ba03494f2fb8cb8dc4e2ba5120ae35eb31")))
        (sha256
          (base32
            "1xqaxrzq7ws8ilbcmx5kb7g7xhch91lb9cisjydmi0xcfv34sxah"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/erikbackman/mindre-theme")
    (synopsis "Minimal, light theme")
    (description
      "Documentation at https://melpa.org/#/mindre-theme")
    (license #f)))

(define-public emacs-minesweeper
  (package
    (name "emacs-minesweeper")
    (version "20200416.2342")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/minesweeper-"
               version
               ".el"))
        (sha256
          (base32
            "0ri1nyhl9xjjb9wz6ixv0fkvd5bmmmcw5i4655mq7x0qkgyqf1yi"))))
    (build-system melpa-build-system)
    (home-page "https://hg.sr.ht/~zck/minesweeper")
    (synopsis "play minesweeper in Emacs")
    (description
      "Documentation at https://melpa.org/#/minesweeper")
    (license #f)))

(define-public emacs-mingus
  (package
    (name "emacs-mingus")
    (version "20230518.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pft/mingus.git")
               (commit
                 "3fa9b95552eb062eb245321abb7f442c458618dc")))
        (sha256
          (base32
            "1qzkadnmk99qj33sqrdr54qp60p0f8vci79v0jcgz7mzm7rv869s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-libmpdee))
    (home-page "https://github.com/pft/mingus")
    (synopsis "MPD Interface")
    (description
      "Documentation at https://melpa.org/#/mingus")
    (license #f)))

(define-public emacs-mini-echo
  (package
    (name "emacs-mini-echo")
    (version "20231107.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liuyinz/mini-echo.el.git")
               (commit
                 "9d89e352b73ff2222d62b43b8944206582723fef")))
        (sha256
          (base32
            "14gr1fc1bdwwzll1yq2sc5yaadvb4360lqypvq805bnnhdjqb6hb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/liuyinz/mini-echo.el")
    (synopsis
      "Echo buffer status in minibuffer window")
    (description
      "Documentation at https://melpa.org/#/mini-echo")
    (license #f)))

(define-public emacs-mini-frame
  (package
    (name "emacs-mini-frame")
    (version "20220627.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-mini-frame.git")
               (commit
                 "60838f3cab438dcbda8eaa15ab3e5d1af88910e9")))
        (sha256
          (base32
            "0q01iymz657bg3mcmq7vcl8r0ypsa1pqj1p6gxs7ywx1d33lan4d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-mini-frame")
    (synopsis
      "Show minibuffer in child frame on read-from-minibuffer")
    (description
      "Documentation at https://melpa.org/#/mini-frame")
    (license #f)))

(define-public emacs-mini-header-line
  (package
    (name "emacs-mini-header-line")
    (version "20170621.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksjogo/mini-header-line.git")
               (commit
                 "73b6724e0a26c4528d93768191c8aa59e6bce2e5")))
        (sha256
          (base32
            "187xynmpgkx498an246ywrqdhyyp2ag1l7yxnm0x0rbfgw67q5j1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ksjogo/mini-header-line")
    (synopsis "a minimal header-line")
    (description
      "Documentation at https://melpa.org/#/mini-header-line")
    (license #f)))

(define-public emacs-mini-modeline
  (package
    (name "emacs-mini-modeline")
    (version "20230306.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiennq/emacs-mini-modeline.git")
               (commit
                 "86e753b6c38a06b0fc80d7560aa6a25245fd4d38")))
        (sha256
          (base32
            "1x1lrhr7rvwgqqb1ddqxf4q26q21cacjiik8v5w3pl4y34xrq9ba"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/kiennq/emacs-mini-modeline")
    (synopsis "Display modeline in minibuffer")
    (description
      "Documentation at https://melpa.org/#/mini-modeline")
    (license #f)))

(define-public emacs-minibuf-isearch
  (package
    (name "emacs-minibuf-isearch")
    (version "20151226.1943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knagano/minibuf-isearch.git")
               (commit
                 "2846c6ac369ee623dad4cd3c8a7a6d9078965516")))
        (sha256
          (base32
            "1n4b039448826w2jcsv4r2iw3v2vlrsxw8dbci8wcfigmkbfc879"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "incremental search on minibuffer history")
    (description
      "Documentation at https://melpa.org/#/minibuf-isearch")
    (license #f)))

(define-public emacs-minibuffer-complete-cycle
  (package
    (name "emacs-minibuffer-complete-cycle")
    (version "20130813.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/minibuffer-complete-cycle.git")
               (commit
                 "3df80135887d0169e02294a948711f6dfeca4a6f")))
        (sha256
          (base32
            "1zyb6c3xwdzk7dpn7xi0mvbcjdfxvzz1a0zlbs053pfar8iim5fk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/minibuffer-complete-cycle")
    (synopsis
      "Cycle through the *Completions* buffer")
    (description
      "Documentation at https://melpa.org/#/minibuffer-complete-cycle")
    (license #f)))

(define-public emacs-minibuffer-cua
  (package
    (name "emacs-minibuffer-cua")
    (version "20130906.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/minibuffer-cua.el.git")
               (commit
                 "adc4979a64f8b36e05960e9afa0746dfa9e2e4c7")))
        (sha256
          (base32
            "011kg76zr4hfhi2gngnc7jlmp0l0nvhmlgyc0y9bir2jbjf4yyvz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/minibuffer-cua.el")
    (synopsis
      "Make CUA mode's S-up/S-down work in minibuffer")
    (description
      "Documentation at https://melpa.org/#/minibuffer-cua")
    (license #f)))

(define-public emacs-minibuffer-modifier-keys
  (package
    (name "emacs-minibuffer-modifier-keys")
    (version "20210823.713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpringHan/minibuffer-modifier-keys.git")
               (commit
                 "38da548225f51ca7bca22d3e9b0de78e3b9e6cdd")))
        (sha256
          (base32
            "14xv0v1j1p67hlccw9a137d7hi62pwzllirdx5ixnd2lc7xfg402"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/SpringHan/minibuffer-modifier-keys.git")
    (synopsis
      "Use spacebar as a modifier key in the minibuffer")
    (description
      "Documentation at https://melpa.org/#/minibuffer-modifier-keys")
    (license #f)))

(define-public emacs-miniedit
  (package
    (name "emacs-miniedit")
    (version "20100419.1745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/miniedit.git")
               (commit
                 "e12bf659c3eb92dd8a4cb77642dc0865c54667a3")))
        (sha256
          (base32
            "1850z96gly0jnr50472idqz1drzqarr0n23bbasslrc501xkg0bq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Enhanced editing for minibuffer fields.")
    (description
      "Documentation at https://melpa.org/#/miniedit")
    (license #f)))

(define-public emacs-minimal-session-saver
  (package
    (name "emacs-minimal-session-saver")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/minimal-session-saver.git")
               (commit
                 "cf654ac549850746dc21091746e4bcc1aef7668e")))
        (sha256
          (base32
            "1sj5sq932w079y3vy55q5b6wybwrzz30y092iq1mpfg5xvl42sbm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/minimal-session-saver")
    (synopsis "Very lean session saver")
    (description
      "Documentation at https://melpa.org/#/minimal-session-saver")
    (license #f)))

(define-public emacs-minimal-theme
  (package
    (name "emacs-minimal-theme")
    (version "20190113.2132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anler/minimal-theme.git")
               (commit
                 "221b43aad320d226863892dfe4d85465e8eb81ce")))
        (sha256
          (base32
            "1zsabgn5mi63ry8jg1li866jcix9mf588ypdfajk8747a6127qd0"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/ikame/minimal-theme")
    (synopsis
      "A light/dark minimalistic Emacs 24 theme.")
    (description
      "Documentation at https://melpa.org/#/minimal-theme")
    (license #f)))

(define-public emacs-minions
  (package
    (name "emacs-minions")
    (version "20230514.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/minions.git")
               (commit
                 "62948a4a2951dab0716977421bfe0a87ea2583c5")))
        (sha256
          (base32
            "0ralw9znj749ii046l0dfa3aacm05g1ix59rfsjafhky8fiwz37m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/minions")
    (synopsis "A minor-mode menu for the mode line")
    (description
      "Documentation at https://melpa.org/#/minions")
    (license #f)))

(define-public emacs-minitest
  (package
    (name "emacs-minitest")
    (version "20200506.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arthurnn/minitest-emacs.git")
               (commit
                 "ddd152c990a528ad09a696bfad23afa4330ea4d7")))
        (sha256
          (base32
            "0mdbn8v6m4902krnagsp74r4501d4yfxc33i55l4l14gvjgx1239"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("minitest.el" "snippets")))
    (home-page
      "https://github.com/arthurnn/minitest-emacs")
    (synopsis
      "An Emacs mode for ruby minitest files")
    (description
      "Documentation at https://melpa.org/#/minitest")
    (license #f)))

(define-public emacs-minizinc-mode
  (package
    (name "emacs-minizinc-mode")
    (version "20180201.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00nlight/minizinc-mode.git")
               (commit
                 "2512521ba7f8e263a06db88df663fc6b3cca7e16")))
        (sha256
          (base32
            "1yrawvvn3ndzzrllh408v4a5n0y0n5p1jczdm9r8pbxqgyknbk1n"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/m00nlight/minizinc-mode")
    (synopsis "Major mode for MiniZinc code")
    (description
      "Documentation at https://melpa.org/#/minizinc-mode")
    (license #f)))

(define-public emacs-minor-mode-hack
  (package
    (name "emacs-minor-mode-hack")
    (version "20170926.34")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/minor-mode-hack.git")
               (commit
                 "9688994e23ccb2de568225ef125b41c46e5667c3")))
        (sha256
          (base32
            "0f6kafr7zqgdlw914bxh2390a1bjz5zy3h30yrfpavz283ycvrrw"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/minor-mode-hack.el")
    (synopsis
      "Change priority of minor-mode keymaps")
    (description
      "Documentation at https://melpa.org/#/minor-mode-hack")
    (license #f)))

(define-public emacs-minsk-theme
  (package
    (name "emacs-minsk-theme")
    (version "20200306.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jlpaca/minsk-theme.git")
               (commit
                 "e4dcdec3a4472a507d6b249ae2194dacaa885ecb")))
        (sha256
          (base32
            "03m4rnfdfsbs44cfqjy8j2z6nbxs2yzhzgizlpsvg64441hdkfa0"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("theme/emacs/minsk-theme.el")))
    (home-page
      "https://github.com/jlpaca/minsk-theme")
    (synopsis "Minsk, a theme in deep muted greens")
    (description
      "Documentation at https://melpa.org/#/minsk-theme")
    (license #f)))

(define-public emacs-mint-mode
  (package
    (name "emacs-mint-mode")
    (version "20221031.411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/creatorrr/emacs-mint-mode.git")
               (commit
                 "4bc1857045b9153312781a5a88417503f8dbb9a0")))
        (sha256
          (base32
            "1kzbab9ygf5kf79pai0g8qg1h4sgj406w51nxb240lzyqar5r117"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "tokens")))
    (home-page
      "https://github.com/creatorrr/emacs-mint-mode")
    (synopsis
      "Major mode for the Mint programming language")
    (description
      "Documentation at https://melpa.org/#/mint-mode")
    (license #f)))

(define-public emacs-mip-mode
  (package
    (name "emacs-mip-mode")
    (version "20151127.617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gaudecker/mip-mode.git")
               (commit
                 "7c88c383b4c7ed0a4c1dc397735f365c1fcb461c")))
        (sha256
          (base32
            "12k9ii4090dn03xvgqisl4zl4qi33054zxyfkqzzpa9wv72h4knc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "virtual projects for emacs.")
    (description
      "Documentation at https://melpa.org/#/mip-mode")
    (license #f)))

(define-public emacs-mips-mode
  (package
    (name "emacs-mips-mode")
    (version "20220608.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-mips-mode.git")
               (commit
                 "98795cdc81979821ac35d9f94ce354cd99780c67")))
        (sha256
          (base32
            "1wpgp08q1f2gbkn4ksd3chfz2s3cn8fdfyz04wmj37ss43mai355"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hlissner/emacs-mips-mode")
    (synopsis "Major-mode for MIPS assembly")
    (description
      "Documentation at https://melpa.org/#/mips-mode")
    (license #f)))

(define-public emacs-mistty
  (package
    (name "emacs-mistty")
    (version "20231106.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/szermatt/mistty.git")
               (commit
                 "7f9d259db5e50bbb13876b5927ee78b3d7d127ea")))
        (sha256
          (base32
            "1zgw59cpnhnb7jxck2bdkb27fzh60l3cl2g4zx86xzm8nv2zrv09"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/szermatt/mistty")
    (synopsis
      "Shell/Comint alternative based on term.el")
    (description
      "Documentation at https://melpa.org/#/mistty")
    (license #f)))

(define-public emacs-mix
  (package
    (name "emacs-mix")
    (version "20231106.1926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ayrat555/mix.el.git")
               (commit
                 "811ff399f43425fc6e04866a521063d53938b6a2")))
        (sha256
          (base32
            "0lxacg1m8fq5qkdbp55zmhaxq9wwvhgdw4nax997l6nnb7ys0q8d"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ayrat555/mix.el")
    (synopsis
      "Mix Major Mode. Build Elixir using Mix")
    (description
      "Documentation at https://melpa.org/#/mix")
    (license #f)))

(define-public emacs-mixed-pitch
  (package
    (name "emacs-mixed-pitch")
    (version "20210304.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jabranham/mixed-pitch.git")
               (commit
                 "519e05f74825abf04b7d2e0e38ec040d013a125a")))
        (sha256
          (base32
            "1yf21gm4ziplmgx8yn7jqq45mwfiindbrman7fc5b9ifq78x9ryn"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jabranham/mixed-pitch")
    (synopsis
      "Use a variable pitch, keeping fixed pitch where it's sensible")
    (description
      "Documentation at https://melpa.org/#/mixed-pitch")
    (license #f)))

(define-public emacs-mkdown
  (package
    (name "emacs-mkdown")
    (version "20140517.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajtulloch/mkdown.el.git")
               (commit
                 "8e23de82719af6c5b53b52b3308a02b3a1fb872e")))
        (sha256
          (base32
            "1d08i2cfn1q446nyyji0hi9vlw7bzkpxhn6653jz2k77vd2y0wmk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (arguments '(#:files ("*.el" "*.css")))
    (home-page
      "https://github.com/ajtulloch/mkdown.el")
    (synopsis
      "Pretty Markdown previews based on mkdown.com")
    (description
      "Documentation at https://melpa.org/#/mkdown")
    (license #f)))

(define-public emacs-mlscroll
  (package
    (name "emacs-mlscroll")
    (version "20221204.1608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/mlscroll.git")
               (commit
                 "de9f84531ca4db6e54a2ca7201638decc0ccadd4")))
        (sha256
          (base32
            "04gqvlqb00jmkxj4wv4yr3hyvyal4vp2i2x0r338144bhwcxmi71"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdtsmith/mlscroll")
    (synopsis "A scroll bar for the modeline")
    (description
      "Documentation at https://melpa.org/#/mlscroll")
    (license #f)))

(define-public emacs-mmm-jinja2
  (package
    (name "emacs-mmm-jinja2")
    (version "20170313.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/glynnforrest/mmm-jinja2.git")
               (commit
                 "c8cb763174fa2fb61b9a0e5e0ff8cb0210f8492f")))
        (sha256
          (base32
            "0big2i3bg4cm14f68ncaiz2h6dk6zqiisrz4l0bv10q9kaa9q2sj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mmm-mode))
    (home-page
      "https://github.com/glynnforrest/mmm-jinja2")
    (synopsis
      "MMM submode class for Jinja2 Templates")
    (description
      "Documentation at https://melpa.org/#/mmm-jinja2")
    (license #f)))

(define-public emacs-mmm-mode
  (package
    (name "emacs-mmm-mode")
    (version "20230917.28")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/mmm-mode.git")
               (commit
                 "96906747e862449b722b6e2c741b61871894ac3a")))
        (sha256
          (base32
            "1cj5cam607a4imfpicjm3k60lz7r1g06kbia11hdzqgrvy63sy57"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/purcell/mmm-mode")
    (synopsis
      "Allow Multiple Major Modes in a buffer")
    (description
      "Documentation at https://melpa.org/#/mmm-mode")
    (license #f)))

(define-public emacs-mmt
  (package
    (name "emacs-mmt")
    (version "20230606.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/mmt.git")
               (commit
                 "327db34c67cba38ac2987be5fa917b71883228f8")))
        (sha256
          (base32
            "01npxmk91rr959g3kslb2lp0w7kjvfs2rb46hlgs65q4fn2cfqvb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/mmt")
    (synopsis "Missing macro tools for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/mmt")
    (license #f)))

(define-public emacs-mo-git-blame
  (package
    (name "emacs-mo-git-blame")
    (version "20160129.1759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mbunkus/mo-git-blame.git")
               (commit
                 "254a675eb794cdbbdef9fa2b4b7bb510b70089c0")))
        (sha256
          (base32
            "1dh92hzpicfvrlg6swrw4igwb771xbsmsf7hxp1a4iry4w8dk398"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "An interactive, iterative 'git blame' mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/mo-git-blame")
    (license #f)))

(define-public emacs-mo-vi-ment-mode
  (package
    (name "emacs-mo-vi-ment-mode")
    (version "20181217.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AjayMT/mo-vi-ment.git")
               (commit
                 "e8b525ffc5faa31d36ecc5496b40f0f5c3603c08")))
        (sha256
          (base32
            "16ic8yhjfk0ijlcw7a270p7953w750qza3xdbf4vygkiqqkxiv84"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provide vi-like cursor movement that's easy on the fingers")
    (description
      "Documentation at https://melpa.org/#/mo-vi-ment-mode")
    (license #f)))

(define-public emacs-mobdebug-mode
  (package
    (name "emacs-mobdebug-mode")
    (version "20140110.346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deftsp/mobdebug-mode.git")
               (commit
                 "e1d483bc4e341c762bc5c0a8c52306a8d01ea0da")))
        (sha256
          (base32
            "04hbd7mv29v3fv4ld0b3skrir0wp9dix2n5nbqp63fj6n5i4cyyz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lua-mode))
    (home-page
      "https://github.com/deftsp/mobdebug-mode")
    (synopsis "Major mode for MobDebug")
    (description
      "Documentation at https://melpa.org/#/mobdebug-mode")
    (license #f)))

(define-public emacs-mocha
  (package
    (name "emacs-mocha")
    (version "20200729.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/scottaj/mocha.el.git")
               (commit
                 "6a72fa20e7be6e55c09b1bc9887ee09c5df28e45")))
        (sha256
          (base32
            "0xp0xps5xvamp7jdxq6hkmyp63ww9ca7imf0nz35xivwwkk17ri6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode emacs-f))
    (home-page "http://github.com/scottaj/mocha.el")
    (synopsis "Run Mocha or Jasmine tests")
    (description
      "Documentation at https://melpa.org/#/mocha")
    (license #f)))

(define-public emacs-mocha-snippets
  (package
    (name "emacs-mocha-snippets")
    (version "20190417.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cowboyd/mocha-snippets.el.git")
               (commit
                 "44998ea42136a6912ce80061909db1c4c77c8ed8")))
        (sha256
          (base32
            "0w1d7j3ay0nkq4lp63lf7597rxfchikvw58w2h8g49cxx8vyl4l8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis
      "Yasnippets for the Mocha JS Testing Framework")
    (description
      "Documentation at https://melpa.org/#/mocha-snippets")
    (license #f)))

(define-public emacs-mocker
  (package
    (name "emacs-mocker")
    (version "20220727.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/mocker.el.git")
               (commit
                 "e455599f48bad7d73fd445e70a3acf4b44c2f5c1")))
        (sha256
          (base32
            "1mdw08rgdfdxwai38ff3c5r884vhw15shrc67x5yh02jfqzbkkfq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "mocking framework for emacs")
    (description
      "Documentation at https://melpa.org/#/mocker")
    (license #f)))

(define-public emacs-modaled
  (package
    (name "emacs-modaled")
    (version "20231028.1648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DCsunset/modaled.git")
               (commit
                 "22e10677eb359a2dfb1a989a1beb62ef809d51c5")))
        (sha256
          (base32
            "086p9706gb0wfai8nsi49rsgkjjrfbi4hl1qf0v9r8w3xfqpb201"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/DCsunset/modaled")
    (synopsis
      "Build your own minor modes for modal editing")
    (description
      "Documentation at https://melpa.org/#/modaled")
    (license #f)))

(define-public emacs-modalka
  (package
    (name "emacs-modalka")
    (version "20230606.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/modalka.git")
               (commit
                 "8b80346755413477d28bb732dae0e873d547f3c0")))
        (sha256
          (base32
            "0jkcy7kiclxwkv8fc7cjj1n9giv8a99a37j2riq3yajr7150h4dm"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mrkkrp/modalka")
    (synopsis "Modal editing your way")
    (description
      "Documentation at https://melpa.org/#/modalka")
    (license #f)))

(define-public emacs-mode-icons
  (package
    (name "emacs-mode-icons")
    (version "20230911.20")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/mode-icons.git")
               (commit
                 "931250e8f9f1106e7ace6247989867c5e17fc9cc")))
        (sha256
          (base32
            "1fm31kirh91wpwgmr4ydd2z3pzqv5nba2zfp3pwd7hrxzac4lpg3"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "icons")))
    (home-page
      "http://ryuslash.org/projects/mode-icons.html")
    (synopsis "Show icons for modes")
    (description
      "Documentation at https://melpa.org/#/mode-icons")
    (license #f)))

(define-public emacs-mode-line-bell
  (package
    (name "emacs-mode-line-bell")
    (version "20181029.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/mode-line-bell.git")
               (commit
                 "26ac7d97abdeb762ceaeab6b892f3ed7e3412494")))
        (sha256
          (base32
            "0qbd4y10510q6r21zzxnr16ylrm7qh1qc7ll5wxab0yi03jaas3s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Flash the mode line instead of ringing the bell")
    (description
      "Documentation at https://melpa.org/#/mode-line-bell")
    (license #f)))

(define-public emacs-mode-line-debug
  (package
    (name "emacs-mode-line-debug")
    (version "20230901.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/mode-line-debug.git")
               (commit
                 "fbf15be5d9debde1bdf6d9e3759c705347ae6870")))
        (sha256
          (base32
            "18lxpiqs98mqk0kh9nl0qfg4gz7qqfhscv28xgcxk67cr31pkp9i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/mode-line-debug")
    (synopsis
      "Show status of debug-on-error in mode-line")
    (description
      "Documentation at https://melpa.org/#/mode-line-debug")
    (license #f)))

(define-public emacs-mode-line-idle
  (package
    (name "emacs-mode-line-idle")
    (version "20230704.12")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/mode-line-idle-"
               version
               ".tar"))
        (sha256
          (base32
            "14xhnx3cz6llvrn5wdmzvlim9j6gxzaglmmsj8p5ncjl9j60fbnp"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-mode-line-idle")
    (synopsis "Evaluate mode line content when idle")
    (description
      "Documentation at https://melpa.org/#/mode-line-idle")
    (license #f)))

(define-public emacs-modelica-mode
  (package
    (name "emacs-modelica-mode")
    (version "20230508.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/modelica-tools/modelica-mode.git")
               (commit
                 "7064a4abdae68fc074a85a2e7c159e067c44c0e1")))
        (sha256
          (base32
            "1jqd83zldz4mfmn6rjymp3y9z0v20ws3vv8q0p3bcp1hvwf5xzz1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("modelica-mode.el")))
    (home-page
      "https://github.com/modelica-tools/modelica-mode")
    (synopsis
      "Major mode for editing Modelica files")
    (description
      "Documentation at https://melpa.org/#/modelica-mode")
    (license #f)))

(define-public emacs-modern-cpp-font-lock
  (package
    (name "emacs-modern-cpp-font-lock")
    (version "20210405.1155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ludwigpacifici/modern-cpp-font-lock.git")
               (commit
                 "43c6b68ff58fccdf9deef11674a172e4eaa8455c")))
        (sha256
          (base32
            "1wp90225g1pm8sr3hlknwr2q29iq90wds4n6vf1ls4cf2b71nnq2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ludwigpacifici/modern-cpp-font-lock")
    (synopsis "Font-locking for \"Modern C++\"")
    (description
      "Documentation at https://melpa.org/#/modern-cpp-font-lock")
    (license #f)))

(define-public emacs-modern-fringes
  (package
    (name "emacs-modern-fringes")
    (version "20220401.202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpecialBomb/emacs-modern-fringes.git")
               (commit
                 "98473694a33922cfdddb18b4791028e4854b53b5")))
        (sha256
          (base32
            "0j1lyzia3i37q6b35pd06j5bkz2yji0f0r6xcgg79177zyyqj0lp"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/specialbomb/emacs-modern-fringes")
    (synopsis
      "Replaces default fringe bitmaps with better looking ones")
    (description
      "Documentation at https://melpa.org/#/modern-fringes")
    (license #f)))

(define-public emacs-modern-sh
  (package
    (name "emacs-modern-sh")
    (version "20211101.1001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/modern-sh.git")
               (commit
                 "8ebebe77304aa8170f7af809e7564c79d3bd45da")))
        (sha256
          (base32
            "08a6b8yjryphq4qpnqfy62saq1vmwqnhcind0n6s88f0qrmlywvc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hydra emacs-eval-in-repl))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/modern-sh")
    (synopsis "Minor mode for editing shell script")
    (description
      "Documentation at https://melpa.org/#/modern-sh")
    (license #f)))

(define-public emacs-modtime-skip-mode
  (package
    (name "emacs-modtime-skip-mode")
    (version "20140128.2201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/modtime-skip-mode.git")
               (commit
                 "c0e49523aa26b2263a8693691ac775988015f592")))
        (sha256
          (base32
            "0ri841cwx2mx8ri50lhvifmxnysdc022421mlmklql0252kn775l"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.github.com/jordonbiondo/modtime-skip-mode")
    (synopsis
      "Minor mode for disabling modtime and supersession checks on files.")
    (description
      "Documentation at https://melpa.org/#/modtime-skip-mode")
    (license #f)))

(define-public emacs-modular-config
  (package
    (name "emacs-modular-config")
    (version "20210726.1614")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SidharthArya/modular-config.el.git")
               (commit
                 "2bd77193fa3a7ec0541db284b4034821a8f59fea")))
        (sha256
          (base32
            "1bbycd4cr280vl643kvnzyml44mg63yh4i28bbszmj2yrkxy0frj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/SidharthArya/modular-config.el")
    (synopsis
      "Organize your config into small and loadable modules")
    (description
      "Documentation at https://melpa.org/#/modular-config")
    (license #f)))

(define-public emacs-modus-themes
  (package
    (name "emacs-modus-themes")
    (version "20231031.716")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/modus-themes-"
               version
               ".tar"))
        (sha256
          (base32
            "0mcx1gy8m9vjwgh9lcdgld61dvsy50wjwb70fwvxkzym5hjsi53f"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~protesilaos/modus-themes")
    (synopsis
      "Elegant, highly legible and customizable themes")
    (description
      "Documentation at https://melpa.org/#/modus-themes")
    (license #f)))

(define-public emacs-moe-theme
  (package
    (name "emacs-moe-theme")
    (version "20231006.639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/moe-theme.el.git")
               (commit
                 "1872aebc016e1c1a8d4e2a4037cd54b618de5453")))
        (sha256
          (base32
            "04hipaz7wc46axnjqgbwzcjghiyw9fc6kslifs3263h96cfxib0m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kuanyui/moe-theme.el")
    (synopsis
      "A colorful eye-candy theme. Moe, moe, kyun!")
    (description
      "Documentation at https://melpa.org/#/moe-theme")
    (license #f)))

(define-public emacs-molar-mass
  (package
    (name "emacs-molar-mass")
    (version "20220922.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sergiruiztrepat/molar-mass.git")
               (commit
                 "c3b686c4b621b45fa4b17857b4934eb4487d74f5")))
        (sha256
          (base32
            "1zl09hv64gb0d8zgy8nrj191avf5lkyvk3l1m0jmcxqn3p3smhs6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sergiruiztrepat/molar-mass.el")
    (synopsis "Calculates molar mass of a molecule")
    (description
      "Documentation at https://melpa.org/#/molar-mass")
    (license #f)))

(define-public emacs-molecule
  (package
    (name "emacs-molecule")
    (version "20180527.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/drymerisnothere/molecule-el.git")
               (commit
                 "2ef72b81d9aa24ea782b71a061a3abdad6cae162")))
        (sha256
          (base32
            "0fn16jlpdfy35mz0n27bzdiwgvv8l9nfxf8j4pypgpqarnxzpsgc"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.daemons.it/drymer/molecule.el")
    (synopsis "Simple wrapper for molecule")
    (description
      "Documentation at https://melpa.org/#/molecule")
    (license #f)))

(define-public emacs-molokai-theme
  (package
    (name "emacs-molokai-theme")
    (version "20220106.1520")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alloy-d/color-theme-molokai.git")
               (commit
                 "cc53e997e7eff93b58ad16a376a292c1dd66044b")))
        (sha256
          (base32
            "109z13y6f54idzxk4incd4r0d3fr7wm7r8ifmd0s5hv1v1i93jc0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("molokai-theme.el")))
    (home-page
      "https://github.com/alloy-d/color-theme-molokai")
    (synopsis
      "molokai theme with Emacs theme engine")
    (description
      "Documentation at https://melpa.org/#/molokai-theme")
    (license #f)))

(define-public emacs-mongo
  (package
    (name "emacs-mongo")
    (version "20150315.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/mongo.git")
               (commit
                 "595529ddd70ecb9fab8b11daad2c3929941099d6")))
        (sha256
          (base32
            "0z8mcfhj425hb91fkj1pyg3apw1kf4mgy8lx6n1sc8zmib38py0x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "MongoDB driver for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/mongo")
    (license #f)))

(define-public emacs-monitor
  (package
    (name "emacs-monitor")
    (version "20161018.1144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/monitor.git")
               (commit
                 "63f4643a0ee81616dbb692b8b03bae21df2283e2")))
        (sha256
          (base32
            "1hl7nzxvjwv9kknyjikkbxw1gbi5kx4hkkq7sw6jnj06192n93yg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/guiltydolphin/monitor")
    (synopsis
      "Utilities for monitoring expressions.")
    (description
      "Documentation at https://melpa.org/#/monitor")
    (license #f)))

(define-public emacs-monkeytype
  (package
    (name "emacs-monkeytype")
    (version "20210110.513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpablobr/emacs-monkeytype.git")
               (commit
                 "f64b1580f8516ddbf5f71688fb9ace2cd1631b41")))
        (sha256
          (base32
            "0ia90br12szcqxvsf5i7nj3y2rmmw1pq4hchi181sx5m4qrhssv1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-scrollable-quick-peek))
    (home-page
      "https://github.com/jpablobr/emacs-monkeytype")
    (synopsis "Mode for speed typing")
    (description
      "Documentation at https://melpa.org/#/monkeytype")
    (license #f)))

(define-public emacs-monky
  (package
    (name "emacs-monky")
    (version "20230222.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/monky.git")
               (commit
                 "7046eee5fc9ac625924382cb4a82b0d8efcd9ff0")))
        (sha256
          (base32
            "01k3qfhh0ly9x88azsh0skxsxsjv0b80s1ydg6m59cxis2jc7gxc"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.info" "style")))
    (home-page
      "http://github.com/ananthakumaran/monky")
    (synopsis "Control Hg from Emacs.")
    (description
      "Documentation at https://melpa.org/#/monky")
    (license #f)))

(define-public emacs-mono-complete
  (package
    (name "emacs-mono-complete")
    (version "20230808.1345")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/mono-complete-"
               version
               ".tar"))
        (sha256
          (base32
            "13069diji0a7ya8qvakskja4d8pmzmj9pzhdfav3abmk1cmnhwbz"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-mono-complete")
    (synopsis
      "Completion suggestions with multiple back-ends")
    (description
      "Documentation at https://melpa.org/#/mono-complete")
    (license #f)))

(define-public emacs-monochrome-theme
  (package
    (name "emacs-monochrome-theme")
    (version "20140326.1050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fxn/monochrome-theme.el.git")
               (commit
                 "bfca67fe7365310bc47ae9ca96c417caada54896")))
        (sha256
          (base32
            "0jvsss38rgry37dnshxbqxcj7qh1q6iyza58kix47h5wbnrpvszn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A dark Emacs 24 theme for your focused hacking sessions")
    (description
      "Documentation at https://melpa.org/#/monochrome-theme")
    (license #f)))

(define-public emacs-monokai-alt-theme
  (package
    (name "emacs-monokai-alt-theme")
    (version "20170630.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dawidof/emacs-monokai-theme.git")
               (commit
                 "f342b6afc31f929be0626eca2d696ee9fab78011")))
        (sha256
          (base32
            "1lgsqrwf21b0rh4x8nmj08a46ld7dkq4jhwxi1fi7a9xhmi2yd4i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dawidof/emacs-monokai-theme")
    (synopsis
      "Theme with a dark background. Based on sublime monokai theme.")
    (description
      "Documentation at https://melpa.org/#/monokai-alt-theme")
    (license #f)))

(define-public emacs-monokai-pro-theme
  (package
    (name "emacs-monokai-pro-theme")
    (version "20210206.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/belak/emacs-monokai-pro-theme.git")
               (commit
                 "d0489741a80d818713c290a1a4bdd985877228bb")))
        (sha256
          (base32
            "1nmnmijqfxdxz0cxyfq9fn34cy5bbf6cdg0qvg5mjxrjcfsl57dc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/belak/emacs-monokai-pro-theme")
    (synopsis
      "A simple theme based on the Monokai Pro Sublime color schemes")
    (description
      "Documentation at https://melpa.org/#/monokai-pro-theme")
    (license #f)))

(define-public emacs-monokai-theme
  (package
    (name "emacs-monokai-theme")
    (version "20220117.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oneKelvinSmith/monokai-emacs.git")
               (commit
                 "4a09c59f948ba5b602b6f395e667f53224fd75a2")))
        (sha256
          (base32
            "16ykswl0nxhva6njidz6scgnp5g7rr40zvscy060f09jqasbwxwq"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/oneKelvinSmith/monokai-emacs")
    (synopsis "A fruity color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/monokai-theme")
    (license #f)))

(define-public emacs-monotropic-theme
  (package
    (name "emacs-monotropic-theme")
    (version "20211116.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/caffo/monotropic-theme.git")
               (commit
                 "f32a04b5bfee9cbcce4b223f17228d1142a28211")))
        (sha256
          (base32
            "0kfgj6h3jvivbssh27fi4nyqfqrbj6das79i6syywwqf200h29rl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/caffo/monotropic-theme")
    (synopsis "Monotropic Theme")
    (description
      "Documentation at https://melpa.org/#/monotropic-theme")
    (license #f)))

(define-public emacs-monroe
  (package
    (name "emacs-monroe")
    (version "20220915.1647")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sanel/monroe.git")
               (commit
                 "8f809e4aa0a35ec2d1c880aacf59e6bc317a566f")))
        (sha256
          (base32
            "1g3chpzww6dp8zz9vqafxg5afsw439isvcfv68cx6kxgfz4y78c1"))))
    (build-system melpa-build-system)
    (home-page "http://www.github.com/sanel/monroe")
    (synopsis "Yet another client for nREPL")
    (description
      "Documentation at https://melpa.org/#/monroe")
    (license #f)))

(define-public emacs-mood-line
  (package
    (name "emacs-mood-line")
    (version "20231016.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jessieh/mood-line.git")
               (commit
                 "bcd8725b21a64df4952cb0c52ece953075cbee66")))
        (sha256
          (base32
            "1d5zx3wjcdnbqp6xpmb80ank40yyrbv4i2w7xyg3rwal4l6yq3lv"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jessieh/mood-line")
    (synopsis
      "A minimal mode line inspired by doom-modeline")
    (description
      "Documentation at https://melpa.org/#/mood-line")
    (license #f)))

(define-public emacs-mood-one-theme
  (package
    (name "emacs-mood-one-theme")
    (version "20221222.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jessieh/mood-one-theme.git")
               (commit
                 "dfbc81900737d3382a340feeed24d2bcd9bdedb0")))
        (sha256
          (base32
            "0scraadlync08zsn84f66jb1s6jch3pr6asgvfm9cms8fsnfmrbs"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jessieh/mood-one-theme")
    (synopsis
      "A dark color scheme inspired by the Doom One theme")
    (description
      "Documentation at https://melpa.org/#/mood-one-theme")
    (license #f)))

(define-public emacs-moody
  (package
    (name "emacs-moody")
    (version "20230901.1235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/moody.git")
               (commit
                 "ebc3522406517aa791da3c4f312609707b5ead9e")))
        (sha256
          (base32
            "080v3aj16dpy6l62k9ja4z7k1rwhh0mc750niwzk5k7vz6x4gc1y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/moody")
    (synopsis "Tabs and ribbons for the mode line")
    (description
      "Documentation at https://melpa.org/#/moody")
    (license #f)))

(define-public emacs-moom
  (package
    (name "emacs-moom")
    (version "20230722.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/moom.git")
               (commit
                 "54750aa2e3e9476375a32ef94714e22ece6e4039")))
        (sha256
          (base32
            "119jzkf3ccqrxrjxx5x32rgpl7nip9c333ypmssy4pmylpcqls73"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/takaxp/Moom")
    (synopsis
      "Commands to control frame position and size")
    (description
      "Documentation at https://melpa.org/#/moom")
    (license #f)))

(define-public emacs-moonscript
  (package
    (name "emacs-moonscript")
    (version "20170831.2226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k2052/moonscript-mode.git")
               (commit
                 "56f90471e2ced2b0a177aed4d8c2f854797e9cc7")))
        (sha256
          (base32
            "1v2phdpfngrb01x4qygpfgxdzpgvbprki2kbmpc83vlqxlmkvvjk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing MoonScript code")
    (description
      "Documentation at https://melpa.org/#/moonscript")
    (license #f)))

(define-public emacs-moonshot
  (package
    (name "emacs-moonshot")
    (version "20210627.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ageldama/moonshot.git")
               (commit
                 "ec37a12825888047a90d9ee8131aa4bea348edf7")))
        (sha256
          (base32
            "0vd9m2zs3rch361ykmf0l3fjsrk1rwlb7w1dc7zz3gwpb6nas845"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-projectile
            emacs-counsel
            emacs-realgud
            emacs-levenshtein))
    (home-page
      "https://github.com/ageldama/moonshot")
    (synopsis
      "Run executable file, debug and build commands on project")
    (description
      "Documentation at https://melpa.org/#/moonshot")
    (license #f)))

(define-public emacs-morganey-mode
  (package
    (name "emacs-morganey-mode")
    (version "20170118.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/morganey-lang/morganey-mode.git")
               (commit
                 "5cf3870432a2aeb69d373abe63b3be1f325f6d21")))
        (sha256
          (base32
            "04xv4v2n03axjlpm9pg3j4zjapqjb7is3anx6laa90zbw3z2iv9z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/morganey-lang/morganey-mode")
    (synopsis
      "Major mode for editing Morganey files")
    (description
      "Documentation at https://melpa.org/#/morganey-mode")
    (license #f)))

(define-public emacs-morgentau-theme
  (package
    (name "emacs-morgentau-theme")
    (version "20220319.1049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Melchizedek6809/morgentau-theme.git")
               (commit
                 "a8da5640b4a9b72a3136901d0a1a03071d9fcb00")))
        (sha256
          (base32
            "1ksfw4slhbwsvydb3qvdwlb5nh47zv420akrssavw7527c657rkj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Melchizedek6809/morgentau-theme")
    (synopsis "Tango-based custom theme")
    (description
      "Documentation at https://melpa.org/#/morgentau-theme")
    (license #f)))

(define-public emacs-morlock
  (package
    (name "emacs-morlock")
    (version "20230511.2105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/morlock.git")
               (commit
                 "b7e2066a69c059c5d4c72e829b615a6b15cef4dc")))
        (sha256
          (base32
            "03q388lkbs1fx0x0wb0n06f9bfl4k67qvbhkxkw59kdlhxi7qwqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/morlock")
    (synopsis "More font-lock keywords for elisp")
    (description
      "Documentation at https://melpa.org/#/morlock")
    (license #f)))

(define-public emacs-morrowind-theme
  (package
    (name "emacs-morrowind-theme")
    (version "20230912.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SamuelBanya/morrowind-theme.git")
               (commit
                 "f197ef02e96fa3b8a38eca25ba750df7b843e564")))
        (sha256
          (base32
            "0sx4qpz6p582phcxpbb0di2lhfk8daphwg7wxzlrmkvd6syp2qjs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/samuelbanya/morrowind-theme")
    (synopsis "Theme")
    (description
      "Documentation at https://melpa.org/#/morrowind-theme")
    (license #f)))

(define-public emacs-mos-mode
  (package
    (name "emacs-mos-mode")
    (version "20221209.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/themkat/mos-mode.git")
               (commit
                 "770f49417e8ad7dbf382c8691f6f689d793b9314")))
        (sha256
          (base32
            "0g3hk4s3wirrdr2j0hivyqkw0hzbibp62abbwy2q04svr9yyw6dj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode
            emacs-dap-mode
            emacs-dash
            emacs-ht))
    (home-page "https://github.com/themkat/mos-mode")
    (synopsis "MOS toolkit usage")
    (description
      "Documentation at https://melpa.org/#/mos-mode")
    (license #f)))

(define-public emacs-mosey
  (package
    (name "emacs-mosey")
    (version "20180614.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/mosey.el.git")
               (commit
                 "2e3ac9d334fa2937ed5267193dfd25d8e1f14dc2")))
        (sha256
          (base32
            "1yxy6m5igvsy37vn93ijs0b479v50vsnsyp8zi548iy2ribr0qr5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alphapapa/mosey.el")
    (synopsis "Mosey around your buffers")
    (description
      "Documentation at https://melpa.org/#/mosey")
    (license #f)))

(define-public emacs-most-used-words
  (package
    (name "emacs-most-used-words")
    (version "20200808.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/udyantw/most-used-words.git")
               (commit
                 "f712879493660c3c3ee3793470b8f8939b79c2b0")))
        (sha256
          (base32
            "0aim8kzs95xjf6ldc4qy9xma1crxybmafs40sqaq35cbfszg0mf0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/udyantw/most-used-words")
    (synopsis "Display most used words in buffer")
    (description
      "Documentation at https://melpa.org/#/most-used-words")
    (license #f)))

(define-public emacs-mote-mode
  (package
    (name "emacs-mote-mode")
    (version "20160123.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inkel/mote-mode.git")
               (commit
                 "666c6641addbd3b337a7aa01fd2742ded2f41b83")))
        (sha256
          (base32
            "10mf96r75558scn71pri71aa8nhp6hmnb5rwjxlh5dlf80r5dfd7"))))
    (build-system melpa-build-system)
    (home-page "http://inkel.github.com/mote-mode/")
    (synopsis "Mote minor mode")
    (description
      "Documentation at https://melpa.org/#/mote-mode")
    (license #f)))

(define-public emacs-motion-mode
  (package
    (name "emacs-motion-mode")
    (version "20140920.156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ainame/motion-mode.git")
               (commit
                 "4c94180e3ecea611a61240a0c0cd48f1032c4a55")))
        (sha256
          (base32
            "17570labnwdnwca2cg4ga0mrrm00n0h3wlxry823k5yn3k93rnj1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flymake-easy emacs-flymake-cursor))
    (arguments '(#:files ("*.el" "bin" "lib")))
    (home-page
      "https://github.com/ainame/motion-mode")
    (synopsis "major mode for RubyMotion enviroment")
    (description
      "Documentation at https://melpa.org/#/motion-mode")
    (license #f)))

(define-public emacs-move-dup
  (package
    (name "emacs-move-dup")
    (version "20210127.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/move-dup.git")
               (commit
                 "5906503e0b9b832b1d5062c9cd27cf72a2ce4817")))
        (sha256
          (base32
            "138h20zlhqdyacs6563naxlcbksbp9r4ck2jliikix5gaq950chg"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/wyuenho/move-dup")
    (synopsis
      "Eclipse-like moving and duplicating lines or rectangles")
    (description
      "Documentation at https://melpa.org/#/move-dup")
    (license #f)))

(define-public emacs-move-mode
  (package
    (name "emacs-move-mode")
    (version "20221205.1433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amnn/move-mode.git")
               (commit
                 "fa34fbe977d62c8297abc3547b9cfb25802e033c")))
        (sha256
          (base32
            "1qxnkdvn0d2ybrkwm57wn0k5y1nr6sc82i9n3s2306anyflvn868"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/amnn/move-mode")
    (synopsis
      "A major-mode for editing Move language")
    (description
      "Documentation at https://melpa.org/#/move-mode")
    (license #f)))

(define-public emacs-move-text
  (package
    (name "emacs-move-text")
    (version "20221006.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/move-text.git")
               (commit
                 "b17f0f4cbe9d8a72e6d9765daf2e6cdc12b3f4ba")))
        (sha256
          (base32
            "1s9cjk20f4vbaffpv0yv7irk7azgmv8l54v9cd1nwfjrzybqq1xx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/move-text")
    (synopsis
      "Move current line or region with M-up or M-down.")
    (description
      "Documentation at https://melpa.org/#/move-text")
    (license #f)))

(define-public emacs-mowedline
  (package
    (name "emacs-mowedline")
    (version "20171218.237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/retroj/mowedline.git")
               (commit
                 "6121b7d4aacd18f7b24da226e61dbae054e50a7c")))
        (sha256
          (base32
            "16j3y4hffnv2rg97p49hqz3x1icp7qkpcjxhalny5l4gysx9mfqg"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "elisp utilities for using mowedline")
    (description
      "Documentation at https://melpa.org/#/mowedline")
    (license #f)))

(define-public emacs-mozc
  (package
    (name "emacs-mozc")
    (version "20231026.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/mozc.git")
               (commit
                 "b82b8de95f48088a96f063032bc543218c98b6a1")))
        (sha256
          (base32
            "1a7b3p3d27wvcwj1acbkw4b2cdrxns1a0c0d6jmladpdd19k9y4x"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/unix/emacs/mozc.el")))
    (home-page "unspecified")
    (synopsis
      "minor mode to input Japanese with Mozc")
    (description
      "Documentation at https://melpa.org/#/mozc")
    (license #f)))

(define-public emacs-mozc-cand-posframe
  (package
    (name "emacs-mozc-cand-posframe")
    (version "20200208.750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/mozc-posframe.git")
               (commit
                 "1d07d5055381008ccbb29b97315d140e09a7ee95")))
        (sha256
          (base32
            "1hwc66xj2js5srmshmba5q6adn638qgbslnxg9l15znfhq3qcy9w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-mozc emacs-s))
    (home-page
      "https://github.com/akirak/mozc-posframe")
    (synopsis "Posframe frontend for mozc.el")
    (description
      "Documentation at https://melpa.org/#/mozc-cand-posframe")
    (license #f)))

(define-public emacs-mozc-im
  (package
    (name "emacs-mozc-im")
    (version "20160412.22")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d5884/mozc-im.git")
               (commit
                 "df614a1076c28a11551fb3e822868bae47e855a5")))
        (sha256
          (base32
            "0cpcldizgyr125j7lzkl8l6jw1hc3fb12cwgkpjrl6pjpr80vb15"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mozc))
    (home-page "unspecified")
    (synopsis
      "Mozc with input-method-function interface.")
    (description
      "Documentation at https://melpa.org/#/mozc-im")
    (license #f)))

(define-public emacs-mozc-popup
  (package
    (name "emacs-mozc-popup")
    (version "20150224.34")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d5884/mozc-popup.git")
               (commit
                 "f0684b875a7427ec08f8df13939a486e5d5cf420")))
        (sha256
          (base32
            "1mbpkjc6sk7qqmgsmr5a5l2ycwnqp8bkwgikdavgs6hnal10bkmn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup emacs-mozc))
    (home-page "unspecified")
    (synopsis "Mozc with popup")
    (description
      "Documentation at https://melpa.org/#/mozc-popup")
    (license #f)))

(define-public emacs-mozc-temp
  (package
    (name "emacs-mozc-temp")
    (version "20160228.840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/HKey/mozc-temp.git")
               (commit
                 "90a6eb1db8fa1283b944432cfb83739286b37f92")))
        (sha256
          (base32
            "03pqqzzca9z3a1nbrfdkvfczzi7nr3bn75x7m4mdww9z3wxxda2c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-mozc))
    (home-page "https://github.com/HKey/mozc-temp")
    (synopsis "Use mozc temporarily")
    (description
      "Documentation at https://melpa.org/#/mozc-temp")
    (license #f)))

(define-public emacs-mpages
  (package
    (name "emacs-mpages")
    (version "20150710.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slevin/mpages.git")
               (commit
                 "39a72a0931ab1cdbfdf0ab9f412dc12d43a3829f")))
        (sha256
          (base32
            "11c8pr3s77aq34ic32lnsialwh8bw3m78kj838xl2aab2pgrlny2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/slevin/mpages")
    (synopsis
      "An Emacs buffer for quickly writing your Morning Pages")
    (description
      "Documentation at https://melpa.org/#/mpages")
    (license #f)))

(define-public emacs-mpdel
  (package
    (name "emacs-mpdel")
    (version "20230903.915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpdel/mpdel.git")
               (commit
                 "b7a76a95bde185a3dc2c948c68465b1d532b095b")))
        (sha256
          (base32
            "1iklxpq05k72g6x7b7jmx2c6m4hmxp6v17r2z1avlmdzq9gkzmj9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-libmpdel emacs-navigel))
    (home-page "https://github.com/mpdel/mpdel")
    (synopsis "Play and control your MPD music")
    (description
      "Documentation at https://melpa.org/#/mpdel")
    (license #f)))

(define-public emacs-mpdel-embark
  (package
    (name "emacs-mpdel-embark")
    (version "20230103.2021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpdel/mpdel-embark.git")
               (commit
                 "31d91a62b680fb4472ec34c04ac6af80bb3cf4b8")))
        (sha256
          (base32
            "129ay53zrq4gzqf2vh41q3yp613vzi9b57jlzyl8jnbn0wfbjx65"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-mpdel emacs-libmpdel emacs-embark))
    (home-page
      "https://github.com/mpdel/mpdel-embark")
    (synopsis "Integrate MPDel with Embark")
    (description
      "Documentation at https://melpa.org/#/mpdel-embark")
    (license #f)))

(define-public emacs-mpdmacs
  (package
    (name "emacs-mpdmacs")
    (version "20210904.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sp1ff/mpdmacs.git")
               (commit
                 "334b066dc5bb82d9ccb6cc30d63afed0f7610fe8")))
        (sha256
          (base32
            "0pkw79sccsvx845xgd2a2rql6ic7jkzki90xj268czvcgvfy4kn1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elmpd))
    (home-page "https://github.com/sp1ff/mpdmacs")
    (synopsis "A lightweight MPD client")
    (description
      "Documentation at https://melpa.org/#/mpdmacs")
    (license #f)))

(define-public emacs-mpmc-queue
  (package
    (name "emacs-mpmc-queue")
    (version "20180303.2029")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smizoe/mpmc-queue.git")
               (commit
                 "df07d6bef7468edb1d73ef73b8331b94d0e5d0ca")))
        (sha256
          (base32
            "17817l3afghg9z8jxkj61yg85plmr74ki3wf4hz685llx8fr69w0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-queue))
    (home-page
      "https://github.com/smizoe/mpmc-queue")
    (synopsis
      "a multiple-producer-multiple-consumer queue")
    (description
      "Documentation at https://melpa.org/#/mpmc-queue")
    (license #f)))

(define-public emacs-mpv
  (package
    (name "emacs-mpv")
    (version "20220801.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kljohann/mpv.el.git")
               (commit
                 "2e0234bc21a3dcdf12d94d3285475e7f6769d3e8")))
        (sha256
          (base32
            "0mvzg2wqpycny2dmiyp8jm0fflvll7ay6scvsb9rxgfwimr2vbw5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kljohann/mpv.el")
    (synopsis "control mpv for easy note-taking")
    (description
      "Documentation at https://melpa.org/#/mpv")
    (license #f)))

(define-public emacs-mpvi
  (package
    (name "emacs-mpvi")
    (version "20230608.154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lorniu/mpvi.git")
               (commit
                 "f633510686d7b974147592336fa21ce6df80a5da")))
        (sha256
          (base32
            "03rjdarf7c6yl9pcgn1b27kc6699k1xhysf6hw6npgjn33iafllw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page "https://github.com/lorniu/mpvi")
    (synopsis
      "Integrated video tool based on EMMS and MPV")
    (description
      "Documentation at https://melpa.org/#/mpvi")
    (license #f)))

(define-public emacs-mqr
  (package
    (name "emacs-mqr")
    (version "20180527.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/calancha/multi-replace.git")
               (commit
                 "4ade19d4620b8b61340290bf63fa56d5e493859f")))
        (sha256
          (base32
            "0pkxmv0rla9f2ly9fq3i3mrsa2q8rsrs4pk6w7wpi3v5fbj1jmd6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/calancha/multi-replace")
    (synopsis "Multi-dimensional query and replace")
    (description
      "Documentation at https://melpa.org/#/mqr")
    (license #f)))

(define-public emacs-mqtt-mode
  (package
    (name "emacs-mqtt-mode")
    (version "20180611.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrmuel/mqtt-mode.git")
               (commit
                 "613e70e9b9940e635e779994b5c83f86eb62c8e6")))
        (sha256
          (base32
            "1ci1w4yma6axiigz55b2ip0r7zy8v215532jc0rkb3wyn14nsrh7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/andrmuel/mqtt-mode")
    (synopsis
      "client for interaction with MQTT servers")
    (description
      "Documentation at https://melpa.org/#/mqtt-mode")
    (license #f)))

(define-public emacs-msgpack
  (package
    (name "emacs-msgpack")
    (version "20200323.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/msgpack.el.git")
               (commit
                 "90e3086f259549b1667a3c5b9aa2d70aaeaa4d3d")))
        (sha256
          (base32
            "0g9a59x7xjf1p2swbi3v8bawdwkqliw3kcg70bca5dgg2jxgd4z6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/msgpack.el")
    (synopsis "Read and write MessagePack object")
    (description
      "Documentation at https://melpa.org/#/msgpack")
    (license #f)))

(define-public emacs-msvc
  (package
    (name "emacs-msvc")
    (version "20221015.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yaruopooner/msvc.git")
               (commit
                 "1bf173b5da3fbf2bdb799116e2a1f31916c1e16e")))
        (sha256
          (base32
            "0f16m120pf5pf5hy7cywxb0gp26mw8bj3ypbxk0dlb436gpyi41y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ac-clang))
    (arguments
      '(#:files (:defaults "*.cpp" "*.bat" "*.vcxproj")))
    (home-page "https://github.com/yaruopooner/msvc")
    (synopsis "Microsoft Visual C/C++ mode")
    (description
      "Documentation at https://melpa.org/#/msvc")
    (license #f)))

(define-public emacs-mtg-deck-mode
  (package
    (name "emacs-mtg-deck-mode")
    (version "20180613.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattiasb/mtg-deck-mode.git")
               (commit
                 "8265b8ed17fcd4406760c19aa6ee9c76068b1ab0")))
        (sha256
          (base32
            "04qdcqpkic2nhqy6nf15j3zp5hmrfzs2kndvmg5v4vjac2vfmzfb"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "formats")))
    (home-page
      "https://github.com/mattiasb/mtg-deck-mode")
    (synopsis "Major mode to edit MTG decks")
    (description
      "Documentation at https://melpa.org/#/mtg-deck-mode")
    (license #f)))

(define-public emacs-mu-cite
  (package
    (name "emacs-mu-cite")
    (version "20190803.439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksato9700/mu-cite.git")
               (commit
                 "b2c83bbce4646d100b942f0f0de0877a8d47298c")))
        (sha256
          (base32
            "1kg4l88k4gwv7zczmbgxzpmifkbklf3yzlk849igs01z4jvh2bkc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flim))
    (arguments
      '(#:files ("*.el" (:exclude "mu-bbdb.el"))))
    (home-page "unspecified")
    (synopsis "A library to provide MIME features.")
    (description
      "Documentation at https://melpa.org/#/mu-cite")
    (license #f)))

(define-public emacs-mu2tex
  (package
    (name "emacs-mu2tex")
    (version "20200512.704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cdominik/mu2tex.git")
               (commit
                 "4b84cdac955cb36a8c44a2be48f3310252e3d3ad")))
        (sha256
          (base32
            "05rgx0nb028k1kmb9gbv4b0s20ksbjl0nksyrva2zpvd7xc1nyz9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cdominik/mu2tex")
    (synopsis
      "Convert plain text molecule names and units to TeX")
    (description
      "Documentation at https://melpa.org/#/mu2tex")
    (license #f)))

(define-public emacs-mu4e-alert
  (package
    (name "emacs-mu4e-alert")
    (version "20230722.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xzz53/mu4e-alert.git")
               (commit
                 "6beda20fc69771f2778f507c4a9e069dbaf1b628")))
        (sha256
          (base32
            "19z6539nj7rkrhljvzg468pp7gy5vgpj3hsxhfqp0djjm34gppnc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-s emacs-ht))
    (home-page
      "https://github.com/iqbalansari/mu4e-alert")
    (synopsis "Desktop notification for mu4e")
    (description
      "Documentation at https://melpa.org/#/mu4e-alert")
    (license #f)))

(define-public emacs-mu4e-column-faces
  (package
    (name "emacs-mu4e-column-faces")
    (version "20221213.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/mu4e-column-faces.git")
               (commit
                 "1bbb646ea07deb1bd2daa4c6eb36e0f65aac40b0")))
        (sha256
          (base32
            "12cb37lj8j1fd5kp3gbnzgknb57j5l8xgrnhb60ysff66m1mbrr7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Alexander-Miller/mu4e-column-faces")
    (synopsis "Faces for individual mu4e columns")
    (description
      "Documentation at https://melpa.org/#/mu4e-column-faces")
    (license #f)))

(define-public emacs-mu4e-conversation
  (package
    (name "emacs-mu4e-conversation")
    (version "20190609.812")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/ambrevar/mu4e-conversation.git")
               (commit
                 "ccf85002b18fee54051dbfaf8d3931ca2a07db24")))
        (sha256
          (base32
            "1ysj9x9m1lxg1gy0z7y07qsi3g26qfqdwwa8kjkf40pchb2wxg0s"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/Ambrevar/mu4e-conversation")
    (synopsis
      "Show a complete thread in a single buffer")
    (description
      "Documentation at https://melpa.org/#/mu4e-conversation")
    (license #f)))

(define-public emacs-mu4e-jump-to-list
  (package
    (name "emacs-mu4e-jump-to-list")
    (version "20221202.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/mu4e-jump-to-list.el.git")
               (commit
                 "cf19684d2333cb0cda7f6b62c7607144baa49310")))
        (sha256
          (base32
            "02kyqd4ihliahkhirqqy7a8fi7s8haf9csaq95xi2hc9zkbd2nx5"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/mu4e-jump-to-list.el")
    (synopsis "mu4e jump-to-list extension")
    (description
      "Documentation at https://melpa.org/#/mu4e-jump-to-list")
    (license #f)))

(define-public emacs-mu4e-marker-icons
  (package
    (name "emacs-mu4e-marker-icons")
    (version "20230423.1039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/mu4e-marker-icons.git")
               (commit
                 "acf892683b6845f3cd44f8a13b582d2199905f01")))
        (sha256
          (base32
            "09svrix2739myyq5k1fazmga7savzxp18n1kf3ja8mr04lfrdxjs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://repo.or.cz/mu4e-marker-icons.git")
    (synopsis "Display icons for mu4e markers")
    (description
      "Documentation at https://melpa.org/#/mu4e-marker-icons")
    (license #f)))

(define-public emacs-mu4e-overview
  (package
    (name "emacs-mu4e-overview")
    (version "20231027.1038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkcms/mu4e-overview.git")
               (commit
                 "0e711f47f9bab8bea9fe4f8e857920b879e70dcd")))
        (sha256
          (base32
            "0zh4pi4d74cs9p8ll7fzq8chxk84safvb7svxcss692jjsqvj89y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkcms/mu4e-overview")
    (synopsis "Show overview of maildir")
    (description
      "Documentation at https://melpa.org/#/mu4e-overview")
    (license #f)))

(define-public emacs-mu4e-query-fragments
  (package
    (name "emacs-mu4e-query-fragments")
    (version "20211030.2307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/mu4e-query-fragments.el.git")
               (commit
                 "8d93ede3772353e2dbc307de03e06e37ea6a0b6c")))
        (sha256
          (base32
            "0pl9hiwl5snpw9cfga0v9ypw83mz4nw6754whd4f37fs9xc6df31"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/mu4e-query-fragments.el")
    (synopsis "mu4e query fragments extension")
    (description
      "Documentation at https://melpa.org/#/mu4e-query-fragments")
    (license #f)))

(define-public emacs-mu4e-views
  (package
    (name "emacs-mu4e-views")
    (version "20230105.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lordpretzel/mu4e-views.git")
               (commit
                 "b02e360d36c54cd9a5f59cdf266be88214a966d2")))
        (sha256
          (base32
            "0hvn3hyfbi86hm1yynbx8a8b1pvwzhdb1nncwmgsk0mz0k037piy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-xwidgets-reuse emacs-ht emacs-esxml))
    (home-page
      "https://github.com/lordpretzel/mu4e-views")
    (synopsis
      "View emails in mu4e using xwidget-webkit")
    (description
      "Documentation at https://melpa.org/#/mu4e-views")
    (license #f)))

(define-public emacs-mu4easy
  (package
    (name "emacs-mu4easy")
    (version "20230629.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielfleischer/mu4easy.git")
               (commit
                 "bb9f5df374723932c848f8864c86d7b0ceacc82c")))
        (sha256
          (base32
            "0ilmrwg17pfan2v999gla180p3krbfq01r4n6df4wg1h8k8d6kr7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-mu4e-column-faces
            emacs-mu4e-alert
            emacs-helm-mu
            emacs-org-msg))
    (home-page
      "https://github.com/danielfleischer/mu4easy")
    (synopsis
      "Packages + configs for using mu4e with multiple accounts")
    (description
      "Documentation at https://melpa.org/#/mu4easy")
    (license #f)))

(define-public emacs-muban
  (package
    (name "emacs-muban")
    (version "20180415.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jiahaowork/muban.el.git")
               (commit
                 "fd052645bcaa3cca8cede1c587a0b05ab5bd66b2")))
        (sha256
          (base32
            "13jz41iwzczrx9psp5dzh3l1m08idl5walr5lk6yljvx4840r9ij"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jiahaowork/muban.el")
    (synopsis "Lightweight template expansion tool")
    (description
      "Documentation at https://melpa.org/#/muban")
    (license #f)))

(define-public emacs-mugur
  (package
    (name "emacs-mugur")
    (version "20231024.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaiolteanu/mugur.git")
               (commit
                 "9d55e6eac893abfc0a2622d6ac2a791ce5b23fbb")))
        (sha256
          (base32
            "1571bxz6jjdpxdcmv3aisd87pwrr46z0pljql45n9lsvs01liyr3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-anaphora emacs-dash))
    (home-page
      "https://github.com/mihaiolteanu/mugur")
    (synopsis
      "Configurator for QMK compatible keyboards")
    (description
      "Documentation at https://melpa.org/#/mugur")
    (license #f)))

(define-public emacs-multi
  (package
    (name "emacs-multi")
    (version "20131013.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kurisuwhyte/emacs-multi.git")
               (commit
                 "0987ab71692717ed457cb3984de184db9185806d")))
        (sha256
          (base32
            "0f5hc6mgq0hg1wwnvqd4fp7ck58lcavvgqjggz9zlhrjgkmynjxx"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kurisuwhyte/emacs-multi")
    (synopsis
      "Clojure-style multi-methods for emacs lisp")
    (description
      "Documentation at https://melpa.org/#/multi")
    (license #f)))

(define-public emacs-multi-compile
  (package
    (name "emacs-multi-compile")
    (version "20211113.2119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ReanGD/emacs-multi-compile.git")
               (commit
                 "5e1e63b6ae4bd94aab5902b14b2bf4238e502cfb")))
        (sha256
          (base32
            "0f27qvf8qh5arzzk9a847qdi87ybkzjl6pgmb9sagrzhybpx8diy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/ReanGD/emacs-multi-compile")
    (synopsis "Multi target interface to compile.")
    (description
      "Documentation at https://melpa.org/#/multi-compile")
    (license #f)))

(define-public emacs-multi-line
  (package
    (name "emacs-multi-line")
    (version "20230721.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/multi-line.git")
               (commit
                 "06ea7294c4e4ace0c3253b7952a6d937a169eb55")))
        (sha256
          (base32
            "0iby3h9ypmnd35f9mvs53cghlpl9jjj97z5p191y99k3w4dzp4z1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-shut-up))
    (home-page
      "https://github.com/IvanMalison/multi-line")
    (synopsis "multi-line statements")
    (description
      "Documentation at https://melpa.org/#/multi-line")
    (license #f)))

(define-public emacs-multi-project
  (package
    (name "emacs-multi-project")
    (version "20230729.1543")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/multi-project-"
               version
               ".tar"))
        (sha256
          (base32
            "059p50hkaagba48vxil7b7b7lprw17dl8a728797i5hbi5q2w0ci"))))
    (build-system melpa-build-system)
    (home-page
      "https://hg.osdn.net/view/multi-project/multi-project")
    (synopsis
      "Find files, compile, and search for multiple projects.")
    (description
      "Documentation at https://melpa.org/#/multi-project")
    (license #f)))

(define-public emacs-multi-run
  (package
    (name "emacs-multi-run")
    (version "20210108.336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagarjha/multi-run.git")
               (commit
                 "13d4d923535b5e8482b13ff76185203075fb26a3")))
        (sha256
          (base32
            "0b5pym2dk4rhrcbn0kgiaf6mqpwa45zfi5k2vh0lfzv9b45nngzs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-window-layout))
    (home-page
      "https://www.github.com/sagarjha/multi-run")
    (synopsis
      "Efficiently manage multiple remote nodes")
    (description
      "Documentation at https://melpa.org/#/multi-run")
    (license #f)))

(define-public emacs-multi-term
  (package
    (name "emacs-multi-term")
    (version "20200514.428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/manateelazycat/multi-term.git")
               (commit
                 "017c77c550115936860e2ea71b88e585371475d5")))
        (sha256
          (base32
            "043dqd8i8h6hbcg11rzprxin2yq5lb902zlrb7mxah44vyp8wrdi"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/multi-term.el")
    (synopsis
      "Managing multiple terminal buffers in Emacs.")
    (description
      "Documentation at https://melpa.org/#/multi-term")
    (license #f)))

(define-public emacs-multi-vterm
  (package
    (name "emacs-multi-vterm")
    (version "20221031.610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/suonlight/multi-vterm.git")
               (commit
                 "36746d85870dac5aaee6b9af4aa1c3c0ef21a905")))
        (sha256
          (base32
            "01kysm6dks2c499g8b8p9nz6pjlhspmg1dp7fcx6vq9gds52qqi7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vterm))
    (home-page
      "https://github.com/suonlight/multi-libvterm")
    (synopsis "Like multi-term.el but for vterm")
    (description
      "Documentation at https://melpa.org/#/multi-vterm")
    (license #f)))

(define-public emacs-multi-web-mode
  (package
    (name "emacs-multi-web-mode")
    (version "20130824.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/multi-web-mode.git")
               (commit
                 "ad1c8d1c870334052d244c7ae3636cb7b9357b7c")))
        (sha256
          (base32
            "0mc4kkgwnwfk27wwc21nw5ly7qcsl7y5bd8wf2y8r6pxhvwran4n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgallina/multi-web-mode")
    (synopsis
      "multiple major mode support for web editing")
    (description
      "Documentation at https://melpa.org/#/multi-web-mode")
    (license #f)))

(define-public emacs-multicolumn
  (package
    (name "emacs-multicolumn")
    (version "20150202.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/multicolumn.git")
               (commit
                 "c7a3afecd470859b2e60aa7c554d6e4d436df7fa")))
        (sha256
          (base32
            "1ispa0wxpkydm0cyj4scyyacfrbilrip5v8bsrcqfc6qs597z8rf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/multicolumn")
    (synopsis
      "Creating and managing multiple side-by-side windows.")
    (description
      "Documentation at https://melpa.org/#/multicolumn")
    (license #f)))

(define-public emacs-multifiles
  (package
    (name "emacs-multifiles")
    (version "20130615.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/multifiles.el.git")
               (commit
                 "dddfe64b8e1c1cd1f9ccc1f03405477fc0d53897")))
        (sha256
          (base32
            "065l04ylplng1vgykkbn2vnkcs3sn1k2cikx1ha2q8wmgx6bkvai"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "View and edit parts of multiple files in one buffer")
    (description
      "Documentation at https://melpa.org/#/multifiles")
    (license #f)))

(define-public emacs-multiple-cursors
  (package
    (name "emacs-multiple-cursors")
    (version "20230728.518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/multiple-cursors.el.git")
               (commit
                 "234806c832994cadedb42596fe235e91bbd59e8c")))
        (sha256
          (base32
            "1q8325ij1f1y1779f5p00kj3hp3ndqzl5f88f0b238mmz4g4yayi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/magnars/multiple-cursors.el")
    (synopsis "Multiple cursors for Emacs.")
    (description
      "Documentation at https://melpa.org/#/multiple-cursors")
    (license #f)))

(define-public emacs-multistate
  (package
    (name "emacs-multistate")
    (version "20210124.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matsievskiysv/multistate.git")
               (commit
                 "a7ab9dc7aac0b6d6d2f872de4e0d1b8550834a9b")))
        (sha256
          (base32
            "1r4l0s8401yfm3dl83yqffim5m1gsqzqz9pv3dvq3v8rb94m9n9s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "https://gitlab.com/matsievskiysv/multistate")
    (synopsis "Multistate mode")
    (description
      "Documentation at https://melpa.org/#/multistate")
    (license #f)))

(define-public emacs-multitran
  (package
    (name "emacs-multitran")
    (version "20230920.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zevlg/multitran.el.git")
               (commit
                 "285b625b5e94f5dd960cb4a3292407aa7568073e")))
        (sha256
          (base32
            "0br5gy1jxanj7sjvrhqgni6bfins6nr79pccyjibqc8ca29zvgsz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Interface to multitran")
    (description
      "Documentation at https://melpa.org/#/multitran")
    (license #f)))

(define-public emacs-musicbrainz
  (package
    (name "emacs-musicbrainz")
    (version "20230530.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/metabrainz.git")
               (commit
                 "74f79b27e08ec405dd6c3331a9bf96a0e744d792")))
        (sha256
          (base32
            "0ia22n4br562k5gyix2bnwk6kmpgvfn7m0kp74ql78qcnc723yy7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (arguments '(#:files ("musicbrainz.el")))
    (home-page "https://github.com/zzkt/metabrainz")
    (synopsis "MusicBrainz API interface")
    (description
      "Documentation at https://melpa.org/#/musicbrainz")
    (license #f)))

(define-public emacs-mustache
  (package
    (name "emacs-mustache")
    (version "20230713.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/mustache.el.git")
               (commit
                 "229e01f0f0a5684499bcc6a11a5bf8dbe14fd4e8")))
        (sha256
          (base32
            "0b9hr9mika5kcz4d79yyaay2ivmi68vpj0ba5yhkxxzm74yiwmgz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/Wilfred/mustache.el")
    (synopsis
      "Mustache templating library in emacs lisp")
    (description
      "Documentation at https://melpa.org/#/mustache")
    (license #f)))

(define-public emacs-mustache-mode
  (package
    (name "emacs-mustache-mode")
    (version "20141024.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mustache/emacs.git")
               (commit
                 "bf9897eb287ca47ced65d7d4e07ea61ea0aec39f")))
        (sha256
          (base32
            "15gw4d0hp15rglsj8hzd290li4p0kadj2dsz0dgfcxld7hnimihk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A major mode for editing Mustache files.")
    (description
      "Documentation at https://melpa.org/#/mustache-mode")
    (license #f)))

(define-public emacs-mustang-theme
  (package
    (name "emacs-mustang-theme")
    (version "20170719.946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/mustang-theme.git")
               (commit
                 "dda6d04803f1c9b196b620ef564e7768fee15de2")))
        (sha256
          (base32
            "0pg3iay0iinf361v4ay8kizdxs5rm23ir556cwwgz3m3gbs0mgsh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("mustang-theme.el")))
    (home-page
      "http://github.com/mswift42/mustang-theme")
    (synopsis "port of vim's mustang theme")
    (description
      "Documentation at https://melpa.org/#/mustang-theme")
    (license #f)))

(define-public emacs-mustard-theme
  (package
    (name "emacs-mustard-theme")
    (version "20170808.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-mustard-theme.git")
               (commit
                 "3b15d992c79590d7ea2503004e2a863b57e274b5")))
        (sha256
          (base32
            "01ak4ayk46jqawlbb9cqliiqhnn68cq27kryamibdpds8sq0ch83"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Mustard (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/mustard-theme")
    (license #f)))

(define-public emacs-mutant
  (package
    (name "emacs-mutant")
    (version "20160124.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p-lambert/mutant.el.git")
               (commit
                 "de9cdefe48c880128a8f62c6699d7416e9c8ced1")))
        (sha256
          (base32
            "0w9blrm3596hmip8jg2hlz9sl31ci89b90jglmg4ipldgrgj3ly6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/p-lambert/mutant.el")
    (synopsis
      "An interface for the Mutant testing tool")
    (description
      "Documentation at https://melpa.org/#/mutant")
    (license #f)))

(define-public emacs-mutt-mode
  (package
    (name "emacs-mutt-mode")
    (version "20191102.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/flexw/mutt-mode.git")
               (commit
                 "1d495de49e6f536459b00d5396a2f5ce5ad4757b")))
        (sha256
          (base32
            "1nxsbvhh99kwbgaxzmraryayppfmci2grg591zj8yhdh6d3l1jmj"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/flexw/mutt-mode")
    (synopsis
      "major mode for editing mutt configuration")
    (description
      "Documentation at https://melpa.org/#/mutt-mode")
    (license #f)))

(define-public emacs-mvn
  (package
    (name "emacs-mvn")
    (version "20181002.1617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/mvn-el.git")
               (commit
                 "223723d9ceeb2878b884e83abb8ca74ad2e42081")))
        (sha256
          (base32
            "1sl7kfg5w73cw9mv4x1m497dg27h42zgx2ywl4s8fmx2k9f2pq1q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/apgwoz/mvn-el")
    (synopsis "helpers for compiling with maven")
    (description
      "Documentation at https://melpa.org/#/mvn")
    (license #f)))

(define-public emacs-mw-thesaurus
  (package
    (name "emacs-mw-thesaurus")
    (version "20230426.1752")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agzam/mw-thesaurus.el.git")
               (commit
                 "c44d793595c2d0f6789621da457da065920968ac")))
        (sha256
          (base32
            "02drf3xzjyq230s0w8yza7pq6nny1faj93lhznll0r3zmvmnn3h1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash))
    (home-page
      "https://github.com/agzam/mw-thesaurus.el")
    (synopsis "Merriam-Webster Thesaurus")
    (description
      "Documentation at https://melpa.org/#/mw-thesaurus")
    (license #f)))

(define-public emacs-mwim
  (package
    (name "emacs-mwim")
    (version "20181110.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/mwim.el.git")
               (commit
                 "b4f3edb4c0fb8f8b71cecbf8095c2c25a8ffbf85")))
        (sha256
          (base32
            "0l3k611gp9g2x2vfmh92wnhnda81dslpwwpb8mxmzk308man77ya"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/alezost/mwim.el")
    (synopsis
      "Switch between the beginning/end of line or code")
    (description
      "Documentation at https://melpa.org/#/mwim")
    (license #f)))

(define-public emacs-mxf-view
  (package
    (name "emacs-mxf-view")
    (version "20180501.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/t-suwa/mxf-view.git")
               (commit
                 "6ca3cc93d995fac5fc4d72275e1e984e9857ffcb")))
        (sha256
          (base32
            "0n0142kc7q4vy0n7winbvnc8zv4janlr2x4mi97f8v70drl4b18h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/t-suwa/mxf-view")
    (synopsis "Simple MXF viewer")
    (description
      "Documentation at https://melpa.org/#/mxf-view")
    (license #f)))

(define-public emacs-my-repo-pins
  (package
    (name "emacs-my-repo-pins")
    (version "20230120.1105")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NinjaTrappeur/my-repo-pins.git")
               (commit
                 "e6fe3864e244e6db74b668d24857c04472b2d475")))
        (sha256
          (base32
            "1r9mw4jbpi4i7lvd0gg5li0ia16s9pcfxl71c8l9qvqp73hvr51b"))))
    (build-system melpa-build-system)
    (home-page
      "https://alternativebit.fr/projects/my-repo-pins/")
    (synopsis "Keep your git repositories organized")
    (description
      "Documentation at https://melpa.org/#/my-repo-pins")
    (license #f)))

(define-public emacs-myanmar-input-methods
  (package
    (name "emacs-myanmar-input-methods")
    (version "20160106.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yelinkyaw/emacs-myanmar-input-methods.git")
               (commit
                 "9d4e0d6358c61bde7a2274e430ef71683faea32e")))
        (sha256
          (base32
            "0cf0c9g9k2lk1ifi2dlw7c601sh1ycxf3fgl2hy5wliyd6l9rf86"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/yelinkyaw/emacs-myanmar-input-methods")
    (synopsis "Emacs Input Method for Myanmar")
    (description
      "Documentation at https://melpa.org/#/myanmar-input-methods")
    (license #f)))

(define-public emacs-mybigword
  (package
    (name "emacs-mybigword")
    (version "20230809.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/mybigword.git")
               (commit
                 "13574e2c47a670df4b776b88bd633b2e8a82b2b2")))
        (sha256
          (base32
            "1dpbgm1800l2hb656830z682s4kpdyyd6g8acq1mig1synixspkh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (arguments
      '(#:files ("mybigword.el" "eng.zipf")))
    (home-page
      "https://github.com/redguardtoo/mybigword")
    (synopsis
      "Vocabulary builder using Zipf to extract English big words")
    (description
      "Documentation at https://melpa.org/#/mybigword")
    (license #f)))

(define-public emacs-mybuild-mode
  (package
    (name "emacs-mybuild-mode")
    (version "20221007.1928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/easimonenko/mybuild-mode.git")
               (commit
                 "54e3c31e3b5f133eb8611a3759e59733b17e33e3")))
        (sha256
          (base32
            "0lyl68cv9ajapnzb4cdh76kb35n9s4mjjagh28z1nc5jp8c23ky0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/easimonenko/mybuild-mode")
    (synopsis
      "Major mode for editing Mybuild files from Embox")
    (description
      "Documentation at https://melpa.org/#/mybuild-mode")
    (license #f)))

(define-public emacs-mykie
  (package
    (name "emacs-mykie")
    (version "20150808.2205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/mykie-el.git")
               (commit
                 "7676f0e883af1d1054e404e97691f3c13aba196f")))
        (sha256
          (base32
            "0a9a6hmv8vjmp6h9mnzin9vc0sncg79v5z72pasvbrplfxijzan0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lisp/*.el")))
    (home-page
      "https://github.com/yuutayamada/mykie-el")
    (synopsis
      "Command multiplexer: Register multiple functions to a keybind")
    (description
      "Documentation at https://melpa.org/#/mykie")
    (license #f)))

(define-public emacs-mynt-mode
  (package
    (name "emacs-mynt-mode")
    (version "20150512.2049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cbrst/mynt-mode.git")
               (commit
                 "23d4489167bfa899634548cb41ed32fdeb3600c9")))
        (sha256
          (base32
            "18ml0qz3iipm9w36zvwz77cbbrg885jgvzk6z4a33xcfp524xhma"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-virtualenvwrapper))
    (home-page "https://github.com/crshd/mynt-mode")
    (synopsis
      "Minor mode to work with the mynt static site generator")
    (description
      "Documentation at https://melpa.org/#/mynt-mode")
    (license #f)))

(define-public emacs-myrddin-mode
  (package
    (name "emacs-myrddin-mode")
    (version "20191225.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~jakob/myrddin-mode")
               (commit
                 "51c0a2cb9dfc9526cd47e71313f5a745c99cadcc")))
        (sha256
          (base32
            "17qaxdzygk59qdm3hpyhc70jxiijfyq2n39dy68cwzhyd13i8f2i"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~jakob/myrddin-mode")
    (synopsis
      "Major mode for editing Myrddin source files")
    (description
      "Documentation at https://melpa.org/#/myrddin-mode")
    (license #f)))

(define-public emacs-mysql-to-org
  (package
    (name "emacs-mysql-to-org")
    (version "20210622.447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mallt/mysql-to-org-mode.git")
               (commit
                 "c5eefc71200f2e1d0d67a13ed897b3cdfa835117")))
        (sha256
          (base32
            "1ll7n8gxmzk7grlwh5igbxh7lvf7c08hi1xir2n0fj9wyzd432ny"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis
      "Minor mode to output the results of mysql queries to org tables")
    (description
      "Documentation at https://melpa.org/#/mysql-to-org")
    (license #f)))

(define-public emacs-myterminal-controls
  (package
    (name "emacs-myterminal-controls")
    (version "20210904.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myTerminal/myterminal-controls.git")
               (commit
                 "c635868e13ee898ec77925d98b36421640e22aa4")))
        (sha256
          (base32
            "1y7kkb12m94z8ypnfc02xsbsv30lm6qbk3cri1fd63wjshv7wil2"))))
    (build-system melpa-build-system)
    (home-page "http://ismail.teamfluxion.com")
    (synopsis
      "Quick toggle controls at a key-stroke")
    (description
      "Documentation at https://melpa.org/#/myterminal-controls")
    (license #f)))

(define-public emacs-n4js
  (package
    (name "emacs-n4js")
    (version "20150714.231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmtxt/n4js.el.git")
               (commit
                 "3991ed8975151d5e8d568e952362df810f7ffab7")))
        (sha256
          (base32
            "1pd6c0jc1zxx3i3nk4qdx7gdf1qn8sc9jgqd72pkkpzvdwv998cp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cypher-mode))
    (home-page "https://github.com/tmtxt/n4js.el")
    (synopsis "Neo4j Shell")
    (description
      "Documentation at https://melpa.org/#/n4js")
    (license #f)))

(define-public emacs-naga-theme
  (package
    (name "emacs-naga-theme")
    (version "20230904.801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kenranunderscore/emacs-naga-theme.git")
               (commit
                 "a1b12bd7b00b286c3f37f50136dcf5602fc178ec")))
        (sha256
          (base32
            "1g99rifsmn8c2frmvymmspbd7v7i7x4m798533sz8ak4vnys4w1d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kenranunderscore/emacs-naga-theme")
    (synopsis
      "Dark color theme with green foreground color")
    (description
      "Documentation at https://melpa.org/#/naga-theme")
    (license #f)))

(define-public emacs-name-this-color
  (package
    (name "emacs-name-this-color")
    (version "20151014.2030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knl/name-this-color.el.git")
               (commit
                 "e37cd1291d5d68d4c8d6386eab9cb9d94fd3bcfa")))
        (sha256
          (base32
            "0amhw630hgc0j8wr8m6aav399ixi3vbwrck79hhlr3pmyh91vv7n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/knl/name-this-color.el")
    (synopsis
      "Match RGB codes to names easily and precisely")
    (description
      "Documentation at https://melpa.org/#/name-this-color")
    (license #f)))

(define-public emacs-named-timer
  (package
    (name "emacs-named-timer")
    (version "20181120.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/emacs-named-timer.git")
               (commit
                 "d8baeada19b56176c66aed5fa220751e3de11cb8")))
        (sha256
          (base32
            "0xa44mks90xhwkjvrgxll0hzwhkf317i3gxqlajl9cx8v3bhczz1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarwinAwardWinner/emacs-named-timer")
    (synopsis
      "Simplified timer management for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/named-timer")
    (license #f)))

(define-public emacs-nameframe
  (package
    (name "emacs-nameframe")
    (version "20221023.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/nameframe.git")
               (commit
                 "06d3400750c6b33ae215b9ac2922ee4dafd6b506")))
        (sha256
          (base32
            "1fi22bynd6hxa35yw5fa7nx92iik7rk616dly4x6iy1d0sqyf3ik"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("nameframe.el")))
    (home-page "https://github.com/john2x/nameframe")
    (synopsis "Manage frames by name.")
    (description
      "Documentation at https://melpa.org/#/nameframe")
    (license #f)))

(define-public emacs-nameframe-perspective
  (package
    (name "emacs-nameframe-perspective")
    (version "20221023.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/nameframe.git")
               (commit
                 "06d3400750c6b33ae215b9ac2922ee4dafd6b506")))
        (sha256
          (base32
            "1fi22bynd6hxa35yw5fa7nx92iik7rk616dly4x6iy1d0sqyf3ik"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nameframe emacs-perspective))
    (arguments
      '(#:files ("nameframe-perspective.el")))
    (home-page "https://github.com/john2x/nameframe")
    (synopsis
      "Nameframe integration with perspective.el")
    (description
      "Documentation at https://melpa.org/#/nameframe-perspective")
    (license #f)))

(define-public emacs-nameframe-project
  (package
    (name "emacs-nameframe-project")
    (version "20221024.209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/nameframe.git")
               (commit
                 "3116b6738f74a95e144a75344355e09f72620e01")))
        (sha256
          (base32
            "0ymrxcjnq6z48byypzxkqb83pslf014rxvy65bizn2xmr4ziw0qk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nameframe))
    (arguments '(#:files ("nameframe-project.el")))
    (home-page "https://github.com/john2x/nameframe")
    (synopsis
      "Nameframe integration with project.el")
    (description
      "Documentation at https://melpa.org/#/nameframe-project")
    (license #f)))

(define-public emacs-nameframe-projectile
  (package
    (name "emacs-nameframe-projectile")
    (version "20221023.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/nameframe.git")
               (commit
                 "06d3400750c6b33ae215b9ac2922ee4dafd6b506")))
        (sha256
          (base32
            "1fi22bynd6hxa35yw5fa7nx92iik7rk616dly4x6iy1d0sqyf3ik"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nameframe emacs-projectile))
    (arguments
      '(#:files ("nameframe-projectile.el")))
    (home-page "https://github.com/john2x/nameframe")
    (synopsis
      "Nameframe integration with Projectile")
    (description
      "Documentation at https://melpa.org/#/nameframe-projectile")
    (license #f)))

(define-public emacs-nameless
  (package
    (name "emacs-nameless")
    (version "20230112.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/Nameless.git")
               (commit
                 "e468f3eea4518b9827419611868c897dce20453f")))
        (sha256
          (base32
            "1cyri78rlv5i9a8ryn4s0s83wd80366nsv2nkp4i6nrsxffkrrkq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/nameless")
    (synopsis
      "Hide package namespace in your emacs-lisp code")
    (description
      "Documentation at https://melpa.org/#/nameless")
    (license #f)))

(define-public emacs-names
  (package
    (name "emacs-names")
    (version "20221227.1825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/names.git")
               (commit
                 "45a272fae915148d9a74d4cb3c39917b272ee9c3")))
        (sha256
          (base32
            "1pzf5hkcvcqljl0kymjfg763nn4i5f94ywl1jrr3iwd72nqp0yp0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Malabarba/names")
    (synopsis
      "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols.")
    (description
      "Documentation at https://melpa.org/#/names")
    (license #f)))

(define-public emacs-namespaces
  (package
    (name "emacs-namespaces")
    (version "20130326.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/elisp-namespaces.git")
               (commit
                 "3d02525d9b9a5ae6e7be3adefd880121436e6270")))
        (sha256
          (base32
            "157hhb253m6a9l5wy6x8w5ar3x0qz1326l7a0npxif6pma0dd140"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("namespaces.el")))
    (home-page
      "https://github.com/chrisbarrett/elisp-namespaces")
    (synopsis
      "An implementation of namespaces for Elisp, with an emphasis on immutabilty.")
    (description
      "Documentation at https://melpa.org/#/namespaces")
    (license #f)))

(define-public emacs-nand2tetris
  (package
    (name "emacs-nand2tetris")
    (version "20171201.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/nand2tetris.el.git")
               (commit
                 "33acee34d24b1c6a87db833b7d23449cf858f64f")))
        (sha256
          (base32
            "0sfa674g1qm280s0pc3n6qiiphj5i9ibknckx5capkrkxb5cwpkw"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("nand2tetris.el"
         "nand2tetris-core.el"
         "snippets")))
    (home-page
      "http://www.github.com/CestDiego/nand2tetris.el/")
    (synopsis
      "Major mode for HDL files in the nand2tetris course")
    (description
      "Documentation at https://melpa.org/#/nand2tetris")
    (license #f)))

(define-public emacs-nand2tetris-assembler
  (package
    (name "emacs-nand2tetris-assembler")
    (version "20171201.1813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/nand2tetris.el.git")
               (commit
                 "33acee34d24b1c6a87db833b7d23449cf858f64f")))
        (sha256
          (base32
            "0sfa674g1qm280s0pc3n6qiiphj5i9ibknckx5capkrkxb5cwpkw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nand2tetris))
    (arguments
      '(#:files ("nand2tetris-assembler.el")))
    (home-page
      "http://www.github.com/CestDiego/nand2tetris-assembler.el/")
    (synopsis "Assembler For the Nand2tetris Course")
    (description
      "Documentation at https://melpa.org/#/nand2tetris-assembler")
    (license #f)))

(define-public emacs-nanowrimo
  (package
    (name "emacs-nanowrimo")
    (version "20151105.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gvol/nanowrimo.el.git")
               (commit
                 "b1d41458926ccb39cefbb1bb74aefe4f02fd349f")))
        (sha256
          (base32
            "1nzkamy53kl1g4y1jm7j5zgpkdsyg5ykp8zp1f0bg5mhy8mmf75w"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/gvol/nanowrimo-mode")
    (synopsis "Track progress for nanowrimo")
    (description
      "Documentation at https://melpa.org/#/nanowrimo")
    (license #f)))

(define-public emacs-naquadah-theme
  (package
    (name "emacs-naquadah-theme")
    (version "20190225.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/naquadah-theme.git")
               (commit
                 "430c3b7bd51922cb616b3f60301f4e2604816ed8")))
        (sha256
          (base32
            "0z2dn05xgbdfw6rwgsq31rm5dr098dk411qk83fbx2bkdxxfr60w"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A theme based on Tango color set")
    (description
      "Documentation at https://melpa.org/#/naquadah-theme")
    (license #f)))

(define-public emacs-narrow-reindent
  (package
    (name "emacs-narrow-reindent")
    (version "20150722.1906")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emallson/narrow-reindent.el.git")
               (commit
                 "87466aac4dbeb79597124dd077bf5c704872fd3d")))
        (sha256
          (base32
            "10yn215xb4s6kshk108y75im1xbdp0vwc9kah5bbaflp9234i0zh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emallson/narrow-reindent.el")
    (synopsis
      "Defines a minor mode to left-align narrowed regions.")
    (description
      "Documentation at https://melpa.org/#/narrow-reindent")
    (license #f)))

(define-public emacs-narrowed-page-navigation
  (package
    (name "emacs-narrowed-page-navigation")
    (version "20150109.519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/narrowed-page-navigation.git")
               (commit
                 "b215adbac4873f56fbab65772062f0f5be8058a1")))
        (sha256
          (base32
            "0ydxj6dc10knambma2hpimqrhfz216nbj96w1dcwgjixs4cd4nax"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A minor mode for showing one page at a time")
    (description
      "Documentation at https://melpa.org/#/narrowed-page-navigation")
    (license #f)))

(define-public emacs-narumi
  (package
    (name "emacs-narumi")
    (version "20220228.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nryotaro/narumi.git")
               (commit
                 "2f23f03a7b94766799f26605e167b259a4a90903")))
        (sha256
          (base32
            "09bjxlphh985w389qrk0plfqllqy5a0rwxblwh0fpabxsqrinz8v"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nryotaro/narumi")
    (synopsis
      "A dashboard that displays a ramdom sampled image")
    (description
      "Documentation at https://melpa.org/#/narumi")
    (license #f)))

(define-public emacs-nash-mode
  (package
    (name "emacs-nash-mode")
    (version "20160830.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/i4ki/nash-mode.el.git")
               (commit
                 "2cd96535eb7d669a94306183e95ee37333872c1a")))
        (sha256
          (base32
            "0wdkl56pgm6qlgqjs4kqjglnxzjsfjd0y4fiffhxc893gm0psrpg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tiago4orion/nash-mode.el")
    (synopsis "Nash major mode")
    (description
      "Documentation at https://melpa.org/#/nash-mode")
    (license #f)))

(define-public emacs-nasm-mode
  (package
    (name "emacs-nasm-mode")
    (version "20190410.342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/nasm-mode.git")
               (commit
                 "65ca6546fc395711fac5b3b4299e76c2303d43a8")))
        (sha256
          (base32
            "00rv6m004hcsn71hv3p3rxmrpwajdy02qpi2ymhxx2w3r49ba562"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/skeeto/nasm-mode")
    (synopsis "NASM x86 assembly major mode")
    (description
      "Documentation at https://melpa.org/#/nasm-mode")
    (license #f)))

(define-public emacs-native-complete
  (package
    (name "emacs-native-complete")
    (version "20230505.1803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CeleritasCelery/emacs-native-shell-complete.git")
               (commit
                 "7b5e7d86c39ce9833118db278034789a6c0ecfd6")))
        (sha256
          (base32
            "0khlr0g6b5ml3n0s49mzhlwfca7gcxf07sb2h6014vnhf1i7qy78"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("native-complete.el")))
    (home-page
      "https://github.com/CeleritasCelery/emacs-native-shell-complete")
    (synopsis
      "Shell completion using native complete mechanisms")
    (description
      "Documentation at https://melpa.org/#/native-complete")
    (license #f)))

(define-public emacs-nav
  (package
    (name "emacs-nav")
    (version "20120507.707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ijt/emacs-nav.git")
               (commit
                 "c5eb234c063f435dbdcd1f8bdc46cfc68c973ebe")))
        (sha256
          (base32
            "0kfqpji6z3ra8sc951vmm1bzyhkws7vb5q6djvl45wlf1wrgkc4p"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ack*" "nav.el")))
    (home-page "unspecified")
    (synopsis "Emacs mode for filesystem navigation")
    (description
      "Documentation at https://melpa.org/#/nav")
    (license #f)))

(define-public emacs-nav-flash
  (package
    (name "emacs-nav-flash")
    (version "20220726.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/nav-flash.git")
               (commit
                 "5d4b48567862f6be0ca973d6b1dca90e4815cb9b")))
        (sha256
          (base32
            "0l6zamrh3n3416pgr2jhqabldl180zg0n4651g42jn8xcbwg4w6c"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/nav-flash")
    (synopsis "Briefly highlight the current line")
    (description
      "Documentation at https://melpa.org/#/nav-flash")
    (license #f)))

(define-public emacs-navi-mode
  (package
    (name "emacs-navi-mode")
    (version "20201220.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/navi.git")
               (commit
                 "cf97e1e338815ad3a4d0bbbf4ff6dd1a4e322ca8")))
        (sha256
          (base32
            "12nb7rha3fh29djwnnc28k8g5bnwk2cvijym1i4m4q1fpymfm4ri"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-outshine emacs-outorg))
    (home-page "https://github.com/alphapapa/navi")
    (synopsis
      "major-mode for easy buffer-navigation")
    (description
      "Documentation at https://melpa.org/#/navi-mode")
    (license #f)))

(define-public emacs-navi2ch
  (package
    (name "emacs-navi2ch")
    (version "20200130.36")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/naota/navi2ch.git")
               (commit
                 "7811dba052f679bd920a1f648d621a6fecace10f")))
        (sha256
          (base32
            "0glr8cfxpp23j8sr0147x1ba7f6i8vzn2c15kgfs94y5h2d4jv3l"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("navi2ch*.el"
         "contrib/*.el"
         ("icons" "icons/*.xpm"))))
    (home-page "unspecified")
    (synopsis "Navigator for 2ch for Emacsen")
    (description
      "Documentation at https://melpa.org/#/navi2ch")
    (license #f)))

(define-public emacs-navigel
  (package
    (name "emacs-navigel")
    (version "20230903.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/navigel.git")
               (commit
                 "31320a6433093ca860508beee9f0e29a794c51ca")))
        (sha256
          (base32
            "0avpclzq52lqm49f7dnmjafyw1725jy92h2w24syb50dmnb44kvh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tablist))
    (home-page
      "https://github.com/DamienCassou/navigel")
    (synopsis
      "Facilitate the creation of tabulated-list based UIs")
    (description
      "Documentation at https://melpa.org/#/navigel")
    (license #f)))

(define-public emacs-navorski
  (package
    (name "emacs-navorski")
    (version "20141203.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/roman/navorski.el.git")
               (commit
                 "698c1c62da70164aebe9a7a5d034778fbc30ea5b")))
        (sha256
          (base32
            "0g7rmvfm0ldv0d2x7f8k761mgmi47siyspfi1ns40ijhkpc15x8l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-multi-term))
    (home-page "unspecified")
    (synopsis
      "Helping you live in the terminal, like Viktor did.")
    (description
      "Documentation at https://melpa.org/#/navorski")
    (license #f)))

(define-public emacs-naysayer-theme
  (package
    (name "emacs-naysayer-theme")
    (version "20230720.2056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickav/naysayer-theme.el.git")
               (commit
                 "eafbc760e32728d2fe2b347621da222537372500")))
        (sha256
          (base32
            "0a2gznz4054ibwlmis3zb5z63nl663azdn4dml6xks77i6ys73dn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickav/naysayer-theme.el")
    (synopsis "The naysayer color theme")
    (description
      "Documentation at https://melpa.org/#/naysayer-theme")
    (license #f)))

(define-public emacs-ncl-mode
  (package
    (name "emacs-ncl-mode")
    (version "20180129.703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyr/ncl-mode.git")
               (commit
                 "602292712a9e6b7e7c25155978999e77d06b7338")))
        (sha256
          (base32
            "0sv44hn2ylick7ywpcbij8h2vxdj06zridjdmcfgpv5d090dbl9n"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         "snippets"
         "snippets_generated"
         "dict"
         "tools"
         "img")))
    (home-page "https://github.com/yyr/ncl-mode")
    (synopsis
      "Major Mode for editing NCL scripts and other goodies")
    (description
      "Documentation at https://melpa.org/#/ncl-mode")
    (license #f)))

(define-public emacs-nclip
  (package
    (name "emacs-nclip")
    (version "20130617.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/nclip.el.git")
               (commit
                 "af88e38b1f04be02bf2e57affc662dbd0f828e67")))
        (sha256
          (base32
            "178gjv7kq97p9i4naxql7xabvmchw5x8idkpyjqqky3b24v5wkis"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("nclip.el" "nclip.rb" "nclip.py")))
    (home-page "http://www.github.com/maio/nclip.el")
    (synopsis "Network (HTTP) Clipboard")
    (description
      "Documentation at https://melpa.org/#/nclip")
    (license #f)))

(define-public emacs-neato-graph-bar
  (package
    (name "emacs-neato-graph-bar")
    (version "20181130.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/RobertCochran/neato-graph-bar.git")
               (commit
                 "a7ae35afd67911e8924f36e646bce0d3e3c1bbe6")))
        (sha256
          (base32
            "0sx2m2j00xhcb8l7fw595zsn9wjhcj4xb163rjqd3d1wjrk6fpn8"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/RobertCochran/neato-graph-bar")
    (synopsis "Neat-o graph bars CPU/memory etc.")
    (description
      "Documentation at https://melpa.org/#/neato-graph-bar")
    (license #f)))

(define-public emacs-neil
  (package
    (name "emacs-neil")
    (version "20231002.1014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/babashka/neil.git")
               (commit
                 "f597921dcbf4774d799be62d8fbbce7171b12c3f")))
        (sha256
          (base32
            "143lbva2bh723qgk6mjnbawbx9sr3x3pnpgp42hvnr072gcpl9nd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/babashka/neil")
    (synopsis "companion for Babashka Neil")
    (description
      "Documentation at https://melpa.org/#/neil")
    (license #f)))

(define-public emacs-nemerle
  (package
    (name "emacs-nemerle")
    (version "20161029.2023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rsdn/nemerle.git")
               (commit
                 "db4bc9078f1b6238da32df1519c1957e74b6834a")))
        (sha256
          (base32
            "07axi57f4q7rvsk3w15jrbql20fwmxn2rk07cc9ahqkzys66jfv1"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/nemerle.el")))
    (home-page "unspecified")
    (synopsis
      "major mode for editing nemerle programs")
    (description
      "Documentation at https://melpa.org/#/nemerle")
    (license #f)))

(define-public emacs-neon-mode
  (package
    (name "emacs-neon-mode")
    (version "20180406.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/neon-mode.git")
               (commit
                 "99d15e46beaf1e7d71e39a00cce810df1f33229d")))
        (sha256
          (base32
            "07vsi07m5q070fvkqhz32qa2y7dgnyi1kggairimbiwbn98bh642"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Simple major mode for editing neon files")
    (description
      "Documentation at https://melpa.org/#/neon-mode")
    (license #f)))

(define-public emacs-neotree
  (package
    (name "emacs-neotree")
    (version "20230815.219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaypei/emacs-neotree.git")
               (commit
                 "2b0cb8285352202c62b1e46a8aa265a5e4f9d966")))
        (sha256
          (base32
            "1ar32yv9mrvg2q0wdi3da9hzk70ml5jj7wjrcnnmhdmi4sigzjpg"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/jaypei/emacs-neotree")
    (synopsis "A tree plugin like NerdTree for Vim")
    (description
      "Documentation at https://melpa.org/#/neotree")
    (license #f)))

(define-public emacs-nerd-icons
  (package
    (name "emacs-nerd-icons")
    (version "20231105.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rainstormstudio/nerd-icons.el.git")
               (commit
                 "a506b43dc241ee07c28ce815068277084afbf09c")))
        (sha256
          (base32
            "0jahmqvi0hb8jsraj21d1n6wdp827yak2f4bs9ljpmggqvxp40pl"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "data")))
    (home-page
      "https://github.com/rainstormstudio/nerd-icons.el")
    (synopsis "Emacs Nerd Font Icons Library")
    (description
      "Documentation at https://melpa.org/#/nerd-icons")
    (license #f)))

(define-public emacs-nerd-icons-completion
  (package
    (name "emacs-nerd-icons-completion")
    (version "20230430.1611")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rainstormstudio/nerd-icons-completion.git")
               (commit
                 "d88fec04a9169a746a306ecd24f0877d1a95080d")))
        (sha256
          (base32
            "1w67jdd8zk4vfhqkpn432mdqn99rwh33hha4l0lwwkgl3yqbyyp5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://github.com/rainstormstudio/nerd-icons-completion")
    (synopsis "Add icons to completion candidates")
    (description
      "Documentation at https://melpa.org/#/nerd-icons-completion")
    (license #f)))

(define-public emacs-nerd-icons-corfu
  (package
    (name "emacs-nerd-icons-corfu")
    (version "20231019.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LuigiPiucco/nerd-icons-corfu.git")
               (commit
                 "7077bb76fefc15aed967476406a19dc5c2500b3c")))
        (sha256
          (base32
            "13m20k242zma6jw7pkbw89fk3dnbkwdajcpiyay5xx2l9241snb7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://github.com/LuigiPiucco/nerd-icons-corfu")
    (synopsis "Icons for Corfu via nerd-icons")
    (description
      "Documentation at https://melpa.org/#/nerd-icons-corfu")
    (license #f)))

(define-public emacs-nerd-icons-dired
  (package
    (name "emacs-nerd-icons-dired")
    (version "20230917.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rainstormstudio/nerd-icons-dired.git")
               (commit
                 "4a068884bf86647d242c3adc8320cd603e15dac3")))
        (sha256
          (base32
            "1nn9xa0vhn0szl0xaz7hrkpj1xpq3yr5ym4043j3qh1h75048isf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://github.com/rainstormstudio/nerd-icons-dired")
    (synopsis
      "Shows icons for each file in dired mode")
    (description
      "Documentation at https://melpa.org/#/nerd-icons-dired")
    (license #f)))

(define-public emacs-nerd-icons-ibuffer
  (package
    (name "emacs-nerd-icons-ibuffer")
    (version "20230417.1549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/nerd-icons-ibuffer.git")
               (commit
                 "18c00c03a0d7193bab5e3374ec02c5428db057fd")))
        (sha256
          (base32
            "1wj6kcgvh700maj9i5pmgzc48lbj0dbxx849a8w519m4anr7b23s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://github.com/seagle0128/nerd-icons-ibuffer")
    (synopsis "Display nerd icons in ibuffer")
    (description
      "Documentation at https://melpa.org/#/nerd-icons-ibuffer")
    (license #f)))

(define-public emacs-nerd-icons-ivy-rich
  (package
    (name "emacs-nerd-icons-ivy-rich")
    (version "20230721.357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seagle0128/nerd-icons-ivy-rich.git")
               (commit
                 "b3b605efa03d464d6138454ac3f60dcae50e7acb")))
        (sha256
          (base32
            "10xilnlp9nb1j8h5m413qsf52zi3rvz5ca7wj4zar8j2wmsszdkv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ivy-rich emacs-nerd-icons))
    (home-page
      "https://github.com/seagle0128/nerd-icons-ivy-rich")
    (synopsis
      "Excellent experience with nerd icons for ivy/counsel")
    (description
      "Documentation at https://melpa.org/#/nerd-icons-ivy-rich")
    (license #f)))

(define-public emacs-nerdtab
  (package
    (name "emacs-nerdtab")
    (version "20180811.339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/casouri/nerdtab.git")
               (commit
                 "74ccc14d7956712e477a34b4a733284e8b3832a6")))
        (sha256
          (base32
            "1cpdarxw9pida7pg7lgq4p4lnq2l3ny2y96j0ckxx7r04p24q611"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/casouri/nerdtab")
    (synopsis "Keyboard-oriented tabs")
    (description
      "Documentation at https://melpa.org/#/nerdtab")
    (license #f)))

(define-public emacs-netease-cloud-music
  (package
    (name "emacs-netease-cloud-music")
    (version "20220305.1224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpringHan/netease-cloud-music.el.git")
               (commit
                 "f238d1d45bbeee32e0a8d169f39de4360be908f4")))
        (sha256
          (base32
            "0i460vn7plvxrzbzlnfldx36aymy0x666r5w3mak3a5ksyqpbi1c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/SpringHan/netease-cloud-music.git")
    (synopsis "Netease Cloud Music client")
    (description
      "Documentation at https://melpa.org/#/netease-cloud-music")
    (license #f)))

(define-public emacs-netease-music
  (package
    (name "emacs-netease-music")
    (version "20210411.603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicehiro/netease-music.git")
               (commit
                 "db7f1eef2d8544983509db679be1cbe6a5678071")))
        (sha256
          (base32
            "13vylyywsp6h4w04g56af5fav8d11sbf90h78b6mv81vp850842p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names))
    (home-page
      "https://github.com/nicehiro/netease-music")
    (synopsis "listen netease music")
    (description
      "Documentation at https://melpa.org/#/netease-music")
    (license #f)))

(define-public emacs-netherlands-holidays
  (package
    (name "emacs-netherlands-holidays")
    (version "20150202.1617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/netherlands-holidays.git")
               (commit
                 "26236178cdd650df9958bf5a086e184096559f00")))
        (sha256
          (base32
            "1kkflj2qnrn6kzh1l6bjl5n5507qilb22pqj3h0f2m6hfyn0sw5z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/netherlands-holidays")
    (synopsis
      "Netherlands holidays for Emacs calendar.")
    (description
      "Documentation at https://melpa.org/#/netherlands-holidays")
    (license #f)))

(define-public emacs-netrunner
  (package
    (name "emacs-netrunner")
    (version "20160910.2332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/netrunner.git")
               (commit
                 "c64672992175c8c1073c0f56c2e471839db71a0f")))
        (sha256
          (base32
            "1jj8qsq4xa93h3srskhw1l6igzf9jhwl8hfa73zvqr8dhqhp149k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-company emacs-helm))
    (home-page
      "http://github.com/Kungsgeten/netrunner")
    (synopsis
      "Create Android: Netrunner decklists using Company, Helm and org-mode")
    (description
      "Documentation at https://melpa.org/#/netrunner")
    (license #f)))

(define-public emacs-network-watch
  (package
    (name "emacs-network-watch")
    (version "20171123.1146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamiguet/network-watch.git")
               (commit
                 "958dd0d419e4f9402648a86b754091ba346e01b8")))
        (sha256
          (base32
            "1xqp7aghc8xd1733azl27mjf57qvm0036qbkqmaks2ip8s8c6arj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jamiguet/network-watch")
    (synopsis
      "Support for intermittent network connectivity")
    (description
      "Documentation at https://melpa.org/#/network-watch")
    (license #f)))

(define-public emacs-neuron-mode
  (package
    (name "emacs-neuron-mode")
    (version "20220718.827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/felko/neuron-mode.git")
               (commit
                 "33bc73f9a2ef1c6855bb12fec08e15a8cf4a6c6e")))
        (sha256
          (base32
            "0pkwnrqyf1h6cdrkh1351qmds9pzr3rka3d8gyf5h3k9prg67rfl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-markdown-mode
            emacs-company))
    (home-page
      "https://github.com/felko/neuron-mode")
    (synopsis
      "Major mode for editing zettelkasten notes using neuron")
    (description
      "Documentation at https://melpa.org/#/neuron-mode")
    (license #f)))

(define-public emacs-never-comment
  (package
    (name "emacs-never-comment")
    (version "20140104.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/To1ne/never-comment.git")
               (commit
                 "74ded8f1e7f23240f5f6032d0451fb0a51733bc4")))
        (sha256
          (base32
            "0p00mmid04pfsna4ify3cy0b9lx431q1r5h772hihsg4f1rs2ppy"))))
    (build-system melpa-build-system)
    (home-page
      "http://stackoverflow.com/a/4554658/89376")
    (synopsis "Never blocks are comment")
    (description
      "Documentation at https://melpa.org/#/never-comment")
    (license #f)))

(define-public emacs-newlisp-mode
  (package
    (name "emacs-newlisp-mode")
    (version "20160226.1545")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kosh04/newlisp-mode.git")
               (commit
                 "ac23be40c81a360988ab803d365f1510733f6db4")))
        (sha256
          (base32
            "1zzsfyqwj1k4zh30gl491ipavr9pp9djwjq3zz2q3xh7jys68w8r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kosh04/newlisp-mode")
    (synopsis "newLISP editing mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/newlisp-mode")
    (license #f)))

(define-public emacs-newspeak-mode
  (package
    (name "emacs-newspeak-mode")
    (version "20211011.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielsz/newspeak-mode.git")
               (commit
                 "7ae89edd0f72c2dc005933fada5ddaf48ec97dd6")))
        (sha256
          (base32
            "0fnl27phpmdgg3ja2jpm846x1pq47fqi3yjngxr32fag86hjamvw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danielsz/newspeak-mode")
    (synopsis
      "Major mode for the Newspeak programming language")
    (description
      "Documentation at https://melpa.org/#/newspeak-mode")
    (license #f)))

(define-public emacs-nexus
  (package
    (name "emacs-nexus")
    (version "20220902.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-nexus.git")
               (commit
                 "9f0ddf7d6cb5f7df44f684f02e2bd8a96ecabbd6")))
        (sha256
          (base32
            "0gm895ilmq3ra3zhps3kyh3isqi9r0rnfa1km6gkpny5f28ipjhr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "REST Client for Nexus Maven Repository servers")
    (description
      "Documentation at https://melpa.org/#/nexus")
    (license #f)))

(define-public emacs-nezburn-theme
  (package
    (name "emacs-nezburn-theme")
    (version "20230726.600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lanjoni/nezburn.git")
               (commit
                 "696fdcb47139fd54329638c6358f198b5e421228")))
        (sha256
          (base32
            "1hw8w38rkrrz0snkj2vsyad54l2gl7p4lrkv57crfryxwrnvvv1b"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/lanjoni/nezburn")
    (synopsis
      "A low contrast color theme for Emacs (inspired by zenburn).")
    (description
      "Documentation at https://melpa.org/#/nezburn-theme")
    (license #f)))

(define-public emacs-ng2-mode
  (package
    (name "emacs-ng2-mode")
    (version "20201203.1925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/ng2-mode.git")
               (commit
                 "d341f177c6e4fb9d99b8639943ab5fc9184e2715")))
        (sha256
          (base32
            "0pz4aj2625m7khqnbpl3h3wh7iwrnzyk61f0qw8w3b4i44fc14h2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-typescript-mode))
    (home-page
      "http://github.com/AdamNiederer/ng2-mode")
    (synopsis "Major modes for editing Angular 2")
    (description
      "Documentation at https://melpa.org/#/ng2-mode")
    (license #f)))

(define-public emacs-nginx-mode
  (package
    (name "emacs-nginx-mode")
    (version "20170612.437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajc/nginx-mode.git")
               (commit
                 "6e9d96f58eddd69f62f7fd443d9b9753e16e0e96")))
        (sha256
          (base32
            "188m43zv5hidm5xfykfxhrk0nl9i6kcgpqqqnshhiv82c55g46w4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "major mode for editing nginx config files")
    (description
      "Documentation at https://melpa.org/#/nginx-mode")
    (license #f)))

(define-public emacs-niceify-info
  (package
    (name "emacs-niceify-info")
    (version "20160416.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaron-em/niceify-info.el.git")
               (commit
                 "38df5062bc3b99d1074cab3e788b5ed66732111c")))
        (sha256
          (base32
            "0hgrf628ris94pmvmgibkq6zmwrqkv9q70c5a2gsbdpqmfikj8m1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "improve usability of Info pages")
    (description
      "Documentation at https://melpa.org/#/niceify-info")
    (license #f)))

(define-public emacs-nickel-mode
  (package
    (name "emacs-nickel-mode")
    (version "20230707.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickel-lang/nickel-mode.git")
               (commit
                 "8b7828892341bbca789723d487546905ca443dc3")))
        (sha256
          (base32
            "06327va6dybljw4qvz7p30qndnwl18nblai04y689p8x4a69kgxq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickel-lang/nickel-mode")
    (synopsis
      "A major mode for editing Nickel source code")
    (description
      "Documentation at https://melpa.org/#/nickel-mode")
    (license #f)))

(define-public emacs-niconama
  (package
    (name "emacs-niconama")
    (version "20170910.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NOBUTOKA/niconama.el.git")
               (commit
                 "96e7553e50e6bf7b58aac50f52c9b0b8edb41c56")))
        (sha256
          (base32
            "1gihjzwl6309vgav5z7jzi8jb7is8vx8lr23kb6h373gwws4bi10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/NOBUTOKA/niconama.el")
    (synopsis "Tools for Niconico Live Broadcast")
    (description
      "Documentation at https://melpa.org/#/niconama")
    (license #f)))

(define-public emacs-night-owl-theme
  (package
    (name "emacs-night-owl-theme")
    (version "20200622.1943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronjensen/night-owl-emacs.git")
               (commit
                 "4b9b5cb4fead9c5f145ba399d172c7e6bf577121")))
        (sha256
          (base32
            "0hkjy8qnpjwqc6c8zczb68s7kg5cx8wq9067rvwx4hraxv1bjqmm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aaronjensen/night-owl-theme")
    (synopsis
      "A color theme for the night owls out there")
    (description
      "Documentation at https://melpa.org/#/night-owl-theme")
    (license #f)))

(define-public emacs-nikki
  (package
    (name "emacs-nikki")
    (version "20210228.428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/th994/nikki.git")
               (commit
                 "b2ea20d04a061df88d72bd8dd0412a6e7876458d")))
        (sha256
          (base32
            "0a4kv2zb6wmacfjsihzr1ac6rsynay30zl2qiyzv21js6wmrwn9c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/th994/nikki")
    (synopsis "A simple diary mode")
    (description
      "Documentation at https://melpa.org/#/nikki")
    (license #f)))

(define-public emacs-nikola
  (package
    (name "emacs-nikola")
    (version "20170703.2021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/drymerisnothere/nikola-el.git")
               (commit
                 "964715ac30943c9d6976999cad208dc60d09def0")))
        (sha256
          (base32
            "0b0bpw9r2xi1avzq76pl58bbk1shb57d3bmzd9d53d07gj5c9399"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      ": https://git.daemons.it/drymer/nikola.el")
    (synopsis "Simple wrapper for nikola")
    (description
      "Documentation at https://melpa.org/#/nikola")
    (license #f)))

(define-public emacs-nim-mode
  (package
    (name "emacs-nim-mode")
    (version "20231101.1342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nim-lang/nim-mode.git")
               (commit
                 "1338e5b0d5e111ad932efb77d3cad680cc3b86c9")))
        (sha256
          (base32
            "1c7nx730c7fbdkjnb3ym9k3bfxjgfs3ki69ld0qam2jf5xjhl398"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-epc
            emacs-commenter
            emacs-flycheck-nimsuggest))
    (home-page
      "https://github.com/nim-lang/nim-mode")
    (synopsis
      "A major mode for the Nim programming language")
    (description
      "Documentation at https://melpa.org/#/nim-mode")
    (license #f)))

(define-public emacs-nimbus-theme
  (package
    (name "emacs-nimbus-theme")
    (version "20230611.1619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrcnski/nimbus-theme.git")
               (commit
                 "ae88d2997da80efaaece33ab7f554184ad72d962")))
        (sha256
          (base32
            "18gya6qkxqxx18rzph5rgkij5asfq88cma6z4yxdbqdgvzf7g9mf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrcnski/nimbus-theme")
    (synopsis "Nimbus dark theme")
    (description
      "Documentation at https://melpa.org/#/nimbus-theme")
    (license #f)))

(define-public emacs-ninja-mode
  (package
    (name "emacs-ninja-mode")
    (version "20230421.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ninja-build/ninja.git")
               (commit
                 "36843d387cb0621c1a288179af223d4f1410be73")))
        (sha256
          (base32
            "1qkf5qf9xzybyd3llj6dxm485kmb37l95ng4cmassxh1k85ds8jx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("misc/*.el")))
    (home-page "unspecified")
    (synopsis "Major mode for editing .ninja files")
    (description
      "Documentation at https://melpa.org/#/ninja-mode")
    (license #f)))

(define-public emacs-nix-buffer
  (package
    (name "emacs-nix-buffer")
    (version "20180212.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shlevy/nix-buffer.git")
               (commit
                 "db57cda36e7477bdc7ef5a136357b971b1d4d099")))
        (sha256
          (base32
            "0b01b4l9c70sad5r5py5hvg7s6k6idwwp0pv3rn8rj0fq5wlyixj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/shlevy/nix-buffer/tree/master/")
    (synopsis "Set up buffer environments with nix")
    (description
      "Documentation at https://melpa.org/#/nix-buffer")
    (license #f)))

(define-public emacs-nix-env-install
  (package
    (name "emacs-nix-env-install")
    (version "20200812.1305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/nix-env-install.git")
               (commit
                 "79c34bc117ba1cebeb67fab32c364951d2ec37a0")))
        (sha256
          (base32
            "12f16pfki1jwnw1ghdsqcrb11039njffl9hz3aa7sflwr95g2pbb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/akirak/nix-env-install")
    (synopsis "Install packages using nix-env")
    (description
      "Documentation at https://melpa.org/#/nix-env-install")
    (license #f)))

(define-public emacs-nix-haskell-mode
  (package
    (name "emacs-nix-haskell-mode")
    (version "20190615.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matthewbauer/nix-haskell-mode.git")
               (commit
                 "68efbcbf949a706ecca6409506968ed2ef928a20")))
        (sha256
          (base32
            "1zv3sj3pgc2chv3880nyixvdmpw9sm4h153xw7gm26v2yhhkfdnn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-haskell-mode emacs-nix-mode))
    (home-page
      "https://github.com/matthewbauer/nix-haskell")
    (synopsis "haskell-mode integrations for Nix")
    (description
      "Documentation at https://melpa.org/#/nix-haskell-mode")
    (license #f)))

(define-public emacs-nix-mode
  (package
    (name "emacs-nix-mode")
    (version "20230421.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NixOS/nix-mode.git")
               (commit
                 "719feb7868fb567ecfe5578f6119892c771ac5e5")))
        (sha256
          (base32
            "1i2yh8wgn97q9hwaihznb5d7jql9acdjyj5q375gqwpq144g3xjv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit-section))
    (arguments
      '(#:files
        (:defaults
          (:exclude "nix-company.el" "nix-mode-mmm.el"))))
    (home-page "https://github.com/NixOS/nix-mode")
    (synopsis "Major mode for editing .nix files")
    (description
      "Documentation at https://melpa.org/#/nix-mode")
    (license #f)))

(define-public emacs-nix-modeline
  (package
    (name "emacs-nix-modeline")
    (version "20210405.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocelot-project/nix-modeline.git")
               (commit
                 "ecda866b960321bb82deac26af45918e172ef0ba")))
        (sha256
          (base32
            "1yq1lyg4ix45n4cbqml36grmk6v1ici6dpdvr5yy56lv2zxbjrc4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ocelot-project/nix-modeline")
    (synopsis
      "Info about in-progress Nix evaluations on your modeline")
    (description
      "Documentation at https://melpa.org/#/nix-modeline")
    (license #f)))

(define-public emacs-nix-sandbox
  (package
    (name "emacs-nix-sandbox")
    (version "20210325.1622")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (arguments '(#:files ("nix-sandbox.el")))
    (home-page
      "https://github.com/travisbhartwell/nix-emacs")
    (synopsis
      "Utility functions to work with nix-shell sandboxes")
    (description
      "Documentation at https://melpa.org/#/nix-sandbox")
    (license #f)))

(define-public emacs-nix-ts-mode
  (package
    (name "emacs-nix-ts-mode")
    (version "20231107.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remi-gelinas/nix-ts-mode.git")
               (commit
                 "2dddc6e9ca33be211675afca3896fd661fc38a0c")))
        (sha256
          (base32
            "1a7l7r44v1ysz63k6dzn8sqbn90yaqp36crjzl3q56j8lx5f8rih"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remi-gelinas/nix-ts-mode")
    (synopsis
      "Major mode for Nix expressions, powered by tree-sitter")
    (description
      "Documentation at https://melpa.org/#/nix-ts-mode")
    (license #f)))

(define-public emacs-nix-update
  (package
    (name "emacs-nix-update")
    (version "20220816.2212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/nix-update-el.git")
               (commit
                 "aab70a38165575a9cb41726f1cc67df60fbf2832")))
        (sha256
          (base32
            "01cc86wvlwl5sy758vcjhwwh1has4ng6sqyrsd5y610qahs8cbib"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jwiegley/nix-update-el")
    (synopsis
      "Update \"fetch\" blocks in .nix expressions")
    (description
      "Documentation at https://melpa.org/#/nix-update")
    (license #f)))

(define-public emacs-nixos-options
  (package
    (name "emacs-nixos-options")
    (version "20160209.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisbhartwell/nix-emacs.git")
               (commit
                 "053a2d5110ce05b7f99bcc2ac4804b70cbe87916")))
        (sha256
          (base32
            "05vxac2llww4ba5w0dmf0hza60l5i847hfabs0q5i8kzmw4f8s8z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("nixos-options.el")))
    (home-page
      "http://www.github.com/travisbhartwell/nix-emacs/")
    (synopsis
      "Interface for browsing and completing NixOS options.")
    (description
      "Documentation at https://melpa.org/#/nixos-options")
    (license #f)))

(define-public emacs-nixpkgs-fmt
  (package
    (name "emacs-nixpkgs-fmt")
    (version "20200327.2302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/emacs-nixpkgs-fmt.git")
               (commit
                 "0df268136d14f27770fa5bb3bdb991e987337cf4")))
        (sha256
          (base32
            "137hvv9ry2h5975v06x22bdirdn7ms0gv216wkz6y68897k7hv3p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/purcell/emacs-nixpkgs-fmt")
    (synopsis "Reformat Nix using nixpkgs-fmt")
    (description
      "Documentation at https://melpa.org/#/nixpkgs-fmt")
    (license #f)))

(define-public emacs-nndiscourse
  (package
    (name "emacs-nndiscourse")
    (version "20230705.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/nndiscourse.git")
               (commit
                 "2874a49bb4f6d0326fe9c85b7b41f4b1f576c05c")))
        (sha256
          (base32
            "1nn6whvfn4lx41wyzrly1jf82aqbl70prwis5kpmjdaqbla3dh8a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-anaphora
            emacs-rbenv
            emacs-json-rpc))
    (arguments
      '(#:files
        ("nndiscourse.el"
         ("nndiscourse"
          "nndiscourse/Gemfile"
          "nndiscourse/Gemfile.lock"
          "nndiscourse/nndiscourse.gemspec"
          "nndiscourse/nndiscourse.thor"
          "nndiscourse/lib"))))
    (home-page
      "https://github.com/dickmao/nndiscourse")
    (synopsis "Gnus backend for Discourse")
    (description
      "Documentation at https://melpa.org/#/nndiscourse")
    (license #f)))

(define-public emacs-nnhackernews
  (package
    (name "emacs-nnhackernews")
    (version "20230705.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/nnhackernews.git")
               (commit
                 "4c13d261bf660901d5ff63a7ee170097ebe464ed")))
        (sha256
          (base32
            "08z81m25lh1basmq5w8w1sg284dfck3nzlcnv1cbj4fr2qqncvyn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash emacs-anaphora))
    (home-page
      "https://github.com/dickmao/nnhackernews")
    (synopsis "Gnus backend for Hacker News")
    (description
      "Documentation at https://melpa.org/#/nnhackernews")
    (license #f)))

(define-public emacs-nnir-est
  (package
    (name "emacs-nnir-est")
    (version "20180710.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/nnir-est.git")
               (commit
                 "6d0d5c8e33f4e4ccbc22350324c0990d2676fb5a")))
        (sha256
          (base32
            "1xmv2mddhvcvnyndpyv42gl8zn5dx7lvd03pl43bjp38srn4aj6g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kawabata/nnir-est")
    (synopsis
      "Gnus nnir interface for HyperEstraier")
    (description
      "Documentation at https://melpa.org/#/nnir-est")
    (license #f)))

(define-public emacs-nnreddit
  (package
    (name "emacs-nnreddit")
    (version "20230705.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/nnreddit.git")
               (commit
                 "7bb466aef038fd6e1d3155c7b33953dbe24fab48")))
        (sha256
          (base32
            "1ip77j11smj1d6nja5ixhdxzs9lkl8jhid8kvplqcrm8sv1cddn9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-anaphora
            emacs-dash
            emacs-json-rpc
            emacs-virtualenvwrapper
            emacs-s))
    (arguments
      '(#:files
        (:defaults
          "setup.py"
          "requirements.txt"
          "nnreddit")))
    (home-page "https://github.com/dickmao/nnreddit")
    (synopsis "Gnus Backend For Reddit")
    (description
      "Documentation at https://melpa.org/#/nnreddit")
    (license #f)))

(define-public emacs-nntwitter
  (package
    (name "emacs-nntwitter")
    (version "20230705.1110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dickmao/nntwitter.git")
               (commit
                 "a7e6419bfee1543e1299b51e26ee51a0d03190a8")))
        (sha256
          (base32
            "0am99zbrdj1w8ywdpnwiymrk46nlg89di6kv0nm7mwnra0v6079d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-anaphora emacs-request))
    (home-page
      "https://github.com/dickmao/nntwitter")
    (synopsis "Gnus Backend For Twitter")
    (description
      "Documentation at https://melpa.org/#/nntwitter")
    (license #f)))

(define-public emacs-no-clown-fiesta-theme
  (package
    (name "emacs-no-clown-fiesta-theme")
    (version "20230220.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ranmaru22/no-clown-fiesta-theme.el.git")
               (commit
                 "c01bfda4f5ea838e6774b77358fc4f1ec04ce612")))
        (sha256
          (base32
            "1mmygncv1dh9zwgmmix48x6k31qg3pljv8qx5a0zxdqalla3acd9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://github.com/ranmaru22/no-clown-fiesta-theme.el")
    (synopsis "Not-so-colorful-theme")
    (description
      "Documentation at https://melpa.org/#/no-clown-fiesta-theme")
    (license #f)))

(define-public emacs-no-emoji
  (package
    (name "emacs-no-emoji")
    (version "20180515.1837")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ecraven/no-emoji.git")
               (commit
                 "ebceeab50dbfe4d60235180a57633745dbc18c77")))
        (sha256
          (base32
            "19wni50073dwspppx0xlryagg2fgg0jiz5kqf1b1wmaq8xn5b8r9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ecraven/no-emoji")
    (synopsis
      "Show :emoji-name: instead of emoji characters")
    (description
      "Documentation at https://melpa.org/#/no-emoji")
    (license #f)))

(define-public emacs-no-littering
  (package
    (name "emacs-no-littering")
    (version "20231024.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacscollective/no-littering.git")
               (commit
                 "1fb3271e991fb941e8cc480beff74000e3a08a3a")))
        (sha256
          (base32
            "0ahlri3hlkrlmm6bh094ays6qrw9yd02rghq0hgin006817r8pqz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/emacscollective/no-littering")
    (synopsis "Help keeping ~/.config/emacs clean")
    (description
      "Documentation at https://melpa.org/#/no-littering")
    (license #f)))

(define-public emacs-no-spam
  (package
    (name "emacs-no-spam")
    (version "20190724.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mamapanda/no-spam.git")
               (commit
                 "860860e4a0d59bd15c8e092dc42f5f7f769a428e")))
        (sha256
          (base32
            "00xrbgh0pw6apm51lyvwdlc8rlkb2i713cclibaqffi18qz5z6kf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mamapanda/no-spam")
    (synopsis "Add repeat delays to commands")
    (description
      "Documentation at https://melpa.org/#/no-spam")
    (license #f)))

(define-public emacs-noaa
  (package
    (name "emacs-noaa")
    (version "20230904.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomp/noaa.git")
               (commit
                 "04da1d3467d08cd1d28539c2b132035a9fb1c793")))
        (sha256
          (base32
            "19rqq2j367yvxdfrrkflicp1p7swf23kxya82kpb84zd7z1vn85z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-kv emacs-request emacs-s))
    (home-page "https://github.com/thomp/noaa")
    (synopsis "Get NOAA weather data")
    (description
      "Documentation at https://melpa.org/#/noaa")
    (license #f)))

(define-public emacs-noccur
  (package
    (name "emacs-noccur")
    (version "20191015.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/noccur.el.git")
               (commit
                 "fa91647a305e89561d3dbe53da002fff49abe0bb")))
        (sha256
          (base32
            "0slyy7qadc06cij7lgk7d36ym54dyh9a7vjdc38ysr1nh8g7agvm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Run multi-occur on project/dired files")
    (description
      "Documentation at https://melpa.org/#/noccur")
    (license #f)))

(define-public emacs-nocomments-mode
  (package
    (name "emacs-nocomments-mode")
    (version "20170213.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/nocomments-mode.git")
               (commit
                 "5a41a20cc44dfe4a9ea584354ed6dbc15dd92f46")))
        (sha256
          (base32
            "0jwwnypa0lx812p3dqqn9c05g27qavnvr23pzphydx9i15nz80g0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/nocomments-mode")
    (synopsis
      "Minor mode that makes comments invisible.")
    (description
      "Documentation at https://melpa.org/#/nocomments-mode")
    (license #f)))

(define-public emacs-noctilux-theme
  (package
    (name "emacs-noctilux-theme")
    (version "20161113.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sjrmanning/noctilux-theme.git")
               (commit
                 "a3265a1be7f4d73f44acce6d968ca6f7add1f2ca")))
        (sha256
          (base32
            "12xx0v8d97kjvlkj0ii78vxxvzgmcfc4hzv4yvxymg50rsy0zzqi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sjrmanning/noctilux-theme")
    (synopsis "Dark theme inspired by LightTable")
    (description
      "Documentation at https://melpa.org/#/noctilux-theme")
    (license #f)))

(define-public emacs-node-resolver
  (package
    (name "emacs-node-resolver")
    (version "20140930.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meandavejustice/node-resolver.el.git")
               (commit
                 "ef9d0486907a746a80b02ffc6208a09c168a9f7c")))
        (sha256
          (base32
            "1cgmq00ackabwcl4h0n2bb8y08wz0ir5rzca2q3sk4asly6d02m7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/meandavejustice/node-resolver.el")
    (synopsis
      "hook to install node modules in background")
    (description
      "Documentation at https://melpa.org/#/node-resolver")
    (license #f)))

(define-public emacs-nodejs-repl
  (package
    (name "emacs-nodejs-repl")
    (version "20200802.1310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abicky/nodejs-repl.el.git")
               (commit
                 "3b841055cad00f442e4a9159b1056f59411b6646")))
        (sha256
          (base32
            "0371lz9378x3vjj2kqir89sjy0l5d5j6ha5yz1381nkh15dcww15"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Run Node.js REPL")
    (description
      "Documentation at https://melpa.org/#/nodejs-repl")
    (license #f)))

(define-public emacs-nodemcu-mode
  (package
    (name "emacs-nodemcu-mode")
    (version "20180501.2225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrmuel/nodemcu-mode.git")
               (commit
                 "8effd9f3df40b6b92a2f05e4d54750b624afc4a7")))
        (sha256
          (base32
            "1s19sshsm4cdx8kj5prmsq8ryz4843xcqmdayvlfl99jxsp9j4pm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andrmuel/nodemcu-mode")
    (synopsis "Minor mode for NodeMCU")
    (description
      "Documentation at https://melpa.org/#/nodemcu-mode")
    (license #f)))

(define-public emacs-noflet
  (package
    (name "emacs-noflet")
    (version "20141102.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-noflet.git")
               (commit
                 "7ae84dc3257637af7334101456dafe1759c6b68a")))
        (sha256
          (base32
            "0g70gnmfi8n24jzfci9nrj0n9bn1qig7b8f9f325rin8h7x32ypf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicferrier/emacs-noflet")
    (synopsis "locally override functions")
    (description
      "Documentation at https://melpa.org/#/noflet")
    (license #f)))

(define-public emacs-nofrils-acme-theme
  (package
    (name "emacs-nofrils-acme-theme")
    (version "20180620.1248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/esessoms/nofrils-theme.git")
               (commit
                 "98ad7bfaff1d85b33dc162645670285b067c6f92")))
        (sha256
          (base32
            "0f8s7mhcs1ym4an8d4dabfvhin30xs2d0c5gv875hsgz8p3asgxs"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/esessoms/nofrils-theme")
    (synopsis "Port of \"No Frils Acme\" Vim theme.")
    (description
      "Documentation at https://melpa.org/#/nofrils-acme-theme")
    (license #f)))

(define-public emacs-noir-mode
  (package
    (name "emacs-noir-mode")
    (version "20230726.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hhamud/noir-mode.git")
               (commit
                 "aa6686e15a63498af327cc64f1d79e84c60bda42")))
        (sha256
          (base32
            "0awlk9bfdj0cpfmnh4pjlgbbaadh00rcp41rns69q09nlnmaxsk0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rust-mode))
    (home-page "https://github.com/hhamud/noir-mode")
    (synopsis "Description")
    (description
      "Documentation at https://melpa.org/#/noir-mode")
    (license #f)))

(define-public emacs-noir-ts-mode
  (package
    (name "emacs-noir-ts-mode")
    (version "20230827.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hhamud/noir-ts-mode.git")
               (commit
                 "4b70b7299a7b1e7bcceed21fda4095242c17396c")))
        (sha256
          (base32
            "0l541ksrxrrxzv0cy66zx996xr1y462827vnn8vhn8rbwanaa0jq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hhamud/noir-ts-mode")
    (synopsis "tree-sitter support for Noir")
    (description
      "Documentation at https://melpa.org/#/noir-ts-mode")
    (license #f)))

(define-public emacs-non-edit-mode
  (package
    (name "emacs-non-edit-mode")
    (version "20230926.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aragaer/non-edit-mode.git")
               (commit
                 "bc9d29e437d70675c725f3ef8a66abe574b9a142")))
        (sha256
          (base32
            "1nqxw9s41ln91gjrglrbyhqasakgk0542ymhbwivw9l19yyizmaz"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aragaer/non-edit-mode")
    (synopsis "Minor mode that disables editing")
    (description
      "Documentation at https://melpa.org/#/non-edit-mode")
    (license #f)))

(define-public emacs-nord-theme
  (package
    (name "emacs-nord-theme")
    (version "20230311.1131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nordtheme/emacs.git")
               (commit
                 "15dadfbe3bb99241a73192578983baee9dd60400")))
        (sha256
          (base32
            "1janl7y6vvc5dbkyj75syy3d2ss0syxdgx1r1zcnp9dji34bpis8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nordtheme/emacs")
    (synopsis
      "An arctic, north-bluish clean and elegant theme")
    (description
      "Documentation at https://melpa.org/#/nord-theme")
    (license #f)))

(define-public emacs-nordic-night-theme
  (package
    (name "emacs-nordic-night-theme")
    (version "20230831.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~ashton314/nordic-night")
               (commit
                 "38020ebac496992a4b41bc721db9c28962e5b7df")))
        (sha256
          (base32
            "0h07sflfvxkgc9w7jdfmvarrgdgr95sbki4az7b6n0kpzzps1s1f"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~ashton314/nordic-night/")
    (synopsis
      "A darker, more colorful version of the lovely Nord theme")
    (description
      "Documentation at https://melpa.org/#/nordic-night-theme")
    (license #f)))

(define-public emacs-nordless-theme
  (package
    (name "emacs-nordless-theme")
    (version "20201222.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~lthms/colorless-themes.el")
               (commit
                 "c1ed1e12541cf05cc6c558d23c089c07e10b54d7")))
        (sha256
          (base32
            "02ai9yf7h3i81bg01w8nb4kdrcc94ladbrkw9vg3p40w617mjwlb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-colorless-themes))
    (arguments '(#:files ("nordless-theme.el")))
    (home-page
      "https://git.sr.ht/~lthms/colorless-themes.el")
    (synopsis
      "A mostly colorless version of nord-theme")
    (description
      "Documentation at https://melpa.org/#/nordless-theme")
    (license #f)))

(define-public emacs-norns
  (package
    (name "emacs-norns")
    (version "20230820.2157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/norns.el.git")
               (commit
                 "ee93fed031d6e53fc81fe4916f796a30a920a66d")))
        (sha256
          (base32
            "0c1p9zk29vf5mzg2j6qgzmdk2nsvk7mzpln2j9xz9al99vfrqn8p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-request
            emacs-websocket
            emacs-lua-mode))
    (home-page "https://github.com/p3r7/norns.el")
    (synopsis
      "Interactive development environment for monome norns")
    (description
      "Documentation at https://melpa.org/#/norns")
    (license #f)))

(define-public emacs-northcode-theme
  (package
    (name "emacs-northcode-theme")
    (version "20180423.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Northcode/northcode-theme.el.git")
               (commit
                 "4d3750461ba25ec45321318b5f1af4e8fdf16147")))
        (sha256
          (base32
            "1yin5i38jdp47k6b7mc0jkv9ihl8nk5rpqin4qmwbhb871zxn7ma"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Northcode/northcode-theme.el")
    (synopsis
      "A dark theme focused on blue and orange colors.")
    (description
      "Documentation at https://melpa.org/#/northcode-theme")
    (license #f)))

(define-public emacs-nothing-theme
  (package
    (name "emacs-nothing-theme")
    (version "20200504.402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaredgorski/nothing.el.git")
               (commit
                 "d2514bb9707f66dda0d60f40f465e79914c50946")))
        (sha256
          (base32
            "1gy3zis9swkriynaq4xc8mc3xiihak0hi718pckbkxwjmnrfyvc0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jaredgorski/nothing.el")
    (synopsis "Monochrome theme")
    (description
      "Documentation at https://melpa.org/#/nothing-theme")
    (license #f)))

(define-public emacs-notink-theme
  (package
    (name "emacs-notink-theme")
    (version "20220114.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MetroWind/notink-theme.git")
               (commit
                 "6115857fe75c1adbbce4165a2b77a11a271aaf31")))
        (sha256
          (base32
            "07gr1apbhd4kli2g0ld4yzpsc9hvkrh054b2dk47l2p9d1ki1j7g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MetroWind/notink-theme")
    (synopsis
      "A custom theme inspired by e-ink displays")
    (description
      "Documentation at https://melpa.org/#/notink-theme")
    (license #f)))

(define-public emacs-notmuch
  (package
    (name "emacs-notmuch")
    (version "20231006.2337")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.notmuchmail.org/git/notmuch")
               (commit
                 "bc9a58d75b2373467ff3727a97317ba5b803be67")))
        (sha256
          (base32
            "19srq3k9684wh994kzjsiyfzqnr6xgk1daavarinvrxjj2k1225v"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("emacs/*.el" "emacs/*.svg")))
    (home-page "https://notmuchmail.org")
    (synopsis "run notmuch within emacs")
    (description
      "Documentation at https://melpa.org/#/notmuch")
    (license #f)))

(define-public emacs-notmuch-addr
  (package
    (name "emacs-notmuch-addr")
    (version "20230511.2057")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/notmuch-addr-"
               version
               ".tar"))
        (sha256
          (base32
            "0p29q8w7mds29lqpsvz04h8c73ci9l90mi8ngja1v6hfv1ncfjp3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/notmuch-addr")
    (synopsis "An alternative to notmuch-address.el")
    (description
      "Documentation at https://melpa.org/#/notmuch-addr")
    (license #f)))

(define-public emacs-notmuch-bookmarks
  (package
    (name "emacs-notmuch-bookmarks")
    (version "20230727.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/publicimageltd/notmuch-bookmarks.git")
               (commit
                 "7c053fd2d278dc3a9f07f86975867bfbb4e7448d")))
        (sha256
          (base32
            "1azg565r94h7qaxsv5qsc2x11clhsvlb49ssn06ashh2my9xxxj7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-notmuch))
    (home-page
      "https://github.com/publicimageltd/notmuch-bookmarks")
    (synopsis
      "Add bookmark handling for notmuch buffers")
    (description
      "Documentation at https://melpa.org/#/notmuch-bookmarks")
    (license #f)))

(define-public emacs-notmuch-labeler
  (package
    (name "emacs-notmuch-labeler")
    (version "20131230.1719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/notmuch-labeler.git")
               (commit
                 "d65d1129555d368243df4770ecc1e7ccb88efc58")))
        (sha256
          (base32
            "1ss87vlp7625lnn2iah3rc1xfxcbpx4kmiww9n16jx073fs2rj18"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-notmuch))
    (home-page
      "https://github.com/DamienCassou/notmuch-labeler")
    (synopsis
      "Improve notmuch way of displaying labels")
    (description
      "Documentation at https://melpa.org/#/notmuch-labeler")
    (license #f)))

(define-public emacs-notmuch-maildir
  (package
    (name "emacs-notmuch-maildir")
    (version "20230511.2056")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/notmuch-maildir-"
               version
               ".tar"))
        (sha256
          (base32
            "0v2nfcfday6603wzz7fcykdcyz76h192maz4whr56a102d98ybvx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/notmuch-maildir")
    (synopsis "Visualize maildirs as a tree")
    (description
      "Documentation at https://melpa.org/#/notmuch-maildir")
    (license #f)))

(define-public emacs-notmuch-transient
  (package
    (name "emacs-notmuch-transient")
    (version "20230917.1004")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/notmuch-transient-"
               version
               ".tar"))
        (sha256
          (base32
            "10nfaizamx8h91v4r46x1y51qp4d0a0bdnlmlqy6yx46zb91yvlp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/notmuch-transient")
    (synopsis "Command dispatchers for Notmuch")
    (description
      "Documentation at https://melpa.org/#/notmuch-transient")
    (license #f)))

(define-public emacs-nova-theme
  (package
    (name "emacs-nova-theme")
    (version "20230906.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muirmanders/emacs-nova-theme.git")
               (commit
                 "ca1a4cb71452ece3e18c0c46f9e7abc20f7123ca")))
        (sha256
          (base32
            "1gi1zbgbwjlw7sd8433xplg1zm9a7kp8i4y76b4vfn0g5ybhvqcz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muirmanders/emacs-nova-theme")
    (synopsis "A dark, pastel color theme")
    (description
      "Documentation at https://melpa.org/#/nova-theme")
    (license #f)))

(define-public emacs-noxml-fold
  (package
    (name "emacs-noxml-fold")
    (version "20170823.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paddymcall/noXML-fold.git")
               (commit
                 "46c7f6a008672213238a9f8d7a416ce80916aa62")))
        (sha256
          (base32
            "0axr7n4wdrd009lz6sg4y9ggf4f5svgrsclwhs0hyn2ld34rvrax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paddymcall/noxml-fold")
    (synopsis "Fold away XML things.")
    (description
      "Documentation at https://melpa.org/#/noxml-fold")
    (license #f)))

(define-public emacs-npm
  (package
    (name "emacs-npm")
    (version "20220428.927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shaneikennedy/npm.el.git")
               (commit
                 "6eb0a58274870dd75bf848cf5a916a9f2c6ddae5")))
        (sha256
          (base32
            "1shl3ixvbfs84cw62dh0xzc0kacpbvrg49qnbkyvk9kn91x6k9c1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jest))
    (home-page
      "https://github.com/shaneikennedy/npm.el")
    (synopsis "Run your npm workflows")
    (description
      "Documentation at https://melpa.org/#/npm")
    (license #f)))

(define-public emacs-npm-mode
  (package
    (name "emacs-npm-mode")
    (version "20190616.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mojochao/npm-mode.git")
               (commit
                 "3ee7c0bad5b7a041d4739ef3aaa06a3dc764e5eb")))
        (sha256
          (base32
            "06axwqxdj3damn93l6asn6mnzqrfndc10s7wp1z3nbv9j5yjm35x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mojochao/npm-mode")
    (synopsis
      "minor mode for working with npm projects")
    (description
      "Documentation at https://melpa.org/#/npm-mode")
    (license #f)))

(define-public emacs-nrepl-eval-sexp-fu
  (package
    (name "emacs-nrepl-eval-sexp-fu")
    (version "20201007.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/samaaron/nrepl-eval-sexp-fu.git")
               (commit
                 "2d6ad728b1ba290974a2ae1f232a5a96810a135b")))
        (sha256
          (base32
            "0prm2iyahvrm1ngkq3vxz21g2pzvrz60dl7g4yrs683vbmys7b0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-highlight emacs-smartparens))
    (home-page "unspecified")
    (synopsis
      "Tiny functionality enhancements for evaluating sexps.")
    (description
      "Documentation at https://melpa.org/#/nrepl-eval-sexp-fu")
    (license #f)))

(define-public emacs-nrepl-sync
  (package
    (name "emacs-nrepl-sync")
    (version "20140807.1557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/lein-sync.git")
               (commit
                 "bab53a2361526d63a24cda176d07a1247bf5b399")))
        (sha256
          (base32
            "1129r3rzmfbl8nxjz71xnlyaszhhldawj467zbl36brdadp014n1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider))
    (arguments '(#:files ("emacs/nrepl-sync.el")))
    (home-page
      "https://github.com/phillord/lein-sync")
    (synopsis
      "connect to nrepl port and eval .sync.clj.")
    (description
      "Documentation at https://melpa.org/#/nrepl-sync")
    (license #f)))

(define-public emacs-ns-auto-titlebar
  (package
    (name "emacs-ns-auto-titlebar")
    (version "20181022.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ns-auto-titlebar.git")
               (commit
                 "60273e764bf8d95abc40dd2fdc23af87ea9ee33b")))
        (sha256
          (base32
            "0cr0y0mflqr434223rfwlzzp2zdaddqymsrysbsrbv3qhh157sk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/ns-auto-titlebar")
    (synopsis
      "Set the MacOS transparent titlebar to match theme")
    (description
      "Documentation at https://melpa.org/#/ns-auto-titlebar")
    (license #f)))

(define-public emacs-nsis-mode
  (package
    (name "emacs-nsis-mode")
    (version "20230619.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/nsis-mode.git")
               (commit
                 "b5ae66dbab9b2d933a234bdcd28e017d44a1276f")))
        (sha256
          (base32
            "0vq2sm593ib44bqcgnmn99zbvq89v3r2znw9fdybp95a948xk105"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mlf176f2/nsis-mode")
    (synopsis "NSIS-mode")
    (description
      "Documentation at https://melpa.org/#/nsis-mode")
    (license #f)))

(define-public emacs-nswbuff
  (package
    (name "emacs-nswbuff")
    (version "20230311.154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/nswbuff.git")
               (commit
                 "dfea30e33ddb212a0d537bc927b4bcdf3ebe2cd1")))
        (sha256
          (base32
            "0nnrqgd3mwq2r8lxwsbs43a8y027maq4rm1dpavq1bk168jpmphh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joostkremers/nswbuff")
    (synopsis "Quick switching between buffers.")
    (description
      "Documentation at https://melpa.org/#/nswbuff")
    (license #f)))

(define-public emacs-nu-mode
  (package
    (name "emacs-nu-mode")
    (version "20190404.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pyluyten/emacs-nu.git")
               (commit
                 "d5fb4d26d1b0bb383ea2827cc5af5dfb2a269d2b")))
        (sha256
          (base32
            "0nd7ypin9kl784iqffznld6kknghdjywqnjw5nwinfgkwhcrjpdd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-undo-tree
            emacs-ace-window
            emacs-lv
            emacs-avy
            emacs-which-key
            emacs-transpose-frame))
    (arguments
      '(#:files ("nu-mode/nu-*.el" "doc/nu-mode.info")))
    (home-page "unspecified")
    (synopsis
      "Modern Emacs Prompts Based Keybinding.")
    (description
      "Documentation at https://melpa.org/#/nu-mode")
    (license #f)))

(define-public emacs-nubox
  (package
    (name "emacs-nubox")
    (version "20170619.910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martijnat/nubox.git")
               (commit
                 "1ccb8035ae42727ba6bdd5c1106fbceddeeed370")))
        (sha256
          (base32
            "02yh99rcgxdq6jn4xs8782nl6bjccmal8j78qslvpkrzrrxjajx6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Nubox color theme (dark, light and tty versions)")
    (description
      "Documentation at https://melpa.org/#/nubox")
    (license #f)))

(define-public emacs-number
  (package
    (name "emacs-number")
    (version "20170901.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisdone/number.git")
               (commit
                 "bbc278d34dbcca83e70e3be855ec98b23debfb99")))
        (sha256
          (base32
            "0a1r352zs58mdwkq58561qxrz3m5rwk3xqcaaqhkxc0h9jqs4a9r"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Working with numbers at point.")
    (description
      "Documentation at https://melpa.org/#/number")
    (license #f)))

(define-public emacs-number-lock
  (package
    (name "emacs-number-lock")
    (version "20160830.200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Liu233w/number-lock.el.git")
               (commit
                 "74417b1238953bf485961a0dd7d20f5c36ae25ea")))
        (sha256
          (base32
            "0xmd4q2k0psd53cg71vsyc54iiq0wp9bs00ch68561lrnbjg043w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Liu233w/number-lock.el")
    (synopsis
      "Enter symbols on your number keys without pressing shift")
    (description
      "Documentation at https://melpa.org/#/number-lock")
    (license #f)))

(define-public emacs-numbers
  (package
    (name "emacs-numbers")
    (version "20170802.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/numbers.el.git")
               (commit
                 "dd02508b788a13b7d4dbcc4923fa23134b783ab3")))
        (sha256
          (base32
            "0bgha85j5f9lpk1h3siiw28v5sy6z52n7d7xi3m301r9hdlccc39"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/numbers.el")
    (synopsis
      "Display information and trivia about numbers")
    (description
      "Documentation at https://melpa.org/#/numbers")
    (license #f)))

(define-public emacs-numbex
  (package
    (name "emacs-numbex")
    (version "20230601.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enricoflor/numbex.git")
               (commit
                 "b64f51388726363fc0d154219e2270c6b9c5ce19")))
        (sha256
          (base32
            "1mamlgfn6vjmx1lclvjggxw5ra4ivyq4ks0mnd1lw6zy8fpbwfb9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/enricoflor/numbex")
    (synopsis "Manage numbered examples")
    (description
      "Documentation at https://melpa.org/#/numbex")
    (license #f)))

(define-public emacs-numpydoc
  (package
    (name "emacs-numpydoc")
    (version "20230811.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/douglasdavis/numpydoc.el.git")
               (commit
                 "77e2893442c6e20af9c99b9ba2c6c11988fe0e80")))
        (sha256
          (base32
            "03mfvgb1kbz0a90app8gsp8h2s0qhizdkrzafxp0pwmppxiaadg2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/douglasdavis/numpydoc.el")
    (synopsis "NumPy style docstring insertion")
    (description
      "Documentation at https://melpa.org/#/numpydoc")
    (license #f)))

(define-public emacs-nushell-mode
  (package
    (name "emacs-nushell-mode")
    (version "20230612.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/nushell-mode.git")
               (commit
                 "7fd1840ce726473fe22fe484fa25596031799edc")))
        (sha256
          (base32
            "0vla77x2jrg84wxhl3bkiwzh2yz7v5nwjzxsf1crrzq34ya52j4g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrkkrp/nushell-mode")
    (synopsis "Major mode for Nushell scripts")
    (description
      "Documentation at https://melpa.org/#/nushell-mode")
    (license #f)))

(define-public emacs-nushell-ts-mode
  (package
    (name "emacs-nushell-ts-mode")
    (version "20230911.152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/herbertjones/nushell-ts-mode.git")
               (commit
                 "e07ecc59762fab8d5fa35bc6d3f522f74e580a2f")))
        (sha256
          (base32
            "0v94ywl203gpd1ix86hrnywdcs430lmm2p26887yws7k3sk5310b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/herbertjones/nushell-ts-mode")
    (synopsis "Tree-sitter support for Nushell")
    (description
      "Documentation at https://melpa.org/#/nushell-ts-mode")
    (license #f)))

(define-public emacs-nv-delete-back
  (package
    (name "emacs-nv-delete-back")
    (version "20170224.1249")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/nivaca/nv-delete-back.git")
               (commit
                 "b17cb826f14c18c2875d112574edb5e4f46f5296")))
        (sha256
          (base32
            "1g030806d2l238sr173ypdkkq0g8kf8qdp7a1ls5d3rw0bng4ds1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "backward delete like modern text editors")
    (description
      "Documentation at https://melpa.org/#/nv-delete-back")
    (license #f)))

(define-public emacs-nvm
  (package
    (name "emacs-nvm")
    (version "20210826.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/nvm.el.git")
               (commit
                 "c214762fd6f539ec3e1fd8198cefbdb4b428b19c")))
        (sha256
          (base32
            "0xcb2k98ka7lks7k0mk9inmjpyz03v8aq64a24pj635xp54x3iah"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/nvm.el")
    (synopsis "Manage Node versions within Emacs")
    (description
      "Documentation at https://melpa.org/#/nvm")
    (license #f)))

(define-public emacs-nxml-uxml
  (package
    (name "emacs-nxml-uxml")
    (version "20220606.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/dpk/nxml-uxml.git")
               (commit
                 "95bbd0018ab218b9f39f5bf1f1e809f60fbc3edc")))
        (sha256
          (base32
            "10rah19x3pnvksi7ikji36i5bci9jhh6xjqlv6cn6xm7fdwrrkd8"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/dpk/nxml-uxml")
    (synopsis "MicroXML support for nXML")
    (description
      "Documentation at https://melpa.org/#/nxml-uxml")
    (license #f)))

(define-public emacs-nyan-mode
  (package
    (name "emacs-nyan-mode")
    (version "20220408.2334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TeMPOraL/nyan-mode.git")
               (commit
                 "09904af23adb839c6a9c1175349a1fb67f5b4370")))
        (sha256
          (base32
            "03xp4dvq3y3q9xyb6pm9m5gb756rvbxcqk52ind08n7prqv4w1lp"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("nyan-mode.el" "img" "mus")))
    (home-page
      "https://github.com/TeMPOraL/nyan-mode/")
    (synopsis
      "Nyan Cat shows position in current buffer in mode-line")
    (description
      "Documentation at https://melpa.org/#/nyan-mode")
    (license #f)))

(define-public emacs-nyx-theme
  (package
    (name "emacs-nyx-theme")
    (version "20170910.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/emacs-nyx-theme.git")
               (commit
                 "afe2b8c3b5421b4c292d182dcf77079b278e93d8")))
        (sha256
          (base32
            "1qamw4x3yrygy8qkicy6smxksnsfkkp76hlnivswh7dm3fr23v6m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GuidoSchmidt/emacs-nyx-theme")
    (synopsis "Dark theme")
    (description
      "Documentation at https://melpa.org/#/nyx-theme")
    (license #f)))

(define-public emacs-oauth
  (package
    (name "emacs-oauth")
    (version "20230706.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fvdbeek/emacs-oauth.git")
               (commit
                 "737f4058b3239261cf7c95043034b95f1ce3b282")))
        (sha256
          (base32
            "05xfpgk4swss89n3wrk0cg87ngsv06szpam7svncf4c2gjs9gkxa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fvdbeek/emacs-oauth")
    (synopsis "OAuth 1.0 client library")
    (description
      "Documentation at https://melpa.org/#/oauth")
    (license #f)))

(define-public emacs-oauth2-request
  (package
    (name "emacs-oauth2-request")
    (version "20210215.657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/oauth2-request.el.git")
               (commit
                 "86ff048635e002b00e23d6bed2ec6f36c17bca8e")))
        (sha256
          (base32
            "0z9vkssdxkikwjcb3vrby5dfcixy4lw9r2jp7g9nls6w88l184jf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-oauth2 emacs-request))
    (home-page
      "https://github.com/conao3/oauth2-request.el")
    (synopsis "OAuth2 request package interface")
    (description
      "Documentation at https://melpa.org/#/oauth2-request")
    (license #f)))

(define-public emacs-ob-ada-spark
  (package
    (name "emacs-ob-ada-spark")
    (version "20221114.2007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/ob-ada-spark.git")
               (commit
                 "92978410ca14aa4e84c229a0920ad40be91c35e1")))
        (sha256
          (base32
            "1ry81c9cqagfk35nrm1m5q3ph23fx9pawy03sldjvjgcy7pgimzw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/rocher/ob-ada-spark")
    (synopsis "Babel functions for Ada & SPARK")
    (description
      "Documentation at https://melpa.org/#/ob-ada-spark")
    (license #f)))

(define-public emacs-ob-applescript
  (package
    (name "emacs-ob-applescript")
    (version "20190709.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stig/ob-applescript.el.git")
               (commit
                 "2b07b77b75bd02f2102f62e6d52ffdd0f921439a")))
        (sha256
          (base32
            "0ya3ab4qcpm95bw50srf0p0673lzyvwyp0ccqy3akmqz9apsd4rs"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/stig/ob-applescript.el")
    (synopsis "Org-babel functions for AppleScript")
    (description
      "Documentation at https://melpa.org/#/ob-applescript")
    (license #f)))

(define-public emacs-ob-async
  (package
    (name "emacs-ob-async")
    (version "20210428.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astahlman/ob-async.git")
               (commit
                 "9aac486073f5c356ada20e716571be33a350a982")))
        (sha256
          (base32
            "0k0jcha7cckj8dc2cc1a6m2yhagsl5bmlnr3p8x3g8ij1axk533h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-dash))
    (home-page
      "https://github.com/astahlman/ob-async")
    (synopsis
      "Asynchronous org-babel src block execution")
    (description
      "Documentation at https://melpa.org/#/ob-async")
    (license #f)))

(define-public emacs-ob-axiom
  (package
    (name "emacs-ob-axiom")
    (version "20220612.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/pdo/axiom-environment")
               (commit
                 "01d88daa0c864af9918db5a147fbb5e435dec199")))
        (sha256
          (base32
            "03cxb6zdqmzgjp8r6hcirf8xl772j7xqk2nw17gjkn4xqbwfyn62"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-axiom-environment))
    (arguments '(#:files ("ob-axiom.el")))
    (home-page "unspecified")
    (synopsis
      "An org-babel backend for the axiom-environment system")
    (description
      "Documentation at https://melpa.org/#/ob-axiom")
    (license #f)))

(define-public emacs-ob-bitfield
  (package
    (name "emacs-ob-bitfield")
    (version "20220401.600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gsingh93/ob-bitfield.git")
               (commit
                 "28e01448ee66b8b6858294cad1b7dae0b9a85e6a")))
        (sha256
          (base32
            "16j2f54ys401q8h4hj4qvd0z7fqwk2lnfi8995sgvs00xnx2wdzk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gsingh93/ob-bitfield")
    (synopsis "Babel Functions for bitfield")
    (description
      "Documentation at https://melpa.org/#/ob-bitfield")
    (license #f)))

(define-public emacs-ob-blockdiag
  (package
    (name "emacs-ob-blockdiag")
    (version "20210412.1541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/corpix/ob-blockdiag.el.git")
               (commit
                 "c3794bf7bdb8fdb3db90db41619dda4e7d3dd7b9")))
        (sha256
          (base32
            "14lw5y8djl9ff71layshz4rrmknp4kisv9lak26d9lh1l2z69fi6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/corpix/ob-blockdiag.el")
    (synopsis
      "org-babel functions for blockdiag evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-blockdiag")
    (license #f)))

(define-public emacs-ob-browser
  (package
    (name "emacs-ob-browser")
    (version "20170720.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/ob-browser.git")
               (commit
                 "a347d9df1c87b7eb660be8723982c7ad2563631a")))
        (sha256
          (base32
            "0q2amf2kh2gkn65132q9nvn87pws5mmnr3wm1ajk23c01kcjf29c"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.js" "*.el")))
    (home-page
      "https://github.com/krisajenkins/ob-browser")
    (synopsis "Render HTML in org-mode blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-browser")
    (license #f)))

(define-public emacs-ob-cfengine3
  (package
    (name "emacs-ob-cfengine3")
    (version "20230226.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickanderson/ob-cfengine3.git")
               (commit
                 "52aa32fdfa412860837e795d17d50dac237e56e4")))
        (sha256
          (base32
            "1gskkxm3ah8x5flhwzf6x4i7v75fzls20g20bg6r8xranyp7av8v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nickanderson/ob-cfengine3")
    (synopsis "Org Babel functions for CFEngine 3")
    (description
      "Documentation at https://melpa.org/#/ob-cfengine3")
    (license #f)))

(define-public emacs-ob-chatgpt-shell
  (package
    (name "emacs-ob-chatgpt-shell")
    (version "20231109.914")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/chatgpt-shell.git")
               (commit
                 "58bb4d8eb9218be4925201a39596387d160f4593")))
        (sha256
          (base32
            "1mqwc2wkz2ax4pzi76vqq59v4qjwp221sw4nw91nr6zbk5ws1780"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-chatgpt-shell))
    (arguments '(#:files ("ob-chatgpt-shell.el")))
    (home-page
      "https://github.com/xenodium/chatgpt-shell")
    (synopsis
      "Org babel functions for ChatGPT evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-chatgpt-shell")
    (license #f)))

(define-public emacs-ob-clojurescript
  (package
    (name "emacs-ob-clojurescript")
    (version "20180406.1828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/statonjr/ob-clojurescript.git")
               (commit
                 "17ee1558aa94c7b0246fd03f684884122806cfe7")))
        (sha256
          (base32
            "1an4m7mpr345xw4fanyf2vznxm1dxbv35987caq1wq9039mzfaxr"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/statonjr/ob-clojurescript")
    (synopsis
      "org-babel functions for ClojureScript evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-clojurescript")
    (license #f)))

(define-public emacs-ob-coffee
  (package
    (name "emacs-ob-coffee")
    (version "20170725.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-coffee.git")
               (commit
                 "7f0b330273e8af7777de87a75fe52a89798e4548")))
        (sha256
          (base32
            "1w3fw3ka46d7vcsdq03l0wlviwsk52asfjiy9zfk4qabhpqwj9mz"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "repl.js")))
    (home-page
      "http://github.com/zweifisch/ob-coffee")
    (synopsis
      "org-babel functions for coffee-script evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-coffee")
    (license #f)))

(define-public emacs-ob-coffeescript
  (package
    (name "emacs-ob-coffeescript")
    (version "20180126.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/ob-coffeescript.git")
               (commit
                 "5a5bb04aea9c2a6eab5b05f90f5c7cb6de7b4261")))
        (sha256
          (base32
            "0yy20w1127xmz0mx2swbr294vg0jh8g0ibj5bpdf55xwdnv6im2l"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ob-coffeescript.el")))
    (home-page
      "https://github.com/brantou/ob-coffeescript")
    (synopsis
      "org-babel functions for coffee-script evaluation, and fully implementation!")
    (description
      "Documentation at https://melpa.org/#/ob-coffeescript")
    (license #f)))

(define-public emacs-ob-compile
  (package
    (name "emacs-ob-compile")
    (version "20220830.315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/ob-compile.git")
               (commit
                 "9a16b3dd0f467c091e91944b90a2ca3d646d6617")))
        (sha256
          (base32
            "0ajs108ib4g57sik31m81hw6ln11gcyrx96x4f1d6hx73c8i8nk7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TxGVNN/ob-compile")
    (synopsis "Run compile by org-babel")
    (description
      "Documentation at https://melpa.org/#/ob-compile")
    (license #f)))

(define-public emacs-ob-crystal
  (package
    (name "emacs-ob-crystal")
    (version "20180126.718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/ob-crystal.git")
               (commit
                 "d84c1adee4b269cdba06a97caedb8071561a09af")))
        (sha256
          (base32
            "1fny4fj4407lcp4k3379gbixk3wd171snw49p1kny2mvxrliz22h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brantou/ob-crystal")
    (synopsis
      "org-babel functions for Crystal evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-crystal")
    (license #f)))

(define-public emacs-ob-cypher
  (package
    (name "emacs-ob-cypher")
    (version "20200521.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-cypher.git")
               (commit
                 "da9f97339474a48d759fc128cee610c0bc9ae6c0")))
        (sha256
          (base32
            "0r4dsbrdxhyyh708pm8fqn423v21xk7a940nbajw9y07n28y5hgk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-cypher-mode
            emacs-dash
            emacs-dash-functional))
    (home-page
      "http://github.com/zweifisch/ob-cypher")
    (synopsis
      "query neo4j using cypher in org-mode blocks")
    (description
      "Documentation at https://melpa.org/#/ob-cypher")
    (license #f)))

(define-public emacs-ob-d2
  (package
    (name "emacs-ob-d2")
    (version "20230314.352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xcapaldi/ob-d2.git")
               (commit
                 "5d197f8225a9fb4da997235b231abe30049c6825")))
        (sha256
          (base32
            "00iv5zj4zi6h8c8jgs8hxh2cp2nfm3aavjjizd322nmrn6yxf160"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xcapaldi/ob-d2")
    (synopsis "Org-babel functions for d2")
    (description
      "Documentation at https://melpa.org/#/ob-d2")
    (license #f)))

(define-public emacs-ob-dall-e-shell
  (package
    (name "emacs-ob-dall-e-shell")
    (version "20231109.913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/chatgpt-shell.git")
               (commit
                 "58bb4d8eb9218be4925201a39596387d160f4593")))
        (sha256
          (base32
            "1mqwc2wkz2ax4pzi76vqq59v4qjwp221sw4nw91nr6zbk5ws1780"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dall-e-shell))
    (arguments '(#:files ("ob-dall-e-shell.el")))
    (home-page
      "https://github.com/xenodium/chatgpt-shell")
    (synopsis
      "Org babel functions for DALL-E evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-dall-e-shell")
    (license #f)))

(define-public emacs-ob-dao
  (package
    (name "emacs-ob-dao")
    (version "20170816.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/ob-dao.git")
               (commit
                 "fa92f62a63c684d689f57e790e5dd614c5bba270")))
        (sha256
          (base32
            "18i2qwxcn5p1hj32svl54n0dv2j551n3nmgb4h8gbvs39rl49qkq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/ob-dao")
    (synopsis "Org Babel Functions for Dao")
    (description
      "Documentation at https://melpa.org/#/ob-dao")
    (license #f)))

(define-public emacs-ob-dart
  (package
    (name "emacs-ob-dart")
    (version "20221201.633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mzimmerm/ob-dart.git")
               (commit
                 "f6d5664d5cc8b15e002f6899f8adedcb10ced5f1")))
        (sha256
          (base32
            "0zlr12sk2821fsjblhxgj6l5wwrb75w7asdqvc0d92jcjjhjl7r6"))))
    (build-system melpa-build-system)
    (home-page "http://github.org/mzimmerm/ob-dart")
    (synopsis
      "Evaluate Dart source blocks in org-mode")
    (description
      "Documentation at https://melpa.org/#/ob-dart")
    (license #f)))

(define-public emacs-ob-deno
  (package
    (name "emacs-ob-deno")
    (version "20201019.101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taiju/ob-deno.git")
               (commit
                 "f1129d20fe9931f1c0b62c4af781f5489abd957f")))
        (sha256
          (base32
            "0wcrv423rzb5zwl36acpxjimxkxxy52z789rhhyq8vvfid1873ij"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/taiju/ob-deno")
    (synopsis
      "Babel Functions for Javascript/TypeScript with Deno")
    (description
      "Documentation at https://melpa.org/#/ob-deno")
    (license #f)))

(define-public emacs-ob-diagrams
  (package
    (name "emacs-ob-diagrams")
    (version "20160407.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bergey/org-babel-diagrams.git")
               (commit
                 "ed6649616325ca5b2d2109f74aded8bcb8aa5186")))
        (sha256
          (base32
            "0kx95lvkvg6h6lhs9knlp8rwi05y8y0i8w8vs7mwm378syls0qk0"))))
    (build-system melpa-build-system)
    (home-page "http://orgmode.org")
    (synopsis
      "org-babel functions for diagrams evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-diagrams")
    (license #f)))

(define-public emacs-ob-drawtiming
  (package
    (name "emacs-ob-drawtiming")
    (version "20230312.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/perfab71/ob-drawtiming.git")
               (commit
                 "813736e20ce1c223700c87a6e70e3f126a11e933")))
        (sha256
          (base32
            "1fdq7jsbjz1kwpm0fyyv506yzlicbqap34hmclj1dcwwszhx3k0y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/perfab71/ob-drawtiming")
    (synopsis
      "Functions for drawtiming evaluation in org-babel")
    (description
      "Documentation at https://melpa.org/#/ob-drawtiming")
    (license #f)))

(define-public emacs-ob-dsq
  (package
    (name "emacs-ob-dsq")
    (version "20220915.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/ob-dsq.git")
               (commit
                 "e001b263af87993755319caefaf5d19e196e4e1b")))
        (sha256
          (base32
            "0x6s58fqka5by7mr6w1xqx788han6wrmd0y2xi4sbpk4nyknld4x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/ob-dsq")
    (synopsis
      "Babel functions for the `dsq` CLI tool by Multiprocess Labs")
    (description
      "Documentation at https://melpa.org/#/ob-dsq")
    (license #f)))

(define-public emacs-ob-elixir
  (package
    (name "emacs-ob-elixir")
    (version "20170725.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-elixir.git")
               (commit
                 "8990a8178b2f7bd93504a9ab136622aab6e82e32")))
        (sha256
          (base32
            "19awvfbjsnd5la14ad8cfd20pdwwlf3d2wxmz7kz6x6rf48x38za"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zweifisch/ob-elixir")
    (synopsis
      "org-babel functions for elixir evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-elixir")
    (license #f)))

(define-public emacs-ob-elm
  (package
    (name "emacs-ob-elm")
    (version "20200528.1857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BonfaceKilz/ob-elm.git")
               (commit
                 "d3a9fbc2f56416894c9aed65ea9a20cc1d98f15d")))
        (sha256
          (base32
            "1wdlr0cbsb2drdmcn2bnivjkj1f2v52l6yizwsnjgi4xq3w6k56h"))))
    (build-system melpa-build-system)
    (home-page "https://www.bonfacemunyoki.com")
    (synopsis
      "Org-babel functions for elm evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-elm")
    (license #f)))

(define-public emacs-ob-elvish
  (package
    (name "emacs-ob-elvish")
    (version "20180427.1900")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzamboni/ob-elvish.git")
               (commit
                 "369181ceae1190bf971c71aebf9fc6133bd98c39")))
        (sha256
          (base32
            "170bw9qryhzjzmyi84qc1jkzy1y7i8sjz6vmvyfc264ia4j51m9w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zzamboni/ob-elvish")
    (synopsis "org-babel functions for Elvish shell")
    (description
      "Documentation at https://melpa.org/#/ob-elvish")
    (license #f)))

(define-public emacs-ob-ess-julia
  (package
    (name "emacs-ob-ess-julia")
    (version "20210414.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/frederic-santos/ob-ess-julia.git")
               (commit
                 "147e9e7fe55c41dd77171417e92af40db3530b84")))
        (sha256
          (base32
            "00wplflc4pp0ffhnkya19cqm3ihz8mybfj2ywk3ii2d9x08kjnp3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-julia-mode))
    (arguments '(#:files ("*.el" "*.jl")))
    (home-page
      "https://github.com/frederic-santos/ob-ess-julia")
    (synopsis "Org babel support for Julia language")
    (description
      "Documentation at https://melpa.org/#/ob-ess-julia")
    (license #f)))

(define-public emacs-ob-ffuf
  (package
    (name "emacs-ob-ffuf")
    (version "20221004.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daniel-ts/ob-ffuf.git")
               (commit
                 "5310a3e766a252ac34f8cb2307c4e48e982f5611")))
        (sha256
          (base32
            "1sm56xiyd626zqqw55c4qwa9s6n9pnqr5942f3fgdwgj0bimx8dz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/daniel-ts/ob-ffuf")
    (synopsis "Babel functions for ffuf")
    (description
      "Documentation at https://melpa.org/#/ob-ffuf")
    (license #f)))

(define-public emacs-ob-fricas
  (package
    (name "emacs-ob-fricas")
    (version "20220612.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pdo/frimacs.git")
               (commit
                 "742268f6f05f418993dc366bbca9ccc931125748")))
        (sha256
          (base32
            "1axljc9kcsy8ps719jpcyy1hy4djfra970bx5mqavpzxx1q3k4i6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-frimacs))
    (arguments '(#:files ("extras/ob-fricas.el")))
    (home-page "https://github.com/pdo/frimacs")
    (synopsis "A FriCAS backend for Org-Babel")
    (description
      "Documentation at https://melpa.org/#/ob-fricas")
    (license #f)))

(define-public emacs-ob-fsharp
  (package
    (name "emacs-ob-fsharp")
    (version "20221113.1904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/ob-fsharp.git")
               (commit
                 "a5e893a88d47bd8ea01cf456331ce54910321b47")))
        (sha256
          (base32
            "0ag3jib93ncwnmxa90b74alrcqwrr3g8zsw2cc30gb2pgh1hikwb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fsharp-mode))
    (home-page
      "https://github.com/juergenhoetzel/ob-fsharp")
    (synopsis "Org-Babel F#")
    (description
      "Documentation at https://melpa.org/#/ob-fsharp")
    (license #f)))

(define-public emacs-ob-git-permalink
  (package
    (name "emacs-ob-git-permalink")
    (version "20220627.46")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kijimaD/ob-git-permalink.git")
               (commit
                 "14224327a6b34c804b0e90d37b80630a80c56c0a")))
        (sha256
          (base32
            "16xjma3n24clbiyf2vw13sy3nz902wigj6pd965d50acmihd5z4a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kijimaD/ob-git-permalink")
    (synopsis "Import GitHub code given a permalink")
    (description
      "Documentation at https://melpa.org/#/ob-git-permalink")
    (license #f)))

(define-public emacs-ob-go
  (package
    (name "emacs-ob-go")
    (version "20190201.2040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pope/ob-go.git")
               (commit
                 "2067ed55f4c1d33a43cb3f6948609d240a8915f5")))
        (sha256
          (base32
            "069w9dymiv97cvlpzabf193nyw174r38lz5j11x23x956ladvpbw"))))
    (build-system melpa-build-system)
    (home-page "http://orgmode.org")
    (synopsis
      "org-babel functions for go evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-go")
    (license #f)))

(define-public emacs-ob-graphql
  (package
    (name "emacs-ob-graphql")
    (version "20201222.1515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdormit/ob-graphql.git")
               (commit
                 "7c35419f9eec5dc44967cbcfa13c7135b9a96bfc")))
        (sha256
          (base32
            "07syadvvdjrxbsgwil2pqcji2rznm64pz0cqb0d4g7kjbxby37gw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-graphql-mode emacs-request))
    (home-page
      "https://github.com/jdormit/ob-graphql")
    (synopsis
      "Org-Babel execution backend for GraphQL source blocks")
    (description
      "Documentation at https://melpa.org/#/ob-graphql")
    (license #f)))

(define-public emacs-ob-html-chrome
  (package
    (name "emacs-ob-html-chrome")
    (version "20181219.1042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nikclayton/ob-html-chrome.git")
               (commit
                 "7af6e4a24ed0aaf67751bdf752c7ca0ba02bb8d4")))
        (sha256
          (base32
            "0h33y11921ajw60b4hqpg0nvdvx3w3cia90wf53c5zg2bckcrfjh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "http://github.com/nikclayton/ob-html-chrome")
    (synopsis
      "HTML code blocks converted to PNG using Chrome")
    (description
      "Documentation at https://melpa.org/#/ob-html-chrome")
    (license #f)))

(define-public emacs-ob-http
  (package
    (name "emacs-ob-http")
    (version "20180707.1448")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-http.git")
               (commit
                 "b1428ea2a63bcb510e7382a1bf5fe82b19c104a7")))
        (sha256
          (base32
            "11fx9c94xxhl09nj9z5b5v6sm0xwkqawgjnnm7bg56vvj495n6h7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "http://github.com/zweifisch/ob-http")
    (synopsis "http request in org-mode babel")
    (description
      "Documentation at https://melpa.org/#/ob-http")
    (license #f)))

(define-public emacs-ob-hy
  (package
    (name "emacs-ob-hy")
    (version "20180702.540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brantou/ob-hy.git")
               (commit
                 "a42ecaf440adc03e279afe43ee5ef6093ddd542a")))
        (sha256
          (base32
            "0kv92r6j0dcqcg1s0g4iq1xvanscg6crwniysbrq6ifvmc4lvfdj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/brantou/ob-hy")
    (synopsis
      "org-babel functions for Hy-lang evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-hy")
    (license #f)))

(define-public emacs-ob-ipython
  (package
    (name "emacs-ob-ipython")
    (version "20180224.953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregsexton/ob-ipython.git")
               (commit
                 "7147455230841744fb5b95dcbe03320313a77124")))
        (sha256
          (base32
            "1a10fc2jk37ni5sjjvf87s5nyaz2a6h2mlj5dxh4dhv5sd3bb85p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-dash-functional
            emacs-f))
    (arguments '(#:files (:defaults "*.py")))
    (home-page "http://www.gregsexton.org")
    (synopsis
      "org-babel functions for IPython evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-ipython")
    (license #f)))

(define-public emacs-ob-julia-vterm
  (package
    (name "emacs-ob-julia-vterm")
    (version "20230815.2332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shg/ob-julia-vterm.el.git")
               (commit
                 "22f8825185231654397ae31e2a586ec39f98ab6f")))
        (sha256
          (base32
            "1pvb602lrgrncbzqly9ga0rzxvlypysqzp2njf808jipdd9b2bja"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-julia-vterm emacs-queue))
    (home-page
      "https://github.com/shg/ob-julia-vterm.el")
    (synopsis
      "Babel functions for Julia that work with julia-vterm")
    (description
      "Documentation at https://melpa.org/#/ob-julia-vterm")
    (license #f)))

(define-public emacs-ob-kotlin
  (package
    (name "emacs-ob-kotlin")
    (version "20180823.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-kotlin.git")
               (commit
                 "96e420cbd2e9ea8a77043e5dcaebdfc6da17492a")))
        (sha256
          (base32
            "0ganip7077rsi681kdsrmvpjhinhgsrla34mll0daiqid7flnk4g"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zweifisch/ob-kotlin")
    (synopsis
      "org-babel functions for kotlin evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-kotlin")
    (license #f)))

(define-public emacs-ob-latex-as-png
  (package
    (name "emacs-ob-latex-as-png")
    (version "20200629.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/ob-latex-as-png.git")
               (commit
                 "a20e3fedbac4034de4ab01436673a0f8845de1df")))
        (sha256
          (base32
            "0dgygnh12izr92k28ygjhhpz0jx6vkrskbiplk87fkg1w8hyiy2a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alhassy/ob-latex-as-png")
    (synopsis
      "Org-babel functions for latex-as-png evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-latex-as-png")
    (license #f)))

(define-public emacs-ob-lesim
  (package
    (name "emacs-ob-lesim")
    (version "20230619.357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drghirlanda/ob-lesim.git")
               (commit
                 "37e15f610783ff12926b5d221cefb4a49b4d54d6")))
        (sha256
          (base32
            "0kw4w4x2sd803zg7pg7i0sbj3fc43rdvrgi4mjkrfmg9z35j862x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lesim-mode))
    (home-page
      "https://github.com/drghirlanda/ob-lesim")
    (synopsis "Org-babel functions for lesim-mode")
    (description
      "Documentation at https://melpa.org/#/ob-lesim")
    (license #f)))

(define-public emacs-ob-lfe
  (package
    (name "emacs-ob-lfe")
    (version "20170725.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-lfe.git")
               (commit
                 "f7780f58e650b4d29dfd834c662b1d354b620a8e")))
        (sha256
          (base32
            "1ricvb2wxsmsd4jr0301pk30mswx41msy07fjgwhsq8dimxzmngp"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zweifisch/ob-lfe")
    (synopsis
      "org-babel functions for lfe evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-lfe")
    (license #f)))

(define-public emacs-ob-lurk
  (package
    (name "emacs-ob-lurk")
    (version "20221122.2058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lurk-lang/lurk-emacs.git")
               (commit
                 "bd7cf661ccb31bfbfab542018c361bd79064d4f4")))
        (sha256
          (base32
            "0nrh517q7czfdr637qkv2j5mifd7wrdj0fzkfvbn8pz6s8fj0av1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lurk-mode))
    (arguments '(#:files ("ob-lurk.el")))
    (home-page
      "http://github.com/lurk-lang/lurk-emacs")
    (synopsis
      "Evaluate lurk code blocks in org mode")
    (description
      "Documentation at https://melpa.org/#/ob-lurk")
    (license #f)))

(define-public emacs-ob-mermaid
  (package
    (name "emacs-ob-mermaid")
    (version "20200320.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arnm/ob-mermaid.git")
               (commit
                 "cca09b64eff689d8bb15a77de9d4c7fe9845a1f9")))
        (sha256
          (base32
            "1wwmf14df2rnxlfs8bwb9p4q1a1plschbq2g9vqflphj6kv213m4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/arnm/ob-mermaid")
    (synopsis
      "org-babel support for mermaid evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-mermaid")
    (license #f)))

(define-public emacs-ob-ml-marklogic
  (package
    (name "emacs-ob-ml-marklogic")
    (version "20190312.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndw/ob-ml-marklogic.git")
               (commit
                 "d5660ad14f29e17cd26ae92eeb585b24030e9570")))
        (sha256
          (base32
            "1aqllsn965km3796q92w3a3z92hkpm5i0l6p4fm3va9xq7j79cyc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/ndw/ob-ml-marklogic")
    (synopsis
      "org-babel functions for MarkLogic evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-ml-marklogic")
    (license #f)))

(define-public emacs-ob-mongo
  (package
    (name "emacs-ob-mongo")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/ob-mongo.git")
               (commit
                 "371bf19c7c10eab2f86424f8db8ab685997eb5aa")))
        (sha256
          (base32
            "02k4gvh1nqhn0h36h77vvms7xwwak8rdddibbidsrwwspbr4qr1s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/krisajenkins/ob-mongo")
    (synopsis
      "Execute mongodb queries within org-mode blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-mongo")
    (license #f)))

(define-public emacs-ob-napkin
  (package
    (name "emacs-ob-napkin")
    (version "20200817.1259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pinetr2e/ob-napkin.git")
               (commit
                 "7af5e8af08da8455c489909afbd9528a61f570e7")))
        (sha256
          (base32
            "1rmfxbnl2y6yx1869sm5203k7hch481wh5dq6lik5bj00cf3knc6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pinetr2e/ob-napkin")
    (synopsis "Babel functions for Napkin")
    (description
      "Documentation at https://melpa.org/#/ob-napkin")
    (license #f)))

(define-public emacs-ob-nim
  (package
    (name "emacs-ob-nim")
    (version "20210601.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lompik/ob-nim.git")
               (commit
                 "6fd060a3ecd38be37e4ec2261cd65760a3c35a91")))
        (sha256
          (base32
            "12sinii7i917v1f3czvmc0rrwk3ksr1ls7wv4yvv9f8jdkzr0msm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Babel Functions for nim")
    (description
      "Documentation at https://melpa.org/#/ob-nim")
    (license #f)))

(define-public emacs-ob-nix
  (package
    (name "emacs-ob-nix")
    (version "20221224.334")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ob-nix-"
               version
               ".el"))
        (sha256
          (base32
            "18yg5agfz0l151wpyvvabk97klwsdgcsjcxinggqjkll5r9ksmzj"))))
    (build-system melpa-build-system)
    (home-page "https://codeberg.org/theesm/ob-nix")
    (synopsis "Simple org-babel support for nix")
    (description
      "Documentation at https://melpa.org/#/ob-nix")
    (license #f)))

(define-public emacs-ob-p5js
  (package
    (name "emacs-ob-p5js")
    (version "20230802.1613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alejandrogallo/ob-p5js.git")
               (commit
                 "6a1684a02f5baf6c433bfaf700b8c33b0f6ff12e")))
        (sha256
          (base32
            "14ks9hc6740jqx9q3rxva794r604lf2qjkqv4vag3adxan78d55a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alejandrogallo/p5js")
    (synopsis "Support for p5js in org-babel")
    (description
      "Documentation at https://melpa.org/#/ob-p5js")
    (license #f)))

(define-public emacs-ob-php
  (package
    (name "emacs-ob-php")
    (version "20220221.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/ob-php.git")
               (commit
                 "6ebf7799e9ded1d5114094f46785960a50000614")))
        (sha256
          (base32
            "1r99h49931xgqkw8hjyfw3agv8q9d87dkqnap973j4yjq36ddcw8"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/ob-php.git")
    (synopsis
      "Execute PHP within org-mode source blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-php")
    (license #f)))

(define-public emacs-ob-powershell
  (package
    (name "emacs-ob-powershell")
    (version "20221227.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rkiggen/ob-powershell.git")
               (commit
                 "e514efa7fbbdac80082761580ed23fd5ae3abc5d")))
        (sha256
          (base32
            "1rkgrylcz07y1b5iyp0xh3bmckacwkm4x399lzl97i4cnpfl67s0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rkiggen/ob-powershell")
    (synopsis
      "Run Powershell from org mode source blocks")
    (description
      "Documentation at https://melpa.org/#/ob-powershell")
    (license #f)))

(define-public emacs-ob-prolog
  (package
    (name "emacs-ob-prolog")
    (version "20190410.2130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ljos/ob-prolog.git")
               (commit
                 "331899cfe345c934026c70b78352d320f7d8e239")))
        (sha256
          (base32
            "1k34cl2whc32ysd7anvz8ii66ljfrmkvx3cgb6i42jcx74kavlfr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ljos/ob-prolog")
    (synopsis
      "org-babel functions for prolog evaluation.")
    (description
      "Documentation at https://melpa.org/#/ob-prolog")
    (license #f)))

(define-public emacs-ob-raku
  (package
    (name "emacs-ob-raku")
    (version "20221013.1938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masukomi/ob-raku.git")
               (commit
                 "21aa77a0ca70b7bef0ecf7d4d9c5272d71f0210c")))
        (sha256
          (base32
            "1bm4j40cl5mallyhxq1pi3abf09n5hsmn7ig9549802bmn8wq696"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/masukomi/ob-raku")
    (synopsis "Provides raku support for org-babel")
    (description
      "Documentation at https://melpa.org/#/ob-raku")
    (license #f)))

(define-public emacs-ob-redis
  (package
    (name "emacs-ob-redis")
    (version "20220221.1249")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/ob-redis.git")
               (commit
                 "44c83636ccbea0b3e9838b0180471905c30224c5")))
        (sha256
          (base32
            "0rm78qhjdfx1klv2gk04sm8h3vw3hdimaxfagrdc2j5nhbzxffib"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/ob-redis.git")
    (synopsis
      "Execute Redis queries within org-mode blocks.")
    (description
      "Documentation at https://melpa.org/#/ob-redis")
    (license #f)))

(define-public emacs-ob-restclient
  (package
    (name "emacs-ob-restclient")
    (version "20231027.518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alf/ob-restclient.el.git")
               (commit
                 "1a127eb0165f10bb9d33606aa8529051118805e7")))
        (sha256
          (base32
            "0fk0ly8hyhlq4vyndkmv22cx0p7cknf56j6djika1c9d4hl75ff2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-restclient))
    (home-page
      "https://github.com/alf/ob-restclient.el")
    (synopsis
      "org-babel functions for restclient-mode")
    (description
      "Documentation at https://melpa.org/#/ob-restclient")
    (license #f)))

(define-public emacs-ob-reticulate
  (package
    (name "emacs-ob-reticulate")
    (version "20210214.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jackkamm/ob-reticulate.git")
               (commit
                 "8109fb02fb6339b1cf9290df29fc0c1109a33c04")))
        (sha256
          (base32
            "1wr0acf0nhdz48n8p1q80sv0bd929n7v8ahcrx5zc7wcimbqshl1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jackkamm/ob-reticulate")
    (synopsis "Babel Functions for reticulate")
    (description
      "Documentation at https://melpa.org/#/ob-reticulate")
    (license #f)))

(define-public emacs-ob-rust
  (package
    (name "emacs-ob-rust")
    (version "20220824.1923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/micanzhang/ob-rust.git")
               (commit
                 "be059d231fafeb24a658db212a55ccdc55c0c500")))
        (sha256
          (base32
            "0r6ckhnyr824s4isz8z6hbd7ix9fyg9pha115km9pvafhcw05xdn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/micanzhang/ob-rust")
    (synopsis "Org-babel functions for Rust")
    (description
      "Documentation at https://melpa.org/#/ob-rust")
    (license #f)))

(define-public emacs-ob-sagemath
  (package
    (name "emacs-ob-sagemath")
    (version "20191106.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/ob-sagemath.git")
               (commit
                 "79645bce0c25a650bae61e550434bed836995dce")))
        (sha256
          (base32
            "134d3pz38g2ki4war1jxp5440yq5smfkdjnknz5r29p49sch0zvx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sage-shell-mode emacs-s))
    (arguments '(#:files ("ob-sagemath.el" "*.py")))
    (home-page
      "https://github.com/stakemori/ob-sagemath")
    (synopsis
      "org-babel functions for SageMath evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-sagemath")
    (license #f)))

(define-public emacs-ob-smiles
  (package
    (name "emacs-ob-smiles")
    (version "20220221.1255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/ob-smiles.git")
               (commit
                 "d178f3d4a7e3c1ca9910f0a063d2a3cfd97d8609")))
        (sha256
          (base32
            "0p31nv4haqhnh7zbmj875sw547ach8wdybmfaqqsb4vk749wq7a4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-smiles-mode))
    (home-page "https://repo.or.cz/ob-smiles.git")
    (synopsis "Org-mode Babel support for SMILES.")
    (description
      "Documentation at https://melpa.org/#/ob-smiles")
    (license #f)))

(define-public emacs-ob-sml
  (package
    (name "emacs-ob-sml")
    (version "20130829.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/swannodette/ob-sml.git")
               (commit
                 "958165c92b6cff6cada5c85c8ae5887806b8451b")))
        (sha256
          (base32
            "0gymna48igcixrapjmg842pnlsshhw8zplxwyyn0x2yrma9fjyyg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sml-mode))
    (home-page "http://orgmode.org")
    (synopsis
      "org-babel functions for template evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-sml")
    (license #f)))

(define-public emacs-ob-solidity
  (package
    (name "emacs-ob-solidity")
    (version "20220213.1910")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hrkrshnn/ob-solidity.git")
               (commit
                 "7e3e6cb2d7ec9269514e80248c7ec85c04dbbf89")))
        (sha256
          (base32
            "0zghs08558z8n7wx5r38szjhczvzyk3r7q8p107vh2v0adp0qz3d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-solidity-mode))
    (home-page
      "https://github.com/hrkrshnn/ob-solidity")
    (synopsis
      "Org-babel functions for solidity evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-solidity")
    (license #f)))

(define-public emacs-ob-spice
  (package
    (name "emacs-ob-spice")
    (version "20221030.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/ob-spice.git")
               (commit
                 "4d3ab60c2012aba2a5bd96a4d42dfeea0be6edac")))
        (sha256
          (base32
            "1q0ssiggaknc9hd7hyh8hi57sc0vm7k4lnj3yjxjvi0m4akv0qa5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-spice-mode))
    (home-page "https://repo.or.cz/ob-spice.git")
    (synopsis
      "org-babel functions for spice evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-spice")
    (license #f)))

(define-public emacs-ob-sql-mode
  (package
    (name "emacs-ob-sql-mode")
    (version "20190421.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nikclayton/ob-sql-mode.git")
               (commit
                 "b31a016585324ad91f1742ff6205bcb76f3ece6e")))
        (sha256
          (base32
            "1k2cfxaq38wv8s2x1c52v0bw55c12n399614l0dx1aqy2wh1afgi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nikclayton/ob-sql-mode")
    (synopsis
      "SQL code blocks evaluated by sql-mode")
    (description
      "Documentation at https://melpa.org/#/ob-sql-mode")
    (license #f)))

(define-public emacs-ob-svgbob
  (package
    (name "emacs-ob-svgbob")
    (version "20190911.300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgxm/ob-svgbob.git")
               (commit
                 "5747f96fb4fdb8711546b3313df9412177eb3c1a")))
        (sha256
          (base32
            "1h60mzxp1wzd1kjkgligi04nb06mpkhij8imkva188inr0hzqlvm"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mgxm/ob-svgbob")
    (synopsis "Babel Functions for svgbob")
    (description
      "Documentation at https://melpa.org/#/ob-svgbob")
    (license #f)))

(define-public emacs-ob-swift
  (package
    (name "emacs-ob-swift")
    (version "20170921.1325")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zweifisch/ob-swift.git")
               (commit
                 "ed478ddbbe41ce5373efde06b4dd0c3663c9055f")))
        (sha256
          (base32
            "1vwg10d33mwb32bpdbpghfihy3ryiqbc4yydpb5hfv3v5k83vs0x"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/zweifisch/ob-swift")
    (synopsis
      "org-babel functions for swift evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-swift")
    (license #f)))

(define-public emacs-ob-swiftui
  (package
    (name "emacs-ob-swiftui")
    (version "20231009.918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/ob-swiftui.git")
               (commit
                 "af65a8e60602ca90ab3f61811190a3da67ac0414")))
        (sha256
          (base32
            "1cyv3f4h7dj9fhlgivgh7mqgaaf7q5mxs4mmp833sh0mgk4p6vmk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-swift-mode))
    (home-page
      "https://github.com/xenodium/ob-swiftui")
    (synopsis
      "Org babel functions for SwiftUI evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-swiftui")
    (license #f)))

(define-public emacs-ob-tmux
  (package
    (name "emacs-ob-tmux")
    (version "20221005.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahendriksen/ob-tmux.git")
               (commit
                 "cb4f151554a653f8f6b22ab8edbe3420d7f5e377")))
        (sha256
          (base32
            "0mj194k45gynwkk6s9ag63ldkg6y1iw9dws2d8vi4kvvl9c63w9m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ahendriksen/ob-tmux")
    (synopsis
      "Babel Support for Interactive Terminal")
    (description
      "Documentation at https://melpa.org/#/ob-tmux")
    (license #f)))

(define-public emacs-ob-translate
  (package
    (name "emacs-ob-translate")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/ob-translate.git")
               (commit
                 "9d9054a51bafd5a29a8135964069b4fa3a80b169")))
        (sha256
          (base32
            "143dq3wp3h1zzk8ihj8yjw9ydqnf48q7y8yxxa0ly7f2v1li84bc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-google-translate))
    (home-page
      "https://github.com/krisajenkins/ob-translate")
    (synopsis
      "Translation of text blocks in org-mode.")
    (description
      "Documentation at https://melpa.org/#/ob-translate")
    (license #f)))

(define-public emacs-ob-typescript
  (package
    (name "emacs-ob-typescript")
    (version "20230523.131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lurdan/ob-typescript.git")
               (commit
                 "abf36f1f3b2476e71c63721dc907d7e6914aef3d")))
        (sha256
          (base32
            "0ninckmri06gcn1bk50phqrm35csslk5imx374jy7xjfapvajyls"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lurdan/ob-typescript")
    (synopsis
      "org-babel functions for typescript evaluation")
    (description
      "Documentation at https://melpa.org/#/ob-typescript")
    (license #f)))

(define-public emacs-ob-uart
  (package
    (name "emacs-ob-uart")
    (version "20170521.858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrmuel/ob-uart.git")
               (commit
                 "90daeac90a9e75c20cdcf71234c67b812110c50e")))
        (sha256
          (base32
            "1syxxq411izmyfrhlywasax7n5c3yjy487mvfdjzjg8csmmk0m9v"))))
    (build-system melpa-build-system)
    (home-page "https://www.0x7.ch")
    (synopsis
      "org-babel support for UART communication")
    (description
      "Documentation at https://melpa.org/#/ob-uart")
    (license #f)))

(define-public emacs-oberon
  (package
    (name "emacs-oberon")
    (version "20120715.909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/oberon.git")
               (commit
                 "fb57d18ce13835a8a69b6bafecdd9193ca9a59a3")))
        (sha256
          (base32
            "16462cgq91jg7i97h440zss5vw2qkxgdy7gm148ns4djr2fchnf6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing Oberon/Oberon-2 program texts")
    (description
      "Documentation at https://melpa.org/#/oberon")
    (license #f)))

(define-public emacs-obfusurl
  (package
    (name "emacs-obfusurl")
    (version "20170809.1524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/obfusurl.el.git")
               (commit
                 "7a5a41905000ce2ec1fd72509a5567e5fd9f47e5")))
        (sha256
          (base32
            "0jbrxlpx0cxg8jzqrssk3y3ab7v62ymi6ys24542a8vpk522vqxk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/obfusurl.el")
    (synopsis
      "Obfuscate URLs so they aren't spoilers")
    (description
      "Documentation at https://melpa.org/#/obfusurl")
    (license #f)))

(define-public emacs-objc-font-lock
  (package
    (name "emacs-objc-font-lock")
    (version "20141021.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/objc-font-lock.git")
               (commit
                 "34b457d577f97ca94b8792d025f9a909c7610612")))
        (sha256
          (base32
            "138c1nm579vr37dqprqsakfkhs2awm3klzyyd6bv9rhkrysrpbqk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/objc-font-lock")
    (synopsis "Highlight Objective-C method calls.")
    (description
      "Documentation at https://melpa.org/#/objc-font-lock")
    (license #f)))

(define-public emacs-objed
  (package
    (name "emacs-objed")
    (version "20200911.1435")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clemera/objed.git")
               (commit
                 "70f9fb5e0aa1627b0afc7c6b3d0aea9bac70a210")))
        (sha256
          (base32
            "1j9z2zj9b9yrvzmvhwqr7zrvh4rbxd62fdhn1rqv59b0jfmbcsqz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/clemera/objed")
    (synopsis "Navigate and edit text objects.")
    (description
      "Documentation at https://melpa.org/#/objed")
    (license #f)))

(define-public emacs-oblivion-theme
  (package
    (name "emacs-oblivion-theme")
    (version "20230415.551")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/oblivion-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "02fb2cick0c0mlxp7jhzzx990xji1l7kgbskbcqld0vd26mzy7z6"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-oblivion-theme")
    (synopsis "A port of GEdit oblivion theme")
    (description
      "Documentation at https://melpa.org/#/oblivion-theme")
    (license #f)))

(define-public emacs-obsidian
  (package
    (name "emacs-obsidian")
    (version "20231105.1800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/licht1stein/obsidian.el.git")
               (commit
                 "f83c5d32eba8237dedeec66c44f464019840b264")))
        (sha256
          (base32
            "1fpqc5xwqdqg4l4aifqvsr5p00997z5xdvnlnrrc1p981ifxa67c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-dash
            emacs-markdown-mode
            emacs-elgrep
            emacs-yaml))
    (home-page
      "https://github.com./licht1stein/obsidian.el")
    (synopsis "Obsidian Notes interface")
    (description
      "Documentation at https://melpa.org/#/obsidian")
    (license #f)))

(define-public emacs-obsidian-theme
  (package
    (name "emacs-obsidian-theme")
    (version "20170719.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/obsidian-theme.git")
               (commit
                 "f45efb2ebe9942466c1db6abbe2d0e6847b785ea")))
        (sha256
          (base32
            "1d36mdq8b1q1x84a2nb93bwnzlpdldiafh7q7qfjjm9dsgbij73b"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/obsidian-theme")
    (synopsis "port of the eclipse obsidian theme")
    (description
      "Documentation at https://melpa.org/#/obsidian-theme")
    (license #f)))

(define-public emacs-ocaml-ts-mode
  (package
    (name "emacs-ocaml-ts-mode")
    (version "20230820.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dmitrig/ocaml-ts-mode.git")
               (commit
                 "bb8c86bd49e4e98f41e45fb0ec82e38f90bc3ee4")))
        (sha256
          (base32
            "0wnldxq0syz54my8qdgpwmcn19alj6wk0vhbk0rv1cv6scz13yw4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dmitrig/ocaml-ts-mode")
    (synopsis
      "Major mode for OCaml using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/ocaml-ts-mode")
    (license #f)))

(define-public emacs-ocamlformat
  (package
    (name "emacs-ocamlformat")
    (version "20230915.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml-ppx/ocamlformat.git")
               (commit
                 "b1788844c29b546142d48148bb4bc222d51aa886")))
        (sha256
          (base32
            "0w4jnaai475rwcbk5wnvpf52jjqy4f5vx2s3n7sppy2q6s9iyqg7"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/ocamlformat.el")))
    (home-page
      "https://github.com/ocaml-ppx/ocamlformat")
    (synopsis
      "Utility functions to format ocaml code")
    (description
      "Documentation at https://melpa.org/#/ocamlformat")
    (license #f)))

(define-public emacs-occidental-theme
  (package
    (name "emacs-occidental-theme")
    (version "20130312.1958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/olcai/occidental-theme.git")
               (commit
                 "fd2db7256d4f78c43d99c3cddb1c39106d479816")))
        (sha256
          (base32
            "0pnliw02crqw8hbg088klz54z6s1ih8q2lcn9mq5f12xi752hxm8"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/olcai/occidental-theme")
    (synopsis
      "Custom theme for faces based on Adwaita")
    (description
      "Documentation at https://melpa.org/#/occidental-theme")
    (license #f)))

(define-public emacs-occur-context-resize
  (package
    (name "emacs-occur-context-resize")
    (version "20210121.50")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgtized/occur-context-resize.el.git")
               (commit
                 "9d62a5b5c39ab7921dfc12dd0ab139b38dd16582")))
        (sha256
          (base32
            "1s2j0205sp40nz1ljwa2nf2zm5mlkvsp95xfrra6rzbdrvbsfxyi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dgtized/occur-context-resize.el")
    (synopsis
      "dynamically resize context around matches in occur-mode")
    (description
      "Documentation at https://melpa.org/#/occur-context-resize")
    (license #f)))

(define-public emacs-occur-x
  (package
    (name "emacs-occur-x")
    (version "20130610.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juan-leon/occur-x.git")
               (commit
                 "352f5fab207d8a1d3dd048073ff127a83e97c82b")))
        (sha256
          (base32
            "1zj0xhvl5qx42injv0av4lyzd3jsjls1m368dqd2qnswhfw8wfn6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Extra functionality for occur")
    (description
      "Documentation at https://melpa.org/#/occur-x")
    (license #f)))

(define-public emacs-oceanic-theme
  (package
    (name "emacs-oceanic-theme")
    (version "20161015.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/terry3/oceanic-theme.git")
               (commit
                 "a92ee9b470843c923e6cdcafdd65106ff994d04d")))
        (sha256
          (base32
            "1bj4l88546gmlfmwyg1zsqfz9g2l87hsa9jlrf8s4c907di736ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/terry3/oceanic-theme")
    (synopsis "Oceanic theme.")
    (description
      "Documentation at https://melpa.org/#/oceanic-theme")
    (license #f)))

(define-public emacs-ocodo-svg-modelines
  (package
    (name "emacs-ocodo-svg-modelines")
    (version "20150516.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocodo/ocodo-svg-modelines.git")
               (commit
                 "c7b0789a177219f117c4de5659ecfa8622958c40")))
        (sha256
          (base32
            "155gmls6cz3zf4lcj89kzb96y7k0glx0f659jg5z0skgxq79hf48"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-svg-mode-line-themes))
    (arguments
      '(#:files
        (:defaults ("images" "images/*.base64"))))
    (home-page
      "https://github.com/ocodo/ocodo-svg-modelines")
    (synopsis
      "A collection of beautiful SVG modelines")
    (description
      "Documentation at https://melpa.org/#/ocodo-svg-modelines")
    (license #f)))

(define-public emacs-ocp-indent
  (package
    (name "emacs-ocp-indent")
    (version "20211019.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OCamlPro/ocp-indent.git")
               (commit
                 "7c4d434132cebc15a8213c8be9e7323692eb0a2b")))
        (sha256
          (base32
            "036qvsjvs1div39w4rkkivg3yicmxcjdjsmdpp64asdzk7531bqq"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("tools/ocp-indent.el")))
    (home-page
      "http://www.typerex.org/ocp-indent.html")
    (synopsis
      "automatic indentation with ocp-indent")
    (description
      "Documentation at https://melpa.org/#/ocp-indent")
    (license #f)))

(define-public emacs-octicons
  (package
    (name "emacs-octicons")
    (version "20151101.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/octicons.git")
               (commit
                 "a61e561966ffd8faa3b48ce5b3a4eec10c59708b")))
        (sha256
          (base32
            "0w98ii2ny57al94a4h927xx1hn99df5if543v2gh36zqdlwc7xci"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-octicons")
    (synopsis "octicons utility")
    (description
      "Documentation at https://melpa.org/#/octicons")
    (license #f)))

(define-public emacs-octo-mode
  (package
    (name "emacs-octo-mode")
    (version "20161008.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cryon/octo-mode.git")
               (commit
                 "bd4db7e5e3275b24c74e6a23c11d04f54e9feca5")))
        (sha256
          (base32
            "1blr664h8bq8bs1wr82nhhb9y7ggrlxp6x203i5bv542zm4a5rba"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cryon/octo-mode")
    (synopsis
      "Major mode for Octo assembly language")
    (description
      "Documentation at https://melpa.org/#/octo-mode")
    (license #f)))

(define-public emacs-octopress
  (package
    (name "emacs-octopress")
    (version "20190123.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronbieber/octopress.el.git")
               (commit
                 "f2c92d5420f14fc9167c7de1873836510e652de2")))
        (sha256
          (base32
            "0s5sv685h350zky46fr95bs1w814g8ksjndxwmgarldklxilsyji"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronbieber/octopress.el")
    (synopsis
      "A lightweight wrapper for Jekyll and Octopress.")
    (description
      "Documentation at https://melpa.org/#/octopress")
    (license #f)))

(define-public emacs-oer-reveal
  (package
    (name "emacs-oer-reveal")
    (version "20230925.1039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/oer/oer-reveal.git")
               (commit
                 "008a4433d64389d00ae86e00a391041e12a9cba7")))
        (sha256
          (base32
            "0wxzbgxc0yh5hl5z3c3cpzwdqhzczcvsz14yb1fbg7qr7365kyah"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-re-reveal))
    (arguments
      '(#:files
        (:defaults
          "README*"
          "LICENSE*"
          "org"
          "css"
          "title-slide"
          "examples")))
    (home-page "https://gitlab.com/oer/oer-reveal")
    (synopsis
      "OER with reveal.js, plugins, and org-re-reveal")
    (description
      "Documentation at https://melpa.org/#/oer-reveal")
    (license #f)))

(define-public emacs-offlineimap
  (package
    (name "emacs-offlineimap")
    (version "20150916.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jd/offlineimap.el.git")
               (commit
                 "cc3e067e6237a1eb7b21c575a41683b1febb47f1")))
        (sha256
          (base32
            "1bjrgj8klg7ly63vx90jpaih9virn02bhqi16p6z0mw36q1q7ysq"))))
    (build-system melpa-build-system)
    (home-page
      "http://julien.danjou.info/offlineimap-el.html")
    (synopsis "Run OfflineIMAP from Emacs")
    (description
      "Documentation at https://melpa.org/#/offlineimap")
    (license #f)))

(define-public emacs-oj
  (package
    (name "emacs-oj")
    (version "20230212.148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/oj.el.git")
               (commit
                 "6d586cb108c642bc166c64df113e03193f4d1495")))
        (sha256
          (base32
            "0xjm365zd6jiv3aqa2cknb7b813d6pq854qj73hkffkp6dm0yxih"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-quickrun))
    (home-page "https://github.com/conao3/oj.el")
    (synopsis
      "Competitive programming tools client for AtCoder, Codeforces")
    (description
      "Documentation at https://melpa.org/#/oj")
    (license #f)))

(define-public emacs-ol-notmuch
  (package
    (name "emacs-ol-notmuch")
    (version "20230511.2048")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ol-notmuch-"
               version
               ".tar"))
        (sha256
          (base32
            "0b8r0x7pz0n3rwnrv82ijjl5zvd16qz44zgx3y38vi28wn9bfdqq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-notmuch))
    (home-page
      "https://git.sr.ht/~tarsius/ol-notmuch")
    (synopsis "Links to notmuch messages")
    (description
      "Documentation at https://melpa.org/#/ol-notmuch")
    (license #f)))

(define-public emacs-ol-tmsu
  (package
    (name "emacs-ol-tmsu")
    (version "20230207.1457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/tmsu.el.git")
               (commit
                 "563d03a507dc831e65c1385af3629481333da841")))
        (sha256
          (base32
            "10fliymplwpbp0q949xw1fdqdikmnaf6v3cidf6fpkf4snn0s5qj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tmsu))
    (arguments '(#:files ("ol-tmsu.el")))
    (home-page "https://github.com/vifon/tmsu.el")
    (synopsis "Org-mode links to TMSU queries")
    (description
      "Documentation at https://melpa.org/#/ol-tmsu")
    (license #f)))

(define-public emacs-olc
  (package
    (name "emacs-olc")
    (version "20200818.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.liu.se/davby02/olc.git")
               (commit
                 "d2dc62dbc3cf6460cc12bd96857a988bc80ac37e")))
        (sha256
          (base32
            "176w03pybs5rg87cj94s0dy365pxp981mlkbh3zv3d34kpmrzh10"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.liu.se/davby02/olc")
    (synopsis "Open location code library")
    (description
      "Documentation at https://melpa.org/#/olc")
    (license #f)))

(define-public emacs-old-norse-input
  (package
    (name "emacs-old-norse-input")
    (version "20170816.1842")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/emacs-old-norse-input.git")
               (commit
                 "c2e21ee72c3768e9152aff6baf12a19cde1d0c53")))
        (sha256
          (base32
            "0zybr1v91884p4ncrpr962pr02qsns6hf7kc4c5gyad8sg4pbvxh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/david-christiansen/emacs-old-norse-input")
    (synopsis "An input method for Old Norse")
    (description
      "Documentation at https://melpa.org/#/old-norse-input")
    (license #f)))

(define-public emacs-oldlace-theme
  (package
    (name "emacs-oldlace-theme")
    (version "20150705.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/oldlace-theme.git")
               (commit
                 "5c6f437203b0783b36a7aff4a578de4a0c8c4ee6")))
        (sha256
          (base32
            "0y9fxrsxp1158fyjp4f69r7g2s7b6nbxlsmsb8clwqc8pmmg2z82"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with an 'oldlace' background.")
    (description
      "Documentation at https://melpa.org/#/oldlace-theme")
    (license #f)))

(define-public emacs-olivetti
  (package
    (name "emacs-olivetti")
    (version "20231104.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/olivetti.git")
               (commit
                 "1f8b3d5cb155f7497083001037a09a972befab21")))
        (sha256
          (base32
            "1v5f0glp0ggmmzzhaxlijc58w4ip1nlik9lx7rcl6symsqcmqmq1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/olivetti")
    (synopsis
      "Minor mode for a nice writing environment")
    (description
      "Documentation at https://melpa.org/#/olivetti")
    (license #f)))

(define-public emacs-om-mode
  (package
    (name "emacs-om-mode")
    (version "20140915.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielsz/om-mode.git")
               (commit
                 "cdc0c2912321f8438b0f3449ba8aca50ec150bba")))
        (sha256
          (base32
            "03szb2i2xk3nq578cz1drsddsbld03ryvykdfzmfvwcmlpaknvzb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Insert Om component template with life cycle.")
    (description
      "Documentation at https://melpa.org/#/om-mode")
    (license #f)))

(define-public emacs-omni-kill
  (package
    (name "emacs-omni-kill")
    (version "20171016.2140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-kill.el.git")
               (commit
                 "904549c8fd6ac3cf22b5d7111ca8944e179cffea")))
        (sha256
          (base32
            "1mlnh5pdqdv1qb8jvi0wvkgbpy74zq807gmp04bp6cpxdns9j63f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Kill all the things")
    (description
      "Documentation at https://melpa.org/#/omni-kill")
    (license #f)))

(define-public emacs-omni-log
  (package
    (name "emacs-omni-log")
    (version "20200304.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-log.el.git")
               (commit
                 "0a240660ccdd0b6588b4e3c322743b5ab1161338")))
        (sha256
          (base32
            "0xbrwj7zsqx91p28l3dknlhr3y5cj6lah6h5x1s9l9kmfz850dcp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-s emacs-dash))
    (home-page
      "https://github.com/AdrieanKhisbe/omni-log.el")
    (synopsis "Logging utilities")
    (description
      "Documentation at https://melpa.org/#/omni-log")
    (license #f)))

(define-public emacs-omni-quotes
  (package
    (name "emacs-omni-quotes")
    (version "20200304.2341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-quotes.el.git")
               (commit
                 "cfc7b7f01628a5d57384820d1096de4541e67cdf")))
        (sha256
          (base32
            "1bv45gdyzycapi9q69h3339308qxwgjzj5rgr3f927vl4xm18kfb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-omni-log
            emacs-f
            emacs-s
            emacs-ht))
    (home-page
      "https://github.com/AdrieanKhisbe/omni-quotes.el")
    (synopsis "Random quotes displayer")
    (description
      "Documentation at https://melpa.org/#/omni-quotes")
    (license #f)))

(define-public emacs-omni-scratch
  (package
    (name "emacs-omni-scratch")
    (version "20171009.2151")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-scratch.el.git")
               (commit
                 "9eee3161e5cb6df58618548a2173f4da7d194814")))
        (sha256
          (base32
            "1cppy9p5k8737jjgjlmfqqfdx048kpjn5cx7iw0dxal180y3i39g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/AdrieanKhisbe/omni-scratch.el")
    (synopsis "Easy and mode-specific draft buffers")
    (description
      "Documentation at https://melpa.org/#/omni-scratch")
    (license #f)))

(define-public emacs-omni-tags
  (package
    (name "emacs-omni-tags")
    (version "20170426.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdrieanKhisbe/omni-tags.el.git")
               (commit
                 "8f0f6c302fab900b7681e5c039f90850cbbabd33")))
        (sha256
          (base32
            "0cqj4h4bdhmb0r6f2xx9g6cs3599m4j3snkrvsgddaq8c6mg47w0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pcre2el))
    (home-page
      "http://github.com/AdrieanKhisbe/omni-tags.el")
    (synopsis "Highlight and Actions for 'Tags'")
    (description
      "Documentation at https://melpa.org/#/omni-tags")
    (license #f)))

(define-public emacs-omnibox
  (package
    (name "emacs-omnibox")
    (version "20180423.49")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebastiencs/omnibox.git")
               (commit
                 "8ee75c71c20c438ebc43ba24ef6f543633d118f3")))
        (sha256
          (base32
            "19d7djf942dagxsz0c0lnfra4fk09qm6grkc0nihpsw4afjbj01a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-frame-local))
    (home-page
      "https://github.com/sebastiencs/omnibox")
    (synopsis "Selection package")
    (description
      "Documentation at https://melpa.org/#/omnibox")
    (license #f)))

(define-public emacs-omnisharp
  (package
    (name "emacs-omnisharp")
    (version "20210725.1955")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OmniSharp/omnisharp-emacs.git")
               (commit
                 "e276ff140666057c6d6848f9cfc84a82e3a7650c")))
        (sha256
          (base32
            "0aicn5s368s6ks4dq5b8xga0ifijd4lkqawzs0a4y58z8s922h69"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-dash
            emacs-auto-complete
            emacs-popup
            emacs-csharp-mode
            emacs-s
            emacs-f))
    (home-page
      "https://github.com/Omnisharp/omnisharp-emacs")
    (synopsis
      "Omnicompletion (intellisense) and more for C#")
    (description
      "Documentation at https://melpa.org/#/omnisharp")
    (license #f)))

(define-public emacs-omtose-phellack-theme
  (package
    (name "emacs-omtose-phellack-theme")
    (version "20161111.2120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/franksn/omtose-phellack-theme.git")
               (commit
                 "66f99633e199e65bd28641626435e8e59246529a")))
        (sha256
          (base32
            "0imf2pcf93srm473nvaksw5pw5i4caqxb6aqfbq6xww8gdbqfazy"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("variants/*.el")))
    (home-page "unspecified")
    (synopsis
      "A dark theme, with cold bluish touch.")
    (description
      "Documentation at https://melpa.org/#/omtose-phellack-theme")
    (license #f)))

(define-public emacs-on-parens
  (package
    (name "emacs-on-parens")
    (version "20210928.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/willghatch/emacs-on-parens.git")
               (commit
                 "b8ee8cea45c9b34820fcb951f522f13e3736d216")))
        (sha256
          (base32
            "1i7xhv2a22n6lq0n1pd494g1a5s7sv52i2gblg6s9h87dnb4r9l6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-evil emacs-smartparens))
    (home-page "unspecified")
    (synopsis
      "smartparens wrapper to fit with evil-mode/vim normal-state")
    (description
      "Documentation at https://melpa.org/#/on-parens")
    (license #f)))

(define-public emacs-on-screen
  (package
    (name "emacs-on-screen")
    (version "20160302.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/michael-heerdegen/on-screen.el.git")
               (commit
                 "206468aa4de299ad26c2db12b757f5ad7290912f")))
        (sha256
          (base32
            "1rrby3mbh24qd43nsb3ymcrjxh1cz6iasf1gv0a8fmivmb4f7dyz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/michael-heerdegen/on-screen.el")
    (synopsis "guide your eyes while scrolling")
    (description
      "Documentation at https://melpa.org/#/on-screen")
    (license #f)))

(define-public emacs-one-themes
  (package
    (name "emacs-one-themes")
    (version "20200720.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/balajisivaraman/emacs-one-themes.git")
               (commit
                 "0e77d31f9fc0cd55f3d92ec0db79513d616b2efd")))
        (sha256
          (base32
            "0dc2xkgnl5x542332cnlilbzy9ps060gjx0hkg8pfhismvavr4mi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/balajisivaraman/emacs-one-themes")
    (synopsis "One Colorscheme")
    (description
      "Documentation at https://melpa.org/#/one-themes")
    (license #f)))

(define-public emacs-one-time-pad-encrypt
  (package
    (name "emacs-one-time-pad-encrypt")
    (version "20160329.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/garvinguan/emacs-one-time-pad.git")
               (commit
                 "87cc1f124024ce3d277299ca0ac703f182937d9f")))
        (sha256
          (base32
            "0g2hvpnmgyy1k393prv97nqwlqc58nqf71hkrmaijw0cyy9q03nz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/garvinguan/emacs-one-time-pad/")
    (synopsis "One time pad encryption within file")
    (description
      "Documentation at https://melpa.org/#/one-time-pad-encrypt")
    (license #f)))

(define-public emacs-opam
  (package
    (name "emacs-opam")
    (version "20150719.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/opam.git")
               (commit
                 "4d589de5765728f56af7078fae328b6792de8600")))
        (sha256
          (base32
            "1yqrp9icci5snp1485wb6y8mr2hjp9006ahch58lvmnq98bn7j45"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lunaryorn/opam.el")
    (synopsis "OPAM tools")
    (description
      "Documentation at https://melpa.org/#/opam")
    (license #f)))

(define-public emacs-opam-switch-mode
  (package
    (name "emacs-opam-switch-mode")
    (version "20230802.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ProofGeneral/opam-switch-mode.git")
               (commit
                 "1069e56a662f23ea09d4e05611bdedeb99257012")))
        (sha256
          (base32
            "1nqw4qjqdklgnl4pj6n95miyhvcmhs36d37yqd65dkyjc5s6dd1z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ProofGeneral/opam-switch-mode")
    (synopsis
      "Select OCaml opam switches via a menu")
    (description
      "Documentation at https://melpa.org/#/opam-switch-mode")
    (license #f)))

(define-public emacs-open-in-msvs
  (package
    (name "emacs-open-in-msvs")
    (version "20170123.2228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/evgeny-panasyuk/open-in-msvs.el.git")
               (commit
                 "e0d071c83188ad5db8f3297d6ce784b4ed554a04")))
        (sha256
          (base32
            "0aiccdcll5zjy11fandd9bvld8p8srmhrh3waqc33yp4x8pjkjpd"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.vbs")))
    (home-page
      "https://github.com/evgeny-panasyuk/open-in-msvs")
    (synopsis
      "Open current file:line:column in Microsoft Visual Studio")
    (description
      "Documentation at https://melpa.org/#/open-in-msvs")
    (license #f)))

(define-public emacs-open-junk-file
  (package
    (name "emacs-open-junk-file")
    (version "20161210.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/open-junk-file.git")
               (commit
                 "558bec7372b0fed4c4cb6074ab906535fae615bd")))
        (sha256
          (base32
            "0kcgkxn5v9bsbkcvpjxjqhj1w3c29bfb33bmiw32gzbfphmrvhh1"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/open-junk-file.el")
    (synopsis
      "Open a junk (memo) file to try-and-error")
    (description
      "Documentation at https://melpa.org/#/open-junk-file")
    (license #f)))

(define-public emacs-opencc
  (package
    (name "emacs-opencc")
    (version "20170722.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/emacs-opencc.git")
               (commit
                 "8c539f72669ba9a99d8b5198db5ea930897ad1b9")))
        (sha256
          (base32
            "140s88z0rsiylm8g1mzgc50ai38x79j004advin6lil5zcggxq3i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/emacs-opencc")
    (synopsis
      "中文简繁转换 <-> 中文簡繁轉換 (Convert Chinese with OpenCC)")
    (description
      "Documentation at https://melpa.org/#/opencc")
    (license #f)))

(define-public emacs-opencl-mode
  (package
    (name "emacs-opencl-mode")
    (version "20201025.1656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/salmanebah/opencl-mode.git")
               (commit
                 "15091eff92c33ee0d1ece40eb99299ef79fee92d")))
        (sha256
          (base32
            "1zn6rr48w0ai0sn51zzyp546va6flfgf9lm12vfrdb6kkiiiq403"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/salmanebah/opencl-mode")
    (synopsis "Syntax coloring for opencl kernels")
    (description
      "Documentation at https://melpa.org/#/opencl-mode")
    (license #f)))

(define-public emacs-opener
  (package
    (name "emacs-opener")
    (version "20161207.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/0robustus1/opener.el.git")
               (commit
                 "c384f67278046fdcd220275fdd212ab85672cbeb")))
        (sha256
          (base32
            "0gci909a2rbx5i8dyzyrcddwdic7nvpk6y6djvn521yaag4sq87h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (arguments
      '(#:files ("opener.el" "opener.texi")))
    (home-page
      "https://github.com/0robustus1/opener.el")
    (synopsis "opening urls as buffers")
    (description
      "Documentation at https://melpa.org/#/opener")
    (license #f)))

(define-public emacs-openfoam
  (package
    (name "emacs-openfoam")
    (version "20210516.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralph-schleicher/emacs-openfoam.git")
               (commit
                 "e2c899009a9df412bf9f360492b1072eb6f1513f")))
        (sha256
          (base32
            "1wfvjl92lmra78y1jbbs36y82dg0a7hx5s7wamliwq9rg3ddyzml"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("openfoam.el")))
    (home-page
      "https://github.com/ralph-schleicher/emacs-openfoam")
    (synopsis "OpenFOAM files and directories")
    (description
      "Documentation at https://melpa.org/#/openfoam")
    (license #f)))

(define-public emacs-opensource
  (package
    (name "emacs-opensource")
    (version "20160926.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OpenSourceOrg/el-opensourceorg.git")
               (commit
                 "4c15049079878fcd386cca5dba20b99296a1de84")))
        (sha256
          (base32
            "1avci3avwhrw040wwjgcv1hayk893y8iwln10vsjyb5rd78y9gsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-pkg-info
            emacs-request))
    (home-page
      "https://github.com/OpenSourceOrg/el-opensourceorg")
    (synopsis "Client for Opensource API")
    (description
      "Documentation at https://melpa.org/#/opensource")
    (license #f)))

(define-public emacs-openstack-cgit-browse-file
  (package
    (name "emacs-openstack-cgit-browse-file")
    (version "20130819.927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chmouel/openstack-cgit-browse-file.git")
               (commit
                 "244219288b9aef41155044697bb114b7af83ab8f")))
        (sha256
          (base32
            "0086pfk4pq6xmknk7a42fihcjgzkcplqqc1rk9fhwmn9j7djbq70"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chmouel/openstack-cgit-browse-file")
    (synopsis
      "Browse the current file in OpenStack cgit")
    (description
      "Documentation at https://melpa.org/#/openstack-cgit-browse-file")
    (license #f)))

(define-public emacs-opensub
  (package
    (name "emacs-opensub")
    (version "20230716.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielfleischer/opensub.git")
               (commit
                 "216f60baf8cfd527fd84676b7389f463a04ae80c")))
        (sha256
          (base32
            "1hgkpkcgy342wyzdvnb0lb9vpr6fsym42ahgmmnq63ijw5r5kiq5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danielfleischer/opensub")
    (synopsis
      "Search and download from open-subtitles")
    (description
      "Documentation at https://melpa.org/#/opensub")
    (license #f)))

(define-public emacs-openwith
  (package
    (name "emacs-openwith")
    (version "20120531.2136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/openwith.git")
               (commit
                 "1dc89670822966fab6e656f6519fdd7f01e8301a")))
        (sha256
          (base32
            "1wl6gnxsyhaad4cl9bxjc0qbc5jzvlwbwjbajs0n1s6qr07d6r01"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/jpkotta/openwith")
    (synopsis "Open files with external programs")
    (description
      "Documentation at https://melpa.org/#/openwith")
    (license #f)))

(define-public emacs-operate-on-number
  (package
    (name "emacs-operate-on-number")
    (version "20150707.623")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/operate-on-number.el.git")
               (commit
                 "ceb3be565a29326c1098244fac0c50606723a56e")))
        (sha256
          (base32
            "0iw3c8sn702ziki59mvd5gxm484i7f0bwsy8fz95y08s9gknjjf9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/operate-on-number.el")
    (synopsis
      "Operate on number at point with arithmetic functions")
    (description
      "Documentation at https://melpa.org/#/operate-on-number")
    (license #f)))

(define-public emacs-orangey-bits-theme
  (package
    (name "emacs-orangey-bits-theme")
    (version "20220822.324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-orangey-bits.git")
               (commit
                 "533856d399cb4098300bcaf4a2d20920395746f8")))
        (sha256
          (base32
            "0a7xs9rwj2n44zny3fw9h65lz721bql4jdzanj9z7fx544r54x46"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-orangey-bits")
    (synopsis "A Theme with smashing orangey bits")
    (description
      "Documentation at https://melpa.org/#/orangey-bits-theme")
    (license #f)))

(define-public emacs-orca
  (package
    (name "emacs-orca")
    (version "20220828.4")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/orca.git")
               (commit
                 "0687f416a5573f63b691d384454f5a793266ed97")))
        (sha256
          (base32
            "00a363vkqvryw5s7pj0kh8pqq5vvbf1pmbzz0b1z1fckwr49sv0f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-zoutline))
    (home-page "https://github.com/abo-abo/orca")
    (synopsis "Org Capture")
    (description
      "Documentation at https://melpa.org/#/orca")
    (license #f)))

(define-public emacs-orderless
  (package
    (name "emacs-orderless")
    (version "20231107.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oantolin/orderless.git")
               (commit
                 "b38a8e85d605c1018e4c8ba7beacb1ec6708a810")))
        (sha256
          (base32
            "00kd0gy7pa7cidh7bsp8ibgwzn3hspmm1qgyq4vn67wkiibn23vg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oantolin/orderless")
    (synopsis
      "Completion style for matching regexps in any order")
    (description
      "Documentation at https://melpa.org/#/orderless")
    (license #f)))

(define-public emacs-ordinal
  (package
    (name "emacs-ordinal")
    (version "20210519.1442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/ordinal.el.git")
               (commit
                 "a7f378306290b6807fb6b87cee3ef79b31cec711")))
        (sha256
          (base32
            "1na9xn3cwdxmhfzrgv6n103cx9zjnmd0y874pvwnmpc67rq9yk2p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/ordinal.el")
    (synopsis
      "Convert number to ordinal number notation")
    (description
      "Documentation at https://melpa.org/#/ordinal")
    (license #f)))

(define-public emacs-org-ac
  (package
    (name "emacs-org-ac")
    (version "20170401.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/org-ac.git")
               (commit
                 "41e3ef8e4039619d0370c23c66730b3b2e9e32ed")))
        (sha256
          (base32
            "1l3fn8vjdqq7rrn1b7l2i238bhjni13mg9v25dydin0sfb697abk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete-pcmp
            emacs-log4e
            emacs-yaxception))
    (home-page "https://github.com/aki2o/org-ac")
    (synopsis
      "Some auto-complete sources for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-ac")
    (license #f)))

(define-public emacs-org-agenda-property
  (package
    (name "emacs-org-agenda-property")
    (version "20140626.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/org-agenda-property.git")
               (commit
                 "3b469f3e93de0036547f3631cd0366d53f7584c8")))
        (sha256
          (base32
            "15xgkm5p30qfghyhkjivh5n4770794qf4pza462vb0xl5v6kffbm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Bruce-Connor/org-agenda-property")
    (synopsis
      "Display org properties in the agenda buffer.")
    (description
      "Documentation at https://melpa.org/#/org-agenda-property")
    (license #f)))

(define-public emacs-org-ai
  (package
    (name "emacs-org-ai")
    (version "20230910.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rksm/org-ai.git")
               (commit
                 "3311bc0956f906637d008ad7909d03c1c7e2c098")))
        (sha256
          (base32
            "1hd5hwcahya2qj24vk0s92snchjcmirhvhygqggccxfccdrv95zl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "https://github.com/rksm/org-ai")
    (synopsis
      "Use ChatGPT and other LLMs in org-mode and beyond")
    (description
      "Documentation at https://melpa.org/#/org-ai")
    (license #f)))

(define-public emacs-org-alert
  (package
    (name "emacs-org-alert")
    (version "20231104.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spegoraro/org-alert.git")
               (commit
                 "c4bcea435b96db470ac2c173a378354714429739")))
        (sha256
          (base32
            "0jvf1dv8z8fl4y4hrv5afgn5s974pyw5swvxf4k3ha2aaarhpn80"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page
      "https://github.com/spegoraro/org-alert")
    (synopsis "Notify org deadlines via notify-send")
    (description
      "Documentation at https://melpa.org/#/org-alert")
    (license #f)))

(define-public emacs-org-analyzer
  (package
    (name "emacs-org-analyzer")
    (version "20191001.1717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rksm/clj-org-analyzer.git")
               (commit
                 "19da62aa4dcf1090be8f574f6f2d4c7e116163a8")))
        (sha256
          (base32
            "1zfc93z6w5zvbqiypqvbnyv8ims1wgpcp61z1s152d0nq2y4pf50"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("org-analyzer-el/*.jar" "org-analyzer-el/*.el")))
    (home-page
      "https://github.com/rksm/clj-org-analyzer")
    (synopsis
      "org-analyzer is a tool that extracts time tracking data from org files.")
    (description
      "Documentation at https://melpa.org/#/org-analyzer")
    (license #f)))

(define-public emacs-org-anki
  (package
    (name "emacs-org-anki")
    (version "20230804.1244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eyeinsky/org-anki.git")
               (commit
                 "1bc1bc1a6f06d0d9fe3ac3b8a86e061b80a32462")))
        (sha256
          (base32
            "1jh11mbjswfzqhx7vff0lq07ggdfv8yjzqapkkbj8zfvp8p3v406"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash emacs-promise))
    (home-page
      "https://github.com/eyeinsky/org-anki")
    (synopsis "Synchronize org-mode entries to Anki")
    (description
      "Documentation at https://melpa.org/#/org-anki")
    (license #f)))

(define-public emacs-org-appear
  (package
    (name "emacs-org-appear")
    (version "20220617.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/awth13/org-appear.git")
               (commit
                 "60ba267c5da336e75e603f8c7ab3f44e6f4e4dac")))
        (sha256
          (base32
            "03ph0mg9ny8gc8rl1r87ghs3c25wdix5yv70p0854xhkmp5fz5m5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/awth13/org-appear")
    (synopsis "Auto-toggle Org elements")
    (description
      "Documentation at https://melpa.org/#/org-appear")
    (license #f)))

(define-public emacs-org-arbeitszeit
  (package
    (name "emacs-org-arbeitszeit")
    (version "20220816.1447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bkaestner/org-arbeitszeit.git")
               (commit
                 "b22ae3292b24772aa37dd5a54cd551f7312b6213")))
        (sha256
          (base32
            "0ns1s0n0nckwkr6akrk2sdwwc0xj636qry1jvvys3rp2irjh6g0s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bkaestner/org-arbeitszeit")
    (synopsis "Calculate your worktime")
    (description
      "Documentation at https://melpa.org/#/org-arbeitszeit")
    (license #f)))

(define-public emacs-org-assistant
  (package
    (name "emacs-org-assistant")
    (version "20230623.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tyler-dodge/org-assistant.git")
               (commit
                 "d036f82072e22a7fc985e94853deaf65c41d5967")))
        (sha256
          (base32
            "1dggs5w831jlxbn7v5wn755ggg2kgcsij4js19m9yiz6wnw5nrxk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-uuidgen
            emacs-deferred
            emacs-s
            emacs-dash
            emacs-ht))
    (home-page
      "https://github.com/tyler-dodge/org-assistant")
    (synopsis
      "Org babel extension for Chat Assistant APIs")
    (description
      "Documentation at https://melpa.org/#/org-assistant")
    (license #f)))

(define-public emacs-org-attach-screenshot
  (package
    (name "emacs-org-attach-screenshot")
    (version "20210221.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org-screenshot.git")
               (commit
                 "6a5d5f8fd7cda1200cf088f415b9983e89a03075")))
        (sha256
          (base32
            "0gqqcgadlzzbqd4sqbwbwx41app6ryz2l3lrng8bz9hq9cx547jj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dfeich/org-screenshot")
    (synopsis
      "Screenshots integrated with org attachment dirs")
    (description
      "Documentation at https://melpa.org/#/org-attach-screenshot")
    (license #f)))

(define-public emacs-org-auto-expand
  (package
    (name "emacs-org-auto-expand")
    (version "20231006.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-auto-expand.git")
               (commit
                 "86e3b24e894ab377ea005b1a574e77daace0451d")))
        (sha256
          (base32
            "0kxi76z95dqsj3z2spihjzizxhvl72wf9sl21n03x3wxyfwkqxfp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/org-auto-expand")
    (synopsis
      "Automatically expand certain headings")
    (description
      "Documentation at https://melpa.org/#/org-auto-expand")
    (license #f)))

(define-public emacs-org-auto-tangle
  (package
    (name "emacs-org-auto-tangle")
    (version "20220812.2327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yilkalargaw/org-auto-tangle.git")
               (commit
                 "2494a6f78c9db5311123abc7cad119851a29a55c")))
        (sha256
          (base32
            "1kn1jsbv97ps280lcdx19d6hs7pvz7q9ng67xlb1kwjb680pa7rl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/yilkalargaw/org-auto-tangle")
    (synopsis
      "Automatically and Asynchronously tangles org files on save")
    (description
      "Documentation at https://melpa.org/#/org-auto-tangle")
    (license #f)))

(define-public emacs-org-autolist
  (package
    (name "emacs-org-autolist")
    (version "20220530.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/calvinwyoung/org-autolist.git")
               (commit
                 "da3a45f95f2e9f7281d533d1e5cec1764ae26a9c")))
        (sha256
          (base32
            "0zj4g6vfwyyxlpci6fcawvf35bgk7b84rrnm9s9myv53b6nri73f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/calvinwyoung/org-autolist")
    (synopsis "Improved list management in org-mode")
    (description
      "Documentation at https://melpa.org/#/org-autolist")
    (license #f)))

(define-public emacs-org-babel-eval-in-repl
  (package
    (name "emacs-org-babel-eval-in-repl")
    (version "20201206.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diadochos/org-babel-eval-in-repl.git")
               (commit
                 "3591f062873de2d64cc6f83b3555d030506e6ee7")))
        (sha256
          (base32
            "1fjifl69qja3ab0g72f1hkfns992qq0v9pw8p4hgvjycx7fpzk0a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-eval-in-repl
            emacs-matlab-mode
            emacs-ess))
    (home-page
      "https://github.com/diadochos/org-babel-eval-in-repl")
    (synopsis
      "Eval org-mode babel code blocks in various REPLs.")
    (description
      "Documentation at https://melpa.org/#/org-babel-eval-in-repl")
    (license #f)))

(define-public emacs-org-beautify-theme
  (package
    (name "emacs-org-beautify-theme")
    (version "20170908.2218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jonnay/org-beautify-theme.git")
               (commit
                 "df6a1114fda313e1689363e196c8284fbe2a2738")))
        (sha256
          (base32
            "1lkz7736swimad12khwbbqc4gxjydgr1k45p4mx03s25pv1w920y"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("org-beautify-theme.el")))
    (home-page "unspecified")
    (synopsis
      "A sub-theme to make org-mode more beautiful.")
    (description
      "Documentation at https://melpa.org/#/org-beautify-theme")
    (license #f)))

(define-public emacs-org-board
  (package
    (name "emacs-org-board")
    (version "20230408.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/charlesroelli/org-board.git")
               (commit
                 "500fe02bc114e5b535a2eb2ab73954d79428168f")))
        (sha256
          (base32
            "1mcghw9mmlyqsgxk97hd57495sfx8dp6ig7qgs5xn2b2k0ygv4vf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/scallywag/org-board")
    (synopsis
      "bookmarking and web archival system for Org mode.")
    (description
      "Documentation at https://melpa.org/#/org-board")
    (license #f)))

(define-public emacs-org-bookmark-heading
  (package
    (name "emacs-org-bookmark-heading")
    (version "20230517.1141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-bookmark-heading.git")
               (commit
                 "4e97fab8cf0307fc338df50efac103ed966c7914")))
        (sha256
          (base32
            "1fkwzwyim0icnfh5gbrahx50m7zmcw42g407064p87gazd1rir6c"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alphapapa/org-bookmark-heading")
    (synopsis "Emacs bookmark support for Org mode")
    (description
      "Documentation at https://melpa.org/#/org-bookmark-heading")
    (license #f)))

(define-public emacs-org-bookmarks-extractor
  (package
    (name "emacs-org-bookmarks-extractor")
    (version "20220829.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jxq0/org-bookmarks-extractor.git")
               (commit
                 "26d810d4d58de1f64f0bbd649e13816f96663d73")))
        (sha256
          (base32
            "005fl89h8qdny3xd2s29hkbsvpksklxdfrgcbzb8h3wk5f0q4npp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jxq0/org-bookmarks-extractor")
    (synopsis "Extract bookmarks from Org mode")
    (description
      "Documentation at https://melpa.org/#/org-bookmarks-extractor")
    (license #f)))

(define-public emacs-org-books
  (package
    (name "emacs-org-books")
    (version "20210408.1913")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lepisma/org-books.git")
               (commit
                 "9f4ec4a981bfc5eebff993c3ad49a4bed26aebd1")))
        (sha256
          (base32
            "1sgckvpjdaig9r2clcvs6ckgf2kx7amikkpq26y30jbnfnbskf0v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-enlive
            emacs-s
            emacs-helm
            emacs-helm-org
            emacs-dash))
    (home-page
      "https://github.com/lepisma/org-books")
    (synopsis
      "Reading list management with Org mode and helm")
    (description
      "Documentation at https://melpa.org/#/org-books")
    (license #f)))

(define-public emacs-org-brain
  (package
    (name "emacs-org-brain")
    (version "20230217.1908")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/org-brain.git")
               (commit
                 "2bad7732aae1a3051e2a14de2e30f970bbe43c25")))
        (sha256
          (base32
            "03g9khz168pl23q3l822ri0h2605nrq6b0vxl5278lmpcwxbqf93"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/org-brain")
    (synopsis "Org-mode concept mapping")
    (description
      "Documentation at https://melpa.org/#/org-brain")
    (license #f)))

(define-public emacs-org-bulletproof
  (package
    (name "emacs-org-bulletproof")
    (version "20230615.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pondersson/org-bulletproof.git")
               (commit
                 "8ae80a53f8034914f502a8655f420c55078e02e1")))
        (sha256
          (base32
            "1429g8s9p4d2chgsyx5dzdwk428h64zbjmswcv4p67jngy5qk2fr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pondersson/org-bulletproof")
    (synopsis "Automatic plain list bullet cycling")
    (description
      "Documentation at https://melpa.org/#/org-bulletproof")
    (license #f)))

(define-public emacs-org-bullets
  (package
    (name "emacs-org-bullets")
    (version "20200317.1740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/integral-dw/org-bullets.git")
               (commit
                 "767f55feb58b840a5a04eabfc3fbbf0d257c4792")))
        (sha256
          (base32
            "01ll5b39wpx9qpqybndy58wkq97n512rg7j87482l1ry1s5b02d5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/integral-dw/org-bullets")
    (synopsis
      "Show bullets in org-mode as UTF-8 characters")
    (description
      "Documentation at https://melpa.org/#/org-bullets")
    (license #f)))

(define-public emacs-org-caldav
  (package
    (name "emacs-org-caldav")
    (version "20230928.1922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dengste/org-caldav.git")
               (commit
                 "8610bd4a1c5726d85d999c9abab2b2d6044ab895")))
        (sha256
          (base32
            "1pixliwsxgybvyhjmjspxhyynrzvb1x9ms9wpdnlq2zsahh2x3v5"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("org-caldav.el")))
    (home-page
      "https://github.com/dengste/org-caldav/")
    (synopsis
      "Sync org files with external calendar through CalDAV")
    (description
      "Documentation at https://melpa.org/#/org-caldav")
    (license #f)))

(define-public emacs-org-calibre-notes
  (package
    (name "emacs-org-calibre-notes")
    (version "20221202.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bpanthi977/org-calibre-notes.git")
               (commit
                 "3120797ecbcb58827b91e3610e65579593d9a402")))
        (sha256
          (base32
            "0kamfmh2zkamzg72kw51p4cvj7p1bx3k8vk1dssv62r2kq7j349k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bpanthi977/org-calibre-notes")
    (synopsis
      "Extract highlights and notes from Calibre EPUB reader")
    (description
      "Documentation at https://melpa.org/#/org-calibre-notes")
    (license #f)))

(define-public emacs-org-capture-pop-frame
  (package
    (name "emacs-org-capture-pop-frame")
    (version "20230516.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/org-capture-pop-frame.git")
               (commit
                 "d88b75cc02fc53716701051dbdd906db0515de8c")))
        (sha256
          (base32
            "1hdv1qcc69740z02qzl7qbqi74spcpws4f1vcw7lf0qw60hpvmsf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/org-capture-pop-frame.git")
    (synopsis "Run org-capture in a new pop frame")
    (description
      "Documentation at https://melpa.org/#/org-capture-pop-frame")
    (license #f)))

(define-public emacs-org-category-capture
  (package
    (name "emacs-org-category-capture")
    (version "20230830.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/org-project-capture.git")
               (commit
                 "bf1c30b750020ab8dd634dd66b2c7b76c56286c5")))
        (sha256
          (base32
            "1wvw5y5s37p9j0m2ljp7n1s1casbhiyrcnfpvdghvdd0fk8wcybp"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("org-category-capture*.el")))
    (home-page
      "https://github.com/IvanMalison/org-project-capture")
    (synopsis
      "Contextualy capture of org-mode TODOs.")
    (description
      "Documentation at https://melpa.org/#/org-category-capture")
    (license #f)))

(define-public emacs-org-change
  (package
    (name "emacs-org-change")
    (version "20231026.2216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drghirlanda/org-change.git")
               (commit
                 "c74662112e8a857bd87c54128baba9307a393974")))
        (sha256
          (base32
            "0mpsghnzgyhxzjdsnj57sizv0dny75hm0kj61q13ckrc26bjlhg7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/drghirlanda/org-change")
    (synopsis "Annotate changes in org-mode files")
    (description
      "Documentation at https://melpa.org/#/org-change")
    (license #f)))

(define-public emacs-org-chef
  (package
    (name "emacs-org-chef")
    (version "20230814.1312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Chobbes/org-chef.git")
               (commit
                 "66d434b52a306222fe7e13ce4c0cec4a0408fbac")))
        (sha256
          (base32
            "1ccd6y5323mjsfga79lii4kx3lg183g8vj796yz076ggbfi4nm6s"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Chobbes/org-chef")
    (synopsis
      "Cookbook and recipe management with org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-chef")
    (license #f)))

(define-public emacs-org-cliplink
  (package
    (name "emacs-org-cliplink")
    (version "20201126.1020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rexim/org-cliplink.git")
               (commit
                 "13e0940b65d22bec34e2de4bc8cba1412a7abfbc")))
        (sha256
          (base32
            "1avyiw8vlv4n1r7zqvc6wjlsz7jl2pqaprzpm782gzp0c999pssl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rexim/org-cliplink")
    (synopsis
      "insert org-mode links from the clipboard")
    (description
      "Documentation at https://melpa.org/#/org-cliplink")
    (license #f)))

(define-public emacs-org-clock-convenience
  (package
    (name "emacs-org-clock-convenience")
    (version "20230424.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org-clock-convenience.git")
               (commit
                 "08417dfd51deb400b890cf71c87b57393fc5ac8c")))
        (sha256
          (base32
            "1cm35329cvx4sz7rgnxqfb9qbjcpff9q0gf535pv313p064pblzr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dfeich/org-clock-convenience")
    (synopsis
      "Convenience functions for org time tracking")
    (description
      "Documentation at https://melpa.org/#/org-clock-convenience")
    (license #f)))

(define-public emacs-org-clock-csv
  (package
    (name "emacs-org-clock-csv")
    (version "20201222.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atheriel/org-clock-csv.git")
               (commit
                 "af94b58c2e179a5bcc938f339e93de0eee3da99c")))
        (sha256
          (base32
            "0637skvjs90cfd713q8dhl3xrya4hfy79x0nn1y51cp9lrniw6q2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/atheriel/org-clock-csv")
    (synopsis
      "Export `org-mode' clock entries to CSV format.")
    (description
      "Documentation at https://melpa.org/#/org-clock-csv")
    (license #f)))

(define-public emacs-org-clock-reminder
  (package
    (name "emacs-org-clock-reminder")
    (version "20230222.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/inickey/org-clock-reminder.git")
               (commit
                 "d3bf97113fd519aa08198e2283ba9c236a6df168")))
        (sha256
          (base32
            "026isn6qa4ra69ivm1b12k63dbcz4dcbz34ks6c6fby95rcbmhis"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons/*.png")))
    (home-page
      "https://github.com/inickey/org-clock-reminder")
    (synopsis
      "Notifications that remind you about clocked-in tasks")
    (description
      "Documentation at https://melpa.org/#/org-clock-reminder")
    (license #f)))

(define-public emacs-org-clock-split
  (package
    (name "emacs-org-clock-split")
    (version "20200331.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justintaft/org-clock-split.git")
               (commit
                 "39e1d2912a7a7223e2356a5fc4dff03507ae084d")))
        (sha256
          (base32
            "0yvpmv0v56rsn43ffmwfhw8jjvfklw703qpmkx6d6paljjgy9k8l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justintaft/emacs-org-clock-split")
    (synopsis "Split clock entries")
    (description
      "Documentation at https://melpa.org/#/org-clock-split")
    (license #f)))

(define-public emacs-org-clock-today
  (package
    (name "emacs-org-clock-today")
    (version "20220918.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mallt/org-clock-today-mode.git")
               (commit
                 "b73cca120eb64538ab0666892a8b97b6d65b4d6b")))
        (sha256
          (base32
            "147q7x6q9fi0damvyxlmh6f0asv0gkra9a86138m25133syv3w2g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mallt/org-clock-today-mode")
    (synopsis
      "Show total clocked time of the current day in the mode line")
    (description
      "Documentation at https://melpa.org/#/org-clock-today")
    (license #f)))

(define-public emacs-org-commentary
  (package
    (name "emacs-org-commentary")
    (version "20160802.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smaximov/org-commentary.git")
               (commit
                 "821ccb994811359c42f4e3d459e0e88849d42b75")))
        (sha256
          (base32
            "0ixhyn8s7l2caq0qpv9zlq9fzm3z8b81755c3yffnk5camnij6py"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/smaximov/org-commentary")
    (synopsis
      "generate or update conventional library headers using Org mode files")
    (description
      "Documentation at https://melpa.org/#/org-commentary")
    (license #f)))

(define-public emacs-org-contacts
  (package
    (name "emacs-org-contacts")
    (version "20230721.151")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/org-contacts.git")
               (commit
                 "7f03eafaad2e5746949c0bebb98353e939c51ade")))
        (sha256
          (base32
            "1s29h8chfskls13jb13j56cvzfyc4xgg4ckv97a6wy902lw83z8b"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/org-contacts.git")
    (synopsis
      "Contacts management system for Org Mode")
    (description
      "Documentation at https://melpa.org/#/org-contacts")
    (license #f)))

(define-public emacs-org-context
  (package
    (name "emacs-org-context")
    (version "20220606.1339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/org-context.git")
               (commit
                 "47bd45149cb74dab2ebecccfb918f6f8502a4f2c")))
        (sha256
          (base32
            "1vfwrv3vspdl2bj8rk6jawjk21qlrmby2465skbc5wiriknpyxk9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/org-context")
    (synopsis
      "Contextual capture and agenda commands for Org-mode")
    (description
      "Documentation at https://melpa.org/#/org-context")
    (license #f)))

(define-public emacs-org-cua-dwim
  (package
    (name "emacs-org-cua-dwim")
    (version "20120203.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/org-cua-dwim.el.git")
               (commit
                 "a55d6c7009fc0b22f1110c07de629acc955c85e4")))
        (sha256
          (base32
            "0nrfvmqb70phnq0k4wbdj6z666wq6xvabg4pgv8qn62rbrw4yyhm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Org-mode and Cua mode compatibility layer")
    (description
      "Documentation at https://melpa.org/#/org-cua-dwim")
    (license #f)))

(define-public emacs-org-custom-cookies
  (package
    (name "emacs-org-custom-cookies")
    (version "20220928.114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gsingh93/org-custom-cookies.git")
               (commit
                 "e57e0de5b8200224bf5d44b62481c542986f2f13")))
        (sha256
          (base32
            "1r3m7nvx10yzxsasld3h59psml4r7kmz2wn79n5xkppkpb0dbymn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gsingh93/org-custom-cookies")
    (synopsis "Custom cookies for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-custom-cookies")
    (license #f)))

(define-public emacs-org-d20
  (package
    (name "emacs-org-d20")
    (version "20230616.754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.spwhitton.name/org-d20")
               (commit
                 "5993e2b83831c1937eb70ef23629008218210d22")))
        (sha256
          (base32
            "131p7641n8v237nwvs84agvfl1h5nz53smq89k6fpl3ifkkicl6f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://spwhitton.name/tech/code/org-d20/")
    (synopsis
      "minor mode for d20 tabletop roleplaying games")
    (description
      "Documentation at https://melpa.org/#/org-d20")
    (license #f)))

(define-public emacs-org-dashboard
  (package
    (name "emacs-org-dashboard")
    (version "20171223.1924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bard/org-dashboard.git")
               (commit
                 "02c0699771d199075a286e4502340ca6e7c9e831")))
        (sha256
          (base32
            "0zi23xgv5fq827dljhzp6m2v7ggr3pdw3fpgq8515gs9q4f12v1r"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bard/org-dashboard")
    (synopsis
      "Visually summarize progress in org files")
    (description
      "Documentation at https://melpa.org/#/org-dashboard")
    (license #f)))

(define-public emacs-org-doing
  (package
    (name "emacs-org-doing")
    (version "20161017.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/org-doing.git")
               (commit
                 "07ddbfc238cba31e4990c9b52e9a2757b39111da")))
        (sha256
          (base32
            "1d9gf6wf3jp07bn2h6bbc75iy0wwdvzdlj9n4nwbc46nf3k154pa"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page "https://github.com/omouse/org-doing")
    (synopsis "Keep track of what you're doing")
    (description
      "Documentation at https://melpa.org/#/org-doing")
    (license #f)))

(define-public emacs-org-dotemacs
  (package
    (name "emacs-org-dotemacs")
    (version "20211126.2038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/org-dotemacs.git")
               (commit
                 "598759f4a139f94da62836e8f8064da6377536b2")))
        (sha256
          (base32
            "1vikwxwmbkzpg000jv59h3ia3aap3ac3pqc6wia2ni5nw4gfbxcp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/org-dotemacs")
    (synopsis
      "Store your emacs config as an org file, and choose which bits to load.")
    (description
      "Documentation at https://melpa.org/#/org-dotemacs")
    (license #f)))

(define-public emacs-org-download
  (package
    (name "emacs-org-download")
    (version "20220906.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/org-download.git")
               (commit
                 "19e166f0a8c539b4144cfbc614309d47a9b2a9b7")))
        (sha256
          (base32
            "0a2nw2vf9j335yz40x10q0vmnhxkn9frrm82apvjqsl5p7igvzvs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/abo-abo/org-download")
    (synopsis "Image drag-and-drop for Org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-download")
    (license #f)))

(define-public emacs-org-dp
  (package
    (name "emacs-org-dp")
    (version "20180311.923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tj64/org-dp.git")
               (commit
                 "e720f1c155a795a5b65a04790ad195c413449716")))
        (sha256
          (base32
            "1d9fzgmg1hhr0nvas799filymhm6k6acm970gl444x4428fq03l7"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tj64/org-dp")
    (synopsis
      "Declarative Local Programming with Org Elements")
    (description
      "Documentation at https://melpa.org/#/org-dp")
    (license #f)))

(define-public emacs-org-drill
  (package
    (name "emacs-org-drill")
    (version "20210427.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/phillord/org-drill.git")
               (commit
                 "bf8fe812d44a3ce3e84361fb39b8ef28ca10fd0c")))
        (sha256
          (base32
            "079x6rcz50rpw0vdq5q2kjpixz95k9f3j9dwk91r5111vvr428w3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-persist))
    (home-page
      "https://gitlab.com/phillord/org-drill/issues")
    (synopsis "Self-testing using spaced repetition")
    (description
      "Documentation at https://melpa.org/#/org-drill")
    (license #f)))

(define-public emacs-org-drill-table
  (package
    (name "emacs-org-drill-table")
    (version "20180115.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/org-drill-table.git")
               (commit
                 "2729aaa42c1e2720d9bf7bcc125e92dcf48b7f7d")))
        (sha256
          (base32
            "0rqjzn3n42jcnwa5vg2731vxrnj6vy2bacfxmg0hlh3rkhhn0r53"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis "Generate drill cards from org tables")
    (description
      "Documentation at https://melpa.org/#/org-drill-table")
    (license #f)))

(define-public emacs-org-dropbox
  (package
    (name "emacs-org-dropbox")
    (version "20150114.509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/heikkil/org-dropbox.git")
               (commit
                 "75dab6d6f0438a7a8a18ccf3a5d55f50bf531f6e")))
        (sha256
          (base32
            "0jjdsng7fm4wbhvd9naqzdfsmkvj1sf1d9rikprg1pd58azv6idx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-names))
    (home-page
      "https://github.com/heikkil/org-dropbox")
    (synopsis
      "move Dropbox notes from phone into org-mode datetree")
    (description
      "Documentation at https://melpa.org/#/org-dropbox")
    (license #f)))

(define-public emacs-org-easy-img-insert
  (package
    (name "emacs-org-easy-img-insert")
    (version "20160915.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tashrifsanil/org-easy-img-insert.git")
               (commit
                 "9f8aaa7f68ff1f0d8d7b1e9b618abb15002f971e")))
        (sha256
          (base32
            "1p0hzfzlcdmd8d01a4xqg27n7qcnv7a03n8wiicv0dnicx179952"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tashrifsanil/org-easy-img-insert")
    (synopsis
      "An easier way to add images from the web in org mode")
    (description
      "Documentation at https://melpa.org/#/org-easy-img-insert")
    (license #f)))

(define-public emacs-org-edit-indirect
  (package
    (name "emacs-org-edit-indirect")
    (version "20220909.457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agzam/org-edit-indirect.el.git")
               (commit
                 "62894ac7b8b85eb03766f66072b0be10ffb6898e")))
        (sha256
          (base32
            "18wb167ansh0b5k8df2sc1v7ps3l0jb1l63gp09d1gcjdzfd6hvn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-edit-indirect))
    (home-page
      "https://github.com/agzam/org-edit-indirect.el")
    (synopsis
      "Edit anything, not just source blocks")
    (description
      "Documentation at https://melpa.org/#/org-edit-indirect")
    (license #f)))

(define-public emacs-org-edit-latex
  (package
    (name "emacs-org-edit-latex")
    (version "20170908.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/et2010/org-edit-latex.git")
               (commit
                 "1f228310ef2f3f2959a527f6d99e42ce977384c8")))
        (sha256
          (base32
            "1zfimgnmn7nqaq8aglyly55k5dr548467masr2g4x3m0z1by1z6b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/et2010/org-edit-latex")
    (synopsis
      "Edit embedded LaTeX in a dedicated buffer")
    (description
      "Documentation at https://melpa.org/#/org-edit-latex")
    (license #f)))

(define-public emacs-org-ehtml
  (package
    (name "emacs-org-ehtml")
    (version "20220216.2054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/org-ehtml.git")
               (commit
                 "419932d6dbce193b0d90b1ccf9bf643169d21f52")))
        (sha256
          (base32
            "09cq6i2yzlpzmj5xcym6s8fji86kqcv7jy7r8d9p64fx74khh6jp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-server))
    (arguments
      '(#:files
        ("src/*.el" "src/ox-ehtml.js" "src/ox-ehtml.css")))
    (home-page "unspecified")
    (synopsis
      "Export Org-mode files as editable web pages")
    (description
      "Documentation at https://melpa.org/#/org-ehtml")
    (license #f)))

(define-public emacs-org-elisp-help
  (package
    (name "emacs-org-elisp-help")
    (version "20161122.55")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/org-elisp-help.git")
               (commit
                 "3e33ab1a2933dd7f2782ef91d667a37f12d633ab")))
        (sha256
          (base32
            "088pbafz1x4z7qi70cjbrvfrcdrjp4zy0yl115klbidshqhxycmj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarsius/org-elisp-help")
    (synopsis
      "org links to emacs-lisp documentation")
    (description
      "Documentation at https://melpa.org/#/org-elisp-help")
    (license #f)))

(define-public emacs-org-elp
  (package
    (name "emacs-org-elp")
    (version "20210329.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guanyilun/org-elp.git")
               (commit
                 "36b5ab2ed3fa3b5917f058e3acf8dff2df69efae")))
        (sha256
          (base32
            "00qbabnac6i994ilrq1b7li1211ikc0frm5ilfafmh9v0y9k2spa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/guanyilun/org-elp")
    (synopsis
      "Preview latex equations in org mode while editing")
    (description
      "Documentation at https://melpa.org/#/org-elp")
    (license #f)))

(define-public emacs-org-emms
  (package
    (name "emacs-org-emms")
    (version "20230626.1102")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-emms-"
               version
               ".tar"))
        (sha256
          (base32
            "1xknjckf4mix88ang1snh0qmy62l2y0vdi0fi1paw6ang4ji606y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-emms))
    (home-page "https://git.sr.ht/~jagrg/org-emms")
    (synopsis
      "Playback multimedia files from Org documents")
    (description
      "Documentation at https://melpa.org/#/org-emms")
    (license #f)))

(define-public emacs-org-evil
  (package
    (name "emacs-org-evil")
    (version "20210809.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/org-evil.git")
               (commit
                 "981b0931d043d3b0eb61fcab6258b5a88cc74d15")))
        (sha256
          (base32
            "05y8k7r9yc8x11v344fnnpc3iq4lcanwhpgy5xnczbbxxlc8x3pk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-evil))
    (home-page
      "https://github.com/guiltydolphin/org-evil")
    (synopsis "Evil extensions for Org.")
    (description
      "Documentation at https://melpa.org/#/org-evil")
    (license #f)))

(define-public emacs-org-fancy-priorities
  (package
    (name "emacs-org-fancy-priorities")
    (version "20210830.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/harrybournis/org-fancy-priorities.git")
               (commit
                 "7f677c6c14ecf05eab8e0efbfe7f1b00ae68eb1d")))
        (sha256
          (base32
            "1sd7ndr1f07r4832kfi88q9il9v6slzghs1nc1aa81g7y8gb1q8l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/harrybournis/org-fancy-priorities")
    (synopsis
      "Display org priorities as custom strings")
    (description
      "Documentation at https://melpa.org/#/org-fancy-priorities")
    (license #f)))

(define-public emacs-org-fragtog
  (package
    (name "emacs-org-fragtog")
    (version "20220714.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/io12/org-fragtog.git")
               (commit
                 "c675563af3f9ab5558cfd5ea460e2a07477b0cfd")))
        (sha256
          (base32
            "1xag0pdphigk0ilrj2hacai3p6xgl27jji08aa1zlhq7p3rbay7m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/io12/org-fragtog")
    (synopsis "Auto-toggle Org LaTeX fragments")
    (description
      "Documentation at https://melpa.org/#/org-fragtog")
    (license #f)))

(define-public emacs-org-gamedb
  (package
    (name "emacs-org-gamedb")
    (version "20210525.2338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/repelliuss/org-gamedb.git")
               (commit
                 "f283b6f6a7e8ad090405be57202caa3d3c424447")))
        (sha256
          (base32
            "1sxjxh4yrb7zf4k17sa2wyxsf70krl3mg1jp6qs8qn37gyn2x3d4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/repelliuss/org-gamedb")
    (synopsis
      "Track video games in org-mode with giantbomb.com's API")
    (description
      "Documentation at https://melpa.org/#/org-gamedb")
    (license #f)))

(define-public emacs-org-gcal
  (package
    (name "emacs-org-gcal")
    (version "20221212.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kidd/org-gcal.el.git")
               (commit
                 "9bb3720525ad1c45823abab8ce910dd1225e7dcd")))
        (sha256
          (base32
            "0b7i1xc21vsjcvbkakkgzhidnypc5anmb9mdkh9mab09d7kxkbc7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-aio
            emacs-alert
            emacs-elnode
            emacs-persist
            emacs-request
            emacs-request-deferred))
    (home-page "https://github.com/kidd/org-gcal.el")
    (synopsis "Org sync with Google Calendar")
    (description
      "Documentation at https://melpa.org/#/org-gcal")
    (license #f)))

(define-public emacs-org-generate
  (package
    (name "emacs-org-generate")
    (version "20200815.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/org-generate.el.git")
               (commit
                 "98825efb73c4537f05f653ce40e639a220d2ee5d")))
        (sha256
          (base32
            "0p4xc4rznkq0vp0bbm1k69bfbmlp46lap12q75wdpkdrn5k4sr2p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mustache))
    (home-page
      "https://github.com/conao3/org-generate.el")
    (synopsis
      "Generate template files/folders from org document")
    (description
      "Documentation at https://melpa.org/#/org-generate")
    (license #f)))

(define-public emacs-org-gnome
  (package
    (name "emacs-org-gnome")
    (version "20150614.1457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/org-gnome.el.git")
               (commit
                 "122e14cf6f8104150a65246a9a7c10e1d7939862")))
        (sha256
          (base32
            "0jd5zwykc6fkkaj8qhg7wgmrjn47054x242b5s03w8ylyczqbcg3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert
            emacs-telepathy
            emacs-gnome-calendar))
    (home-page "unspecified")
    (synopsis
      "Orgmode integration with the GNOME desktop")
    (description
      "Documentation at https://melpa.org/#/org-gnome")
    (license #f)))

(define-public emacs-org-grep
  (package
    (name "emacs-org-grep")
    (version "20230821.2356")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-grep-"
               version
               ".tar"))
        (sha256
          (base32
            "07qsjwgkcmqbf371w0dhkgnxj8c5jh95xc4qjzh2xx30vipvyahn"))))
    (build-system melpa-build-system)
    (home-page "https://sr.ht/~minshall/org-grep/")
    (synopsis
      "Kind of M-x rgrep adapted for Org mode")
    (description
      "Documentation at https://melpa.org/#/org-grep")
    (license #f)))

(define-public emacs-org-gtd
  (package
    (name "emacs-org-gtd")
    (version "20230718.54")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Trevoke/org-gtd.el.git")
               (commit
                 "4f50c27d1afe90cf764cd10cecf91a085694c8bd")))
        (sha256
          (base32
            "1i6m7fzrjmd33hhcnjcqw0h8acjijndgy3qb9yz3gfybpv6nhzfl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-edna
            emacs-f
            emacs-org-agenda-property))
    (home-page
      "https://github.com/Trevoke/org-gtd.el")
    (synopsis "An implementation of GTD.")
    (description
      "Documentation at https://melpa.org/#/org-gtd")
    (license #f)))

(define-public emacs-org-habit-stats
  (package
    (name "emacs-org-habit-stats")
    (version "20230412.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ml729/org-habit-stats.git")
               (commit
                 "9cb389f1c409d1f7aaea28378b4d7c7e975aefd4")))
        (sha256
          (base32
            "182xj29gsdl726rj1npgwyi7jycd2vzllm16nl111h0h8zkdcq26"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ml729/org-habit-stats/")
    (synopsis "Display info about habits")
    (description
      "Documentation at https://melpa.org/#/org-habit-stats")
    (license #f)))

(define-public emacs-org-hyperscheduler
  (package
    (name "emacs-org-hyperscheduler")
    (version "20220704.2140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dmitrym0/org-hyperscheduler.git")
               (commit
                 "b7f33e7bf19b7ce7c81dbac4de765a854ee7f52f")))
        (sha256
          (base32
            "0h7r8rxb4aldr31awl8w7fk82nghh5g8ayz9yspyqr3ix4q4n8z7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket emacs-log4e))
    (arguments
      '(#:files
        (:defaults
          ("calendar"
           "calendar/index.html"
           "calendar/index.js"
           "calendar/org-hs.css"))))
    (home-page
      "https://github.com/dmitrym0/org-hyperscheduler")
    (synopsis
      "UI (web) representation of org-agenda")
    (description
      "Documentation at https://melpa.org/#/org-hyperscheduler")
    (license #f)))

(define-public emacs-org-id-cleanup
  (package
    (name "emacs-org-id-cleanup")
    (version "20230922.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcIhm/org-id-cleanup.git")
               (commit
                 "45b598c7971d149ce4eae5f790469d89f691c8e6")))
        (sha256
          (base32
            "1zqd9a4fm93l9psa1xg4lmmhvwq6hq465fkw791yqk6zp33s80y3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/marcIhm/org-id-cleanup")
    (synopsis
      "Interactively find, present and maybe delete unused IDs of org-id")
    (description
      "Documentation at https://melpa.org/#/org-id-cleanup")
    (license #f)))

(define-public emacs-org-if
  (package
    (name "emacs-org-if")
    (version "20150920.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/elzair/org-if.git")
               (commit
                 "fab602cc1bbee7a4e99c0083e129219d3f9ed2e8")))
        (sha256
          (base32
            "1iyqv34b7q2k73srshcnpvfzcadq47w4rzkqp6m1d3ajk8x2vypq"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Interactive Fiction Authoring System for Org-Mode.")
    (description
      "Documentation at https://melpa.org/#/org-if")
    (license #f)))

(define-public emacs-org-incoming
  (package
    (name "emacs-org-incoming")
    (version "20230209.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tinloaf/org-incoming.git")
               (commit
                 "5c5a5cc034a0b9ed808e5cbbf4876d489a6c7d28")))
        (sha256
          (base32
            "0fr1q5i29irxdng3b3r854sap66mhdrccb7i5w6vdkgvqdnp8dwn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-datetime emacs-s))
    (home-page
      "https://github.com/tinloaf/org-incoming")
    (synopsis
      "Sort incoming PDFs into your org files")
    (description
      "Documentation at https://melpa.org/#/org-incoming")
    (license #f)))

(define-public emacs-org-index
  (package
    (name "emacs-org-index")
    (version "20230830.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcIhm/org-index.git")
               (commit
                 "e7e77bc33a1bf50a337f74bf36f4b9912ce5a6f9")))
        (sha256
          (base32
            "0v105rfbh4v9dwf8493lcdz34zp3kgmsjf3k8sxfkk9jn10jj6mf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/marcIhm/org-index")
    (synopsis
      "Ranked and incremental search among selected org-headlines")
    (description
      "Documentation at https://melpa.org/#/org-index")
    (license #f)))

(define-public emacs-org-inline-anim
  (package
    (name "emacs-org-inline-anim")
    (version "20230610.1504")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shg/org-inline-anim.el.git")
               (commit
                 "7f6f357327d765ffd9385ba531691ff7ec140398")))
        (sha256
          (base32
            "1c5jjdkz7078dl86zvzyj4zg5bkqg7dhdymz0qj4n56j21n5n4w5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shg/org-inline-anim.el")
    (synopsis
      "Inline playback of animated GIF/PNG for Org")
    (description
      "Documentation at https://melpa.org/#/org-inline-anim")
    (license #f)))

(define-public emacs-org-inline-pdf
  (package
    (name "emacs-org-inline-pdf")
    (version "20230826.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shg/org-inline-pdf.el.git")
               (commit
                 "f4c2bac09c9b4c5d65b707b397fd44a3052bdf4e")))
        (sha256
          (base32
            "0dkfqz0avnkij1zp1f98l8f5a5vzgrk1ln3yx2f152z0slasmap8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shg/org-inline-pdf.el")
    (synopsis "Inline PDF previewing for Org")
    (description
      "Documentation at https://melpa.org/#/org-inline-pdf")
    (license #f)))

(define-public emacs-org-iv
  (package
    (name "emacs-org-iv")
    (version "20171001.1022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuangdash/org-iv.git")
               (commit
                 "7f2bb1b32647655fd9d6684f6f09dcc66b61b0cd")))
        (sha256
          (base32
            "0s3fi8sk7jm5vr0fz20fbygm4alhpirv0j20jfi1pab14yhhf34h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-impatient-mode))
    (arguments
      '(#:files
        (:defaults
          ("default"
           "default/org-iv-front-file"
           "default/org-back-file"
           ("css" "default/css/*")
           ("js" "default/js/*")))))
    (home-page "https://github.com/kuangdash/org-iv")
    (synopsis
      "a tool used to view html (in browser) generated by org-file once the org-file changes")
    (description
      "Documentation at https://melpa.org/#/org-iv")
    (license #f)))

(define-public emacs-org-ivy-search
  (package
    (name "emacs-org-ivy-search")
    (version "20230222.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beacoder/org-ivy-search.git")
               (commit
                 "7f2afd8c196e3723ae6ac4dd229367ece9acd3bf")))
        (sha256
          (base32
            "1k3l2zhwmnbxbslxrp07zsvg5xrzawiklskw90bpfvwakrbnsh88"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy emacs-beacon))
    (home-page
      "https://github.com/beacoder/org-ivy-search")
    (synopsis
      "Full text search for org files powered by ivy")
    (description
      "Documentation at https://melpa.org/#/org-ivy-search")
    (license #f)))

(define-public emacs-org-jami-bot
  (package
    (name "emacs-org-jami-bot")
    (version "20230605.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/hperrey/org-jami-bot.git")
               (commit
                 "6d80549e9aaacd04cff410b22e7f265373f4d73b")))
        (sha256
          (base32
            "037i664c99f05q03yvdz16jk2agdh7gr83n8ffp8kqlxx2ri0v9p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jami-bot))
    (home-page
      "https://gitlab.com/hperrey/org-jami-bot")
    (synopsis
      "Capture GNU Jami messages as notes and todos in Org mode")
    (description
      "Documentation at https://melpa.org/#/org-jami-bot")
    (license #f)))

(define-public emacs-org-jira
  (package
    (name "emacs-org-jira")
    (version "20230915.57")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/org-jira.git")
               (commit
                 "295b01ede42952c848bd8d76bc8c456a87876cbc")))
        (sha256
          (base32
            "1qyabrz49fmzyylf2kpm2ygwzlxx3v3aa71pi8r7dnxc5fzcc5z1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash))
    (arguments
      '(#:files
        ("jiralib.el" "org-jira.el" "org-jira-sdk.el")))
    (home-page "https://github.com/ahungry/org-jira")
    (synopsis "Syncing between Jira and Org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-jira")
    (license #f)))

(define-public emacs-org-journal
  (package
    (name "emacs-org-journal")
    (version "20231022.829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bastibe/org-journal.git")
               (commit
                 "a306f76ee2b0292946a20530bd9114aefc85a263")))
        (sha256
          (base32
            "0bym8v8hwwhshk65hpfg7dnyzyym0g0hz6h692jpiqrp0mcvnilc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bastibe/org-journal")
    (synopsis
      "a simple org-mode based journaling mode")
    (description
      "Documentation at https://melpa.org/#/org-journal")
    (license #f)))

(define-public emacs-org-journal-list
  (package
    (name "emacs-org-journal-list")
    (version "20190221.2052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/huytd/org-journal-list.git")
               (commit
                 "2b26d00181bb49bff64b31ad020490acd1b6ae02")))
        (sha256
          (base32
            "0bcj9b7c4pyyvxlgnysl5lhs9ndp60xwizd85zrkd2mh2m8sbq9v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/huytd/org-journal-list")
    (synopsis "Org mode Journal List")
    (description
      "Documentation at https://melpa.org/#/org-journal-list")
    (license #f)))

(define-public emacs-org-journal-tags
  (package
    (name "emacs-org-journal-tags")
    (version "20230704.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/org-journal-tags.git")
               (commit
                 "f6433d0810f87a80847f4f3674db4ac89a59c69c")))
        (sha256
          (base32
            "1x9pa6n67sba8wjgcysg5w4fkszr9h3wyj0a8w3zx3icfs675r6a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-journal emacs-magit-section))
    (home-page
      "https://github.com/SqrtMinusOne/org-journal-tags")
    (synopsis
      "Tagging and querying system for org-journal")
    (description
      "Documentation at https://melpa.org/#/org-journal-tags")
    (license #f)))

(define-public emacs-org-kanban
  (package
    (name "emacs-org-kanban")
    (version "20220723.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gizmomogwai/org-kanban.git")
               (commit
                 "e78deb03880ae89d6bceae6563ef1383526233a1")))
        (sha256
          (base32
            "006y8glnd3h5nmcb0fdq650xnknhi5n74v7adk1maf26r8rpc6vy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "http://github.com/gizmomogwai/org-kanban")
    (synopsis "kanban dynamic block for org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-kanban")
    (license #f)))

(define-public emacs-org-kindle
  (package
    (name "emacs-org-kindle")
    (version "20220210.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/org-kindle.git")
               (commit
                 "fadcfd62e254d0c45e87d63128a82a08ae21869a")))
        (sha256
          (base32
            "0f61xy0hv3pjbhx9wmhpbi43nis90rsx1ljw9kirp99h64gg0jgd"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/org-kindle.git")
    (synopsis "Send org link file to ebook reader.")
    (description
      "Documentation at https://melpa.org/#/org-kindle")
    (license #f)))

(define-public emacs-org-latex-impatient
  (package
    (name "emacs-org-latex-impatient")
    (version "20221111.623")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yangsheng6810/org-latex-impatient.git")
               (commit
                 "031025a8be9bf7255aa047388d027642cd2d6183")))
        (sha256
          (base32
            "1hr4xk89zphahaa8n1fjwf6y7bfvnn30ck8pysjlfwa5510fpw0w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-posframe emacs-dash))
    (home-page
      "https://github.com/yangsheng6810/org-latex-instant-preview")
    (synopsis
      "Preview org-latex Fragments Instantly via MathJax")
    (description
      "Documentation at https://melpa.org/#/org-latex-impatient")
    (license #f)))

(define-public emacs-org-link-beautify
  (package
    (name "emacs-org-link-beautify")
    (version "20231030.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/org-link-beautify.git")
               (commit
                 "670bd54601cdcc129016bbbe6334f3277e88590b")))
        (sha256
          (base32
            "1lgys9d8qvw7jry50qfh1xq5znp23n8yi1rz6w7zq57b40na1rck"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nerd-icons emacs-fb2-reader))
    (arguments '(#:files (:defaults "scripts")))
    (home-page
      "https://repo.or.cz/org-link-beautify.git")
    (synopsis "Beautify Org Links")
    (description
      "Documentation at https://melpa.org/#/org-link-beautify")
    (license #f)))

(define-public emacs-org-link-travis
  (package
    (name "emacs-org-link-travis")
    (version "20140405.2327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/org-link-travis.git")
               (commit
                 "596615ad8373d9090bd4138da683524f0ad0bda5")))
        (sha256
          (base32
            "1797pd264zn19zk93nifyw6pwk2a7wrpfir373qclk601yv2g5h8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aki2o/org-link-travis")
    (synopsis
      "Insert/Export the link of Travis CI on org-mode")
    (description
      "Documentation at https://melpa.org/#/org-link-travis")
    (license #f)))

(define-public emacs-org-linkotron
  (package
    (name "emacs-org-linkotron")
    (version "20200112.2235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/perweij/org-linkotron.git")
               (commit
                 "d0adc5247b205bc73d2f1a83d4a512d2be541eb5")))
        (sha256
          (base32
            "1w80kwh17b4svw0md7is8ajc732cbkknychsqcp1ia42qxqq4y8r"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/perweij/org-linkotron")
    (synopsis "Org-mode link selector")
    (description
      "Documentation at https://melpa.org/#/org-linkotron")
    (license #f)))

(define-public emacs-org-listcruncher
  (package
    (name "emacs-org-listcruncher")
    (version "20210706.1741")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org-listcruncher.git")
               (commit
                 "075e0e6d36eb50406a608bc8a2f0dd359ec63938")))
        (sha256
          (base32
            "133smvw9iaxg0p3y5wl0rc4fwwgbxgw6hxngpmar8qf4grwy4w27"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dfeich/org-listcruncher")
    (synopsis
      "Planning tool - Parse Org mode lists into table")
    (description
      "Documentation at https://melpa.org/#/org-listcruncher")
    (license #f)))

(define-public emacs-org-mac-link
  (package
    (name "emacs-org-mac-link")
    (version "20231016.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/org-mac-link.git")
               (commit
                 "e30171a6e98db90787ab8a23b3a7dc4fd13b10f9")))
        (sha256
          (base32
            "1d64a7h2p5fvypw1cwflj38qblbl9h5hv595yh8pficd5hia68xp"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aimebertrand/org-mac-link")
    (synopsis
      "Insert org-mode links to items selected in various Mac apps")
    (description
      "Documentation at https://melpa.org/#/org-mac-link")
    (license #f)))

(define-public emacs-org-make-toc
  (package
    (name "emacs-org-make-toc")
    (version "20231025.2326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-make-toc.git")
               (commit
                 "df29826107ad12fd1d5f173a9a8e070b84f21a68")))
        (sha256
          (base32
            "1bsn8z7nc2qngjdkd7sq14f53i8pgjchka1s3l6cqxbjv9gvm0q5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "http://github.com/alphapapa/org-make-toc")
    (synopsis
      "Automatic tables of contents for Org files")
    (description
      "Documentation at https://melpa.org/#/org-make-toc")
    (license #f)))

(define-public emacs-org-mime
  (package
    (name "emacs-org-mime")
    (version "20230321.2341")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-mime/org-mime.git")
               (commit
                 "d368bd4119bfcf2997a6a23bbf5f41e043164d29")))
        (sha256
          (base32
            "04vdppy4phdpc03l2z1pz49gczb4rwazd4yvin4qnq7v8v4ia018"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/org-mime/org-mime")
    (synopsis
      "org html export for text/html MIME emails")
    (description
      "Documentation at https://melpa.org/#/org-mime")
    (license #f)))

(define-public emacs-org-mind-map
  (package
    (name "emacs-org-mind-map")
    (version "20180826.2340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/the-ted/org-mind-map.git")
               (commit
                 "95347b2f9291f5c5eb6ebac8e726c03634c61de3")))
        (sha256
          (base32
            "0mkmh1ascxhfgbqdzcr6d60k4ldnh3l8dylw4m7wglz15hm3ixbm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/theodorewiles/org-mind-map")
    (synopsis
      "Creates a directed graph from org-mode files")
    (description
      "Documentation at https://melpa.org/#/org-mind-map")
    (license #f)))

(define-public emacs-org-ml
  (package
    (name "emacs-org-ml")
    (version "20230410.30")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndwarshuis/org-ml.git")
               (commit
                 "f57336a9126a168ad32ccce017c072474555395a")))
        (sha256
          (base32
            "16j03fdikha5hwg8ifj0shsn4prbgf7dsggy3ksidpl63w3g05h4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/ndwarshuis/org-ml")
    (synopsis "Functional Org Mode API")
    (description
      "Documentation at https://melpa.org/#/org-ml")
    (license #f)))

(define-public emacs-org-mobile-sync
  (package
    (name "emacs-org-mobile-sync")
    (version "20180606.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/org-mobile-sync.git")
               (commit
                 "06764b943a528827df1e2acc6bc7806cc2c1351f")))
        (sha256
          (base32
            "0qdgs965ppihsz2ihyykdinr4n7nbb89d384z7kn985b17263lvn"))))
    (build-system melpa-build-system)
    (home-page
      "https://framagit.org/steckerhalter/org-mobile-sync")
    (synopsis
      "automatically sync org-mobile on changes")
    (description
      "Documentation at https://melpa.org/#/org-mobile-sync")
    (license #f)))

(define-public emacs-org-modern
  (package
    (name "emacs-org-modern")
    (version "20230905.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/org-modern.git")
               (commit
                 "afa7d44282d62dbba84afec2a1a6c2a3ee41e7b9")))
        (sha256
          (base32
            "09jdsh0x5v9sd8sj0f1dcn69rixmlj3w1znflk6gjy249y1l0mb4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/org-modern")
    (synopsis "Modern looks for Org")
    (description
      "Documentation at https://melpa.org/#/org-modern")
    (license #f)))

(define-public emacs-org-movies
  (package
    (name "emacs-org-movies")
    (version "20210920.101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/teeann/org-movies.git")
               (commit
                 "e96fecaffa2924de64a507aa31d2934e667ee1ea")))
        (sha256
          (base32
            "1h514knqys20nv9qknxdl5y6rgmyymyr42i07dar8hln9vj0ywqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/teeann/org-movies")
    (synopsis "Manage watchlist with Org mode")
    (description
      "Documentation at https://melpa.org/#/org-movies")
    (license #f)))

(define-public emacs-org-mpv-notes
  (package
    (name "emacs-org-mpv-notes")
    (version "20230907.530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bpanthi977/org-mpv-notes.git")
               (commit
                 "072cecf7097829c463fc38f4bb5026b2311036b6")))
        (sha256
          (base32
            "09siywwlks32rzr95aigb7lmhiq4b39jcbb5b16wik9z9vzjiq30"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-mpv))
    (home-page
      "https://github.com/bpanthi977/org-mpv-notes")
    (synopsis
      "Take notes in org mode while watching videos in mpv")
    (description
      "Documentation at https://melpa.org/#/org-mpv-notes")
    (license #f)))

(define-public emacs-org-mru-clock
  (package
    (name "emacs-org-mru-clock")
    (version "20230704.850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/org-mru-clock.git")
               (commit
                 "66fe744df9100efc4ec68089f7d0ce56a0d38b8b")))
        (sha256
          (base32
            "03xb95qxsr86xv3g0x36dlrm5sidd9fhnfxawjiqkj02bpp9by1n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/unhammer/org-mru-clock")
    (synopsis
      "Clock in/out of tasks with completion and persistent history")
    (description
      "Documentation at https://melpa.org/#/org-mru-clock")
    (license #f)))

(define-public emacs-org-msg
  (package
    (name "emacs-org-msg")
    (version "20230530.2006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeremy-compostella/org-msg.git")
               (commit
                 "055de4abf611c5d5e12c770fe149c1861b402817")))
        (sha256
          (base32
            "045x922wag8wqa0hsvcira3wiycjvvxbfgawny379x2bwixikpf0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page
      "https://github.com/jeremy-compostella/org-msg")
    (synopsis
      "Org mode to send and reply to email in HTML.")
    (description
      "Documentation at https://melpa.org/#/org-msg")
    (license #f)))

(define-public emacs-org-multi-wiki
  (package
    (name "emacs-org-multi-wiki")
    (version "20210324.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-multi-wiki.git")
               (commit
                 "bf8039aadddaf02569fab473f766071ef7e63563")))
        (sha256
          (base32
            "0hmn9yy2d7wy6zz81ddd96rksmvs9k5529dfqrkrpl4v3bn3g52d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-org-ql))
    (arguments '(#:files ("org-multi-wiki.el")))
    (home-page
      "https://github.com/akirak/org-multi-wiki")
    (synopsis "Multiple wikis based on Org mode")
    (description
      "Documentation at https://melpa.org/#/org-multi-wiki")
    (license #f)))

(define-public emacs-org-multiple-keymap
  (package
    (name "emacs-org-multiple-keymap")
    (version "20191017.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/org-multiple-keymap.git")
               (commit
                 "4eb8aa0aada012b2346cc7f0c55e07783141a2c3")))
        (sha256
          (base32
            "0ivgvwrakgr527lylz9si1z3ip3n7bx02pj1acw8ab8swp1cxmy3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myuhe/org-multiple-keymap.el")
    (synopsis
      "Set keymap to elements, such as timestamp and priority.")
    (description
      "Documentation at https://melpa.org/#/org-multiple-keymap")
    (license #f)))

(define-public emacs-org-newtab
  (package
    (name "emacs-org-newtab")
    (version "20231007.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Zweihander-Main/org-newtab.git")
               (commit
                 "3bac820b6db4c70b19211b6baf05fb09ddcf4486")))
        (sha256
          (base32
            "1rc41pb82np05crvz9ijjrizha0rk0j0y6n4h5xnl4dprlj0k1z3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket emacs-async))
    (home-page
      "https://github.com/Zweihander-Main/org-newtab")
    (synopsis
      "Supercharge your browser's new tab page")
    (description
      "Documentation at https://melpa.org/#/org-newtab")
    (license #f)))

(define-public emacs-org-notebook
  (package
    (name "emacs-org-notebook")
    (version "20170322.452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Rahi374/org-notebook.git")
               (commit
                 "86042d866bf441e2c9bb51f995e5994141b78517")))
        (sha256
          (base32
            "0znxn6zzc9645m3wmkryf4xwjskf7gwylrg6z2kmr1wpjlpfwb01"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Ease the use of org-mode as a notebook")
    (description
      "Documentation at https://melpa.org/#/org-notebook")
    (license #f)))

(define-public emacs-org-noter
  (package
    (name "emacs-org-noter")
    (version "20231104.2212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-noter/org-noter.git")
               (commit
                 "a4296d8338d46b5c863d3d339b50e201172f218c")))
        (sha256
          (base32
            "1y1qsl6444jxqcs0c3aigr9qk6m3a8kjynmn31zk64nlgnybsndc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         "modules"
         (:exclude "*-test-utils.el" "*-devel.el"))))
    (home-page
      "https://github.com/org-noter/org-noter")
    (synopsis
      "A synchronized, Org-mode, document annotator")
    (description
      "Documentation at https://melpa.org/#/org-noter")
    (license #f)))

(define-public emacs-org-noter-pdftools
  (package
    (name "emacs-org-noter-pdftools")
    (version "20230725.1433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fuxialexander/org-pdftools.git")
               (commit
                 "4e420233a153a9c4ab3d1a7e1d7d3211c836f0ac")))
        (sha256
          (base32
            "0n8apjqlm7rs66l635szvsvc4qn8m147g07rgkd30a4v4m24mj8x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools
            emacs-org-pdftools
            emacs-org-noter))
    (arguments '(#:files ("org-noter-pdftools.el")))
    (home-page
      "https://github.com/fuxialexander/org-pdftools")
    (synopsis
      "Integration between org-pdftools and org-noter")
    (description
      "Documentation at https://melpa.org/#/org-noter-pdftools")
    (license #f)))

(define-public emacs-org-notifications
  (package
    (name "emacs-org-notifications")
    (version "20210918.1827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/doppelc/org-notifications.git")
               (commit
                 "b8032f8adfbeb328962a5657c6dd173e64cc76e5")))
        (sha256
          (base32
            "0px7syqcz300mxcns1bm0yn3i9n2j5cx58lzjjqpp6v36xn6x4k8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sound-wav emacs-alert))
    (arguments '(#:files (:defaults "sounds")))
    (home-page
      "https://github.com/doppelc/org-notifications")
    (synopsis
      "Creates notifications for org-mode entries")
    (description
      "Documentation at https://melpa.org/#/org-notifications")
    (license #f)))

(define-public emacs-org-octopress
  (package
    (name "emacs-org-octopress")
    (version "20170821.415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/org-octopress.git")
               (commit
                 "38598ef98d04076a8eb78d549907ddfde8d3a652")))
        (sha256
          (base32
            "0bmj5wkwidj1v3b8ipligr0nkfdaxm82717nz8fqidz967q4xbk6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-orglue emacs-ctable))
    (arguments
      '(#:files ("*.el" "setup-sample.org")))
    (home-page "unspecified")
    (synopsis
      "Compose octopress articles using org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-octopress")
    (license #f)))

(define-public emacs-org-onenote
  (package
    (name "emacs-org-onenote")
    (version "20171008.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ifree/org-onenote.git")
               (commit
                 "5ce5cf4edb143180e0b185ac26826d39ae5bc929")))
        (sha256
          (base32
            "1jlnnb04ichcl155lklvjw91l8j1dvg77bv1815chak226aq4xqj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-oauth2 emacs-request))
    (home-page
      "https://github.com/ifree/org-onenote")
    (synopsis "export org-mode document to onenote.")
    (description
      "Documentation at https://melpa.org/#/org-onenote")
    (license #f)))

(define-public emacs-org-outline-numbering
  (package
    (name "emacs-org-outline-numbering")
    (version "20180705.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/andersjohansson/org-outline-numbering.git")
               (commit
                 "22014917dd7e751c46fa13e1e836c2d0265ce82f")))
        (sha256
          (base32
            "0gjvd7xd9kl06cgdyya2qbl7r4a9y4zfq1ci0109w5axs3zjin1m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ov))
    (home-page
      "https://gitlab.com/andersjohansson/org-outline-numbering")
    (synopsis
      "Show outline numbering as overlays in org-mode")
    (description
      "Documentation at https://melpa.org/#/org-outline-numbering")
    (license #f)))

(define-public emacs-org-outlook
  (package
    (name "emacs-org-outlook")
    (version "20160705.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/org-outlook.el.git")
               (commit
                 "ec32d8d9d8ffd17e6de4de0b52fc3f5ad9b4cc0d")))
        (sha256
          (base32
            "1la7g9qzn8wbfzc2zd6gddi1zl145b35311l66sjyffidmhgfw8d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mlf176f2/org-outlook.el")
    (synopsis "Outlook org")
    (description
      "Documentation at https://melpa.org/#/org-outlook")
    (license #f)))

(define-public emacs-org-page
  (package
    (name "emacs-org-page")
    (version "20230829.942")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/org-page.git")
               (commit
                 "7a73b110df12c29804d32ecfb051d3320dce3892")))
        (sha256
          (base32
            "1ygil7c3hilfx630qld90f0y0klkll7svf3zvs885y9z7w30y5im"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-simple-httpd
            emacs-mustache
            emacs-htmlize
            emacs-dash
            emacs-git))
    (arguments '(#:files ("*.el" "doc" "themes")))
    (home-page "https://github.com/kelvinh/org-page")
    (synopsis
      "a static site generator based on org mode")
    (description
      "Documentation at https://melpa.org/#/org-page")
    (license #f)))

(define-public emacs-org-parser
  (package
    (name "emacs-org-parser")
    (version "20200417.301")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-parser-"
               version
               ".el"))
        (sha256
          (base32
            "00aiiga5bccm17xv35123xk7ps7h96q829kwh3q7khdh1gyy3jqd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ht))
    (home-page "https://hg.sr.ht/~zck/org-parser")
    (synopsis
      "parse org files into structured datatypes.")
    (description
      "Documentation at https://melpa.org/#/org-parser")
    (license #f)))

(define-public emacs-org-pdftools
  (package
    (name "emacs-org-pdftools")
    (version "20220320.301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fuxialexander/org-pdftools.git")
               (commit
                 "967f48fb5038bba32915ee9da8dc4e8b10ba3376")))
        (sha256
          (base32
            "0f47ww8r00b7lb1msybnmnqdhm9i2vwz5lrz9m9bn6gbh97mzhn8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-org-noter))
    (arguments '(#:files ("org-pdftools.el")))
    (home-page
      "https://github.com/fuxialexander/org-pdftools")
    (synopsis
      "Support for links to documents in pdfview mode")
    (description
      "Documentation at https://melpa.org/#/org-pdftools")
    (license #f)))

(define-public emacs-org-picklink
  (package
    (name "emacs-org-picklink")
    (version "20210210.516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/org-picklink.git")
               (commit
                 "bfdc22b436482752be41c5d6f6f37dca76b1c7c3")))
        (sha256
          (base32
            "1asq336rff0f1zh5crsj3xwyx4xiwdypzy6dlqrxzszkxx8sd4dd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/org-picklink")
    (synopsis "Pick a headline link from org-agenda")
    (description
      "Documentation at https://melpa.org/#/org-picklink")
    (license #f)))

(define-public emacs-org-pivotal
  (package
    (name "emacs-org-pivotal")
    (version "20210705.408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-pivotal/org-pivotal.git")
               (commit
                 "6403cefb8440567fc593a8d267536138cd6165e2")))
        (sha256
          (base32
            "0a95gnvgfvj3f9xy5hl4d7367j8sfysf5ghnz6hxiz6ilhngfnz7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-a emacs-dash emacs-request))
    (home-page
      "https://github.com/org-pivotal/org-pivotal")
    (synopsis "Sync Pivotal Tracker to org buffer")
    (description
      "Documentation at https://melpa.org/#/org-pivotal")
    (license #f)))

(define-public emacs-org-pomodoro
  (package
    (name "emacs-org-pomodoro")
    (version "20220318.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcinkoziej/org-pomodoro.git")
               (commit
                 "3f5bcfb80d61556d35fc29e5ddb09750df962cc6")))
        (sha256
          (base32
            "1x3ny357s0h73129mhah6rjipjd0jw6gh3msr6sahwx36nsdrp4m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (arguments '(#:files (:defaults "resources")))
    (home-page
      "https://github.com/lolownia/org-pomodoro")
    (synopsis
      "Pomodoro implementation for org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-pomodoro")
    (license #f)))

(define-public emacs-org-present
  (package
    (name "emacs-org-present")
    (version "20220806.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rlister/org-present.git")
               (commit
                 "4ec04e1b77dea76d7c30066ccf3200d2e0b7bee9")))
        (sha256
          (base32
            "0bcrgwc80968zx52lwg71cs7v2yrygynzbnrakxdja1l5a6h3xy6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rlister/org-present")
    (synopsis
      "Minimalist presentation minor-mode for Emacs org-mode.")
    (description
      "Documentation at https://melpa.org/#/org-present")
    (license #f)))

(define-public emacs-org-present-remote
  (package
    (name "emacs-org-present-remote")
    (version "20221107.1139")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-present-remote-"
               version
               ".el"))
        (sha256
          (base32
            "0nllv7v1cnb335dghnx7b48c3630w42rcz3rqzjpdaiph9kymsda"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-present
            emacs-elnode
            emacs-fakir
            emacs-s
            emacs-web))
    (home-page
      "https://gitlab.com/duncan-bayne/org-present-remote")
    (synopsis
      "A web-based remote control for org-present")
    (description
      "Documentation at https://melpa.org/#/org-present-remote")
    (license #f)))

(define-public emacs-org-pretty-tags
  (package
    (name "emacs-org-pretty-tags")
    (version "20211228.1546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/org-pretty-tags.git")
               (commit
                 "e127a1e08df8273b909a99594ffaad84960ff212")))
        (sha256
          (base32
            "0wf58yrl05c6kw317szyyfipwn2sgi3d7sc49qw2ivk4w10ffwcg"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/org-pretty-tags")
    (synopsis "Surrogates for tags")
    (description
      "Documentation at https://melpa.org/#/org-pretty-tags")
    (license #f)))

(define-public emacs-org-preview-html
  (package
    (name "emacs-org-preview-html")
    (version "20220809.1033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jakebox/org-preview-html.git")
               (commit
                 "785e1f5c99c0f2d76a9a6611a06b4552a343e221")))
        (sha256
          (base32
            "113nzbwpirbzbff6193rmn2ardzs9bi9if6b9l4qz7aa42ff4zr7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jakebox/org-preview-html")
    (synopsis
      "Automatically preview org-exported HTML files within Emacs")
    (description
      "Documentation at https://melpa.org/#/org-preview-html")
    (license #f)))

(define-public emacs-org-project-capture
  (package
    (name "emacs-org-project-capture")
    (version "20230830.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/org-project-capture.git")
               (commit
                 "bf1c30b750020ab8dd634dd66b2c7b76c56286c5")))
        (sha256
          (base32
            "1wvw5y5s37p9j0m2ljp7n1s1casbhiyrcnfpvdghvdd0fk8wcybp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-org-category-capture))
    (arguments
      '(#:files
        ("org-project-capture.el"
         "org-project-capture-backend.el")))
    (home-page
      "https://github.com/colonelpanic8/org-project-capture")
    (synopsis
      "Repository todo capture and management for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-project-capture")
    (license #f)))

(define-public emacs-org-projectile
  (package
    (name "emacs-org-projectile")
    (version "20230817.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/org-project-capture.git")
               (commit
                 "4ca2667d498fa259772e46ff5e101285446d70b6")))
        (sha256
          (base32
            "1p56ng1v0795bkgkk18w6494hvq5j3j6h48yhr8smz69k46amm3y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-dash
            emacs-org-project-capture
            emacs-org-category-capture))
    (arguments '(#:files ("org-projectile*.el")))
    (home-page
      "https://github.com/colonelpanic8/org-project-capture")
    (synopsis
      "Repository todo capture and management for org-mode with projectile")
    (description
      "Documentation at https://melpa.org/#/org-projectile")
    (license #f)))

(define-public emacs-org-projectile-helm
  (package
    (name "emacs-org-projectile-helm")
    (version "20230817.801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/org-projectile.git")
               (commit
                 "4ca2667d498fa259772e46ff5e101285446d70b6")))
        (sha256
          (base32
            "1p56ng1v0795bkgkk18w6494hvq5j3j6h48yhr8smz69k46amm3y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-projectile emacs-helm))
    (arguments
      '(#:files ("org-projectile-helm*.el")))
    (home-page
      "https://github.com/IvanMalison/org-projectile")
    (synopsis "helm functions for org-projectile")
    (description
      "Documentation at https://melpa.org/#/org-projectile-helm")
    (license #f)))

(define-public emacs-org-protocol-jekyll
  (package
    (name "emacs-org-protocol-jekyll")
    (version "20170328.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vonavi/org-protocol-jekyll.git")
               (commit
                 "dec064a42d6dfe81dfde7ba59ece5ca103ac6334")))
        (sha256
          (base32
            "1pgc0lfbz6q2x8b5qkk766i5qylql4p0ng732rcqr7rzg6j31gm7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Jekyll's handler for org-protocol")
    (description
      "Documentation at https://melpa.org/#/org-protocol-jekyll")
    (license #f)))

(define-public emacs-org-ql
  (package
    (name "emacs-org-ql")
    (version "20231106.2230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-ql.git")
               (commit
                 "4f62ba3bd6d639b021ee9f159357b2a80d7a2f92")))
        (sha256
          (base32
            "1b4qq5y296v7kx458pj4f1ikx1a6xsg6zndnrjzjbdmkgazpaz5m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-f
            emacs-org-super-agenda
            emacs-ov
            emacs-peg
            emacs-s
            emacs-ts))
    (arguments
      '(#:files (:defaults (:exclude "helm-org-ql.el"))))
    (home-page "https://github.com/alphapapa/org-ql")
    (synopsis
      "Org Query Language, search command, and agenda-like view")
    (description
      "Documentation at https://melpa.org/#/org-ql")
    (license #f)))

(define-public emacs-org-radiobutton
  (package
    (name "emacs-org-radiobutton")
    (version "20210519.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/org-radiobutton.git")
               (commit
                 "4ba26bbd26102c45c234bc6ce9a8e9c655c6a0a2")))
        (sha256
          (base32
            "0zhf4yfs6a50b5lq4yp9cmm6sv1j94hak6c353df76nssg4vbil5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/org-radiobutton")
    (synopsis "Radiobutton for org-mode lists.")
    (description
      "Documentation at https://melpa.org/#/org-radiobutton")
    (license #f)))

(define-public emacs-org-rainbow-tags
  (package
    (name "emacs-org-rainbow-tags")
    (version "20230921.2038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KaratasFurkan/org-rainbow-tags.git")
               (commit
                 "fd0b68921302fdc3f0d086db7a09b5196251160f")))
        (sha256
          (base32
            "01hrk4hw7ama2zsiccc0d7r95a5rg268laz0hiy4rai6c30fs2zm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/KaratasFurkan/org-rainbow-tags")
    (synopsis "Colorize org tags automatically")
    (description
      "Documentation at https://melpa.org/#/org-rainbow-tags")
    (license #f)))

(define-public emacs-org-random-todo
  (package
    (name "emacs-org-random-todo")
    (version "20190214.2057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/org-random-todo.git")
               (commit
                 "a019c7186ec60c8c7c3657914cdce029811cf4e0")))
        (sha256
          (base32
            "0jyd7cbri0bmi0qzwm7d4fxdfa1224bg6izd63pqqg1x7s67x99z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (arguments '(#:files ("org-random-todo.el")))
    (home-page
      "https://github.com/unhammer/org-random-todo")
    (synopsis
      "show a random TODO (with alert) every so often")
    (description
      "Documentation at https://melpa.org/#/org-random-todo")
    (license #f)))

(define-public emacs-org-randomnote
  (package
    (name "emacs-org-randomnote")
    (version "20200110.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mwfogleman/org-randomnote.git")
               (commit
                 "ea8cf4385970637efffff8f79e14576ba6d7ad13")))
        (sha256
          (base32
            "0q6xfwf35dy13hif3qrkqyhlwpmpcfsaw3lfwgv0dhi0g7h5bpry"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-dash))
    (home-page
      "http://github.com/mwfogleman/org-randomnote")
    (synopsis
      "Find a random note in your Org-Mode files")
    (description
      "Documentation at https://melpa.org/#/org-randomnote")
    (license #f)))

(define-public emacs-org-re-reveal
  (package
    (name "emacs-org-re-reveal")
    (version "20230925.1309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/oer/org-re-reveal.git")
               (commit
                 "d5c40e2c05ef9b45dc28e7dad2b50330b51dc515")))
        (sha256
          (base32
            "1ss71iy1xnhr3p4mmfbnbgvp7kjqxpqag49f851wgmmwwg8gajvd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page
      "https://gitlab.com/oer/org-re-reveal")
    (synopsis
      "Org export to reveal.js presentations")
    (description
      "Documentation at https://melpa.org/#/org-re-reveal")
    (license #f)))

(define-public emacs-org-re-reveal-citeproc
  (package
    (name "emacs-org-re-reveal-citeproc")
    (version "20211028.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/oer/org-re-reveal-citeproc.git")
               (commit
                 "faa9ea387917b20bd1499ad90199ff3d417c00c2")))
        (sha256
          (base32
            "09yvfp4nh3g2jfs4v8jx70y6vyahypwvfjwrcqg5z0sqssbmxhnc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-citeproc emacs-org-re-reveal))
    (arguments
      '(#:files
        (:defaults
          "README.org"
          "local.css"
          "references.bib")))
    (home-page
      "https://gitlab.com/oer/org-re-reveal-citeproc")
    (synopsis
      "Citations and bibliography for org-re-reveal")
    (description
      "Documentation at https://melpa.org/#/org-re-reveal-citeproc")
    (license #f)))

(define-public emacs-org-re-reveal-ref
  (package
    (name "emacs-org-re-reveal-ref")
    (version "20211029.551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/oer/org-re-reveal-ref.git")
               (commit
                 "ea9661864d5fbef87b12b78f516c13a40c683f24")))
        (sha256
          (base32
            "1vaszb0n5p48mrf5hzci2yyh51b32ws1fk6r4q0gky41ixz243v8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ref emacs-org-re-reveal))
    (arguments
      '(#:files
        (:defaults
          "LICENSES"
          "README.org"
          "references.bib")))
    (home-page
      "https://gitlab.com/oer/org-re-reveal-ref")
    (synopsis
      "Citations and bibliography for org-re-reveal")
    (description
      "Documentation at https://melpa.org/#/org-re-reveal-ref")
    (license #f)))

(define-public emacs-org-recent-headings
  (package
    (name "emacs-org-recent-headings")
    (version "20211011.1519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-recent-headings.git")
               (commit
                 "97418d581ea030f0718794e50b005e9bae44582e")))
        (sha256
          (base32
            "1y11rlnhi36lzhc1cagninv6hlcwbvj88xfr0g0xzpbzy7hys021"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-frecency emacs-s))
    (arguments
      '(#:files
        (:defaults
          (:exclude "helm-org-recent-headings.el"))))
    (home-page
      "http://github.com/alphapapa/org-recent-headings")
    (synopsis "Jump to recently used Org headings")
    (description
      "Documentation at https://melpa.org/#/org-recent-headings")
    (license #f)))

(define-public emacs-org-recur
  (package
    (name "emacs-org-recur")
    (version "20230124.1532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrcnski/org-recur.git")
               (commit
                 "628099883a63d219f76cd9631cc914fe6ec8a3e3")))
        (sha256
          (base32
            "0s2n62y3qc72ldzpaq2jz9335h532s566499n346nx21l4qsqdz6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mrcnski/org-recur")
    (synopsis "Recurring org-mode tasks")
    (description
      "Documentation at https://melpa.org/#/org-recur")
    (license #f)))

(define-public emacs-org-redmine
  (package
    (name "emacs-org-redmine")
    (version "20160711.1114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gongo/org-redmine.git")
               (commit
                 "e77d013bc3784947c46a5c53f03cd7d3c68552fc")))
        (sha256
          (base32
            "06miv3mf2a39vkf6mmm5ssc47inqh7dq82khsyc03anz4d4lj822"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gongo/org-redmine")
    (synopsis "Redmine tools using Emacs OrgMode")
    (description
      "Documentation at https://melpa.org/#/org-redmine")
    (license #f)))

(define-public emacs-org-ref
  (package
    (name "emacs-org-ref")
    (version "20231101.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkitchin/org-ref.git")
               (commit
                 "195b8d3209aff956ecdd755422700e8517a34d11")))
        (sha256
          (base32
            "1bd6g33brn77x67iad02ncjh841q8lcfhqgynapvfxwf1k24c1y4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-f
            emacs-htmlize
            emacs-hydra
            emacs-avy
            emacs-parsebib
            emacs-bibtex-completion
            emacs-citeproc
            emacs-ox-pandoc))
    (arguments
      '(#:files
        (:defaults
          "org-ref.org"
          "org-ref.bib"
          "citeproc")))
    (home-page "https://github.com/jkitchin/org-ref")
    (synopsis
      "citations, cross-references and bibliographies in org-mode")
    (description
      "Documentation at https://melpa.org/#/org-ref")
    (license #f)))

(define-public emacs-org-ref-prettify
  (package
    (name "emacs-org-ref-prettify")
    (version "20220507.649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/org-ref-prettify.el.git")
               (commit
                 "0ec3b6e398ee117c8b8a787a0422b95d9e95f7bb")))
        (sha256
          (base32
            "14cs9qg1fszg9gxpkrf74b49avcx4smpr39z7a9k3n2w6v4dn19x"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ref emacs-bibtex-completion))
    (home-page
      "https://github.com/alezost/org-ref-prettify.el")
    (synopsis "Prettify org-ref citation links")
    (description
      "Documentation at https://melpa.org/#/org-ref-prettify")
    (license #f)))

(define-public emacs-org-repo-todo
  (package
    (name "emacs-org-repo-todo")
    (version "20171228.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/org-repo-todo.git")
               (commit
                 "f73ebd91399c5760ad52c6ad9033de1066042003")))
        (sha256
          (base32
            "0c74zwmac8x1y8jimdx473v0falpky2kfig8pnaxavz415gb315q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/waymondo/org-repo-todo")
    (synopsis
      "Simple repository todo management with org-mode")
    (description
      "Documentation at https://melpa.org/#/org-repo-todo")
    (license #f)))

(define-public emacs-org-reverse-datetree
  (package
    (name "emacs-org-reverse-datetree")
    (version "20221203.259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-reverse-datetree.git")
               (commit
                 "fca95cd22ed29653f3217034c71ec0ab0a7c7734")))
        (sha256
          (base32
            "15jymjfdsmbcr5l03c605kbi68afcnwandhpgkcn912add9iqczr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/akirak/org-reverse-datetree")
    (synopsis
      "Create reverse date trees in org-mode")
    (description
      "Documentation at https://melpa.org/#/org-reverse-datetree")
    (license #f)))

(define-public emacs-org-review
  (package
    (name "emacs-org-review")
    (version "20230119.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brabalan/org-review.git")
               (commit
                 "77211e40db8a9558b866f5660c7127922b459e6c")))
        (sha256
          (base32
            "1izm9aj8cqni8sjsxmlk5bbl4nn90476pa339jfxh812v5will1y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brabalan/org-review")
    (synopsis "schedule reviews for Org entries")
    (description
      "Documentation at https://melpa.org/#/org-review")
    (license #f)))

(define-public emacs-org-rich-yank
  (package
    (name "emacs-org-rich-yank")
    (version "20230605.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/org-rich-yank.git")
               (commit
                 "9d840c04cba45d245d0dbb4147d6a2b865f45cb5")))
        (sha256
          (base32
            "152ajjjhzm578flxbxwxmaf24y2mdvlwh7pby6sxxcg5gvs9g50j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/unhammer/org-rich-yank")
    (synopsis
      "Paste with org-mode markup and link to source")
    (description
      "Documentation at https://melpa.org/#/org-rich-yank")
    (license #f)))

(define-public emacs-org-roam
  (package
    (name "emacs-org-roam")
    (version "20230307.1721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-roam/org-roam.git")
               (commit
                 "5c06471c3a11348342719fd9011486455adeb701")))
        (sha256
          (base32
            "1bd52f3pdj5hq0vr5y53g870s35ir3n5ms2d9y6q74xhbi1lj871"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-emacsql
            emacs-magit-section))
    (arguments '(#:files (:defaults "extensions/*")))
    (home-page
      "https://github.com/org-roam/org-roam")
    (synopsis
      "A database abstraction layer for Org-mode")
    (description
      "Documentation at https://melpa.org/#/org-roam")
    (license #f)))

(define-public emacs-org-roam-bibtex
  (package
    (name "emacs-org-roam-bibtex")
    (version "20230628.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-roam/org-roam-bibtex.git")
               (commit
                 "f90ac12b7ae5ba7bcdebfe53796fd0417946e5e1")))
        (sha256
          (base32
            "0magzl7bffwvjmri7r4smp6wdjcn8wgfgrd9sk5z0kcydd0r4aab"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam emacs-bibtex-completion))
    (home-page
      "https://github.com/org-roam/org-roam-bibtex")
    (synopsis "Org Roam meets BibTeX")
    (description
      "Documentation at https://melpa.org/#/org-roam-bibtex")
    (license #f)))

(define-public emacs-org-roam-ql
  (package
    (name "emacs-org-roam-ql")
    (version "20231105.2028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahmed-shariff/org-roam-ql.git")
               (commit
                 "6c8b03638fd9f423104093fb2e4128435528a72e")))
        (sha256
          (base32
            "120jin5lzjg0mcj9bp197hxhwy2ghycsk00zlax1ymi3pmlcrsmy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam
            emacs-s
            emacs-magit-section
            emacs-org-super-agenda))
    (arguments '(#:files ("org-roam-ql.el")))
    (home-page
      "https://github.com/ahmed-shariff/org-roam-ql")
    (synopsis
      "Interface to query and view results from org-roam")
    (description
      "Documentation at https://melpa.org/#/org-roam-ql")
    (license #f)))

(define-public emacs-org-roam-ql-ql
  (package
    (name "emacs-org-roam-ql-ql")
    (version "20230902.613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahmed-shariff/org-roam-ql.git")
               (commit
                 "eab43b342ee1e63e07e5d6bee5efa8180747f975")))
        (sha256
          (base32
            "10qc4aldqmg1w0pq0w3w3jw73lrlxrjva0sz3dldywnmvmgwwj8q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam-ql
            emacs-org-ql
            emacs-org-roam
            emacs-s))
    (arguments '(#:files ("org-roam-ql-ql.el")))
    (home-page
      "https://github.com/ahmed-shariff/org-roam-ql")
    (synopsis "Intgrating org-roam and org-ql")
    (description
      "Documentation at https://melpa.org/#/org-roam-ql-ql")
    (license #f)))

(define-public emacs-org-roam-timestamps
  (package
    (name "emacs-org-roam-timestamps")
    (version "20221104.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tefkah/org-roam-timestamps.git")
               (commit
                 "c4ff1e2f5b0905b5caa917249aab56ddc1de1ab3")))
        (sha256
          (base32
            "0z8ny8rcra6vkzazc5lsb5hgv9aj70cljpy96iafiiji7213bw2w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-roam))
    (home-page
      "https://github.com/ThomasFKJorna/org-roam-timestamps/")
    (synopsis
      "Keep track of modification times for org-roam")
    (description
      "Documentation at https://melpa.org/#/org-roam-timestamps")
    (license #f)))

(define-public emacs-org-roam-ui
  (package
    (name "emacs-org-roam-ui")
    (version "20221105.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-roam/org-roam-ui.git")
               (commit
                 "5ac74960231db0bf7783c2ba7a19a60f582e91ab")))
        (sha256
          (base32
            "0yic5rgp4f1rmi979if79kva7wn3rqnky423mqgf7sdw310h8akl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam
            emacs-simple-httpd
            emacs-websocket))
    (arguments '(#:files (:defaults "out")))
    (home-page
      "https://github.com/org-roam/org-roam-ui")
    (synopsis "User Interface for Org-roam")
    (description
      "Documentation at https://melpa.org/#/org-roam-ui")
    (license #f)))

(define-public emacs-org-ros
  (package
    (name "emacs-org-ros")
    (version "20220320.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LionyxML/ros.git")
               (commit
                 "70e0f33ee027ca1dce68351ad14a9e47a452fc17")))
        (sha256
          (base32
            "0qjfb2fllzkh1d0jprxdsvg6fcrrhc7wc2lg0kffp5vwmfv7m3db"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/LionyxML/ros")
    (synopsis "Rahul's Org-Mode Screenshot")
    (description
      "Documentation at https://melpa.org/#/org-ros")
    (license #f)))

(define-public emacs-org-rtm
  (package
    (name "emacs-org-rtm")
    (version "20160214.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pmiddend/org-rtm.git")
               (commit
                 "adc42ad1fbe92ab447ccc9553780f4456f2508d2")))
        (sha256
          (base32
            "1hn8y9933x5x6lxpijcqx97p3hln69ahabqdsl2bmzda3mxm4bn2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtm))
    (home-page "https://github.com/pmiddend/org-rtm")
    (synopsis
      "Simple import/export from rememberthemilk to org-mode")
    (description
      "Documentation at https://melpa.org/#/org-rtm")
    (license #f)))

(define-public emacs-org-runbook
  (package
    (name "emacs-org-runbook")
    (version "20230503.319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tyler-dodge/org-runbook.git")
               (commit
                 "7ada3903a56266d60541d59ae92410e8ab6fe836")))
        (sha256
          (base32
            "1lglbrg61gxavmzdfldib728nr8afqd8jj6dq4h5nsrfg04155sw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-s
            emacs-dash
            emacs-mustache
            emacs-ht
            emacs-ivy))
    (home-page
      "https://github.com/tyler-dodge/org-runbook")
    (synopsis "Org mode for runbooks")
    (description
      "Documentation at https://melpa.org/#/org-runbook")
    (license #f)))

(define-public emacs-org-scrum
  (package
    (name "emacs-org-scrum")
    (version "20200131.1129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianxm/emacs-scrum.git")
               (commit
                 "f7a46bc4bc85305f0c2b72565170ea0e007c42fd")))
        (sha256
          (base32
            "1x37jcfbdmyba3301fbrvmps93ibwcgn6dcqzv39qfsbpr5j0iik"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianxm/emacs-scrum")
    (synopsis
      "org mode extensions for scrum planning and reporting")
    (description
      "Documentation at https://melpa.org/#/org-scrum")
    (license #f)))

(define-public emacs-org-seek
  (package
    (name "emacs-org-seek")
    (version "20161217.502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stardiviner/org-seek.el.git")
               (commit
                 "1f51e6634e3b9a6a29d335d0d14370a6ffef2265")))
        (sha256
          (base32
            "0aq3af6fd16lm9iirzya6hmc8g48kfp8pc4dx51mgb5d6jjiizkv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ag))
    (home-page
      "https://github.com/stardiviner/org-seek.el")
    (synopsis
      "Searching Org-mode files with search tools.")
    (description
      "Documentation at https://melpa.org/#/org-seek")
    (license #f)))

(define-public emacs-org-shoplist
  (package
    (name "emacs-org-shoplist")
    (version "20210629.2157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lordnik22/org-shoplist.git")
               (commit
                 "71ea7643e66c97d21df49fb8b600578ca0464f83")))
        (sha256
          (base32
            "0pjcpry9hzma87f8isyi0q5si0i67g0gd8shj2y3qyizi9ns64a2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lordnik22")
    (synopsis "Eat the world")
    (description
      "Documentation at https://melpa.org/#/org-shoplist")
    (license #f)))

(define-public emacs-org-side-tree
  (package
    (name "emacs-org-side-tree")
    (version "20231003.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/localauthor/org-side-tree.git")
               (commit
                 "53787a115d3d4836ea28c4a4abbb4ac4443ab535")))
        (sha256
          (base32
            "0bmqym02dpqcsc9dm86sxd46kb75jy9zd3k6a0lygxryfc07nrhj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/localauthor/org-side-tree")
    (synopsis
      "Navigate Org outlines in side window tree")
    (description
      "Documentation at https://melpa.org/#/org-side-tree")
    (license #f)))

(define-public emacs-org-sidebar
  (package
    (name "emacs-org-sidebar")
    (version "20210912.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-sidebar.git")
               (commit
                 "288703b897449f5110c9c76e78eb9a928ffc0dcd")))
        (sha256
          (base32
            "0ama42nkc90mzwik516kfsh5rdx47yhaarcsqsknxh7xcrm2v0r1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-org-ql
            emacs-org-super-agenda))
    (home-page
      "https://github.com/alphapapa/org-sidebar")
    (synopsis "Helpful sidebar for Org buffers")
    (description
      "Documentation at https://melpa.org/#/org-sidebar")
    (license #f)))

(define-public emacs-org-snooze
  (package
    (name "emacs-org-snooze")
    (version "20181229.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xueeinstein/org-snooze.el.git")
               (commit
                 "8799adc14a20f3489063d279ff69312de3180bf9")))
        (sha256
          (base32
            "0ni5vm6b8c09ybn9rg3smdsxq1mxyqvndi00wn718my7939g82kb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xueeinstein/org-snooze.el")
    (synopsis "Snooze your code, doc and feed")
    (description
      "Documentation at https://melpa.org/#/org-snooze")
    (license #f)))

(define-public emacs-org-special-block-extras
  (package
    (name "emacs-org-special-block-extras")
    (version "20230721.43")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/org-special-block-extras.git")
               (commit
                 "18d754d8491aa41104a309c3161576bee15e42f6")))
        (sha256
          (base32
            "0af4bairg7cb3m5iy2yxspmcakb4x6pzdhxps0i3i3mxlw65ybrl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-lf
            emacs-dad-joke
            emacs-lolcat))
    (home-page
      "https://alhassy.github.io/org-special-block-extras")
    (synopsis
      "30 new custom blocks & 34 link types for Org-mode")
    (description
      "Documentation at https://melpa.org/#/org-special-block-extras")
    (license #f)))

(define-public emacs-org-sql
  (package
    (name "emacs-org-sql")
    (version "20220621.2252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndwarshuis/org-sql.git")
               (commit
                 "43376abf46b897a9a862cfcc1c087f4b8688634c")))
        (sha256
          (base32
            "0v2bbwxblzpkf57p6d5i0isia90jxw17p9aaslizpcybqsp3c3ha"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash emacs-org-ml))
    (home-page
      "https://github.com/ndwarshuis/org-sql")
    (synopsis "Org-Mode SQL converter")
    (description
      "Documentation at https://melpa.org/#/org-sql")
    (license #f)))

(define-public emacs-org-starter
  (package
    (name "emacs-org-starter")
    (version "20220326.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-starter.git")
               (commit
                 "cd9c5c0402de941299d1c8901f26a8f24d755022")))
        (sha256
          (base32
            "07z17r2ny9m4cddr87v636vgvcfgv1j5qkvhckms0xnfh9wcs9j3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "counsel-org-starter.el"
            "helm-org-starter.el"
            "org-starter-swiper.el"
            "org-starter-extras.el"))))
    (home-page
      "https://github.com/akirak/org-starter")
    (synopsis
      "A basic configuration framework for org mode")
    (description
      "Documentation at https://melpa.org/#/org-starter")
    (license #f)))

(define-public emacs-org-starter-swiper
  (package
    (name "emacs-org-starter-swiper")
    (version "20220326.1106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/org-starter.git")
               (commit
                 "cd9c5c0402de941299d1c8901f26a8f24d755022")))
        (sha256
          (base32
            "07z17r2ny9m4cddr87v636vgvcfgv1j5qkvhckms0xnfh9wcs9j3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper emacs-org-starter))
    (arguments '(#:files ("org-starter-swiper.el")))
    (home-page
      "https://github.com/akirak/org-starter")
    (synopsis "Swiper for org-starter")
    (description
      "Documentation at https://melpa.org/#/org-starter-swiper")
    (license #f)))

(define-public emacs-org-static-blog
  (package
    (name "emacs-org-static-blog")
    (version "20231006.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bastibe/org-static-blog.git")
               (commit
                 "8ef0d792d5afbca1d6ffc6469d829e15a8406b93")))
        (sha256
          (base32
            "0m8jw2w3hy0jxmyiw38jajfd6a3c3hxyrp8as4zcxcjdf1jxy9yy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bastibe/org-static-blog")
    (synopsis
      "a simple org-mode based static blog generator")
    (description
      "Documentation at https://melpa.org/#/org-static-blog")
    (license #f)))

(define-public emacs-org-sticky-header
  (package
    (name "emacs-org-sticky-header")
    (version "20201223.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-sticky-header.git")
               (commit
                 "79136b8c54c48547ba8a07a72a9790cb8e23ecbd")))
        (sha256
          (base32
            "1ijfy4yr39rrg58w5506pcb0xnqf2l5ammwl4z8r4mmknznysp9i"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/alphapapa/org-sticky-header")
    (synopsis
      "Show off-screen Org heading at top of window")
    (description
      "Documentation at https://melpa.org/#/org-sticky-header")
    (license #f)))

(define-public emacs-org-super-agenda
  (package
    (name "emacs-org-super-agenda")
    (version "20230924.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-super-agenda.git")
               (commit
                 "4efc0bdfa3c9760256a651dc4d510658f41afe81")))
        (sha256
          (base32
            "17h3bf4q03i354ialj7n0bw70828zn8l4nqidxxf85g90f4ww8wp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-s
            emacs-dash
            emacs-ht
            emacs-ts))
    (home-page
      "http://github.com/alphapapa/org-super-agenda")
    (synopsis "Supercharge your agenda")
    (description
      "Documentation at https://melpa.org/#/org-super-agenda")
    (license #f)))

(define-public emacs-org-superstar
  (package
    (name "emacs-org-superstar")
    (version "20230116.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/integral-dw/org-superstar-mode.git")
               (commit
                 "54c81c27dde2a6dc461bb064e79a8b2089093a2e")))
        (sha256
          (base32
            "05advl2slmpbhj6i2d8yy8gyi2dbvvp0dvkjwiazpvmcx65qqf17"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/integral-dw/org-superstar-mode")
    (synopsis
      "Prettify headings and plain lists in Org mode")
    (description
      "Documentation at https://melpa.org/#/org-superstar")
    (license #f)))

(define-public emacs-org-sync
  (package
    (name "emacs-org-sync")
    (version "20181204.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arbox/org-sync.git")
               (commit
                 "e34a385fa9e658c8341a0a6e6bc3472d4d536bb8")))
        (sha256
          (base32
            "1xk0wqr66wjh00wgbr4f0q02zchmzdgpz2inz316zfjm4cik8y5c"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/arbox/org-sync")
    (synopsis
      "Synchronize Org documents with External Issue Trackers")
    (description
      "Documentation at https://melpa.org/#/org-sync")
    (license #f)))

(define-public emacs-org-sync-snippets
  (package
    (name "emacs-org-sync-snippets")
    (version "20210111.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/org-sync-snippets.git")
               (commit
                 "88f995dea188b8a645a3388c42b62a2bb88953d3")))
        (sha256
          (base32
            "1ggn4y6sczl08mzbnzgjixgl685c71wqqffmng4gl67fs6wr6lrv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/abrochard/org-sync-snippets")
    (synopsis
      "Export snippets to org-mode and vice versa")
    (description
      "Documentation at https://melpa.org/#/org-sync-snippets")
    (license #f)))

(define-public emacs-org-table-color
  (package
    (name "emacs-org-table-color")
    (version "20220311.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fosskers/org-table-color.git")
               (commit
                 "2022f301ef323953c3a0e087a1b601da85e06da1")))
        (sha256
          (base32
            "18bbsi79i0xf8kzzbpr6v4sh150m1qip7m74ighbb9as3kx07r0f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fosskers/org-table-color")
    (synopsis
      "Add color to your org-mode table cells")
    (description
      "Documentation at https://melpa.org/#/org-table-color")
    (license #f)))

(define-public emacs-org-table-comment
  (package
    (name "emacs-org-table-comment")
    (version "20120209.1851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/org-table-comment.el.git")
               (commit
                 "33b9966c33ecbc3e27cca67c2f2cdea04364d74e")))
        (sha256
          (base32
            "1qx3kd02sxs9k7adlvdlbmyhkc5kr7ni5lw4gxjw3nphnc536bkb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mlf176f2/org-table-comment.el")
    (synopsis "Org table comment modes.")
    (description
      "Documentation at https://melpa.org/#/org-table-comment")
    (license #f)))

(define-public emacs-org-table-sticky-header
  (package
    (name "emacs-org-table-sticky-header")
    (version "20190924.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/org-table-sticky-header.git")
               (commit
                 "b65442857128ab04724aaa301e60aa874a31a798")))
        (sha256
          (base32
            "1rnv7n444gidn2kqfbzc1wypj253nmlhn50x14pd8rdg4s3srpar"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Sticky header for org-mode tables")
    (description
      "Documentation at https://melpa.org/#/org-table-sticky-header")
    (license #f)))

(define-public emacs-org-tag-beautify
  (package
    (name "emacs-org-tag-beautify")
    (version "20231106.43")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/org-tag-beautify.git")
               (commit
                 "81bcb84e39587d99b3946e9b32f962975787f49e")))
        (sha256
          (base32
            "0wnd4qyfibcjf5m7gq54jskfij2b77z4qzvl98pkbdy9gxlqgwbi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-nerd-icons))
    (home-page
      "https://repo.or.cz/org-tag-beautify.git")
    (synopsis "Beautify Org mode tags")
    (description
      "Documentation at https://melpa.org/#/org-tag-beautify")
    (license #f)))

(define-public emacs-org-tagged
  (package
    (name "emacs-org-tagged")
    (version "20220926.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gizmomogwai/org-tagged.git")
               (commit
                 "4b0174473772fca976426e982bb3f4a3037c1e37")))
        (sha256
          (base32
            "09sfdy8r8rybzbi5ri5bb91vgl2mk7xi66rms73pd0q2qjp054la"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "http://github.com/gizmomogwai/org-tagged")
    (synopsis
      "Dynamic block for tagged org-mode todos")
    (description
      "Documentation at https://melpa.org/#/org-tagged")
    (license #f)))

(define-public emacs-org-tanglesync
  (package
    (name "emacs-org-tanglesync")
    (version "20200127.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/org-tanglesync.el.git")
               (commit
                 "af83a73ae542d5cb3c9d433cbf2ce1d4f4259117")))
        (sha256
          (base32
            "11rfn0byy0k0321w7fjgpa785ik1nrk1j6d0y4j0j4a8gys5hjr5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mtekman/org-tanglesync.el")
    (synopsis
      "Syncing org src blocks with tangled external files")
    (description
      "Documentation at https://melpa.org/#/org-tanglesync")
    (license #f)))

(define-public emacs-org-tfl
  (package
    (name "emacs-org-tfl")
    (version "20170923.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/storax/org-tfl.git")
               (commit
                 "f0d7d39106a1de5457f5160cddd98ab892b61066")))
        (sha256
          (base32
            "1rwdibiq0w4nzccmvdkpwnmfga70y35lfg2xlkqxd02x7bfl7j3m"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.svg")))
    (home-page "https://github.com/storax/org-tfl")
    (synopsis "Transport for London meets Orgmode")
    (description
      "Documentation at https://melpa.org/#/org-tfl")
    (license #f)))

(define-public emacs-org-themis
  (package
    (name "emacs-org-themis")
    (version "20160122.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zellio/org-themis.git")
               (commit
                 "78aadbbe22b1993be5c4accd0d3f91a4e85c9a3c")))
        (sha256
          (base32
            "1apd5yyr12skagma7xpzrh22rhplmhhv0pma4zf5b0i6nkxy06j2"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zellio/org-themis")
    (synopsis
      "Experimental project management mode for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-themis")
    (license #f)))

(define-public emacs-org-tidy
  (package
    (name "emacs-org-tidy")
    (version "20231011.37")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jxq0/org-tidy.git")
               (commit
                 "789795a032b121825938e74e4bcbdede31de864f")))
        (sha256
          (base32
            "0zc1wy2qq4dgii7zjjk2vgp8d3qp1dyqrpwvdva5zcnailf15cwf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/jxq0/org-tidy")
    (synopsis
      "A minor mode to tidy org-mode buffers")
    (description
      "Documentation at https://melpa.org/#/org-tidy")
    (license #f)))

(define-public emacs-org-time-budgets
  (package
    (name "emacs-org-time-budgets")
    (version "20200715.1016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/org-time-budgets.git")
               (commit
                 "1d6bfc323013bbf725167842d9e097fad805de03")))
        (sha256
          (base32
            "0cny7ck4acj8s2l6hzp48mvz0v0yk7q91mmzxn8vgrggsb02qm5k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page "unspecified")
    (synopsis
      "Define time budgets and display clocked time.")
    (description
      "Documentation at https://melpa.org/#/org-time-budgets")
    (license #f)))

(define-public emacs-org-timeblock
  (package
    (name "emacs-org-timeblock")
    (version "20231109.843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ichernyshovvv/org-timeblock.git")
               (commit
                 "7ac198c48646f864f18aef1c7e55c15ab8d8b679")))
        (sha256
          (base32
            "0m6gzjzv4criydhsz2s3q1kqc3bs11zg5svgjaksb7piks9368ds"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-org-ql emacs-persist))
    (home-page
      "https://github.com/ichernyshovvv/org-timeblock")
    (synopsis
      "Interactive SVG calendar for orgmode tasks")
    (description
      "Documentation at https://melpa.org/#/org-timeblock")
    (license #f)))

(define-public emacs-org-timeline
  (package
    (name "emacs-org-timeline")
    (version "20211110.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/org-timeline.git")
               (commit
                 "2b300abc8adc9955418fa2334f55e0610bff79f5")))
        (sha256
          (base32
            "09girkfkddn5xl5h6ji2hmsp2asip14cqrp8l9k9dpyhc4r9qp7g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/org-timeline/")
    (synopsis
      "Add graphical view of agenda to agenda buffer.")
    (description
      "Documentation at https://melpa.org/#/org-timeline")
    (license #f)))

(define-public emacs-org-toodledo
  (package
    (name "emacs-org-toodledo")
    (version "20150301.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/org-toodledo.git")
               (commit
                 "2c91a92bd07ae4a546771b018a6faa0e06399968")))
        (sha256
          (base32
            "014337wimvzy0rxh2p2c647ly215zcyhgym2hcljkdriv15cafna"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request-deferred))
    (home-page "unspecified")
    (synopsis
      "Toodledo integration for Emacs Org mode")
    (description
      "Documentation at https://melpa.org/#/org-toodledo")
    (license #f)))

(define-public emacs-org-tracktable
  (package
    (name "emacs-org-tracktable")
    (version "20161118.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tty-tourist/org-tracktable.git")
               (commit
                 "8e0e60a582a034bd66d5efb72d513140b7d4d90a")))
        (sha256
          (base32
            "1aq7qv5jyc2x2a4iphnzmmsvak6dbi7nwdcf3m8nly8w75vrl5lj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tty-tourist/org-tracktable")
    (synopsis
      "Track your writing progress in an org-table")
    (description
      "Documentation at https://melpa.org/#/org-tracktable")
    (license #f)))

(define-public emacs-org-transform-tree-table
  (package
    (name "emacs-org-transform-tree-table")
    (version "20200413.1959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jplindstrom/emacs-org-transform-tree-table.git")
               (commit
                 "d84e7fb87bf2d5fc2be252500de0cddf20facf4f")))
        (sha256
          (base32
            "16zi7rg3hdfspifr46gbvpnr1rr144a777whr1w3gp6m46xmgzhs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/jplindstrom/emacs-org-transform-tree-table")
    (synopsis
      "Transform org-mode tree with properties to a table, and the other way around")
    (description
      "Documentation at https://melpa.org/#/org-transform-tree-table")
    (license #f)))

(define-public emacs-org-tree-slide
  (package
    (name "emacs-org-tree-slide")
    (version "20230826.1234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/takaxp/org-tree-slide.git")
               (commit
                 "e2599a106a26ce5511095e23df4ea04be6687a8a")))
        (sha256
          (base32
            "0i1mzgq178sl6x2wf7k0ad57dy1d34wbk2k99fiyvv70rfbj2yy2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/takaxp/org-tree-slide")
    (synopsis "A presentation tool for org-mode")
    (description
      "Documentation at https://melpa.org/#/org-tree-slide")
    (license #f)))

(define-public emacs-org-tree-slide-pauses
  (package
    (name "emacs-org-tree-slide-pauses")
    (version "20201215.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cnngimenez/org-tree-slide-pauses.git")
               (commit
                 "f02af7102e9ecef7c3dac0d376d85bbb8c4de4cc")))
        (sha256
          (base32
            "0fzif0ss5yhvhj7q041qbpdb91az03zjf4rgs43a81g6a8qwi803"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-tree-slide))
    (home-page
      "https://github.com/cnngimenez/org-tree-slide-pauses")
    (synopsis
      "Bring the pause command from Beamer to org-tree-slide")
    (description
      "Documentation at https://melpa.org/#/org-tree-slide-pauses")
    (license #f)))

(define-public emacs-org-treescope
  (package
    (name "emacs-org-treescope")
    (version "20200503.1609")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/org-treescope.el.git")
               (commit
                 "905029a9e2ce6ed325bb8e10f59dc589c181d148")))
        (sha256
          (base32
            "11xbm6161rd5kv2bffqw678a7bymclvhpmm1qjxsvmi8bhfk1ls0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ql emacs-dash))
    (home-page
      "https://github.com/mtekman/org-treescope.el")
    (synopsis "Time scoping sparse trees within org")
    (description
      "Documentation at https://melpa.org/#/org-treescope")
    (license #f)))

(define-public emacs-org-treeusage
  (package
    (name "emacs-org-treeusage")
    (version "20221011.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/org-treeusage.el.git")
               (commit
                 "c561b3d468aa35e70a43d9a18a4f505996ae882d")))
        (sha256
          (base32
            "1npk4364rny892yrqm6g0ad7xhfa48ivxa4kk7xnakrz7ca23dj3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/mtekman/org-treeusage.el")
    (synopsis
      "Examine the usage of org headings in a tree-like manner")
    (description
      "Documentation at https://melpa.org/#/org-treeusage")
    (license #f)))

(define-public emacs-org-trello
  (package
    (name "emacs-org-trello")
    (version "20210314.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org-trello/org-trello.git")
               (commit
                 "fc63ed580101e6160edfb6f43215fb3200ce1ea7")))
        (sha256
          (base32
            "1kg3q8bhyydmd9jb41kyg8xcn5dbwpy2y0fnq7avkaypdn1q27w0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred
            emacs-deferred
            emacs-s
            emacs-dash))
    (arguments
      '(#:files
        ("org-trello*.el"
         (:exclude "org-trello-tools*.el"))))
    (home-page
      "https://github.com/org-trello/org-trello")
    (synopsis
      "Minor mode to synchronize org-mode buffer and trello board")
    (description
      "Documentation at https://melpa.org/#/org-trello")
    (license #f)))

(define-public emacs-org-unique-id
  (package
    (name "emacs-org-unique-id")
    (version "20220907.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Phundrak/org-unique-id.git")
               (commit
                 "1a4c2c6bb98a5ad79ad81f2ec9066eed608d33dd")))
        (sha256
          (base32
            "1ya9zdk4x60j1asvkgvlzz50j5mv9if7y8gbyyv198gyc1ifv9nv"))))
    (build-system melpa-build-system)
    (home-page
      "https://labs.phundrak.com/phundrak/org-unique-id")
    (synopsis "Create unique IDs for org headers")
    (description
      "Documentation at https://melpa.org/#/org-unique-id")
    (license #f)))

(define-public emacs-org-upcoming-modeline
  (package
    (name "emacs-org-upcoming-modeline")
    (version "20231019.735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/org-upcoming-modeline.git")
               (commit
                 "136a6a76d770d351559091c8d9ad5a189f1f2622")))
        (sha256
          (base32
            "0p12jg3pwa2r3ilw6ln6x7cxg0kqhrdk27i85dhaw4i84w0019r3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ts emacs-org-ql))
    (home-page
      "https://github.com/unhammer/org-upcoming-modeline")
    (synopsis "Show next org event in mode line")
    (description
      "Documentation at https://melpa.org/#/org-upcoming-modeline")
    (license #f)))

(define-public emacs-org-variable-pitch
  (package
    (name "emacs-org-variable-pitch")
    (version "20220220.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "350af0e5d53307c900e4f8b2617f3852f51a74d2")))
        (sha256
          (base32
            "097pd9ihnzjiaxbzrabcw0016wdwrljs9b5s6cbkrrbgicngb8vj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("org-variable-pitch.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#ovp")
    (synopsis
      "Minor mode for variable pitch text in org mode.")
    (description
      "Documentation at https://melpa.org/#/org-variable-pitch")
    (license #f)))

(define-public emacs-org-vcard
  (package
    (name "emacs-org-vcard")
    (version "20221111.328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/org-vcard.git")
               (commit
                 "92345fa9f1e1f928278a654ac5ad57d22d74dbef")))
        (sha256
          (base32
            "1yd5ff89lss0dcnqkgmcb30bb719lixcad4pfkggpssnnix998rv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("org-vcard.el" "styles")))
    (home-page
      "https://github.com/flexibeast/org-vcard")
    (synopsis
      "org-mode support for vCard export and import.")
    (description
      "Documentation at https://melpa.org/#/org-vcard")
    (license #f)))

(define-public emacs-org-view-mode
  (package
    (name "emacs-org-view-mode")
    (version "20221208.327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/amno1/org-view-mode.git")
               (commit
                 "014f96acb7093ffae93c62aabff750e63c3babc5")))
        (sha256
          (base32
            "1m9jv6nssf2nqkav8nx1748wwc8i5338bc2brxlqajcy4dcz3fbg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/amno1/org-view-mode")
    (synopsis
      "Read-only viewer with less markup clutter in org mode files")
    (description
      "Documentation at https://melpa.org/#/org-view-mode")
    (license #f)))

(define-public emacs-org-visibility
  (package
    (name "emacs-org-visibility")
    (version "20220929.1415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nullman/emacs-org-visibility.git")
               (commit
                 "afa4b6f8ff274df87eb11f1afd0321084a45a2ab")))
        (sha256
          (base32
            "125db5gyyc4xyrr0n06ch5rrai3zcxbr3rm3i3b5gyki8wjw0ydk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nullman/emacs-org-visibility")
    (synopsis "Persistent org tree visibility")
    (description
      "Documentation at https://melpa.org/#/org-visibility")
    (license #f)))

(define-public emacs-org-wc
  (package
    (name "emacs-org-wc")
    (version "20200731.2244")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tesujimath/org-wc.git")
               (commit
                 "dbbf794e4ec6c4080d945f43338185e34a4a582d")))
        (sha256
          (base32
            "0j58591jnj182hps1zc9an692hhnxinlpbw762l7xdc0sa5pjrgb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Count words in org mode trees.")
    (description
      "Documentation at https://melpa.org/#/org-wc")
    (license #f)))

(define-public emacs-org-web-tools
  (package
    (name "emacs-org-web-tools")
    (version "20231029.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/org-web-tools.git")
               (commit
                 "821e6f032f5823e5e3344ea4d1a36870e236aba1")))
        (sha256
          (base32
            "19q79mjlx0iawnlh2imvs0cnqgkj90am1yclnbmvll1cjz0rzdx4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-dash
            emacs-esxml
            emacs-s
            emacs-plz
            emacs-request))
    (home-page
      "http://github.com/alphapapa/org-web-tools")
    (synopsis
      "Display and capture web content with Org-mode")
    (description
      "Documentation at https://melpa.org/#/org-web-tools")
    (license #f)))

(define-public emacs-org-wild-notifier
  (package
    (name "emacs-org-wild-notifier")
    (version "20230831.2035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akhramov/org-wild-notifier.el.git")
               (commit
                 "aa0f2d8ea282dea714ae67f3f5a0471488e6e396")))
        (sha256
          (base32
            "00xssqg0mvh5ma2053719bcchbrl7mmj8wzhbrjk34cl4lx9p9fb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-async emacs-dash))
    (home-page
      "https://github.com/akhramov/org-wild-notifier.el")
    (synopsis
      "Customizable org-agenda notifications")
    (description
      "Documentation at https://melpa.org/#/org-wild-notifier")
    (license #f)))

(define-public emacs-org-working-set
  (package
    (name "emacs-org-working-set")
    (version "20230803.1640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcIhm/org-working-set.git")
               (commit
                 "c83a63f34829dca137941bc06e29c34bf056a43b")))
        (sha256
          (base32
            "1vz2f2f37gz2jbybidh0s6zl331sa2qw0nrw500ignd2hjcf30pr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/marcIhm/org-working-set")
    (synopsis
      "Manage and visit a small and changing set of org-nodes that you work on")
    (description
      "Documentation at https://melpa.org/#/org-working-set")
    (license #f)))

(define-public emacs-org-wunderlist
  (package
    (name "emacs-org-wunderlist")
    (version "20191017.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/org-wunderlist.git")
               (commit
                 "1a084bb49be4b5a1066db9cd9b7da2f8efab293f")))
        (sha256
          (base32
            "05kd8d0687dlmy8a4qvxa3bdcsvxd10hxkl5i4654w88pg07qm8g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred emacs-alert emacs-s))
    (home-page
      "https://github.com/myuhe/org-wunderlist.el")
    (synopsis "Org sync with Wunderlist")
    (description
      "Documentation at https://melpa.org/#/org-wunderlist")
    (license #f)))

(define-public emacs-org-xlatex
  (package
    (name "emacs-org-xlatex")
    (version "20230820.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksqsf/org-xlatex.git")
               (commit
                 "f3cac5ea904e78ae2b47723fdce96e8e87edbe7c")))
        (sha256
          (base32
            "06y7lapsp4s9h07hdsd8wigmy6r5l36qiqwmz7j1n8zp3r8xg0pw"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "org-xlatex.html")))
    (home-page "https://github.com/ksqsf/org-xlatex")
    (synopsis "Instant LaTeX preview in an xwidget")
    (description
      "Documentation at https://melpa.org/#/org-xlatex")
    (license #f)))

(define-public emacs-org-zettelkasten
  (package
    (name "emacs-org-zettelkasten")
    (version "20230613.1924")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/org-zettelkasten-"
               version
               ".tar"))
        (sha256
          (base32
            "0ak43s3xm057fjrfp6dhhw0nw49xfbadh48459x0xgkdvs0r41mp"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~ymherklotz/org-zettelkasten")
    (synopsis "A Zettelkasten mode leveraging Org")
    (description
      "Documentation at https://melpa.org/#/org-zettelkasten")
    (license #f)))

(define-public emacs-org2blog
  (package
    (name "emacs-org2blog")
    (version "20230501.2319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/org2blog/org2blog.git")
               (commit
                 "a9eb85449975191f214b566cc091004dd81672d8")))
        (sha256
          (base32
            "06sbz2w04jb6akjky6pw7gmnkbjhslbgkicf7ff5j9v25n9dc9pa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-htmlize
            emacs-hydra
            emacs-xml-rpc
            emacs-writegood-mode
            emacs-metaweblog))
    (arguments
      '(#:files
        (:defaults
          "README.org"
          (:exclude "metaweblog.el"))))
    (home-page
      "https://github.com/org2blog/org2blog")
    (synopsis "Blog from Org mode to WordPress")
    (description
      "Documentation at https://melpa.org/#/org2blog")
    (license #f)))

(define-public emacs-org2ctex
  (package
    (name "emacs-org2ctex")
    (version "20200331.550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/org2ctex.git")
               (commit
                 "2e40aa5e78b0562516f46f689e7b74cdf451cc2a")))
        (sha256
          (base32
            "06ip9663xvygpr484r09v7c55nn0pxmr30455iqpmxi32dwx974g"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/org2ctex")
    (synopsis
      "Export org to ctex (a latex macro for Chinese)")
    (description
      "Documentation at https://melpa.org/#/org2ctex")
    (license #f)))

(define-public emacs-org2elcomment
  (package
    (name "emacs-org2elcomment")
    (version "20170324.945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/org2elcomment.git")
               (commit
                 "c88a75d9587c484ead18f7adf08592b09c1cceb0")))
        (sha256
          (base32
            "19r7rxnd2cl0vc8bbf86mh5b779pl5z917657ymlc74bqq140m3x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Convert Org file to Elisp comments")
    (description
      "Documentation at https://melpa.org/#/org2elcomment")
    (license #f)))

(define-public emacs-org2issue
  (package
    (name "emacs-org2issue")
    (version "20190531.941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/org2issue.git")
               (commit
                 "910b98c858762fd14b11d261626c5e979dde0833")))
        (sha256
          (base32
            "0xgrrbkfqkhj15n7mbmh61g8i535ykhxh5y71054p3kikgnrh290"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ox-gfm emacs-gh emacs-s))
    (home-page
      "https://github.com/lujun9972/org2issue")
    (synopsis "export org to github issue")
    (description
      "Documentation at https://melpa.org/#/org2issue")
    (license #f)))

(define-public emacs-org2jekyll
  (package
    (name "emacs-org2jekyll")
    (version "20210829.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ardumont/org2jekyll.git")
               (commit
                 "a228ebcf408de7096e5cd3a62b14087432e0afb1")))
        (sha256
          (base32
            "146xp2jsk7a973g0dn8in1sad6lp1ks7s5ma6jld4h26anprvj1g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/ardumont/org2jekyll")
    (synopsis
      "Minor mode to publish org-mode post to jekyll without specific yaml")
    (description
      "Documentation at https://melpa.org/#/org2jekyll")
    (license #f)))

(define-public emacs-org2web
  (package
    (name "emacs-org2web")
    (version "20210203.324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/org2web.git")
               (commit
                 "6f5c5f0cc5c877ac3a383782bbe8751264d807b6")))
        (sha256
          (base32
            "12rgrmcp91y27zcq8kcqvndb38n6ix4amf13cc2gjhi6aayxxx7k"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht
            emacs-mustache
            emacs-htmlize
            emacs-dash
            emacs-el2org
            emacs-simple-httpd))
    (arguments
      '(#:files
        ("org2web*.el" "documents" "themes" "uploaders")))
    (home-page "https://github.com/tumashu/org2web")
    (synopsis
      "A static site generator based on org mode.")
    (description
      "Documentation at https://melpa.org/#/org2web")
    (license #f)))

(define-public emacs-organic-green-theme
  (package
    (name "emacs-organic-green-theme")
    (version "20230121.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/organic-green-theme.git")
               (commit
                 "7ca93a1c42bba1bcced181bd8cc34cb57be39537")))
        (sha256
          (base32
            "1fa27522nb3jqswbii9qsi1csjqw5p6a7lsrylhw2vll8w9v4mma"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Low-contrast green color theme.")
    (description
      "Documentation at https://melpa.org/#/organic-green-theme")
    (license #f)))

(define-public emacs-organize-imports-java
  (package
    (name "emacs-organize-imports-java")
    (version "20220704.657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/organize-imports-java.git")
               (commit
                 "1f422f6f3fa569a6c238ac34aec0320934f06208")))
        (sha256
          (base32
            "06d71kkn5kasfg9x977vdcd6pbnj44jzalp9igwm6qh5k7krklr3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-dash emacs-ht))
    (arguments
      '(#:files (:defaults "sdk" "default")))
    (home-page
      "https://github.com/jcs-elpa/organize-imports-java")
    (synopsis
      "Automatically organize imports in Java code")
    (description
      "Documentation at https://melpa.org/#/organize-imports-java")
    (license #f)))

(define-public emacs-orgbox
  (package
    (name "emacs-orgbox")
    (version "20180827.218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuhito/orgbox.git")
               (commit
                 "3982f56efd67ec016389cad82ce5a44f619b36a9")))
        (sha256
          (base32
            "1vr00ql7izfxswrnbyzq0avlhqy3p0jyw16gnjhczqhg09iln6rw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/yasuhito/orgbox")
    (synopsis "Mailbox-like task scheduling Org.")
    (description
      "Documentation at https://melpa.org/#/orgbox")
    (license #f)))

(define-public emacs-orgit
  (package
    (name "emacs-orgit")
    (version "20230917.1001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/orgit.git")
               (commit
                 "b60efabc4a1b15d7eacaabc5bdfe6f3c20fee161")))
        (sha256
          (base32
            "0q1l7kgicsr1dab1dn33h6icpxcjd7wvhpfy1l6gsfaxc5gda3q1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-magit))
    (home-page "https://github.com/magit/orgit")
    (synopsis
      "Support for Org links to Magit buffers")
    (description
      "Documentation at https://melpa.org/#/orgit")
    (license #f)))

(define-public emacs-orgit-forge
  (package
    (name "emacs-orgit-forge")
    (version "20231009.1937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/orgit-forge.git")
               (commit
                 "f595a30aa75af55522b1203cd29198fb9aa3a0a5")))
        (sha256
          (base32
            "034shn5x2ar0a2sy90bkxrppada30i0nxsxwpv3sc173i2vppni9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-forge
            emacs-magit
            emacs-orgit))
    (home-page
      "https://github.com/magit/orgit-forge")
    (synopsis "Org links to Forge issue buffers")
    (description
      "Documentation at https://melpa.org/#/orgit-forge")
    (license #f)))

(define-public emacs-orglink
  (package
    (name "emacs-orglink")
    (version "20230531.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/orglink.git")
               (commit
                 "afbeffdfa15a9fc532bba2e03626b9e82768ba2c")))
        (sha256
          (base32
            "0jkk6jiqmsns1pb0almaihyz6c3lim0r6l4x75qp7448p46q2him"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/tarsius/orglink")
    (synopsis "Use Org Mode links in other modes")
    (description
      "Documentation at https://melpa.org/#/orglink")
    (license #f)))

(define-public emacs-orglue
  (package
    (name "emacs-orglue")
    (version "20200411.311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/orglue.git")
               (commit
                 "9d5a8e24be9acb8c55bb4d6aa8b98e30e2677401")))
        (sha256
          (base32
            "1n2l9acc54sbpbv5d1h2ib9cn7nbidmkvhhlwihqzpvvh7bhjfj7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epic))
    (home-page "unspecified")
    (synopsis "more functionality to org-mode.")
    (description
      "Documentation at https://melpa.org/#/orglue")
    (license #f)))

(define-public emacs-orgmdb
  (package
    (name "emacs-orgmdb")
    (version "20231003.2144")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/orgmdb.el.git")
               (commit
                 "4338a0a34d500a214df8293590960011f761fe24")))
        (sha256
          (base32
            "1yr553kf6kmq2n328jr6pgxxifkwy2nk1c4w1xjy9m3x7zs1rpsq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/isamert/orgmdb")
    (synopsis
      "An OMDb API client with some convenience functions")
    (description
      "Documentation at https://melpa.org/#/orgmdb")
    (license #f)))

(define-public emacs-orgnav
  (package
    (name "emacs-orgnav")
    (version "20170608.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/facetframer/orgnav.git")
               (commit
                 "9e2cac9c1a67af5f0080e60022e821bf7b70312d")))
        (sha256
          (base32
            "0764dg3dcsdy4i6syv9aqqmr47civn9dl3638g4lsqdikghw7lvv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm emacs-s emacs-dash))
    (home-page
      "http://github.com/facetframer/orgnav")
    (synopsis "Org tree navigation using helm")
    (description
      "Documentation at https://melpa.org/#/orgnav")
    (license #f)))

(define-public emacs-orgstrap
  (package
    (name "emacs-orgstrap")
    (version "20230408.2232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tgbugs/orgstrap.git")
               (commit
                 "f35bccde556b0f82515e79ee69f4379469276356")))
        (sha256
          (base32
            "1z0zwx2ccyzd5rk93xffz3h9c8b8riadkx5n9k38p2agnsq07h52"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("orgstrap.el")))
    (home-page "https://github.com/tgbugs/orgstrap")
    (synopsis
      "Bootstrap an Org file using file local variables")
    (description
      "Documentation at https://melpa.org/#/orgstrap")
    (license #f)))

(define-public emacs-orgtbl-aggregate
  (package
    (name "emacs-orgtbl-aggregate")
    (version "20230806.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tbanel/orgaggregate.git")
               (commit
                 "504552580475ed72681782eb07073f5bbae241c6")))
        (sha256
          (base32
            "1lhk3vky6g1m81pxkr40yzp5vy867ilmdg91168i4q2j99ck20r4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tbanel/orgaggregate/blob/master/README.org")
    (synopsis
      "Create an aggregated Org table from another one")
    (description
      "Documentation at https://melpa.org/#/orgtbl-aggregate")
    (license #f)))

(define-public emacs-orgtbl-ascii-plot
  (package
    (name "emacs-orgtbl-ascii-plot")
    (version "20230122.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tbanel/orgtblasciiplot.git")
               (commit
                 "4160128045b271bc1aef3d14dbf0c5b53ae58bd2")))
        (sha256
          (base32
            "1zhhppk05av94i77s16mrjbbc55gvcsm8sk6l7rdfrsfaislabmw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "ascii-art bar plots in org-mode tables")
    (description
      "Documentation at https://melpa.org/#/orgtbl-ascii-plot")
    (license #f)))

(define-public emacs-orgtbl-fit
  (package
    (name "emacs-orgtbl-fit")
    (version "20230110.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tbanel/orgtblfit.git")
               (commit
                 "5bde4902187b2578dc39ee3a02cd7c84c4470b8a")))
        (sha256
          (base32
            "0hy6i6m38k3ad2yr22jrr5i3af9v3k0106bilqxklv8jv6i4x284"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tbanel/orgtblfit/blob/master/README.org")
    (synopsis
      "Regression-fit a column in an Org Mode table")
    (description
      "Documentation at https://melpa.org/#/orgtbl-fit")
    (license #f)))

(define-public emacs-orgtbl-join
  (package
    (name "emacs-orgtbl-join")
    (version "20230127.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tbanel/orgtbljoin.git")
               (commit
                 "afcb4a829462db9925288911dd564d5993ef38e9")))
        (sha256
          (base32
            "1blybdfk9dp42scdy6mswdmyc8dkyfqhs5gmci7bpiksglnm8qan"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tbanel/orgtbljoin/blob/master/README.org")
    (synopsis
      "Join columns from another Org Mode table")
    (description
      "Documentation at https://melpa.org/#/orgtbl-join")
    (license #f)))

(define-public emacs-orgtbl-show-header
  (package
    (name "emacs-orgtbl-show-header")
    (version "20230903.903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/orgtbl-show-header.git")
               (commit
                 "1ab18f5afa2b01e67618ada0d40e6b7a65d9d14c")))
        (sha256
          (base32
            "073ld89cq3zzj4nzv0dz278zwcjisr7szkkrrnpk1jb9bjw8c1yx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Show the header of the current column in the minibuffer")
    (description
      "Documentation at https://melpa.org/#/orgtbl-show-header")
    (license #f)))

(define-public emacs-origami
  (package
    (name "emacs-origami")
    (version "20200331.1019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gregsexton/origami.el.git")
               (commit
                 "e558710a975e8511b9386edc81cd6bdd0a5bda74")))
        (sha256
          (base32
            "0ycjbsn03cjzx6adabcvi1j7f92yhx3xjzj3xc68m1hw9r2f2gzf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/gregsexton/origami.el")
    (synopsis "Flexible text folding")
    (description
      "Documentation at https://melpa.org/#/origami")
    (license #f)))

(define-public emacs-origami-predef
  (package
    (name "emacs-origami-predef")
    (version "20200615.1044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alvarogonzalezsotillo/origami-predef.git")
               (commit
                 "cc363f4b2fd20021ab330fc989369e2658457f93")))
        (sha256
          (base32
            "0lsr356yq0414fn6wy54fryx9k3zl43x9blnvlif5vbghf0r1axg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-origami))
    (home-page
      "https://github.com/alvarogonzalezsotillo/origami-predef")
    (synopsis
      "Apply folding when finding (opening) files")
    (description
      "Documentation at https://melpa.org/#/origami-predef")
    (license #f)))

(define-public emacs-ormolu
  (package
    (name "emacs-ormolu")
    (version "20220530.921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vyorkin/ormolu.el.git")
               (commit
                 "a6b1d3f8838d067ac5352fb0673c3c3dae7abd73")))
        (sha256
          (base32
            "098az157nsgwdxl8pbvznha1lvh2mpilm7m90p9v6pwdfvmcjb3x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/vyorkin/ormolu.el")
    (synopsis
      "Format Haskell source code using the \"ormolu\" program")
    (description
      "Documentation at https://melpa.org/#/ormolu")
    (license #f)))

(define-public emacs-orthodox-christian-new-calendar-holidays
  (package
    (name "emacs-orthodox-christian-new-calendar-holidays")
    (version "20210830.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmchittom/orthodox-christian-new-calendar-holidays.git")
               (commit
                 "6869024ecd45eefd0ec648979c6a59d7c79770e0")))
        (sha256
          (base32
            "1hw76k90bgvbdispcgmfbskhnk7cjai0bv75nmmk2b6kcj9hmx97"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cmchittom/orthodox-christian-new-calendar-holidays")
    (synopsis "Feasts (NS)")
    (description
      "Documentation at https://melpa.org/#/orthodox-christian-new-calendar-holidays")
    (license #f)))

(define-public emacs-osa
  (package
    (name "emacs-osa")
    (version "20200522.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atomontage/osa.git")
               (commit
                 "615ca9eef4131a23d9971691fa0d0f20fe59d01b")))
        (sha256
          (base32
            "1p651fqivyfyqjs6zz9p4n19r9d23xiswhyjz7r93llmsqs702qi"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("scripts"
           "scripts/*.js"
           "scripts/*.applescript"))))
    (home-page "https://github.com/atomontage/osa")
    (synopsis
      "OSA (JavaScript / AppleScript) bridge")
    (description
      "Documentation at https://melpa.org/#/osa")
    (license #f)))

(define-public emacs-osa-chrome
  (package
    (name "emacs-osa-chrome")
    (version "20230515.237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atomontage/osa-chrome.git")
               (commit
                 "981c35136102eeca77d0e1a41e7c95e8486a1dce")))
        (sha256
          (base32
            "0v4ypaq4cxrj2rch0sr1wm9iv00wvkfnx2wz78v5jx3nyjvnrk8j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-osa))
    (arguments
      '(#:files (:defaults ("scripts" "scripts/*.js"))))
    (home-page
      "https://github.com/atomontage/osa-chrome")
    (synopsis "Google Chrome remote tab control")
    (description
      "Documentation at https://melpa.org/#/osa-chrome")
    (license #f)))

(define-public emacs-osm
  (package
    (name "emacs-osm")
    (version "20231014.1337")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/osm.git")
               (commit
                 "cccaf20de935b265832a6fc5c6a25eceb175d23c")))
        (sha256
          (base32
            "0bva1n1ij1xw8wdwhqs1258ihk7lw8f6ppbadw9s1ixq8fqja75l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/osm")
    (synopsis "OpenStreetMap viewer")
    (description
      "Documentation at https://melpa.org/#/osm")
    (license #f)))

(define-public emacs-osx-browse
  (package
    (name "emacs-osx-browse")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/osx-browse.git")
               (commit
                 "44ded7cc3a7ee426c1c3257fae534c121f7e752e")))
        (sha256
          (base32
            "1iybrhp607a5rb3ynlaf8w2x9wdgdbril702z44dgcg3wxih2zy1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-string-utils emacs-browse-url-dwim))
    (home-page
      "http://github.com/rolandwalker/osx-browse")
    (synopsis "Web browsing helpers for OS X")
    (description
      "Documentation at https://melpa.org/#/osx-browse")
    (license #f)))

(define-public emacs-osx-clipboard
  (package
    (name "emacs-osx-clipboard")
    (version "20141012.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joddie/osx-clipboard-mode.git")
               (commit
                 "e46dd31327a3f92f77b013b4c9b1e5fdd0e5c73d")))
        (sha256
          (base32
            "1ykn48src7qhx9cmpjkaqsz7h36p75kkq1h9wlcpv5fhaky2d4n4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joddie/osx-clipboard-mode")
    (synopsis
      "Use the OS X clipboard from terminal Emacs")
    (description
      "Documentation at https://melpa.org/#/osx-clipboard")
    (license #f)))

(define-public emacs-osx-dictionary
  (package
    (name "emacs-osx-dictionary")
    (version "20220801.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/osx-dictionary.el.git")
               (commit
                 "0715e5a3ac659df32a0f0fabfbbeef0228fbd9a9")))
        (sha256
          (base32
            "0q4swp25bp0q2aqr8d8wszhcwy738m1brbv52r6hj787pg4wjhvl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("osx-dictionary.el" "osx-dictionary.m")))
    (home-page
      "https://github.com/xuchunyang/osx-dictionary.el")
    (synopsis "Interface for OSX Dictionary.app")
    (description
      "Documentation at https://melpa.org/#/osx-dictionary")
    (license #f)))

(define-public emacs-osx-lib
  (package
    (name "emacs-osx-lib")
    (version "20211206.619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raghavgautam/osx-lib.git")
               (commit
                 "7afdb57edd5725e8a66f841a90fa571a4cbb81e7")))
        (sha256
          (base32
            "02gpfzlbgwxlf7iy7qjzkpkqxhdr81nj06cg6g4mvg0ggvkgyz1s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/raghavgautam/osx-lib")
    (synopsis "Basic functions for Apple/OSX")
    (description
      "Documentation at https://melpa.org/#/osx-lib")
    (license #f)))

(define-public emacs-osx-location
  (package
    (name "emacs-osx-location")
    (version "20200304.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/osx-location.git")
               (commit
                 "18fcc306caa575c5afdeaf091aa1a9b003daa52a")))
        (sha256
          (base32
            "0n59mf0qx78d4qb071qgbvd50vzkn3xffwgxjwjv90193h99qdnj"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "EmacsLocationHelper")))
    (home-page
      "https://github.com/purcell/osx-location")
    (synopsis
      "Watch and respond to changes in geographical location on OS X")
    (description
      "Documentation at https://melpa.org/#/osx-location")
    (license #f)))

(define-public emacs-osx-org-clock-menubar
  (package
    (name "emacs-osx-org-clock-menubar")
    (version "20150205.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jordonbiondo/osx-org-clock-menubar.git")
               (commit
                 "9964d2a97cc2fb6570dc4116da44f73bd8eb7cb3")))
        (sha256
          (base32
            "1rgykby1ysbapq53lnk9yy04r9q4qirnzs2abgvz7g2qjq5fyzag"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.rb")))
    (home-page
      "https://github.com/jordonbiondo/osx-org-clock-menubar")
    (synopsis
      "simple menubar integration for org-clock")
    (description
      "Documentation at https://melpa.org/#/osx-org-clock-menubar")
    (license #f)))

(define-public emacs-osx-plist
  (package
    (name "emacs-osx-plist")
    (version "20200212.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonewest818/osx-plist.git")
               (commit
                 "46d52aa186ea50a35c1780977bf0aa261bd53922")))
        (sha256
          (base32
            "14786js8zl2yy0f3gbhh980wzsc3lmiga2w6fls36gmgdxsgrqym"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gonewest818/osx-plist")
    (synopsis "Apple plist file parser")
    (description
      "Documentation at https://melpa.org/#/osx-plist")
    (license #f)))

(define-public emacs-osx-pseudo-daemon
  (package
    (name "emacs-osx-pseudo-daemon")
    (version "20200215.513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/mac-pseudo-daemon.git")
               (commit
                 "94240ebb716f11af8427b6295c3f44c0c43419d3")))
        (sha256
          (base32
            "0c3l50qpdzracjncsbjv5chpvjdphhzwqk4jwv31fw6p62i1zvlb"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("osx-pseudo-daemon.el")))
    (home-page
      "https://github.com/DarwinAwardWinner/osx-pseudo-daemon")
    (synopsis
      "Daemon mode that plays nice with OSX.")
    (description
      "Documentation at https://melpa.org/#/osx-pseudo-daemon")
    (license #f)))

(define-public emacs-osx-trash
  (package
    (name "emacs-osx-trash")
    (version "20220913.1736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/osx-trash.git")
               (commit
                 "90f0c99206022fec646206018fcd63d9d2e57325")))
        (sha256
          (base32
            "1mmpxbg21zqkapy7vq8a5mbl58z75ax4i41bhb6s4wjqs19idky0"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "*.AppleScript")))
    (home-page
      "https://github.com/lunaryorn/osx-trash.el")
    (synopsis "System trash for OS X")
    (description
      "Documentation at https://melpa.org/#/osx-trash")
    (license #f)))

(define-public emacs-otama
  (package
    (name "emacs-otama")
    (version "20160404.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshinari-nomura/otama.git")
               (commit
                 "c114fd8006762f891bc120a7c0ea213872e7ab31")))
        (sha256
          (base32
            "1jzyfvc25ls0l4kpxg6857ccynl1pzgxfif7bppz2nfmf99z4534"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Org-table Manipulator")
    (description
      "Documentation at https://melpa.org/#/otama")
    (license #f)))

(define-public emacs-other-emacs-eval
  (package
    (name "emacs-other-emacs-eval")
    (version "20180408.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/other-emacs-eval.git")
               (commit
                 "8ace5acafef65daabf0c6619eff60733d7f5d792")))
        (sha256
          (base32
            "1pry1xw2p01b18ks5n0xs895qqqci7v2nrwjiil2vr3m1ys92ymc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/xuchunyang/other-emacs-eval")
    (synopsis
      "Evaluate the Emacs Lisp expression in other Emacs")
    (description
      "Documentation at https://melpa.org/#/other-emacs-eval")
    (license #f)))

(define-public emacs-ouroboros
  (package
    (name "emacs-ouroboros")
    (version "20230606.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "cf85424b305e8f89debb756dc67eebc84639f711")))
        (sha256
          (base32
            "09649ahqjp8kgi89s93qfqz3f27sf28qdmd8nyramz1yppklfia2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-cbor emacs-bech32))
    (arguments '(#:files ("ouroboros.el")))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "Ouroboros network mini-protocol")
    (description
      "Documentation at https://melpa.org/#/ouroboros")
    (license #f)))

(define-public emacs-outline-magic
  (package
    (name "emacs-outline-magic")
    (version "20180619.1819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tj64/outline-magic.git")
               (commit
                 "2a5f07417b696cf7541d435c43bafcc64817636b")))
        (sha256
          (base32
            "1iyslhk2zvhn4ip27apkjzkqw56lfakp2jzwz106jm45f3kllpc8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "outline mode extensions for Emacs")
    (description
      "Documentation at https://melpa.org/#/outline-magic")
    (license #f)))

(define-public emacs-outline-minor-faces
  (package
    (name "emacs-outline-minor-faces")
    (version "20230514.1801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/outline-minor-faces.git")
               (commit
                 "57c4a0fac36a26cfa8d1296e76afbcf7a5b87a57")))
        (sha256
          (base32
            "1pavzlb48a7062mrv9ldfwh1fl7pbhwy1i4j24lgmynbnv1kk96n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/outline-minor-faces")
    (synopsis "Highlight only section headings")
    (description
      "Documentation at https://melpa.org/#/outline-minor-faces")
    (license #f)))

(define-public emacs-outline-toc
  (package
    (name "emacs-outline-toc")
    (version "20200401.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/outline-toc.el.git")
               (commit
                 "81d373633b40628cc3a6b6fb534fd7730076bcdb")))
        (sha256
          (base32
            "1ad6bxa5x95n6i1197p13qy5fgzn1pslwbzqsf4rfy9bvr49g6q3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abingham/outline-toc.el")
    (synopsis
      "Sidebar showing a \"table of contents\".")
    (description
      "Documentation at https://melpa.org/#/outline-toc")
    (license #f)))

(define-public emacs-outlook
  (package
    (name "emacs-outlook")
    (version "20180428.1430")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asavonic/outlook.el.git")
               (commit
                 "359683aff91b38bd1398a6ed4058a06f09a02d65")))
        (sha256
          (base32
            "1kdqwyghrrmwcqkjjr2wq4ig1gsv7mr8fy2y6ddy4zmygblqi6si"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/asavonic/outlook.el")
    (synopsis "send emails in MS Outlook style")
    (description
      "Documentation at https://melpa.org/#/outlook")
    (license #f)))

(define-public emacs-outorg
  (package
    (name "emacs-outorg")
    (version "20190720.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/outorg.git")
               (commit
                 "ef0f86f4b893b30be8bcf8b43a5ec357a6c70f07")))
        (sha256
          (base32
            "1dpqr339n2pjc2fdd7sjzy6lyxaxx8yq507rjwn7vk8k1bdwri83"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/alphapapa/outorg")
    (synopsis "Org-style comment editing")
    (description
      "Documentation at https://melpa.org/#/outorg")
    (license #f)))

(define-public emacs-outrespace
  (package
    (name "emacs-outrespace")
    (version "20220218.1936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/articuluxe/outrespace.git")
               (commit
                 "4b6f8a103b2ce76bb0638eac9356c462402b0665")))
        (sha256
          (base32
            "0dsiid2g93cc9k1385igbn26rqmdn1nr11l3gfaikcqbrh93pdgw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/articuluxe/outrespace.git")
    (synopsis "Some c++ namespace utility functions")
    (description
      "Documentation at https://melpa.org/#/outrespace")
    (license #f)))

(define-public emacs-outshine
  (package
    (name "emacs-outshine")
    (version "20220326.540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/outshine.git")
               (commit
                 "bf1eed10dd7a89b63d0fc014944033db397c1e23")))
        (sha256
          (base32
            "19ni7j84361if3kyap1jf2xj0w3myp9iiz52gjcmbgk1g1g9ycdc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-outorg))
    (home-page
      "https://github.com/alphapapa/outshine")
    (synopsis
      "outline with outshine outshines outline")
    (description
      "Documentation at https://melpa.org/#/outshine")
    (license #f)))

(define-public emacs-ov
  (package
    (name "emacs-ov")
    (version "20230522.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ov.git")
               (commit
                 "e2971ad986b6ac441e9849031d34c56c980cf40b")))
        (sha256
          (base32
            "1f8nsaq00pxh2yx5vq1j8bvdcymnq284jdqm6yqggz45j3sw52b5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ShingoFukuyama/ov.el")
    (synopsis "Overlay library for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ov")
    (license #f)))

(define-public emacs-overcast-theme
  (package
    (name "emacs-overcast-theme")
    (version "20200425.1601")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myTerminal/overcast-theme.git")
               (commit
                 "e02b835a08919ead079d7221d513348ac02ba92e")))
        (sha256
          (base32
            "0fy8739fbhmixgjxgd1j5v2rjkwhsqac5kczx3mdjlfd2w55k3h7"))))
    (build-system melpa-build-system)
    (home-page "http://ismail.teamfluxion.com")
    (synopsis
      "A dark but vibrant color theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/overcast-theme")
    (license #f)))

(define-public emacs-overseer
  (package
    (name "emacs-overseer")
    (version "20180226.619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tonini/overseer.el.git")
               (commit
                 "02d49f582e80e36b4334c9187801c5ecfb027789")))
        (sha256
          (base32
            "0q4ai7ividy8xv09s342y49s97ismhfdfsjk70zif60fp0ajfzfn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-pkg-info emacs-f))
    (home-page
      "http://www.github.com/tonini/overseer.el")
    (synopsis "Ert-runner Integration Into Emacs")
    (description
      "Documentation at https://melpa.org/#/overseer")
    (license #f)))

(define-public emacs-ovpn-mode
  (package
    (name "emacs-ovpn-mode")
    (version "20210403.440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anticomputer/ovpn-mode.git")
               (commit
                 "4492098c771d094dd0661a5bc6906f65fb530825")))
        (sha256
          (base32
            "1dqy50mvnffhsmfnrkf6n4xic7699dhx4ky2chmcsr6yly3gvwj1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anticomputer/ovpn-mode")
    (synopsis "an openvpn management mode")
    (description
      "Documentation at https://melpa.org/#/ovpn-mode")
    (license #f)))

(define-public emacs-owcmd
  (package
    (name "emacs-owcmd")
    (version "20200517.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fishyfriend/owcmd.git")
               (commit
                 "05fb8f8f81838b5888fdec8b3947096dd2222e61")))
        (sha256
          (base32
            "0y9ldprxhp6nq8m5bxmhw4iq4n78wvdx2jmr5w9wbd0znvi4cbfz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fishyfriend/owcmd")
    (synopsis
      "Run a single command in the other window")
    (description
      "Documentation at https://melpa.org/#/owcmd")
    (license #f)))

(define-public emacs-owdriver
  (package
    (name "emacs-owdriver")
    (version "20200410.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/owdriver.git")
               (commit
                 "3c52a7b11c8275fdb2e4cf98f68f2a48ad09a3ae")))
        (sha256
          (base32
            "1lxvcbpzpzs3vkgg4pif3k89ddmj5mamk2q18wc3gx0czs6v301d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-smartrep
            emacs-log4e
            emacs-yaxception))
    (home-page "https://github.com/aki2o/owdriver")
    (synopsis
      "Quickly perform various actions on other windows")
    (description
      "Documentation at https://melpa.org/#/owdriver")
    (license #f)))

(define-public emacs-ox-750words
  (package
    (name "emacs-ox-750words")
    (version "20220625.1407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzamboni/750words-client.git")
               (commit
                 "8abef82d644223c7991beb689072889c72d1faee")))
        (sha256
          (base32
            "1vbh0gynm4z5rhrzcava5dh1m6hh683fz18b7rjjib31l7fx96s0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-750words))
    (arguments '(#:files ("ox-750words.el")))
    (home-page
      "https://github.com/zzamboni/750words-client")
    (synopsis "Org mode exporter for 750words.com")
    (description
      "Documentation at https://melpa.org/#/ox-750words")
    (license #f)))

(define-public emacs-ox-asciidoc
  (package
    (name "emacs-ox-asciidoc")
    (version "20220625.2321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yashi/org-asciidoc.git")
               (commit
                 "a55ac6adef39124c9434be47fe9cc0c75c4bfea2")))
        (sha256
          (base32
            "1yz2nyq651wv82hccp04cqkikzj0jv5hvam48v0s9plynwlrc359"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-asciidoc.el")))
    (home-page
      "https://github.com/yashi/org-asciidoc")
    (synopsis
      "AsciiDoc Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-asciidoc")
    (license #f)))

(define-public emacs-ox-bb
  (package
    (name "emacs-ox-bb")
    (version "20210222.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmitch/ox-bb.git")
               (commit
                 "545d2e1547fdc48a5757152d19233effa11d9ee2")))
        (sha256
          (base32
            "1mv0x345rn85cyq0qm4kz22ymxbaa4r9lhnp7n2d2cp0cn23m9zv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mmitch/ox-bb")
    (synopsis
      "BBCode Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-bb")
    (license #f)))

(define-public emacs-ox-bibtex-chinese
  (package
    (name "emacs-ox-bibtex-chinese")
    (version "20170723.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/ox-bibtex-chinese.git")
               (commit
                 "2ad2364399229144110db7ef6365ad0461d6a38c")))
        (sha256
          (base32
            "06lp56na1fv87296hhaxgb6gfnzln39p4v245gfxhk0k27589vxj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "bibtex-styles")))
    (home-page
      "https://github.com/tumashu/ox-bibtex-chinese.git")
    (synopsis
      "Let ox-bibtex work well for Chinese users")
    (description
      "Documentation at https://melpa.org/#/ox-bibtex-chinese")
    (license #f)))

(define-public emacs-ox-clip
  (package
    (name "emacs-ox-clip")
    (version "20220117.1909")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jkitchin/ox-clip.git")
               (commit
                 "ff117cf3c619eef12eccc0ccbfa3f11adb73ea68")))
        (sha256
          (base32
            "0lwfpm5i5k1gaf0gmqjaxccisha4d7p6v8y9z9a510rc28a86vyb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page "https://github.com/jkitchin/ox-clip")
    (synopsis
      "Cross-platform formatted copying for org-mode")
    (description
      "Documentation at https://melpa.org/#/ox-clip")
    (license #f)))

(define-public emacs-ox-epub
  (package
    (name "emacs-ox-epub")
    (version "20181101.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ofosos/ox-epub.git")
               (commit
                 "c9629ef4b4bc40d51afefd8c0bb2c683931e6409")))
        (sha256
          (base32
            "0z1a447v4fy5x6ib8lm4w8m9n2nx41ksbdsjz2xm8iy70is13yd2"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/ofosos/org-epub")
    (synopsis "Export org mode projects to EPUB")
    (description
      "Documentation at https://melpa.org/#/ox-epub")
    (license #f)))

(define-public emacs-ox-gemini
  (package
    (name "emacs-ox-gemini")
    (version "20230517.1559")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ox-gemini-"
               version
               ".tar"))
        (sha256
          (base32
            "0810cl72m4srf6yyb23xfjls48qk5ylqci4ragy8bgnrg67lxybc"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~abrahms/ox-gemini")
    (synopsis
      "Output gemini formatted documents from org-mode")
    (description
      "Documentation at https://melpa.org/#/ox-gemini")
    (license #f)))

(define-public emacs-ox-gfm
  (package
    (name "emacs-ox-gfm")
    (version "20220910.1321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larstvei/ox-gfm.git")
               (commit
                 "46faa67dbb3fb0cd7a76c3fe518f16e4195c22c7")))
        (sha256
          (base32
            "0xiqxahxwaicxdi6apmdsrhvlyg63i9zr57l050f339p8x7id367"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Github Flavored Markdown Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-gfm")
    (license #f)))

(define-public emacs-ox-gist
  (package
    (name "emacs-ox-gist")
    (version "20220410.2034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/punchagan/ox-gist.git")
               (commit
                 "e9f1f11af0e97fee30c2b15b56c236b1f4e1f400")))
        (sha256
          (base32
            "0qxbqrcqvxs2pz5and0lxpc813v68j7a7qpw4y2l2adxx4zjazzj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-gist emacs-s))
    (home-page
      "https://github.com/punchagan/org2gist/")
    (synopsis
      "Export Org mode buffers and subtrees to GitHub gists")
    (description
      "Documentation at https://melpa.org/#/ox-gist")
    (license #f)))

(define-public emacs-ox-haunt
  (package
    (name "emacs-ox-haunt")
    (version "20230725.1")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ox-haunt-"
               version
               ".tar"))
        (sha256
          (base32
            "1drbwynvhq0kb6dxrk5dwg7v2dgydlihfxxpdc1d66fqhxsgzym2"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~jakob/ox-haunt")
    (synopsis
      "Haunt-flavored HTML backend for the Org export engine")
    (description
      "Documentation at https://melpa.org/#/ox-haunt")
    (license #f)))

(define-public emacs-ox-html5slide
  (package
    (name "emacs-ox-html5slide")
    (version "20221025.521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/org-html5slide.git")
               (commit
                 "4e0d9026c96e1dde22cca7c700669f1f863a9d07")))
        (sha256
          (base32
            "1bbnj1vbyz79pprq0fb50ngv7ial7car247pj3dk9wyq0ch7navz"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/org-html5slide")
    (synopsis "Export org-mode to HTML5 slide.")
    (description
      "Documentation at https://melpa.org/#/ox-html5slide")
    (license #f)))

(define-public emacs-ox-hugo
  (package
    (name "emacs-ox-hugo")
    (version "20221028.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaushalmodi/ox-hugo.git")
               (commit
                 "a66063a9915c859c57944564f0b8dbc7949d4449")))
        (sha256
          (base32
            "0yd7i1ryzc6lwmkfhkdh1kqqjyvzc1m0yyprm2m8xakkc12wljmd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tomelr))
    (home-page "https://ox-hugo.scripter.co")
    (synopsis
      "Hugo Markdown Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-hugo")
    (license #f)))

(define-public emacs-ox-impress-js
  (package
    (name "emacs-ox-impress-js")
    (version "20150412.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nullpofy/org-impress-js.el.git")
               (commit
                 "91c6d2af6af308ade352a03355c4fb551b238c6b")))
        (sha256
          (base32
            "1kf2si2lyy0xc971bx5zd2j9mnz1smc9s8l0dwc6iksh2v9q8cy9"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "resources")))
    (home-page
      "https://github.com/kinjo/org-impress-js.el")
    (synopsis
      "impress.js Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-impress-js")
    (license #f)))

(define-public emacs-ox-ioslide
  (package
    (name "emacs-ox-ioslide")
    (version "20161015.1338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/org-ioslide.git")
               (commit
                 "6555680be5364c8ddd2bf446865cb1a82adb6b9e")))
        (sha256
          (base32
            "05d1bykgj454g0vq2k2sd36pd9hmcwr9a8033dagkqc625h7wj4h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-makey))
    (arguments
      '(#:files (:defaults "js" "theme" "images")))
    (home-page
      "http://github.com/coldnew/org-ioslide")
    (synopsis
      "Export org-mode to Google I/O HTML5 slide.")
    (description
      "Documentation at https://melpa.org/#/ox-ioslide")
    (license #f)))

(define-public emacs-ox-jekyll-md
  (package
    (name "emacs-ox-jekyll-md")
    (version "20211222.1718")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gonsie/ox-jekyll-md.git")
               (commit
                 "26edb3f4575bcb0f1a2aed56237cd89694284449")))
        (sha256
          (base32
            "0zlmpz7j2b1vixr1mk16sllrj23m3jgrns81z2cab4bbyszs242y"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Export Jekyll on Markdown articles using org-mode.")
    (description
      "Documentation at https://melpa.org/#/ox-jekyll-md")
    (license #f)))

(define-public emacs-ox-jira
  (package
    (name "emacs-ox-jira")
    (version "20220423.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stig/ox-jira.el.git")
               (commit
                 "00184f8fdef02a3a359a253712e8769cbfbea3ba")))
        (sha256
          (base32
            "1zyq4d0fvyawvb3w6072zl4zgbnrpzmxlz2l731wqrgnwm0l80gy"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/stig/ox-jira.el")
    (synopsis "JIRA Backend for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-jira")
    (license #f)))

(define-public emacs-ox-json
  (package
    (name "emacs-ox-json")
    (version "20210928.347")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jlumpe/ox-json.git")
               (commit
                 "4d2e0aa7f92d07e16cea2dd5e1d250a3f243c3cf")))
        (sha256
          (base32
            "1h5930953nnddg7ysr87m5r6gm517zbfi7jbc77hmrywgibqvpik"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/jlumpe/ox-json")
    (synopsis "JSON export backend for Org mode")
    (description
      "Documentation at https://melpa.org/#/ox-json")
    (license #f)))

(define-public emacs-ox-latex-subfigure
  (package
    (name "emacs-ox-latex-subfigure")
    (version "20200326.919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/linktohack/ox-latex-subfigure.git")
               (commit
                 "c4487689309dddff3228603754b69ab381cfa5dc")))
        (sha256
          (base32
            "17p42zv2slnfahrh9ln3rrh3fjnh2bk4j4fxljn589cgv0wblwqc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/linktohack/ox-latex-subfigure")
    (synopsis "Subfigure for latex export")
    (description
      "Documentation at https://melpa.org/#/ox-latex-subfigure")
    (license #f)))

(define-public emacs-ox-leanpub
  (package
    (name "emacs-ox-leanpub")
    (version "20230415.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/zzamboni/ox-leanpub.git")
               (commit
                 "dd21c99705bc3863c43e05c9d24ab33646789711")))
        (sha256
          (base32
            "1sy8hqb92yacgy0lxc0prcn254pxrn7afs7wmd1v9nnsk277355p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ox-gfm emacs-s))
    (home-page
      "https://gitlab.com/zzamboni/ox-leanpub")
    (synopsis
      "Export Org documents to Leanpub book format")
    (description
      "Documentation at https://melpa.org/#/ox-leanpub")
    (license #f)))

(define-public emacs-ox-linuxmag-fr
  (package
    (name "emacs-ox-linuxmag-fr")
    (version "20230611.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/ox-linuxmag-fr.git")
               (commit
                 "535f7228a845b69a9f70d81b30d304a2bf01cd3d")))
        (sha256
          (base32
            "15r140ivf5y593xv16yvf9hqp005fvka7wyfikk7s5baalali39i"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "resources")))
    (home-page
      "https://github.com/DamienCassou/ox-linuxmag-fr")
    (synopsis
      "Org-mode exporter for the French GNU/Linux Magazine")
    (description
      "Documentation at https://melpa.org/#/ox-linuxmag-fr")
    (license #f)))

(define-public emacs-ox-mdx-deck
  (package
    (name "emacs-ox-mdx-deck")
    (version "20181115.1847")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/WolfeCub/ox-mdx-deck.git")
               (commit
                 "2e46ac76f7ac279c371474cbbf39634bbe40f4c7")))
        (sha256
          (base32
            "1vhfyfdc83js33sm498fm3wmn80wmqnvn5dkabhdbk5gd9a9zdis"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ox-hugo))
    (home-page
      "https://github.com/WolfeCub/ox-mdx-deck/")
    (synopsis "org-mode to mdx-deck exporter")
    (description
      "Documentation at https://melpa.org/#/ox-mdx-deck")
    (license #f)))

(define-public emacs-ox-mediawiki
  (package
    (name "emacs-ox-mediawiki")
    (version "20230425.115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomalexander/orgmode-mediawiki.git")
               (commit
                 "fa4954c12ab339ac8adf2830141390e71ee13067")))
        (sha256
          (base32
            "199q2vjmlzqshhby28yw8qm6zmc79126nrl3sl25yffm7vl0f36m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/tomalexander/orgmode-mediawiki")
    (synopsis
      "Mediawiki Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-mediawiki")
    (license #f)))

(define-public emacs-ox-minutes
  (package
    (name "emacs-ox-minutes")
    (version "20180202.1734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaushalmodi/ox-minutes.git")
               (commit
                 "27c29f3fdb9181322ae56f8bace8d95e621230e5")))
        (sha256
          (base32
            "10rw12gmg3d6fvkqijmjnk5bdpigvm8fy34435mwg7raw0gmlq75"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kaushalmodi/ox-minutes")
    (synopsis
      "Plain text backend for Org for Meeting Minutes")
    (description
      "Documentation at https://melpa.org/#/ox-minutes")
    (license #f)))

(define-public emacs-ox-nikola
  (package
    (name "emacs-ox-nikola")
    (version "20151114.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/msnoigrs/ox-nikola.git")
               (commit
                 "5bcbc1a38f6619f62294194f13ca0cd4ca14dd48")))
        (sha256
          (base32
            "0cc14p6c3d4djfmrkac0abb2jq128vlmayv2a8cyvnyjffyvjbk7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ox-rst))
    (home-page
      "https://github.com/masayuko/ox-nikola")
    (synopsis
      "Export Nikola articles using org-mode.")
    (description
      "Documentation at https://melpa.org/#/ox-nikola")
    (license #f)))

(define-public emacs-ox-pandoc
  (package
    (name "emacs-ox-pandoc")
    (version "20230627.643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/ox-pandoc.git")
               (commit
                 "0f758517f512e375825679541b5d905be40342eb")))
        (sha256
          (base32
            "0snq2mkxw7inkrny5dnqknq2i8kz6cyr73w2fnl46r9zxj59ykz0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-ht))
    (home-page "https://github.com/a-fent/ox-pandoc")
    (synopsis "An Org-mode exporter using pandoc")
    (description
      "Documentation at https://melpa.org/#/ox-pandoc")
    (license #f)))

(define-public emacs-ox-pukiwiki
  (package
    (name "emacs-ox-pukiwiki")
    (version "20150124.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yashi/org-pukiwiki.git")
               (commit
                 "bdbde2c294f5d3de11f08a3fe19f01175d2e011a")))
        (sha256
          (base32
            "0adj6gm39qw4ivb7csfh21qqqipcnw1sgm1xdqvrk86kbs9k1b2g"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-pukiwiki.el")))
    (home-page
      "https://github.com/yashi/org-pukiwiki")
    (synopsis
      "Pukiwiki Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-pukiwiki")
    (license #f)))

(define-public emacs-ox-qmd
  (package
    (name "emacs-ox-qmd")
    (version "20230325.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/0x60df/ox-qmd.git")
               (commit
                 "0b5fa1e20aaa48d93600e1b8d09c3b6f55af3373")))
        (sha256
          (base32
            "1n0il25a5dwn0dh5a8q3190yfbmfgdi17k1b4vyj83gl7ga40v0d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-mimetypes))
    (home-page "https://github.com/0x60df/ox-qmd")
    (synopsis
      "Qiita Markdown Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-qmd")
    (license #f)))

(define-public emacs-ox-report
  (package
    (name "emacs-ox-report")
    (version "20230712.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarkBuffalo/ox-report.git")
               (commit
                 "91e047968c4730dfe10d1e94836e0747de8c7361")))
        (sha256
          (base32
            "1fqmkfdgigfjq9f1i80lpdkidafwa5rk5j687j0kkqwaig9lch39"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-msg))
    (home-page
      "https://github.com/DarkBuffalo/ox-report")
    (synopsis
      "Export your org file to minutes report PDF file")
    (description
      "Documentation at https://melpa.org/#/ox-report")
    (license #f)))

(define-public emacs-ox-reveal
  (package
    (name "emacs-ox-reveal")
    (version "20221127.814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yjwen/org-reveal.git")
               (commit
                 "f55c851bf6aeb1bb2a7f6cf0f2b7bd0e79c4a5a0")))
        (sha256
          (base32
            "1ck8v9qwk434w4ib9bmlmpqmiv8k1is5bcr5h7pnswgmgma68dka"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "reveal.js Presentation Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-reveal")
    (license #f)))

(define-public emacs-ox-review
  (package
    (name "emacs-ox-review")
    (version "20220619.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masfj/ox-review.git")
               (commit
                 "f7dc418f9812088afc0ee0d08f778a5654686ef3")))
        (sha256
          (base32
            "0yplmrzb2j47plj99l06mznva93wynsqjcz5v4bkryswnwn10jab"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/masfj/ox-review")
    (synopsis
      "Re:VIEW Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-review")
    (license #f)))

(define-public emacs-ox-rfc
  (package
    (name "emacs-ox-rfc")
    (version "20230619.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/choppsv1/org-rfc-export.git")
               (commit
                 "ad1885233774e3473ea697c7240e248381a84d3e")))
        (sha256
          (base32
            "195grf46xnnfi2mcrd02c99ig40rwb6s3hmri5jwm4dd2psawc2a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/choppsv1/org-rfc-export")
    (synopsis "RFC Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-rfc")
    (license #f)))

(define-public emacs-ox-rss
  (package
    (name "emacs-ox-rss")
    (version "20230408.231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BenedictHW/ox-rss.git")
               (commit
                 "d2964eca3614f84db85b498d065862a1e341868d")))
        (sha256
          (base32
            "0piycm3b2lz2a9zg4g8ldsrjnbfvqhmf3aibsivb1dlvhzylwm4h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/benedicthw/ox-rss.git")
    (synopsis
      "RSS 2.0 Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-rss")
    (license #f)))

(define-public emacs-ox-rst
  (package
    (name "emacs-ox-rst")
    (version "20200815.1511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/msnoigrs/ox-rst.git")
               (commit
                 "99fa790da55b57a3f2e9aa187493ba434a64250e")))
        (sha256
          (base32
            "0dxadzbha2fvg42jh4ng8hjb582mv7avlzmpxlzf32qxf6x8r638"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/msnoigrs/ox-rst")
    (synopsis
      "Export reStructuredText using org-mode.")
    (description
      "Documentation at https://melpa.org/#/ox-rst")
    (license #f)))

(define-public emacs-ox-slack
  (package
    (name "emacs-ox-slack")
    (version "20200108.1546")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/titaniumbones/ox-slack.git")
               (commit
                 "bd797dcc58851d5051dc3516c317706967a44721")))
        (sha256
          (base32
            "1kh2v08fqmsmfj44ik8pljs3fz47fg9zf6q4mr99c0m5ccj5ck7w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ox-gfm))
    (home-page
      "https://github.com/titaniumbones/ox-slack")
    (synopsis "Slack Exporter for org-mode")
    (description
      "Documentation at https://melpa.org/#/ox-slack")
    (license #f)))

(define-public emacs-ox-spectacle
  (package
    (name "emacs-ox-spectacle")
    (version "20230307.316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lorniu/ox-spectacle.git")
               (commit
                 "c2d34f170f470461aeec983b778e9d165bdb4d1f")))
        (sha256
          (base32
            "02z8fdc7lcj10xh3ix58ddk96wqkrxxgsfsc1061c62fq1b6l5bs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lorniu/ox-spectacle")
    (synopsis
      "Spectacle.js Presentation Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-spectacle")
    (license #f)))

(define-public emacs-ox-ssh
  (package
    (name "emacs-ox-ssh")
    (version "20210917.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/ox-ssh.git")
               (commit
                 "be3b39160da6ae37b1f1cd175ed854ac41d1cb63")))
        (sha256
          (base32
            "069qvxsxipgc7sh112ci2ynv406kj5vrsjgqhdhmnzkp6fhyhm9n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dantecatalfamo/ox-ssh")
    (synopsis
      "SSH Config Backend for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-ssh")
    (license #f)))

(define-public emacs-ox-textile
  (package
    (name "emacs-ox-textile")
    (version "20210919.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yashi/org-textile.git")
               (commit
                 "5f2f61f572c24d702e922845c11a4c3da38ab261")))
        (sha256
          (base32
            "17qf0346a5n1sy3cjzfx8r9kblrlfbnp8hy74y5fq2dczmhqrjrh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-textile.el")))
    (home-page
      "https://github.com/yashi/org-textile")
    (synopsis
      "Textile Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-textile")
    (license #f)))

(define-public emacs-ox-tiddly
  (package
    (name "emacs-ox-tiddly")
    (version "20200927.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org8-wikiexporters.git")
               (commit
                 "3377d8732aa916e736ce5822c7a9a4fbdc894e37")))
        (sha256
          (base32
            "05133n998sp3qymhrz6sarjc7ypzjiwpvpcgilq6z8i4sl2ip98q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-tiddly.el")))
    (home-page
      "https://github.com/dfeich/org8-wikiexporters")
    (synopsis "Org TiddlyWiki exporter")
    (description
      "Documentation at https://melpa.org/#/ox-tiddly")
    (license #f)))

(define-public emacs-ox-timeline
  (package
    (name "emacs-ox-timeline")
    (version "20220321.2115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjuliano/org-simple-timeline.git")
               (commit
                 "b28bd4ccd5fa114c0f51b9766f0b9be7fe05fdd8")))
        (sha256
          (base32
            "0l71bhbgs2g0gbfl8lf6p2hnnyma26qk67q59x935hkgjbb4vx1z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jjuliano/org-simple-timeline")
    (synopsis
      "HTML Timeline Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-timeline")
    (license #f)))

(define-public emacs-ox-trac
  (package
    (name "emacs-ox-trac")
    (version "20171026.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JalapenoGremlin/ox-trac.git")
               (commit
                 "03cc31efb1aa06991918f1071e250a9d58f96cfb")))
        (sha256
          (base32
            "0knrmq0sc8s9c6j0967jmrp2hq8jcwg281qqk89y8j9rpbmhbaj6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/JalapenoGremlin/ox-trac")
    (synopsis
      "Org Export Backend to Trac WikiFormat")
    (description
      "Documentation at https://melpa.org/#/ox-trac")
    (license #f)))

(define-public emacs-ox-tufte
  (package
    (name "emacs-ox-tufte")
    (version "20231022.2117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ox-tufte/ox-tufte.git")
               (commit
                 "58422fb109f2b2a997f9c773b5436e7b62182e12")))
        (sha256
          (base32
            "14i1pliifj5p0i1bgsdgph32ilj7snrh8gnhk59f1f4ngh3kw3zg"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "src")))
    (home-page
      "https://github.com/ox-tufte/ox-tufte")
    (synopsis "Tufte HTML org-mode export backend")
    (description
      "Documentation at https://melpa.org/#/ox-tufte")
    (license #f)))

(define-public emacs-ox-twbs
  (package
    (name "emacs-ox-twbs")
    (version "20200628.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marsmining/ox-twbs.git")
               (commit
                 "e8a27dc78b7be494d9918f26db7a3bbb6b45020b")))
        (sha256
          (base32
            "0nffy7ivs8fw0dj3s66hbsby0riz5wrv7xzm8g9mrfvhki938pqa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/marsmining/ox-twbs")
    (synopsis
      "Bootstrap compatible HTML Back-End for Org")
    (description
      "Documentation at https://melpa.org/#/ox-twbs")
    (license #f)))

(define-public emacs-ox-twiki
  (package
    (name "emacs-ox-twiki")
    (version "20200927.857")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dfeich/org8-wikiexporters.git")
               (commit
                 "3377d8732aa916e736ce5822c7a9a4fbdc894e37")))
        (sha256
          (base32
            "05133n998sp3qymhrz6sarjc7ypzjiwpvpcgilq6z8i4sl2ip98q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ox-twiki.el")))
    (home-page
      "https://github.com/dfeich/org8-wikiexporters")
    (synopsis "Org Twiki and Foswiki export")
    (description
      "Documentation at https://melpa.org/#/ox-twiki")
    (license #f)))

(define-public emacs-ox-wk
  (package
    (name "emacs-ox-wk")
    (version "20191231.2058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/w-vi/ox-wk.el.git")
               (commit
                 "d34d1b72e4e940745a377bfa745dfb618900a09e")))
        (sha256
          (base32
            "05813w4adafm596x1rikvc7xqk10xwfihdpdq1zr2zyqcpdabqza"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/w-vi/ox-wk.el")
    (synopsis "Wiki Back-End for Org Export Engine")
    (description
      "Documentation at https://melpa.org/#/ox-wk")
    (license #f)))

(define-public emacs-ox-yaow
  (package
    (name "emacs-ox-yaow")
    (version "20220629.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LaurenceWarne/ox-yaow.el.git")
               (commit
                 "71d7cee736542f6504c4733d040601d2d2086443")))
        (sha256
          (base32
            "1s98whfigskaxxfq14w66w2714pglqr8c32p26d8y1h7g6jd13f9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f emacs-s emacs-dash))
    (home-page
      "https://github.com/LaurenceWarne/ox-yaow.el")
    (synopsis "Generate html pages from org files")
    (description
      "Documentation at https://melpa.org/#/ox-yaow")
    (license #f)))

(define-public emacs-ox-zenn
  (package
    (name "emacs-ox-zenn")
    (version "20200924.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/ox-zenn.el.git")
               (commit
                 "b53bd82116c9f7dbb5b476d2cfcc8ed0f3bc9c78")))
        (sha256
          (base32
            "1n57bzsp73g5iqdnhc4jhsylif93h4kkl7zgqi1i9b8bi90sqrl1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/conao3/ox-zenn.el")
    (synopsis
      "Zenn flavored markdown backend for org export engine")
    (description
      "Documentation at https://melpa.org/#/ox-zenn")
    (license #f)))

(define-public emacs-p4
  (package
    (name "emacs-p4")
    (version "20150721.1937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gareth-rees/p4.el.git")
               (commit
                 "eff047caa75dbe4965defca9d1212454cdb755d5")))
        (sha256
          (base32
            "12jsnfppif4l548wymvakx0f2zlm63xs6kfrb49hicmk668cq4ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gareth-rees/p4.el")
    (synopsis "Simple Perforce-Emacs Integration")
    (description
      "Documentation at https://melpa.org/#/p4")
    (license #f)))

(define-public emacs-pabbrev
  (package
    (name "emacs-pabbrev")
    (version "20160320.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/pabbrev.git")
               (commit
                 "56400d5d256b42ffe45c229ea9827f026b650cf5")))
        (sha256
          (base32
            "09bn19ydyz1hncmvyyh87gczp3lmlczpm352p0107z1gw6xmpjil"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Predictive abbreviation expansion")
    (description
      "Documentation at https://melpa.org/#/pabbrev")
    (license #f)))

(define-public emacs-pacfiles-mode
  (package
    (name "emacs-pacfiles-mode")
    (version "20230503.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/UndeadKernel/pacfiles-mode.git")
               (commit
                 "a613d1d88dba4cb293ecaf42a9aeff7d8a3ce8aa")))
        (sha256
          (base32
            "1d61s846r9ncmyx97f44r8i3p1ikgi4bab8k7xk868lja96y2ij7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/UndeadKernel/pacfiles-mode")
    (synopsis "The pacnew and pacsave merging tool")
    (description
      "Documentation at https://melpa.org/#/pacfiles-mode")
    (license #f)))

(define-public emacs-pack
  (package
    (name "emacs-pack")
    (version "20191017.456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/pack-el.git")
               (commit
                 "85cd856fdc00a2365e88b50373b99f1b3d2227be")))
        (sha256
          (base32
            "0v95ni44scn42mm6mwrdi1vbi1n2h4bw961apm7bp6ilamwpbif8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/10sr/pack-el")
    (synopsis "Pack and unpack archive files")
    (description
      "Documentation at https://melpa.org/#/pack")
    (license #f)))

(define-public emacs-package+
  (package
    (name "emacs-package+")
    (version "20230805.2115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenspider/package.git")
               (commit
                 "57a53a1da75d76a9dcd17008d1c1d77475b9671a")))
        (sha256
          (base32
            "1qdbn78xsc7r0bx1fpsbf3amf0wc9h84mj60fyxich1jqyq3m7j3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zenspider/package")
    (synopsis "Extensions for the package library.")
    (description
      "Documentation at https://melpa.org/#/package+")
    (license #f)))

(define-public emacs-package-build
  (package
    (name "emacs-package-build")
    (version "20231002.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/melpa/package-build.git")
               (commit
                 "03f878a18c15432d084402e6ca5309c3ba51c78e")))
        (sha256
          (base32
            "0pf3prlv0l63qgxrkp5cgixykmqwjny4rqwdlqadca6jlg4gb71f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/melpa/package-build")
    (synopsis
      "Tools for assembling a package archive")
    (description
      "Documentation at https://melpa.org/#/package-build")
    (license #f)))

(define-public emacs-package-filter
  (package
    (name "emacs-package-filter")
    (version "20161122.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/package-filter.git")
               (commit
                 "bc73b41aea1d65ca44ef1593ca13126df9bbb39e")))
        (sha256
          (base32
            "0fq31zcz5j0n29p3zmx2k2w0xvay24zs34mbq8nb0y0jr7ycm184"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("package-filter.el")))
    (home-page
      "https://github.com/milkypostman/package-filter")
    (synopsis
      "package archive whitelist and blacklist")
    (description
      "Documentation at https://melpa.org/#/package-filter")
    (license #f)))

(define-public emacs-package-lint
  (package
    (name "emacs-package-lint")
    (version "20231103.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/package-lint.git")
               (commit
                 "5eba825d657b490c320b2ea2c302b1fa0c999610")))
        (sha256
          (base32
            "1v12l8mbsrgkq5rmgzypkiabhfrd5cq6nrnmsairnpw8rrz4w739"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files
        (:defaults "data" (:exclude "*flymake.el"))))
    (home-page
      "https://github.com/purcell/package-lint")
    (synopsis
      "A linting library for elisp package authors")
    (description
      "Documentation at https://melpa.org/#/package-lint")
    (license #f)))

(define-public emacs-package-lint-flymake
  (package
    (name "emacs-package-lint-flymake")
    (version "20231103.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/package-lint.git")
               (commit
                 "5eba825d657b490c320b2ea2c302b1fa0c999610")))
        (sha256
          (base32
            "1v12l8mbsrgkq5rmgzypkiabhfrd5cq6nrnmsairnpw8rrz4w739"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-package-lint))
    (arguments
      '(#:files ("package-lint-flymake.el")))
    (home-page
      "https://github.com/purcell/package-lint")
    (synopsis "A package-lint Flymake backend")
    (description
      "Documentation at https://melpa.org/#/package-lint-flymake")
    (license #f)))

(define-public emacs-package-loading-notifier
  (package
    (name "emacs-package-loading-notifier")
    (version "20230809.446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tttuuu888/package-loading-notifier.git")
               (commit
                 "f64f994cb1a55f9d59444deaec884bff0ed2b26e")))
        (sha256
          (base32
            "0jwchlkij4fiw3c5xfn04frhpc35ax11ch64mv03rkx5dzqkblqc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tttuuu888/package-loading-notifier")
    (synopsis "Notify a package is being loaded")
    (description
      "Documentation at https://melpa.org/#/package-loading-notifier")
    (license #f)))

(define-public emacs-package-safe-delete
  (package
    (name "emacs-package-safe-delete")
    (version "20150116.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/package-safe-delete.git")
               (commit
                 "138171e4fc03c0ef05a8260cbb5cd2e114c1c194")))
        (sha256
          (base32
            "1pdv6d6bm5jmpgjqf9ycvzasxz1205zdi0zjrmkr33c03azwz7rd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epl))
    (home-page
      "https://github.com/Fanael/package-safe-delete")
    (synopsis "Safely delete package.el packages")
    (description
      "Documentation at https://melpa.org/#/package-safe-delete")
    (license #f)))

(define-public emacs-package-utils
  (package
    (name "emacs-package-utils")
    (version "20220630.2345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Silex/package-utils.git")
               (commit
                 "0168172062467b1bff913ea955b2ef709b43ecfa")))
        (sha256
          (base32
            "0pghwwxmn90vfkdzl8fqc7zg3xkcx7lyiihjwvkgfmzmqs4hwn1p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-restart-emacs))
    (home-page
      "https://github.com/Silex/package-utils")
    (synopsis "Extensions for package.el")
    (description
      "Documentation at https://melpa.org/#/package-utils")
    (license #f)))

(define-public emacs-packed
  (package
    (name "emacs-packed")
    (version "20221130.2228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/packed.git")
               (commit
                 "169064f7acfe198cc7dd43d02518b773691e1314")))
        (sha256
          (base32
            "1y3dbyaxr5smw9zxvy0cgfcg1i3ciq7r40njf8dkra4080ibxdnx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/emacscollective/packed")
    (synopsis
      "[DEPRECATED] Package manager agnostic Emacs Lisp package utilities")
    (description
      "Documentation at https://melpa.org/#/packed")
    (license #f)))

(define-public emacs-pacmacs
  (package
    (name "emacs-pacmacs")
    (version "20220106.2248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/codingteam/pacmacs.el.git")
               (commit
                 "25a8c30210f6bd94634a7ff743a2f8be391ed3b3")))
        (sha256
          (base32
            "0wklzqwds2dxf41g677rr9b5n3hviza5145j6aknj2mjjvsrb0zi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (arguments
      '(#:files
        (:defaults
          "maps"
          "signs"
          ("sprites" "sprites/*.json")
          ("sprites" "sprites/*.xpm"))))
    (home-page
      "http://github.com/codingteam/pacmacs.el")
    (synopsis "Pacman for Emacs")
    (description
      "Documentation at https://melpa.org/#/pacmacs")
    (license #f)))

(define-public emacs-pact-mode
  (package
    (name "emacs-pact-mode")
    (version "20201219.2223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kadena-io/pact-mode.git")
               (commit
                 "f48a4faf5f8f8435423bda3888eca6ee67ee13a9")))
        (sha256
          (base32
            "1cmw2pxnzdd3y3f78a6l6770z2nmh0f8mydfw13fh5yfqdhv4vgx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kadena-io/pact-mode")
    (synopsis
      "Mode for Pact, a LISPlike smart contract language.")
    (description
      "Documentation at https://melpa.org/#/pact-mode")
    (license #f)))

(define-public emacs-paganini-theme
  (package
    (name "emacs-paganini-theme")
    (version "20180815.1921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/onurtemizkan/paganini.git")
               (commit
                 "255c5a2a8abee9c5935465ec42b9c3604c178c3c")))
        (sha256
          (base32
            "0qhmj8dyy722ds8cmwghhxknwwis1w64wix2hdmzs21c5pa5hgkw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/onurtemizkan/paganini")
    (synopsis "A colorful, dark and warm theme.")
    (description
      "Documentation at https://melpa.org/#/paganini-theme")
    (license #f)))

(define-public emacs-page-break-lines
  (package
    (name "emacs-page-break-lines")
    (version "20230804.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/page-break-lines.git")
               (commit
                 "5e9ed86bb56fd076b12ae7adaf40eeaa09aed4c5")))
        (sha256
          (base32
            "0ibwfwqm9yzawci5xs7rn4cf39f5by2h4s4071qmclv9sdlyvkp2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/page-break-lines")
    (synopsis
      "Display ^L page breaks as tidy horizontal lines")
    (description
      "Documentation at https://melpa.org/#/page-break-lines")
    (license #f)))

(define-public emacs-pager
  (package
    (name "emacs-pager")
    (version "20151202.120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pager.git")
               (commit
                 "5c791ed23f1136e04040d6f4bc9b4ca5b6dc919f")))
        (sha256
          (base32
            "198zlh7zrql1185b9qjim44a09kbbgs9zyahak9nhv1gxqn7mrdf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "windows-scroll commands")
    (description
      "Documentation at https://melpa.org/#/pager")
    (license #f)))

(define-public emacs-pager-default-keybindings
  (package
    (name "emacs-pager-default-keybindings")
    (version "20130719.2057")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/pager-default-keybindings.git")
               (commit
                 "dbbd49c2ac5906d1dabf9e9c832bfebc1ab405b3")))
        (sha256
          (base32
            "11msqs8v9wn8sj45dw1fl0ldi3sw33v0xclynbxgmawyabfq3bqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pager))
    (home-page
      "http://github.com/nflath/pager-default-keybindings")
    (synopsis
      "Add the default keybindings suggested for pager.el")
    (description
      "Documentation at https://melpa.org/#/pager-default-keybindings")
    (license #f)))

(define-public emacs-paimon
  (package
    (name "emacs-paimon")
    (version "20230521.1002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/paimon.el.git")
               (commit
                 "4c71bea56d0cfdca8ea90c5a6d8d584647d053af")))
        (sha256
          (base32
            "0bb66rzr3hzz9xyxw80vh7vrlsb6630n401dim47qqbi5xzbgr45"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-aio
            emacs-closql
            emacs-emacsql
            emacs-f
            emacs-ht
            emacs-request))
    (arguments '(#:files (:defaults "src/*.el")))
    (home-page "https://github.com/r0man/paimon.el")
    (synopsis "A major mode for Splunk")
    (description
      "Documentation at https://melpa.org/#/paimon")
    (license #f)))

(define-public emacs-pair-tree
  (package
    (name "emacs-pair-tree")
    (version "20211219.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zainab-ali/pair-tree.el.git")
               (commit
                 "6fe6143954bb4025ce6b05aad41e777fcbf413d9")))
        (sha256
          (base32
            "1m8499jy2fsxw41d4kmsc77rbrlagl0bfnlk83644vjrxk8ljwjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/zainab-ali/pair-tree")
    (synopsis "Visualize a list")
    (description
      "Documentation at https://melpa.org/#/pair-tree")
    (license #f)))

(define-public emacs-palimpsest
  (package
    (name "emacs-palimpsest")
    (version "20200804.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielsz/Palimpsest.git")
               (commit
                 "f474b3ad706373d9953abdc401d683a2a023d28e")))
        (sha256
          (base32
            "0wzxl1zcbm3svspjpjzvx92is1k9sz7g0a99r8q066j2364la0zh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Various deletion strategies when editing")
    (description
      "Documentation at https://melpa.org/#/palimpsest")
    (license #f)))

(define-public emacs-pamparam
  (package
    (name "emacs-pamparam")
    (version "20210105.1513")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/pamparam.git")
               (commit
                 "0ba91149095bee8c43688c68f83f4d365fbe6771")))
        (sha256
          (base32
            "0459qqhra9zx9klw89s5hjbka1kdh1nvhl6wc7igfklglzw0d7zs"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lispy emacs-worf emacs-ivy-posframe))
    (arguments '(#:files ("pamparam.el" "doc")))
    (home-page "https://github.com/abo-abo/pamparam")
    (synopsis "Simple and fast flashcards.")
    (description
      "Documentation at https://melpa.org/#/pamparam")
    (license #f)))

(define-public emacs-panda
  (package
    (name "emacs-panda")
    (version "20230930.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/panda.git")
               (commit
                 "3c0e3e4e91c5a7e75eacc07e9efa6e6631aa9b90")))
        (sha256
          (base32
            "0ws0xjapp3zliba6si2b7fkagpxp5ckb818138wdpx1ai0sxbzgb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sebasmonia/panda")
    (synopsis "Client for Bamboo's REST API.")
    (description
      "Documentation at https://melpa.org/#/panda")
    (license #f)))

(define-public emacs-panda-theme
  (package
    (name "emacs-panda-theme")
    (version "20181128.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jamiecollinson/emacs-panda-theme.git")
               (commit
                 "60aa47c7a930377807da0d601351ad91e8ca446a")))
        (sha256
          (base32
            "169khnipnxv0y412wc2r5nsh9d9zwpdyip0l9ayyzb19zdjl1l47"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jamiecollinson/emacs-panda-theme")
    (synopsis "Panda Theme")
    (description
      "Documentation at https://melpa.org/#/panda-theme")
    (license #f)))

(define-public emacs-pandoc
  (package
    (name "emacs-pandoc")
    (version "20161128.1157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/pandoc.el.git")
               (commit
                 "198d262d09e30448f1672338b0b5a81cf75e1eaa")))
        (sha256
          (base32
            "0njc6xlwa8hihyqrk0hs12sb6rs7jma2wpjfr8xsj9p8jld4y359"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/pandoc.el")
    (synopsis "Pandoc interface")
    (description
      "Documentation at https://melpa.org/#/pandoc")
    (license #f)))

(define-public emacs-pandoc-mode
  (package
    (name "emacs-pandoc-mode")
    (version "20231103.5")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/pandoc-mode.git")
               (commit
                 "340da8787d6305640d042af46d2bd609bd5a7518")))
        (sha256
          (base32
            "1m3p6c1vjkdfpr1rjpb6rxxjrf9maa204fxpmjqnmn8mw7bfw944"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra emacs-dash))
    (home-page
      "http://joostkremers.github.io/pandoc-mode/")
    (synopsis
      "Minor mode for interacting with Pandoc")
    (description
      "Documentation at https://melpa.org/#/pandoc-mode")
    (license #f)))

(define-public emacs-pangu-spacing
  (package
    (name "emacs-pangu-spacing")
    (version "20221025.522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/pangu-spacing.git")
               (commit
                 "2303013e5cd7852136f1429162fea0e1c8cb0221")))
        (sha256
          (base32
            "15myim253yw5pipjidqcj09ayi7zyliaw9dcr4kwcyh6ymv0syaw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/coldnew/pangu-spacing")
    (synopsis
      "Minor-mode to add space between Chinese and English characters.")
    (description
      "Documentation at https://melpa.org/#/pangu-spacing")
    (license #f)))

(define-public emacs-paper-theme
  (package
    (name "emacs-paper-theme")
    (version "20230318.48")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cadadr/elisp.git")
               (commit
                 "3497ffd763cadcc1f507aae88c3c7a84007ccfbd")))
        (sha256
          (base32
            "1pwdp09bb6rgnp2ad82jxizwvl4nj6cwd9qcd46a8yzn3rjk27jw"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("paper-theme.el")))
    (home-page
      "https://dev.gkayaalp.com/elisp/index.html#paper")
    (synopsis "A minimal Emacs colour theme.")
    (description
      "Documentation at https://melpa.org/#/paper-theme")
    (license #f)))

(define-public emacs-paperless
  (package
    (name "emacs-paperless")
    (version "20230204.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atgreen/paperless.git")
               (commit
                 "e524e31350d74f13319968d24b7326a4a412e105")))
        (sha256
          (base32
            "1dba7n6ws6f8y5j6qvy8ildjrlz5ahzzpfqcjnvynpycxj54vjs1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page "http://github.com/atgreen/paperless")
    (synopsis
      "A major mode for sorting and filing PDF documents.")
    (description
      "Documentation at https://melpa.org/#/paperless")
    (license #f)))

(define-public emacs-paradox
  (package
    (name "emacs-paradox")
    (version "20191011.1119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/paradox.git")
               (commit
                 "dec73d4ba3512e0f85983a4b992080b225d199ee")))
        (sha256
          (base32
            "0dnfyfznps3p15zn3g4ay2y1wsrnkwrplsg0ramby4pkm61a5a5m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-spinner emacs-hydra))
    (home-page
      "https://github.com/Malabarba/paradox")
    (synopsis
      "A modern Packages Menu. Colored, with package ratings, and customizable.")
    (description
      "Documentation at https://melpa.org/#/paradox")
    (license #f)))

(define-public emacs-parchment-theme
  (package
    (name "emacs-parchment-theme")
    (version "20221206.1541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajgrf/parchment.git")
               (commit
                 "07c9887be6e7d94a8546db625c7d62c54d2e5923")))
        (sha256
          (base32
            "0hr2dmxz7iv2vd7x17ndx4j7hzl52j46x6gnx8m2mnwviipgriq1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page "https://gitlab.com/ajgrf/parchment")
    (synopsis
      "Light theme inspired by Acme and Leuven")
    (description
      "Documentation at https://melpa.org/#/parchment-theme")
    (license #f)))

(define-public emacs-paredit
  (package
    (name "emacs-paredit")
    (version "20221127.1452")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/paredit-"
               version
               ".el"))
        (sha256
          (base32
            "0shxmf9pfg1kwlqanihgkv852a4mwih7ngkf03wrgrvb7krlp98d"))))
    (build-system melpa-build-system)
    (home-page "https://paredit.org")
    (synopsis "minor mode for editing parentheses")
    (description
      "Documentation at https://melpa.org/#/paredit")
    (license #f)))

(define-public emacs-paredit-everywhere
  (package
    (name "emacs-paredit-everywhere")
    (version "20210510.531")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/paredit-everywhere.git")
               (commit
                 "b81e5d5356c85001a71640941b469aea9cf2e309")))
        (sha256
          (base32
            "0qnm020npchrazj6na79ccwjhr7j1gm7n0yksqxzciram1lfggjk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (home-page "unspecified")
    (synopsis
      "Enable some paredit features in non-lisp buffers")
    (description
      "Documentation at https://melpa.org/#/paredit-everywhere")
    (license #f)))

(define-public emacs-paredit-menu
  (package
    (name "emacs-paredit-menu")
    (version "20160128.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/paredit-menu.git")
               (commit
                 "cc0ae85bd819f9ebfa4f2a419ab3b2d70e39c9c8")))
        (sha256
          (base32
            "15xkanrwxh3qqay3vkfqvhzs88g7nnfv9bqk509qflyhqnvc9sxr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (home-page "unspecified")
    (synopsis
      "Adds a menu to paredit.el as memory aid")
    (description
      "Documentation at https://melpa.org/#/paredit-menu")
    (license #f)))

(define-public emacs-paren-completer
  (package
    (name "emacs-paren-completer")
    (version "20160501.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MatthewBregg/paren-completer.git")
               (commit
                 "74183a8e13fa1266271bdcbcb4bfb29a4f915f0a")))
        (sha256
          (base32
            "1il0gbyjnlxhk04z3lgxmvlmlhgc94rmxdf8nl5sk3gblqmr8v3b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/MatthewBregg/paren-completer")
    (synopsis
      "Automatically, language agnostically, fill in delimiters.")
    (description
      "Documentation at https://melpa.org/#/paren-completer")
    (license #f)))

(define-public emacs-paren-face
  (package
    (name "emacs-paren-face")
    (version "20230901.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/paren-face.git")
               (commit
                 "993a406784ada7526c5d53c2c257f76a0687675c")))
        (sha256
          (base32
            "0n7ajgnkyrlykla7cz0ci9sil5n83sl5mlx93rp817bk78fma5vk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/tarsius/paren-face")
    (synopsis "A face for parentheses in lisp modes")
    (description
      "Documentation at https://melpa.org/#/paren-face")
    (license #f)))

(define-public emacs-parent-mode
  (package
    (name "emacs-parent-mode")
    (version "20150824.2300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/parent-mode.git")
               (commit
                 "db692cf08deff2f0e973e6e86e26662b44813d1b")))
        (sha256
          (base32
            "0i5bc7lyyrx6swqlrp9l5x72yzwi53qn6ldrfs99gh08b3yvsnni"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/parent-mode")
    (synopsis "get major mode's parent modes")
    (description
      "Documentation at https://melpa.org/#/parent-mode")
    (license #f)))

(define-public emacs-parinfer-rust-mode
  (package
    (name "emacs-parinfer-rust-mode")
    (version "20230831.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justinbarclay/parinfer-rust-mode.git")
               (commit
                 "6e6bdeeba32534acca5928fe4201ce013094988d")))
        (sha256
          (base32
            "1dkvsk3damvimnzs56f1vq4fqfkfkhwag9fzanz7s97bywpanhc2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justinbarclay/parinfer-rust-mode")
    (synopsis
      "An interface for the parinfer-rust library")
    (description
      "Documentation at https://melpa.org/#/parinfer-rust-mode")
    (license #f)))

(define-public emacs-parrot
  (package
    (name "emacs-parrot")
    (version "20220101.518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dp12/parrot.git")
               (commit
                 "1d381f24d74242018e306d1a0c891bed9a465ac3")))
        (sha256
          (base32
            "0jvnaplab6bsq9pv89zl6amrs39ay6qlzgm0lls6ij9bbrsyjlvp"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "img")))
    (home-page "https://github.com/dp12/parrot.git")
    (synopsis
      "Party Parrot rotates gracefully in mode-line.")
    (description
      "Documentation at https://melpa.org/#/parrot")
    (license #f)))

(define-public emacs-parse-csv
  (package
    (name "emacs-parse-csv")
    (version "20160512.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrc/el-csv.git")
               (commit
                 "96bef1ffbc89ea12d13311c9fa239c5c3e864890")))
        (sha256
          (base32
            "06xg6f74697zmn042wg259qlik2l21k4al08a06xz4gv9a83nsx6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("parse-csv.el")))
    (home-page "https://github.com/mrc/el-csv")
    (synopsis
      "Parse strings with CSV fields into s-expressions")
    (description
      "Documentation at https://melpa.org/#/parse-csv")
    (license #f)))

(define-public emacs-parse-it
  (package
    (name "emacs-parse-it")
    (version "20220704.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/parse-it.git")
               (commit
                 "c16cb7aa1b4437a6b9943feaf058e10cd17056fa")))
        (sha256
          (base32
            "0404nvvjcl1rdzv1h0a9zn7sijrfykd6c651l11yns3na81nv8x3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files (:defaults "langs/*.el")))
    (home-page
      "https://github.com/jcs-elpa/parse-it")
    (synopsis "Basic Parser in Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/parse-it")
    (license #f)))

(define-public emacs-parsebib
  (package
    (name "emacs-parsebib")
    (version "20230228.1530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/parsebib.git")
               (commit
                 "ace9df707108b17759c004c7387655277122d4c1")))
        (sha256
          (base32
            "02h5sbg2bqkmksj1ap4z7301hnsp5ga6951jrnwy89ds0xvrbg6l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/joostkremers/parsebib")
    (synopsis "A library for parsing bib files")
    (description
      "Documentation at https://melpa.org/#/parsebib")
    (license #f)))

(define-public emacs-parsec
  (package
    (name "emacs-parsec")
    (version "20180730.16")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/parsec.el.git")
               (commit
                 "2cbbbc2254aa7bcaa4fb5e07c8c1bf2f381dba26")))
        (sha256
          (base32
            "1g1s8s45g3kkbi3h7w0pmadmzdswb64mkdvdpg2lihg341kx37gm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cute-jumper/parsec.el")
    (synopsis "Parser combinator library")
    (description
      "Documentation at https://melpa.org/#/parsec")
    (license #f)))

(define-public emacs-parseclj
  (package
    (name "emacs-parseclj")
    (version "20230911.1621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/parseclj.git")
               (commit
                 "74ff7d63fed92a3c859e474ae85f011e794b751a")))
        (sha256
          (base32
            "0aal49w2m979m1m4h1d15hgwx6z020cc1c1s8prd1zn9nzlknlhz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Clojure/EDN parser")
    (description
      "Documentation at https://melpa.org/#/parseclj")
    (license #f)))

(define-public emacs-parseedn
  (package
    (name "emacs-parseedn")
    (version "20230929.1500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/parseedn.git")
               (commit
                 "c8f07926a688bfe995fde4460103915d401a1aff")))
        (sha256
          (base32
            "1pxm50i74id3c4c0j2ifac0wx5zkdq431dmcqbyb6w6k0s05l23c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-parseclj))
    (home-page
      "http://www.github.com/clojure-emacs/parseedn")
    (synopsis "Clojure/EDN parser")
    (description
      "Documentation at https://melpa.org/#/parseedn")
    (license #f)))

(define-public emacs-pasp-mode
  (package
    (name "emacs-pasp-mode")
    (version "20180404.1700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/santifa/pasp-mode.git")
               (commit
                 "59385eb0e8ebcfc8c11dd811fb145d4b0fa3cc92")))
        (sha256
          (base32
            "1ar4vws3izzmir7m870mccci620ns3c5j26dcmwaxavhgw45wcmf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/santifa/pasp-mode")
    (synopsis
      "- A major mode for editing Answer Set Programs.")
    (description
      "Documentation at https://melpa.org/#/pasp-mode")
    (license #f)))

(define-public emacs-pass
  (package
    (name "emacs-pass")
    (version "20230903.914")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/pass.git")
               (commit
                 "c721604b3bd0c7ce7870f1a9fa0aa71f352a1009")))
        (sha256
          (base32
            "1cli3j24wrvghfx49zqjphhpzcnzpm4clac24q7h5xs29l2ab192"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-password-store
            emacs-password-store-otp
            emacs-f))
    (home-page "unspecified")
    (synopsis "Major mode for password-store.el")
    (description
      "Documentation at https://melpa.org/#/pass")
    (license #f)))

(define-public emacs-passmm
  (package
    (name "emacs-passmm")
    (version "20221204.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pjones/passmm.git")
               (commit
                 "66691e301dff476eaff7c6e817ed9df96d4404c8")))
        (sha256
          (base32
            "1rk0yrjdkhvqms137rlfryfmlyzkavs2m5qmdx644l7w4v86jd2n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-password-store))
    (home-page "https://github.com/pjones/passmm")
    (synopsis
      "A minor mode for pass (Password Store)")
    (description
      "Documentation at https://melpa.org/#/passmm")
    (license #f)))

(define-public emacs-password-generator
  (package
    (name "emacs-password-generator")
    (version "20210425.2227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vandrlexay/emacs-password-genarator.git")
               (commit
                 "c1da9790d594bc745cdbcc8003153e408aa92a5f")))
        (sha256
          (base32
            "0nwfdf5ik7d11l2h2fg4pszifv3fncpxjzs933gj91mvjy2wrw98"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/vandrlexay/emacs-password-genarator")
    (synopsis
      "Password generator for humans. Good, Bad, Phonetic passwords included.")
    (description
      "Documentation at https://melpa.org/#/password-generator")
    (license #f)))

(define-public emacs-password-mode
  (package
    (name "emacs-password-mode")
    (version "20220706.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/password-mode.git")
               (commit
                 "883981d9f8d0e2a8ec479c89f5f6b2492c22e01a")))
        (sha256
          (base32
            "003r3fy05bimv9j8v6hr6saq8bvq7h2k8nfl45bxai8mhsm6fhsd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/password-mode")
    (synopsis "Hide password text using overlays")
    (description
      "Documentation at https://melpa.org/#/password-mode")
    (license #f)))

(define-public emacs-password-store
  (package
    (name "emacs-password-store")
    (version "20230503.619")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zx2c4/password-store.git")
               (commit
                 "28cec11f1dbe6c4273d30370af45b69c9f408386")))
        (sha256
          (base32
            "1h51dp0ycq0h1sai4hb01cs4zr631zp2w2kq11wivd1zc9i1cn1n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-with-editor))
    (arguments '(#:files ("contrib/emacs/*.el")))
    (home-page "https://www.passwordstore.org/")
    (synopsis "Password store (pass) support")
    (description
      "Documentation at https://melpa.org/#/password-store")
    (license #f)))

(define-public emacs-password-store-otp
  (package
    (name "emacs-password-store-otp")
    (version "20220128.1320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/volrath/password-store-otp.el.git")
               (commit
                 "be3a00a981921ed1b2f78012944dc25eb5a0beca")))
        (sha256
          (base32
            "0hqfxdpis2if5fl5avar93mr2gfqqnd87s835hiibqq0800dv3v7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-password-store))
    (home-page
      "https://github.com/volrath/password-store-otp.el")
    (synopsis
      "Password store (pass) OTP extension support")
    (description
      "Documentation at https://melpa.org/#/password-store-otp")
    (license #f)))

(define-public emacs-password-vault
  (package
    (name "emacs-password-vault")
    (version "20220321.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PuercoPop/password-vault.git")
               (commit
                 "763750e2fbdd3bc96dfd256215b5e49394b7bef3")))
        (sha256
          (base32
            "0zwnk5ljack42f3nmjwrhsx7f7cr52r3w5y414c5bg9yk3y47dda"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/PuercoPop/password-vault")
    (synopsis "A Password manager for Emacs.")
    (description
      "Documentation at https://melpa.org/#/password-vault")
    (license #f)))

(define-public emacs-paste-of-code
  (package
    (name "emacs-paste-of-code")
    (version "20170709.2355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spebern/paste-of-code.el.git")
               (commit
                 "92d258e8ec98598d847ecab82903f9224c7c2050")))
        (sha256
          (base32
            "1bf2d0i726psjwnqdp0w4h0qk7fnwcbwf1a66q7p8vczavqygfan"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis
      "paste code on https://paste.ofcode.org")
    (description
      "Documentation at https://melpa.org/#/paste-of-code")
    (license #f)))

(define-public emacs-pastebin
  (package
    (name "emacs-pastebin")
    (version "20101125.2002")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/elpastebin.git")
               (commit
                 "8e9a829298ce0f747ab80758aa26caeb2af6cb30")))
        (sha256
          (base32
            "1hjzpza8zmzb83sacmqcnh9a52m4x5d8xbwvcqvld1ajglv4y124"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A simple interface to the www.pastebin.com webservice")
    (description
      "Documentation at https://melpa.org/#/pastebin")
    (license #f)))

(define-public emacs-pastehub
  (package
    (name "emacs-pastehub")
    (version "20140627.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiyoka/pastehub.git")
               (commit
                 "37b045c67659c078f1517d0fbd5282dab58dca23")))
        (sha256
          (base32
            "0m6qjsq6qfwwszm95lj8c58l75vbmx9r5hm9bfywyympfgy0fa1n"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("client/emacs/pastehub.el")))
    (home-page "https://github.com/kiyoka/pastehub")
    (synopsis
      "A client for the PasteHub cloud service")
    (description
      "Documentation at https://melpa.org/#/pastehub")
    (license #f)))

(define-public emacs-pastelmac-theme
  (package
    (name "emacs-pastelmac-theme")
    (version "20151031.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmastenbrook/pastelmac-theme-el.git")
               (commit
                 "bead21741e3f46f6506e8aef4469d4240a819389")))
        (sha256
          (base32
            "1v5mpjb8kavbqhvg4rizwg8cypgmi6ngdiy8qp9pimmkb56y42ly"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bmastenbrook/pastelmac-theme-el")
    (synopsis
      "a soothing theme with a pastel color palette")
    (description
      "Documentation at https://melpa.org/#/pastelmac-theme")
    (license #f)))

(define-public emacs-pastery
  (package
    (name "emacs-pastery")
    (version "20171114.349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diasbruno/pastery.el.git")
               (commit
                 "4493be98b743b4d062cb4e00760125e394a55022")))
        (sha256
          (base32
            "0bmm18d84lrkclg4md46k1ma03w7a97s10hrvjcm9yj8xbrjqqsc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/diasbruno/pastery.el")
    (synopsis "paste snippets to pastery.net.")
    (description
      "Documentation at https://melpa.org/#/pastery")
    (license #f)))

(define-public emacs-path-headerline-mode
  (package
    (name "emacs-path-headerline-mode")
    (version "20140423.1332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/7696122/path-headerline-mode.git")
               (commit
                 "b5b2725c6a8b1cb592fc242b7dbbd54b4dff2e69")))
        (sha256
          (base32
            "1ffnkw8djs8kvfjd1crnaqram1vl4w3g1zhsqp74ds0mccsd6830"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/7696122/path-headerline-mode")
    (synopsis "Displaying file path on headerline.")
    (description
      "Documentation at https://melpa.org/#/path-headerline-mode")
    (license #f)))

(define-public emacs-path-helper
  (package
    (name "emacs-path-helper")
    (version "20181208.2229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arouanet/path-helper.git")
               (commit
                 "34538affb3f341b3c56a875bb094ddb2b859a8ef")))
        (sha256
          (base32
            "0qzsalbxksb44f0x7fndl2qyp1yf575qs56skfzmpnpa82dck88g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arouanet/path-helper")
    (synopsis
      "Set PATH environment variables from config files")
    (description
      "Documentation at https://melpa.org/#/path-helper")
    (license #f)))

(define-public emacs-pathify
  (package
    (name "emacs-pathify")
    (version "20160423.846")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/pathify.el.git")
               (commit
                 "401b184c743694a60b3bc4273fc43de05cd5ac4b")))
        (sha256
          (base32
            "0wsq11qffw1lx9x79law7jrz0sxm6km83gh891ic9ak2y6j5shxf"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/alezost-emacs/pathify")
    (synopsis
      "Symlink your scripts into a PATH directory")
    (description
      "Documentation at https://melpa.org/#/pathify")
    (license #f)))

(define-public emacs-paxedit
  (package
    (name "emacs-paxedit")
    (version "20160730.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/promethial/paxedit.git")
               (commit
                 "09f3d5aeb108937a801e77ef413e29eaa4ecc4be")))
        (sha256
          (base32
            "1yd5wh8fsxh3v2fgpxm2cd7h9xz9zfj2d8g4bh4gzqjwrmn5rlgl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (arguments '(#:files ("paxedit.el")))
    (home-page
      "https://github.com/promethial/paxedit")
    (synopsis
      "Structured, Context Driven LISP Editing and Refactoring")
    (description
      "Documentation at https://melpa.org/#/paxedit")
    (license #f)))

(define-public emacs-pbcopy
  (package
    (name "emacs-pbcopy")
    (version "20150225.459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/pbcopy.el.git")
               (commit
                 "338f7245746b5de1bb96c5cc2b32bfd9b5d83272")))
        (sha256
          (base32
            "138w0dlp3msjmr2x09kfcnxwhdldbz9xjfy7l6lig1x9ima0z5w6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jkp/pbcopy.el")
    (synopsis "Emacs Interface to pbcopy")
    (description
      "Documentation at https://melpa.org/#/pbcopy")
    (license #f)))

(define-public emacs-pc-bufsw
  (package
    (name "emacs-pc-bufsw")
    (version "20201011.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ibukanov/pc-bufsw.git")
               (commit
                 "a7295e4813d636d5a20605d134acd42e4e4fe8fa")))
        (sha256
          (base32
            "0xsjvsmp1qybpcxv1r4pk90g02sc6y23a0c4768xhfx7f50dx8r5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ibukanov/pc-bufsw")
    (synopsis "PC style quick buffer switcher")
    (description
      "Documentation at https://melpa.org/#/pc-bufsw")
    (license #f)))

(define-public emacs-pcache
  (package
    (name "emacs-pcache")
    (version "20220724.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sigma/pcache.git")
               (commit
                 "507230d094cc4a5025fe09b62569ad60c71c4226")))
        (sha256
          (base32
            "1fjdn4g9ww70f3x6vbzi3gqs9dsmqg16isajlqlflzw2716zf2nh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "persistent caching for Emacs.")
    (description
      "Documentation at https://melpa.org/#/pcache")
    (license #f)))

(define-public emacs-pcap-mode
  (package
    (name "emacs-pcap-mode")
    (version "20161025.1448")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/orgcandman/pcap-mode.git")
               (commit
                 "52780669af0ade136f84d73f21b4dbb7ab655416")))
        (sha256
          (base32
            "1v218cjs0qy3ac0rbzm22y1x388nxnf0pslh9jrvlymkn227pjs8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for working with PCAP files")
    (description
      "Documentation at https://melpa.org/#/pcap-mode")
    (license #f)))

(define-public emacs-pcmpl-args
  (package
    (name "emacs-pcmpl-args")
    (version "20220510.2056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JonWaltman/pcmpl-args.el.git")
               (commit
                 "43229e1096f89c277190f09a3d794781f8fa0015")))
        (sha256
          (base32
            "0p2mpifr3ycy4ibr9y1r5lvq91dbw6vvi8g6n3jx1mqnxnh9ld63"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/JonWaltman/pcmpl-args.el")
    (synopsis "Enhanced shell command completion")
    (description
      "Documentation at https://melpa.org/#/pcmpl-args")
    (license #f)))

(define-public emacs-pcmpl-git
  (package
    (name "emacs-pcmpl-git")
    (version "20170121.59")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoliu/pcmpl-git-el.git")
               (commit
                 "9472ac70baeda025ef7becd1cf141d72aec93f32")))
        (sha256
          (base32
            "17y3rdp7fgyg4i9hwyzgpv1d19i5c6rqdf1gm5bdm2csk12vfg9n"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "git-options")))
    (home-page "unspecified")
    (synopsis "pcomplete for git")
    (description
      "Documentation at https://melpa.org/#/pcmpl-git")
    (license #f)))

(define-public emacs-pcmpl-homebrew
  (package
    (name "emacs-pcmpl-homebrew")
    (version "20200911.742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/pcmpl-homebrew.git")
               (commit
                 "a2044042dd498abad1dc06162a8ee0d70314ca40")))
        (sha256
          (base32
            "1x0hc6n710199aygqch9nh55dsic2sdl7nnncs4h2s0dd91bnz6g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "pcomplete for homebrew")
    (description
      "Documentation at https://melpa.org/#/pcmpl-homebrew")
    (license #f)))

(define-public emacs-pcmpl-pip
  (package
    (name "emacs-pcmpl-pip")
    (version "20181229.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zwild/pcmpl-pip.git")
               (commit
                 "bc79228674ad5c1bc458c90dd8839790fb0a09e8")))
        (sha256
          (base32
            "017fwacc3vqvvxx4mn0a1glcsxccjyfai0rymyf3yfy4rgd7w0p4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page "unspecified")
    (synopsis "pcomplete for pip")
    (description
      "Documentation at https://melpa.org/#/pcmpl-pip")
    (license #f)))

(define-public emacs-pcomplete-extension
  (package
    (name "emacs-pcomplete-extension")
    (version "20190928.519")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/pcomplete-extension.git")
               (commit
                 "bc5eb204fee659e0980056009409b44bc7655716")))
        (sha256
          (base32
            "06dsfjbwx1iq0f2xism288vh4cgn804hbvi3gv3zknnzcmh6nlxi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/pcomplete-extension")
    (synopsis "additional completion for pcomplete")
    (description
      "Documentation at https://melpa.org/#/pcomplete-extension")
    (license #f)))

(define-public emacs-pcre2el
  (package
    (name "emacs-pcre2el")
    (version "20230828.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joddie/pcre2el.git")
               (commit
                 "018531ba0cf8e2b28d1108136a0e031b6a45f1c1")))
        (sha256
          (base32
            "1bfvmpswvc1rvhhf879j8qnwfpxdap6nr7l1g5fpxpz88s3d441r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/joddie/pcre2el")
    (synopsis "regexp syntax converter")
    (description
      "Documentation at https://melpa.org/#/pcre2el")
    (license #f)))

(define-public emacs-pcsv
  (package
    (name "emacs-pcsv")
    (version "20230207.757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-pcsv.git")
               (commit
                 "4b5e801d213a460a6cb3cb2997a0a6cd33c7bc58")))
        (sha256
          (base32
            "160lnkslvmm6dzlb5fxdy7zsjz0pcg6x6lmx43xz95sq99kz679v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-pcsv")
    (synopsis "Parser of csv")
    (description
      "Documentation at https://melpa.org/#/pcsv")
    (license #f)))

(define-public emacs-pd-remote
  (package
    (name "emacs-pd-remote")
    (version "20230314.428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agraef/pd-remote.git")
               (commit
                 "dcd68097d2b7468303517d91cb76682bfb47db63")))
        (sha256
          (base32
            "0ph1lpa6irvbib4h8m0xxpirchwync24qlzfaxdh71hfjwq582l5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-faust-mode emacs-lua-mode))
    (home-page "https://github.com/agraef/pd-remote")
    (synopsis "Pd remote control helper")
    (description
      "Documentation at https://melpa.org/#/pd-remote")
    (license #f)))

(define-public emacs-pdb-capf
  (package
    (name "emacs-pdb-capf")
    (version "20200419.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-pdb-capf.git")
               (commit
                 "2f4099aa1330f87df4e9cd526de057ee9b71de6c")))
        (sha256
          (base32
            "0fdzhsz3784lf50mdabz9h2b6992cab2nnn4xv7rx2a8hsyyq1mq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-pdb-capf")
    (synopsis
      "Completion-at-point function for python debugger")
    (description
      "Documentation at https://melpa.org/#/pdb-capf")
    (license #f)))

(define-public emacs-pdb-mode
  (package
    (name "emacs-pdb-mode")
    (version "20150128.1751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sixpi/pdb-mode.git")
               (commit
                 "855fb18ebb73b5df30c8d7677c2bcd0f361b138a")))
        (sha256
          (base32
            "1xkkyz7y08jr71rzdacb9v7gk95qsxlsshkdsxq8jp70irq51099"))))
    (build-system melpa-build-system)
    (home-page
      "http://bondxray.org/software/pdb-mode/")
    (synopsis
      "Major mode for editing Protein Data Bank files")
    (description
      "Documentation at https://melpa.org/#/pdb-mode")
    (license #f)))

(define-public emacs-pdf-tools
  (package
    (name "emacs-pdf-tools")
    (version "20230611.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vedang/pdf-tools.git")
               (commit
                 "c69e7656a4678fe25afbd29f3503dd19ee7f9896")))
        (sha256
          (base32
            "02l1mwil0r8zgg3377i6zy8cz6kl48hncgyl8x6aigxrrqzsxvza"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tablist))
    (arguments
      '(#:files
        (:defaults
          "README"
          ("build" "Makefile")
          ("build" "server"))))
    (home-page "http://github.com/vedang/pdf-tools/")
    (synopsis "Support library for PDF documents")
    (description
      "Documentation at https://melpa.org/#/pdf-tools")
    (license #f)))

(define-public emacs-pdf-view-pagemark
  (package
    (name "emacs-pdf-view-pagemark")
    (version "20230901.2245")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kimim/pdf-view-pagemark.git")
               (commit
                 "5a044bead5855c5fd46a691fee01dc931c959cab")))
        (sha256
          (base32
            "1miwmnrijkmzjrfnigag3dvyp68h8d2516zp1xsp368n392y1gc2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pdf-tools emacs-posframe))
    (home-page
      "https://github.com/kimim/pdf-view-pagemark")
    (synopsis
      "Add indicator in pdfview mode to show the page remaining")
    (description
      "Documentation at https://melpa.org/#/pdf-view-pagemark")
    (license #f)))

(define-public emacs-pdf-view-restore
  (package
    (name "emacs-pdf-view-restore")
    (version "20190904.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/007kevin/pdf-view-restore.git")
               (commit
                 "5a1947c01a3edecc9e0fe7629041a2f53e0610c9")))
        (sha256
          (base32
            "1b9zzvfsprf7x0v7l4dabdh5qdfhl7mm30vvqah8l10jvlf2wlc7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pdf-tools))
    (home-page
      "https://github.com/007kevin/pdf-view-restore")
    (synopsis
      "Support for opening last known pdf position in pdfview mode")
    (description
      "Documentation at https://melpa.org/#/pdf-view-restore")
    (license #f)))

(define-public emacs-pdfgrep
  (package
    (name "emacs-pdfgrep")
    (version "20210203.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeremy-compostella/pdfgrep.git")
               (commit
                 "a4ca0a1e6521de93f28bb6736a5344b4974d144c")))
        (sha256
          (base32
            "093sm3ywa338lhhz2ib3ylcgklsbxcsqck2qsaq26i2qxr0r7lq2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jeremy-compostella/pdfgrep")
    (synopsis
      "run `pdfgrep' and display the results.")
    (description
      "Documentation at https://melpa.org/#/pdfgrep")
    (license #f)))

(define-public emacs-peacock-theme
  (package
    (name "emacs-peacock-theme")
    (version "20170808.1320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-peacock-theme.git")
               (commit
                 "9e46fbfb562b6e26c6e3d6d618b044b3694da4c8")))
        (sha256
          (base32
            "0w4dzdsv2cdldss5jwmdbjb5a62k5j1szwdim4gv8ldifhj7fy22"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Peacock (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/peacock-theme")
    (license #f)))

(define-public emacs-pebble-mode
  (package
    (name "emacs-pebble-mode")
    (version "20230123.1801")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ArneBab/pebble-mode.git")
               (commit
                 "bcbc76aa89196338f12a8ddfe4486edf83c19c5e")))
        (sha256
          (base32
            "0djax1yaab8mpjih1ggc1hvvzw7bjwl5bfr2kmixj90scgh9r42b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ArneBab/pebble-mode")
    (synopsis "A major mode for pebble")
    (description
      "Documentation at https://melpa.org/#/pebble-mode")
    (license #f)))

(define-public emacs-peek-mode
  (package
    (name "emacs-peek-mode")
    (version "20130620.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erikriverson/peek-mode.git")
               (commit
                 "55a7dd011375330c7d57322257a5167516702c71")))
        (sha256
          (base32
            "11nv6pll0zj9dkgzlzgav39a6x3sfi7kvfhwm96fa3iy4v8bixrb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-elnode))
    (arguments
      '(#:files ("index.html" "peek-mode.el")))
    (home-page
      "https://github.com/erikriverson/peek-mode")
    (synopsis
      "Serve buffers live over HTTP with elnode backend")
    (description
      "Documentation at https://melpa.org/#/peek-mode")
    (license #f)))

(define-public emacs-peep-dired
  (package
    (name "emacs-peep-dired")
    (version "20160321.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/peep-dired.git")
               (commit
                 "29f6e7058f635b0084880a1f890a6c92501e8c29")))
        (sha256
          (base32
            "06lzb3mzrf2hqbdj4m8vfayf1xar9dgkwznzsqkbj6gjwxbz6xvd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Peep at files in another window from dired buffers")
    (description
      "Documentation at https://melpa.org/#/peep-dired")
    (license #f)))

(define-public emacs-peertube
  (package
    (name "emacs-peertube")
    (version "20210101.1007")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~yoctocell/peertube")
               (commit
                 "bb529db154596e86327829edbd7144b67cf72255")))
        (sha256
          (base32
            "1vqlz6s57cqhbmxc9733crhb1z91lrhm0xmwfsq3yb30nfdwlyyb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transmission))
    (home-page
      "https://git.sr.ht/~yoctocell/peertube")
    (synopsis "Query and download PeerTube videos")
    (description
      "Documentation at https://melpa.org/#/peertube")
    (license #f)))

(define-public emacs-pelican-mode
  (package
    (name "emacs-pelican-mode")
    (version "20190124.2336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.korewanetadesu.com/pelican-mode.git")
               (commit
                 "65d7caf5d926599a5007eb7bc279215908aa5252")))
        (sha256
          (base32
            "1mmvsf1g2ym76ipgs7nl2fshw0rg1qij495rixga13qbkwb02hpl"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.korewanetadesu.com/pelican-mode.git")
    (synopsis "Minor mode for editing Pelican sites")
    (description
      "Documentation at https://melpa.org/#/pelican-mode")
    (license #f)))

(define-public emacs-pepita
  (package
    (name "emacs-pepita")
    (version "20200228.2257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/pepita.git")
               (commit
                 "c72c4a6f1e47ed5fe5103e0eaadad5a76deeec30")))
        (sha256
          (base32
            "0jahf914qmvlk0xjka9dy7n19smndjnybjl26pbgf7lvd8lxzyb0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-csv))
    (home-page
      "https://github.com/sebasmonia/pepita.git")
    (synopsis
      "Run Splunk search commands, export results to CSV/HTML/JSON")
    (description
      "Documentation at https://melpa.org/#/pepita")
    (license #f)))

(define-public emacs-per-buffer-theme
  (package
    (name "emacs-per-buffer-theme")
    (version "20221002.2219")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/per-buffer-theme-"
               version
               ".el"))
        (sha256
          (base32
            "0kcbdswshnsgbylzqz3plrpbnryiq96nhqpnhby3i02xs8kxbx55"))))
    (build-system melpa-build-system)
    (home-page
      "https://hg.serna.eu/emacs/per-buffer-theme")
    (synopsis
      "Change theme and font according to buffer name or major mode.")
    (description
      "Documentation at https://melpa.org/#/per-buffer-theme")
    (license #f)))

(define-public emacs-perfect-margin
  (package
    (name "emacs-perfect-margin")
    (version "20220426.1701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpwang/perfect-margin.git")
               (commit
                 "d5cb5f075264ff2e625099aebca3151f4f35019a")))
        (sha256
          (base32
            "05nh0fi7k9amz6wnkbsznhyr9j8jzmr55d4qg2c60pp3ygfrbzn1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mpwang/perfect-margin")
    (synopsis
      "auto center windows, work with minimap and/or linum-mode")
    (description
      "Documentation at https://melpa.org/#/perfect-margin")
    (license #f)))

(define-public emacs-perject
  (package
    (name "emacs-perject")
    (version "20230605.841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/overideal/perject.git")
               (commit
                 "6357ab199c717191e7695a3e3c2545918b97a942")))
        (sha256
          (base32
            "0ll6110sxpykcbbqhd1i4hwvnhhnjgk75gnyzvmcj7s2phf3qjnw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/overideal/perject")
    (synopsis
      "Session-persistent project management")
    (description
      "Documentation at https://melpa.org/#/perject")
    (license #f)))

(define-public emacs-perlbrew
  (package
    (name "emacs-perlbrew")
    (version "20230823.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kentaro/perlbrew.el.git")
               (commit
                 "527b7f6a6a5edd2b779ae98029e60994391c0903")))
        (sha256
          (base32
            "04hvq3ii7x6xv54fvbrn6h0zdvv68wcc47zl3kyrgv0jlcmsgz1y"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A perlbrew wrapper for Emacs")
    (description
      "Documentation at https://melpa.org/#/perlbrew")
    (license #f)))

(define-public emacs-persist-state
  (package
    (name "emacs-persist-state")
    (version "20230728.714")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/persist-state-"
               version
               ".tar"))
        (sha256
          (base32
            "18p6h2y1b6fnyxq77kv02sx1yvlm24yxsdywbd8gyzdkgs56gzn7"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/bram85/emacs-persist-state.git")
    (synopsis
      "Regularly persist bookmarks, history, recent files and more")
    (description
      "Documentation at https://melpa.org/#/persist-state")
    (license #f)))

(define-public emacs-persistent-overlays
  (package
    (name "emacs-persistent-overlays")
    (version "20161128.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mneilly/Emacs-Persistent-Overlays.git")
               (commit
                 "f563c8b966edc78c9d806661c4eb80e4781c4eab")))
        (sha256
          (base32
            "0csllpkpjf4csw3zfaw8k05jg078najfmjz6pz1jcl6b4sxjdfqa"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("persistent-overlays.el" "README.md" "LICENSE")))
    (home-page
      "https://github.com/mneilly/Emacs-Persistent-Overlays")
    (synopsis
      "Minor mode to store selected overlays to be loaded later")
    (description
      "Documentation at https://melpa.org/#/persistent-overlays")
    (license #f)))

(define-public emacs-persistent-scratch
  (package
    (name "emacs-persistent-scratch")
    (version "20230225.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/persistent-scratch.git")
               (commit
                 "5ff41262f158d3eb966826314516f23e0cb86c04")))
        (sha256
          (base32
            "187cyl005csmmmh292km1v3ffl8x49h5qyn87i4adz9l5sqnpdgj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/persistent-scratch")
    (synopsis
      "Preserve the scratch buffer across Emacs sessions")
    (description
      "Documentation at https://melpa.org/#/persistent-scratch")
    (license #f)))

(define-public emacs-persistent-soft
  (package
    (name "emacs-persistent-soft")
    (version "20150223.1853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/persistent-soft.git")
               (commit
                 "a1e0ddf2a12a6f18cab565dee250f070384cbe02")))
        (sha256
          (base32
            "14p20br8vzxs39d4hswzrrkgwql5nnmn5j17cpbabzjvck42rixc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pcache emacs-list-utils))
    (home-page
      "http://github.com/rolandwalker/persistent-soft")
    (synopsis
      "Persistent storage, returning nil on failure")
    (description
      "Documentation at https://melpa.org/#/persistent-soft")
    (license #f)))

(define-public emacs-persp-fr
  (package
    (name "emacs-persp-fr")
    (version "20191108.754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/persp-fr.git")
               (commit
                 "1adbb6a9f9a4db580a9b7ed8b4091738e01345e6")))
        (sha256
          (base32
            "0f9ljpmq8b97n6wa8bwn4f2v7imvfxc2pjqk6xjkmwbfpihrns10"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persp-mode emacs-dash))
    (home-page "http://github.com/rocher/persp-fr")
    (synopsis
      "In persp-mode, show perspective list in the GUI window title")
    (description
      "Documentation at https://melpa.org/#/persp-fr")
    (license #f)))

(define-public emacs-persp-mode
  (package
    (name "emacs-persp-mode")
    (version "20231010.1804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Bad-ptr/persp-mode.el.git")
               (commit
                 "345baaa520ab2d62205f85cc5f29d57d6063c141")))
        (sha256
          (base32
            "0y29vyvqdfxcpmzkyv2c6msbshx2f680izk2r0djrqj08ii8zmpr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Bad-ptr/persp-mode.el")
    (synopsis
      "windows/buffers sets shared among frames + save/load.")
    (description
      "Documentation at https://melpa.org/#/persp-mode")
    (license #f)))

(define-public emacs-persp-mode-project-bridge
  (package
    (name "emacs-persp-mode-project-bridge")
    (version "20220115.602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CIAvash/persp-mode-project-bridge.git")
               (commit
                 "cacc22942ca5dffdfc3d16cf88576ce0bd9e3a68")))
        (sha256
          (base32
            "1avcc4nlnp1a87p2yaq09yljl639l3j2d44xjkp4vhxqrx9v3xv8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-persp-mode))
    (home-page
      "https://github.com/CIAvash/persp-mode-project-bridge")
    (synopsis
      "Integration of persp-mode + project.el")
    (description
      "Documentation at https://melpa.org/#/persp-mode-project-bridge")
    (license #f)))

(define-public emacs-persp-mode-projectile-bridge
  (package
    (name "emacs-persp-mode-projectile-bridge")
    (version "20170315.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Bad-ptr/persp-mode-projectile-bridge.el.git")
               (commit
                 "f6453cd7b8b4352c06e771706f2c5b7e2cdff1ce")))
        (sha256
          (base32
            "1gyfn2fhx3bqzr9m1r4b8nyak8pmpcgj7yz2bagnjs21vfngr18c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persp-mode emacs-projectile))
    (home-page
      "https://github.com/Bad-ptr/persp-mode-projectile-bridge.el")
    (synopsis "persp-mode + projectile integration.")
    (description
      "Documentation at https://melpa.org/#/persp-mode-projectile-bridge")
    (license #f)))

(define-public emacs-persp-projectile
  (package
    (name "emacs-persp-projectile")
    (version "20210618.708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/persp-projectile.git")
               (commit
                 "4e374d7650c7e041df5af5ac280a44d4a4ec705a")))
        (sha256
          (base32
            "0cpf1739cd6ylyaz7pspsmh1dsmvymdqfpypahca0nn169vdrzk9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-perspective emacs-projectile))
    (home-page "unspecified")
    (synopsis
      "Perspective integration with Projectile")
    (description
      "Documentation at https://melpa.org/#/persp-projectile")
    (license #f)))

(define-public emacs-perspective
  (package
    (name "emacs-perspective")
    (version "20220921.346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/perspective-el.git")
               (commit
                 "8a69512639ae915c32c5055d1308ebf4b278266c")))
        (sha256
          (base32
            "1r026cw6p2ss5wg8mxgzf6iv1lb9pdnqyf6yrqb914aibkrvp9b6"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nex3/perspective-el")
    (synopsis
      "switch between named \"perspectives\" of the editor")
    (description
      "Documentation at https://melpa.org/#/perspective")
    (license #f)))

(define-public emacs-perspective-exwm
  (package
    (name "emacs-perspective-exwm")
    (version "20230218.1358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/perspective-exwm.el.git")
               (commit
                 "01d51f5c92a30b65e8346582ed1ce6513570bb0a")))
        (sha256
          (base32
            "06lnmbimjj5kyr0mixjagcv903fbn00wvp63wlni2g8c3bhx1p48"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-burly emacs-exwm emacs-perspective))
    (home-page
      "https://github.com/SqrtMinusOne/perspective-exwm.el")
    (synopsis
      "Better integration for perspective.el and EXWM")
    (description
      "Documentation at https://melpa.org/#/perspective-exwm")
    (license #f)))

(define-public emacs-perspective-project-bridge
  (package
    (name "emacs-perspective-project-bridge")
    (version "20231024.1737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arunkmv/perspective-project-bridge.git")
               (commit
                 "bd262893d5413e809bb2ac09142e413d1626d503")))
        (sha256
          (base32
            "1clg32ysm3cw3fhsspn6w32v820fwv3lvg8gqq3jbhr7l55ys9zk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-perspective))
    (home-page
      "https://github.com/arunkmv/perspective-project-bridge")
    (synopsis
      "Integration of perspective.el + project.el")
    (description
      "Documentation at https://melpa.org/#/perspective-project-bridge")
    (license #f)))

(define-public emacs-perspeen
  (package
    (name "emacs-perspeen")
    (version "20171203.1021")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seudut/perspeen.git")
               (commit
                 "edb70c530bda50ff3d1756e32a703d5fef5e5480")))
        (sha256
          (base32
            "12h0kj96s4h8z4kqalp7hccnlnqn5lrax3df75gz16pskx2dwxqr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-powerline))
    (home-page "https://github.com/seudut/perspeen")
    (synopsis "An package for multi-workspace")
    (description
      "Documentation at https://melpa.org/#/perspeen")
    (license #f)))

(define-public emacs-pest-mode
  (package
    (name "emacs-pest-mode")
    (version "20221231.15")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksqsf/pest-mode.git")
               (commit
                 "8023a92ce59c34dcd1587cbd85ed144f206ddb89")))
        (sha256
          (base32
            "0hbbwnamhbg295iva3ffp1al7cyjmc7nb2ilh1zqb4kvz6zyqhxj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pest-mode.el")))
    (home-page "https://github.com/ksqsf/pest-mode")
    (synopsis "Major mode for editing Pest files")
    (description
      "Documentation at https://melpa.org/#/pest-mode")
    (license #f)))

(define-public emacs-pet
  (package
    (name "emacs-pet")
    (version "20230906.46")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/emacs-pet.git")
               (commit
                 "d431f4d4f262752f9e4498471b11b20eaa49b8cf")))
        (sha256
          (base32
            "1cgs087k3nnhn1yq065ha87dcz5ip4xdnrnf0yayrpjd4vilqq8m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/wyuenho/emacs-pet/")
    (synopsis
      "Executable and virtualenv tracker for python-mode")
    (description
      "Documentation at https://melpa.org/#/pet")
    (license #f)))

(define-public emacs-pfuture
  (package
    (name "emacs-pfuture")
    (version "20220913.1401")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/pfuture.git")
               (commit
                 "19b53aebbc0f2da31de6326c495038901bffb73c")))
        (sha256
          (base32
            "0gzfi86mgwd0vi8905g9vkkmcyv63f77v7l0yzfhm8k4naf7cipx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Alexander-Miller/pfuture")
    (synopsis
      "a simple wrapper around asynchronous processes")
    (description
      "Documentation at https://melpa.org/#/pfuture")
    (license #f)))

(define-public emacs-pg
  (package
    (name "emacs-pg")
    (version "20231001.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emarsden/pg-el.git")
               (commit
                 "efceec47dbda4ddf5637cb38c972cfa215a905e1")))
        (sha256
          (base32
            "16apqgq4zkm8n79wci0w3cj1w9ssfs0xnm65s811325rszprqy1m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/emarsden/pg-el")
    (synopsis
      "Emacs Lisp socket-level interface to the PostgreSQL RDBMS")
    (description
      "Documentation at https://melpa.org/#/pg")
    (license #f)))

(define-public emacs-pgdevenv
  (package
    (name "emacs-pgdevenv")
    (version "20150105.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/pgdevenv-el.git")
               (commit
                 "7f1d5bc734750aca98cf67a9491cdbd5615fd132")))
        (sha256
          (base32
            "0c9d4c24ic67y07y74bv5b7vc56b6l0lbh2fbzm870r1dl5zbzcj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Manage your PostgreSQL development envs")
    (description
      "Documentation at https://melpa.org/#/pgdevenv")
    (license #f)))

(define-public emacs-ph
  (package
    (name "emacs-ph")
    (version "20161029.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gromnitsky/ph.git")
               (commit
                 "ed80dad9211583ed0db633448b3624c99b7fac23")))
        (sha256
          (base32
            "1pgz64zv9a0r16i958x53g7wnk0q7ngcd6z1maf7lxhlp57v015d"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el"
         "meta.json"
         "README"
         ("bin" "bin/ph-project-new"))))
    (home-page "unspecified")
    (synopsis
      "A global minor mode for managing multiple projects.")
    (description
      "Documentation at https://melpa.org/#/ph")
    (license #f)))

(define-public emacs-phabricator
  (package
    (name "emacs-phabricator")
    (version "20160510.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajtulloch/phabricator.el.git")
               (commit
                 "d09d6f059aea92d3b11c68664a5e80c901182ab8")))
        (sha256
          (base32
            "0cmfb5ns335nq27iw94qxvrldpwjga0hw40da9kpdcfg0in4ya0c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-projectile
            emacs-s
            emacs-f))
    (home-page
      "https://github.com/ajtulloch/phabricator.el")
    (synopsis
      "Phabricator/Arcanist helpers for Emacs.")
    (description
      "Documentation at https://melpa.org/#/phabricator")
    (license #f)))

(define-public emacs-phan
  (package
    (name "emacs-phan")
    (version "20200805.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phan.el.git")
               (commit
                 "b7d523630bb072c4dbcfa9995dc734b25b72a69f")))
        (sha256
          (base32
            "0xif2hmlfcnhf716964zmzzldxsyhmpp2y40i9l1cxlcliszwscv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-composer emacs-f))
    (home-page
      "https://github.com/emacs-php/phan.el")
    (synopsis
      "Utility functions for Phan (PHP static analizer)")
    (description
      "Documentation at https://melpa.org/#/phan")
    (license #f)))

(define-public emacs-phi-autopair
  (package
    (name "emacs-phi-autopair")
    (version "20210306.424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-autopair.git")
               (commit
                 "6a67c37d31a3ff9261fc9f812547a0c86721fc90")))
        (sha256
          (base32
            "0m1n77sq7cr1j6chf13zf4x34qyjycbimfpwk0msq1zc6cqjcm7n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (home-page "http://zk-phi.gitub.io/")
    (synopsis
      "another simple-minded autopair implementation")
    (description
      "Documentation at https://melpa.org/#/phi-autopair")
    (license #f)))

(define-public emacs-phi-grep
  (package
    (name "emacs-phi-grep")
    (version "20221004.836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-grep.git")
               (commit
                 "9f3c42952ad4ad75d24abbdccb041240db4f0557")))
        (sha256
          (base32
            "011i9dw2n3sq9yhm2qz55mnffmi5v9zc928crv480hjrbjad8f90"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zk-phi/phi-grep")
    (synopsis
      "Interactively-editable recursive grep implementation in elisp")
    (description
      "Documentation at https://melpa.org/#/phi-grep")
    (license #f)))

(define-public emacs-phi-rectangle
  (package
    (name "emacs-phi-rectangle")
    (version "20200911.204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-rectangle.git")
               (commit
                 "43ee8aea9998b34a9fdb28d7da2e4f75e4154030")))
        (sha256
          (base32
            "1kjvhpbwakcxhkmninasr0waziyclr13iwfyl2cg8yihk5xnakji"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("phi-rectangle.el")))
    (home-page "http://zk-phi.github.io/")
    (synopsis
      "another rectangle-mark command (rewrite of rect-mark)")
    (description
      "Documentation at https://melpa.org/#/phi-rectangle")
    (license #f)))

(define-public emacs-phi-search
  (package
    (name "emacs-phi-search")
    (version "20200510.906")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-search.git")
               (commit
                 "c34f5800968922d1f9e7b10092b8705d6640ad18")))
        (sha256
          (base32
            "1ss2ywx93wm372fvgc9vp4h8xkjbpl5i4268r7556n4zwk5nngf5"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "another incremental search & replace, compatible with \"multiple-cursors\"")
    (description
      "Documentation at https://melpa.org/#/phi-search")
    (license #f)))

(define-public emacs-phi-search-dired
  (package
    (name "emacs-phi-search-dired")
    (version "20200816.1542")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-search-dired.git")
               (commit
                 "f014a9fb0b6a94af2df0e22f91ef79ce6996afd7")))
        (sha256
          (base32
            "0ivb7d33qajccvs1sz4fc3h031qkqmz8w93k6di47qyfzd4vrvjm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-phi-search))
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "interactive filtering for dired powered by phi-search")
    (description
      "Documentation at https://melpa.org/#/phi-search-dired")
    (license #f)))

(define-public emacs-phi-search-mc
  (package
    (name "emacs-phi-search-mc")
    (version "20160324.1503")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/phi-search-mc.el.git")
               (commit
                 "7aa671910f766437089aec26c3aa7814222d1356")))
        (sha256
          (base32
            "0wr86ad0yl52im6b9z0b9pzmhcn39qg5m9878yfv1nbxliw40lcd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-phi-search emacs-multiple-cursors))
    (home-page
      "https://github.com/knu/phi-search-mc.el")
    (synopsis
      "multiple-cursors extension for phi-search")
    (description
      "Documentation at https://melpa.org/#/phi-search-mc")
    (license #f)))

(define-public emacs-phi-search-migemo
  (package
    (name "emacs-phi-search-migemo")
    (version "20170618.921")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/phi-search-migemo.git")
               (commit
                 "308909ebfc8003d16673f97ca9eb26a667b72969")))
        (sha256
          (base32
            "07pi72jnd6k5xj9ypmxa0pbb03r07safpgf8vlp1m0xda5ixl0wf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-phi-search emacs-migemo))
    (home-page "http://hins11.yu-yake.com/")
    (synopsis "migemo extension for phi-search")
    (description
      "Documentation at https://melpa.org/#/phi-search-migemo")
    (license #f)))

(define-public emacs-phoenix-dark-mono-theme
  (package
    (name "emacs-phoenix-dark-mono-theme")
    (version "20170729.1406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/j0ni/phoenix-dark-mono.git")
               (commit
                 "a54f515d162148bcb38676980bc2316adb3d7b8b")))
        (sha256
          (base32
            "1zr334qsjrajd2vrrlc1rfm4b4kdw15jfh5d102vj5bp7z7ajhb4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/j0ni/phoenix-dark-mono")
    (synopsis
      "Monochromatic version of the Phoenix theme")
    (description
      "Documentation at https://melpa.org/#/phoenix-dark-mono-theme")
    (license #f)))

(define-public emacs-phoenix-dark-pink-theme
  (package
    (name "emacs-phoenix-dark-pink-theme")
    (version "20190821.48")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/j0ni/phoenix-dark-pink.git")
               (commit
                 "ddd98a45775be105984ec598384e68df3d3e8046")))
        (sha256
          (base32
            "02fhna45wq3wja51yrwm0xysdvyck1r0a3dx41i5sh89504gl6a9"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/j0ni/phoenix-dark-pink")
    (synopsis
      "Originally a port of the Sublime Text 2 theme")
    (description
      "Documentation at https://melpa.org/#/phoenix-dark-pink-theme")
    (license #f)))

(define-public emacs-php-boris
  (package
    (name "emacs-php-boris")
    (version "20130527.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomterl/php-boris.git")
               (commit
                 "f2faebf610c917f7091f7ec0cd97645629c4f819")))
        (sha256
          (base32
            "07lcibr55pk3sab9bbq2r4phadl5p28n63wkq5rkhkkjc7s9rayc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Run boris php REPL")
    (description
      "Documentation at https://melpa.org/#/php-boris")
    (license #f)))

(define-public emacs-php-boris-minor-mode
  (package
    (name "emacs-php-boris-minor-mode")
    (version "20140209.1835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://framagit.org/steckerhalter/php-boris-minor-mode.git")
               (commit
                 "c70e176dd6545f2d42ca3427e87b469635616d8a")))
        (sha256
          (base32
            "1wk7vq80v97psxfg0pwy4mc6kdc61gm6h1vgl9p71ii6g6zvzcqg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-php-boris emacs-highlight))
    (home-page
      "https://github.com/steckerhalter/php-boris-minor-mode")
    (synopsis
      "a minor mode to evaluate PHP code in the Boris repl")
    (description
      "Documentation at https://melpa.org/#/php-boris-minor-mode")
    (license #f)))

(define-public emacs-php-cs-fixer
  (package
    (name "emacs-php-cs-fixer")
    (version "20220516.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/OVYA/php-cs-fixer.git")
               (commit
                 "efe4368d891f1eec6311363cfd6be3e9eadb5e0a")))
        (sha256
          (base32
            "1j0ivk4d8xd2r9ssdn9y4xl3lr2isg4sks5va7wjvk6h7jnf81bj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/OVYA/php-cs-fixer")
    (synopsis "php-cs-fixer wrapper.")
    (description
      "Documentation at https://melpa.org/#/php-cs-fixer")
    (license #f)))

(define-public emacs-php-eldoc
  (package
    (name "emacs-php-eldoc")
    (version "20140202.1941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/php-eldoc.git")
               (commit
                 "df05064146b884d9081e10657e32dc480f070cfe")))
        (sha256
          (base32
            "0hm6myvf91f4d2yfc7fs2xky9m8hfnimx1gkfzmn9f5pcc2l2p0i"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.php")))
    (home-page "https://github.com/sabof/php-eldoc")
    (synopsis "eldoc backend for php")
    (description
      "Documentation at https://melpa.org/#/php-eldoc")
    (license #f)))

(define-public emacs-php-mode
  (package
    (name "emacs-php-mode")
    (version "20230929.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/php-mode.git")
               (commit
                 "4a29636243ba7f4afba476348587713531d994bc")))
        (sha256
          (base32
            "1gavi8gr1hwj1hrnciwc7ckcycl32l42bp2ablw66h1nr12qm698"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-php/php-mode")
    (synopsis "Major mode for editing PHP code")
    (description
      "Documentation at https://melpa.org/#/php-mode")
    (license #f)))

(define-public emacs-php-quickhelp
  (package
    (name "emacs-php-quickhelp")
    (version "20210819.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vpxyz/php-quickhelp.git")
               (commit
                 "d5e11b7a6bad64550521e8822139a33218b8c9bb")))
        (sha256
          (base32
            "1d9rg699wl67qkb93r4qnjn0ng4xn9c2g6kc98zaiy2v0v2wcv8g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vpxyz/php-quickhelp")
    (synopsis "Quickhelp at point for php")
    (description
      "Documentation at https://melpa.org/#/php-quickhelp")
    (license #f)))

(define-public emacs-php-refactor-mode
  (package
    (name "emacs-php-refactor-mode")
    (version "20171124.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/keelerm84/php-refactor-mode.el.git")
               (commit
                 "7a794b0618df2882b1bd586fdd698dba0bc5130d")))
        (sha256
          (base32
            "12kjyzmicay7y37znk0znpn81lszmnydq5fkl5pk57bxblwwiivg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/keelerm84/php-refactor-mode.el")
    (synopsis
      "Minor mode to quickly and safely perform common refactorings")
    (description
      "Documentation at https://melpa.org/#/php-refactor-mode")
    (license #f)))

(define-public emacs-php-runtime
  (package
    (name "emacs-php-runtime")
    (version "20230404.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/php-runtime.el.git")
               (commit
                 "ba64f30e716f89f9cf2c3bd44c5d00da69736868")))
        (sha256
          (base32
            "0642n7cf3vn90gm7a2bvy264mjq5ar20aw5lh79ls55i4mryvqnr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/emacs-php/php-runtime.el")
    (synopsis "Language binding bridge to PHP")
    (description
      "Documentation at https://melpa.org/#/php-runtime")
    (license #f)))

(define-public emacs-php-scratch
  (package
    (name "emacs-php-scratch")
    (version "20210706.459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mallt/php-scratch.git")
               (commit
                 "b6bfd279da8a8ac7fc30459485956f3fd5d02573")))
        (sha256
          (base32
            "084ms50pw90jaqyll0rd3if1kb0i8hfrdrg72vss44cg83rq58vj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-php-mode))
    (home-page
      "https://github.com/mallt/php-scratch")
    (synopsis
      "A scratch buffer to interactively evaluate php code")
    (description
      "Documentation at https://melpa.org/#/php-scratch")
    (license #f)))

(define-public emacs-phpactor
  (package
    (name "emacs-phpactor")
    (version "20221023.608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpactor.el.git")
               (commit
                 "dde09addf36017527441a855054406f8ffc4e534")))
        (sha256
          (base32
            "11jah2d520qqyfil2qbhblph233a9wjwzbhpc7yzhbqdm29pr9vr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-f
            emacs-php-runtime
            emacs-composer
            emacs-async))
    (arguments
      '(#:files
        ("phpactor.el" "composer.json" "composer.lock")))
    (home-page
      "https://github.com/emacs-php/phpactor.el")
    (synopsis "Interface to Phpactor")
    (description
      "Documentation at https://melpa.org/#/phpactor")
    (license #f)))

(define-public emacs-phpstan
  (package
    (name "emacs-phpstan")
    (version "20230417.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpstan.el.git")
               (commit
                 "2dc25cb2f3d83484ea0eb063c9ffca8148828a2b")))
        (sha256
          (base32
            "0drsp230nxs336zzfy8gjr7r3p7m8w9rp4ih1zjwarzl1svpp7yp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-php-mode
            emacs-php-runtime))
    (arguments '(#:files ("phpstan.el")))
    (home-page
      "https://github.com/emacs-php/phpstan.el")
    (synopsis "Interface to PHPStan")
    (description
      "Documentation at https://melpa.org/#/phpstan")
    (license #f)))

(define-public emacs-phpt-mode
  (package
    (name "emacs-phpt-mode")
    (version "20190512.1809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/phpt-mode.git")
               (commit
                 "deb386f1a81003074c476f15e1975d445ff6df01")))
        (sha256
          (base32
            "0wv1q44f5hmpsrjvjb5y8c1gnjkazdghmgbzw6l30i3j3z36fy60"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-php-mode))
    (home-page
      "https://github.com/emacs-php/phpt-mode")
    (synopsis
      "Major mode for editing PHPT test code")
    (description
      "Documentation at https://melpa.org/#/phpt-mode")
    (license #f)))

(define-public emacs-phpunit
  (package
    (name "emacs-phpunit")
    (version "20230801.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/phpunit.el.git")
               (commit
                 "e5baa445363942fbd9898ac3cb91eea64b69d316")))
        (sha256
          (base32
            "08wi2vcx95a4dczx4176hl071hdk59l416aw79rzjgv559qmnmra"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-pkg-info))
    (home-page
      "https://github.com/nlamirault/phpunit.el")
    (synopsis "Launch PHP unit tests using phpunit")
    (description
      "Documentation at https://melpa.org/#/phpunit")
    (license #f)))

(define-public emacs-pianobar
  (package
    (name "emacs-pianobar")
    (version "20201002.1756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agrif/pianobar.el.git")
               (commit
                 "d708417608df4f09ee565fddaad03dfe181829a8")))
        (sha256
          (base32
            "008qmhg88n3kxhyvzsmf265c7ac6d48fjlxpp6v3p3mbxg6l6xx6"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/agrif/pianobar.el")
    (synopsis
      "thin wrapper for Pianobar, a Pandora Radio client")
    (description
      "Documentation at https://melpa.org/#/pianobar")
    (license #f)))

(define-public emacs-pickle
  (package
    (name "emacs-pickle")
    (version "20190923.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/pickle-mode.git")
               (commit
                 "3a0a717f2a24827667f34bc53830a3b81cd57460")))
        (sha256
          (base32
            "1r12r21882bq22w6cawf28ndf70nz2nd0f2wagdfr5a9ir9wchfy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ahungry/pickle-mode")
    (synopsis
      "Major mode for editing cucumber gherkin files.")
    (description
      "Documentation at https://melpa.org/#/pickle")
    (license #f)))

(define-public emacs-picpocket
  (package
    (name "emacs-picpocket")
    (version "20221101.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johanclaesson/picpocket.git")
               (commit
                 "30942846bd8cb95a938a534ed9ed9efeff813b7c")))
        (sha256
          (base32
            "0a6jnnl74z1nr1w4qkllil4vv5k669vkjl5z6zc42b4sb5qrksw7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/johanclaesson/picpocket")
    (synopsis "Image viewer")
    (description
      "Documentation at https://melpa.org/#/picpocket")
    (license #f)))

(define-public emacs-pig-mode
  (package
    (name "emacs-pig-mode")
    (version "20180520.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motus/pig-mode.git")
               (commit
                 "4c6c6e1b1bb719d8adc6c47cc24665f6fe558959")))
        (sha256
          (base32
            "1vwnybyrzk8nw2cs27yrsipxb6hmx7cs5d60yf00h0wiv3l6v3rr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pig-mode.el")))
    (home-page "unspecified")
    (synopsis "Major mode for Pig files")
    (description
      "Documentation at https://melpa.org/#/pig-mode")
    (license #f)))

(define-public emacs-pig-snippets
  (package
    (name "emacs-pig-snippets")
    (version "20130913.624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motus/pig-mode.git")
               (commit
                 "4c6c6e1b1bb719d8adc6c47cc24665f6fe558959")))
        (sha256
          (base32
            "1vwnybyrzk8nw2cs27yrsipxb6hmx7cs5d60yf00h0wiv3l6v3rr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("pig-snippets*.el" "snippets")))
    (home-page "https://github.com/motus/pig-mode")
    (synopsis "Snippets for pig-mode")
    (description
      "Documentation at https://melpa.org/#/pig-snippets")
    (license #f)))

(define-public emacs-pikchr-mode
  (package
    (name "emacs-pikchr-mode")
    (version "20210324.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kljohann/pikchr-mode.git")
               (commit
                 "5d424c5c97ac854cc44c369e654e4f906fcae3c8")))
        (sha256
          (base32
            "07qjz0mzl6cqgavv5sc9n1v7zq5q6f8is6nn126v0zk6rskp366q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kljohann/pikchr-mode")
    (synopsis
      "A major mode for the pikchr diagram markup language")
    (description
      "Documentation at https://melpa.org/#/pikchr-mode")
    (license #f)))

(define-public emacs-pillar
  (package
    (name "emacs-pillar")
    (version "20141112.1811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pillar-markup/pillar-mode.git")
               (commit
                 "13a7f676544cc66005ccd8e6fc1c25e4ccd6f909")))
        (sha256
          (base32
            "19i8hgzr7kdj4skf0cnv6vlsklq9qcyxcv3p33k9vgq7y4f9mah8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-makey))
    (home-page
      "http://github.com/DamienCassou/pillar-mode")
    (synopsis "Major mode for editing Pillar files")
    (description
      "Documentation at https://melpa.org/#/pillar")
    (license #f)))

(define-public emacs-pinboard
  (package
    (name "emacs-pinboard")
    (version "20230101.850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/pinboard.el.git")
               (commit
                 "112e903b489fed3f71b3165447ba6f21ee5675e6")))
        (sha256
          (base32
            "0yj5jzv3vdydn0hhdbikjxjfb9kqsqsjgb4524ghxn8nh2r40avm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/pinboard.el")
    (synopsis "A pinboard.in client")
    (description
      "Documentation at https://melpa.org/#/pinboard")
    (license #f)))

(define-public emacs-pinboard-api
  (package
    (name "emacs-pinboard-api")
    (version "20140324.1148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danieroux/pinboard-api-el.git")
               (commit
                 "b7b5214d0c35178f8dca08cf22d6ef3c21f0fce4")))
        (sha256
          (base32
            "0wy9c37g6m5khchlp8qvfnjgkwq4r38659adcm5prvzjgzqhlfja"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/danieroux/pinboard-api-el")
    (synopsis
      "Rudimentary http://pinboard.in integration")
    (description
      "Documentation at https://melpa.org/#/pinboard-api")
    (license #f)))

(define-public emacs-pinboard-popular
  (package
    (name "emacs-pinboard-popular")
    (version "20180511.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asimpson/pinboard-popular.git")
               (commit
                 "c0bc76cd35f8ecf34723c64a702b82eec2751318")))
        (sha256
          (base32
            "1msvb5r6ixd886plpbss62q2nwrrsb6271bi922vlhr817lhsain"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-loop))
    (home-page
      "https://github.com/asimpson/pinboard-popular")
    (synopsis
      "Displays links from the pinboard.in popular page.")
    (description
      "Documentation at https://melpa.org/#/pinboard-popular")
    (license #f)))

(define-public emacs-pine-script-mode
  (package
    (name "emacs-pine-script-mode")
    (version "20210629.1257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/pine-script-mode.git")
               (commit
                 "1959d2d5e09fde5244f9f945fec043cdffd5d37e")))
        (sha256
          (base32
            "00iyyvqs28l0qgzwm57r6qibdk98w4sdr4ilxsb1f2lrir75q6ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ericcrosson/pine-script-mode")
    (synopsis "Trading View Pine Script major mode")
    (description
      "Documentation at https://melpa.org/#/pine-script-mode")
    (license #f)))

(define-public emacs-pinot
  (package
    (name "emacs-pinot")
    (version "20140211.2026")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-pinot-search.git")
               (commit
                 "67fda555a155b22bb2ce44ba618b4bd6fc5f144a")))
        (sha256
          (base32
            "1wc31r5fpcia4n4vbpg7vv3rzrnjzh18yygi3kp4wvl2wzx2azqh"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.py")))
    (home-page "unspecified")
    (synopsis "Emacs interface to pinot-search")
    (description
      "Documentation at https://melpa.org/#/pinot")
    (license #f)))

(define-public emacs-pinyin
  (package
    (name "emacs-pinyin")
    (version "20220815.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/pinyin.el.git")
               (commit
                 "b7a0aad8ff35e50d1c536df4c0e73fc7e9d06700")))
        (sha256
          (base32
            "1cbs4mhf9bxhz8552dfdfr09v8abi6ppvm9arykwp7s5pnj7c705"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("pinyin-data" "pinyin-data/pinyin.txt"))))
    (home-page
      "https://github.com/xuchunyang/pinyin.el")
    (synopsis "Convert Hanzi to Pinyin (汉字转拼音)")
    (description
      "Documentation at https://melpa.org/#/pinyin")
    (license #f)))

(define-public emacs-pinyin-search
  (package
    (name "emacs-pinyin-search")
    (version "20230919.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/pinyin-search.el.git")
               (commit
                 "3632bb98a5b8c0a396cd0a9d107e323e1ed3b7e7")))
        (sha256
          (base32
            "0mfxgxrwa3rs09pvmafifbihlkdyy2r2n2k7p272mn538hqjy6z5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pinyinlib))
    (home-page
      "https://github.com/xuchunyang/pinyin-search.el")
    (synopsis "Search Chinese by Pinyin")
    (description
      "Documentation at https://melpa.org/#/pinyin-search")
    (license #f)))

(define-public emacs-pinyinlib
  (package
    (name "emacs-pinyinlib")
    (version "20200911.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/pinyinlib.el.git")
               (commit
                 "1772c79b6f319b26b6a394a8dda065be3ea4498d")))
        (sha256
          (base32
            "1lmw0hf6cjbvpsyjx686za74kwgz5bap7z1b49jgsimgrn5c20s4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Convert first letter of Pinyin to Simplified/Traditional Chinese characters")
    (description
      "Documentation at https://melpa.org/#/pinyinlib")
    (license #f)))

(define-public emacs-pip-frame
  (package
    (name "emacs-pip-frame")
    (version "20220802.1914")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.zamazal.org/pdm/pip-frame")
               (commit
                 "8c396a11f532a1beb594b65e99e594f1e9f1c2c8")))
        (sha256
          (base32
            "0qx7529i6hscy230rpx6gxk03gapa017pm65cjxvm2cj2lg0f68v"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.zamazal.org/pdm/pip-frame")
    (synopsis "Display and manage a PIP frame")
    (description
      "Documentation at https://melpa.org/#/pip-frame")
    (license #f)))

(define-public emacs-pip-requirements
  (package
    (name "emacs-pip-requirements")
    (version "20181027.1629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/pip-requirements.el.git")
               (commit
                 "216cd1690f80cc965d4ae47b8753fc185f778ff6")))
        (sha256
          (base32
            "0da3q0n5nn0l96kk49kanw5knx3jmga439zbmiii76na16bg5y3i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "A major mode for editing pip requirements files.")
    (description
      "Documentation at https://melpa.org/#/pip-requirements")
    (license #f)))

(define-public emacs-pipenv
  (package
    (name "emacs-pipenv")
    (version "20220514.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pwalsh/pipenv.el.git")
               (commit
                 "3af159749824c03f59176aff7f66ddd6a5785a10")))
        (sha256
          (base32
            "1ak9dvjqhdm12i7yamgbqjmc4zmvy2f0gd1nia1q9dy3n6576ryq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-pyvenv emacs-load-env-vars))
    (home-page "https://github.com/pwalsh/pipenv.el")
    (synopsis "A Pipenv porcelain")
    (description
      "Documentation at https://melpa.org/#/pipenv")
    (license #f)))

(define-public emacs-pipewire
  (package
    (name "emacs-pipewire")
    (version "20220725.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.zamazal.org/pdm/pipewire-0")
               (commit
                 "115a8a89a3a0c6a89ebe22df0ef0928a701cb1f0")))
        (sha256
          (base32
            "0mc93v7d4lqxwdlj8xid14yiyib1fv9s46mxmsjfzyvv210zi4hg"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.zamazal.org/pdm/pipewire-0")
    (synopsis "PipeWire user interface")
    (description
      "Documentation at https://melpa.org/#/pipewire")
    (license #f)))

(define-public emacs-pippel
  (package
    (name "emacs-pippel")
    (version "20220416.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arifer612/pippel.git")
               (commit
                 "cb194952ee150e77601d3233dabdb521b976ee79")))
        (sha256
          (base32
            "17606l24yyrjxa4rc0p2zj50lfbayqldw4phhi59yqf61289d520"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments '(#:files (:defaults "pippel.py")))
    (home-page "https://github.com/arifer612/pippel")
    (synopsis
      "Frontend to python package manager pip")
    (description
      "Documentation at https://melpa.org/#/pippel")
    (license #f)))

(define-public emacs-pixelblaze
  (package
    (name "emacs-pixelblaze")
    (version "20220918.1925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgsb/emacs-pixelblaze.git")
               (commit
                 "564a093f700a3292cbffb3887dd3a8d789f54e6d")))
        (sha256
          (base32
            "0f8rcs6gi0azl8wh8jhfjjx0092x146dzqdds302gl8f63lvsi9c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-websocket))
    (home-page
      "https://github.com/mgsb/emacs-pixelblaze")
    (synopsis
      "Interact with a Pixelblaze via Websocket")
    (description
      "Documentation at https://melpa.org/#/pixelblaze")
    (license #f)))

(define-public emacs-pixie-mode
  (package
    (name "emacs-pixie-mode")
    (version "20180626.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johnwalker/pixie-mode.git")
               (commit
                 "a40c2632cfbe948852a5cdcfd44e6a65db11834d")))
        (sha256
          (base32
            "11c5gv88chh7sg2i0rzisbad0mkq1zc7dyi5md8hdi5gqm68704g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clojure-mode emacs-inf-clojure))
    (home-page
      "https://github.com/johnwalker/pixie-mode")
    (synopsis "Major mode for Pixie-lang")
    (description
      "Documentation at https://melpa.org/#/pixie-mode")
    (license #f)))

(define-public emacs-pixiv-novel-mode
  (package
    (name "emacs-pixiv-novel-mode")
    (version "20160220.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/pixiv-novel-mode.el.git")
               (commit
                 "0d1ca524d92b91f20a7105402a773bc21779b434")))
        (sha256
          (base32
            "18rvnvm097ca4yc1nfswdv7dfqg36insnif5kfj19aa60m9qxl09"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for pixiv novel")
    (description
      "Documentation at https://melpa.org/#/pixiv-novel-mode")
    (license #f)))

(define-public emacs-pkg-info
  (package
    (name "emacs-pkg-info")
    (version "20150517.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pkg-info.git")
               (commit
                 "76ba7415480687d05a4353b27fea2ae02b8d9d61")))
        (sha256
          (base32
            "150xhsv695cchs5jc2hwk9gjgs0k8wkm966crvxxs6xvj5fg69xq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-epl))
    (home-page
      "https://github.com/lunaryorn/pkg-info.el")
    (synopsis "Information about packages")
    (description
      "Documentation at https://melpa.org/#/pkg-info")
    (license #f)))

(define-public emacs-pkg-overview
  (package
    (name "emacs-pkg-overview")
    (version "20210802.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-pkg-overview.git")
               (commit
                 "9b2e416758a6c107bb8cc670ec4d2627f82d5590")))
        (sha256
          (base32
            "1p15jyjpiikx5y3syvhrdxabhhl898af88dv3fi95gm8v39n35i0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Boruch-Baum/emacs-pkg-overview")
    (synopsis
      "Make org documentation from elisp source file")
    (description
      "Documentation at https://melpa.org/#/pkg-overview")
    (license #f)))

(define-public emacs-pkgbuild-mode
  (package
    (name "emacs-pkgbuild-mode")
    (version "20220802.1951")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/pkgbuild-mode.git")
               (commit
                 "9525be8ecbd3a0d0bc7cc27e6d0f403e111aa067")))
        (sha256
          (base32
            "03rhhmwwigvych4qfn0hly0z2hihs57yjapvfinbkrmw8ajgnl01"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/pkgbuild-mode")
    (synopsis
      "Interface to the ArchLinux package manager")
    (description
      "Documentation at https://melpa.org/#/pkgbuild-mode")
    (license #f)))

(define-public emacs-plain-org-wiki
  (package
    (name "emacs-plain-org-wiki")
    (version "20201217.1027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/plain-org-wiki.git")
               (commit
                 "faeeb54ca808bbf0f4380a938e75805b7a78dbf7")))
        (sha256
          (base32
            "02nv0rsky418zd69icxbim1xw66n8rs586i0lnl1nczjdx8vcmr9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (home-page
      "https://github.com/abo-abo/plain-org-wiki")
    (synopsis
      "Simple jump-to-org-files in a directory package")
    (description
      "Documentation at https://melpa.org/#/plain-org-wiki")
    (license #f)))

(define-public emacs-plain-theme
  (package
    (name "emacs-plain-theme")
    (version "20171124.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpakido/plain-theme.git")
               (commit
                 "48b37b9b19d8f1e0accbf930f30b5346cf7959fe")))
        (sha256
          (base32
            "0pi4sjp0aq279m449lw4rbppdivzkazd07bh9jqrmyrw9wib3hbl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Plain theme without syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/plain-theme")
    (license #f)))

(define-public emacs-plan9-theme
  (package
    (name "emacs-plan9-theme")
    (version "20180804.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/john2x/plan9-theme.el.git")
               (commit
                 "c2da2fcb241e9800d931a1ff19ecd9fd84d30382")))
        (sha256
          (base32
            "0rjxbk9fljnjmg00vdqcyynzg591cgknyy2d92xsxsyg4d28dvwi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/john2x/plan9-theme.el")
    (synopsis
      "A color theme for Emacs based on Plan9")
    (description
      "Documentation at https://melpa.org/#/plan9-theme")
    (license #f)))

(define-public emacs-planemo-mode
  (package
    (name "emacs-planemo-mode")
    (version "20230227.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/planemo-mode.el.git")
               (commit
                 "537ebe40688ca8f3786aa1e9842265e6f34584d2")))
        (sha256
          (base32
            "0q9k8djb4f8c2q1649cxmjml2w8zzdgwnj5n7vi01n03qp85mhzd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://gitlab.com/mtekman/planemo-mode.el")
    (synopsis
      "Minor mode for editing Galaxy XML files")
    (description
      "Documentation at https://melpa.org/#/planemo-mode")
    (license #f)))

(define-public emacs-planet-theme
  (package
    (name "emacs-planet-theme")
    (version "20161031.217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmack/emacs-planet-theme.git")
               (commit
                 "b0a310ff36565fe22224c407cf59569986698a32")))
        (sha256
          (base32
            "1xdj59skmldq5dnarirhwq4qycipas86nbyqwl8zsv0bh20nl1rs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cmack/emacs-planet-theme")
    (synopsis
      "A dark theme inspired by Gmail's 'Planets' theme of yore")
    (description
      "Documentation at https://melpa.org/#/planet-theme")
    (license #f)))

(define-public emacs-plantuml-mode
  (package
    (name "emacs-plantuml-mode")
    (version "20191102.2056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skuro/plantuml-mode.git")
               (commit
                 "ea45a13707abd2a70df183f1aec6447197fc9ccc")))
        (sha256
          (base32
            "0rbmn2964w9kms6ql25dzpnyygj693123xs7gxasylgw5jall9wx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis "Major mode for PlantUML")
    (description
      "Documentation at https://melpa.org/#/plantuml-mode")
    (license #f)))

(define-public emacs-plaster
  (package
    (name "emacs-plaster")
    (version "20180127.2050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Shirakumo/plaster.git")
               (commit
                 "4d18c8bc3322668ac1695e25c556bda6771af1d5")))
        (sha256
          (base32
            "1cblfh3hjkfn5acq2hsha981v6bf3ns8x2dmdz75kngfnzavc6ns"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/shirakumo/plaster/")
    (synopsis
      "Pasting to a plaster host with buffers.")
    (description
      "Documentation at https://melpa.org/#/plaster")
    (license #f)))

(define-public emacs-platformio-mode
  (package
    (name "emacs-platformio-mode")
    (version "20210511.957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ZachMassia/PlatformIO-Mode.git")
               (commit
                 "f4fd8932995a8aed80eab14e54232010c2889012")))
        (sha256
          (base32
            "1m6qmqp124idja9dq8gj8pzajxf40lm1adrnd24hbp26wh9pvc54"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-async emacs-projectile))
    (home-page
      "https://github.com/zachmassia/platformio-mode")
    (synopsis "PlatformIO integration")
    (description
      "Documentation at https://melpa.org/#/platformio-mode")
    (license #f)))

(define-public emacs-play-crystal
  (package
    (name "emacs-play-crystal")
    (version "20180114.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/play-crystal.el.git")
               (commit
                 "0b4810a9025213bd11dbcbfd38b3ca928829e0a5")))
        (sha256
          (base32
            "15gqr11paz5qmx43qb0f95wc87nn2snr7my22b0n6jwbk5djf402"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request))
    (home-page
      "https://github.com/veelenga/play-crystal.el")
    (synopsis
      "https://play.crystal-lang.org integration.")
    (description
      "Documentation at https://melpa.org/#/play-crystal")
    (license #f)))

(define-public emacs-play-routes-mode
  (package
    (name "emacs-play-routes-mode")
    (version "20170426.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brocode/play-routes-mode.git")
               (commit
                 "22d7b87e0eaf0330f2b2283872f8dc08a3258771")))
        (sha256
          (base32
            "0j61adh2lsh2zgz1v9i2jzh56ngnrpvsblipvc472k5dxa5qdxin"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/brocode/play-routes-mode/")
    (synopsis "Play Framework Routes File Support")
    (description
      "Documentation at https://melpa.org/#/play-routes-mode")
    (license #f)))

(define-public emacs-playerctl
  (package
    (name "emacs-playerctl")
    (version "20220714.1234")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thomasluquet/playerctl.el.git")
               (commit
                 "0912ed5a5ab6d611b5f35db589f608f1fafdc81a")))
        (sha256
          (base32
            "1pabavc2yla9dymc0f1gi9fvm139apls8971zakc05qz9jhs721c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thomasluquet/playerctl.el")
    (synopsis
      "Control your music player (e.g. Spotify) with playerctl")
    (description
      "Documentation at https://melpa.org/#/playerctl")
    (license #f)))

(define-public emacs-playground
  (package
    (name "emacs-playground")
    (version "20200812.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/emacs-playground.git")
               (commit
                 "77d2faab0bc3f6e1f2c65c66644c52167304610d")))
        (sha256
          (base32
            "1xl6fp246wk764jkyr7km7lgqfdyvbjxr9ri20dzaadfvwqyfzg5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/akirak/emacs-playground")
    (synopsis
      "Manage sandboxes for alternative configurations")
    (description
      "Documentation at https://melpa.org/#/playground")
    (license #f)))

(define-public emacs-playonline
  (package
    (name "emacs-playonline")
    (version "20200318.758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/playonline.el.git")
               (commit
                 "c75da1fdc1dfbd5d9aa274dc4e90ff631ea08e70")))
        (sha256
          (base32
            "0vkgzqdcxp4mlkz9z8p4307lbvjz51wpqhzpmyw4gwl079xc6gkq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request))
    (home-page
      "https://github.com/twlz0ne/playonline.el")
    (synopsis "Play code with online playgrounds")
    (description
      "Documentation at https://melpa.org/#/playonline")
    (license #f)))

(define-public emacs-plenv
  (package
    (name "emacs-plenv")
    (version "20130707.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karupanerura/plenv.el.git")
               (commit
                 "ee937d0f3a1a7ba2d035f45be896d3ed8fefaee2")))
        (sha256
          (base32
            "11cbpgjsnw8fiqf1s12hbm9qxgjcw6y2zxx7wz4wg7idmi7m0b7g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A plenv wrapper for Emacs")
    (description
      "Documentation at https://melpa.org/#/plenv")
    (license #f)))

(define-public emacs-plim-mode
  (package
    (name "emacs-plim-mode")
    (version "20140813.13")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dongweiming/plim-mode.git")
               (commit
                 "92e39190286f172567ceb02c80e1df3b81abfa2d")))
        (sha256
          (base32
            "07hspp4bkb3f5dm0l1arm0w1m04cq4glg81x4a9kf7bl601wzki2"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/dongweiming/plim-mode")
    (synopsis "Major mode for editing Plim files")
    (description
      "Documentation at https://melpa.org/#/plim-mode")
    (license #f)))

(define-public emacs-plisp-mode
  (package
    (name "emacs-plisp-mode")
    (version "20221130.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/flexibeast/plisp-mode.git")
               (commit
                 "3a0ec9741ae7ca67852022c6fa85519fcb4b69ba")))
        (sha256
          (base32
            "1lfn6bylpsam2la8r1k0gb3aik1fbbvpln37zc0hmdj3k0w4clci"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("plisp-mode.el" "inferior-plisp.el")))
    (home-page
      "https://github.com/flexibeast/plisp-mode")
    (synopsis "Major mode for PicoLisp programming.")
    (description
      "Documentation at https://melpa.org/#/plisp-mode")
    (license #f)))

(define-public emacs-plsense
  (package
    (name "emacs-plsense")
    (version "20151104.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-plsense.git")
               (commit
                 "d50f9dccc98f42bdb42f1d1c8142246e03879218")))
        (sha256
          (base32
            "1r2yxa7gqr0z9fwhx38siwjpg73a93rdmnhr4h6nm6lr32vviyxm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-log4e
            emacs-yaxception))
    (home-page
      "https://github.com/aki2o/emacs-plsense")
    (synopsis
      "provide interface for PlSense that is a development tool for Perl.")
    (description
      "Documentation at https://melpa.org/#/plsense")
    (license #f)))

(define-public emacs-plsense-direx
  (package
    (name "emacs-plsense-direx")
    (version "20140520.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/plsense-direx.git")
               (commit
                 "8a2f465264c74e04524cc789cdad0190ace43f6c")))
        (sha256
          (base32
            "0s34nbqqy6aqi113xj452pbmqp43046wfbfbbfv1xwhybgq0c1j1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-direx
            emacs-plsense
            emacs-log4e
            emacs-yaxception))
    (home-page
      "https://github.com/aki2o/plsense-direx")
    (synopsis "Perl Package Explorer")
    (description
      "Documentation at https://melpa.org/#/plsense-direx")
    (license #f)))

(define-public emacs-plur
  (package
    (name "emacs-plur")
    (version "20160504.924")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/plur.git")
               (commit
                 "5bdd3b9a2f0624414bd596e798644713cd1545f0")))
        (sha256
          (base32
            "0qlxj19hj96l4lw81xh5r14ppf6kp63clikk060s9yw00q7gnl6a"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xuchunyang/plur")
    (synopsis
      "Easily search and replace multiple variants of a word")
    (description
      "Documentation at https://melpa.org/#/plur")
    (license #f)))

(define-public emacs-pmdm
  (package
    (name "emacs-pmdm")
    (version "20191101.2346")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/pmdm-"
               version
               ".el"))
        (sha256
          (base32
            "01sb2q3z19b76rh40dld3r1w88wx7gc5b7h6769sd7mmnns63rll"))))
    (build-system melpa-build-system)
    (home-page "https://hg.serna.eu/emacs/pmdm")
    (synopsis "poor man's desktop-mode alternative.")
    (description
      "Documentation at https://melpa.org/#/pmdm")
    (license #f)))

(define-public emacs-pnpm-mode
  (package
    (name "emacs-pnpm-mode")
    (version "20200527.557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rajasegar/pnpm-mode.git")
               (commit
                 "391207e6505948b0d0cb57b802ee4885e3292c21")))
        (sha256
          (base32
            "0pgh9fnghj5f6vfkfb2l4jgf5j4lmidnfs949q0xik3b3hz4j4h3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rajasegar/pnpm-mode")
    (synopsis
      "Minor mode for working with pnpm projects")
    (description
      "Documentation at https://melpa.org/#/pnpm-mode")
    (license #f)))

(define-public emacs-po-mode
  (package
    (name "emacs-po-mode")
    (version "20231006.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/po-mode.git")
               (commit
                 "ca125eba813a6b29b5fbe7ea8a2e3d92f225ab8c")))
        (sha256
          (base32
            "0367gim5wvr3hpc7jwqfkzvjhpd9bqdkwgnbqbvbml5n3jgn93zn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for GNU gettext PO files")
    (description
      "Documentation at https://melpa.org/#/po-mode")
    (license #f)))

(define-public emacs-pocket-api
  (package
    (name "emacs-pocket-api")
    (version "20180403.109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/pocket-api.el.git")
               (commit
                 "3eb9430b9db90bc02e736e433eb86389f7655189")))
        (sha256
          (base32
            "0k6a9zzdi02g677cc699llk04i06yb7ddnlnmxndap5jszfyqwfi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/lujun9972/pocket-api.el")
    (synopsis "another pocket api")
    (description
      "Documentation at https://melpa.org/#/pocket-api")
    (license #f)))

(define-public emacs-pocket-lib
  (package
    (name "emacs-pocket-lib")
    (version "20190720.1957")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/pocket-lib.el.git")
               (commit
                 "f794e3e619e1f6cad25bbfd5fe019a7e62820bf4")))
        (sha256
          (base32
            "0iv03wjwmz0di8n5bndmq5r18r1pq999v1scyay0jm1cxlksqafg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-dash emacs-kv emacs-s))
    (home-page
      "https://github.com/alphapapa/pocket-lib.el")
    (synopsis
      "Library for accessing getpocket.com API")
    (description
      "Documentation at https://melpa.org/#/pocket-lib")
    (license #f)))

(define-public emacs-pocket-mode
  (package
    (name "emacs-pocket-mode")
    (version "20171201.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/pocket-mode.git")
               (commit
                 "229de7d35b7e5605797591c46aa8200d7efc363c")))
        (sha256
          (base32
            "0j3axac4lp7p00a7mf7frryqg1y3jwqaw0s475gz606642vg9l45"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pocket-api))
    (home-page "unspecified")
    (synopsis "Manage your pocket")
    (description
      "Documentation at https://melpa.org/#/pocket-mode")
    (license #f)))

(define-public emacs-pocket-reader
  (package
    (name "emacs-pocket-reader")
    (version "20230904.539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/pocket-reader.el.git")
               (commit
                 "ef6b6892ef13eff3479d79c7f6bc918dd0444e88")))
        (sha256
          (base32
            "10zlalqmdrdp46i2hxk1gf0wdqv74x99qq91a8acqjx30jnld9j6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-kv
            emacs-peg
            emacs-pocket-lib
            emacs-s
            emacs-ov
            emacs-rainbow-identifiers
            emacs-org-web-tools
            emacs-ht))
    (home-page
      "https://github.com/alphapapa/pocket-reader.el")
    (synopsis "Client for Pocket reading list")
    (description
      "Documentation at https://melpa.org/#/pocket-reader")
    (license #f)))

(define-public emacs-podcaster
  (package
    (name "emacs-podcaster")
    (version "20200607.1054")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/podcaster.git")
               (commit
                 "7a21173da0c57e6aa41dbdc33383047386b35eb5")))
        (sha256
          (base32
            "1b2bhwipsyyydrqdxjsipzy170xdkfamd4mw5pwzjcgdjqz9wvxa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/podcaster")
    (synopsis "Podcast client")
    (description
      "Documentation at https://melpa.org/#/podcaster")
    (license #f)))

(define-public emacs-poe-lootfilter-mode
  (package
    (name "emacs-poe-lootfilter-mode")
    (version "20190330.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdodds/poe-lootfilter-mode.git")
               (commit
                 "5ef06684cb2b17b090ee1f303c2b789fa71bc106")))
        (sha256
          (base32
            "1lxfbsixvr0rjcck4h4v000yb0iscvk9fwyw322y2cv2hvgwvkdw"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jdodds/poe-lootfilter-mode")
    (synopsis
      "Major mode for editing Path of Exile lootfilters")
    (description
      "Documentation at https://melpa.org/#/poe-lootfilter-mode")
    (license #f)))

(define-public emacs-poet-theme
  (package
    (name "emacs-poet-theme")
    (version "20200606.2343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kunalb/poet.git")
               (commit
                 "16eb694f0755c04c4db98614d0eca1199fddad70")))
        (sha256
          (base32
            "0zm8jbviddyj7jnyssh77jx43jghbpjwr77n9s3cjp3bmadwkrv5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kunalb/poet/")
    (synopsis "A theme for prose")
    (description
      "Documentation at https://melpa.org/#/poet-theme")
    (license #f)))

(define-public emacs-poetry
  (package
    (name "emacs-poetry")
    (version "20230304.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cybniv/poetry.el.git")
               (commit
                 "5ca52b221e57bb9dce7c89f62e7b01da1346a273")))
        (sha256
          (base32
            "1622lb747ihk24saiz9kl7k55iwa1cp4bifgg2shchhcdn7mj8vg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyvenv))
    (home-page
      "https://github.com/galaunay/poetry.el")
    (synopsis "Interface to Poetry")
    (description
      "Documentation at https://melpa.org/#/poetry")
    (license #f)))

(define-public emacs-point-pos
  (package
    (name "emacs-point-pos")
    (version "20170421.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/point-pos.el.git")
               (commit
                 "442bccb40791832cbc2d6f5c8f53be745aea2b73")))
        (sha256
          (base32
            "1p56h8ipgrd5433pc641xccdnsni51l58ll0hv2rp9aqjg9nlgcr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/point-pos.el")
    (synopsis "Save and restore point positions")
    (description
      "Documentation at https://melpa.org/#/point-pos")
    (license #f)))

(define-public emacs-point-stack
  (package
    (name "emacs-point-stack")
    (version "20200427.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/point-stack.git")
               (commit
                 "cddcea2c91038710c245819b3cda2dd739726134")))
        (sha256
          (base32
            "1qjf13zmh0gf90knd73b6fyn3bhwjzn4k1w1xpa1ngnh6v233da9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Back and forward navigation through buffer locations")
    (description
      "Documentation at https://melpa.org/#/point-stack")
    (license #f)))

(define-public emacs-poke-line
  (package
    (name "emacs-poke-line")
    (version "20201023.247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RyanMillerC/poke-line.git")
               (commit
                 "8d484dbaa1215d902fbd1e3c9163b39a43ec532a")))
        (sha256
          (base32
            "18wjmnjlrq0vvc08rc0z5bacjsfa6im98khhfdm3qh13a2bf1gjk"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "img")))
    (home-page
      "https://github.com/RyanMillerC/poke-line/")
    (synopsis
      "Minor mode to show position in a buffer using a Pokemon")
    (description
      "Documentation at https://melpa.org/#/poke-line")
    (license #f)))

(define-public emacs-pollen-mode
  (package
    (name "emacs-pollen-mode")
    (version "20220904.447")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lijunsong/pollen-mode.git")
               (commit
                 "19174fab69ce4d2ae903ef2c3da44054e8b84268")))
        (sha256
          (base32
            "1w15v2xj01h9j7glg9854zszh7mi1cdshaacjhplk64s6c9brkfp"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("pollen-mode.el")))
    (home-page
      "https://github.com/lijunsong/pollen-mode")
    (synopsis "major mode for editing pollen files")
    (description
      "Documentation at https://melpa.org/#/pollen-mode")
    (license #f)))

(define-public emacs-poly-ansible
  (package
    (name "emacs-poly-ansible")
    (version "20220113.1656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mavit/poly-ansible.git")
               (commit
                 "6d74fe80b7e61a35aa0fa36a520eaf5c9c027c51")))
        (sha256
          (base32
            "0idzq8fyspzfq3nwcn58k01rlqrqyywx2732ld994slmiwgyggas"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ansible
            emacs-ansible-doc
            emacs-jinja2-mode
            emacs-polymode
            emacs-yaml-mode))
    (home-page
      "https://gitlab.com/mavit/poly-ansible/")
    (synopsis "Polymode for Ansible: Jinja2 in YAML")
    (description
      "Documentation at https://melpa.org/#/poly-ansible")
    (license #f)))

(define-public emacs-poly-erb
  (package
    (name "emacs-poly-erb")
    (version "20200316.1314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-erb.git")
               (commit
                 "56c744b8d87d8cbe0aba2696d4e8525afc4aa0e8")))
        (sha256
          (base32
            "118x9qrays54n6ksnln51ps5c298zs8ih7k49mn6aq6lpvwy5wjr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-erb")
    (synopsis "Polymode for erb")
    (description
      "Documentation at https://melpa.org/#/poly-erb")
    (license #f)))

(define-public emacs-poly-markdown
  (package
    (name "emacs-poly-markdown")
    (version "20230202.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-markdown.git")
               (commit
                 "98695eb7ca4ca11dcec71a1cab64903bbf79b4d3")))
        (sha256
          (base32
            "0x22ablv7qc7h0llqkp6n42cg1nlwlx305ssigijcxbi99dyf3pz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-markdown-mode))
    (home-page
      "https://github.com/polymode/poly-markdown")
    (synopsis "Polymode for markdown-mode")
    (description
      "Documentation at https://melpa.org/#/poly-markdown")
    (license #f)))

(define-public emacs-poly-noweb
  (package
    (name "emacs-poly-noweb")
    (version "20200316.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-noweb.git")
               (commit
                 "3b0cd36ca9a707e8a09337a3468fa85d81fc461c")))
        (sha256
          (base32
            "1jl5h4nf10xd2gdlsxi6h2n3z5zh26ffcixn68xfp5q4zl34zk8p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-noweb")
    (synopsis "Polymode for noweb")
    (description
      "Documentation at https://melpa.org/#/poly-noweb")
    (license #f)))

(define-public emacs-poly-org
  (package
    (name "emacs-poly-org")
    (version "20230317.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-org.git")
               (commit
                 "5ca02279a4e6f5025cd2c7b1196058d3e74dc5d5")))
        (sha256
          (base32
            "136bph3rmknfqf6kq4yz5wlxsjidcq6w42wis87lbknmphhg1jp7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-org")
    (synopsis "Polymode for org-mode")
    (description
      "Documentation at https://melpa.org/#/poly-org")
    (license #f)))

(define-public emacs-poly-r
  (package
    (name "emacs-poly-r")
    (version "20230416.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-R.git")
               (commit
                 "8024e852cfca642dea2045a41b2033baa2f1f9a5")))
        (sha256
          (base32
            "1r4cbvvg1fjyq18ap1mj7gpvgllpc6hf6g7nf697vgwmahlb7jgf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode
            emacs-poly-markdown
            emacs-poly-noweb))
    (home-page "https://github.com/polymode/poly-R")
    (synopsis "Various polymodes for R language")
    (description
      "Documentation at https://melpa.org/#/poly-R")
    (license #f)))

(define-public emacs-poly-rst
  (package
    (name "emacs-poly-rst")
    (version "20210418.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-rst.git")
               (commit
                 "e71f2ae6a00683cdb8006f953e5db0673043e144")))
        (sha256
          (base32
            "1jhj1hrb998p9n6bjfdnmsinf0rd5wspm9gwsrdb0k6il897h7lf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page
      "https://github.com/polymode/poly-rst")
    (synopsis "poly-rst-mode polymode")
    (description
      "Documentation at https://melpa.org/#/poly-rst")
    (license #f)))

(define-public emacs-poly-ruby
  (package
    (name "emacs-poly-ruby")
    (version "20180905.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/poly-ruby.el.git")
               (commit
                 "794ebb926ace23e9c1398da934701951432dcea2")))
        (sha256
          (base32
            "1ffm81hg1gah7hb9x556hda5g4j3gk4c986q9gaacvfizqak3gyy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-polymode))
    (home-page "https://github.com/knu/poly-ruby.el")
    (synopsis "Provides poly-ruby-mode")
    (description
      "Documentation at https://melpa.org/#/poly-ruby")
    (license #f)))

(define-public emacs-poly-slim
  (package
    (name "emacs-poly-slim")
    (version "20200316.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/poly-slim.git")
               (commit
                 "9e9b5164c68955974fd5f5d220aec5af9b5ba3ae")))
        (sha256
          (base32
            "1742wlx07khra7xfbd6f8d3i030w87mncnyx6kf6im10khf8qwmb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-slim-mode))
    (home-page
      "https://github.com/polymode/poly-slim")
    (synopsis "Polymodes for slim")
    (description
      "Documentation at https://melpa.org/#/poly-slim")
    (license #f)))

(define-public emacs-poly-wdl
  (package
    (name "emacs-poly-wdl")
    (version "20190712.529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmonlong/poly-wdl.git")
               (commit
                 "963faa828d15d49cee5a63f619c3c30e162c2d0f")))
        (sha256
          (base32
            "0bihvkkq4v7wadwbsrgi7a0zmhqn2lp76pnq7vwwsvs1rm36pbvy"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode emacs-wdl-mode))
    (home-page
      "https://github.com/jmonlong/poly-wdl")
    (synopsis "Polymode for WDL")
    (description
      "Documentation at https://melpa.org/#/poly-wdl")
    (license #f)))

(define-public emacs-polybar-sesman
  (package
    (name "emacs-polybar-sesman")
    (version "20210901.1336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/markgdawson/polybar-sesman.el.git")
               (commit
                 "5175b8d641aad9576519717f69f858621892d5c7")))
        (sha256
          (base32
            "101ymzis94sdlhk173my108g2s3fpi4ibc514isizfxvb4cn9gs9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-sesman))
    (home-page
      "https://github.com/markgdawson/polybar-sesman.el")
    (synopsis
      "Display active sesman connections in polybar")
    (description
      "Documentation at https://melpa.org/#/polybar-sesman")
    (license #f)))

(define-public emacs-polymode
  (package
    (name "emacs-polymode")
    (version "20230317.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/polymode/polymode.git")
               (commit
                 "ca060e081a1f849a880732670dc15370ac987b89")))
        (sha256
          (base32
            "16zj1855ngnq7lqirr2qc1pmyg17241s6qsp7qhzc9kxf1k3r54i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/polymode/polymode")
    (synopsis
      "Extensible framework for multiple major modes")
    (description
      "Documentation at https://melpa.org/#/polymode")
    (license #f)))

(define-public emacs-pomidor
  (package
    (name "emacs-pomidor")
    (version "20220714.1932")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TatriX/pomidor.git")
               (commit
                 "394a52f95587b1d10d0c3bdca503d2cc876db35b")))
        (sha256
          (base32
            "1y64xs74p39rr1d4i1s0zjhqlcips9k11fr8z6wy1j7s9b142570"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert emacs-dash))
    (arguments
      '(#:files
        (:defaults "tick.wav" "tack.wav" "overwork.wav")))
    (home-page "https://github.com/TatriX/pomidor")
    (synopsis "Simple and cool pomodoro timer")
    (description
      "Documentation at https://melpa.org/#/pomidor")
    (license #f)))

(define-public emacs-pomm
  (package
    (name "emacs-pomm")
    (version "20230602.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SqrtMinusOne/pomm.el.git")
               (commit
                 "12ce6a68c7ba7be16c2990c0b660bbb87b6fc9b0")))
        (sha256
          (base32
            "1zxld8a0siscwwkymzwd7bnf6ivhisg3swqg7r5vqgham35lb4px"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (arguments '(#:files (:defaults "resources")))
    (home-page
      "https://github.com/SqrtMinusOne/pomm.el")
    (synopsis "Pomodoro and Third Time timers")
    (description
      "Documentation at https://melpa.org/#/pomm")
    (license #f)))

(define-public emacs-pomodoro
  (package
    (name "emacs-pomodoro")
    (version "20210225.2018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/baudtack/pomodoro.el.git")
               (commit
                 "ed888b24d0b89a5dec6f5278b1064c530c827321")))
        (sha256
          (base32
            "0yv1339q5s31wxw8y34pb09b0rlvz9m3gzqb4dc1q8ncq8xb8wl5"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A timer for the Pomodoro Technique")
    (description
      "Documentation at https://melpa.org/#/pomodoro")
    (license #f)))

(define-public emacs-pony-mode
  (package
    (name "emacs-pony-mode")
    (version "20170807.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidmiller/pony-mode.git")
               (commit
                 "760684d30b6c234d1b88c9a4673a808f36f7f341")))
        (sha256
          (base32
            "1y4gxn25i2nszdhqq8jxf9h65mqfgcwbypx5p4wkan5i1v2i3yr1"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("src/*.el" "src/snippets")))
    (home-page
      "https://github.com/davidmiller/pony-mode")
    (synopsis
      "Minor mode for working with Django Projects")
    (description
      "Documentation at https://melpa.org/#/pony-mode")
    (license #f)))

(define-public emacs-pony-snippets
  (package
    (name "emacs-pony-snippets")
    (version "20200418.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ponylang/pony-snippets.git")
               (commit
                 "115a0d5066f89554bee9cb1045bcda5a18ebd441")))
        (sha256
          (base32
            "1g11w52bf724zwwsvrcylk3ndjci2cnbzing77c91psz6d7zjkvw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/seantallen/pony-snippets")
    (synopsis "Yasnippets for Pony")
    (description
      "Documentation at https://melpa.org/#/pony-snippets")
    (license #f)))

(define-public emacs-ponylang-mode
  (package
    (name "emacs-ponylang-mode")
    (version "20211015.331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ponylang/ponylang-mode.git")
               (commit
                 "61f54d0620229afdd049dfe75681942bcf52e53d")))
        (sha256
          (base32
            "1z04y3kxbj2lisawl5yxwg7q8qry02fhmv0is6wwv3gmgnbk1kns"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-hydra
            emacs-hl-todo
            emacs-yafolding
            emacs-yasnippet
            emacs-company-ctags
            emacs-rainbow-delimiters
            emacs-fill-column-indicator))
    (home-page
      "https://github.com/ponylang/ponylang-mode")
    (synopsis
      "A major mode for the Pony programming language")
    (description
      "Documentation at https://melpa.org/#/ponylang-mode")
    (license #f)))

(define-public emacs-pophint
  (package
    (name "emacs-pophint")
    (version "20200420.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-pophint.git")
               (commit
                 "5e13da4578ae7ba00e6f7bae31eb546d713cc19d")))
        (sha256
          (base32
            "01bwfswzzrjxrjaqysaqnav7h3swwyigxw7nj0cgrm3w8cp1y2a8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-log4e emacs-yaxception))
    (home-page
      "https://github.com/aki2o/emacs-pophint")
    (synopsis
      "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode")
    (description
      "Documentation at https://melpa.org/#/pophint")
    (license #f)))

(define-public emacs-poporg
  (package
    (name "emacs-poporg")
    (version "20170403.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/QBobWatson/poporg.git")
               (commit
                 "2c58d68c81ecca4140bf179f19ed153ec804b65a")))
        (sha256
          (base32
            "1ymqhy0sqd54z154s3cm6q1m4xnr9wkx9dl5f93845k11ay3kvln"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/QBobWatson/poporg")
    (synopsis
      "Pop a comment or string to an empty buffer for text editing")
    (description
      "Documentation at https://melpa.org/#/poporg")
    (license #f)))

(define-public emacs-popper
  (package
    (name "emacs-popper")
    (version "20230909.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/popper.git")
               (commit
                 "570b0820f884a9c0e3d9cb07e7f7f523b39b836f")))
        (sha256
          (base32
            "1j0xfd82kl1w5c49abqfa7rd0ywwnmi9kqzifi0ya3f5fsp0b0my"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/karthink/popper")
    (synopsis "Summon and dismiss buffers as popups")
    (description
      "Documentation at https://melpa.org/#/popper")
    (license #f)))

(define-public emacs-popup
  (package
    (name "emacs-popup")
    (version "20230819.2306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/auto-complete/popup-el.git")
               (commit
                 "769318d0391e6d9a718e227678234f27f7c13a47")))
        (sha256
          (base32
            "166v7h5ysark4d953yar0lvds14xjdr1199f6hi5xm16h5h5n56r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/auto-complete/popup-el")
    (synopsis "Visual Popup User Interface")
    (description
      "Documentation at https://melpa.org/#/popup")
    (license #f)))

(define-public emacs-popup-complete
  (package
    (name "emacs-popup-complete")
    (version "20141109.308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/popup-complete.git")
               (commit
                 "caa655a6d8472e9a4bfa1311126d90d7d1b07fca")))
        (sha256
          (base32
            "1q9zajv6g7mi6k98kzq3498nhmdkp1z9d2b8vgzbk7745d39gm9b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/syohex/emacs-popup-complete")
    (synopsis "completion with popup")
    (description
      "Documentation at https://melpa.org/#/popup-complete")
    (license #f)))

(define-public emacs-popup-edit-menu
  (package
    (name "emacs-popup-edit-menu")
    (version "20170404.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/debugfan/popup-edit-menu.git")
               (commit
                 "925600a6e29183841199e866cf55e566a6a1b002")))
        (sha256
          (base32
            "1dd0ss7cjdjs3c7vkq8p874408iysih80brc8vlfh1f43cnc5v92"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "a popup context edit menu package")
    (description
      "Documentation at https://melpa.org/#/popup-edit-menu")
    (license #f)))

(define-public emacs-popup-imenu
  (package
    (name "emacs-popup-imenu")
    (version "20210404.1153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ancane/popup-imenu.git")
               (commit
                 "b00c4d503cbbaf01c136b1647329e6a6257d012c")))
        (sha256
          (base32
            "0q081lw6zqzpbmscpk1yzyfpalr9ld5qwh962dwwy04rc5f0aq3s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-popup emacs-flx-ido))
    (home-page
      "https://github.com/ancane/popup-imenu")
    (synopsis "imenu index popup")
    (description
      "Documentation at https://melpa.org/#/popup-imenu")
    (license #f)))

(define-public emacs-popup-kill-ring
  (package
    (name "emacs-popup-kill-ring")
    (version "20131020.1854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/popup-kill-ring.git")
               (commit
                 "5773dfadc104a906c088a3ec62e8cdd3e01e57fa")))
        (sha256
          (base32
            "1zdwlmk3vr0mq0dxrnkqjncalnbmvpxc0lma2sv3a4czl8yv0inn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-pos-tip))
    (home-page
      "https://github.com/waymondo/popup-kill-ring")
    (synopsis
      "interactively insert item from kill-ring")
    (description
      "Documentation at https://melpa.org/#/popup-kill-ring")
    (license #f)))

(define-public emacs-popup-switcher
  (package
    (name "emacs-popup-switcher")
    (version "20210402.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/popup-switcher.git")
               (commit
                 "94e01b9ea7970e86ed0f2fbeaa8cd320b60ae821")))
        (sha256
          (base32
            "14a43iv6sr52dh1qqcz58qinx20dxkrfznb7lvh35bihjj819m51"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup emacs-dash))
    (home-page
      "https://github.com/kostafey/popup-switcher")
    (synopsis
      "switch to other buffers and files via popup.")
    (description
      "Documentation at https://melpa.org/#/popup-switcher")
    (license #f)))

(define-public emacs-popwin
  (package
    (name "emacs-popwin")
    (version "20210215.1849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/popwin.git")
               (commit
                 "1184368d3610bd0d0ca4a3db4068048c562c2b50")))
        (sha256
          (base32
            "0inm6wbfkw6b9bwikd77d0zmk6ma9fzfs11acblp5imq202v76ra"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/popwin")
    (synopsis "Popup Window Manager")
    (description
      "Documentation at https://melpa.org/#/popwin")
    (license #f)))

(define-public emacs-portage-navi
  (package
    (name "emacs-portage-navi")
    (version "20141208.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-portage-navi.git")
               (commit
                 "8016c3e99fe6cef101d479a3d69185796b22ca2f")))
        (sha256
          (base32
            "1pm4x74pw67m2izr9dir201dn5g9icgk6h2j8rqvasgx8v8krv3i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-ctable))
    (home-page
      "https://github.com/kiwanami/emacs-portage-navi")
    (synopsis "portage viewer")
    (description
      "Documentation at https://melpa.org/#/portage-navi")
    (license #f)))

(define-public emacs-porthole
  (package
    (name "emacs-porthole")
    (version "20200404.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/porthole.git")
               (commit
                 "9e68b419acf9245208f8094e10041b7f04511473")))
        (sha256
          (base32
            "0kaf00924jg50l2zdhyf1lxsh44nfp4zbc23wxbir45xdx9rzl3z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-web-server
            emacs-f
            emacs-json-rpc-server))
    (home-page "https://github.com/jcaw/porthole")
    (synopsis "RPC Servers in Emacs")
    (description
      "Documentation at https://melpa.org/#/porthole")
    (license #f)))

(define-public emacs-pos-tip
  (package
    (name "emacs-pos-tip")
    (version "20230721.834")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pitkali/pos-tip.git")
               (commit
                 "90a9babc829b298af36be695009894fc00a97935")))
        (sha256
          (base32
            "1k6r59jhbyiknhsl7df0zafyc4d9r3vk953x6sdxgz92kx6hxpfy"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Show tooltip at point")
    (description
      "Documentation at https://melpa.org/#/pos-tip")
    (license #f)))

(define-public emacs-posframe
  (package
    (name "emacs-posframe")
    (version "20230714.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/posframe.git")
               (commit
                 "017deece88360c7297265680d78a0bb316470716")))
        (sha256
          (base32
            "1gv46z6dyy04ivd2sbsifmr140gxv16dbwfzmxj1q9gvhlxxnxc8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tumashu/posframe")
    (synopsis
      "Pop a posframe (just a frame) at point")
    (description
      "Documentation at https://melpa.org/#/posframe")
    (license #f)))

(define-public emacs-posix-manual
  (package
    (name "emacs-posix-manual")
    (version "20200301.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-posix-manual.git")
               (commit
                 "ebaacd7266ae7a66605317f57b9f42e9cfb2ce1e")))
        (sha256
          (base32
            "0kdcpd59jd1gasqk5gx4ggbyp492b53dy6n3nkv9j2rj8618yzs6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-posix-manual")
    (synopsis "POSIX manual page lookup")
    (description
      "Documentation at https://melpa.org/#/posix-manual")
    (license #f)))

(define-public emacs-postcss-sorting
  (package
    (name "emacs-postcss-sorting")
    (version "20180211.956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/P233/postcss-sorting.el.git")
               (commit
                 "deb0c935d2904c11a965758a9aee5a0e905f21fc")))
        (sha256
          (base32
            "03kng7i09px5vizvmmrar7rj3bk27y43bi8hlzxax0ja27k0c66c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/P233/postcss-sorting.el")
    (synopsis "postcss-sorting interface")
    (description
      "Documentation at https://melpa.org/#/postcss-sorting")
    (license #f)))

(define-public emacs-pov-mode
  (package
    (name "emacs-pov-mode")
    (version "20161115.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/melmothx/pov-mode.git")
               (commit
                 "9fc1db3aab7c27155674dd1a87ec62606035d074")))
        (sha256
          (base32
            "1399fxivy15y2k4vp7vqqgsi8l1mzxc8aa2mf2x1hksgiyq60acp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing POV-Ray scene files.")
    (description
      "Documentation at https://melpa.org/#/pov-mode")
    (license #f)))

(define-public emacs-pow
  (package
    (name "emacs-pow")
    (version "20140420.806")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yukihr/emacs-pow.git")
               (commit
                 "ea83986b8ca8e27cb996290d6463b111ec0966ce")))
        (sha256
          (base32
            "112s6qb80sn44b1cxggqfci89wymxvvwkwl7nknfnr2dzd58lzzy"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/yukihr/emacs-pow")
    (synopsis
      "pow (http://pow.cx/) manager for emacs")
    (description
      "Documentation at https://melpa.org/#/pow")
    (license #f)))

(define-public emacs-power-mode
  (package
    (name "emacs-power-mode")
    (version "20220817.429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elizagamedev/power-mode.el.git")
               (commit
                 "313698d9c7766c17b077a70b31a2d0f52496d767")))
        (sha256
          (base32
            "1nkqn8jmnv4l2ydj9jipk3mz76kbz1gfk3iz986wgj8h2317vbzy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/elizagamedev/power-mode.el")
    (synopsis "Imbue Emacs with power!")
    (description
      "Documentation at https://melpa.org/#/power-mode")
    (license #f)))

(define-public emacs-powerline
  (package
    (name "emacs-powerline")
    (version "20221110.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/milkypostman/powerline.git")
               (commit
                 "c35c35bdf5ce2d992882c1f06f0f078058870d4a")))
        (sha256
          (base32
            "0k1n5pg8v3ybkqxcipw80jqv94ka0dp63qxl0hvjwlxk16gxp8kb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/milkypostman/powerline/")
    (synopsis "Rewrite of Powerline")
    (description
      "Documentation at https://melpa.org/#/powerline")
    (license #f)))

(define-public emacs-powerline-evil
  (package
    (name "emacs-powerline-evil")
    (version "20190603.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johnson-christopher/powerline-evil.git")
               (commit
                 "b77e2cf571e9990734f2b30d826f3a362b559fd1")))
        (sha256
          (base32
            "1hs9jvl5lmfwr9k6qcnxjhd61zsmzq53ania1w5616gqa4qnjzhn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-powerline))
    (home-page
      "http://github.com/johnson-christopher/powerline-evil/")
    (synopsis
      "Utilities for better Evil support for Powerline")
    (description
      "Documentation at https://melpa.org/#/powerline-evil")
    (license #f)))

(define-public emacs-powershell
  (package
    (name "emacs-powershell")
    (version "20220805.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jschaf/powershell.el.git")
               (commit
                 "f2da15857e430206e215a3c65289b4058ae3c976")))
        (sha256
          (base32
            "00q0qdrdj1rsi6lc1mdmn0nnxklpp2wjp73q12dwav37ymv9cj4w"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jschaf/powershell.el")
    (synopsis "Mode for editing PowerShell scripts")
    (description
      "Documentation at https://melpa.org/#/powershell")
    (license #f)))

(define-public emacs-powerthesaurus
  (package
    (name "emacs-powerthesaurus")
    (version "20230426.1719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SavchenkoValeriy/emacs-powerthesaurus.git")
               (commit
                 "4b97797cf789aaba411c61a85fe23474ebc5bedc")))
        (sha256
          (base32
            "19bd8rwjwprxp54vy1a53m2gv138ybda5ybxvm6q7msqhxmphf3g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-jeison emacs-s))
    (home-page
      "http://github.com/SavchenkoValeriy/emacs-powerthesaurus")
    (synopsis "Powerthesaurus integration")
    (description
      "Documentation at https://melpa.org/#/powerthesaurus")
    (license #f)))

(define-public emacs-ppcompile
  (package
    (name "emacs-ppcompile")
    (version "20220619.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whatacold/ppcompile.git")
               (commit
                 "4c287c9ebc0e78dbbe75195bb5eb3fe82e0bfaff")))
        (sha256
          (base32
            "0nqqsx51bfs90183yldjfxiv1k4d6l0vy8acnhmifbzbwzxa1b7i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/whatacold/ppcompile")
    (synopsis
      "Ping-pong compile projects on remote machines")
    (description
      "Documentation at https://melpa.org/#/ppcompile")
    (license #f)))

(define-public emacs-ppd-sr-speedbar
  (package
    (name "emacs-ppd-sr-speedbar")
    (version "20151108.1224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/ppd-sr-speedbar.git")
               (commit
                 "d88d7f63f695824c435dd996405454d1e46d2aa3")))
        (sha256
          (base32
            "08ff4l6vlyzqpy6cv9wc714h3ia8cwy5gc3qk5zml1yijv8xvb75"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sr-speedbar
            emacs-project-persist-drawer))
    (arguments '(#:files ("lib/*")))
    (home-page
      "https://github.com/rdallasgrayppd-sr-speedbar")
    (synopsis
      "Sr Speedbar adaptor for project-persist-drawer.")
    (description
      "Documentation at https://melpa.org/#/ppd-sr-speedbar")
    (license #f)))

(define-public emacs-ppp
  (package
    (name "emacs-ppp")
    (version "20220211.1529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/ppp.el.git")
               (commit
                 "d5d854c3006dfd268e62c7f91c2aad6f86a505b5")))
        (sha256
          (base32
            "1brx3fz2amsrir6qzxwj4w8v0hhib5zcnyc5l00y5k7mrnaklh86"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/conao3/ppp.el")
    (synopsis
      "Extended pretty printer for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/ppp")
    (license #f)))

(define-public emacs-pr-review
  (package
    (name "emacs-pr-review")
    (version "20230723.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blahgeek/emacs-pr-review.git")
               (commit
                 "1296c81681509044865643ed92474a7d31ead9f3")))
        (sha256
          (base32
            "07hw222gk0kklv84q6hnzcmbh2gds3098mqrjh1f5nmrqvxg6d68"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-magit-section
            emacs-magit
            emacs-markdown-mode
            emacs-ghub))
    (arguments '(#:files (:defaults "graphql")))
    (home-page
      "https://github.com/blahgeek/emacs-pr-review")
    (synopsis "Review github PR")
    (description
      "Documentation at https://melpa.org/#/pr-review")
    (license #f)))

(define-public emacs-prassee-theme
  (package
    (name "emacs-prassee-theme")
    (version "20180709.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/prassee/prassee-emacs-theme.git")
               (commit
                 "81126f69cdbaab836c00ae7a49aaf89d4229fde1")))
        (sha256
          (base32
            "18yqsl8jsi3zxfcigvm6fjcx84hzb8b3j7ihiyzqmdhmvma3i08y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/prassee/prassee-emacs-theme")
    (synopsis
      "A high contrast color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/prassee-theme")
    (license #f)))

(define-public emacs-prefab
  (package
    (name "emacs-prefab")
    (version "20220828.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LaurenceWarne/prefab.el.git")
               (commit
                 "328c763d67cd53875d729af0bcb89d412455cf60")))
        (sha256
          (base32
            "16kz5yvqbzdyxcwsic9sdjckgyb74cfb96f2kgp6zpf7k5bbx7ry"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/laurencewarne/prefab.el")
    (synopsis
      "Integration for project generation tools like cookiecutter")
    (description
      "Documentation at https://melpa.org/#/prefab")
    (license #f)))

(define-public emacs-preproc-font-lock
  (package
    (name "emacs-preproc-font-lock")
    (version "20151107.2018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/preproc-font-lock.git")
               (commit
                 "565fda9f5fdeb0598986174a07e9fb09f7604397")))
        (sha256
          (base32
            "0yrfd9qaz16nqcvjyjm9qci526qgkv6k51q5752h3iyqkxnss1pd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/preproc-font-lock")
    (synopsis
      "Highlight C-style preprocessor directives.")
    (description
      "Documentation at https://melpa.org/#/preproc-font-lock")
    (license #f)))

(define-public emacs-prescient
  (package
    (name "emacs-prescient")
    (version "20230909.2336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "37d356e105fe29d5d3c686dcae2585981299d30b")))
        (sha256
          (base32
            "0p1sipp0bbkq77far4vp2dhvhrj69izb4v5d6rhy45qv2j2d54qj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("prescient.el")))
    (home-page
      "https://github.com/raxod502/prescient.el")
    (synopsis "Better sorting and filtering")
    (description
      "Documentation at https://melpa.org/#/prescient")
    (license #f)))

(define-public emacs-preseed-generic-mode
  (package
    (name "emacs-preseed-generic-mode")
    (version "20180210.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/suntong/preseed-generic-mode.git")
               (commit
                 "3aa8806c4a659064baa01751400c53fbaf847f66")))
        (sha256
          (base32
            "02yb5xkgwqxpwghhjmxf2gx0faifi04w2jd8cvfsiwzwqmqyhmv7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/suntong/preseed-generic-mode")
    (synopsis "Debian preseed file major mode")
    (description
      "Documentation at https://melpa.org/#/preseed-generic-mode")
    (license #f)))

(define-public emacs-presentation
  (package
    (name "emacs-presentation")
    (version "20180427.224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/emacs-presentation-mode.git")
               (commit
                 "f53f67aeab97e8eea6d1f12df5f7ce3b1b03b879")))
        (sha256
          (base32
            "0hv8z5wqfg8xkx590jm4c0fjhdxy8312bvbm16ifz2vflvl6gjb2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/emacs-presentation-mode")
    (synopsis
      "Display large character for presentation")
    (description
      "Documentation at https://melpa.org/#/presentation")
    (license #f)))

(define-public emacs-prettier
  (package
    (name "emacs-prettier")
    (version "20231002.1153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jscheid/prettier.el.git")
               (commit
                 "d11bd504bb485d921e287b43bd5571469f28c40f")))
        (sha256
          (base32
            "1sw09s4v3bbqhx56y6qjfd5mcrk8s1vnk5qbjbndg4skbgh6g9kl"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-iter2 emacs-nvm emacs-editorconfig))
    (arguments
      '(#:files (:defaults "*.js" "*.base64")))
    (home-page
      "https://github.com/jscheid/prettier.el")
    (synopsis "Code formatting with Prettier")
    (description
      "Documentation at https://melpa.org/#/prettier")
    (license #f)))

(define-public emacs-prettier-js
  (package
    (name "emacs-prettier-js")
    (version "20180109.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/prettier/prettier-emacs.git")
               (commit
                 "e9b73e81d3e1642aec682195f127a42dfb0b5774")))
        (sha256
          (base32
            "0hj4fv3fgc60i6jrsx4a81s5c9fsxxafhhs3q2q1dypsscjci9ph"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/prettier/prettier-emacs")
    (synopsis
      "Minor mode to format JS code on file save")
    (description
      "Documentation at https://melpa.org/#/prettier-js")
    (license #f)))

(define-public emacs-prettier-rc
  (package
    (name "emacs-prettier-rc")
    (version "20220330.145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjuliano/prettier-rc-emacs.git")
               (commit
                 "99e40a9783299e41911f6b37156626d53e43809e")))
        (sha256
          (base32
            "0qbjrrmkm1qnmmki80didis903dmc60aacxh773xlvglyxlvgyxn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-prettier-js))
    (home-page
      "https://github.com/jjuliano/prettier-rc-emacs")
    (synopsis "Use local rc rules with prettier")
    (description
      "Documentation at https://melpa.org/#/prettier-rc")
    (license #f)))

(define-public emacs-prettify-greek
  (package
    (name "emacs-prettify-greek")
    (version "20160603.908")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fommil/emacs-prettify-greek.git")
               (commit
                 "698d07a6ffe85f6fb53f3bfec4f49380c25cfd90")))
        (sha256
          (base32
            "0g2bxa7mwfkc8navbi2w28rd4f4zqphxi13kwmd2p83g3wavd99v"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/fommil/emacs-prettify-greek")
    (synopsis "Greek letters for prettify-symbols")
    (description
      "Documentation at https://melpa.org/#/prettify-greek")
    (license #f)))

(define-public emacs-prettify-math
  (package
    (name "emacs-prettify-math")
    (version "20220101.549")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitee.com/shaqxu/prettify-math.git")
               (commit
                 "5bdb9a8af7593d3a38492a618aedc545278fe8a1")))
        (sha256
          (base32
            "1aid6z5hwrnqx2gidfwpgy6kx2v29kw2q29cnq1rbhh3w49l6m7z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (arguments
      '(#:files (:defaults "mathjax-jsonrpc.js")))
    (home-page
      "https://github.com/shaqxu/prettify-math")
    (synopsis "Prettify math formula")
    (description
      "Documentation at https://melpa.org/#/prettify-math")
    (license #f)))

(define-public emacs-pretty-hydra
  (package
    (name "emacs-pretty-hydra")
    (version "20231003.2046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jerrypnz/major-mode-hydra.el.git")
               (commit
                 "d0a5dadee97c3752fcdef113cf2ba1923972a480")))
        (sha256
          (base32
            "0waghp59ybzcgy1l0bg29qfiqps95vc062p3x80a3ksl68ylll89"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hydra
            emacs-s
            emacs-dash
            emacs-compat))
    (arguments '(#:files ("pretty-hydra.el")))
    (home-page
      "https://github.com/jerrypnz/major-mode-hydra.el")
    (synopsis
      "A macro for creating nice-looking hydras")
    (description
      "Documentation at https://melpa.org/#/pretty-hydra")
    (license #f)))

(define-public emacs-pretty-mode
  (package
    (name "emacs-pretty-mode")
    (version "20190615.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pretty-mode/pretty-mode.git")
               (commit
                 "5154355e90fdd70d3647257280a89eeb725ef084")))
        (sha256
          (base32
            "0fq3v2ld7mk8nw81vgq2jgpk8wkddk74il3gs1p0zxkly0p155i3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/akatov/pretty-mode")
    (synopsis
      "Redisplay parts of the buffer as pretty Unicode symbols.")
    (description
      "Documentation at https://melpa.org/#/pretty-mode")
    (license #f)))

(define-public emacs-pretty-sha-path
  (package
    (name "emacs-pretty-sha-path")
    (version "20141105.1826")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/pretty-sha-path.el.git")
               (commit
                 "a2b43dd9de423a38d67cda2e3bd9412f7d363257")))
        (sha256
          (base32
            "1n0594msgy53ia58gjfkm3z3cnmq52wrq5992fm28s4jgazbgdfd"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitorious.org/alezost-emacs/pretty-sha-path")
    (synopsis "Prettify Guix/Nix store paths")
    (description
      "Documentation at https://melpa.org/#/pretty-sha-path")
    (license #f)))

(define-public emacs-pretty-speedbar
  (package
    (name "emacs-pretty-speedbar")
    (version "20220303.1726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kcyarn/pretty-speedbar.git")
               (commit
                 "56dc9f114fcc55843e182cde1fc9d7a14c261c6a")))
        (sha256
          (base32
            "1hz67jhvg9n9d07lil6zqciqhh512k0fv54dl605p7vi704ma2ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kcyarn/pretty-speedbar")
    (synopsis "Make speedbar pretty")
    (description
      "Documentation at https://melpa.org/#/pretty-speedbar")
    (license #f)))

(define-public emacs-pretty-symbols
  (package
    (name "emacs-pretty-symbols")
    (version "20140814.959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drothlis/pretty-symbols.git")
               (commit
                 "582cbe51ecfe1cc0a5b185bc06113c8a661e3956")))
        (sha256
          (base32
            "1f00l9f6an1mh8yhf629mw0p37m4jcpl8giz47xbdyw1k6bqn830"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/drothlis/pretty-symbols")
    (synopsis "Draw tokens as Unicode glyphs.")
    (description
      "Documentation at https://melpa.org/#/pretty-symbols")
    (license #f)))

(define-public emacs-preview-dvisvgm
  (package
    (name "emacs-preview-dvisvgm")
    (version "20211225.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TobiasZawada/preview-dvisvgm.git")
               (commit
                 "630e2f008c4a6c67a01824b7ad6b844977b28f87")))
        (sha256
          (base32
            "1nkyxgqcwxp29prp69j5xg06am4gd3sghr0j7r7ws3q85rq197xf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/TobiasZawada/preview-dvisvgm")
    (synopsis "SVG output for LaTeX preview")
    (description
      "Documentation at https://melpa.org/#/preview-dvisvgm")
    (license #f)))

(define-public emacs-prism
  (package
    (name "emacs-prism")
    (version "20230524.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/prism.el.git")
               (commit
                 "169b49afa91e69d35b8756df49ed3ca06f418d35")))
        (sha256
          (base32
            "0n2gf7302hqdnhsax1y3ahksfmmpd8cmiv1zgb7rjg8qhcs0iqp2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/alphapapa/prism.el")
    (synopsis
      "Customizable, depth-based syntax coloring")
    (description
      "Documentation at https://melpa.org/#/prism")
    (license #f)))

(define-public emacs-prisma-ts-mode
  (package
    (name "emacs-prisma-ts-mode")
    (version "20231022.1802")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/prisma-ts-mode.git")
               (commit
                 "a7029980140ae60612ef876efa17ab81bf4b3add")))
        (sha256
          (base32
            "0isym89c4432qrdzpbmg85pw97jw6lvbz9sdv1xy08c448dydg79"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nverno/prisma-ts-mode")
    (synopsis
      "Major mode for prisma using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/prisma-ts-mode")
    (license #f)))

(define-public emacs-private
  (package
    (name "emacs-private")
    (version "20150122.157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/private.git")
               (commit
                 "9266d01c095895cc3ee9de95bc20511e88353755")))
        (sha256
          (base32
            "0zng64f5vwnpkf9fk59yv1ndc646q608a6awr1y9qk0mhzbfzhqm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-aes))
    (home-page "https://github.com/cheunghy/private")
    (synopsis
      "take care of your private configuration files.")
    (description
      "Documentation at https://melpa.org/#/private")
    (license #f)))

(define-public emacs-private-comments-mode
  (package
    (name "emacs-private-comments-mode")
    (version "20220929.1807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/masukomi/private-comments-mode.git")
               (commit
                 "d625af361c6f23d3ad79c238721ea04ec3768d18")))
        (sha256
          (base32
            "05j5ll50j6hc0850cd6fim3ka1kazizg1pxxwf3qgl748259ww20"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/masukomi/private-comments-mode")
    (synopsis
      "Minor mode for masukomi/private_comments")
    (description
      "Documentation at https://melpa.org/#/private-comments-mode")
    (license #f)))

(define-public emacs-private-diary
  (package
    (name "emacs-private-diary")
    (version "20151216.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cacology/private-diary.git")
               (commit
                 "0c86fb6150ad8ed14f94def3504f5a68f4147283")))
        (sha256
          (base32
            "1pxr5a9ik09k0f58lawhxiv179n5j8q24zhrs9vjk93yskl1ydwn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cacology/private-diary")
    (synopsis "maintain a private diary in Emacs")
    (description
      "Documentation at https://melpa.org/#/private-diary")
    (license #f)))

(define-public emacs-proc-net
  (package
    (name "emacs-proc-net")
    (version "20130322.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-proc-net.git")
               (commit
                 "10861112a1f3994c8e6374d6c5bb5d734cfeaf73")))
        (sha256
          (base32
            "0nly5h0d6w8dc08ifb2fiqcn4cqcn9crkh2wn0jzlz4zd2x75qrb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nicferrier/emacs-procnet")
    (synopsis "network process tools")
    (description
      "Documentation at https://melpa.org/#/proc-net")
    (license #f)))

(define-public emacs-proced-narrow
  (package
    (name "emacs-proced-narrow")
    (version "20190911.1818")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/travisjeffery/proced-narrow.git")
               (commit
                 "0e2a4dfb072eb0369d0020b429e820ae620d325e")))
        (sha256
          (base32
            "0d1qq5606prls7mzy0iri41j2c14l4axz6kq629r4wjdqwshxkli"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/travisjeffery/proced-narrow")
    (synopsis
      "Live-narrowing of search results for proced.")
    (description
      "Documentation at https://melpa.org/#/proced-narrow")
    (license #f)))

(define-public emacs-processing-mode
  (package
    (name "emacs-processing-mode")
    (version "20171022.2302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/processing2-emacs.git")
               (commit
                 "448aba82970c98322629eaf2746e73be6c30c98e")))
        (sha256
          (base32
            "1fv74k37yyrh6jzasgqj88lrbq152gs9gpbjpxn7fz424c38gq2q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("processing-mode.el")))
    (home-page
      "https://github.com/ptrv/processing2-emacs")
    (synopsis "Major mode for Processing 2.0")
    (description
      "Documentation at https://melpa.org/#/processing-mode")
    (license #f)))

(define-public emacs-processing-snippets
  (package
    (name "emacs-processing-snippets")
    (version "20140426.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/processing2-emacs.git")
               (commit
                 "448aba82970c98322629eaf2746e73be6c30c98e")))
        (sha256
          (base32
            "1fv74k37yyrh6jzasgqj88lrbq152gs9gpbjpxn7fz424c38gq2q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("processing-snippets.el" "snippets")))
    (home-page
      "https://github.com/ptrv/processing2-emacs")
    (synopsis "Snippets for processing-mode")
    (description
      "Documentation at https://melpa.org/#/processing-snippets")
    (license #f)))

(define-public emacs-prodigy
  (package
    (name "emacs-prodigy")
    (version "20230925.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/prodigy.el.git")
               (commit
                 "cc68fa9d604a0739a63247237a801b03a184aca6")))
        (sha256
          (base32
            "0g032xq19g5k29wypbk7klhkf602r3ih3ypq7h5zpd1gknkcqlbp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page "http://github.com/rejeep/prodigy.el")
    (synopsis "Manage external services")
    (description
      "Documentation at https://melpa.org/#/prodigy")
    (license #f)))

(define-public emacs-professional-theme
  (package
    (name "emacs-professional-theme")
    (version "20150315.1100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juanjux/emacs-professional-theme.git")
               (commit
                 "0927d1474049a193f9f366bde5eb1887b9ba20ed")))
        (sha256
          (base32
            "0hx7rxa3smdippcpj4j63k0r5l4wflllb0vpnwwknc9j93r7042b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juanjux/emacs-professional-theme")
    (synopsis
      "Emacs port of Vim's professional theme")
    (description
      "Documentation at https://melpa.org/#/professional-theme")
    (license #f)))

(define-public emacs-prog-face-refine
  (package
    (name "emacs-prog-face-refine")
    (version "20230710.113")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/prog-face-refine-"
               version
               ".tar"))
        (sha256
          (base32
            "076aam3fya2sfqiyl2mpv0cx7ywb52jbx720prszh13ai9p6lw8s"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-prog-face-refine")
    (synopsis "Refine faces for programming modes")
    (description
      "Documentation at https://melpa.org/#/prog-face-refine")
    (license #f)))

(define-public emacs-prog-fill
  (package
    (name "emacs-prog-fill")
    (version "20180607.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/prog-fill.git")
               (commit
                 "3fbf7da6dd826e95c9077d659566ee29814a31d8")))
        (sha256
          (base32
            "167is1hbv3nsskz26g9q3zdndqsw9d3rwhbasj0r7a3wabpr8j4r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ahungry/prog-fill")
    (synopsis
      "Smartly format lines to use vertical space.")
    (description
      "Documentation at https://melpa.org/#/prog-fill")
    (license #f)))

(define-public emacs-prognth
  (package
    (name "emacs-prognth")
    (version "20130920.1759")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/prognth.git")
               (commit
                 "2f1ca4d34b1fd581163e1df122c85418137e8e62")))
        (sha256
          (base32
            "1szxsbk470fg3jp70r20va9hnnf4jj0mb7kxdkn6rd7ky6w34lwm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Extend prog1 to arbitrary index")
    (description
      "Documentation at https://melpa.org/#/prognth")
    (license #f)))

(define-public emacs-programmer-dvorak
  (package
    (name "emacs-programmer-dvorak")
    (version "20150427.137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yangchenyun/programmer-dvorak.git")
               (commit
                 "3288a8f058eca4cab390a564babbbcb17cfa0350")))
        (sha256
          (base32
            "1yklm43d0ppyf4simhqab6m892z4mmxs2145lzw6kpizixavcv00"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yangchenyun/programmer-dvorak")
    (synopsis "Input method for Programmer Dvorak.")
    (description
      "Documentation at https://melpa.org/#/programmer-dvorak")
    (license #f)))

(define-public emacs-project-abbrev
  (package
    (name "emacs-project-abbrev")
    (version "20220704.658")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/project-abbrev.git")
               (commit
                 "5c35af3e456f1300f0e170d74da87e563b6cc222")))
        (sha256
          (base32
            "190g3iqzb2kv3z59b4zbf110g8yzxx64ml1c6ix194w76faghxix"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/project-abbrev")
    (synopsis
      "Customize abbreviation expansion in the project")
    (description
      "Documentation at https://melpa.org/#/project-abbrev")
    (license #f)))

(define-public emacs-project-explorer
  (package
    (name "emacs-project-explorer")
    (version "20150504.14")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/project-explorer.git")
               (commit
                 "589a09008706f5f4ef91393dc4306eede0d15ca9")))
        (sha256
          (base32
            "04l4m3kxbwvyw9xy6cwakrdxxdswrrs7sya8zn6m738aawbr1mcd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-es-lib emacs-es-windows))
    (home-page
      "https://github.com/sabof/project-explorer")
    (synopsis "A project explorer sidebar")
    (description
      "Documentation at https://melpa.org/#/project-explorer")
    (license #f)))

(define-public emacs-project-mode-line-tag
  (package
    (name "emacs-project-mode-line-tag")
    (version "20220720.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/project-mode-line-tag.git")
               (commit
                 "509ac9a01cd344ee9bfa1bfebed6565dd4cfedd7")))
        (sha256
          (base32
            "0a256hcjyl7qlx08bfqcsacl3kpwgzdf458p4r1sxrwd0b1lz1g9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/project-mode-line-tag")
    (synopsis
      "Display a buffer's project in its mode line")
    (description
      "Documentation at https://melpa.org/#/project-mode-line-tag")
    (license #f)))

(define-public emacs-project-persist
  (package
    (name "emacs-project-persist")
    (version "20180906.1302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/project-persist.git")
               (commit
                 "26d9435bef44da2a1b0892eba822f9f487b98eec")))
        (sha256
          (base32
            "0ja2pnbw11a2gwywfyfbdpk8rkm8imy04wkshpnlh0nwn7lf0clm"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("lib/*")))
    (home-page
      "https://github.com/rdallasgray/project-persist")
    (synopsis
      "A minor mode to allow loading and saving of project settings.")
    (description
      "Documentation at https://melpa.org/#/project-persist")
    (license #f)))

(define-public emacs-project-persist-drawer
  (package
    (name "emacs-project-persist-drawer")
    (version "20151108.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rdallasgray/project-persist-drawer.git")
               (commit
                 "35bbe132a4fab6a0fec15ce6c0fd2fe6a4aa9626")))
        (sha256
          (base32
            "1nq320ph8fs9a197ji4mnw2xa24dld0r1nka476yvkg4azmcc9x8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-project-persist))
    (arguments '(#:files ("lib/*")))
    (home-page
      "https://github.com/rdallasgray/project-persist-drawer.git")
    (synopsis
      "Use a project drawer with project-persist.")
    (description
      "Documentation at https://melpa.org/#/project-persist-drawer")
    (license #f)))

(define-public emacs-project-rootfile
  (package
    (name "emacs-project-rootfile")
    (version "20220708.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/project-rootfile.el.git")
               (commit
                 "b37b6a4d2943bd63f9931f8fe6cc2af8b27fcde4")))
        (sha256
          (base32
            "1rl39m9m5q41cn9jcvvdqmb53f5r6afwr5casd04kk5dqr84x2g4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/buzztaiki/project-rootfile.el")
    (synopsis
      "Extension of project.el to detect project with root file")
    (description
      "Documentation at https://melpa.org/#/project-rootfile")
    (license #f)))

(define-public emacs-project-shells
  (package
    (name "emacs-project-shells")
    (version "20231005.641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hying-caritas/project-shells.git")
               (commit
                 "15f70d99b6d5f078f490ceb64b6f13c000b37e24")))
        (sha256
          (base32
            "0lmlky8nk7rd4j4f9fl9yc2prwx6hxrkmmwchdhp6grdg2jjacw2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hying-caritas/project-shells")
    (synopsis
      "Manage the shell buffers of each project")
    (description
      "Documentation at https://melpa.org/#/project-shells")
    (license #f)))

(define-public emacs-project-tab-groups
  (package
    (name "emacs-project-tab-groups")
    (version "20220720.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/project-tab-groups.git")
               (commit
                 "2d348279876f3073176048d903f9672f3c933ca5")))
        (sha256
          (base32
            "05in97rym6nc91nyshbdk4i1g013gsgzgs5r5nhsshpa9glwpv55"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/project-tab-groups")
    (synopsis
      "Support a \"one tab group per project\" workflow")
    (description
      "Documentation at https://melpa.org/#/project-tab-groups")
    (license #f)))

(define-public emacs-project-tasks
  (package
    (name "emacs-project-tasks")
    (version "20230808.314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/project-tasks.git")
               (commit
                 "36b7b9e3acb3399aec6c8ef89bf389a12fc87600")))
        (sha256
          (base32
            "1fwwh709ff660ii43nd0prq2jcc8gmn1v8sg9jki00xn9yas8hsi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TxGVNN/project-tasks")
    (synopsis
      "Efficient task management for your project")
    (description
      "Documentation at https://melpa.org/#/project-tasks")
    (license #f)))

(define-public emacs-project-treemacs
  (package
    (name "emacs-project-treemacs")
    (version "20230529.1207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmccloud/project-treemacs.git")
               (commit
                 "328869011f5b405e562769a6b423481c33a5da85")))
        (sha256
          (base32
            "1igwl0j6ji09hw3cigx86g0rcsnik11bwfzfba82w31n5g163w63"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-treemacs))
    (home-page
      "https://github.com/cmccloud/project-treemacs")
    (synopsis
      "Simple treemacs backend for project.el")
    (description
      "Documentation at https://melpa.org/#/project-treemacs")
    (license #f)))

(define-public emacs-projectile
  (package
    (name "emacs-projectile")
    (version "20231013.1509")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/projectile.git")
               (commit
                 "9446ea92d28462aeb37846a8be0a0c97a7bc0cee")))
        (sha256
          (base32
            "04v66sqp3fwknswywlr2nv088dv1pvyh5pzw91mhp7dngvai1nfz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bbatsov/projectile")
    (synopsis
      "Manage and navigate projects in Emacs easily")
    (description
      "Documentation at https://melpa.org/#/projectile")
    (license #f)))

(define-public emacs-projectile-codesearch
  (package
    (name "emacs-projectile-codesearch")
    (version "20180508.1522")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-codesearch.git")
               (commit
                 "f6eb96f034a925444412cfa03e45e0ccbbafe3f2")))
        (sha256
          (base32
            "1xdkm1f04z1h3ivd6zm8hckf3n3fbi5rwybg4dwi5mim6w84i7j9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-codesearch emacs-projectile))
    (arguments
      '(#:files ("projectile-codesearch.el")))
    (home-page
      "https://github.com/abingham/emacs-codesearch")
    (synopsis
      "Integration of codesearch into projectile")
    (description
      "Documentation at https://melpa.org/#/projectile-codesearch")
    (license #f)))

(define-public emacs-projectile-git-autofetch
  (package
    (name "emacs-projectile-git-autofetch")
    (version "20200820.2028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andrmuel/projectile-git-autofetch.git")
               (commit
                 "423ed5fa6508c4edc0a837bb585c7e77e99876be")))
        (sha256
          (base32
            "18z8ik1wgrs57j52pjc7pq1z09c5xz0mxwjz0w37fk0iyhirchd4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "https://github.com/andrmuel/projectile-git-autofetch")
    (synopsis "automatically fetch git repositories")
    (description
      "Documentation at https://melpa.org/#/projectile-git-autofetch")
    (license #f)))

(define-public emacs-projectile-rails
  (package
    (name "emacs-projectile-rails")
    (version "20221231.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/projectile-rails.git")
               (commit
                 "701784df7befe17b861f1b53fe9cbc59d0b94b9f")))
        (sha256
          (base32
            "14lmasn46v4gsqciiqr2dr3xq73y0skdinmjsarlhjd0syw66sk4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-inflections
            emacs-inf-ruby
            emacs-f
            emacs-rake
            emacs-dash))
    (home-page
      "https://github.com/asok/projectile-rails")
    (synopsis
      "Minor mode for Rails projects based on projectile-mode")
    (description
      "Documentation at https://melpa.org/#/projectile-rails")
    (license #f)))

(define-public emacs-projectile-ripgrep
  (package
    (name "emacs-projectile-ripgrep")
    (version "20221013.541")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/ripgrep.el.git")
               (commit
                 "b6bd5beb0c11348f1afd9486cbb451d0d2e3c45a")))
        (sha256
          (base32
            "0wi7kx98c80vja6hs509d3jg96h5lk1wdldz6qiz5arijbcl3n9z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ripgrep emacs-projectile))
    (arguments '(#:files ("projectile-ripgrep.el")))
    (home-page
      "https://github.com/nlamirault/ripgrep.el")
    (synopsis "Run ripgrep with Projectile")
    (description
      "Documentation at https://melpa.org/#/projectile-ripgrep")
    (license #f)))

(define-public emacs-projectile-sift
  (package
    (name "emacs-projectile-sift")
    (version "20160107.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/sift.el.git")
               (commit
                 "cdddba2d183146c340915003f1b5d09d13712c22")))
        (sha256
          (base32
            "0ln87nhq2vhsb0ywn7rp0b3hzms5z7l6cv6dng08yly12r2957if"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sift emacs-projectile))
    (arguments '(#:files ("projectile-sift.el")))
    (home-page
      "https://github.com/nlamirault/sift.el")
    (synopsis "Run a sift with Projectile")
    (description
      "Documentation at https://melpa.org/#/projectile-sift")
    (license #f)))

(define-public emacs-projectile-speedbar
  (package
    (name "emacs-projectile-speedbar")
    (version "20190807.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anshulverma/projectile-speedbar.git")
               (commit
                 "93320e467ee78772065e599a5dba94889a77db22")))
        (sha256
          (base32
            "1byk8ylm6c922jsaa8lg8wk17qjnhh7p26lp2h0nbl7qdz928ss8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-sr-speedbar))
    (home-page
      "https://github.com/anshulverma/projectile-speedbar")
    (synopsis "projectile integration for speedbar")
    (description
      "Documentation at https://melpa.org/#/projectile-speedbar")
    (license #f)))

(define-public emacs-projectile-trailblazer
  (package
    (name "emacs-projectile-trailblazer")
    (version "20170928.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/micdahl/projectile-trailblazer.git")
               (commit
                 "a37a4f7b7f727d98e4c74c0256e059e84263553d")))
        (sha256
          (base32
            "1njs2aps4mlbnnfjkfwrb8vy8lg6lyxzxkxpscv91la7yf3wpc3g"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile
            emacs-inflections
            emacs-inf-ruby
            emacs-f
            emacs-rake))
    (home-page
      "https://github.com/micdahl/projectile-trailblazer")
    (synopsis
      "Minor mode for Rails projects using trailblazer")
    (description
      "Documentation at https://melpa.org/#/projectile-trailblazer")
    (license #f)))

(define-public emacs-projectile-variable
  (package
    (name "emacs-projectile-variable")
    (version "20230916.441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/projectile-variable.git")
               (commit
                 "fa6bf595529156ee3b6d08f90ebea3b4ab7c5ef8")))
        (sha256
          (base32
            "19sdqvka8a4rwd5dfcxc4hhipl7cf5c3gg9gqy84vzbdqvlhr6x3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-php/projectile-variable")
    (synopsis "Store project local variables.")
    (description
      "Documentation at https://melpa.org/#/projectile-variable")
    (license #f)))

(define-public emacs-projection
  (package
    (name "emacs-projection")
    (version "20231016.1934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/projection.git")
               (commit
                 "89020b23ae607944b1e1071ffbd123a6003fa2cb")))
        (sha256
          (base32
            "1x71w70316j8apflfxz91gjz0364hd4551gj99813b51f9ww9zly"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat emacs-f emacs-s))
    (arguments '(#:files (:defaults "src/*.el")))
    (home-page
      "https://github.com/mohkale/projection")
    (synopsis "Project type support for `project'")
    (description
      "Documentation at https://melpa.org/#/projection")
    (license #f)))

(define-public emacs-projection-multi
  (package
    (name "emacs-projection-multi")
    (version "20231016.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/projection.git")
               (commit
                 "89020b23ae607944b1e1071ffbd123a6003fa2cb")))
        (sha256
          (base32
            "1x71w70316j8apflfxz91gjz0364hd4551gj99813b51f9ww9zly"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projection emacs-compile-multi))
    (arguments
      '(#:files ("src/projection-multi/*.el")))
    (home-page
      "https://github.com/mohkale/projection")
    (synopsis
      "Projection integration for `compile-multi'")
    (description
      "Documentation at https://melpa.org/#/projection-multi")
    (license #f)))

(define-public emacs-projection-multi-embark
  (package
    (name "emacs-projection-multi-embark")
    (version "20231008.937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mohkale/projection.git")
               (commit
                 "928602ddd3003913cfefe343b5f057bfa360c0fe")))
        (sha256
          (base32
            "08p8igrlbzvw6h8j066nh7yvxgqzi9csjzbjhv34csasfd14mznx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projection
            emacs-compile-multi-embark))
    (arguments
      '(#:files
        ("src/projection-multi-embark/projection-multi-embark*.el")))
    (home-page
      "https://github.com/mohkale/projection")
    (synopsis
      "Integration for `projection-multi' and `embark'")
    (description
      "Documentation at https://melpa.org/#/projection-multi-embark")
    (license #f)))

(define-public emacs-projector
  (package
    (name "emacs-projector")
    (version "20211112.1514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/waymondo/projector.el.git")
               (commit
                 "1d0f2d307591ea50888d31dcae7e463e2ada1316")))
        (sha256
          (base32
            "0psmb4bsnm9wws8g3v2n78hkih6b80lzbv5v52640v94w74hfdp5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page
      "https://github.com/waymondo/projector.el")
    (synopsis
      "Lightweight library for managing project-aware shell and command buffers")
    (description
      "Documentation at https://melpa.org/#/projector")
    (license #f)))

(define-public emacs-projekt
  (package
    (name "emacs-projekt")
    (version "20150324.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tekai/projekt.git")
               (commit
                 "a65e554e5d8b0def08c5d06f3fe34fec40bebd83")))
        (sha256
          (base32
            "0hvvlh24157qjxz82sbg22d4cbrf95xyx202cybp0n1vyxsmjcmw"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "some kind of staging for CVS")
    (description
      "Documentation at https://melpa.org/#/projekt")
    (license #f)))

(define-public emacs-projmake-mode
  (package
    (name "emacs-projmake-mode")
    (version "20161031.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ericbmerritt/projmake-mode.git")
               (commit
                 "a897701f7e8f8cc11459ed44eb0e454db2a460c1")))
        (sha256
          (base32
            "0las0xl4af6sn5pbllq16abw2hj1kswwpkyi6lf31sbwr5wnq4qb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-indicators))
    (arguments '(#:files ("src/*.el")))
    (home-page "unspecified")
    (synopsis
      "Project oriented automatic builder and error highlighter, flymake for projects")
    (description
      "Documentation at https://melpa.org/#/projmake-mode")
    (license #f)))

(define-public emacs-prometheus-mode
  (package
    (name "emacs-prometheus-mode")
    (version "20230522.2358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/peterhoeg/prometheus-mode.git")
               (commit
                 "7d7d9111f785d63873fbf58de7c0f01f0d30cea9")))
        (sha256
          (base32
            "1cswykrbh1r5i50c9f72g9xd2qjlzrz35gwaprhy1c8vc2mqq265"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/peterhoeg/prometheus-mode")
    (synopsis "Major modes for Prometheus files")
    (description
      "Documentation at https://melpa.org/#/prometheus-mode")
    (license #f)))

(define-public emacs-promise
  (package
    (name "emacs-promise")
    (version "20210307.727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chuntaro/emacs-promise.git")
               (commit
                 "cec51feb5f957e8febe6325335cf57dc2db6be30")))
        (sha256
          (base32
            "1kxsdgg5byw9zddf8jkc3h87mb4k5pnjdpskaagkahc0xg3w18d7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/chuntaro/emacs-promise")
    (synopsis "Promises/A+")
    (description
      "Documentation at https://melpa.org/#/promise")
    (license #f)))

(define-public emacs-prompt-text
  (package
    (name "emacs-prompt-text")
    (version "20190408.310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/prompt-text-el.git")
               (commit
                 "f51cf3d7f08ab8946e9869f7de2082536e45cc22")))
        (sha256
          (base32
            "0aqp53l74ivh7vzxgbxcf1nck9jaj5lcdz59ymx78rf3c0v0sk1f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/prompt-text-el")
    (synopsis "Configure your minibuffer prompt")
    (description
      "Documentation at https://melpa.org/#/prompt-text")
    (license #f)))

(define-public emacs-prompts
  (package
    (name "emacs-prompts")
    (version "20160916.1041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GuiltyDolphin/prompts.el.git")
               (commit
                 "1cd5e732ff2a86b47836eb7252e5b59cd4b6ab26")))
        (sha256
          (base32
            "10y8x54p64zs1jlq4nf1kixpb42078n2gdf9s62b1siyb1vhl581"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/guiltydolphin/prompts.el")
    (synopsis
      "utilities for working with text prompts.")
    (description
      "Documentation at https://melpa.org/#/prompts")
    (license #f)))

(define-public emacs-pronto
  (package
    (name "emacs-pronto")
    (version "20200218.1633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julianrubisch/pronto.el.git")
               (commit
                 "c2a2ec718c08de1fd2e681970456786cf4eac8fe")))
        (sha256
          (base32
            "1xgkl263iyrdin6mdlmvswr411qyciskasa2jbqi84ffiw83313m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/julianrubisch/pronto.el")
    (synopsis
      "Compilation mode for pronto stylechecks")
    (description
      "Documentation at https://melpa.org/#/pronto")
    (license #f)))

(define-public emacs-proof-general
  (package
    (name "emacs-proof-general")
    (version "20231005.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ProofGeneral/PG.git")
               (commit
                 "aaad87da485570d781425a0a7c9597a85de0775e")))
        (sha256
          (base32
            "1b8hjs8g3l9czzj3pw0vwskmjfs8lxqn1m61a8mwrcyzk8dxdvlw"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "CHANGES"
          "AUTHORS"
          "COPYING"
          "generic"
          "images"
          "lib"
          ("coq" "coq/*.el")
          "easycrypt"
          "phox"
          "qrhl"
          "pghaskell"
          "pgocaml"
          "pgshell")))
    (home-page "https://proofgeneral.github.io/")
    (synopsis
      "A generic Emacs interface for proof assistants")
    (description
      "Documentation at https://melpa.org/#/proof-general")
    (license #f)))

(define-public emacs-prop-menu
  (package
    (name "emacs-prop-menu")
    (version "20150728.1118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/prop-menu-el.git")
               (commit
                 "50b102c1c0935fd3e0c465feed7f27d66b21cdf3")))
        (sha256
          (base32
            "18ap2liz5r5a8ja2zz9182fnfm47jnsbyblpq859zks356k37iwc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/david-christiansen/prop-menu-el")
    (synopsis
      "Create and display a context menu based on text and overlay properties")
    (description
      "Documentation at https://melpa.org/#/prop-menu")
    (license #f)))

(define-public emacs-propfont-mixed
  (package
    (name "emacs-propfont-mixed")
    (version "20150113.2211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ikirill/propfont-mixed.git")
               (commit
                 "0b461ef4754a469610dba71874a34b6da42176bf")))
        (sha256
          (base32
            "0lch20njy248w7bnvgs7jz0zqasskf5dakmykxwpb48llm6kx95v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ikirill/propfont-mixed")
    (synopsis
      "Use proportional fonts with space-based indentation.")
    (description
      "Documentation at https://melpa.org/#/propfont-mixed")
    (license #f)))

(define-public emacs-proportional
  (package
    (name "emacs-proportional")
    (version "20221205.1417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ksjogo/proportional.git")
               (commit
                 "6b675694292a5dbebb52b6196e8ccee6e3a73042")))
        (sha256
          (base32
            "098252kjmq2cadz2rnjla9f8636ak8n6qj0axp4l7h4wvf618pzi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ksjogo/proportional")
    (synopsis "use a proportional font everywhere")
    (description
      "Documentation at https://melpa.org/#/proportional")
    (license #f)))

(define-public emacs-prosjekt
  (package
    (name "emacs-prosjekt")
    (version "20151127.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/prosjekt.git")
               (commit
                 "a864a8be5842223043702395f311e3350c28e9db")))
        (sha256
          (base32
            "1m8zvrv5aws7b0dffk8y6b5mncdk2c4k90mx69jys10fs0gc5hb3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments
      '(#:files ("prosjekt/*.el" "prosjekt/ext/*.el")))
    (home-page
      "https://github.com/abingham/prosjekt")
    (synopsis "a software project tool for emacs")
    (description
      "Documentation at https://melpa.org/#/prosjekt")
    (license #f)))

(define-public emacs-protobuf-mode
  (package
    (name "emacs-protobuf-mode")
    (version "20231101.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/protocolbuffers/protobuf.git")
               (commit
                 "ecc2bac63875b4291900f73dfe2c1f836c5b53b6")))
        (sha256
          (base32
            "0zivjc23a3km6bdpb0lhnrh6yavnd33vh97jx33cv6bgqpj17qh6"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("editors/protobuf-mode.el")))
    (home-page "unspecified")
    (synopsis
      "major mode for editing protocol buffers.")
    (description
      "Documentation at https://melpa.org/#/protobuf-mode")
    (license #f)))

(define-public emacs-protobuf-ts-mode
  (package
    (name "emacs-protobuf-ts-mode")
    (version "20230728.1747")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/protobuf-ts-mode-"
               version
               ".tar"))
        (sha256
          (base32
            "1s8i2gkrw96l29zwp4l3hbxfvwlah587brkcvl83aj60gkw1vf91"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.ookami.one/cgit/protobuf-ts-mode")
    (synopsis
      "Tree sitter support for Protocol Buffers (proto3 only)")
    (description
      "Documentation at https://melpa.org/#/protobuf-ts-mode")
    (license #f)))

(define-public emacs-protocols
  (package
    (name "emacs-protocols")
    (version "20170802.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/protocols.el.git")
               (commit
                 "d0f7c4acb05465f1a0d4be54363bbd2802647e77")))
        (sha256
          (base32
            "1xg3pwsnzn795bz299x273ral2jrz2v3p9r6gjm4dcx5pm3348mj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/protocols.el")
    (synopsis "Protocol database access functions.")
    (description
      "Documentation at https://melpa.org/#/protocols")
    (license #f)))

(define-public emacs-proxy-mode
  (package
    (name "emacs-proxy-mode")
    (version "20230303.706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/proxy-mode.git")
               (commit
                 "eca6f0b8a17fcf9eb961ed0426f57a5b7ca4e1f6")))
        (sha256
          (base32
            "0mmlkci81m116gvak6z7pi8yskbl62209y3h7h3lfjb30jx77zww"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/proxy-mode.git")
    (synopsis "A minor mode to toggle proxy.")
    (description
      "Documentation at https://melpa.org/#/proxy-mode")
    (license #f)))

(define-public emacs-psalm
  (package
    (name "emacs-psalm")
    (version "20230914.1925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/psalm.el.git")
               (commit
                 "9449c09b8d570705aa74b5aef7651893b482cc66")))
        (sha256
          (base32
            "0mji3msxarqa24fb1q68cc07ihn9ffn50w86pc636yq8fwk8nwmw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-php-mode))
    (arguments '(#:files ("psalm.el")))
    (home-page
      "https://github.com/emacs-php/psalm.el")
    (synopsis "Interface to Psalm")
    (description
      "Documentation at https://melpa.org/#/psalm")
    (license #f)))

(define-public emacs-psc-ide
  (package
    (name "emacs-psc-ide")
    (version "20210219.2247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purescript-emacs/psc-ide-emacs.git")
               (commit
                 "ce97d719458ea099b40c02f05b6609601c727e66")))
        (sha256
          (base32
            "0xfw93pdf744h2yswc53qwyawfzkc31rv8dmha3irq7k1nklhq6y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-company
            emacs-s
            emacs-flycheck))
    (home-page
      "https://github.com/purescript-emacs/psc-ide-emacs")
    (synopsis
      "Minor mode for PureScript's IDE server.")
    (description
      "Documentation at https://melpa.org/#/psc-ide")
    (license #f)))

(define-public emacs-psci
  (package
    (name "emacs-psci")
    (version "20230313.1333")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purescript-emacs/emacs-psci.git")
               (commit
                 "9bb6a325325480be704130c9c69731631d2cf3a6")))
        (sha256
          (base32
            "07snrszm4lzdpv8k3mxsx3s9xz3n52g9ixxxwnhfa60hisb0i0x7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-purescript-mode emacs-dash))
    (home-page
      "https://github.com/purescript-emacs/emacs-psci")
    (synopsis "Major mode for purescript repl psci")
    (description
      "Documentation at https://melpa.org/#/psci")
    (license #f)))

(define-public emacs-psession
  (package
    (name "emacs-psession")
    (version "20231107.735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/psession.git")
               (commit
                 "76101f8a5afe705e4a815ab51b87aff03a64cb91")))
        (sha256
          (base32
            "1ylcqf882n2mzixs5r7r4fzyngic6spff9yc8mz5rvg4l4633qdl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://github.com/thierryvolpiatto/psession")
    (synopsis "Persistent save of elisp objects.")
    (description
      "Documentation at https://melpa.org/#/psession")
    (license #f)))

(define-public emacs-psysh
  (package
    (name "emacs-psysh")
    (version "20230815.730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/psysh.el.git")
               (commit
                 "8bf82fa68ca90fc72528ea406f0e57718bcb1cbf")))
        (sha256
          (base32
            "0ssbzw7g24i60qghrlz57kma691k2lq16bz1c6wxc3y8zqjn5hvk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-php-runtime))
    (home-page
      "https://github.com/emacs-php/psysh.el")
    (synopsis "PsySH, PHP interactive shell (REPL)")
    (description
      "Documentation at https://melpa.org/#/psysh")
    (license #f)))

(define-public emacs-pt
  (package
    (name "emacs-pt")
    (version "20161226.1959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bling/pt.el.git")
               (commit
                 "6d99b2aaded3ece3db19a20f4b8f1d4abe382622")))
        (sha256
          (base32
            "1vi97hgwrf7n8vsbkvvhn398m20755jnbbbz4kxgqfmcgpimc8nc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/bling/pt.el")
    (synopsis
      "A front-end for pt, The Platinum Searcher.")
    (description
      "Documentation at https://melpa.org/#/pt")
    (license #f)))

(define-public emacs-ptemplate
  (package
    (name "emacs-ptemplate")
    (version "20210324.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbfalcon/ptemplate.git")
               (commit
                 "b81cc7be8865745c3a60177a244d2a69729ab21b")))
        (sha256
          (base32
            "1j6lgb7knnnydyd1jryai8vlr7i5jc2d7l693yyhs79jdypzss4c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (home-page
      "https://github.com/nbfalcon/ptemplate")
    (synopsis "Project templates")
    (description
      "Documentation at https://melpa.org/#/ptemplate")
    (license #f)))

(define-public emacs-ptemplate-templates
  (package
    (name "emacs-ptemplate-templates")
    (version "20210324.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nbfalcon/ptemplate-templates.git")
               (commit
                 "3788387973dde3101f9a3f2064572be033c59ad6")))
        (sha256
          (base32
            "17jc7gjawbj7b5v2i2jfxwnjgi023xrr28dyigzv6yw72fzqcnlh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ptemplate))
    (arguments '(#:files ("*.el" "rsc")))
    (home-page
      "https://github.com/nbfalcon/ptemplate-templates")
    (synopsis "Official templates")
    (description
      "Documentation at https://melpa.org/#/ptemplate-templates")
    (license #f)))

(define-public emacs-ptree
  (package
    (name "emacs-ptree")
    (version "20221106.1649")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha-catharsis/ptree.git")
               (commit
                 "23cb9093f99b9869606f8d54fa5c45ea35fcc789")))
        (sha256
          (base32
            "0vxji487f1yfffjs8vgi8f4l2ssj3n26lr2sx5xzdj70x2w5rz04"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alpha-catharsis/ptree")
    (synopsis "Property tree data structure")
    (description
      "Documentation at https://melpa.org/#/ptree")
    (license #f)))

(define-public emacs-pubmed
  (package
    (name "emacs-pubmed")
    (version "20221023.930")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fvdbeek/emacs-pubmed.git")
               (commit
                 "b2fbc124cabf0d373845763adf882e9d89ff5daa")))
        (sha256
          (base32
            "05j4nhn2bgacc54pvmkhwgdsmzxzkcfn49a12k43wckrrf3izbqf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-esxml emacs-s emacs-unidecode))
    (home-page
      "https://gitlab.com/fvdbeek/emacs-pubmed")
    (synopsis "Interface to PubMed")
    (description
      "Documentation at https://melpa.org/#/pubmed")
    (license #f)))

(define-public emacs-pueue
  (package
    (name "emacs-pueue")
    (version "20230219.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xFA25E/pueue.git")
               (commit
                 "386e43d46cbf68470d040b422061ac2ba1629749")))
        (sha256
          (base32
            "0bjshh7k21s14cbbq10ra7dnxw8df8y3447z1icw554jqzmgxm9v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-with-editor))
    (home-page "https://github.com/xFA25E/pueue")
    (synopsis "Interface for pueue")
    (description
      "Documentation at https://melpa.org/#/pueue")
    (license #f)))

(define-public emacs-pug-mode
  (package
    (name "emacs-pug-mode")
    (version "20211114.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-pug-mode.git")
               (commit
                 "73f8c2f95eba695f701df20c8436f49abadebdc1")))
        (sha256
          (base32
            "0kjjwyxdbaaagjd0zmav2xj4075c8qcs33x29zpyqfxwj4410gp3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hlissner/emacs-pug-mode")
    (synopsis
      "Major mode for jade/pug template files")
    (description
      "Documentation at https://melpa.org/#/pug-mode")
    (license #f)))

(define-public emacs-pulseaudio-control
  (package
    (name "emacs-pulseaudio-control")
    (version "20230316.1819")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/pulseaudio-control-"
               version
               ".tar"))
        (sha256
          (base32
            "1wqk6lvq12dpyl6bk67x2vj4zy9wfkrpr8kbwsvfqx9iqj4ixkik"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~flexibeast/pulseaudio-control")
    (synopsis
      "Use `pactl' to manage PulseAudio volumes.")
    (description
      "Documentation at https://melpa.org/#/pulseaudio-control")
    (license #f)))

(define-public emacs-pumpkin-spice-theme
  (package
    (name "emacs-pumpkin-spice-theme")
    (version "20231011.1253")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/pumpkin-spice-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "060lsh5vfp58h28krsr312vwi8m334yb4cb4qjrh6w2jywjhm580"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://cicadas.surf/cgit/pumpkin-spice-theme.git")
    (synopsis
      "Spice up your day with a delightful pumpkin colored theme")
    (description
      "Documentation at https://melpa.org/#/pumpkin-spice-theme")
    (license #f)))

(define-public emacs-punctuality-logger
  (package
    (name "emacs-punctuality-logger")
    (version "20141120.2031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/elzair/punctuality-logger.git")
               (commit
                 "e09e5dd37bc92289fa2f7dc44aed51a7b5e04bb0")))
        (sha256
          (base32
            "1bkkgs2agy00wivilljkj3a9fsb2ba935icjmhbk46zjc6yf3y6q"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/elzair/punctuality-logger")
    (synopsis "Punctuality logger for Emacs")
    (description
      "Documentation at https://melpa.org/#/punctuality-logger")
    (license #f)))

(define-public emacs-pungi
  (package
    (name "emacs-pungi")
    (version "20150222.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mgrbyte/pungi.git")
               (commit
                 "a2d4d439ea371be0b064a12248288903b8a521a0")))
        (sha256
          (base32
            "1viw95y6fha782n1jw7snr7xc00iyf94r4whsm1a2q11vm2d1h21"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-jedi emacs-pyvenv))
    (home-page "unspecified")
    (synopsis
      "Integrates jedi with virtualenv and buildout python environments")
    (description
      "Documentation at https://melpa.org/#/pungi")
    (license #f)))

(define-public emacs-puni
  (package
    (name "emacs-puni")
    (version "20230910.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AmaiKinono/puni.git")
               (commit
                 "67fd542d9b633d729bdc46fca50a8d0bb6ec6ffb")))
        (sha256
          (base32
            "06r3i7j090pqgxx40ssix34zbjyzl8mpilwakamw6jlzcdhl4lg9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/AmaiKinono/puni")
    (synopsis "Parentheses Universalistic")
    (description
      "Documentation at https://melpa.org/#/puni")
    (license #f)))

(define-public emacs-punpun-themes
  (package
    (name "emacs-punpun-themes")
    (version "20221121.1018")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/punpun-themes-"
               version
               ".tar"))
        (sha256
          (base32
            "0wl7avcfslpndy07dnasbzh4kv3xgiiw196bg1i0ss2s380clwqn"))))
    (build-system melpa-build-system)
    (home-page
      "https://depp.brause.cc/punpun-themes")
    (synopsis "A set of bleak themes")
    (description
      "Documentation at https://melpa.org/#/punpun-themes")
    (license #f)))

(define-public emacs-puppet-mode
  (package
    (name "emacs-puppet-mode")
    (version "20210305.645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/voxpupuli/puppet-mode.git")
               (commit
                 "71bcd383f20a457e8ad34e0e08ec47f8e1b64263")))
        (sha256
          (base32
            "1zgz1gs42ak29q7p3020ah9sm7bgfsagszia80bgiw1lc7wg77ni"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pkg-info))
    (home-page
      "https://github.com/voxpupuli/puppet-mode")
    (synopsis "Major mode for Puppet manifests")
    (description
      "Documentation at https://melpa.org/#/puppet-mode")
    (license #f)))

(define-public emacs-purescript-mode
  (package
    (name "emacs-purescript-mode")
    (version "20230309.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purescript-emacs/purescript-mode.git")
               (commit
                 "eacc61aaafe6055b5f278c9843558f220f18b153")))
        (sha256
          (base32
            "0m9xs9zh1aq8z08p0p006jsfmx9iyskq596mnmgssh7nlzr8a2ac"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "NEWS" "snippets")))
    (home-page
      "https://github.com/purescript-emacs/purescript-mode")
    (synopsis "A PureScript editing mode")
    (description
      "Documentation at https://melpa.org/#/purescript-mode")
    (license #f)))

(define-public emacs-purp-theme
  (package
    (name "emacs-purp-theme")
    (version "20210912.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gnuvince/purp.git")
               (commit
                 "8d3510e1ed995b8323cd5205626ddde6386a76ca")))
        (sha256
          (base32
            "0b3xpiwrbwsc5fmh6k2kj1wxhp3xl4dablxwap07q0kcnp3q47d1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gnuvince/purp")
    (synopsis "A dark color theme with few colors")
    (description
      "Documentation at https://melpa.org/#/purp-theme")
    (license #f)))

(define-public emacs-purple-haze-theme
  (package
    (name "emacs-purple-haze-theme")
    (version "20141015.229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-purple-haze-theme.git")
               (commit
                 "3e245cbef7cd09e6b3ee124963e372a04e9a6485")))
        (sha256
          (base32
            "15myw5rkbnnpgzpiipm5xl4cyzymv8hh66x9al4aalb5nf52dckc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jasonm23/emacs-purple-haze-theme")
    (synopsis
      "an overtly purple color theme for Emacs24.")
    (description
      "Documentation at https://melpa.org/#/purple-haze-theme")
    (license #f)))

(define-public emacs-purty-mode
  (package
    (name "emacs-purty-mode")
    (version "20131004.2259")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcatw/purty-mode.git")
               (commit
                 "8eef77317a3bab07ade212353a50fbd3f20f365a")))
        (sha256
          (base32
            "0qm2xv762cz196aqs445crqrmsks8hpwzpaykzn0chlvdk0m5cv1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Safely pretty-print greek letters, mathematical symbols, or anything else.")
    (description
      "Documentation at https://melpa.org/#/purty-mode")
    (license #f)))

(define-public emacs-pushbullet
  (package
    (name "emacs-pushbullet")
    (version "20140809.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/theanalyst/revolver.git")
               (commit
                 "73c59a0f1dc04875b3e5a2c8afbc26c32128e445")))
        (sha256
          (base32
            "03ivg3ddhy5zh410wgwxa17m98wywqhk62jgijhjd00b6l8i4aym"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-grapnel))
    (home-page
      "http://www.github.com/theanalyst/revolver")
    (synopsis
      "Emacs client for the PushBullet Android app")
    (description
      "Documentation at https://melpa.org/#/pushbullet")
    (license #f)))

(define-public emacs-pushover
  (package
    (name "emacs-pushover")
    (version "20170818.2103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.flintfam.org/swf-projects/emacs-pushover.git")
               (commit
                 "bbe3ac8df3c532a72da4552615af960b8a577588")))
        (sha256
          (base32
            "187bisngi37n66ik2dq7rg4hy4nlxl9pifqgqq08kf9238y8hd11"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/swflint/pushover.el")
    (synopsis "Pushover API Access")
    (description
      "Documentation at https://melpa.org/#/pushover")
    (license #f)))

(define-public emacs-px
  (package
    (name "emacs-px")
    (version "20170317.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaptel/preview-latex.git")
               (commit
                 "0c52f7933eab3ca1642ab0df151db9950430c9e2")))
        (sha256
          (base32
            "0f741a2gpc2mdl85ivbiskga620b6ci2x0dwjs7m8c1vk6xrxbpi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aaptel/preview-latex")
    (synopsis "preview inline latex in any mode")
    (description
      "Documentation at https://melpa.org/#/px")
    (license #f)))

(define-public emacs-py-autopep8
  (package
    (name "emacs-py-autopep8")
    (version "20231025.2256")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/py-autopep8-"
               version
               ".tar"))
        (sha256
          (base32
            "0zy5mqrvrlyv01k4vbscnwi1varnls6c3j8kiqjdm9q47z8rv1x7"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-py-autopep8")
    (synopsis
      "Use autopep8 to beautify a Python buffer")
    (description
      "Documentation at https://melpa.org/#/py-autopep8")
    (license #f)))

(define-public emacs-py-gnitset
  (package
    (name "emacs-py-gnitset")
    (version "20170821.1732")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quodlibetor/py-gnitset.git")
               (commit
                 "1e993cc29cbc31e06fe1e335dec198e21972fa55")))
        (sha256
          (base32
            "1hslq2bdk95cgza9qbskxf942ckhjb4bqi6nrhbmlnm9agmjqm59"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/quodlibetor/py-gnitset")
    (synopsis
      "Run your Python tests any way you'd like")
    (description
      "Documentation at https://melpa.org/#/py-gnitset")
    (license #f)))

(define-public emacs-py-import-check
  (package
    (name "emacs-py-import-check")
    (version "20130802.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/emacs-py-import-check.git")
               (commit
                 "9787f87745a4234cd9bed711860b707902bc8ae4")))
        (sha256
          (base32
            "1416hbc64gwn9c8g9lxfx58w60ysi0x8rbps6mfxalavdhbs20sv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/psibi/emacs-py-import-check")
    (synopsis
      "Finds the unused python imports using importchecker")
    (description
      "Documentation at https://melpa.org/#/py-import-check")
    (license #f)))

(define-public emacs-py-isort
  (package
    (name "emacs-py-isort")
    (version "20160925.1018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paetzke/py-isort.el.git")
               (commit
                 "e67306f459c47c53a65604e4eea88a3914596560")))
        (sha256
          (base32
            "08i55gv392wc12x8v3dca0dmz8a8p9ljsqhyajsb6qv1k120wqhx"))))
    (build-system melpa-build-system)
    (home-page
      "http://paetzke.me/project/py-isort.el")
    (synopsis
      "Use isort to sort the imports in a Python buffer")
    (description
      "Documentation at https://melpa.org/#/py-isort")
    (license #f)))

(define-public emacs-py-smart-operator
  (package
    (name "emacs-py-smart-operator")
    (version "20170531.1209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rmuslimov/py-smart-operator.git")
               (commit
                 "0c8a66faca4b35158d0b5885472cb75286039167")))
        (sha256
          (base32
            "09pmkp24s7nwh6p4pzsjp1z65ksi9n3n2xv7d3igpa86l8qgcm2d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis "smart-operator for python-mode")
    (description
      "Documentation at https://melpa.org/#/py-smart-operator")
    (license #f)))

(define-public emacs-py-snippets
  (package
    (name "emacs-py-snippets")
    (version "20220918.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Xaldew/py-snippets.git")
               (commit
                 "1a85c41ea33f33e5b4a5a12a64fd9c4591fc0bcb")))
        (sha256
          (base32
            "15iqsf4vbgfknkm6p0s680xz5wfwxzkgpilgb3a1ybzl93hv1hil"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/Xaldew/py-snippets")
    (synopsis
      "Collection of advanced Python yasnippet snippets")
    (description
      "Documentation at https://melpa.org/#/py-snippets")
    (license #f)))

(define-public emacs-py-test
  (package
    (name "emacs-py-test")
    (version "20230714.517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Bogdanp/py-test.el.git")
               (commit
                 "72975bb547b6123dcc1213ff78fdcf80f7b29842")))
        (sha256
          (base32
            "1l17ky2m9kc0xicxzf67j8m6zsczc7s4xjjfndzcrbzkf802c0ck"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (arguments '(#:files ("py-test.el")))
    (home-page
      "https://github.com/Bogdanp/py-test.el")
    (synopsis "A test runner for Python code.")
    (description
      "Documentation at https://melpa.org/#/py-test")
    (license #f)))

(define-public emacs-py-yapf
  (package
    (name "emacs-py-yapf")
    (version "20160925.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paetzke/py-yapf.el.git")
               (commit
                 "a878304202ad827a1f3de3dce1badd9ca8731146")))
        (sha256
          (base32
            "1mmzqdigxx46my0h9497l25cjydy3vykg6slxkch4dzvhhlbap48"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paetzke/py-yapf.el")
    (synopsis "Use yapf to beautify a Python buffer")
    (description
      "Documentation at https://melpa.org/#/py-yapf")
    (license #f)))

(define-public emacs-pycarddavel
  (package
    (name "emacs-pycarddavel")
    (version "20150831.1216")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/pycarddavel.git")
               (commit
                 "a6d81ee4eb8309cd82f6082aeca68c5a015702a3")))
        (sha256
          (base32
            "09glwrb9q65qdm4yd0mbi5hwdy2434zm8699ywhs6hqpjacadlmi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (home-page "unspecified")
    (synopsis "Integrate pycarddav")
    (description
      "Documentation at https://melpa.org/#/pycarddavel")
    (license #f)))

(define-public emacs-pyconf
  (package
    (name "emacs-pyconf")
    (version "20230308.2000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andcarnivorous/pyconf.git")
               (commit
                 "e145e895e265474cb1ef5764d37eb47c6566e97f")))
        (sha256
          (base32
            "0ixdy08mmgrvipnn86zfy2571dqz7q2782ddxxd8syg2i03h061w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pyvenv emacs-pyenv-mode))
    (home-page
      "https://github.com/andcarnivorous/pyconf")
    (synopsis
      "Set up python execution configurations like dap-mode ones")
    (description
      "Documentation at https://melpa.org/#/pyconf")
    (license #f)))

(define-public emacs-pycoverage
  (package
    (name "emacs-pycoverage")
    (version "20200513.2047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattharrison/pycoverage.el.git")
               (commit
                 "3c69ed312121368f1b24cc04d54a29ce4ed4f743")))
        (sha256
          (base32
            "0vcg8sq8pbzary19xxdariz3kws93qd2agzssl9znw38sayj71wz"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("pycoverage.el"
         "cov2emacs/bin/cov2emacs"
         "cov2emacs/cov2emacslib/__init__.py"
         "cov2emacs/cov2emacslib/meta.py")))
    (home-page
      "https://github.com/mattharrison/pycoverage.el")
    (synopsis
      "Support for coverage stats on Python 2.X and 3")
    (description
      "Documentation at https://melpa.org/#/pycoverage")
    (license #f)))

(define-public emacs-pydoc
  (package
    (name "emacs-pydoc")
    (version "20221222.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/statmobile/pydoc.git")
               (commit
                 "c9d8b5249c1b3814da062ed9976e4137d6e8d869")))
        (sha256
          (base32
            "1ifyhdcvj25rnrvq78qjma3dg826hpj3x5ic1sydrvj0yb13jhim"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/statmobile/pydoc")
    (synopsis
      "functional, syntax highlighted pydoc navigation")
    (description
      "Documentation at https://melpa.org/#/pydoc")
    (license #f)))

(define-public emacs-pyenv-mode
  (package
    (name "emacs-pyenv-mode")
    (version "20230821.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/pyenv-mode.git")
               (commit
                 "e0f1671c7689966f206eb7fc0a7554a00e82dba1")))
        (sha256
          (base32
            "0xxbgzxzs6j88nizjf1nn98kglqa6y3cbhz1xib5y5pqg4z7j5gm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pythonic))
    (home-page
      "https://github.com/proofit404/pyenv-mode")
    (synopsis "Integrate pyenv with python-mode")
    (description
      "Documentation at https://melpa.org/#/pyenv-mode")
    (license #f)))

(define-public emacs-pygen
  (package
    (name "emacs-pygen")
    (version "20161121.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JackCrawley/pygen.git")
               (commit
                 "9019ff44ba49d7295b1476530feab91fdadb084b")))
        (sha256
          (base32
            "01gmggjv36jc8660xfpfy70cydabhymd17q3z16cjqvsxapbj7nf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-elpy emacs-python-mode emacs-dash))
    (home-page
      "https://github.com/JackCrawley/pygen/")
    (synopsis
      "Python code generation using Elpy and Python-mode.")
    (description
      "Documentation at https://melpa.org/#/pygen")
    (license #f)))

(define-public emacs-pygn-mode
  (package
    (name "emacs-pygn-mode")
    (version "20230606.42")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dwcoates/pygn-mode.git")
               (commit
                 "9957f3e70b48b6cde77e26253feddad2cd4ca0f0")))
        (sha256
          (base32
            "049nvi9m2jsg56fc8a64ipky66yp5gmc7fq7i3lyl91h7c1lbcv8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tree-sitter
            emacs-tree-sitter-langs
            emacs-uci-mode
            emacs-nav-flash
            emacs-ivy))
    (arguments
      '(#:files (:defaults "pygn_server.py" "lib")))
    (home-page
      "https://github.com/dwcoates/pygn-mode")
    (synopsis
      "Major-mode for chess PGN files, powered by Python")
    (description
      "Documentation at https://melpa.org/#/pygn-mode")
    (license #f)))

(define-public emacs-pyim
  (package
    (name "emacs-pyim")
    (version "20230908.39")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/pyim.git")
               (commit
                 "64067b20ce0e964b1342b378180f24a1d4503797")))
        (sha256
          (base32
            "0fggdwxrvnc8aqyp9zibzs53sdhqhamkv55chf8qklqcg19ghn6a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-xr))
    (home-page "https://github.com/tumashu/pyim")
    (synopsis
      "A Chinese input method support quanpin, shuangpin, wubi, cangjie and rime.")
    (description
      "Documentation at https://melpa.org/#/pyim")
    (license #f)))

(define-public emacs-pyim-basedict
  (package
    (name "emacs-pyim-basedict")
    (version "20220614.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/pyim-basedict.git")
               (commit
                 "d61af27686f7a39e6c138b7261a686e7ea7a0ef7")))
        (sha256
          (base32
            "0fzyh8qmicq2vy9j1ca708ir67dpxp1cwjaw0sw469p24cvj12yy"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "*.pyim" "*.pyim.gz")))
    (home-page
      "https://github.com/tumashu/pyim-basedict")
    (synopsis "The default pinyin dict of pyim")
    (description
      "Documentation at https://melpa.org/#/pyim-basedict")
    (license #f)))

(define-public emacs-pyim-cangjiedict
  (package
    (name "emacs-pyim-cangjiedict")
    (version "20210617.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p1uxtar/pyim-cangjiedict.git")
               (commit
                 "d17e3d32a6480939b350a91a915ebe8e6efad819")))
        (sha256
          (base32
            "1bszpqsm15az0wvbgsk012manxnvigbk38qr5iqzkgd4d13yv5fs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (arguments '(#:files (:defaults "*.pyim")))
    (home-page
      "https://github.com/p1uxtar/pyim-cangjiedict")
    (synopsis "Some cangjie dicts for pyim")
    (description
      "Documentation at https://melpa.org/#/pyim-cangjiedict")
    (license #f)))

(define-public emacs-pyim-smzmdict
  (package
    (name "emacs-pyim-smzmdict")
    (version "20210505.1445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p1uxtar/pyim-smzmdict.git")
               (commit
                 "fcddbde17a04d174c7353548056524687f7be8d2")))
        (sha256
          (base32
            "1mi4a8sizlplys93lac34d3fv8338lbk3hfg3n45vp14wvfvpjnq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (arguments '(#:files (:defaults "*.pyim")))
    (home-page
      "https://github.com/p1uxtar/pyim-smzmdict")
    (synopsis "Sanma(triple) Zhengma dict for pyim")
    (description
      "Documentation at https://melpa.org/#/pyim-smzmdict")
    (license #f)))

(define-public emacs-pyim-wbdict
  (package
    (name "emacs-pyim-wbdict")
    (version "20220604.1340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/pyim-wbdict.git")
               (commit
                 "e3b128cfcf218e4a0ca04189b0bd46909761227e")))
        (sha256
          (base32
            "04bp6fvqvp9myiakjak0jj4zinqcljr03v3w986zm7gs9i7hxx4f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyim))
    (arguments
      '(#:files (:defaults "*.pyim" "*.pyim.gz")))
    (home-page
      "https://github.com/tumashu/pyim-wbdict")
    (synopsis "Some wubi dicts for pyim")
    (description
      "Documentation at https://melpa.org/#/pyim-wbdict")
    (license #f)))

(define-public emacs-pyimport
  (package
    (name "emacs-pyimport")
    (version "20220908.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/pyimport.git")
               (commit
                 "c006a5fd0e5c9e297aa2ad71b2f02f463286b5e3")))
        (sha256
          (base32
            "0afkdcbr91wmkf72rj2kxyl3w6fnff0mgf855pk9ic1gz5sxvn24"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-shut-up))
    (home-page "unspecified")
    (synopsis "Manage Python imports!")
    (description
      "Documentation at https://melpa.org/#/pyimport")
    (license #f)))

(define-public emacs-pyimpsort
  (package
    (name "emacs-pyimpsort")
    (version "20160130.453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pyimpsort.git")
               (commit
                 "d5c61d70896b642646dfd3c809c06174ae086c1a")))
        (sha256
          (base32
            "05qx1p19dw3nr264shihfn33k579hd0wf4cxki5cqrxi7xzpjgrc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("pyimpsort.el" "pyimpsort.py")))
    (home-page
      "https://github.com/emacs-pe/pyimpsort.el")
    (synopsis "Sort python imports.")
    (description
      "Documentation at https://melpa.org/#/pyimpsort")
    (license #f)))

(define-public emacs-pyinspect
  (package
    (name "emacs-pyinspect")
    (version "20230216.1121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/it-is-wednesday/pyinspect.el.git")
               (commit
                 "4437dc589d0c1eb0ca80bf0d005ee27d15cf69fc")))
        (sha256
          (base32
            "1fdgsbd1rz54y18m43dyrpz6ir57p1dqgbnd24sx9zj85mn1z3fa"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "pyinspect.py")))
    (home-page
      "https://github.com/it-is-wednesday/pyinspect.el")
    (synopsis "Python object inspector")
    (description
      "Documentation at https://melpa.org/#/pyinspect")
    (license #f)))

(define-public emacs-pylint
  (package
    (name "emacs-pylint")
    (version "20221117.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/pylint.git")
               (commit
                 "bddb91610b6b6aa1e7fee96b6be3be69dfe3695e")))
        (sha256
          (base32
            "0n7d70l9bjz210dazvn13mr7s0klinnqr36n59fzsrij6xp46kaq"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "epylint.py")))
    (home-page "unspecified")
    (synopsis "minor mode for running `pylint'")
    (description
      "Documentation at https://melpa.org/#/pylint")
    (license #f)))

(define-public emacs-pynt
  (package
    (name "emacs-pynt")
    (version "20180710.726")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ebanner/pynt.git")
               (commit
                 "86cf9ce78d34f92bfd0764c9cbb75427ebd429e6")))
        (sha256
          (base32
            "14x6blikgg5ndc9955hdziy3h9gjr27gpzmhbi4pgjvs8gffhf31"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ein emacs-epc emacs-deferred))
    (arguments '(#:files ("pynt/*")))
    (home-page "https://github.com/ebanner/pynt")
    (synopsis
      "Generate and scroll EIN buffers from python code")
    (description
      "Documentation at https://melpa.org/#/pynt")
    (license #f)))

(define-public emacs-pyramid
  (package
    (name "emacs-pyramid")
    (version "20230114.1049")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakra/pyramid.el.git")
               (commit
                 "c8a8b36725d85664e74f59600fe5d18d06ea907d")))
        (sha256
          (base32
            "05q9bqxnv2b1d9g7j86pc36mfn8d7x5piz95lc38cqwv492ivrbx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-pythonic emacs-tablist))
    (arguments '(#:files (:defaults "snippets")))
    (home-page "https://github.com/dakra/pyramid.el")
    (synopsis
      "Minor mode for working with pyramid projects")
    (description
      "Documentation at https://melpa.org/#/pyramid")
    (license #f)))

(define-public emacs-pytest
  (package
    (name "emacs-pytest")
    (version "20230810.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ionrock/pytest-el.git")
               (commit
                 "8692f965bf4ddf3d755cf1fbf77a7a768e22460e")))
        (sha256
          (base32
            "13s3zqxjlas4rq70gxgl8nrhasrx8j8ml9xls7lgghk12ppiqil9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/ionrock/pytest-el")
    (synopsis "Easy Python test running in Emacs")
    (description
      "Documentation at https://melpa.org/#/pytest")
    (license #f)))

(define-public emacs-pytest-pdb-break
  (package
    (name "emacs-pytest-pdb-break")
    (version "20200804.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/poppyschmo/pytest-pdb-break.git")
               (commit
                 "fe4a43299a926223634c3b104b751397bb818019")))
        (sha256
          (base32
            "1cvkraqyxbmwfz5pcryscyhbnm6f91gknwkbh12s1lpn998c2q3a"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/*.el"
         ("lib" "*.py" "helpers" ("emacs" "emacs/*.py"))
         (:exclude "emacs/*-test.el"))))
    (home-page
      "https://github.com/poppyschmo/pytest-pdb-break")
    (synopsis "A pytest PDB launcher")
    (description
      "Documentation at https://melpa.org/#/pytest-pdb-break")
    (license #f)))

(define-public emacs-python-black
  (package
    (name "emacs-python-black")
    (version "20230313.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-python-black.git")
               (commit
                 "0714b0007c0b620f88ed9cc91035caea43f3d75f")))
        (sha256
          (base32
            "17jaw7pcgb27sq1aklq0hqb827152vvmbxdxrrgwsfag6ccw75pr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-reformatter))
    (home-page
      "https://github.com/wbolster/emacs-python-black")
    (synopsis "Reformat Python using python-black")
    (description
      "Documentation at https://melpa.org/#/python-black")
    (license #f)))

(define-public emacs-python-cell
  (package
    (name "emacs-python-cell")
    (version "20230911.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisch/python-cell.el.git")
               (commit
                 "9f2a735e08362bf270ea74c27771ee3cd1bfefbf")))
        (sha256
          (base32
            "1viik15cb9jxbdkdfyb460ahf917qs34319f6gfs205kislrc1m0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisch/python-cell.el")
    (synopsis
      "Support for MATLAB-like cells in python mode")
    (description
      "Documentation at https://melpa.org/#/python-cell")
    (license #f)))

(define-public emacs-python-coverage
  (package
    (name "emacs-python-coverage")
    (version "20211224.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-python-coverage.git")
               (commit
                 "a341615af03dbe3ce0ac9b63cf43dc01c1ae5ebe")))
        (sha256
          (base32
            "1k5air9sgg95jl949lwf9hz8i4ivy646mnm4pc37wsxkh4g46wqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-xml+))
    (home-page
      "https://github.com/wbolster/emacs-python-coverage")
    (synopsis
      "Show Python coverage via overlays or Flycheck")
    (description
      "Documentation at https://melpa.org/#/python-coverage")
    (license #f)))

(define-public emacs-python-django
  (package
    (name "emacs-python-django")
    (version "20150822.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/python-django.el.git")
               (commit
                 "fc54ad74f0309670359b939f64d0f1fff68aeac4")))
        (sha256
          (base32
            "1qckn5bi1ib54hgqbym5qqwzvbv70ria1w3c2x543xlr0l7zga6h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgallina/python-django.el")
    (synopsis
      "A Jazzy package for managing Django projects")
    (description
      "Documentation at https://melpa.org/#/python-django")
    (license #f)))

(define-public emacs-python-docstring
  (package
    (name "emacs-python-docstring")
    (version "20230326.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/glyph/python-docstring-mode.git")
               (commit
                 "40f0ca57831a71a9e6437088149784f37704ef6c")))
        (sha256
          (base32
            "0mbmajl4j33wm7qyffqzaan35rzmj7w644fz67q3brr1rn3xbrk5"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("docstring_wrap.py" "python-docstring.el")))
    (home-page "unspecified")
    (synopsis "Smart Python docstring formatting")
    (description
      "Documentation at https://melpa.org/#/python-docstring")
    (license #f)))

(define-public emacs-python-environment
  (package
    (name "emacs-python-environment")
    (version "20150310.853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-python-environment.git")
               (commit
                 "401006584e32864a10c69d29f14414828909362e")))
        (sha256
          (base32
            "0q6bib9nr6xiq6npzbngyfcjk87yyvwzq1zirr3z1h5wadm34lsk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page "unspecified")
    (synopsis "virtualenv API for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/python-environment")
    (license #f)))

(define-public emacs-python-insert-docstring
  (package
    (name "emacs-python-insert-docstring")
    (version "20211127.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/macurovc/insert-docstring.git")
               (commit
                 "cd6419b74c99c06d5c48c1b289572acce1fd193b")))
        (sha256
          (base32
            "1kr7jgiq1zbhq8j4fbhqd5skprna2jkffrqbabjlri69vl5spl80"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/macurovc/insert-docstring")
    (synopsis "Python Google docstring inserter")
    (description
      "Documentation at https://melpa.org/#/python-insert-docstring")
    (license #f)))

(define-public emacs-python-isort
  (package
    (name "emacs-python-isort")
    (version "20210603.2153")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wyuenho/emacs-python-isort.git")
               (commit
                 "339814df22b87eebca02137e581f65d6283fce97")))
        (sha256
          (base32
            "094nqaf60cw3kch2hka5jbbrc5b6v3z6np98w3y6690yxwx7wmz4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/wyuenho/emacs-python-isort")
    (synopsis
      "Reformat python-mode buffer with isort")
    (description
      "Documentation at https://melpa.org/#/python-isort")
    (license #f)))

(define-public emacs-python-mls
  (package
    (name "emacs-python-mls")
    (version "20230920.1915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jdtsmith/python-mls.git")
               (commit
                 "821b93ff7c94a13090598c22fd92bd19b5ad951b")))
        (sha256
          (base32
            "1p9dcjz8hgjb8gz742pxqdrjh68mnyr2hssy6glhd2qb78d4927y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/jdtsmith/python-mls")
    (synopsis "Multi-line shell for (i)Python")
    (description
      "Documentation at https://melpa.org/#/python-mls")
    (license #f)))

(define-public emacs-python-mode
  (package
    (name "emacs-python-mode")
    (version "20230702.625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/python-mode-devs/python-mode.git")
               (commit
                 "c60a675aac83505f1f664410dce3b4e64eef37a8")))
        (sha256
          (base32
            "1dbb1rg3r30yfllxvpnximy1rqgbyb6m4saf8gql9s7hyidbri6q"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("python-mode.el"
         ("completion" "completion/pycomplete.*"))))
    (home-page
      "https://gitlab.com/groups/python-mode-devs")
    (synopsis "Python major mode")
    (description
      "Documentation at https://melpa.org/#/python-mode")
    (license #f)))

(define-public emacs-python-pytest
  (package
    (name "emacs-python-pytest")
    (version "20231106.1557")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-python-pytest.git")
               (commit
                 "bdfb3e81eedc6b76ed0c5f77079e7cc8adff7b00")))
        (sha256
          (base32
            "05hrk829zhch2x7lwwzcm1p2hjbjqk3lg2ps18arak7ij6pf0mxr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-projectile emacs-s))
    (home-page
      "https://github.com/wbolster/emacs-python-pytest")
    (synopsis "helpers to run pytest")
    (description
      "Documentation at https://melpa.org/#/python-pytest")
    (license #f)))

(define-public emacs-python-switch-quotes
  (package
    (name "emacs-python-switch-quotes")
    (version "20161228.809")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vladimirlagunov/python-switch-quotes.git")
               (commit
                 "93f1e9b40e061a6cea480139e8b1362b6404abd0")))
        (sha256
          (base32
            "1x04hnf3m8cgqp0i566q4n7kh59cayzfxka3g07kv0h543xbys4n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/werehuman/python-switch-quotes")
    (synopsis
      "cycle between ' and \" quotes in python strings")
    (description
      "Documentation at https://melpa.org/#/python-switch-quotes")
    (license #f)))

(define-public emacs-python-test
  (package
    (name "emacs-python-test")
    (version "20181018.29")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/python-test.el.git")
               (commit
                 "f899975b133539e19ba822e4b0bfd1a28572967e")))
        (sha256
          (base32
            "0ww0qf9hsd8j31dc0p3fmsiqsir3mqbd4pwv4i29qidmbgrk3cv0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("python-test.el")))
    (home-page
      "https://github.com/emacs-pe/python-test.el")
    (synopsis "Python testing integration")
    (description
      "Documentation at https://melpa.org/#/python-test")
    (license #f)))

(define-public emacs-python-view-data
  (package
    (name "emacs-python-view-data")
    (version "20230508.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/python-view-data.git")
               (commit
                 "1dd5f99679db9767530cfc20642a40a48bd479be")))
        (sha256
          (base32
            "0zqarh2hvfkcsnj3a45g9063qf3sg6mfsp89a7v74gzq31mn542x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-csv-mode))
    (home-page
      "https://github.com/ShuguangSun/python-view-data")
    (synopsis "View data in python")
    (description
      "Documentation at https://melpa.org/#/python-view-data")
    (license #f)))

(define-public emacs-python-x
  (package
    (name "emacs-python-x")
    (version "20230117.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/python-x.el.git")
               (commit
                 "744924e7468200f3e8ac7ad60a496ad9d080308e")))
        (sha256
          (base32
            "127ddg5i31v40calvnd9r4d48my34wnaanaii70mr5jh1w6gw13v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-folding))
    (home-page "unspecified")
    (synopsis
      "python.el extras for interactive evaluation")
    (description
      "Documentation at https://melpa.org/#/python-x")
    (license #f)))

(define-public emacs-pythonic
  (package
    (name "emacs-pythonic")
    (version "20230821.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pythonic-emacs/pythonic.git")
               (commit
                 "f6e0bec552319341f260a5c4740288799c2b3a5b")))
        (sha256
          (base32
            "1xr37qabvjljdkcgdnark5fyf0d11502vy2nrhqg9z1yhbp65988"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-f))
    (home-page
      "https://github.com/proofit404/pythonic")
    (synopsis
      "Utility functions for writing pythonic emacs package")
    (description
      "Documentation at https://melpa.org/#/pythonic")
    (license #f)))

(define-public emacs-pyvenv
  (package
    (name "emacs-pyvenv")
    (version "20211014.707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/pyvenv.git")
               (commit
                 "31ea715f2164dd611e7fc77b26390ef3ca93509b")))
        (sha256
          (base32
            "1708xh2sq7xvs4z5zkik9ircxvzimhzi6phc2j43fvvxgglcgrk5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jorgenschaefer/pyvenv")
    (synopsis "Python virtual environment interface")
    (description
      "Documentation at https://melpa.org/#/pyvenv")
    (license #f)))

(define-public emacs-pyvenv-auto
  (package
    (name "emacs-pyvenv-auto")
    (version "20230106.415")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nryotaro/pyvenv-auto.git")
               (commit
                 "b4365e60e3ba747a5fec8ca909f64fe8c73d8db2")))
        (sha256
          (base32
            "11js0zkf35vxbbvrxghv4c0i1j4ma6agdfl24qcvchd2wsnmf7mn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pyvenv))
    (home-page
      "https://github.com/nryotaro/pyvenv-auto")
    (synopsis "Automatically switch Python venvs")
    (description
      "Documentation at https://melpa.org/#/pyvenv-auto")
    (license #f)))

(define-public emacs-q-mode
  (package
    (name "emacs-q-mode")
    (version "20230412.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psaris/q-mode.git")
               (commit
                 "d89b359d5a26234336487ab4e42eb5878ad3c5a5")))
        (sha256
          (base32
            "0632mh9yhs4cs8xzq7d86gyklvzvvlja729d6vlzam3nw6s89c4d"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/psaris/q-mode")
    (synopsis "A q editing mode")
    (description
      "Documentation at https://melpa.org/#/q-mode")
    (license #f)))

(define-public emacs-qml-mode
  (package
    (name "emacs-qml-mode")
    (version "20161016.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/coldnew/qml-mode.git")
               (commit
                 "6c5f33ba88ae010bf201a80ee8095e20a724558c")))
        (sha256
          (base32
            "1sncsvzjfgmhp4m8w5jd4y51k24n2jfpgvrkd64wlhhzbj3wb947"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/coldnew/qml-mode")
    (synopsis
      "Major mode for editing QT Declarative (QML) code.")
    (description
      "Documentation at https://melpa.org/#/qml-mode")
    (license #f)))

(define-public emacs-qrencode
  (package
    (name "emacs-qrencode")
    (version "20230324.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruediger/qrencode-el.git")
               (commit
                 "d7896e9594d45d7b2622d4617ff9cb7037378167")))
        (sha256
          (base32
            "0yrshahci319lnjdpsksdy11a69k1n91qk9r2zfyhqmng09s6i0y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ruediger/qrencode-el")
    (synopsis "QRCode encoder")
    (description
      "Documentation at https://melpa.org/#/qrencode")
    (license #f)))

(define-public emacs-qt-pro-mode
  (package
    (name "emacs-qt-pro-mode")
    (version "20170604.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/qt-pro-mode.git")
               (commit
                 "7a2da323de834294b413cbbb3c92f42f54913643")))
        (sha256
          (base32
            "07054hzl7gd0wfibcqvij2wx9zji330gsryn53qad9gyalvlavpa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Qt Pro/Pri major mode")
    (description
      "Documentation at https://melpa.org/#/qt-pro-mode")
    (license #f)))

(define-public emacs-qtcreator-theme
  (package
    (name "emacs-qtcreator-theme")
    (version "20201215.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LesleyLai/emacs-qtcreator-theme.git")
               (commit
                 "515532b05063898459157d2ba5c10ec0d5a4b1bd")))
        (sha256
          (base32
            "00p7fapvprfkah14j1isrwnbq8npgn3yw3k4z8ki14mqhgras4hf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/LesleyLai/emacs-qtcreator-theme")
    (synopsis
      "A color theme that mimics Qt Creator IDE")
    (description
      "Documentation at https://melpa.org/#/qtcreator-theme")
    (license #f)))

(define-public emacs-quack
  (package
    (name "emacs-quack")
    (version "20181106.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/quack.git")
               (commit
                 "2146805ce2b5a9b155d73929986f11e713787e26")))
        (sha256
          (base32
            "005wkji4wjqqilgmqy81rjqr8zx4gl39mari2ahvr9mfps2ypmjz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "enhanced support for editing and running Scheme code")
    (description
      "Documentation at https://melpa.org/#/quack")
    (license #f)))

(define-public emacs-quakec-mode
  (package
    (name "emacs-quakec-mode")
    (version "20230619.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vkazanov/quakec-mode.git")
               (commit
                 "7b5d13fbdd9dfdc319ee8db1f1e954e00bdfce54")))
        (sha256
          (base32
            "0xb43s4641xxfbj6ybssp7aj09apw47qz2wlabv12wmsyf63db1x"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vkazanov/quakec-mode")
    (synopsis "Major mode for QuakeC")
    (description
      "Documentation at https://melpa.org/#/quakec-mode")
    (license #f)))

(define-public emacs-quarto-mode
  (package
    (name "emacs-quarto-mode")
    (version "20221005.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quarto-dev/quarto-emacs.git")
               (commit
                 "b7dcba7050b2e1e65acdd5656d08a186bca2c922")))
        (sha256
          (base32
            "1f5jc9yni00mls6d9r0kxvziq1x20kimaixcg084wnmni20g97zb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-polymode
            emacs-poly-markdown
            emacs-markdown-mode
            emacs-request))
    (home-page
      "https://github.com/quarto-dev/quarto-emacs")
    (synopsis "A (poly)mode for https://quarto.org")
    (description
      "Documentation at https://melpa.org/#/quarto-mode")
    (license #f)))

(define-public emacs-quasi-monochrome-theme
  (package
    (name "emacs-quasi-monochrome-theme")
    (version "20200415.705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lbolla/emacs-quasi-monochrome.git")
               (commit
                 "b38d71860fdea945e10e8a766ac9dfa1410ade67")))
        (sha256
          (base32
            "0jcwfmamvpd22r5sbicbf9442b22lvldfrqldysm4l9yyxs11jy3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lbolla/emacs-quasi-monochrome")
    (synopsis "Quasi Monochrome theme")
    (description
      "Documentation at https://melpa.org/#/quasi-monochrome-theme")
    (license #f)))

(define-public emacs-quelpa
  (package
    (name "emacs-quelpa")
    (version "20230620.1343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quelpa/quelpa.git")
               (commit
                 "b6a73d4e9e06631d2adb7bfbd83bbe7ee4211809")))
        (sha256
          (base32
            "0r7s7y8y7kj5bl6csqyx2jv2kighhj5ch6ck661r1n3095ahjhfj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/quelpa/quelpa")
    (synopsis
      "Emacs Lisp packages built directly from source")
    (description
      "Documentation at https://melpa.org/#/quelpa")
    (license #f)))

(define-public emacs-quelpa-leaf
  (package
    (name "emacs-quelpa-leaf")
    (version "20221231.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quelpa/quelpa-leaf.git")
               (commit
                 "296ef97c29d7540316441715b92f6d15430f3579")))
        (sha256
          (base32
            "1mcl6ziqqw1dh4kdz1ha8llk4yzljg0r5zrspyw6jw9c4dw4dwxg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-quelpa emacs-leaf))
    (home-page
      "https://github.com/quelpa/quelpa-leaf")
    (synopsis "Quelpa handler for leaf")
    (description
      "Documentation at https://melpa.org/#/quelpa-leaf")
    (license #f)))

(define-public emacs-quelpa-use-package
  (package
    (name "emacs-quelpa-use-package")
    (version "20201022.746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/quelpa/quelpa-use-package.git")
               (commit
                 "d985c0326b66aa19581918deccdc5edcacccf953")))
        (sha256
          (base32
            "0r9f8ary20rxs7rdl6lf6wl1gwa70c2c1zy93z3kcwjrlhbkp4rd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-quelpa emacs-use-package))
    (home-page
      "https://github.com/quelpa/quelpa-use-package")
    (synopsis "quelpa handler for use-package")
    (description
      "Documentation at https://melpa.org/#/quelpa-use-package")
    (license #f)))

(define-public emacs-quick-buffer-switch
  (package
    (name "emacs-quick-buffer-switch")
    (version "20221220.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/renard/quick-buffer-switch.git")
               (commit
                 "280f67f1a5e02533573b45d585c222c937f11f81")))
        (sha256
          (base32
            "122wsgx0wrhk3c5jf2pwns11i686l6c1bcqaqb9qixg0d7l1cg2f"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Quick switch to file or dir buffers.")
    (description
      "Documentation at https://melpa.org/#/quick-buffer-switch")
    (license #f)))

(define-public emacs-quick-peek
  (package
    (name "emacs-quick-peek")
    (version "20200130.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/quick-peek.git")
               (commit
                 "03a276086795faad46a142454fc3e28cab058b70")))
        (sha256
          (base32
            "1kzsphzc9n80v6vf00dr2id9qkm78wqa6sb2ncnasgga6qj358ql"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Inline quick-peek windows")
    (description
      "Documentation at https://melpa.org/#/quick-peek")
    (license #f)))

(define-public emacs-quick-preview
  (package
    (name "emacs-quick-preview")
    (version "20191017.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/quick-preview.git")
               (commit
                 "a312ab5539b9a362da9d305e4da814e17c5721c9")))
        (sha256
          (base32
            "07qipy0r0v8y5rm2g1kqqqy81635wbclzvjgq8y9sziwchww2v20"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myuhe/quick-preview.el")
    (synopsis
      "quick preview using GNOME sushi, gloobus or quick look")
    (description
      "Documentation at https://melpa.org/#/quick-preview")
    (license #f)))

(define-public emacs-quick-shell-keybind
  (package
    (name "emacs-quick-shell-keybind")
    (version "20230927.1036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eyeinsky/quick-shell-keybind.git")
               (commit
                 "eae4ef3673794a202f097b1619ba7cfb79424dfc")))
        (sha256
          (base32
            "1jckzy4w48jhlii3k60pnx4z4rc3h3hyx72b68naxngpkjq24fm5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/eyeinsky/quick-shell-keybind")
    (synopsis
      "Interactively bind a key to shell commands")
    (description
      "Documentation at https://melpa.org/#/quick-shell-keybind")
    (license #f)))

(define-public emacs-quickref
  (package
    (name "emacs-quickref")
    (version "20170817.1232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pd/quickref.el.git")
               (commit
                 "f368c8b8219bb90498c5ab84e26f00eedaa234cf")))
        (sha256
          (base32
            "0nalnfb816qk1dfxjk9j8r5lvzv2k4jf747xdjbj2mcvv07g2jd2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/pd/quickref.el")
    (synopsis
      "Display relevant notes-to-self in the echo area")
    (description
      "Documentation at https://melpa.org/#/quickref")
    (license #f)))

(define-public emacs-quickrun
  (package
    (name "emacs-quickrun")
    (version "20221215.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/quickrun.git")
               (commit
                 "7a89313c07a21eae9cd69a1a98e2a134d559e04f")))
        (sha256
          (base32
            "15z8ix2wi452zkh5qz1qlsvq8bnwjw8014k51i6rvw8aczm344lr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ht))
    (home-page
      "https://github.com/emacsorphanage/quickrun")
    (synopsis "Run commands quickly")
    (description
      "Documentation at https://melpa.org/#/quickrun")
    (license #f)))

(define-public emacs-quiet
  (package
    (name "emacs-quiet")
    (version "20230530.859")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/quiet.git")
               (commit
                 "985b56606517971330c08686c49a8d06db763f3c")))
        (sha256
          (base32
            "0141z6acdffy96ghrwghzgqnv3mypvfkgci413dfaym4z80iwqdz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zzkt/quiet")
    (synopsis
      "Disconnect from the online world for a while")
    (description
      "Documentation at https://melpa.org/#/quiet")
    (license #f)))

(define-public emacs-quilt
  (package
    (name "emacs-quilt")
    (version "20190828.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jstranik/emacs-quilt.git")
               (commit
                 "b56a1f1acc46cdf8655710e4c8f24f5f31f22c6a")))
        (sha256
          (base32
            "1fk1cj0bwb4hrfcy868ll4jf3mq9ni0m8srf01dljh436aj2pc7h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jstranik/emacs-quilt")
    (synopsis
      "Minor mode for working with files in quilt")
    (description
      "Documentation at https://melpa.org/#/quilt")
    (license #f)))

(define-public emacs-quiz
  (package
    (name "emacs-quiz")
    (version "20190525.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/quiz.el.git")
               (commit
                 "570bf53926d89282cdb9653bd5aa8fe968f92bbd")))
        (sha256
          (base32
            "1f752fsrk7z8q2dd40r46hzhhf1kyj0vid9g0vv5dkkzmabms59q"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/quiz.el")
    (synopsis "Multiple choice quiz game")
    (description
      "Documentation at https://melpa.org/#/quiz")
    (license #f)))

(define-public emacs-r-autoyas
  (package
    (name "emacs-r-autoyas")
    (version "20140101.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/r-autoyas.el.git")
               (commit
                 "b4020ee7f5f895e0065b8b26da8a49c51432d530")))
        (sha256
          (base32
            "0dhljmdlg4p832w9s7rp8vznkpjkwpg8k9hj95cn2h76c0afwz3j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess emacs-yasnippet))
    (home-page
      "https://github.com/mlf176f2/r-autoyas.el")
    (synopsis
      "Provides automatically created yasnippets for R function argument lists.")
    (description
      "Documentation at https://melpa.org/#/r-autoyas")
    (license #f)))

(define-public emacs-racer
  (package
    (name "emacs-racer")
    (version "20210307.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/racer-rust/emacs-racer.git")
               (commit
                 "1e63e98626737ea9b662d4a9b1ffd6842b1c648c")))
        (sha256
          (base32
            "12a429lajk09qp1jxgig54p8z6wndfgr4jwdmgkc9s2df9sw02d3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-rust-mode
            emacs-dash
            emacs-s
            emacs-f
            emacs-pos-tip))
    (home-page
      "https://github.com/racer-rust/emacs-racer")
    (synopsis
      "code completion, goto-definition and docs browsing for Rust via racer")
    (description
      "Documentation at https://melpa.org/#/racer")
    (license #f)))

(define-public emacs-racket-mode
  (package
    (name "emacs-racket-mode")
    (version "20231109.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/greghendershott/racket-mode.git")
               (commit
                 "51535efa5202c422eebaff01652cea9b83bfb200")))
        (sha256
          (base32
            "0mbwr48jkgvhqv7hx4gsyz08gshwln6w3b79ls9p47yz1nc8a082"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "*.rkt"
          ("racket" "racket/*")
          (:exclude "racket/example/*" "racket/test/*"))))
    (home-page "https://www.racket-mode.com/")
    (synopsis "Racket editing, REPL, and more")
    (description
      "Documentation at https://melpa.org/#/racket-mode")
    (license #f)))

(define-public emacs-rails-i18n
  (package
    (name "emacs-rails-i18n")
    (version "20220126.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/otavioschwanck/rails-i18n.el.git")
               (commit
                 "8e87e4e48e31902b8259ded28a208c2e7efea6e9")))
        (sha256
          (base32
            "0mddr1gjhaxgc9rqmbkw2fymz3blvm0cvg15c9lrary1z1almj64"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml emacs-dash))
    (home-page
      "https://github.com/otavioschwanck/rails-i18n.el")
    (synopsis "Seach and insert i18n on ruby code")
    (description
      "Documentation at https://melpa.org/#/rails-i18n")
    (license #f)))

(define-public emacs-rails-log-mode
  (package
    (name "emacs-rails-log-mode")
    (version "20140408.425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/rails-log-mode.git")
               (commit
                 "ff440003ad7d47cb0ac3300f2a632f4cfd36a446")))
        (sha256
          (base32
            "1fh8wsb0pa2isr1kgh3v9zmmxq1nlmqwqk4z34dw5wpaiyihmk84"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for viewing Rails log files")
    (description
      "Documentation at https://melpa.org/#/rails-log-mode")
    (license #f)))

(define-public emacs-rails-routes
  (package
    (name "emacs-rails-routes")
    (version "20220126.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/otavioschwanck/rails-routes.el.git")
               (commit
                 "eab995a9297ca5bd9bd4f4c2737f2fecfc36def0")))
        (sha256
          (base32
            "0109mfxz7h7423yri1g0l4fr911iw7n6wkivpjcv09f0nq82jxch"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inflections))
    (home-page
      "https://github.com/otavioschwanck/rails-routes")
    (synopsis "Search for and insert rails routes")
    (description
      "Documentation at https://melpa.org/#/rails-routes")
    (license #f)))

(define-public emacs-railscasts-reloaded-theme
  (package
    (name "emacs-railscasts-reloaded-theme")
    (version "20201130.903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thegeorgeous/railscasts-reloaded-theme.git")
               (commit
                 "1c3850568e60a555d59cbb57bf2b6aa06e99d454")))
        (sha256
          (base32
            "1z6nyn2galkp9c06n6k431rqm12wla24pa0bmwqjbbhz4jz5dxf2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thegeorgeous/railscasts-reloaded-theme")
    (synopsis "Railscasts Reloaded color theme")
    (description
      "Documentation at https://melpa.org/#/railscasts-reloaded-theme")
    (license #f)))

(define-public emacs-railscasts-theme
  (package
    (name "emacs-railscasts-theme")
    (version "20150219.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mikenichols/railscasts-theme.git")
               (commit
                 "1340c3f6c2717761cab95617cf8dcbd962b1095b")))
        (sha256
          (base32
            "021x1l5kzsbm0qj5a3bngxa7ickm4lbwsdz81a2ks9pi1ivmw205"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mikenichols/railscasts-theme")
    (synopsis
      "Railscasts color theme for GNU Emacs.")
    (description
      "Documentation at https://melpa.org/#/railscasts-theme")
    (license #f)))

(define-public emacs-rainbow-blocks
  (package
    (name "emacs-rainbow-blocks")
    (version "20210715.1518")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/rainbow-blocks.git")
               (commit
                 "83c4d6e77a1e25d3d2d124a4e90d5b084f3e15a5")))
        (sha256
          (base32
            "1v583d6mh69cz1adl295pd7axlqk3m1qs94558n84d1sh7syxcdg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/istib/rainbow-blocks")
    (synopsis
      "Block syntax highlighting for lisp code")
    (description
      "Documentation at https://melpa.org/#/rainbow-blocks")
    (license #f)))

(define-public emacs-rainbow-delimiters
  (package
    (name "emacs-rainbow-delimiters")
    (version "20210515.1254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/rainbow-delimiters.git")
               (commit
                 "d576e6694ad3a3e88b2bb1363305b38fa364c149")))
        (sha256
          (base32
            "0sw5zjpg8xg0ri550vmblfm0h0ra56vh0vsxwglk24w29flvn18m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/rainbow-delimiters")
    (synopsis
      "Highlight brackets according to their depth")
    (description
      "Documentation at https://melpa.org/#/rainbow-delimiters")
    (license #f)))

(define-public emacs-rainbow-fart
  (package
    (name "emacs-rainbow-fart")
    (version "20230619.515")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/emacs-rainbow-fart.git")
               (commit
                 "5e174a2b09f8326e4bd61d4d392ed32a6b45e3ab")))
        (sha256
          (base32
            "0k18w3qrp49ha2af8j3aap06w58m14cxg8h3zc15pcnwiywvrg5s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (arguments '(#:files (:defaults "voices")))
    (home-page
      "https://repo.or.cz/emacs-rainbow-fart.git")
    (synopsis
      "Checks the keywords of code to play suitable sounds")
    (description
      "Documentation at https://melpa.org/#/rainbow-fart")
    (license #f)))

(define-public emacs-rainbow-identifiers
  (package
    (name "emacs-rainbow-identifiers")
    (version "20141102.1526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/rainbow-identifiers.git")
               (commit
                 "19fbfded1baa98d12335f26f6d7b20e5ae44ce2e")))
        (sha256
          (base32
            "05i0jpmxzsj2lsj48cafn3v93z37l7k5kaza2ik3yirdpjdibyrh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/rainbow-identifiers")
    (synopsis
      "Highlight identifiers according to their names")
    (description
      "Documentation at https://melpa.org/#/rainbow-identifiers")
    (license #f)))

(define-public emacs-rake
  (package
    (name "emacs-rake")
    (version "20220211.827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/asok/rake.git")
               (commit
                 "452ea0caca33376487103c64177c295ed2960cca")))
        (sha256
          (base32
            "13wi9mkj1qhypii8zagxg0cly2pp8kvj3h76iij6yfizdhxq026r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-dash))
    (home-page "https://github.com/asok/rake.el")
    (synopsis "Run rake commands")
    (description
      "Documentation at https://melpa.org/#/rake")
    (license #f)))

(define-public emacs-raku-mode
  (package
    (name "emacs-raku-mode")
    (version "20210927.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Raku/raku-mode.git")
               (commit
                 "977b14a7c1295ebf2aad2f807d3f8e7c27aeb47f")))
        (sha256
          (base32
            "14r1m1iw123y623dxcbjmzn8dpmixc3l7s5svxxs0msxnh5b4fcy"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "nqp-mode.el"))))
    (home-page
      "https://github.com/hinrik/perl6-mode")
    (synopsis "Major mode for editing Raku code")
    (description
      "Documentation at https://melpa.org/#/raku-mode")
    (license #f)))

(define-public emacs-rally-mode
  (package
    (name "emacs-rally-mode")
    (version "20161114.354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanleblanc/rally-mode.git")
               (commit
                 "0f5e09a6abe2de7613f174b4f54863df93343134")))
        (sha256
          (base32
            "1vrsv8ph1v853ii0i3q889xlwxnjdqz4bs3ipi502rjx6g7y5gdz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popwin))
    (home-page "https://pragcraft.wordpress.com/")
    (synopsis
      "a mode to interact with the Rally Software web site.")
    (description
      "Documentation at https://melpa.org/#/rally-mode")
    (license #f)))

(define-public emacs-rand-theme
  (package
    (name "emacs-rand-theme")
    (version "20151219.2335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gopar/rand-theme.git")
               (commit
                 "65a00e5c5150f857aa96803b68f50bc8da0215b7")))
        (sha256
          (base32
            "0fmajgqf9j21qn7h35sky5di8cnma432g0ki9d5m41byxp9y1bdl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gopar/rand-theme")
    (synopsis "Random Emacs theme at start-up!")
    (description
      "Documentation at https://melpa.org/#/rand-theme")
    (license #f)))

(define-public emacs-random-splash-image
  (package
    (name "emacs-random-splash-image")
    (version "20151003.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kakakaya/random-splash-image.git")
               (commit
                 "53a39ebfd8ac6be066a652a508a717870f94218a")))
        (sha256
          (base32
            "1mky9xhghzz34sswqm2v3jhfc25fdrjx4hh4a1hs4h45g1v58lm9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kakakaya/random-splash-image")
    (synopsis
      "Randomly sets splash image to *GNU Emacs* buffer on startup.")
    (description
      "Documentation at https://melpa.org/#/random-splash-image")
    (license #f)))

(define-public emacs-ranger
  (package
    (name "emacs-ranger")
    (version "20210125.330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralesi/ranger.el.git")
               (commit
                 "2498519cb21dcd5791d240607a72a204d1761668")))
        (sha256
          (base32
            "1wzshhg6dchny9drm8lf8sw4s24icgyb4my58xvhm55dp4zl5p3b"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ralesi/ranger")
    (synopsis "Make dired more like ranger")
    (description
      "Documentation at https://melpa.org/#/ranger")
    (license #f)))

(define-public emacs-rase
  (package
    (name "emacs-rase")
    (version "20120928.2045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00natic/rase.git")
               (commit
                 "59b5f7e8102570b65040e8d55781c7ea28de7338")))
        (sha256
          (base32
            "1i16361klpdsxphcjdpxqswab3ing69j1wb9nygws7ghil85h0bx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/m00natic/rase/")
    (synopsis "Run At Sun Event daemon")
    (description
      "Documentation at https://melpa.org/#/rase")
    (license #f)))

(define-public emacs-rats
  (package
    (name "emacs-rats")
    (version "20170818.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ane/rats.el.git")
               (commit
                 "a6d55aebcc54f669c6c6ffedf84364c4097903cc")))
        (sha256
          (base32
            "0cskw05jb7wckhfs2qs9pn5icxa93ay2mw2i1brsmdd0igz34lg3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-go-mode))
    (home-page "unspecified")
    (synopsis "Rapid testing suite for Go")
    (description
      "Documentation at https://melpa.org/#/rats")
    (license #f)))

(define-public emacs-raycast-mode
  (package
    (name "emacs-raycast-mode")
    (version "20230607.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nhojb/raycast-mode.git")
               (commit
                 "f6401605cc9dfacdcaaf98d5844348b818cfc010")))
        (sha256
          (base32
            "0brjhxcwvy31h7dnmqxrl2l3w9cx0gk43zgm1vcx7v8i7bvfnhph"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nhojb/raycast-mode")
    (synopsis "Develop Raycast Extensions")
    (description
      "Documentation at https://melpa.org/#/raycast-mode")
    (license #f)))

(define-public emacs-rbenv
  (package
    (name "emacs-rbenv")
    (version "20141120.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/senny/rbenv.el.git")
               (commit
                 "2ea1a5bdc1266caef1dd77700f2c8f42429b03f1")))
        (sha256
          (base32
            "0yd0rs6fnc6lsfi7pivw5sivh698055r8ifj9vrxb82dcx2y6v2h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/senny/rbenv.el")
    (synopsis "Emacs integration for rbenv")
    (description
      "Documentation at https://melpa.org/#/rbenv")
    (license #f)))

(define-public emacs-rbs-mode
  (package
    (name "emacs-rbs-mode")
    (version "20210430.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ybiquitous/rbs-mode.git")
               (commit
                 "fd766a943d5f1f0624e10ffce096b9aaba14a5f4")))
        (sha256
          (base32
            "1gl5wqdyaqvdv0557idycfzgr5gvzvlv11jwccq43v6dmvydam15"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ybiquitous/rbs-mode")
    (synopsis "A major mode for RBS")
    (description
      "Documentation at https://melpa.org/#/rbs-mode")
    (license #f)))

(define-public emacs-rbt
  (package
    (name "emacs-rbt")
    (version "20170202.2302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joeheyming/rbt.el.git")
               (commit
                 "32bfba9062a014e375451cf4203c29535b5efc1e")))
        (sha256
          (base32
            "0jzhyf42m9gqcnsz9gxc9wk8bbb9a7fj78swwyj0wqn9jm8jxbra"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-magit))
    (home-page "unspecified")
    (synopsis "Integrate reviewboard with emacs.")
    (description
      "Documentation at https://melpa.org/#/rbt")
    (license #f)))

(define-public emacs-rbtagger
  (package
    (name "emacs-rbtagger")
    (version "20211026.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thiagoa/rbtagger.git")
               (commit
                 "351c4006ddacc2f66e6ff8c79d981613e9a8bd22")))
        (sha256
          (base32
            "1ycjw62wlnkbbanqrz6my6xrfffcs9rnf27ihvmwni5k2carv9p0"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://www.github.com/thiagoa/rbtagger")
    (synopsis "Ruby tagging tools")
    (description
      "Documentation at https://melpa.org/#/rbtagger")
    (license #f)))

(define-public emacs-rc-mode
  (package
    (name "emacs-rc-mode")
    (version "20160913.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrhmouse/rc-mode.el.git")
               (commit
                 "fe2e0570bf9c19a292e16b18fd4b0a256df5d93f")))
        (sha256
          (base32
            "0skjg3l3ss8nlrpnpjjflmf7wjib4jfarkmx4438nc6vm6553fmn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrhmouse/rc-mode.el")
    (synopsis "Major mode for the Plan9 rc shell")
    (description
      "Documentation at https://melpa.org/#/rc-mode")
    (license #f)))

(define-public emacs-rcirc-alert
  (package
    (name "emacs-rcirc-alert")
    (version "20141127.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csantosb/rcirc-alert.git")
               (commit
                 "0adf8ff9c47023fec578f678424be62b0f49057f")))
        (sha256
          (base32
            "0xdyrp0zs2v2glpfwlajmj97wygwi0y492zbp6rp3caa5bj3j4z2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.sh")))
    (home-page "unspecified")
    (synopsis
      "Configurable alert messages on top of RCIRC")
    (description
      "Documentation at https://melpa.org/#/rcirc-alert")
    (license #f)))

(define-public emacs-rcirc-alertify
  (package
    (name "emacs-rcirc-alertify")
    (version "20140407.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/rcirc-alertify.git")
               (commit
                 "ea5cafc55893f375eccbe013d12dbaa94bf6e259")))
        (sha256
          (base32
            "1mpk5rzsil298q3ppv5v9jrn274v71jffyz0jihrksh1wbjzwhlx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-alert))
    (home-page "unspecified")
    (synopsis
      "Cross platform notifications for rcirc")
    (description
      "Documentation at https://melpa.org/#/rcirc-alertify")
    (license #f)))

(define-public emacs-rcirc-groups
  (package
    (name "emacs-rcirc-groups")
    (version "20170731.2101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/rcirc-groups.git")
               (commit
                 "b68ece9d219b909244d4e3c0d8bf6a746d6fead7")))
        (sha256
          (base32
            "196x3qg22rhh917diml1q0hszqrqwg0klzp96q1c7c744mlq82fx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("rcirc-groups.el")))
    (home-page
      "http://tapoueh.org/emacs/rcirc-groups.html")
    (synopsis
      "an emacs buffer in rcirc-groups major mode")
    (description
      "Documentation at https://melpa.org/#/rcirc-groups")
    (license #f)))

(define-public emacs-rcirc-notify
  (package
    (name "emacs-rcirc-notify")
    (version "20150219.2204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/rcirc-notify.git")
               (commit
                 "841a7b5a6cdb0c11a812df924d2c6a7d364fd455")))
        (sha256
          (base32
            "1k4knsrca626pikgaalqbqwy7im4wz1vrmzzhdrdb4lhdz6sq3q3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "libnotify popups")
    (description
      "Documentation at https://melpa.org/#/rcirc-notify")
    (license #f)))

(define-public emacs-rcirc-styles
  (package
    (name "emacs-rcirc-styles")
    (version "20210414.1712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaron-em/rcirc-styles.el.git")
               (commit
                 "dd06ec5fa455131788bbc885fcfaaec16b08f13b")))
        (sha256
          (base32
            "116qvavvw72vkahknb7g7w7knaximw3m1pq6hic7h13xj8xqxz2w"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "support mIRC-style color and attribute codes")
    (description
      "Documentation at https://melpa.org/#/rcirc-styles")
    (license #f)))

(define-public emacs-rdf-prefix
  (package
    (name "emacs-rdf-prefix")
    (version "20230321.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/simenheg/rdf-prefix.git")
               (commit
                 "70d1ef453fc55f0bfbb4bd3127112332e5b0f623")))
        (sha256
          (base32
            "1jbbaq9h9k2gacrd0kwsav0s5w682wdxgs6pkj9d3c0zg5c3m8mk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/simenheg/rdf-prefix")
    (synopsis "Prefix lookup for RDF")
    (description
      "Documentation at https://melpa.org/#/rdf-prefix")
    (license #f)))

(define-public emacs-rdxmk
  (package
    (name "emacs-rdxmk")
    (version "20170630.134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jsalzbergedu/rdxmk.git")
               (commit
                 "e78749fb29738365ffa4d863ffabeb969ebb0bcf")))
        (sha256
          (base32
            "0gwlqjk84ih89c2ckx0rrw07jgwd32wfwj4mibchdrn0ai891md0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jsalzbergedu/rdxmk")
    (synopsis
      "A small set of tools for redox developments")
    (description
      "Documentation at https://melpa.org/#/rdxmk")
    (license #f)))

(define-public emacs-react-snippets
  (package
    (name "emacs-react-snippets")
    (version "20210430.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johnmastro/react-snippets.el.git")
               (commit
                 "969c21734dab638057fe9e284f6a51edcc3407c9")))
        (sha256
          (base32
            "0sdh2qaa6fb11y3h8xy0f6frisan2bkxrk68r89bq875g21z8jfr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis "Yasnippets for React")
    (description
      "Documentation at https://melpa.org/#/react-snippets")
    (license #f)))

(define-public emacs-read-aloud
  (package
    (name "emacs-read-aloud")
    (version "20160923.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gromnitsky/read-aloud.el.git")
               (commit
                 "c662366226abfb07204ab442b4f853ed85438d8a")))
        (sha256
          (base32
            "0wmfjbk3s45wj8j6xwfdldxwkrxsfcby2a242r2p88y3f8pp30i1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gromnitsky/read-aloud.el")
    (synopsis "A simple interface to TTS engines")
    (description
      "Documentation at https://melpa.org/#/read-aloud")
    (license #f)))

(define-public emacs-read-only-cfg
  (package
    (name "emacs-read-only-cfg")
    (version "20210717.205")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pfchen/read-only-cfg.git")
               (commit
                 "a4e50d4fbf48970e98b2464e13f46e51a4c43c37")))
        (sha256
          (base32
            "1mbnyp2xknymfs2nrcw572plrwxgjacrysxaf5szr75vn2vh11nl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pfchen/read-only-cfg")
    (synopsis
      "Make files read-only based on user config")
    (description
      "Documentation at https://melpa.org/#/read-only-cfg")
    (license #f)))

(define-public emacs-readable-numbers
  (package
    (name "emacs-readable-numbers")
    (version "20220711.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Titan-C/cardano.el.git")
               (commit
                 "a3ebdcdd91d32f044b68541a00e162396e4acb38")))
        (sha256
          (base32
            "1jmlg5rbgam3s9n7blmk2b9r9ggzdvsbry1fdsx5gipymbldx1gg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("readable-numbers.el")))
    (home-page
      "https://github.com/Titan-C/cardano.el")
    (synopsis "Visually separate long integers")
    (description
      "Documentation at https://melpa.org/#/readable-numbers")
    (license #f)))

(define-public emacs-readline-complete
  (package
    (name "emacs-readline-complete")
    (version "20150708.1437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/monsanto/readline-complete.el.git")
               (commit
                 "30c020c37b2741160cc37e656e13c85d826a0ebf")))
        (sha256
          (base32
            "1j5b5xapflwzh8a297gva0l12ralwa9vl5z3bb75c9ksjkhi4nm6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "offers completions in shell mode")
    (description
      "Documentation at https://melpa.org/#/readline-complete")
    (license #f)))

(define-public emacs-real-auto-save
  (package
    (name "emacs-real-auto-save")
    (version "20200505.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ChillarAnand/real-auto-save.git")
               (commit
                 "481a2d1460ab5a9b6df3721dda76ad515923bfd1")))
        (sha256
          (base32
            "1f1sqbqc0ckp7850ahvy0syky7lplwhb05r3cw4fdmz2xbywwg52"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("real-auto-save.el")))
    (home-page
      "https://github.com/ChillarAnand/real-auto-save")
    (synopsis
      "Automatically save your buffers/files at regular intervals")
    (description
      "Documentation at https://melpa.org/#/real-auto-save")
    (license #f)))

(define-public emacs-realgud
  (package
    (name "emacs-realgud")
    (version "20231021.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud.git")
               (commit
                 "445340ebc5819eeedd73695c9182349349c90b6a")))
        (sha256
          (base32
            "1x493djnj5012c7jr29gmzy6sdw7s6xh855dgslr16aqimkz7zg8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative
            emacs-loc-changes
            emacs-test-simple))
    (arguments
      '(#:files
        ("realgud.el"
         "realgud/.nosearch"
         "realgud-recursive-autoloads.el"
         ("realgud/common" "realgud/common/*.el")
         ("realgud/common/buffer"
          "realgud/common/buffer/*.el")
         ("realgud/debugger/bashdb"
          "realgud/debugger/bashdb/*.el")
         ("realgud/debugger/gdb"
          "realgud/debugger/gdb/*.el")
         ("realgud/debugger/gub"
          "realgud/debugger/gub/*.el")
         ("realgud/debugger/ipdb"
          "realgud/debugger/ipdb/*.el")
         ("realgud/debugger/jdb"
          "realgud/debugger/jdb/*.el")
         ("realgud/debugger/kshdb"
          "realgud/debugger/kshdb/*.el")
         ("realgud/debugger/nodejs"
          "realgud/debugger/nodejs/*.el")
         ("realgud/debugger/pdb"
          "realgud/debugger/pdb/*.el")
         ("realgud/debugger/perldb"
          "realgud/debugger/perldb/*.el")
         ("realgud/debugger/rdebug"
          "realgud/debugger/rdebug/*.el")
         ("realgud/debugger/remake"
          "realgud/debugger/remake/*.el")
         ("realgud/debugger/trepan"
          "realgud/debugger/trepan/*.el")
         ("realgud/debugger/trepan.pl"
          "realgud/debugger/trepan.pl/*.el")
         ("realgud/debugger/trepan2"
          "realgud/debugger/trepan2/*.el")
         ("realgud/debugger/trepan3k"
          "realgud/debugger/trepan3k/*.el")
         ("realgud/debugger/trepanjs"
          "realgud/debugger/trepanjs/*.el")
         ("realgud/debugger/zshdb"
          "realgud/debugger/zshdb/*.el")
         ("realgud/lang" "realgud/lang/*.el"))))
    (home-page "https://github.com/realgud/realgud/")
    (synopsis
      "A modular front-end for interacting with external debuggers")
    (description
      "Documentation at https://melpa.org/#/realgud")
    (license #f)))

(define-public emacs-realgud-byebug
  (package
    (name "emacs-realgud-byebug")
    (version "20190520.1140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-byebug.git")
               (commit
                 "f8f20b92c6b13f75cc9797921c0e28d3def48b1c")))
        (sha256
          (base32
            "1f6g5ajimha2n45dykc2vrpdd25ylwrn98fijj3i9m8n0f7jyjrn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        ("realgud-byebug.el" ("byebug" "byebug/*.el"))))
    (home-page
      "http://github.com/rocky/realgud-byebug")
    (synopsis
      "Realgud front-end to the Ruby byebug debugger")
    (description
      "Documentation at https://melpa.org/#/realgud-byebug")
    (license #f)))

(define-public emacs-realgud-ipdb
  (package
    (name "emacs-realgud-ipdb")
    (version "20200722.1116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-ipdb.git")
               (commit
                 "f18f907aa4ddd3e59dc19ca296d4ee2dc5e436b0")))
        (sha256
          (base32
            "196zy8xmqkm6nc7074gsy4ymm6h4ikbd01f41karys7dwib3gg5i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files (:defaults ("ipdb" "ipdb/*.el"))))
    (home-page
      "https://github.com/realgud/realgud-ipdb")
    (synopsis "Realgud front-end to ipdb")
    (description
      "Documentation at https://melpa.org/#/realgud-ipdb")
    (license #f)))

(define-public emacs-realgud-jdb
  (package
    (name "emacs-realgud-jdb")
    (version "20200722.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-jdb.git")
               (commit
                 "1c183b2f8aae0de60942ea01444b896bf182c66a")))
        (sha256
          (base32
            "1i80llf9bncd5hkrk0wj3xswd36q1rkv5gaqgfqq4r1f8dkrhrz1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        (:defaults ("realgud-jdb" "realgud-jdb/*.el"))))
    (home-page
      "https://github.com/realgud/realgud-jdb")
    (synopsis
      "Realgud front-end to Java's jdb debugger\"")
    (description
      "Documentation at https://melpa.org/#/realgud-jdb")
    (license #f)))

(define-public emacs-realgud-lldb
  (package
    (name "emacs-realgud-lldb")
    (version "20230201.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-lldb.git")
               (commit
                 "74d442abc8469bb6277702f9c60fa479848009b2")))
        (sha256
          (base32
            "150p7yk0x4apszvkh6sv9iwjv5amzjvlj9ydk9w46bxfypxr29p1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative emacs-realgud))
    (arguments
      '(#:files (:defaults ("lldb" "lldb/*.el"))))
    (home-page
      "http://github.com/realgud/realgud-lldb")
    (synopsis "Realgud front-end to lldb")
    (description
      "Documentation at https://melpa.org/#/realgud-lldb")
    (license #f)))

(define-public emacs-realgud-node-debug
  (package
    (name "emacs-realgud-node-debug")
    (version "20190525.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-node-debug.git")
               (commit
                 "72e786359ce9dace1796b0d81a00e9340e9c90ad")))
        (sha256
          (base32
            "1zn465bikzv1aizjjcnzsx105pdwwarqmd1fij82rhrspc8p8zis"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        (:defaults
          ("realgud-node-debug" "realgud-node-debug/*.el"))))
    (home-page
      "http://github.com/realgud/realgud-node-debug")
    (synopsis
      "Realgud front-end to older \"node debug\"")
    (description
      "Documentation at https://melpa.org/#/realgud-node-debug")
    (license #f)))

(define-public emacs-realgud-node-inspect
  (package
    (name "emacs-realgud-node-inspect")
    (version "20190523.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-node-inspect.git")
               (commit
                 "c3ed48cf3bc2b28f9fd23bcf60ea13a3cf019fc8")))
        (sha256
          (base32
            "00ywz4kp90wkfi1ncn9zj6vjw9igiv34gvx6fqfi8ha3q5xljzps"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        (:defaults
          ("realgud-node-inspect"
           "realgud-node-inspect/*.el"))))
    (home-page
      "http://github.com/realgud/realgud-node-inspect")
    (synopsis
      "Realgud front-end to newer \"node inspect\"")
    (description
      "Documentation at https://melpa.org/#/realgud-node-inspect")
    (license #f)))

(define-public emacs-realgud-old-debuggers
  (package
    (name "emacs-realgud-old-debuggers")
    (version "20190520.1150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-old-debuggers.git")
               (commit
                 "0fad38283e885c452160232e01adf3f6ae51983b")))
        (sha256
          (base32
            "01x819j80yc5ybwaz5xglibv88r2aah5gqxwi1q9azd6f70zanvi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        ("realgud-old-debuggers.el"
         ("pydb" "pydb/*.el")
         ("pydbgr" "pydbgr/*.el")
         ("trepan8" "trepan8/*.el")
         ("trepanx" "trepanx/*.el"))))
    (home-page
      "http://github.com/rocky/realgud-old-debuggers")
    (synopsis
      "Realgud front-end to older lesser-used debuggers")
    (description
      "Documentation at https://melpa.org/#/realgud-old-debuggers")
    (license #f)))

(define-public emacs-realgud-pry
  (package
    (name "emacs-realgud-pry")
    (version "20201011.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-pry.git")
               (commit
                 "264ca6811b0bef5de4decc54acfeacf0bce2f51f")))
        (sha256
          (base32
            "0v3g23x5q04g45av74snf6a3hyghd40lnagr231g5xs1wc6c3plc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files ("realgud-pry.el" ("pry" "pry/*.el"))))
    (home-page "http://github.com/rocky/realgud-pry")
    (synopsis
      "Realgud front-end to the Ruby pry debugger")
    (description
      "Documentation at https://melpa.org/#/realgud-pry")
    (license #f)))

(define-public emacs-realgud-rdb2
  (package
    (name "emacs-realgud-rdb2")
    (version "20190520.1146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-ruby-debugger2.git")
               (commit
                 "3594aa74f7afda3c3251bb2af7fe0e8ec6d621ae")))
        (sha256
          (base32
            "1nalr0yd1wvqdf81nidxmh9fr3ncqdjb706p6832fsmbpk7r9haw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-realgud emacs-load-relative))
    (arguments
      '(#:files
        ("realgud-rdb2.el" ("rdb2" "rdb2/*.el"))))
    (home-page
      "http://github.com/rocky/realgud-ruby-debugger2")
    (synopsis
      "Realgud front-end for interacting with Ruby debugger2")
    (description
      "Documentation at https://melpa.org/#/realgud-rdb2")
    (license #f)))

(define-public emacs-realgud-trepan-ni
  (package
    (name "emacs-realgud-trepan-ni")
    (version "20210513.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/realgud/realgud-trepan-ni.git")
               (commit
                 "0ec088ea343835e24ae73da09bea96bfb02a3130")))
        (sha256
          (base32
            "109v1kc29qqgabzjq9118jyw800zhl9yxykmgfl1zrpiyq6disz4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-load-relative emacs-realgud))
    (arguments
      '(#:files
        (:defaults ("trepan-ni" "trepan-ni/*.el"))))
    (home-page
      "https://github.com/realgud/realgud-trepan-ni")
    (synopsis "Realgud front-end to trepan-ni")
    (description
      "Documentation at https://melpa.org/#/realgud-trepan-ni")
    (license #f)))

(define-public emacs-reaper
  (package
    (name "emacs-reaper")
    (version "20231104.2100")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xendk/reaper.git")
               (commit
                 "c78a06b0d10c08ec4090ba61b964022e54415aa5")))
        (sha256
          (base32
            "0kn41lbihrmwjbly3kk7fn47ig80vnciw6kf7pidsqcxagcvwj0y"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/xendk/reaper")
    (synopsis
      "Interact with Harvest time tracking app")
    (description
      "Documentation at https://melpa.org/#/reaper")
    (license #f)))

(define-public emacs-reason-mode
  (package
    (name "emacs-reason-mode")
    (version "20230405.517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/reasonml-editor/reason-mode.git")
               (commit
                 "d657ff75572a8ea7eda6fe22ada3a2ebf5bc6119")))
        (sha256
          (base32
            "07qz5509yw76x0jbbiz80lvp0qmg00bzappcl8n3mkfwwnhwmg0w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/reasonml-editor/reason-mode")
    (synopsis "A major mode for editing ReasonML")
    (description
      "Documentation at https://melpa.org/#/reason-mode")
    (license #f)))

(define-public emacs-reazon
  (package
    (name "emacs-reazon")
    (version "20211229.1733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nickdrozd/reazon.git")
               (commit
                 "f31c8b2e911c5885551d063c0a2b5de49a646eb1")))
        (sha256
          (base32
            "1w8gv48ixf4fp35isr4jlnwygwqh8q04i3bbgwf3zldpzgmm3iwa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nickdrozd/reazon")
    (synopsis "miniKanren for Emacs")
    (description
      "Documentation at https://melpa.org/#/reazon")
    (license #f)))

(define-public emacs-rebecca-theme
  (package
    (name "emacs-rebecca-theme")
    (version "20180324.821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vic/rebecca-theme.git")
               (commit
                 "4b8b5aae9099185e07c2b4cac4943c7f66a3f003")))
        (sha256
          (base32
            "0y2kcs6zgi3dijagyz6lxbv6gi2mih8m943fhjrzkj35wfvjmhsz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vic/rebecca-theme")
    (synopsis "Rebecca Purple Theme")
    (description
      "Documentation at https://melpa.org/#/rebecca-theme")
    (license #f)))

(define-public emacs-rebox2
  (package
    (name "emacs-rebox2")
    (version "20121113.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/rebox2.git")
               (commit
                 "00634eca420cc48657b81e40e599ff8548083985")))
        (sha256
          (base32
            "1xh9nxqfg9abcl41ni69rnwjfgyfr0pbl55dzyxsbh6sb36r3h8z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lewang/rebox2")
    (synopsis
      "Handling of comment boxes in various styles.")
    (description
      "Documentation at https://melpa.org/#/rebox2")
    (license #f)))

(define-public emacs-recentf-ext
  (package
    (name "emacs-recentf-ext")
    (version "20170926.35")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/recentf-ext.git")
               (commit
                 "450de5f8544ed6414e88d4924d7daa5caa55b7fe")))
        (sha256
          (base32
            "1jylpqgngbl594a1qvd305m9lda48cib4dsasimdqxp20d4c56iy"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/recentf-ext.el")
    (synopsis "Recentf extensions")
    (description
      "Documentation at https://melpa.org/#/recentf-ext")
    (license #f)))

(define-public emacs-recentf-remove-sudo-tramp-prefix
  (package
    (name "emacs-recentf-remove-sudo-tramp-prefix")
    (version "20220621.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ncaq/recentf-remove-sudo-tramp-prefix.git")
               (commit
                 "95ff600058371dd08f615095a55850d2910021bb")))
        (sha256
          (base32
            "1nvrc61lcyij2y64hbrsap9fc2lxx2srg763wyvhclzdi4lk4px6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ncaq/recentf-remove-sudo-tramp-prefix")
    (synopsis "Normalise recentf history")
    (description
      "Documentation at https://melpa.org/#/recentf-remove-sudo-tramp-prefix")
    (license #f)))

(define-public emacs-recently
  (package
    (name "emacs-recently")
    (version "20210930.207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/recently-el.git")
               (commit
                 "94b31f6bf1dab6af942948fec975e37424938a62")))
        (sha256
          (base32
            "06kx2aykxzj60axsxjvqx2j8z3p19k47i0prbqfg78cjgv7fdwy6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/10sr/recently-el")
    (synopsis
      "Track recently opened files to visit them again")
    (description
      "Documentation at https://melpa.org/#/recently")
    (license #f)))

(define-public emacs-recompile-on-save
  (package
    (name "emacs-recompile-on-save")
    (version "20151126.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/maio/recompile-on-save.el.git")
               (commit
                 "92e11446869d878803d4f3dec5d2101380c12bb2")))
        (sha256
          (base32
            "0wk28blnfks987iby0p3qpd4nxnz6sqn4fx8g59gyddjhav51lri"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/maio/recompile-on-save.el")
    (synopsis "Trigger recompilation on file save.")
    (description
      "Documentation at https://melpa.org/#/recompile-on-save")
    (license #f)))

(define-public emacs-recomplete
  (package
    (name "emacs-recomplete")
    (version "20230910.1154")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/recomplete-"
               version
               ".tar"))
        (sha256
          (base32
            "196r5bmj4gn13vn4x5p8xl1ahkdv70hknpjgg0z0b5z03sb01vz2"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-recomplete")
    (synopsis "Immediately (re)complete actions")
    (description
      "Documentation at https://melpa.org/#/recomplete")
    (license #f)))

(define-public emacs-recover-buffers
  (package
    (name "emacs-recover-buffers")
    (version "20171009.437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tripleee/recover-buffers.git")
               (commit
                 "81a5cb53099955ebc2a411a44cba5a394ee3f2d1")))
        (sha256
          (base32
            "07dfdvz5rn5l13xdycd7h75zaq0pw2afb9n1yiq01fqk6gvrhc5b"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "revisit all buffers from an auto-save file")
    (description
      "Documentation at https://melpa.org/#/recover-buffers")
    (license #f)))

(define-public emacs-rect+
  (package
    (name "emacs-rect+")
    (version "20150621.44")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-rectplus.git")
               (commit
                 "299b742faa0bc4448e0d5fe9cb98ab1eb93b8dcc")))
        (sha256
          (base32
            "1vpsihrl03hkd6n6b7mrjccm0a023qf3154a8rw4chihikxw27pj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-rectplus")
    (synopsis "Extensions to rect.el")
    (description
      "Documentation at https://melpa.org/#/rect+")
    (license #f)))

(define-public emacs-rectangle-utils
  (package
    (name "emacs-rectangle-utils")
    (version "20190411.1757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/rectangle-utils.git")
               (commit
                 "46f7e73340fee40c1ab9a4e766a08ae3fce83ebe")))
        (sha256
          (base32
            "0dcga10lg2bl1p259s78jib7pd03v183hima8aksfr0c84s438yq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/rectangle-utils")
    (synopsis "Some useful rectangle functions.")
    (description
      "Documentation at https://melpa.org/#/rectangle-utils")
    (license #f)))

(define-public emacs-recur
  (package
    (name "emacs-recur")
    (version "20230121.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/recur.git")
               (commit
                 "043b3267125cb9fa273d0f0afee0dda1fc60c507")))
        (sha256
          (base32
            "1wn4ayb1f186k1h0c4p893gpc3ldlslrj5wh1jqrv1ffqlnn4lw9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/recur")
    (synopsis "Tail call optimization")
    (description
      "Documentation at https://melpa.org/#/recur")
    (license #f)))

(define-public emacs-recursion-indicator
  (package
    (name "emacs-recursion-indicator")
    (version "20230924.818")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/recursion-indicator.git")
               (commit
                 "52b40acd95d1be370cad90805acd6f1a9a02f596")))
        (sha256
          (base32
            "029a0nf8rh6kc4kjr2l344r3q1ysk2ayhhmim0181r0zgyrfs51b"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/minad/recursion-indicator")
    (synopsis "Recursion indicator")
    (description
      "Documentation at https://melpa.org/#/recursion-indicator")
    (license #f)))

(define-public emacs-recursive-narrow
  (package
    (name "emacs-recursive-narrow")
    (version "20190306.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/recursive-narrow.git")
               (commit
                 "5e3e2067d5a148d7e64e64e0355d3b6860e4c259")))
        (sha256
          (base32
            "1dxghz1fb2l7y7qphqk0kk732vazlk1n1fl6dlqhqhccj450h2qa"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nflath/recursive-narrow")
    (synopsis
      "narrow-to-region that operates recursively")
    (description
      "Documentation at https://melpa.org/#/recursive-narrow")
    (license #f)))

(define-public emacs-redacted
  (package
    (name "emacs-redacted")
    (version "20220108.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bkaestner/redacted.el.git")
               (commit
                 "c4ea6cbffda9c67af112f25b2db2843aa4abce85")))
        (sha256
          (base32
            "1p693dbnx2vq2a7fps28nxd37jcdw4iba2fkac6qf02sqa2xwxk9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bkaestner/redacted.el")
    (synopsis "Obscure text in buffer")
    (description
      "Documentation at https://melpa.org/#/redacted")
    (license #f)))

(define-public emacs-reddigg
  (package
    (name "emacs-reddigg")
    (version "20230810.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-reddigg.git")
               (commit
                 "37f048ec03d02acaf6f5c73802677f10b2dfe031")))
        (sha256
          (base32
            "11w1p3z4mr8wly96a0jianf7qfzb0la2jnv6iwhqdx4752h0zq2v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-promise emacs-ht emacs-request))
    (home-page
      "https://github.com/thanhvg/emacs-reddigg")
    (synopsis "A reader for redditt")
    (description
      "Documentation at https://melpa.org/#/reddigg")
    (license #f)))

(define-public emacs-redis
  (package
    (name "emacs-redis")
    (version "20220429.1758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/redis.el.git")
               (commit
                 "a6ad30d6a43b7be083c13f8725b45571d623001a")))
        (sha256
          (base32
            "048jvvxb6cskhs95n2ngl4cfgf8hbqidvbi1xsyb0gyzvvqbrhj1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/redis.el")
    (synopsis "Redis integration")
    (description
      "Documentation at https://melpa.org/#/redis")
    (license #f)))

(define-public emacs-redpen-paragraph
  (package
    (name "emacs-redpen-paragraph")
    (version "20160625.1050")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karronoli/redpen-paragraph.el.git")
               (commit
                 "0062f326106ce8be3c9b7d3fa0e88ed2c7bbfa5e")))
        (sha256
          (base32
            "1y35p2q3xrvn37kligfmkjagkz4b7pl61y2c2g504kjs45v4mqd2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/karronoli/redpen-paragraph.el")
    (synopsis "RedPen interface.")
    (description
      "Documentation at https://melpa.org/#/redpen-paragraph")
    (license #f)))

(define-public emacs-redprl
  (package
    (name "emacs-redprl")
    (version "20180418.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RedPRL/sml-redprl.git")
               (commit
                 "c72190de76f7ed1cfbe1d2046c96e99ac5022b0c")))
        (sha256
          (base32
            "0rbzwkdai9bpcnldrib90p02p36qfgnwk18iz2pcz32xs73frx82"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/*.el")))
    (home-page "unspecified")
    (synopsis
      "Major mode for editing RedPRL proofs and interacting with RedPRL")
    (description
      "Documentation at https://melpa.org/#/redprl")
    (license #f)))

(define-public emacs-redshank
  (package
    (name "emacs-redshank")
    (version "20180730.407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsattic/redshank.git")
               (commit
                 "d059c5841044aa163664f8bf87c1d981bf0a04fe")))
        (sha256
          (base32
            "1545z1dd85zg8sg2r5r5gdnmgxbxwjvl5xklx5nvpd0gbxlwbpqk"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-paredit))
    (home-page "unspecified")
    (synopsis "Common Lisp Editing Extensions")
    (description
      "Documentation at https://melpa.org/#/redshank")
    (license #f)))

(define-public emacs-redtick
  (package
    (name "emacs-redtick")
    (version "20180424.2136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ferfebles/redtick.git")
               (commit
                 "94b4cd43ac20c64dcac96edac2c1a3b9fcc59bb9")))
        (sha256
          (base32
            "1nqbhpxp79zvcxyr5c90b64lrrw5zh6blh91lwssy73zizkh2lcg"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "resources")))
    (home-page "http://github.com/ferfebles/redtick")
    (synopsis "Smallest pomodoro timer (1 char)")
    (description
      "Documentation at https://melpa.org/#/redtick")
    (license #f)))

(define-public emacs-redtt
  (package
    (name "emacs-redtt")
    (version "20181121.21")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RedPRL/redtt.git")
               (commit
                 "49783bd5d83c1d1989838b5ecf4a240bcc994243")))
        (sha256
          (base32
            "163kj0hmvn7vgd86q0dhz3zimkiqabzylyvchnzaqc2y1mp4qhfk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/*.el")))
    (home-page "http://github.com/RedPRL/redtt")
    (synopsis "Major mode for editing redtt proofs")
    (description
      "Documentation at https://melpa.org/#/redtt")
    (license #f)))

(define-public emacs-refine
  (package
    (name "emacs-refine")
    (version "20200507.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/refine.git")
               (commit
                 "d72fa50910b86217a35bb1b7e56adea206052021")))
        (sha256
          (base32
            "02cb30ycwyqhdw54s3abb4xsdyqlpi6i8xi7rkl85avvgy2gif8y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-list-utils
            emacs-loop))
    (home-page "unspecified")
    (synopsis "interactive value editing")
    (description
      "Documentation at https://melpa.org/#/refine")
    (license #f)))

(define-public emacs-reformatter
  (package
    (name "emacs-reformatter")
    (version "20230804.648")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/emacs-reformatter.git")
               (commit
                 "bfe3f1c6ece952d39921db16f601123bdd1748ab")))
        (sha256
          (base32
            "1vm030lz489vjx1dz1jrnj7zd2b43y98rffdxyshfvxbfv1cbmyk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/emacs-reformatter")
    (synopsis
      "Define commands which run reformatters on the current buffer")
    (description
      "Documentation at https://melpa.org/#/reformatter")
    (license #f)))

(define-public emacs-regex-dsl
  (package
    (name "emacs-regex-dsl")
    (version "20220125.506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alk/elisp-regex-dsl.git")
               (commit
                 "8802555ecdab8b50bb64181798497c10cdb5034b")))
        (sha256
          (base32
            "0a3jyxrgr2sqigv86zr9irf0g8rvvc2bwjc3z2m8pbk75hm00k50"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "lisp syntax for regexps")
    (description
      "Documentation at https://melpa.org/#/regex-dsl")
    (license #f)))

(define-public emacs-regex-tool
  (package
    (name "emacs-regex-tool")
    (version "20170104.1918")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/regex-tool.git")
               (commit
                 "0b4a0111143c88ef94bec56624cb2e00c1a054e6")))
        (sha256
          (base32
            "03qm8s7nqsj0pjnnb0p84gk7hvad4bywn3rhr3ibzj6hxqvppbqj"))))
    (build-system melpa-build-system)
    (home-page "http://www.newartisans.com/")
    (synopsis
      "A regular expression evaluation tool for programmers")
    (description
      "Documentation at https://melpa.org/#/regex-tool")
    (license #f)))

(define-public emacs-region-bindings-mode
  (package
    (name "emacs-region-bindings-mode")
    (version "20140407.2214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fgallina/region-bindings-mode.git")
               (commit
                 "3fa5dbdbd7c000bebff6d9d14a4be326ec24b6fc")))
        (sha256
          (base32
            "02kfi3c6ydnr7xw611ck66kfjyl5w86dr9vfjv3wjl6ad9jya4zy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fgallina/region-bindings-mode")
    (synopsis
      "Enable custom bindings when mark is active.")
    (description
      "Documentation at https://melpa.org/#/region-bindings-mode")
    (license #f)))

(define-public emacs-region-convert
  (package
    (name "emacs-region-convert")
    (version "20210519.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/region-convert.el.git")
               (commit
                 "cb3ab0417d7b74e5edd34bf23a70737fc7bf1d3a")))
        (sha256
          (base32
            "1czg5252yrd8l66g7d69yh7ady9i1d0ghj9ypg6psvh37fcg3w31"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/zonuexe/right-click-context")
    (synopsis
      "Convert string in region by Lisp function")
    (description
      "Documentation at https://melpa.org/#/region-convert")
    (license #f)))

(define-public emacs-region-occurrences-highlighter
  (package
    (name "emacs-region-occurrences-highlighter")
    (version "20230408.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alvarogonzalezsotillo/region-occurrences-highlighter.git")
               (commit
                 "3fbac20154035d75238facbc3b881ab3b47ab711")))
        (sha256
          (base32
            "13l2kjkxmmsq8ad07pkdrfwzfr0wp2cx4vz6j4ac0z3nfhng11b1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alvarogonzalezsotillo/region-occurrences-highlighter")
    (synopsis
      "Mark occurrences of current region (selection).")
    (description
      "Documentation at https://melpa.org/#/region-occurrences-highlighter")
    (license #f)))

(define-public emacs-region-state
  (package
    (name "emacs-region-state")
    (version "20181205.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/region-state.el.git")
               (commit
                 "8c636b655eef45e0015684699737d31e15450000")))
        (sha256
          (base32
            "0dlamw4zbg3km7h5zk91f593qsk99q7ppvzsws00bc2rnnaplz5l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/region-state.el")
    (synopsis
      "Show the number of chars/lines or rows/columns in the region")
    (description
      "Documentation at https://melpa.org/#/region-state")
    (license #f)))

(define-public emacs-register-channel
  (package
    (name "emacs-register-channel")
    (version "20210120.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/YangZhao11/register-channel.git")
               (commit
                 "ed7f563e92170b758dc878fcb5df88d46d5d44cc")))
        (sha256
          (base32
            "1ih1s274004faq78fgdxw3gy7i58nbanbp39ax2wi8zz6ivm9lqa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Jump around fast using registers")
    (description
      "Documentation at https://melpa.org/#/register-channel")
    (license #f)))

(define-public emacs-register-quicknav
  (package
    (name "emacs-register-quicknav")
    (version "20200524.2006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://schlomp.space/tastytea/register-quicknav.git")
               (commit
                 "c15ea92b0946c28b3f14986d42b15b0b534aa6a2")))
        (sha256
          (base32
            "03xm5rxhafzngdqnpl884d0zy9qkpx57zbcnh0psalmvswd4d4fh"))))
    (build-system melpa-build-system)
    (home-page
      "https://schlomp.space/tastytea/register-quicknav")
    (synopsis
      "Quickly jump to next/previous register")
    (description
      "Documentation at https://melpa.org/#/register-quicknav")
    (license #f)))

(define-public emacs-rego-mode
  (package
    (name "emacs-rego-mode")
    (version "20201102.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/psibi/rego-mode.git")
               (commit
                 "be110e6cef5d34eef0529a8739c68e619cf15310")))
        (sha256
          (base32
            "1lm53zg30n96bq8z5g836dhk0y02njdyp8c6vjgsrcii4ff42jp5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page "https://github.com/psibi/rego-mode")
    (synopsis "A major mode for rego language")
    (description
      "Documentation at https://melpa.org/#/rego-mode")
    (license #f)))

(define-public emacs-related
  (package
    (name "emacs-related")
    (version "20190327.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/julien-montmartin/related.git")
               (commit
                 "546c7e811b290470288b617f2c27106bd83ccd33")))
        (sha256
          (base32
            "0kn07wgnz5bkkq66qfq16rvw9l7zgh0hzrsa705j1zbd6vc3wygs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/julien-montmartin/related")
    (synopsis
      "Switch back and forth between similarly named buffers.")
    (description
      "Documentation at https://melpa.org/#/related")
    (license #f)))

(define-public emacs-related-files
  (package
    (name "emacs-related-files")
    (version "20230903.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/related-files.git")
               (commit
                 "8020f375013d5e83c9b8117d118d2402c63e66bb")))
        (sha256
          (base32
            "09czvj7rcvcb8h6fh6f2i1fiwk0ghg7n0lx1xppnf9yvwpdxld1s"))))
    (build-system melpa-build-system)
    (home-page "https://www.gnu.org/software/emacs/")
    (synopsis
      "Easily find files related to the current one")
    (description
      "Documentation at https://melpa.org/#/related-files")
    (license #f)))

(define-public emacs-remark-mode
  (package
    (name "emacs-remark-mode")
    (version "20221123.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/torgeir/remark-mode.el.git")
               (commit
                 "5a2a702d2af8fd007ae02237d5824356d0c1acc6")))
        (sha256
          (base32
            "0b6gk1r90m4wrmn0aimlz4xmpk7jnfm38ri80vpikm3alds5wp7d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (arguments
      '(#:files (:defaults "remark.html" "server.js")))
    (home-page "unspecified")
    (synopsis
      "Major mode for the remark slideshow tool")
    (description
      "Documentation at https://melpa.org/#/remark-mode")
    (license #f)))

(define-public emacs-remember-last-theme
  (package
    (name "emacs-remember-last-theme")
    (version "20170619.2133")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anler/remember-last-theme.git")
               (commit
                 "0973f1aa6b96355fa376fffe8b45733b6e963c51")))
        (sha256
          (base32
            "11kcqpw1wrhghbw2dx3pqndmq9a1rbqir3k71ggaj1x2y2arzvm7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anler/remember-last-theme")
    (synopsis
      "Remember the last used theme between sessions.")
    (description
      "Documentation at https://melpa.org/#/remember-last-theme")
    (license #f)))

(define-public emacs-remind-bindings
  (package
    (name "emacs-remind-bindings")
    (version "20200820.1723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/remind-bindings.el.git")
               (commit
                 "c9a327bfd3c68a0c41b5b64df491bdee4c73ca39")))
        (sha256
          (base32
            "1rwlzf9mg66hgdqjgh2garp8qckajs4a1kiqg3xygaf7009kr4nk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-omni-quotes emacs-popwin))
    (home-page
      "https://github.com/mtekman/remind-bindings.el")
    (synopsis "Reminders for your init bindings")
    (description
      "Documentation at https://melpa.org/#/remind-bindings")
    (license #f)))

(define-public emacs-renpy
  (package
    (name "emacs-renpy")
    (version "20200607.135")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Reagankm/renpy-mode.git")
               (commit
                 "f2f95a72a8c842f229f80999132e8ea8ee73f6fc")))
        (sha256
          (base32
            "1jka61j6zrc0yzjcplnyg1kp1d45ikwnkmayjg41v9w0pfrzzim3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/billywade/renpy-mode")
    (synopsis "silly walks for Renpy")
    (description
      "Documentation at https://melpa.org/#/renpy")
    (license #f)))

(define-public emacs-repeat-help
  (package
    (name "emacs-repeat-help")
    (version "20230118.24")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/karthink/repeat-help.git")
               (commit
                 "41dea6fba2edd6ac748d0ca7a6da4058290feede")))
        (sha256
          (base32
            "1lnwb2z8y9cjah545n27j62a5pdksid0rah2bzws9xi8c7dgavkm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/karthink/repeat-help")
    (synopsis "Display keybindings for repeat-mode")
    (description
      "Documentation at https://melpa.org/#/repeat-help")
    (license #f)))

(define-public emacs-repeatable-motion
  (package
    (name "emacs-repeatable-motion")
    (version "20170620.1848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/willghatch/emacs-repeatable-motion.git")
               (commit
                 "f29effdc4121c2dc7e3fec9b3a62debce29cda9d")))
        (sha256
          (base32
            "11s7r5g0djj0yc8ll7jfw5v3m9kyvaiscndnfnvvjw5lwgfyh0v3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/willghatch/emacs-repeatable-motion")
    (synopsis "Make repeatable versions of motions")
    (description
      "Documentation at https://melpa.org/#/repeatable-motion")
    (license #f)))

(define-public emacs-repeater
  (package
    (name "emacs-repeater")
    (version "20180418.1212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/repeater.git")
               (commit
                 "854b874542b186b2408cbc58ad0591fe8eb70b6c")))
        (sha256
          (base32
            "0cx6b8l9ssf56fz8xjsmbyhy8mdcj8l0rvsdx37qk86xq4nlz74p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/repeater")
    (synopsis "Repeat recent repeated commands")
    (description
      "Documentation at https://melpa.org/#/repeater")
    (license #f)))

(define-public emacs-repl-driven-development
  (package
    (name "emacs-repl-driven-development")
    (version "20231023.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alhassy/repl-driven-development.git")
               (commit
                 "8877f692112459095649735ac4d023248b3905ae")))
        (sha256
          (base32
            "19zj743ayv322cz13kilkkl4djpzs9q22z6qhk0ipasy1kdijh57"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-f
            emacs-lf
            emacs-dash
            emacs-eros
            emacs-f
            emacs-devdocs
            emacs-pulsar
            emacs-peg
            emacs-json-navigator))
    (home-page
      "http://alhassy.com/repl-driven-development")
    (synopsis
      "Send arbitrary code to a REPL in the background")
    (description
      "Documentation at https://melpa.org/#/repl-driven-development")
    (license #f)))

(define-public emacs-repl-toggle
  (package
    (name "emacs-repl-toggle")
    (version "20220920.752")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/repl-toggle-"
               version
               ".el"))
        (sha256
          (base32
            "1h0six4iba42g3g90vmrg7by2fw8ikn8s3ng8qrz0gc3wvawdry1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fullframe))
    (home-page "unspecified")
    (synopsis
      "Switch to/from repl buffer for current major-mode")
    (description
      "Documentation at https://melpa.org/#/repl-toggle")
    (license #f)))

(define-public emacs-replace-from-region
  (package
    (name "emacs-replace-from-region")
    (version "20170227.2316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/replace-from-region.git")
               (commit
                 "dc9318b9b2822da7b00ecc34d1dc965c8f96c9bb")))
        (sha256
          (base32
            "05l0wn1gqw2sbl65s1m7afmg3b1ps2qgqqrjkl9r2i26p95kqlq3"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/replace-from-region.el")
    (synopsis
      "Replace commands whose query is from region")
    (description
      "Documentation at https://melpa.org/#/replace-from-region")
    (license #f)))

(define-public emacs-replace-pairs
  (package
    (name "emacs-replace-pairs")
    (version "20160207.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/replace-pairs.git")
               (commit
                 "acfb254dddffcee4250092fab9394ef2b42ffbc0")))
        (sha256
          (base32
            "0k7sngs124bk22hcxg1vx0w5p603v0rdh1bs2sbm1gfgvawfdia6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidshepherd7/replace-pairs")
    (synopsis "Query-replace pairs of things")
    (description
      "Documentation at https://melpa.org/#/replace-pairs")
    (license #f)))

(define-public emacs-replace-symbol
  (package
    (name "emacs-replace-symbol")
    (version "20160518.12")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmastenbrook/replace-symbol-el.git")
               (commit
                 "baf949e528aee1881f455f9c84e67718bedcb3f6")))
        (sha256
          (base32
            "178y1cmpdb2r72igx8j4l7pyhs1idw56j6hg5h8r9a2p99lkgjjc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bmastenbrook/replace-symbol-el")
    (synopsis
      "Rename symbols in expressions or buffers")
    (description
      "Documentation at https://melpa.org/#/replace-symbol")
    (license #f)))

(define-public emacs-replace-with-inflections
  (package
    (name "emacs-replace-with-inflections")
    (version "20180831.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/replace-with-inflections.el.git")
               (commit
                 "d9201e047856492f282da65459b28aba25998dbb")))
        (sha256
          (base32
            "09yvn489z33hww7mi1flh344faxrpbkzqhm0i6xb2rridcj7acqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-string-inflection emacs-inflections))
    (home-page
      "https://github.com/knu/replace-with-inflections.el")
    (synopsis "Inflection aware `query-replace'")
    (description
      "Documentation at https://melpa.org/#/replace-with-inflections")
    (license #f)))

(define-public emacs-repo
  (package
    (name "emacs-repo")
    (version "20230821.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/repo-el.git")
               (commit
                 "529623db7c38917709e84d89d518873231139c10")))
        (sha256
          (base32
            "19ms55dd5j2jm0ln5ba1w63q1g348xjwiykng82n5cblvnvpdidp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/canatella/repo-el")
    (synopsis "Running repo from Emacs")
    (description
      "Documentation at https://melpa.org/#/repo")
    (license #f)))

(define-public emacs-req-package
  (package
    (name "emacs-req-package")
    (version "20180605.1141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edvorg/req-package.git")
               (commit
                 "a77da72931914ac5f3f64dc61fe9dc3522b2817e")))
        (sha256
          (base32
            "1z27s6f66922jm2nwl3kqwbhdq398d2y6s1sqm2l4f8xmijv2jyq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-use-package
            emacs-dash
            emacs-log4e
            emacs-ht))
    (home-page
      "https://github.com/edvorg/req-package")
    (synopsis
      "A use-package wrapper for package runtime dependencies management")
    (description
      "Documentation at https://melpa.org/#/req-package")
    (license #f)))

(define-public emacs-request
  (package
    (name "emacs-request")
    (version "20230127.417")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-request.git")
               (commit
                 "01e338c335c07e4407239619e57361944a82cb8a")))
        (sha256
          (base32
            "1arhjsybb1nhq14p06jzbvp25pyp1pddq1ldyq25vj1qrsh81rjq"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("request.el")))
    (home-page
      "https://github.com/tkf/emacs-request")
    (synopsis "Compatible layer for URL request")
    (description
      "Documentation at https://melpa.org/#/request")
    (license #f)))

(define-public emacs-request-deferred
  (package
    (name "emacs-request-deferred")
    (version "20220614.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tkf/emacs-request.git")
               (commit
                 "38ed1d2e64138eb16a9d8ed2987cff2e01b4a93b")))
        (sha256
          (base32
            "0c8jmw4jif6vcizz2ba9yvh334ci45q7alhsayij0rwmwawgykgc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deferred emacs-request))
    (arguments '(#:files ("request-deferred.el")))
    (home-page
      "https://github.com/tkf/emacs-request")
    (synopsis "Wrap request.el by deferred")
    (description
      "Documentation at https://melpa.org/#/request-deferred")
    (license #f)))

(define-public emacs-requirejs
  (package
    (name "emacs-requirejs")
    (version "20151204.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joeheyming/requirejs-emacs.git")
               (commit
                 "4ea2a5fcbc76e4cbb6a7461e6f05f019b75865b1")))
        (sha256
          (base32
            "1bfj2zjn3x41jal6c136wnwkgmag27bmrwbfwdylafc7qqk6dflv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-js2-mode
            emacs-popup
            emacs-s
            emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/joeheyming/requirejs-emacs")
    (synopsis
      "Requirejs import manipulation and source traversal.")
    (description
      "Documentation at https://melpa.org/#/requirejs")
    (license #f)))

(define-public emacs-requirejs-mode
  (package
    (name "emacs-requirejs-mode")
    (version "20130215.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/moricard/requirejs-mode.git")
               (commit
                 "bbb0c09f8eb2d6a33c17319be8137f68bb16bc92")))
        (sha256
          (base32
            "02wva5q8mvc0a5kms2wm1gyaag2x3zd6fkkpl4218nrbb0mbficv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Improved AMD module management")
    (description
      "Documentation at https://melpa.org/#/requirejs-mode")
    (license #f)))

(define-public emacs-rescript-mode
  (package
    (name "emacs-rescript-mode")
    (version "20230321.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjlee/rescript-mode.git")
               (commit
                 "a0a21d1c037c78ba4c05108a5e7afd5f75fe7bd7")))
        (sha256
          (base32
            "11ik71xspqcgyn11f9mkda01vyn9q7bwpbzqjf6yd7yn5b83xrhf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jjlee/rescript-mode")
    (synopsis "A major mode for editing ReScript")
    (description
      "Documentation at https://melpa.org/#/rescript-mode")
    (license #f)))

(define-public emacs-resize-window
  (package
    (name "emacs-resize-window")
    (version "20180918.538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dpsutton/resize-window.git")
               (commit
                 "72018aa4d2401b60120588199d4cedd0dc1fbcfb")))
        (sha256
          (base32
            "1icjmnfxpc5zgnd4hwwwp0008iy1qv6igr5kyv5s062xd6rcs8a1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dpsutton/resize-mode")
    (synopsis "easily resize windows")
    (description
      "Documentation at https://melpa.org/#/resize-window")
    (license #f)))

(define-public emacs-restart-emacs
  (package
    (name "emacs-restart-emacs")
    (version "20201127.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iqbalansari/restart-emacs.git")
               (commit
                 "1607da2bc657fe05ae01f7fdf26f716eafead02c")))
        (sha256
          (base32
            "0afy3icvlj9j6dl3jj6i286mwdhjl7kgvykv1wnbjx2c6gbwfpxa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/iqbalansari/restart-emacs")
    (synopsis "Restart emacs from within emacs")
    (description
      "Documentation at https://melpa.org/#/restart-emacs")
    (license #f)))

(define-public emacs-restclient
  (package
    (name "emacs-restclient")
    (version "20231010.1327")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashky/restclient.el.git")
               (commit
                 "e2a2b13482d72634f8e49864cd9e5c907a5fe137")))
        (sha256
          (base32
            "1s7rkm1j08g64ymi5ayhkw9546av9rkyhnap6ndr0988dkpa7rfm"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("restclient.el")))
    (home-page "unspecified")
    (synopsis "An interactive HTTP client for Emacs")
    (description
      "Documentation at https://melpa.org/#/restclient")
    (license #f)))

(define-public emacs-restclient-helm
  (package
    (name "emacs-restclient-helm")
    (version "20170314.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashky/restclient.el.git")
               (commit
                 "f59a7f5abf366145a2c9c1e9f0a2184139d2adce")))
        (sha256
          (base32
            "0war99vbim62l010gxq3l68ac5w13gs5lh24yn1rpnq2jfp4jn3r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-restclient emacs-helm))
    (arguments '(#:files ("restclient-helm.el")))
    (home-page "unspecified")
    (synopsis "helm interface for restclient.el")
    (description
      "Documentation at https://melpa.org/#/restclient-helm")
    (license #f)))

(define-public emacs-restclient-jq
  (package
    (name "emacs-restclient-jq")
    (version "20220426.1734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashky/restclient.el.git")
               (commit
                 "ae79e7dd283890072da69b8f48aeec1afd0d9442")))
        (sha256
          (base32
            "0hbxrwp8nqd12x9z9krddlcm9b9adjzp1az90ywyr1a30bdmv5sk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-restclient emacs-jq-mode))
    (arguments '(#:files ("restclient-jq.el")))
    (home-page
      "https://github.com/pashky/restclient.el")
    (synopsis
      "Support for setting restclient vars from jq expressions")
    (description
      "Documentation at https://melpa.org/#/restclient-jq")
    (license #f)))

(define-public emacs-restclient-test
  (package
    (name "emacs-restclient-test")
    (version "20210422.1815")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/simenheg/restclient-test.el.git")
               (commit
                 "3c6661d087526510a04ea9de421c5869a1a1d061")))
        (sha256
          (base32
            "0bpvxv8bc671pa0sm4v8pqyla3i99y05mgpbgcjd8pdsfhiwjw7j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-restclient))
    (arguments '(#:files ("restclient-test.el")))
    (home-page
      "https://github.com/simenheg/restclient-test.el")
    (synopsis "Run tests with restclient.el")
    (description
      "Documentation at https://melpa.org/#/restclient-test")
    (license #f)))

(define-public emacs-retrie
  (package
    (name "emacs-retrie")
    (version "20200519.551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Ailrun/emacs-retrie.git")
               (commit
                 "976d6f01a3e214917f16b82e750d825cb9bfcc59")))
        (sha256
          (base32
            "08rwhkx2chphrfqd6l2bjr1w4rn394q8w5iy93cdprl5y56axvp6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Ailrun/emacs-retrie")
    (synopsis "Refactoring Haskell code with retrie")
    (description
      "Documentation at https://melpa.org/#/retrie")
    (license #f)))

(define-public emacs-revbufs
  (package
    (name "emacs-revbufs")
    (version "20200907.2223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tychoish/revbufs.git")
               (commit
                 "df3c02d3063951582c693ae12547993cec8256e2")))
        (sha256
          (base32
            "087drifqzap5nh6ias109wsk0ndc2yp7xp62k7n2imp3m4wlq77z"))))
    (build-system melpa-build-system)
    (home-page "http://www.neilvandyke.org/revbufs/")
    (synopsis
      "Reverts all out-of-date buffers safely")
    (description
      "Documentation at https://melpa.org/#/revbufs")
    (license #f)))

(define-public emacs-reveal-in-folder
  (package
    (name "emacs-reveal-in-folder")
    (version "20220704.659")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/reveal-in-folder.git")
               (commit
                 "ccc5d8c61d386bb817863624fea0dba1273e7255")))
        (sha256
          (base32
            "1rmxpw3an4kdjmzv3qbh1gb1anc3pb5a0zxl6mh2yrppwggyh29c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "https://github.com/jcs-elpa/reveal-in-folder")
    (synopsis "Reveal current file in folder")
    (description
      "Documentation at https://melpa.org/#/reveal-in-folder")
    (license #f)))

(define-public emacs-reveal-in-osx-finder
  (package
    (name "emacs-reveal-in-osx-finder")
    (version "20150802.1657")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kaz-yos/reveal-in-osx-finder.git")
               (commit
                 "5710e5936e47139a610ec9a06899f72e77ddc7bc")))
        (sha256
          (base32
            "1q13cgpz4wzhnqv84ablawy3y2wgdwy46sp7454mmfx9m77jzb2v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kaz-yos/reveal-in-osx-finder")
    (synopsis
      "Reveal file associated with buffer in OS X Finder")
    (description
      "Documentation at https://melpa.org/#/reveal-in-osx-finder")
    (license #f)))

(define-public emacs-reverse-im
  (package
    (name "emacs-reverse-im")
    (version "20230125.1846")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/a13/reverse-im.el.git")
               (commit
                 "83c639756357c6b154842997b86e63c583ff8ff4")))
        (sha256
          (base32
            "08nnm6kvndsvnk7l1zr0zmbc0f6wsrfq284n80m2sxhx428k5jwh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/a13/reverse-im.el")
    (synopsis
      "Reverse mapping for non-default system layouts")
    (description
      "Documentation at https://melpa.org/#/reverse-im")
    (license #f)))

(define-public emacs-reverse-theme
  (package
    (name "emacs-reverse-theme")
    (version "20141205.145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/reverse-theme.git")
               (commit
                 "8319d0d5342890a3530ffa4daafdb7c35feda1ca")))
        (sha256
          (base32
            "002ywhjms8ybk7cma2p2i11z3fz6kb0w8mlafysm911rvcq2hg5f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-reverse-theme")
    (synopsis "Reverse theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/reverse-theme")
    (license #f)))

(define-public emacs-revert-buffer-all
  (package
    (name "emacs-revert-buffer-all")
    (version "20230109.536")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/revert-buffer-all-"
               version
               ".el"))
        (sha256
          (base32
            "1kff7nh0nsfhqrhnf1c7mg6cyjv1plzxz3arnr2psyskhqhbd223"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-buffer-revert-all")
    (synopsis "Revert all open buffers")
    (description
      "Documentation at https://melpa.org/#/revert-buffer-all")
    (license #f)))

(define-public emacs-review-mode
  (package
    (name "emacs-review-mode")
    (version "20220817.1010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kmuto/review-el.git")
               (commit
                 "2b24db8d85a1c40dbd67be195caa79c9df1e0f4b")))
        (sha256
          (base32
            "0hw8spbhdwgaaggf8vrmkpg5zdy9s71ygcj8rlp4acw7cfcp6sbx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kmuto/review-el")
    (synopsis "major mode for ReVIEW")
    (description
      "Documentation at https://melpa.org/#/review-mode")
    (license #f)))

(define-public emacs-rewriting-pcase
  (package
    (name "emacs-rewriting-pcase")
    (version "20230419.23")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/owinebar/emacs-rewriting-pcase.git")
               (commit
                 "bbba02f40b021eebd7e4c41187cf46cd80a1d207")))
        (sha256
          (base32
            "15p4cxynpjnr13dw1afmdhf9jvxc8qv5spdbwvqalvds25mdw217"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/owinebar/emacs-rewriting-pcase")
    (synopsis
      "Support for rewriting sexps in source code")
    (description
      "Documentation at https://melpa.org/#/rewriting-pcase")
    (license #f)))

(define-public emacs-reykjavik-theme
  (package
    (name "emacs-reykjavik-theme")
    (version "20201219.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/reykjavik-theme.git")
               (commit
                 "f6d8e83946633603234cd1dac725e17447f40bce")))
        (sha256
          (base32
            "07bbn4r4ry439b8cnqbzq20nh1w0n3rxsjsir9cfznp5rnc1b174"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Theme with a dark background.")
    (description
      "Documentation at https://melpa.org/#/reykjavik-theme")
    (license #f)))

(define-public emacs-rfc-mode
  (package
    (name "emacs-rfc-mode")
    (version "20231013.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/galdor/rfc-mode.git")
               (commit
                 "ab09db78d9d1baa4da4f926930833598e1e978ce")))
        (sha256
          (base32
            "0sym5pji4ba4jy79zfs7gb2n9kqa60ma4z622s0mz647g56z09f4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/galdor/rfc-mode")
    (synopsis "RFC document browser and viewer")
    (description
      "Documentation at https://melpa.org/#/rfc-mode")
    (license #f)))

(define-public emacs-rg
  (package
    (name "emacs-rg")
    (version "20230430.721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dajva/rg.el.git")
               (commit
                 "e9dc4ed342e0212d08fb82554dfd3c57fdfa5b1a")))
        (sha256
          (base32
            "17kjmw9pfxbzznpv26g1528mcmyv7afsk9ppsjmv0fx95zmr64z0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (home-page "https://github.com/dajva/rg.el")
    (synopsis "A search tool based on ripgrep")
    (description
      "Documentation at https://melpa.org/#/rg")
    (license #f)))

(define-public emacs-rgb
  (package
    (name "emacs-rgb")
    (version "20220717.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/cwpitts/rgb.el.git")
               (commit
                 "c83388c134e5ed207170b97cf55eb69cec1d2857")))
        (sha256
          (base32
            "1zq4nnp3yqv46129kazm76bvdqvjjhlrfg95bkdxvkd7qrdjc9a3"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "el-mock.el" "ert-expectations.el"))))
    (home-page "https://gitlab.com/cwpitts/rgb.el")
    (synopsis "RGB control via OpenRGB")
    (description
      "Documentation at https://melpa.org/#/rgb")
    (license #f)))

(define-public emacs-rhq
  (package
    (name "emacs-rhq")
    (version "20230731.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/rhq.git")
               (commit
                 "9f571787bf0781c78c277db82394fb9a692ec21e")))
        (sha256
          (base32
            "15177ds2v87g19nm7hphv8mvfkwqvmmvb4q69y85xh28v8vmpxf0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/rhq")
    (synopsis "Client for rhq")
    (description
      "Documentation at https://melpa.org/#/rhq")
    (license #f)))

(define-public emacs-rhtml-mode
  (package
    (name "emacs-rhtml-mode")
    (version "20130422.1311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/rhtml.git")
               (commit
                 "a6d71b38a3db867ccf82999c99805db1a3a33c33")))
        (sha256
          (base32
            "1qlpv5lzj4yfyjgdykhm6q9izg6g0z5pf5nmynj42vsx7v8bhy1x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for editing RHTML files")
    (description
      "Documentation at https://melpa.org/#/rhtml-mode")
    (license #f)))

(define-public emacs-rib-mode
  (package
    (name "emacs-rib-mode")
    (version "20170726.1448")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blezek/rib-mode.git")
               (commit
                 "97470158784c3c212e22e2c20b8471ee65ba59af")))
        (sha256
          (base32
            "0hln0hympmxmsci82ivc2rw289j1bmgdxns96m1ng1bl668bwag7"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/blezek/rib-mode")
    (synopsis
      "RenderMan® Interface Bytestream (RIB) Major Mode")
    (description
      "Documentation at https://melpa.org/#/rib-mode")
    (license #f)))

(define-public emacs-rich-minority
  (package
    (name "emacs-rich-minority")
    (version "20190419.1136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/rich-minority.git")
               (commit
                 "a03e693f6f9232cf75363aaaf1cb041f21675c19")))
        (sha256
          (base32
            "0nr5lazllp5qphllnmwrwiywkc5zd3a51ciwb8k0h8zw5axhp0v7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/rich-minority")
    (synopsis
      "Clean-up and Beautify the list of minor-modes.")
    (description
      "Documentation at https://melpa.org/#/rich-minority")
    (license #f)))

(define-public emacs-right-click-context
  (package
    (name "emacs-right-click-context")
    (version "20210519.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zonuexe/right-click-context.git")
               (commit
                 "c3c9d36ffbc9fb2bc7c2c4b75291dbcdb1c5f531")))
        (sha256
          (base32
            "1yvdiwjdqaacxf0vbk40im0znhbpndlh1xxl72g7sn79r9bfiq5w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-ordinal))
    (home-page
      "https://github.com/zonuexe/right-click-context")
    (synopsis "Right Click Context menu")
    (description
      "Documentation at https://melpa.org/#/right-click-context")
    (license #f)))

(define-public emacs-rigid-tabs
  (package
    (name "emacs-rigid-tabs")
    (version "20230905.940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/rigid-tabs.el.git")
               (commit
                 "9553118e76fcbc1d8f0bcb960de13c7e3f07b9df")))
        (sha256
          (base32
            "0qx3l7ky2lm4c3z1aa8i9a330i41im6cw46lg82a4ghbxhnprh66"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/rigid-tabs.el")
    (synopsis "Fix TAB alignment in diff buffers")
    (description
      "Documentation at https://melpa.org/#/rigid-tabs")
    (license #f)))

(define-public emacs-rii
  (package
    (name "emacs-rii")
    (version "20210317.1330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ROCKTAKEY/rii.git")
               (commit
                 "d0cc3599129db735c23abe74d0876286a2fd6b6a")))
        (sha256
          (base32
            "1g0na5zjsy4600jzi5zr752nggndbwkr6ihxcmq1w82w0b3600rv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ROCKTAKEY/rii")
    (synopsis
      "Reversible input interface for multiple input")
    (description
      "Documentation at https://melpa.org/#/rii")
    (license #f)))

(define-public emacs-rime
  (package
    (name "emacs-rime")
    (version "20231108.959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DogLooksGood/emacs-rime.git")
               (commit
                 "fd434071ce95c41e5d580e303ccf2a65f189e7ec")))
        (sha256
          (base32
            "1kzksqz71jnqn10841fasyydj0bqfs9hjd0yvpj7wk0knhjz2g11"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-popup emacs-posframe))
    (arguments
      '(#:files (:defaults "lib.c" "Makefile")))
    (home-page
      "https://www.github.com/DogLooksGood/emacs-rime")
    (synopsis "Rime input method")
    (description
      "Documentation at https://melpa.org/#/rime")
    (license #f)))

(define-public emacs-rimero-theme
  (package
    (name "emacs-rimero-theme")
    (version "20180901.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yveszoundi/emacs-rimero-theme.git")
               (commit
                 "a2e706c2b34f749019979a133f08a2d94a1104b3")))
        (sha256
          (base32
            "1kcvvaizggzi7s3dlh611bkirdf6y89kzddc273drdks705s01wh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yveszoundi/emacs-rimero-theme")
    (synopsis
      "Theme with a dark background suitable for UI and terminal usage.")
    (description
      "Documentation at https://melpa.org/#/rimero-theme")
    (license #f)))

(define-public emacs-rinari
  (package
    (name "emacs-rinari")
    (version "20150709.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/rinari.git")
               (commit
                 "134438af8fbdfa9c8077267c768d273a9792b484")))
        (sha256
          (base32
            "0ndrqj7qsf9rky4v928803ib66p37vyhxgyc42vshx86q73v4cyg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-inf-ruby
            emacs-ruby-compilation
            emacs-jump))
    (arguments '(#:files ("rinari.el")))
    (home-page "https://github.com/eschulte/rinari")
    (synopsis "Rinari Is Not A Rails IDE")
    (description
      "Documentation at https://melpa.org/#/rinari")
    (license #f)))

(define-public emacs-ring-mode
  (package
    (name "emacs-ring-mode")
    (version "20221226.1159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/ring-mode.git")
               (commit
                 "4e38dd5ca374d7d40fd1eeed1e83ef935efd387a")))
        (sha256
          (base32
            "0972ngw1qybxh3vs2vfbpy1wq8bircvgxqfg6pyg3ynhfnjzmfvj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/ring-mode")
    (synopsis
      "A major mode for the Ring programming language")
    (description
      "Documentation at https://melpa.org/#/ring-mode")
    (license #f)))

(define-public emacs-rings
  (package
    (name "emacs-rings")
    (version "20160531.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/konr/rings.git")
               (commit
                 "3590b222eb80652cbd27866f066bd3571d86edfc")))
        (sha256
          (base32
            "01mfiyq4cr2qdmvaxid8a094p20w97n2nsiy9vyng77vcmv36sd5"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/konr/rings")
    (synopsis "Buffer rings. Like tabs, but better.")
    (description
      "Documentation at https://melpa.org/#/rings")
    (license #f)))

(define-public emacs-ripgrep
  (package
    (name "emacs-ripgrep")
    (version "20220520.1410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/ripgrep.el.git")
               (commit
                 "872e250e8f93b8bb0a8a1de8bde17fd9bd116e31")))
        (sha256
          (base32
            "1n3jkj8a37ap4ndh9an5qm8dn8nxcgv9vqr8bcnxx5l0wnsvdg8z"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ripgrep.el")))
    (home-page
      "https://github.com/nlamirault/ripgrep.el")
    (synopsis
      "Front-end for ripgrep, a command line search tool")
    (description
      "Documentation at https://melpa.org/#/ripgrep")
    (license #f)))

(define-public emacs-riscv-mode
  (package
    (name "emacs-riscv-mode")
    (version "20220916.206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/riscv-mode.git")
               (commit
                 "8e335b9c93de93ed8dd063d702b0f5ad48eef6d7")))
        (sha256
          (base32
            "06jlf84mx49scw3zm1wjj25zinr2yr9abiyh83rli78wb1hdc0l4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/AdamNiederer/riscv-mode")
    (synopsis "Major-mode for RISC V assembly")
    (description
      "Documentation at https://melpa.org/#/riscv-mode")
    (license #f)))

(define-public emacs-rivet-mode
  (package
    (name "emacs-rivet-mode")
    (version "20201013.1905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/thornjad/rivet-mode.git")
               (commit
                 "3dd4fc28f29e4d4f43a881ed5816dea41a912419")))
        (sha256
          (base32
            "0b3gqs1lsk80shirsc41zajzjbg1sgzksmnfazffx88h612p7ygd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-mode))
    (home-page
      "https://gitlab.com/thornjad/rivet-mode")
    (synopsis
      "A minor mode for editing Apache Rivet files")
    (description
      "Documentation at https://melpa.org/#/rivet-mode")
    (license #f)))

(define-public emacs-rjsx-mode
  (package
    (name "emacs-rjsx-mode")
    (version "20200224.2149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/felipeochoa/rjsx-mode.git")
               (commit
                 "b697fe4d92cc84fa99a7bcb476f815935ea0d919")))
        (sha256
          (base32
            "1b779mncahhdgydsvmh7jycq2vchdrn01qj2m5g36aa01wq1v3ih"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page
      "https://github.com/felipeochoa/rjsx-mode/")
    (synopsis "Real support for JSX")
    (description
      "Documentation at https://melpa.org/#/rjsx-mode")
    (license #f)))

(define-public emacs-rmsbolt
  (package
    (name "emacs-rmsbolt")
    (version "20231024.221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jgkamat/rmsbolt.git")
               (commit
                 "86c6e12a85db472e6660ef7fef12a4e719ef3c66")))
        (sha256
          (base32
            "1kvl8syz700vl2dbva4k1vdzxd67sjby4w4zsl62njvbvwzvcj0r"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "starters")))
    (home-page "http://gitlab.com/jgkamat/rmsbolt")
    (synopsis "A compiler output viewer")
    (description
      "Documentation at https://melpa.org/#/rmsbolt")
    (license #f)))

(define-public emacs-robe
  (package
    (name "emacs-robe")
    (version "20231023.2046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgutov/robe.git")
               (commit
                 "021a7bc34848ef77eaeaa41d7899c6cab873cb0e")))
        (sha256
          (base32
            "0s0cmj1vmfa9gwn388ll3fpsv25q3v6vvj6k4xlcn75kdfzsbx59"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inf-ruby))
    (arguments '(#:files ("*robe.el" "lib")))
    (home-page "https://github.com/dgutov/robe")
    (synopsis
      "Code navigation, documentation lookup and completion for Ruby")
    (description
      "Documentation at https://melpa.org/#/robe")
    (license #f)))

(define-public emacs-robot-log
  (package
    (name "emacs-robot-log")
    (version "20220719.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~apteryx/emacs-robot-log")
               (commit
                 "26da47597aa97be9649cb60f4da6d94d47d0c0ac")))
        (sha256
          (base32
            "1l9yxryrhvylh2x17cczd8v8978w1nv8173d4l9hv0cr26kp5b68"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~apteryx/emacs-robot-log")
    (synopsis
      "Major mode for viewing RobotFramework debug log files")
    (description
      "Documentation at https://melpa.org/#/robot-log")
    (license #f)))

(define-public emacs-robot-mode
  (package
    (name "emacs-robot-mode")
    (version "20221109.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kopoli/robot-mode.git")
               (commit
                 "fb9be47a1d4e57a80ae2c0d4dff3eba2fe29ebdc")))
        (sha256
          (base32
            "10i4lwjf60ms3dj8s7k9c0vb24rhszskhciz9lijphcdh8k622hz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kopoli/robot-mode")
    (synopsis "Major-mode for Robot Framework files")
    (description
      "Documentation at https://melpa.org/#/robot-mode")
    (license #f)))

(define-public emacs-robots-txt-mode
  (package
    (name "emacs-robots-txt-mode")
    (version "20190812.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/robots-txt-mode.git")
               (commit
                 "8bf67285a25a6756607354d184e36583f2847e7d")))
        (sha256
          (base32
            "07255pn80w4742sz2h9vbmfxxd8ps2kcn73p7m2bgy02kgbzw42b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-php/robots-txt-mode")
    (synopsis "Major mode for editing robots.txt")
    (description
      "Documentation at https://melpa.org/#/robots-txt-mode")
    (license #f)))

(define-public emacs-roguel-ike
  (package
    (name "emacs-roguel-ike")
    (version "20160120.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stevenremot/roguel-ike.git")
               (commit
                 "706dcb0687e8016d7d776f9d9e5ace9fdbbca43c")))
        (sha256
          (base32
            "0rgv4y9aa5cc2ddz3y5z8d22xmr8kf5c60h0r3g8h91jmcw3rb4z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (arguments
      '(#:files ("*.el" "roguel-ike" "roguel-ike-lib")))
    (home-page "unspecified")
    (synopsis "A coffee-break roguelike")
    (description
      "Documentation at https://melpa.org/#/roguel-ike")
    (license #f)))

(define-public emacs-ron-mode
  (package
    (name "emacs-ron-mode")
    (version "20200830.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/Hutzdog/ron-mode.git")
               (commit
                 "c5e0454b9916d6b73adc15dab8abbb0b0a68ea22")))
        (sha256
          (base32
            "132r5346m3li5n7v7fyzyg8sg3679apl7q4y57n5aq395s0q9wyn"))))
    (build-system melpa-build-system)
    (home-page
      "https://chiselapp.com/user/Hutzdog/repository/ron-mode/home")
    (synopsis "Rusty Object Notation mode")
    (description
      "Documentation at https://melpa.org/#/ron-mode")
    (license #f)))

(define-public emacs-rope-read-mode
  (package
    (name "emacs-rope-read-mode")
    (version "20211228.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/rope-read-mode.git")
               (commit
                 "6aad44e006a2999980c138f608d28c8ecab92b35")))
        (sha256
          (base32
            "1hgkndd5y7hihzyb19pixdx3pnsxspaknq0kvxj8sq1d8iqk0300"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/rope-read-mode")
    (synopsis
      "Rearrange lines to read text smoothly")
    (description
      "Documentation at https://melpa.org/#/rope-read-mode")
    (license #f)))

(define-public emacs-ropgadget
  (package
    (name "emacs-ropgadget")
    (version "20230107.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dragoncraft89/ropgadget-el.git")
               (commit
                 "10e9d6f66de1ee805d871c59f4acc078b66747a3")))
        (sha256
          (base32
            "1dxslv3akgv60i45d6i4s4140v6n2jxbn4yhsqf59z0dxdpskkgc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Dragoncraft89/ropgadget-el")
    (synopsis
      "Display and filter ROP gadgets of a binary")
    (description
      "Documentation at https://melpa.org/#/ropgadget")
    (license #f)))

(define-public emacs-ros
  (package
    (name "emacs-ros")
    (version "20231016.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mbeutelspacher/ros.el.git")
               (commit
                 "aaf32cde6835826551f2b73e4dc8b63d0ff26eb0")))
        (sha256
          (base32
            "1fy4rbz9101vj8jla0l0f5dqsxn8bx2b0ccmrvsw13sd5rf63akv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-with-shell-interpreter
            emacs-kv
            emacs-hydra
            emacs-string-inflection
            emacs-docker-tramp))
    (home-page
      "https://github.com/DerBeutlin/ros.el")
    (synopsis
      "Package to write code for ROS systems")
    (description
      "Documentation at https://melpa.org/#/ros")
    (license #f)))

(define-public emacs-rotate
  (package
    (name "emacs-rotate")
    (version "20210126.637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daichirata/emacs-rotate.git")
               (commit
                 "4e9ac3ff800880bd9b705794ef0f7c99d72900a6")))
        (sha256
          (base32
            "1v4xaqfh3madrc8jcr16xzs40vvmk2ml1qwgsxkcm11l6pglmnnk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/daichirata/emacs-rotate")
    (synopsis "Rotate the layout of emacs")
    (description
      "Documentation at https://melpa.org/#/rotate")
    (license #f)))

(define-public emacs-roy-mode
  (package
    (name "emacs-roy-mode")
    (version "20121208.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/folone/roy-mode.git")
               (commit
                 "0416f561edbc6b4a29fced8be84d2527a9613d65")))
        (sha256
          (base32
            "04jbnm9is2cis75h40znqzjvyjq27ncr2vfank6zglzi4fhxsl0r"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/folone/roy-mode")
    (synopsis "Roy major mode")
    (description
      "Documentation at https://melpa.org/#/roy-mode")
    (license #f)))

(define-public emacs-rpm-spec-mode
  (package
    (name "emacs-rpm-spec-mode")
    (version "20160710.1136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stigbjorlykke/rpm-spec-mode.git")
               (commit
                 "c1c38050c48ea330c7cea632b8785d66daeefb2b")))
        (sha256
          (base32
            "0427kcvf2ljhzwxskn3jzk0ncrl3f9zcz2sm83d9pmhh5jax2gch"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "RPM spec file editing commands for Emacs/XEmacs")
    (description
      "Documentation at https://melpa.org/#/rpm-spec-mode")
    (license #f)))

(define-public emacs-rpn-calc
  (package
    (name "emacs-rpn-calc")
    (version "20210306.426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/rpn-calc.git")
               (commit
                 "320123ede874a8fc6cde542baa0d106950318071")))
        (sha256
          (base32
            "0fq7ym2wyfb5pgm75llc8wzyzr3kb5s3i2mw3ry076yk5c4gjsi2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page "https://github.com/zk-phi/rpn-calc")
    (synopsis "quick RPN calculator for hackers")
    (description
      "Documentation at https://melpa.org/#/rpn-calc")
    (license #f)))

(define-public emacs-rspec-mode
  (package
    (name "emacs-rspec-mode")
    (version "20230819.154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pezra/rspec-mode.git")
               (commit
                 "29df3d081c6a1cbdf840cd13d45ea1c100c5bbaa")))
        (sha256
          (base32
            "0fyqlsj91j1fks16bx8zy0ly3mc6nk4fk2vbf0yjc2fa14hda41m"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("rspec-mode.el" "snippets")))
    (home-page "http://github.com/pezra/rspec-mode")
    (synopsis "Enhance ruby-mode for RSpec")
    (description
      "Documentation at https://melpa.org/#/rspec-mode")
    (license #f)))

(define-public emacs-rsync-mode
  (package
    (name "emacs-rsync-mode")
    (version "20210911.0")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r-zip/rsync-mode.git")
               (commit
                 "2bc76aa8c2d82bb08ef70e23813a653d66bf3195")))
        (sha256
          (base32
            "0yy0d5pwy61ybrpblljk4z9qwyii0jcgxgv1y6sckai2qr5dia2x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-spinner))
    (home-page
      "https://github.com/r-zip/rsync-mode.el")
    (synopsis "Rsync projects to remote machines")
    (description
      "Documentation at https://melpa.org/#/rsync-mode")
    (license #f)))

(define-public emacs-rtags
  (package
    (name "emacs-rtags")
    (version "20220818.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "b449eb7461e09ca3a839c2d49d22b975be1ad367")))
        (sha256
          (base32
            "1z8kjyrrwkyk54c6rqg92b0g40l481wz0qh6ynqbrvmda23da2iy"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/rtags.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "A front-end for rtags")
    (description
      "Documentation at https://melpa.org/#/rtags")
    (license #f)))

(define-public emacs-rtags-xref
  (package
    (name "emacs-rtags-xref")
    (version "20210721.2314")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Andersbakken/rtags.git")
               (commit
                 "db39790fda5c2443bc790b8971ac140914f7e9c2")))
        (sha256
          (base32
            "05cigdvlq5lfahr9a1z8rvlw2s99j4pha2in59pshz9ph8cqgq10"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtags))
    (arguments '(#:files ("src/rtags-xref.el")))
    (home-page
      "https://github.com/Andersbakken/rtags")
    (synopsis "RTags backend for xref.el")
    (description
      "Documentation at https://melpa.org/#/rtags-xref")
    (license #f)))

(define-public emacs-rtm
  (package
    (name "emacs-rtm")
    (version "20180329.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pmiddend/emacs-rtm.git")
               (commit
                 "3e3d09387cb84801343ecca8fb02e82f213e7bbe")))
        (sha256
          (base32
            "0cc07lhh27i1ra4alrwb6w322ddi6hw0498nkzf388arhn10h3wv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/pmiddend/emacs-rtm")
    (synopsis
      "An elisp implementation of the Remember The Milk API")
    (description
      "Documentation at https://melpa.org/#/rtm")
    (license #f)))

(define-public emacs-rubik
  (package
    (name "emacs-rubik")
    (version "20180222.2014")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kurvivor19/rubik-mode.git")
               (commit
                 "c8dab1726463dbc9042a0b00186e4a8df02eb868")))
        (sha256
          (base32
            "13razzmk70h5sd69ms0a3ljr285zcad0wnrqkfxbgi5rnppqlkh1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Kurvivor19/rubik-mode")
    (synopsis "Rubik's Cube")
    (description
      "Documentation at https://melpa.org/#/rubik")
    (license #f)))

(define-public emacs-rubocop
  (package
    (name "emacs-rubocop")
    (version "20210309.1241")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubocop/rubocop-emacs.git")
               (commit
                 "f5fd18aa810c3d3269188cbbd731ddc09006f8f5")))
        (sha256
          (base32
            "1kwxqryhhdj83jism19jw8fz0bgwxrmgq7f887yyjsm7b5glzvhx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rubocop/rubocop-emacs")
    (synopsis "An Emacs interface for RuboCop")
    (description
      "Documentation at https://melpa.org/#/rubocop")
    (license #f)))

(define-public emacs-rubocopfmt
  (package
    (name "emacs-rubocopfmt")
    (version "20230204.1110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimeh/rubocopfmt.el.git")
               (commit
                 "1c6f4f1da755c9e60eb475eb9530320726904341")))
        (sha256
          (base32
            "0ng8j835cyzb18izl3syjllh739mkv2cb53zrkjkm81wi1c3ws92"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimeh/rubocopfmt.el")
    (synopsis
      "Minor-mode to format Ruby code with RuboCop on save")
    (description
      "Documentation at https://melpa.org/#/rubocopfmt")
    (license #f)))

(define-public emacs-ruby-compilation
  (package
    (name "emacs-ruby-compilation")
    (version "20150709.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/rinari.git")
               (commit
                 "134438af8fbdfa9c8077267c768d273a9792b484")))
        (sha256
          (base32
            "0ndrqj7qsf9rky4v928803ib66p37vyhxgyc42vshx86q73v4cyg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inf-ruby))
    (arguments
      '(#:files ("util/ruby-compilation.el")))
    (home-page "https://github.com/eschulte/rinari")
    (synopsis
      "run a ruby process in a compilation buffer")
    (description
      "Documentation at https://melpa.org/#/ruby-compilation")
    (license #f)))

(define-public emacs-ruby-electric
  (package
    (name "emacs-ruby-electric")
    (version "20200328.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruby/elisp-ruby-electric.git")
               (commit
                 "f2323cd9b5df3b34aa9810ba8109502824925d23")))
        (sha256
          (base32
            "1p0l0fsn0jcgb4raimyc4d1wpfksrfhn0rkwdazadvm6s8baydf7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ruby/elisp-ruby-electric")
    (synopsis
      "Minor mode for electrically editing ruby code")
    (description
      "Documentation at https://melpa.org/#/ruby-electric")
    (license #f)))

(define-public emacs-ruby-end
  (package
    (name "emacs-ruby-end")
    (version "20230205.115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ruby-end.el.git")
               (commit
                 "ba7d7230f9e3ed75c9982d32bb9fdff1dc10935d")))
        (sha256
          (base32
            "1jz6hhrxxcffs8hsghmzcak0yy1y8h12kgixxvb482cfh2jc0d4g"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/ruby-end")
    (synopsis
      "Automatic insertion of end blocks for Ruby")
    (description
      "Documentation at https://melpa.org/#/ruby-end")
    (license #f)))

(define-public emacs-ruby-extra-highlight
  (package
    (name "emacs-ruby-extra-highlight")
    (version "20171106.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/ruby-extra-highlight.git")
               (commit
                 "83942d18eae361998d24c1c523b308eea821f048")))
        (sha256
          (base32
            "18mq0ap7f0b22cdp2wdj0y2fqsahm2ngf7fvdy0mkkfs3818awlp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/ruby-extra-highlight")
    (synopsis "Highlight Ruby parameters.")
    (description
      "Documentation at https://melpa.org/#/ruby-extra-highlight")
    (license #f)))

(define-public emacs-ruby-factory
  (package
    (name "emacs-ruby-factory")
    (version "20160102.721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sshaw/ruby-factory-mode.git")
               (commit
                 "2bb7ccc2fccb5257376a989aa395bc7b9eb1d55d")))
        (sha256
          (base32
            "15b2rs6m4d511qqkc2gc8k15mbqzrgv6s3hpypajl8nvqa79xnyd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-inflections))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "http://github.com/sshaw/ruby-factory-mode")
    (synopsis
      "Minor mode for Ruby test object generation libraries")
    (description
      "Documentation at https://melpa.org/#/ruby-factory")
    (license #f)))

(define-public emacs-ruby-hash-syntax
  (package
    (name "emacs-ruby-hash-syntax")
    (version "20210106.224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/ruby-hash-syntax.git")
               (commit
                 "d458fb5891e0da85271b1cba3ee0ee69ea66a374")))
        (sha256
          (base32
            "02bjxsi8vbpadwjlhkdgpm4bi091ry9rdvzwnqsr4lh0z7f0ab76"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/ruby-hash-syntax")
    (synopsis
      "Toggle ruby hash syntax between => and 1.9+ styles")
    (description
      "Documentation at https://melpa.org/#/ruby-hash-syntax")
    (license #f)))

(define-public emacs-ruby-interpolation
  (package
    (name "emacs-ruby-interpolation")
    (version "20131112.1652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leoc/ruby-interpolation.el.git")
               (commit
                 "1978e337601222cedf00e117bf4b5cac15d1f203")))
        (sha256
          (base32
            "1r2f5jxi6wnkmr1ssvqgshi97gjvxvf3qqc0njg1s33cy39wpqq5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/leoc/ruby-interpolation.el")
    (synopsis "Ruby string interpolation helpers")
    (description
      "Documentation at https://melpa.org/#/ruby-interpolation")
    (license #f)))

(define-public emacs-ruby-json-to-hash
  (package
    (name "emacs-ruby-json-to-hash")
    (version "20211108.351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/otavioschwanck/ruby-json-to-hash.el.git")
               (commit
                 "383b22bb2e007289ac0dba146787d02ff99d4415")))
        (sha256
          (base32
            "1vpjcmsl8nph6sb01ppfim1kbzrdf0z8pxggyv709ayfsavrq19q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-smartparens emacs-string-inflection))
    (home-page
      "https://github.com/otavioschwanck/ruby-json-to-hash.el")
    (synopsis
      "Convert JSON to Hash and play with the keys")
    (description
      "Documentation at https://melpa.org/#/ruby-json-to-hash")
    (license #f)))

(define-public emacs-ruby-refactor
  (package
    (name "emacs-ruby-refactor")
    (version "20160214.1650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajvargo/ruby-refactor.git")
               (commit
                 "e6b7125878a08518bffec6942df0c606f748e9ee")))
        (sha256
          (base32
            "13008ih4hwa80bn2dbgj551knbvgpriz5sb241rkf7mifmlfzgsi"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ruby-refactor.el")))
    (home-page
      "https://github.com/ajvargo/ruby-refactor")
    (synopsis
      "A minor mode which presents various Ruby refactoring helpers.")
    (description
      "Documentation at https://melpa.org/#/ruby-refactor")
    (license #f)))

(define-public emacs-ruby-test-mode
  (package
    (name "emacs-ruby-test-mode")
    (version "20210205.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruby-test-mode/ruby-test-mode.git")
               (commit
                 "d66db4aca6e6a246f65f7195ecfbc7581d35fb7a")))
        (sha256
          (base32
            "0rwq5g6p8n45vqf35dklkzdrhbp9i9gx03v7s1b4s4h83hlhlh51"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pcre2el))
    (home-page
      "https://github.com/ruby-test-mode/ruby-test-mode")
    (synopsis
      "Minor mode for Behaviour and Test Driven")
    (description
      "Documentation at https://melpa.org/#/ruby-test-mode")
    (license #f)))

(define-public emacs-ruby-tools
  (package
    (name "emacs-ruby-tools")
    (version "20151209.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/ruby-tools.el.git")
               (commit
                 "6b97066b58a4f82eb2ecea6434a0a7e981aa4c18")))
        (sha256
          (base32
            "0jd9acycpbdd90hallrl0k5055rypp502qv4c6i286p7f9is4kvq"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/ruby-tools")
    (synopsis
      "Collection of handy functions for ruby-mode.")
    (description
      "Documentation at https://melpa.org/#/ruby-tools")
    (license #f)))

(define-public emacs-rufo
  (package
    (name "emacs-rufo")
    (version "20170718.1416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielma/rufo.el.git")
               (commit
                 "020b02ed6e9ab49e79d2ddf63e4ee2684c1728f4")))
        (sha256
          (base32
            "0nkjs6012dxayf2y8d7sw11czgb7lhyhcbcbmdbicnygf7wbm67h"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/danielma/rufo.el")
    (synopsis
      "use rufo to automatically format ruby files")
    (description
      "Documentation at https://melpa.org/#/rufo")
    (license #f)))

(define-public emacs-ruled-switch-buffer
  (package
    (name "emacs-ruled-switch-buffer")
    (version "20211205.636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kzkn/ruled-switch-buffer.git")
               (commit
                 "4ae1a722750f7ecb4db93c062ffdbe353e706bf0")))
        (sha256
          (base32
            "0qb69avm7f32y6dlcdsrc2vbj2lki3n732zpfxyr97cgf8vka7xm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kzkn/ruled-switch-buffer")
    (synopsis "Rule based buffer switching")
    (description
      "Documentation at https://melpa.org/#/ruled-switch-buffer")
    (license #f)))

(define-public emacs-rum-mode
  (package
    (name "emacs-rum-mode")
    (version "20180127.22")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rumlang/rum-mode.git")
               (commit
                 "b69a3866e0299cae8c9c805d644e69b2c17b64de")))
        (sha256
          (base32
            "13sm2v7al9658n17dka6dclzsprccrm3zycx6nwsgl99i14cnn99"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rumlang/rum-mode")
    (synopsis
      "Major mode for Rum programming language")
    (description
      "Documentation at https://melpa.org/#/rum-mode")
    (license #f)))

(define-public emacs-run-command
  (package
    (name "emacs-run-command")
    (version "20230317.2004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bard/emacs-run-command.git")
               (commit
                 "eff52e04ca371ee1682c7ce27908ec6f66680b11")))
        (sha256
          (base32
            "1vbfdc69vfw5w9226lbgiip15lx4p49hy6nvxxhpaifx823g858v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bard/emacs-run-command")
    (synopsis
      "Run an external command from a context-dependent list")
    (description
      "Documentation at https://melpa.org/#/run-command")
    (license #f)))

(define-public emacs-run-command-recipes
  (package
    (name "emacs-run-command-recipes")
    (version "20231003.1823")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/semenInRussia/emacs-run-command-recipes.git")
               (commit
                 "3d4c05225d54c97a4aef375113e6f4de9ea3aaef")))
        (sha256
          (base32
            "1kgk12p6gv8bgn9chcxpfazzgmw7rsadhii37j62llvx7bnyj13w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-run-command))
    (arguments
      '(#:files
        (:defaults "run-command-recipes-template.txt")))
    (home-page
      "https://github.com/semenInRussia/emacs-run-command-recipes")
    (synopsis
      "This is collection of recipes to `run-command'")
    (description
      "Documentation at https://melpa.org/#/run-command-recipes")
    (license #f)))

(define-public emacs-run-stuff
  (package
    (name "emacs-run-stuff")
    (version "20230601.19")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/run-stuff-"
               version
               ".tar"))
        (sha256
          (base32
            "1jyw9pi4r2n3m7dvj1q94z9wdqb91dkcaxjdx4sbinsq0if34p9m"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-run-stuff")
    (synopsis "Context based command execution")
    (description
      "Documentation at https://melpa.org/#/run-stuff")
    (license #f)))

(define-public emacs-runner
  (package
    (name "emacs-runner")
    (version "20160524.1048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thamer/runner.git")
               (commit
                 "a211d57ddc600410d07a8b534920ba905b093d87")))
        (sha256
          (base32
            "1ddf5jydpc43wgvw4a669wifij71b4r8zfazcqfdpyfh1j4m591b"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/thamer/runner")
    (synopsis
      "Improved \"open with\" suggestions for dired")
    (description
      "Documentation at https://melpa.org/#/runner")
    (license #f)))

(define-public emacs-runtests
  (package
    (name "emacs-runtests")
    (version "20150807.831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sunesimonsen/emacs-runtests.git")
               (commit
                 "ed90249f24cc48290018df48b9b9b7172440be3e")))
        (sha256
          (base32
            "18w6gkpxp0g7rzvnrk8vvr267y768dfik447ssq8jpz3jlr5jnq6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sunesimonsen/emacs-runtests")
    (synopsis "Run unit tests from Emacs")
    (description
      "Documentation at https://melpa.org/#/runtests")
    (license #f)))

(define-public emacs-russian-holidays
  (package
    (name "emacs-russian-holidays")
    (version "20170109.2140")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grafov/russian-holidays.git")
               (commit
                 "b285a30f29d85c48e3ea4eb93972d34a090c167b")))
        (sha256
          (base32
            "1mz842gvrscklg2w2r2q2wbj92qr31h895k700j3axqx6k30ni0h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grafov/russian-holidays")
    (synopsis "Russian holidays for the calendar")
    (description
      "Documentation at https://melpa.org/#/russian-holidays")
    (license #f)))

(define-public emacs-russian-techwriter
  (package
    (name "emacs-russian-techwriter")
    (version "20221229.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dunmaksim/emacs-russian-techwriter-input-method.git")
               (commit
                 "1d86134d04ecf2305969c7546ead7ad425cd7243")))
        (sha256
          (base32
            "1d170cjlrpabivqy5xdlq9hykhr6gxmghvhacp1sj8288jv63jjs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dunmaksim/emacs-russian-techwriter-input-method")
    (synopsis
      "Input methods for Russian technical writers")
    (description
      "Documentation at https://melpa.org/#/russian-techwriter")
    (license #f)))

(define-public emacs-rust-auto-use
  (package
    (name "emacs-rust-auto-use")
    (version "20200608.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vmalloc/rust-auto-use.el.git")
               (commit
                 "d5205f7b9b9eae0f7d0893f87d3391464719f9c0")))
        (sha256
          (base32
            "01jhb4bjb4dc4m4nw6n16dc4cc7x9z7j2vri0s1y16v1bm4cv26g"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Utility to automatically insert Rust use statements")
    (description
      "Documentation at https://melpa.org/#/rust-auto-use")
    (license #f)))

(define-public emacs-rust-mode
  (package
    (name "emacs-rust-mode")
    (version "20230805.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rust-lang/rust-mode.git")
               (commit
                 "fac7d284d24080d0886c47d20bbddbf60ec51511")))
        (sha256
          (base32
            "0xws2s65r67n9djn3cnydlq4bnjhcak5kfnbcp7d1a2cj6bdwj08"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rust-lang/rust-mode")
    (synopsis
      "A major-mode for editing Rust source code")
    (description
      "Documentation at https://melpa.org/#/rust-mode")
    (license #f)))

(define-public emacs-rust-playground
  (package
    (name "emacs-rust-playground")
    (version "20200116.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grafov/rust-playground.git")
               (commit
                 "5a117781dcb66065bea7830dd73618008fc34949")))
        (sha256
          (base32
            "1vmas5mg32lsyiki753a7hy597f54k1rx9sjiahw63jpgg785zys"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grafov/rust-playground")
    (synopsis
      "Local Rust playground for short code snippets.")
    (description
      "Documentation at https://melpa.org/#/rust-playground")
    (license #f)))

(define-public emacs-rustic
  (package
    (name "emacs-rustic")
    (version "20230130.912")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brotzeit/rustic.git")
               (commit
                 "a5fc66c8167a827a57c4426e4b8dbe717b3be43c")))
        (sha256
          (base32
            "1kg1brqy6bv8z2qw4q3f70az3mcz26pb387qrjlx2ik027zyr0ih"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-rust-mode
            emacs-dash
            emacs-f
            emacs-markdown-mode
            emacs-s
            emacs-spinner
            emacs-xterm-color))
    (home-page "unspecified")
    (synopsis "Rust development environment")
    (description
      "Documentation at https://melpa.org/#/rustic")
    (license #f)))

(define-public emacs-rutils
  (package
    (name "emacs-rutils")
    (version "20220619.1421")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/rutils.el.git")
               (commit
                 "dd500ab8062ce40cb339ec8620bdfc63fdd28364")))
        (sha256
          (base32
            "1hzly8kxdhddz4b4i7cxafl54aqpk6q4ziwh1k92s1767mjqwg2d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ess))
    (home-page
      "https://github.com/ShuguangSun/rutils.el")
    (synopsis "R utilities with transient")
    (description
      "Documentation at https://melpa.org/#/rutils")
    (license #f)))

(define-public emacs-rvm
  (package
    (name "emacs-rvm")
    (version "20220910.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/senny/rvm.el.git")
               (commit
                 "e1e83b5466c132c066142ac63729ba833c530c83")))
        (sha256
          (base32
            "1kxsd3vglvxgy79px43l4npkm9jaw8ds3b60734mc3ynwl0m00s5"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/RvmEl")
    (synopsis "Emacs integration for rvm")
    (description
      "Documentation at https://melpa.org/#/rvm")
    (license #f)))

(define-public emacs-ryo-modal
  (package
    (name "emacs-ryo-modal")
    (version "20221221.1355")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/ryo-modal.git")
               (commit
                 "b9e6a0f33b9e2aeb6088accd23ed312083d8f707")))
        (sha256
          (base32
            "1kk3szdiqk3860wfjdfzv8l0fc303gr8gqnj2ynplpq0jp16lviw"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/ryo-modal")
    (synopsis "Roll your own modal mode")
    (description
      "Documentation at https://melpa.org/#/ryo-modal")
    (license #f)))

(define-public emacs-s
  (package
    (name "emacs-s")
    (version "20220902.1511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/s.el.git")
               (commit
                 "e957dcb0677da18b2bb60ad867db5df5c35b5616")))
        (sha256
          (base32
            "01ycvpfqzszcgv2n0d9xj19c8zqi6rl9n5w8c3q228cakpsrn7xc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "The long lost Emacs string manipulation library.")
    (description
      "Documentation at https://melpa.org/#/s")
    (license #f)))

(define-public emacs-s-buffer
  (package
    (name "emacs-s-buffer")
    (version "20130605.2124")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-s-buffer.git")
               (commit
                 "f95d234282377f00a2c3a9846681080cb95bb1df")))
        (sha256
          (base32
            "06ng960fj2ivnwb0hrn0qic5x8hb0sswjzph01zmwhbfnwykhr85"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-noflet))
    (arguments '(#:files ("s-buffer.el")))
    (home-page
      "http://github.com/nicferrier/emacs-s-buffer")
    (synopsis "s operations for buffers")
    (description
      "Documentation at https://melpa.org/#/s-buffer")
    (license #f)))

(define-public emacs-s12cpuv2-mode
  (package
    (name "emacs-s12cpuv2-mode")
    (version "20171013.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/s12cpuv2-mode.git")
               (commit
                 "b17d4cf848dec1e20e66458e5c7ff77a2c051a8c")))
        (sha256
          (base32
            "1fc132gv48xwrxiw139kc9f5wkhjgsgqdfm6b7v97xj5025zg6hr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/AdamNiederer/s12cpuv2-mode")
    (synopsis "Major-mode for S12CPUV2 assembly")
    (description
      "Documentation at https://melpa.org/#/s12cpuv2-mode")
    (license #f)))

(define-public emacs-s3ed
  (package
    (name "emacs-s3ed")
    (version "20200929.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattusifer/s3ed.git")
               (commit
                 "2234444ead6c4c6fc3fea548958b36d2c29a9938")))
        (sha256
          (base32
            "0amzpw75w3hb186y4m1k3j9c1j3cxbd2cy20gcma218bgg2xg5s0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/mattusifer/s3ed")
    (synopsis "Tramp-like access to s3")
    (description
      "Documentation at https://melpa.org/#/s3ed")
    (license #f)))

(define-public emacs-sackspace
  (package
    (name "emacs-sackspace")
    (version "20130719.956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cofi/sackspace.el.git")
               (commit
                 "fd0480eaaf6d3d11fd30ac5feb2da2f4f7572708")))
        (sha256
          (base32
            "06gqqbkn85l2p05whmr4wkg9axqyzb7r7sgm3r8wfshm99kgpxvl"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/cofi/sackspace.el")
    (synopsis "A better backspace")
    (description
      "Documentation at https://melpa.org/#/sackspace")
    (license #f)))

(define-public emacs-sage-shell-mode
  (package
    (name "emacs-sage-shell-mode")
    (version "20231013.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sagemath/sage-shell-mode.git")
               (commit
                 "2f069323cb722c608405a3621d8185f4b7130fc3")))
        (sha256
          (base32
            "16mchj8glijkn1ycqzgkc424ij1gxa9qp6dhkhgrskqcyjgxxaly"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (arguments
      '(#:files
        (:defaults "*.py" (:exclude "*test.py"))))
    (home-page
      "https://github.com/sagemath/sage-shell-mode")
    (synopsis "A front-end for Sage Math")
    (description
      "Documentation at https://melpa.org/#/sage-shell-mode")
    (license #f)))

(define-public emacs-sailfish-scratchbox
  (package
    (name "emacs-sailfish-scratchbox")
    (version "20171202.1332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vityafx/sailfish-scratchbox.el.git")
               (commit
                 "65c6b04abadd2cdeb4cc2dc2a8b96b06e0f27ed8")))
        (sha256
          (base32
            "18c6l36sdc3any2fccm49wiyrda97pnd07jdir22wfl5wba7xnj8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vityafx/sailfish-scratchbox.el")
    (synopsis
      "Sailfish OS scratchbox inside the emacs.")
    (description
      "Documentation at https://melpa.org/#/sailfish-scratchbox")
    (license #f)))

(define-public emacs-sakura-theme
  (package
    (name "emacs-sakura-theme")
    (version "20220822.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-sakura.git")
               (commit
                 "d78648632a94dd5354d2fed0f94fcb7aece29132")))
        (sha256
          (base32
            "0nxj6gx5virv95sfxbasvr2mh427w5srzjsfawhf58ixif8wkhd0"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/emacsfodder/emacs-theme-sakura")
    (synopsis "Filled with cherry blossoms")
    (description
      "Documentation at https://melpa.org/#/sakura-theme")
    (license #f)))

(define-public emacs-salesforce-utils
  (package
    (name "emacs-salesforce-utils")
    (version "20160814.154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grimnebulin/emacs-salesforce.git")
               (commit
                 "73328baf0fb94ac0d0de645a8f6d42e5ae27f773")))
        (sha256
          (base32
            "1zsznz9pn9dj672jii6wcvs47yqyxv3dsm5qy1dax1d6gvvbf4zq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grimnebulin/emacs-salesforce")
    (synopsis "simple utilities for Salesforce")
    (description
      "Documentation at https://melpa.org/#/salesforce-utils")
    (license #f)))

(define-public emacs-salt-mode
  (package
    (name "emacs-salt-mode")
    (version "20200210.1200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/glynnforrest/salt-mode.git")
               (commit
                 "c46b24e7fdf4a46df5507dc9c533bbc0064a46fa")))
        (sha256
          (base32
            "07qnn8svgd0ishajx5dr91mk4nx9fm9phxsv00cjapvpd4f26xn6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-yaml-mode
            emacs-mmm-mode
            emacs-mmm-jinja2))
    (home-page
      "https://github.com/glynnforrest/salt-mode")
    (synopsis "Major mode for Salt States")
    (description
      "Documentation at https://melpa.org/#/salt-mode")
    (license #f)))

(define-public emacs-samskritam
  (package
    (name "emacs-samskritam")
    (version "20220912.255")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thapakrish/samskritam.el.git")
               (commit
                 "3c557dd39c31b7ee41c3674f5dfd03a7e9186e8f")))
        (sha256
          (base32
            "0xx6lmj6z4fggp8z8b9cvcp7wgavm7qpyr0sh0bzabjxmpzp3mn1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-google-translate))
    (home-page
      "https://github.com/thapakrish/samskritam")
    (synopsis
      "Library to get samskrit word definition, translate to & from")
    (description
      "Documentation at https://melpa.org/#/samskritam")
    (license #f)))

(define-public emacs-sas-py
  (package
    (name "emacs-sas-py")
    (version "20230131.523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/sas-py.git")
               (commit
                 "76a2226eb49ec37f211904c6395ee066bd440560")))
        (sha256
          (base32
            "0fgb5pd9zmc5n9x3aqkylpv57bdv6ck8bcrw7sj0xyzz2333pvc5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ess))
    (home-page
      "https://github.com/ShuguangSun/sas-py")
    (synopsis "SAS with SASPy")
    (description
      "Documentation at https://melpa.org/#/sas-py")
    (license #f)))

(define-public emacs-sass-mode
  (package
    (name "emacs-sass-mode")
    (version "20190502.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nex3/sass-mode.git")
               (commit
                 "247a0d4b509f10b28e4687cd8763492bca03599b")))
        (sha256
          (base32
            "1nhk12lhvkwdk8s8fx33p6rssi0gcfx2zkanq23rz6k28v5zi5yp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haml-mode))
    (home-page
      "http://github.com/nex3/haml/tree/master")
    (synopsis "Major mode for editing Sass files")
    (description
      "Documentation at https://melpa.org/#/sass-mode")
    (license #f)))

(define-public emacs-sauron
  (package
    (name "emacs-sauron")
    (version "20201015.836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/djcb/sauron.git")
               (commit
                 "5daade4836da5b1b2ab26d84128d6c38328a5d52")))
        (sha256
          (base32
            "0fkq8knq023zm538ls4zxghlkn9zf4rfccpmmgfcpad6bdm00cpc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Track (erc/org/dbus/...) events and react to them.")
    (description
      "Documentation at https://melpa.org/#/sauron")
    (license #f)))

(define-public emacs-save-load-path
  (package
    (name "emacs-save-load-path")
    (version "20140206.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/save-load-path.git")
               (commit
                 "6cb763a37e2b8af505bff2bcd11fd49c9ea04d66")))
        (sha256
          (base32
            "0rxcg60lxaabdx9gjj17sfxnr09694viphlhhk355dcc4v5ngbdm"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/save-load-path.el")
    (synopsis "save load-path and reuse it to test")
    (description
      "Documentation at https://melpa.org/#/save-load-path")
    (license #f)))

(define-public emacs-save-visited-files
  (package
    (name "emacs-save-visited-files")
    (version "20200212.414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/save-visited-files.git")
               (commit
                 "8203a05a322324ec17b14437c8dfb38efdb53241")))
        (sha256
          (base32
            "1zc7f5l7i60fpi8vw41xhpnhz5jpiqkk7fdkd2k6lnmv7jnnilfc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/nflath/save-visited-files")
    (synopsis "save opened files across sessions")
    (description
      "Documentation at https://melpa.org/#/save-visited-files")
    (license #f)))

(define-public emacs-savekill
  (package
    (name "emacs-savekill")
    (version "20140418.229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/savekill.git")
               (commit
                 "67fc94e3d8fe8ce3ca16f90518f6a46479b63e34")))
        (sha256
          (base32
            "0h8bl28p5xrs9daapcjkslm066a4hqlb764i5nz1db0lwrvr0csm"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/savekill.el")
    (synopsis "Save kill ring to disk")
    (description
      "Documentation at https://melpa.org/#/savekill")
    (license #f)))

(define-public emacs-saveplace-pdf-view
  (package
    (name "emacs-saveplace-pdf-view")
    (version "20230805.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicolaisingh/saveplace-pdf-view.git")
               (commit
                 "abfb5e1f463cffc18218a0f7f2fa141a271b1813")))
        (sha256
          (base32
            "1ijzsizxbq33wv84hz4km3x6nsaqxn8v9qh2835vnrfxk6n6cr4p"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nicolaisingh/saveplace-pdf-view")
    (synopsis "Save place in pdf-view buffers")
    (description
      "Documentation at https://melpa.org/#/saveplace-pdf-view")
    (license #f)))

(define-public emacs-say-what-im-doing
  (package
    (name "emacs-say-what-im-doing")
    (version "20160706.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Benaiah/say-what-im-doing.git")
               (commit
                 "5b2ce6783b02805bcac1107a149bfba3852cd9d5")))
        (sha256
          (base32
            "0wy4hrc44ajl88krp6qy40szl2kl2wc3xjz3y4n250d1v81k25xi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/benaiah/say-what-im-doing")
    (synopsis
      "dictate what you're doing with text to speech")
    (description
      "Documentation at https://melpa.org/#/say-what-im-doing")
    (license #f)))

(define-public emacs-sayid
  (package
    (name "emacs-sayid")
    (version "20220101.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clojure-emacs/sayid.git")
               (commit
                 "879aff586336a0ec4d46c0ed4720fb1de22082bd")))
        (sha256
          (base32
            "013afdzz0rvb428pla78an052jvw2q95zzqvnq9z9w16y5yd1n0c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider))
    (arguments '(#:files ("src/el/*.el")))
    (home-page
      "https://github.com/clojure-emacs/sayid")
    (synopsis "sayid nREPL middleware client")
    (description
      "Documentation at https://melpa.org/#/sayid")
    (license #f)))

(define-public emacs-sbt-mode
  (package
    (name "emacs-sbt-mode")
    (version "20211203.1148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hvesalai/emacs-sbt-mode.git")
               (commit
                 "9fe1e8807c22cc1dc56a6233e000969518907f4d")))
        (sha256
          (base32
            "1mii46nr4ykkwnbpvsdp46j6n7k38h0jbm49vbm0w7n1az09yg1a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hvesalai/emacs-sbt-mode")
    (synopsis "Interactive support for sbt projects")
    (description
      "Documentation at https://melpa.org/#/sbt-mode")
    (license #f)))

(define-public emacs-scad-mode
  (package
    (name "emacs-scad-mode")
    (version "20230315.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/openscad/emacs-scad-mode.git")
               (commit
                 "e1af74735ad6113448c99b3ab128a665e6adaaca")))
        (sha256
          (base32
            "1wqpxwi6kyw83mmlpkall7as31115jffd6s7fkyi3y73arz6xg3h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/openscad/emacs-scad-mode")
    (synopsis
      "A major mode for editing OpenSCAD code")
    (description
      "Documentation at https://melpa.org/#/scad-mode")
    (license #f)))

(define-public emacs-scad-preview
  (package
    (name "emacs-scad-preview")
    (version "20211212.1128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/scad-preview.git")
               (commit
                 "c5449b26c63f3e0a695905a7e4e84f8d844f761b")))
        (sha256
          (base32
            "1syz8cjyw4rjv1hbvs42r7n56jzjz5c71s21kmm8rp7hlbz71jhr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-scad-mode))
    (home-page "https://zk-phi.github.io/")
    (synopsis
      "Preview SCAD models in real-time within Emacs")
    (description
      "Documentation at https://melpa.org/#/scad-preview")
    (license #f)))

(define-public emacs-scala-mode
  (package
    (name "emacs-scala-mode")
    (version "20221025.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hvesalai/emacs-scala-mode.git")
               (commit
                 "5d7cf21c37e345c49f921fe5111a49fd54efd1e0")))
        (sha256
          (base32
            "1dygncmjizlg33g2yghihmkf5hjwhrd8b63qvl4dndxwbq995n6r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hvesalai/emacs-scala-mode")
    (synopsis "Major mode for editing Scala")
    (description
      "Documentation at https://melpa.org/#/scala-mode")
    (license #f)))

(define-public emacs-scf-mode
  (package
    (name "emacs-scf-mode")
    (version "20151122.248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/scf-mode.git")
               (commit
                 "dbfcdcd89034f208d65e181af58e0d73ad09f8b2")))
        (sha256
          (base32
            "0m7hanpc2skmsz783m0212xd10y31gkj5n6w8gx9s989l1y4i1b8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lewang/scf-mode")
    (synopsis
      "shorten file-names in compilation type buffers")
    (description
      "Documentation at https://melpa.org/#/scf-mode")
    (license #f)))

(define-public emacs-scheme-complete
  (package
    (name "emacs-scheme-complete")
    (version "20201112.442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ashinn/scheme-complete.git")
               (commit
                 "b9a1448c4696f117d9ea4e59b6162dc31112e71a")))
        (sha256
          (base32
            "1smxr5bkzbfrjx21vhrj1wagmqx5yd92i997dbgs16iaqbzzr7cz"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Smart auto completion for Scheme in Emacs")
    (description
      "Documentation at https://melpa.org/#/scheme-complete")
    (license #f)))

(define-public emacs-scholar-import
  (package
    (name "emacs-scholar-import")
    (version "20230412.1413")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/teeann/scholar-import.git")
               (commit
                 "2456367578caa7fd768e30238ce080687faa0a25")))
        (sha256
          (base32
            "1jgandx2zs6m921jxhb476g7ldh7paa7qlwjy9lzzn3cfgb18r8w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-s emacs-parsebib))
    (home-page
      "https://github.com/teeann/scholar-import")
    (synopsis
      "Import Bibtex & PDF from Google Scholar")
    (description
      "Documentation at https://melpa.org/#/scholar-import")
    (license #f)))

(define-public emacs-schrute
  (package
    (name "emacs-schrute")
    (version "20170521.1840")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/shackra/dwight-k.-schrute")
               (commit
                 "59faa6c4232ae183cea93237301acad8c0763997")))
        (sha256
          (base32
            "1w5l1vf4cn4psrxgnq5n6j3zw644s70inpa17vsvng3sk5r8crcb"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/shackra/dwight-k.-schrute")
    (synopsis
      "Help you remember there is a better way to do something.")
    (description
      "Documentation at https://melpa.org/#/schrute")
    (license #f)))

(define-public emacs-scihub
  (package
    (name "emacs-scihub")
    (version "20220913.618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/scihub.el.git")
               (commit
                 "56aa7205b5f2a6c9821557f9f1b9ff76dc1bb882")))
        (sha256
          (base32
            "1i8dh5dwmdl0vxgrz48qamzxj89zr0sz0ylxvc7qkkbdrs325if8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-pe/scihub.el")
    (synopsis "Sci-Hub integration")
    (description
      "Documentation at https://melpa.org/#/scihub")
    (license #f)))

(define-public emacs-sclang-extensions
  (package
    (name "emacs-sclang-extensions")
    (version "20160509.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/sclang-extensions.git")
               (commit
                 "e9cc79732f16fdb582129303110c163dcc0d6da0")))
        (sha256
          (base32
            "164dn5615bxvya4n58lly9r739va1xzm00wyfg4shcwgnwm3byqb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Extensions for the SuperCollider Emacs mode.")
    (description
      "Documentation at https://melpa.org/#/sclang-extensions")
    (license #f)))

(define-public emacs-sclang-snippets
  (package
    (name "emacs-sclang-snippets")
    (version "20130513.751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ptrv/sclang-snippets.git")
               (commit
                 "c840a416b96f83bdd70491e3d1fbe2f1ae8b3f58")))
        (sha256
          (base32
            "0vbcghgapwdf3jgjnjdla17dhf5mkmwapz4a8fmlr7sw1wqvj857"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page "unspecified")
    (synopsis
      "Snippets for the SuperCollider Emacs mode")
    (description
      "Documentation at https://melpa.org/#/sclang-snippets")
    (license #f)))

(define-public emacs-scopeline
  (package
    (name "emacs-scopeline")
    (version "20231027.1524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/meain/scopeline.el.git")
               (commit
                 "58d6ef20b6cf398c48571239311d812a2f926ecb")))
        (sha256
          (base32
            "0p10mpn9bbd6cccafw0h296xhavq8x46mn3292iks10v553b0li6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/meain/scopeline.el")
    (synopsis
      "Show scope info of blocks in buffer at end of scope")
    (description
      "Documentation at https://melpa.org/#/scopeline")
    (license #f)))

(define-public emacs-scpaste
  (package
    (name "emacs-scpaste")
    (version "20230627.1800")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/scpaste-"
               version
               ".tar"))
        (sha256
          (base32
            "1yxrhrmbf3vy6z3ziqvcaxiras7as2wbblhr4ifhj4ilaixgv99y"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-htmlize))
    (home-page
      "https://git.sr.ht/~technomancy/scpaste")
    (synopsis "Paste to the web via scp.")
    (description
      "Documentation at https://melpa.org/#/scpaste")
    (license #f)))

(define-public emacs-scratch
  (package
    (name "emacs-scratch")
    (version "20220319.1705")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/scratch-el.git")
               (commit
                 "f000648c9663833a76a8de9b1e78c99a9d698e48")))
        (sha256
          (base32
            "174d8ancnkgb7q62196kd6nrfib6rnwxw4visgbk1c6yd1w8kray"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("scratch.el")))
    (home-page "https://github.com/ieure/scratch-el")
    (synopsis "Mode-specific scratch buffers")
    (description
      "Documentation at https://melpa.org/#/scratch")
    (license #f)))

(define-public emacs-scratch-comment
  (package
    (name "emacs-scratch-comment")
    (version "20200812.1025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/scratch-comment.el.git")
               (commit
                 "cf3e967b4def1308b6ef1cfeedd2cf15ee6e226c")))
        (sha256
          (base32
            "0wq1vf391h53ys3292ap7f4nvk4i7wz3cqfbb18bwzz7iga922qd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/conao3/scratch-comment.el")
    (synopsis
      "Insert Elisp result as comment in scratch buffer")
    (description
      "Documentation at https://melpa.org/#/scratch-comment")
    (license #f)))

(define-public emacs-scratch-ext
  (package
    (name "emacs-scratch-ext")
    (version "20220617.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyanagi/scratch-ext-el.git")
               (commit
                 "8bbe1649503bb2e3676643e6e49fde155c1d6c70")))
        (sha256
          (base32
            "1nma84s5x1q264b73s1kqyyrf0g3j63zmnnxrxk9ly09y7cdqgpb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kyanagi/scratch-ext-el")
    (synopsis "Extensions for *scratch*")
    (description
      "Documentation at https://melpa.org/#/scratch-ext")
    (license #f)))

(define-public emacs-scratch-log
  (package
    (name "emacs-scratch-log")
    (version "20141115.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mori-dev/scratch-log.git")
               (commit
                 "1168f7f16d36ca0f4ddf2bb98881f8db62cc5dc0")))
        (sha256
          (base32
            "030mcq0cmamizvra8jh2x76f71g5apiavwb10c28j62rl0r5bisk"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("scratch-log.el")))
    (home-page "unspecified")
    (synopsis "Utility for *scratch* buffer.")
    (description
      "Documentation at https://melpa.org/#/scratch-log")
    (license #f)))

(define-public emacs-scratch-message
  (package
    (name "emacs-scratch-message")
    (version "20220209.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/scratch-message.git")
               (commit
                 "0d4198f6effd8f118bf03ee4979f566041ef6a9b")))
        (sha256
          (base32
            "0xh67x7pkmppbiacpw3wqipji3na0plnlswvnd355kz2gjab3hhp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/scratch-message.git")
    (synopsis
      "Changing message in your scratch buffer")
    (description
      "Documentation at https://melpa.org/#/scratch-message")
    (license #f)))

(define-public emacs-scratch-palette
  (package
    (name "emacs-scratch-palette")
    (version "20210306.427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/scratch-palette.git")
               (commit
                 "e4642ed8a2b744ba48a8e11ca83861f8e4b9c5b3")))
        (sha256
          (base32
            "1cvcsj6ayhfwdpp2mb75ja8bif33z085dip76bvyqliwjnjl2sgn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popwin))
    (home-page "http://zk-phi.gitub.io/")
    (synopsis "make scratch buffer for each files")
    (description
      "Documentation at https://melpa.org/#/scratch-palette")
    (license #f)))

(define-public emacs-scratch-pop
  (package
    (name "emacs-scratch-pop")
    (version "20200910.226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/scratch-pop.git")
               (commit
                 "cbe842fd78e4b742ece9fc493ebf43e69d872866")))
        (sha256
          (base32
            "1rqmh5nv9qlc17bvqm7q000r0h0y1ymgy7gvxyhjwk6yhaynh0jw"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "Generate, popup (& optionally backup) scratch buffer(s).")
    (description
      "Documentation at https://melpa.org/#/scratch-pop")
    (license #f)))

(define-public emacs-scratches
  (package
    (name "emacs-scratches")
    (version "20151006.416")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/scratches.git")
               (commit
                 "9441afe6396ca38f08029123fab5d87429cbf315")))
        (sha256
          (base32
            "10hmy0p4pkrzvvyisk4rjc6hqqyk2sir1rszqgmkhrdywl010vlc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (home-page "unspecified")
    (synopsis "Multiple scratches in any language")
    (description
      "Documentation at https://melpa.org/#/scratches")
    (license #f)))

(define-public emacs-scribble-mode
  (package
    (name "emacs-scribble-mode")
    (version "20190912.200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-pe/scribble-mode.git")
               (commit
                 "5c3ea3cc9bbad585476eee41ea76dc056c2012bb")))
        (sha256
          (base32
            "0p7mch1z289hjxmdb4w04sdixkqqvjmrrw92yd6akr551yj0jbhx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el")))
    (home-page
      "https://github.com/emacs-pe/scribble-mode")
    (synopsis
      "Major mode for editing Scribble documents")
    (description
      "Documentation at https://melpa.org/#/scribble-mode")
    (license #f)))

(define-public emacs-scroll-on-drag
  (package
    (name "emacs-scroll-on-drag")
    (version "20230313.546")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/scroll-on-drag-"
               version
               ".tar"))
        (sha256
          (base32
            "16d8hqmb8skf8ypayyqw1yy9sv0prasv564hg45l4pwns0kq94am"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-scroll-on-drag")
    (synopsis "Interactive scrolling")
    (description
      "Documentation at https://melpa.org/#/scroll-on-drag")
    (license #f)))

(define-public emacs-scroll-on-jump
  (package
    (name "emacs-scroll-on-jump")
    (version "20230201.141")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/scroll-on-jump-"
               version
               ".el"))
        (sha256
          (base32
            "0qvldx08zylk5wlgs2jfzbam4p8123l4ca4mwjl591yxagnqi05l"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.com/ideasman42/emacs-scroll-on-jump")
    (synopsis "Scroll when jumping to a new point")
    (description
      "Documentation at https://melpa.org/#/scroll-on-jump")
    (license #f)))

(define-public emacs-scrollable-quick-peek
  (package
    (name "emacs-scrollable-quick-peek")
    (version "20201224.329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpablobr/scrollable-quick-peek.git")
               (commit
                 "3e3492145a61831661d6e97fdcb47b5b66c73287")))
        (sha256
          (base32
            "0gca860rhvcdjgm6k5pm6spznhg4787dqyjzfixvnffd5l93lcvc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-quick-peek))
    (home-page
      "https://github.com/jpablobr/scrollable-quick-peek")
    (synopsis "Display scrollable overlays")
    (description
      "Documentation at https://melpa.org/#/scrollable-quick-peek")
    (license #f)))

(define-public emacs-scrollkeeper
  (package
    (name "emacs-scrollkeeper")
    (version "20190109.629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/scrollkeeper.el.git")
               (commit
                 "3c4ac6b6b44686d31c260ee0b19daaee59bdccd6")))
        (sha256
          (base32
            "18pp4k12g5dyma362461gdp4ds5d3lx9gky2ishsq39949pkz7qz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/scrollkeeper.el")
    (synopsis
      "Custom scrolling commands with visual guidelines")
    (description
      "Documentation at https://melpa.org/#/scrollkeeper")
    (license #f)))

(define-public emacs-scrooge
  (package
    (name "emacs-scrooge")
    (version "20180630.1022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/emacs-scrooge.git")
               (commit
                 "0a8c58e9e6708abe4ef7e415bc1e0472318bb1b0")))
        (sha256
          (base32
            "1my5yz9ppr7d90ad94mkqzkp20c8bym6mdi7jwab2yisbzykmwzc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-thrift))
    (home-page "unspecified")
    (synopsis "Major mode for Twitter Scrooge files")
    (description
      "Documentation at https://melpa.org/#/scrooge")
    (license #f)))

(define-public emacs-scss-mode
  (package
    (name "emacs-scss-mode")
    (version "20180123.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antonj/scss-mode.git")
               (commit
                 "cf58dbec5394280503eb5502938f3b5445d1b53d")))
        (sha256
          (base32
            "0raja19l0igwr0pn0ghr1pj1d8i9k3m3764ma4r8nwzxcj9qw4ja"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/antonj/scss-mode")
    (synopsis "Major mode for editing SCSS files")
    (description
      "Documentation at https://melpa.org/#/scss-mode")
    (license #f)))

(define-public emacs-sculpture-themes
  (package
    (name "emacs-sculpture-themes")
    (version "20230905.439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/precompute/sculpture-themes.git")
               (commit
                 "7165c7655873ca3c3dc9ff878ddf8a9bdabcf4d4")))
        (sha256
          (base32
            "0w1jx2033nrki4r9yw2hwg4rvsqq3jj1als0im6ia1rk1x8fxqq8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/t-e-r-m/sculpture-theme")
    (synopsis "Themes with vivid colors")
    (description
      "Documentation at https://melpa.org/#/sculpture-themes")
    (license #f)))

(define-public emacs-sdcv
  (package
    (name "emacs-sdcv")
    (version "20220210.1412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/sdcv.el.git")
               (commit
                 "98e239c7380c63282845d5bc55ea6d605f5a33b8")))
        (sha256
          (base32
            "17jxnc8z2a5rdfrjxw6gfkijp06jkjpsvj0pyxrhmg94gimfprxa"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup emacs-showtip emacs-pos-tip))
    (home-page "https://repo.or.cz/sdcv.el.git")
    (synopsis
      "Interface for sdcv (StartDict console version).")
    (description
      "Documentation at https://melpa.org/#/sdcv")
    (license #f)))

(define-public emacs-sdlang-mode
  (package
    (name "emacs-sdlang-mode")
    (version "20161201.711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CyberShadow/sdlang-mode.git")
               (commit
                 "d42a6eedefeb44919fbacf58d302b6df18f05bbc")))
        (sha256
          (base32
            "0r6sm7b15scmjcpdcqvm55hdsvyw5d2g7mrfhsx2hs8sqz64gkwc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/CyberShadow/sdlang-mode")
    (synopsis
      "Major mode for Simple Declarative Language files.")
    (description
      "Documentation at https://melpa.org/#/sdlang-mode")
    (license #f)))

(define-public emacs-search-web
  (package
    (name "emacs-search-web")
    (version "20150312.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomoya/search-web.el.git")
               (commit
                 "c4ae86ac1acfc572b81f3d78764bd9a54034c331")))
        (sha256
          (base32
            "08yc67a4ji7z8s0zh500wiscziqsxi92i1d33fjla2mcr8sxxn0i"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Post web search queries using `browse-url'.")
    (description
      "Documentation at https://melpa.org/#/search-web")
    (license #f)))

(define-public emacs-searcher
  (package
    (name "emacs-searcher")
    (version "20220704.758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/searcher.git")
               (commit
                 "6debf99431a5cb4d1db55e5379453c6a181a133f")))
        (sha256
          (base32
            "18jl7ccv7b4p9gr9dkqpidkwazqly7nic99x29av0f8vicmg00w3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (home-page
      "https://github.com/jcs-elpa/searcher")
    (synopsis "Searcher in pure elisp")
    (description
      "Documentation at https://melpa.org/#/searcher")
    (license #f)))

(define-public emacs-searchq
  (package
    (name "emacs-searchq")
    (version "20150829.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tcw165/searchq.git")
               (commit
                 "dd510d55ad66a82c6ef022cfe7c4a73ad5365f82")))
        (sha256
          (base32
            "0zs08vxmjb3y4dnfq6djnrhmkgyhhwd5zylrjisrd4y7f089fyh4"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          ("images" "images/*.xpm" "images/*.png"))))
    (home-page "unspecified")
    (synopsis
      "Framework of queued search tasks using GREP, ACK, AG and more.")
    (description
      "Documentation at https://melpa.org/#/searchq")
    (license #f)))

(define-public emacs-secretaria
  (package
    (name "emacs-secretaria")
    (version "20191128.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/shackra/secretaria.git")
               (commit
                 "03986130a2ada1fa952d45e83536729f20230fcf")))
        (sha256
          (base32
            "10ikd6ksz5adpldyx9h8s3qnwc488rqixzwnd0rjjwqigmllj9lb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-alert emacs-s emacs-f))
    (home-page
      "https://gitlab.com/shackra/secretaria")
    (synopsis
      "A personal assistant based on org-mode")
    (description
      "Documentation at https://melpa.org/#/secretaria")
    (license #f)))

(define-public emacs-see-mode
  (package
    (name "emacs-see-mode")
    (version "20180511.41")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcelino-m/see-mode.git")
               (commit
                 "b6e72ea90105b03816c334be9e43bb41dcc79abf")))
        (sha256
          (base32
            "1lh8dg02h64s7b18b4yn0jwxd3cid6agqiv17252r3lbgp743n68"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-language-detection))
    (home-page
      "https://github.com/marcelino-m/see-mode")
    (synopsis "Edit string  in a separate buffer")
    (description
      "Documentation at https://melpa.org/#/see-mode")
    (license #f)))

(define-public emacs-seeing-is-believing
  (package
    (name "emacs-seeing-is-believing")
    (version "20170214.1320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcinnamond/seeing-is-believing.git")
               (commit
                 "fbbe246c0fda87bb26227bb826eebadb418a220f")))
        (sha256
          (base32
            "1h1b48s2iirswdlvfz41jbflm4x09ksc2lycrc1awzlwd6r8hdhg"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "minor mode for running the seeing-is-believing ruby gem")
    (description
      "Documentation at https://melpa.org/#/seeing-is-believing")
    (license #f)))

(define-public emacs-seethru
  (package
    (name "emacs-seethru")
    (version "20150218.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Benaiah/seethru.git")
               (commit
                 "d87e231f99313bea75b1e69e48c0f32968c82060")))
        (sha256
          (base32
            "0qd462qbqdx53xh3ddf76chiljxf6s43r28v2ix85gsig7nm5pgr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-shadchen))
    (home-page "http://github.com/benaiah/seethru")
    (synopsis "Easily change Emacs' transparency")
    (description
      "Documentation at https://melpa.org/#/seethru")
    (license #f)))

(define-public emacs-sekka
  (package
    (name "emacs-sekka")
    (version "20170803.1247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiyoka/sekka.git")
               (commit
                 "61840b57d9ae32bf8e297b175942590a1319c7e7")))
        (sha256
          (base32
            "05vj12l88s29wnkpvgzlbypv9hkmy1hqgv9hvav6v4kmdykl5w1b"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-concurrent emacs-popup))
    (arguments '(#:files ("emacs/sekka.el")))
    (home-page "https://github.com/kiyoka/sekka")
    (synopsis "A client for Sekka IME server")
    (description
      "Documentation at https://melpa.org/#/sekka")
    (license #f)))

(define-public emacs-selcand
  (package
    (name "emacs-selcand")
    (version "20230628.733")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erjoalgo/selcand.git")
               (commit
                 "b6fc231a784df570df0f817d34f926f141a65126")))
        (sha256
          (base32
            "1hh0y9qy19kvq29z5zrjpk2lll2iydl16dhl88kapfprmv9mrli2"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/erjoalgo/selcand")
    (synopsis
      "Select a candidate from a tree of hint characters")
    (description
      "Documentation at https://melpa.org/#/selcand")
    (license #f)))

(define-public emacs-select-themes
  (package
    (name "emacs-select-themes")
    (version "20160221.106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jasonm23/emacs-select-themes.git")
               (commit
                 "236f54287519a3ea6dd7b3992d053e4f4ff5d0fe")))
        (sha256
          (base32
            "1c9yv1kjcd0jrzgw99q9p4kzj980f261mjcsggbcw806wb0iw1xn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jasonm23/emacs-select-themes")
    (synopsis
      "Color theme selection with completing-read")
    (description
      "Documentation at https://melpa.org/#/select-themes")
    (license #f)))

(define-public emacs-selected
  (package
    (name "emacs-selected")
    (version "20230219.1328")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/selected.el.git")
               (commit
                 "1ca6e12f456caa1dc97c3d68597598662eb5de9a")))
        (sha256
          (base32
            "11xjv861mx15fhvv8g67ahri5p8mplnhq9sf30c825bk1f0h7xzy"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/selected.el")
    (synopsis "Keymap for when region is active")
    (description
      "Documentation at https://melpa.org/#/selected")
    (license #f)))

(define-public emacs-selectric-mode
  (package
    (name "emacs-selectric-mode")
    (version "20200209.2107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rbanffy/selectric-mode.git")
               (commit
                 "1840de71f7414b7cd6ce425747c8e26a413233aa")))
        (sha256
          (base32
            "1aabqqqcafkqmyarf5kb1k0gglmlpn6kr3h3x0yph5gd6sk3l4ll"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.wav")))
    (home-page
      "https://github.com/rbanffy/selectric-mode")
    (synopsis "IBM Selectric mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/selectric-mode")
    (license #f)))

(define-public emacs-selectrum
  (package
    (name "emacs-selectrum")
    (version "20220513.2106")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raxod502/selectrum.git")
               (commit
                 "810ea697bdd559d97b86b795e01769cddfa3daf2")))
        (sha256
          (base32
            "1bci9vnpki7lf3v3wwcixq1ak5mgbvlxplsw5c04nckir163cqvb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/radian-software/selectrum")
    (synopsis "Easily select item from list")
    (description
      "Documentation at https://melpa.org/#/selectrum")
    (license #f)))

(define-public emacs-selectrum-prescient
  (package
    (name "emacs-selectrum-prescient")
    (version "20221216.112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "72b023f5fc1ae2bbf2f51f1786cc012d40671bf4")))
        (sha256
          (base32
            "1mc9pjb80bxcmzaylfwh0sgpvwbx3h35jalznwz464hw3vqfff83"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-selectrum))
    (arguments '(#:files ("selectrum-prescient.el")))
    (home-page
      "https://github.com/raxod502/prescient.el")
    (synopsis "prescient.el + Selectrum")
    (description
      "Documentation at https://melpa.org/#/selectrum-prescient")
    (license #f)))

(define-public emacs-semantic-thrift
  (package
    (name "emacs-semantic-thrift")
    (version "20230711.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jerryxgh/semantic-thrift.git")
               (commit
                 "87029282bd59cbba6ae815c0b1a207f02813f5dc")))
        (sha256
          (base32
            "0bvwj401ixc9zclsm0xzkrw62jrsa24dsrgpb6fyra91rvnmwm27"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-thrift))
    (home-page
      "https://github.com/jerryxgh/semantic-thrift")
    (synopsis "Thrift LALR parser")
    (description
      "Documentation at https://melpa.org/#/semantic-thrift")
    (license #f)))

(define-public emacs-semaphore
  (package
    (name "emacs-semaphore")
    (version "20190607.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/webnf/semaphore.el.git")
               (commit
                 "a069b69018b96d284ce7553cd63350a88ea3679c")))
        (sha256
          (base32
            "0dkqj2xcpqdwi4j99pbif8dypk0mlaxgn7aaw51kw98b52ng93gv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("semaphore.el")))
    (home-page
      "http://github.com/webnf/semaphore.el")
    (synopsis
      "Semaphore based on condition variables")
    (description
      "Documentation at https://melpa.org/#/semaphore")
    (license #f)))

(define-public emacs-semaphore-promise
  (package
    (name "emacs-semaphore-promise")
    (version "20190607.2115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/webnf/semaphore.el.git")
               (commit
                 "a069b69018b96d284ce7553cd63350a88ea3679c")))
        (sha256
          (base32
            "0dkqj2xcpqdwi4j99pbif8dypk0mlaxgn7aaw51kw98b52ng93gv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-semaphore emacs-promise))
    (arguments '(#:files ("semaphore-promise.el")))
    (home-page
      "http://github.com/webnf/semaphore.el")
    (synopsis "semaphore integration with promise")
    (description
      "Documentation at https://melpa.org/#/semaphore-promise")
    (license #f)))

(define-public emacs-semi
  (package
    (name "emacs-semi")
    (version "20231102.1035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/semi.git")
               (commit
                 "9063a4485b148a767ea924f0e7cc78d3524ba256")))
        (sha256
          (base32
            "18km8jdxjcqnh378xxd7ivvvcxzrif8zpq9zgki9i7f0q8lsx677"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-apel emacs-flim))
    (home-page "unspecified")
    (synopsis "A library to provide MIME features.")
    (description
      "Documentation at https://melpa.org/#/semi")
    (license #f)))

(define-public emacs-seml-mode
  (package
    (name "emacs-seml-mode")
    (version "20230702.1446")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/seml-mode.el.git")
               (commit
                 "23d684ac590fad6aa3c5ce3962c4683c1eb8fdb5")))
        (sha256
          (base32
            "1146ap0jl1n0qfn117r3iz98zm3qfwm5w0hj0gigq0cqy9c305lb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-impatient-mode
            emacs-htmlize
            emacs-web-mode))
    (home-page
      "https://github.com/conao3/seml-mode.el")
    (synopsis
      "Major-mode for SEML, S-Expression Markup Language, file")
    (description
      "Documentation at https://melpa.org/#/seml-mode")
    (license #f)))

(define-public emacs-sendto
  (package
    (name "emacs-sendto")
    (version "20160425.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/sendto.el.git")
               (commit
                 "076b81d7a53f75b0a59b0ef3448f35570567054c")))
        (sha256
          (base32
            "13qqprxz87cv3sjlq5hj0jp0qcfm3djfgasga8cc84ykrcc47p9f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/sendto.el")
    (synopsis
      "send the region content to a function")
    (description
      "Documentation at https://melpa.org/#/sendto")
    (license #f)))

(define-public emacs-sensei
  (package
    (name "emacs-sensei")
    (version "20220530.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abailly/sensei.git")
               (commit
                 "3538990de9ab57154e3da08d10fbd2c6228d87b8")))
        (sha256
          (base32
            "1f7q7s0ajrpgaa78j3zrff5dr1p2j82kgpvpal2lgqns4947m726"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-request))
    (arguments '(#:files ("elisp/sensei.el")))
    (home-page "https://abailly.github.io/sensei")
    (synopsis "A client for sensei")
    (description
      "Documentation at https://melpa.org/#/sensei")
    (license #f)))

(define-public emacs-sensitive
  (package
    (name "emacs-sensitive")
    (version "20170818.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/timvisher/sensitive.el.git")
               (commit
                 "69dd6125a41d8b55f4b6ba61daa4d1aa1f716fa8")))
        (sha256
          (base32
            "0nj71ds4frfi16hsfswmp89rfxkvvdvhdlsqizzi9cbvr49s0l1f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sequences))
    (arguments '(#:files ("sensitive.el")))
    (home-page "unspecified")
    (synopsis
      "A dead simple way to load sensitive information")
    (description
      "Documentation at https://melpa.org/#/sensitive")
    (license #f)))

(define-public emacs-sentence-navigation
  (package
    (name "emacs-sentence-navigation")
    (version "20220522.1137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/emacs-sentence-navigation.git")
               (commit
                 "ea6e94a5518643acda5b6e98e4e7f47dfc107d29")))
        (sha256
          (base32
            "1wpr37gwkly0jl0m8kh7f1pkp9dwg5i1r3bpx3sd1z8c57sfn8da"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ample-regexps))
    (home-page
      "https://github.com/noctuid/emacs-sentence-navigation")
    (synopsis
      "Commands to navigate one-spaced sentences.")
    (description
      "Documentation at https://melpa.org/#/sentence-navigation")
    (license #f)))

(define-public emacs-sentex
  (package
    (name "emacs-sentex")
    (version "20230411.1650")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/sentex-"
               version
               ".tar"))
        (sha256
          (base32
            "0v0kf5pn8slgys92f679i8s66ccc0njf9kdvwdh4ng882yxqqcax"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/martianh/sentex")
    (synopsis
      "Regex-based sentence navigation rules")
    (description
      "Documentation at https://melpa.org/#/sentex")
    (license #f)))

(define-public emacs-seoul256-theme
  (package
    (name "emacs-seoul256-theme")
    (version "20180505.757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anandpiyer/seoul256-emacs.git")
               (commit
                 "d28a9de73a5ffb1a1c9492db75a5c1efe5e9815f")))
        (sha256
          (base32
            "0jn3a7m8ld07280mc7nkyahagwhvhrcshrpsb8k1ycdwd1r3zqw5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/anandpiyer/seoul256-emacs")
    (synopsis
      "Low-contrast color scheme based on Seoul Colors.")
    (description
      "Documentation at https://melpa.org/#/seoul256-theme")
    (license #f)))

(define-public emacs-separedit
  (package
    (name "emacs-separedit")
    (version "20230513.306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/separedit.el.git")
               (commit
                 "9f5027a9a9c2e67562bc39839415d7c7f318e9a8")))
        (sha256
          (base32
            "1flbn3b3y0hdcr8hgy5r3f38xwja7p0hvh59jfdnlqg4y5l3ajf8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-edit-indirect))
    (home-page
      "https://github.com/twlz0ne/separedit.el")
    (synopsis
      "Edit comment/string/docstring/code block in separate buffer")
    (description
      "Documentation at https://melpa.org/#/separedit")
    (license #f)))

(define-public emacs-sequed
  (package
    (name "emacs-sequed")
    (version "20220115.743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brannala/sequed.git")
               (commit
                 "c886981c46d199e1522f18c3fc15198ab8c9a02f")))
        (sha256
          (base32
            "1illfhlz5r6r9b0dx0mn8zfi7hklcl34za10mnpz63bs2c13vrbq"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/brannala/sequed")
    (synopsis
      "Major mode for FASTA format DNA alignments")
    (description
      "Documentation at https://melpa.org/#/sequed")
    (license #f)))

(define-public emacs-sequences
  (package
    (name "emacs-sequences")
    (version "20170818.1252")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/timvisher/sequences.el.git")
               (commit
                 "564ebbd93b0beea4e75acfbf824350e90b5d5738")))
        (sha256
          (base32
            "0ym2bl9dpsglz35is0iwxfw5w7zs9398bkln8lgv28nr6kw0ym4s"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("sequences.el")))
    (home-page "unspecified")
    (synopsis
      "Ports of some Clojure sequence functions.")
    (description
      "Documentation at https://melpa.org/#/sequences")
    (license #f)))

(define-public emacs-sequential-command
  (package
    (name "emacs-sequential-command")
    (version "20170926.40")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/sequential-command.git")
               (commit
                 "a48cbcbe273b33edd3ae56e68f44b4100fa3a48a")))
        (sha256
          (base32
            "1f05amz22klvs2yqyw7n5bmivgdn5zc7vkv5x6bgc9b5k977lggj"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/sequential-command.el")
    (synopsis "Many commands into one command")
    (description
      "Documentation at https://melpa.org/#/sequential-command")
    (license #f)))

(define-public emacs-seriestracker
  (package
    (name "emacs-seriestracker")
    (version "20230821.1858")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/MaximeWack/seriestracker.git")
               (commit
                 "49b1e7a822c973c48007dc6461577ee68124ddc8")))
        (sha256
          (base32
            "0gfm7ss3bwj3m2y1mb4sdmsv85mjnpkgmzasa3yfj69zbq46glhn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://www.github.com/MaximeWack/seriesTracker")
    (synopsis "Series tracker")
    (description
      "Documentation at https://melpa.org/#/seriestracker")
    (license #f)))

(define-public emacs-servant
  (package
    (name "emacs-servant")
    (version "20140216.1219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cask/servant.git")
               (commit
                 "4d2aa8250b54b28e6e7ee4cd5ebd98a33db2c134")))
        (sha256
          (base32
            "15lx6qvmq3vp84ys8dzbx1nzxcnzlq41whawc2yhrnd1dbq4mv2d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-f
            emacs-ansi
            emacs-commander
            emacs-epl
            emacs-shut-up
            emacs-web-server))
    (arguments '(#:files ("*.el" "bin")))
    (home-page "http://github.com/rejeep/servant.el")
    (synopsis "ELPA server written in Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/servant")
    (license #f)))

(define-public emacs-services
  (package
    (name "emacs-services")
    (version "20170802.1130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/services.el.git")
               (commit
                 "04c7986041a33dfa0b0ae57c7d6fbd600548c596")))
        (sha256
          (base32
            "0ycfkskkdlmc0l75z5a8f66wq5mvb24c4kz19a6kqs8rwm2ygz35"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davep/services.el")
    (synopsis "Services database access functions.")
    (description
      "Documentation at https://melpa.org/#/services")
    (license #f)))

(define-public emacs-sesman
  (package
    (name "emacs-sesman")
    (version "20210901.1134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/sesman.git")
               (commit
                 "e0f555f963c9f02f8e4a50e06fc353eb4c15ee77")))
        (sha256
          (base32
            "1xczx6yavpqjx6sjhfnaw7ls5rh54zq8m7y4jidgx4rdz8y28b0a"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vspinu/sesman")
    (synopsis "Generic Session Manager")
    (description
      "Documentation at https://melpa.org/#/sesman")
    (license #f)))

(define-public emacs-session
  (package
    (name "emacs-session")
    (version "20210422.53")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/session.git")
               (commit
                 "3be207c50dfe964de3cbf5cd8fa9b07fc7d2e609")))
        (sha256
          (base32
            "0h0f93343wvzckwgj8fga62vnqjx59r3xrpq1yy73q5ysj6s92d4"))))
    (build-system melpa-build-system)
    (home-page
      "http://emacs-session.sourceforge.net/")
    (synopsis
      "use variables, registers and buffer places across sessions")
    (description
      "Documentation at https://melpa.org/#/session")
    (license #f)))

(define-public emacs-session-async
  (package
    (name "emacs-session-async")
    (version "20230223.313")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/session-async-"
               version
               ".tar"))
        (sha256
          (base32
            "190f5azm3b9zrq6xi93jms1a7rl4qfai5j8a2fvrpydc1gfw1kcy"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/FelipeLema/session-async.el")
    (synopsis
      "Asynchronous processing in a forked process session")
    (description
      "Documentation at https://melpa.org/#/session-async")
    (license #f)))

(define-public emacs-seti-theme
  (package
    (name "emacs-seti-theme")
    (version "20190201.1848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/caisah/seti-theme.git")
               (commit
                 "9d76db0b91d4f574dd96ac80fad41da35bffa109")))
        (sha256
          (base32
            "14fqkkvjbq2gj737k3yz3s0dkya33fi0dj4wds99zyzss2xp37f8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/caisah/seti-theme")
    (synopsis
      "A dark colored theme, inspired by Seti Atom Theme")
    (description
      "Documentation at https://melpa.org/#/seti-theme")
    (license #f)))

(define-public emacs-sexp-diff
  (package
    (name "emacs-sexp-diff")
    (version "20200314.2018")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/sexp-diff.el.git")
               (commit
                 "7e8c988bea2af209e17b70fa51316ade55529acb")))
        (sha256
          (base32
            "1daz6jss2346a2p30fhc66m230sj7vyxm7jw6zqz5n8h9lqxpjyk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/sexp-diff.el")
    (synopsis
      "Diff sexps based on Levenshtein-like edit distance")
    (description
      "Documentation at https://melpa.org/#/sexp-diff")
    (license #f)))

(define-public emacs-sexp-move
  (package
    (name "emacs-sexp-move")
    (version "20150915.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/elzair/sexp-move.git")
               (commit
                 "117f7a91ab7c25e438413753e916570122011ce7")))
        (sha256
          (base32
            "11h5z2gmwq07c4gqzj2c9apksvqk3k8kpbb9kg78bbif2xfajr3m"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/elzair/sexp-move")
    (synopsis "Improved S-Expression Movement")
    (description
      "Documentation at https://melpa.org/#/sexp-move")
    (license #f)))

(define-public emacs-sexy-monochrome-theme
  (package
    (name "emacs-sexy-monochrome-theme")
    (version "20200115.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/voloyev/sexy-monochrome-theme.git")
               (commit
                 "f3ad07d60c966ef34cb11026eaba053e114bb8f1")))
        (sha256
          (base32
            "1lq7csb5dgpy9hd6dw1ds5klmp88zqyk9x97hg1llzic6rkkfjrr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/voloyev/sexy-monochrome-theme")
    (synopsis
      "A sexy dark Emacs >= 24 theme for your sexy code")
    (description
      "Documentation at https://melpa.org/#/sexy-monochrome-theme")
    (license #f)))

(define-public emacs-sfz-mode
  (package
    (name "emacs-sfz-mode")
    (version "20200716.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sfztools/emacs-sfz-mode.git")
               (commit
                 "aaf31d1b68817251affed7da719dfcb2acd4b51a")))
        (sha256
          (base32
            "1b9qi5vhqp2c2bmkyvmjj4nrb3n42g4w71p2phxssiwmyq80m28f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sfztools/emacs-sfz-mode")
    (synopsis "Major mode for SFZ files")
    (description
      "Documentation at https://melpa.org/#/sfz-mode")
    (license #f)))

(define-public emacs-shackle
  (package
    (name "emacs-shackle")
    (version "20211118.1129")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/shackle-"
               version
               ".el"))
        (sha256
          (base32
            "1iscjpkhdkz9s48xj610l1sinqnc3vmf4ams8lv61yw9is8kxqdg"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/shackle")
    (synopsis "Enforce rules for popups")
    (description
      "Documentation at https://melpa.org/#/shackle")
    (license #f)))

(define-public emacs-shadchen
  (package
    (name "emacs-shadchen")
    (version "20141102.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/VincentToups/shadchen-el.git")
               (commit
                 "35f2b9c304eec990c16efbd557198289dc7cbb1f")))
        (sha256
          (base32
            "0phivbhjdw76gzrx35rp0zybqfb0fdy2hjllf72qf1r0r5gxahl8"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "pattern matching for elisp")
    (description
      "Documentation at https://melpa.org/#/shadchen")
    (license #f)))

(define-public emacs-shader-mode
  (package
    (name "emacs-shader-mode")
    (version "20220930.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/midnightSuyama/shader-mode.git")
               (commit
                 "fe5a1982ba69e4a98b834141a46a1908f132df15")))
        (sha256
          (base32
            "1vch21zxhh4bwdm48060cixd479bs31i7hi5kxi7q8wqbic9gdzm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/midnightSuyama/shader-mode")
    (synopsis "Major mode for shader")
    (description
      "Documentation at https://melpa.org/#/shader-mode")
    (license #f)))

(define-public emacs-shades-of-purple-theme
  (package
    (name "emacs-shades-of-purple-theme")
    (version "20230421.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arturovm/shades-of-purple-emacs.git")
               (commit
                 "8757594c5f6265b09d156cf9f8671f78863b25db")))
        (sha256
          (base32
            "02p84wv3yx77rkb5l9v8ajcwmc65nw13m9rjlpnmi2hnp4bj30vj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arturovm/shades-of-purple-emacs")
    (synopsis "A theme with bold shades of purple")
    (description
      "Documentation at https://melpa.org/#/shades-of-purple-theme")
    (license #f)))

(define-public emacs-shadowenv
  (package
    (name "emacs-shadowenv")
    (version "20210512.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Shopify/shadowenv.el.git")
               (commit
                 "dbcef650b906fec62608d5e4e3075bf251e675e1")))
        (sha256
          (base32
            "0qnqp06vb2ikkwy0p10x3s7mil6c948w42mx4c72cdz36m116zc0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Shopify/shadowenv.el")
    (synopsis "Shadowenv integration.")
    (description
      "Documentation at https://melpa.org/#/shadowenv")
    (license #f)))

(define-public emacs-shakespeare-mode
  (package
    (name "emacs-shakespeare-mode")
    (version "20180704.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CodyReichert/shakespeare-mode.git")
               (commit
                 "c442eeea9d585e1b1fbb8813e33d47feec348a57")))
        (sha256
          (base32
            "1ba9xy5jwn8ni8fi2k144j669jp95k2qf9ip77r16rsiy7divl0y"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/CodyReichert/shakespeare-mode")
    (synopsis
      "A major mode for editing Shakespearean templates.")
    (description
      "Documentation at https://melpa.org/#/shakespeare-mode")
    (license #f)))

(define-public emacs-shampoo
  (package
    (name "emacs-shampoo")
    (version "20230522.1722")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dmatveev/shampoo-emacs.git")
               (commit
                 "4112f3b9282be0ce1f334e148f5c89b03a5df40c")))
        (sha256
          (base32
            "03g0qfzy6qll3alnshhdnzhnb6caxzm5khs1m4rqyj2z5pnrapnj"))))
    (build-system melpa-build-system)
    (home-page "https://revival.sh/shampoo/")
    (synopsis "A remote Smalltalk development mode")
    (description
      "Documentation at https://melpa.org/#/shampoo")
    (license #f)))

(define-public emacs-shanty-themes
  (package
    (name "emacs-shanty-themes")
    (version "20230123.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/qhga/shanty-themes.git")
               (commit
                 "3f678d953771c4a109bd16f6d7def6bd9bbc811d")))
        (sha256
          (base32
            "067py5xhlq7qpps39r0wbxlc61br84bgfgad3cm54j2z1kyd1msz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/qhga/shanty-themes")
    (synopsis "The themes for digital workers")
    (description
      "Documentation at https://melpa.org/#/shanty-themes")
    (license #f)))

(define-public emacs-share2computer
  (package
    (name "emacs-share2computer")
    (version "20200316.31")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tumashu/share2computer.git")
               (commit
                 "15da47625a800e3310b8dc714bd4e41e32966d6a")))
        (sha256
          (base32
            "04h8vhg0fxabjlqgfqsvxkgsmkcp5qmcinxg46xib386r7rzrx4g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tumashu/share2computer")
    (synopsis
      "Elisp helper of android ShareToComputer")
    (description
      "Documentation at https://melpa.org/#/share2computer")
    (license #f)))

(define-public emacs-sharper
  (package
    (name "emacs-sharper")
    (version "20230129.1827")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/sharper.git")
               (commit
                 "496e90e337cb09329d85a6d171c0953a85e918fe")))
        (sha256
          (base32
            "1a8x6mywxkhcc34lv0s5gq48vnhnq0cir0841zbkdjp1fviyx7j6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sebasmonia/sharper")
    (synopsis
      "A dotnet CLI wrapper, using Transient")
    (description
      "Documentation at https://melpa.org/#/sharper")
    (license #f)))

(define-public emacs-shell-command-x
  (package
    (name "emacs-shell-command-x")
    (version "20231106.1958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elizagamedev/shell-command-x.el.git")
               (commit
                 "4b844554ee6250983717d136b2eadebcece945e3")))
        (sha256
          (base32
            "0r520k9fynlj5rbvwd48amd14vzlfzywz1bqrwm86w7vy06gy4qm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/elizagamedev/shell-command-x.el")
    (synopsis "Extensions for shell commands")
    (description
      "Documentation at https://melpa.org/#/shell-command-x")
    (license #f)))

(define-public emacs-shell-current-directory
  (package
    (name "emacs-shell-current-directory")
    (version "20140101.2354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/metaperl/shell-current-directory.git")
               (commit
                 "bf843771bf9a4aa05e054ade799eb8862f3be89a")))
        (sha256
          (base32
            "1w42j5cdddr0riz1xjq3wiz5i9f71i9jdzd1l92ir0mlj05wjyic"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "create new shell based on buffer directory")
    (description
      "Documentation at https://melpa.org/#/shell-current-directory")
    (license #f)))

(define-public emacs-shell-here
  (package
    (name "emacs-shell-here")
    (version "20220102.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/shell-here.git")
               (commit
                 "eeb437ff26d62a5009046b1b3b4503b768e3131a")))
        (sha256
          (base32
            "0x8lnybxj7k6wj941lgqmm57f3qqnmb0gc7573l1fxwfhf39fl20"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Open a shell relative to the working directory")
    (description
      "Documentation at https://melpa.org/#/shell-here")
    (license #f)))

(define-public emacs-shell-history
  (package
    (name "emacs-shell-history")
    (version "20100505.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/shell-history.git")
               (commit
                 "ee371a81f2d2bf5a308344078329ca1e9b5ed38c")))
        (sha256
          (base32
            "0jyz31j5a07shcf2ym5gnn16xk5r3s84ls8kxk5myvxi3wkpgdd4"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/shell-history.el")
    (synopsis "integration with shell history")
    (description
      "Documentation at https://melpa.org/#/shell-history")
    (license #f)))

(define-public emacs-shell-maker
  (package
    (name "emacs-shell-maker")
    (version "20230709.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xenodium/chatgpt-shell.git")
               (commit
                 "a4efa0990a1423bbd61880e298d981f71d516a6c")))
        (sha256
          (base32
            "1qxrn0c8fcs5zr702hz2i8584268q2dlhwzizyykrl2ikrfx6afs"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("shell-maker.el")))
    (home-page
      "https://github.com/xenodium/chatgpt-shell")
    (synopsis
      "Interaction mode for making comint shells")
    (description
      "Documentation at https://melpa.org/#/shell-maker")
    (license #f)))

(define-public emacs-shell-pop
  (package
    (name "emacs-shell-pop")
    (version "20200315.1139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyagi/shell-pop-el.git")
               (commit
                 "4b4394037940a890a313d715d203d9ead2d156a6")))
        (sha256
          (base32
            "0s77n6b9iw1x3dv91ybkpgy3zvqd12si7zw3lg0m2b6j1akrawsg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kyagi/shell-pop-el")
    (synopsis
      "helps you to use shell easily on Emacs. Only one key action to work.")
    (description
      "Documentation at https://melpa.org/#/shell-pop")
    (license #f)))

(define-public emacs-shell-split-string
  (package
    (name "emacs-shell-split-string")
    (version "20151224.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/shell-split-string-el.git")
               (commit
                 "19f6f999c33cc66a4c91bacdcc3697c25d97bf5a")))
        (sha256
          (base32
            "16srngml5xmpaxb0wzhx91jil0r0dmn673bwai3lzxrkmjnl748l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/shell-split-string-el")
    (synopsis
      "Split strings using shell-like syntax")
    (description
      "Documentation at https://melpa.org/#/shell-split-string")
    (license #f)))

(define-public emacs-shell-switcher
  (package
    (name "emacs-shell-switcher")
    (version "20210509.1045")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/shell-switcher.git")
               (commit
                 "ed74b20fa12935be0068765f5bc8de97b92a8020")))
        (sha256
          (base32
            "18ynh2j3mq206lqgkd7zmxzxh3661w9nbawkwvgkk2qi3837xrbr"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("rswitcher.el" "shell-switcher.el")))
    (home-page
      "https://github.com/DamienCassou/shell-switcher")
    (synopsis
      "Provide fast switching between shell buffers.")
    (description
      "Documentation at https://melpa.org/#/shell-switcher")
    (license #f)))

(define-public emacs-shell-toggle
  (package
    (name "emacs-shell-toggle")
    (version "20150226.1411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/shell-toggle.el.git")
               (commit
                 "0d01bd9a780fdb7fe6609c552523f4498649a3b9")))
        (sha256
          (base32
            "0ssaccdacabpja9nqzhr8x8ggfwmlian7y4p0fa6gvr7qsvjpgr9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/knu/shell-toggle.el")
    (synopsis "Toggle to and from the shell buffer")
    (description
      "Documentation at https://melpa.org/#/shell-toggle")
    (license #f)))

(define-public emacs-shellcop
  (package
    (name "emacs-shellcop")
    (version "20220629.817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/shellcop.git")
               (commit
                 "3f051e42288ddfe4cd7cd0ee62efad90227de24b")))
        (sha256
          (base32
            "1v0p8f5m1i3sm15q4mi687wk9gx5bv8yx38n15ap36vwkrybxzad"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/redguardtoo/shellcop")
    (synopsis "Analyze info&error in shell-mode")
    (description
      "Documentation at https://melpa.org/#/shellcop")
    (license #f)))

(define-public emacs-shelldoc
  (package
    (name "emacs-shelldoc")
    (version "20230207.250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-shelldoc.git")
               (commit
                 "178d78d08e94b273b23ab1a32c5be509fdfe2286")))
        (sha256
          (base32
            "1dqdh2rd0v136ckj4wp00g3gsq0lrzicwl1c60xacy548amdxq07"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "http://github.com/mhayashi1120/Emacs-shelldoc")
    (synopsis
      "shell command editing support with man page.")
    (description
      "Documentation at https://melpa.org/#/shelldoc")
    (license #f)))

(define-public emacs-shelldon
  (package
    (name "emacs-shelldon")
    (version "20220325.1305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Overdr0ne/shelldon.git")
               (commit
                 "8d073ce580e7782ed863fc6e19dc33b4f73c0d79")))
        (sha256
          (base32
            "07ka7nd1apyjdf9cljs4zbcyv0bfbn1z4arhq2m2kdinjqpr6mbq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Overdr0ne/shelldon")
    (synopsis "An enhanced shell interface")
    (description
      "Documentation at https://melpa.org/#/shelldon")
    (license #f)))

(define-public emacs-shelltest-mode
  (package
    (name "emacs-shelltest-mode")
    (version "20180501.141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rtrn/shelltest-mode.git")
               (commit
                 "5fea8c9394380e822971a171905b6b5ab9be812d")))
        (sha256
          (base32
            "1np65a92n4y9i0nr8wymzn6md9xqmi9qyggya7sz0q4nzsh45wqg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rtrn/shelltest-mode")
    (synopsis "Major mode for shelltestrunner")
    (description
      "Documentation at https://melpa.org/#/shelltest-mode")
    (license #f)))

(define-public emacs-shen-elisp
  (package
    (name "emacs-shen-elisp")
    (version "20221211.1313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deech/shen-elisp.git")
               (commit
                 "957ab44654fc7a7cc1b78181d244fa25166f9b09")))
        (sha256
          (base32
            "0xfs48fryqjaiy9w7rwxsi9g950gbjq6haacah1lf8h59pa9ff2w"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("shen*.el")))
    (home-page "https://github.com/deech/shen-elisp")
    (synopsis "Shen implementation in Elisp")
    (description
      "Documentation at https://melpa.org/#/shen-elisp")
    (license #f)))

(define-public emacs-shenshou
  (package
    (name "emacs-shenshou")
    (version "20230226.320")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/shenshou.git")
               (commit
                 "0a00b9f5a86a54324f88c7d27b603f136ee2fb0b")))
        (sha256
          (base32
            "0yr6pw3yglav07xg6l0dx1xc0dggcgv1xyfpds7y865iizvmc4i9"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/redguardtoo/shenshou")
    (synopsis
      "Download&Extract subtitles from opensubtitles.org")
    (description
      "Documentation at https://melpa.org/#/shenshou")
    (license #f)))

(define-public emacs-shfmt
  (package
    (name "emacs-shfmt")
    (version "20220602.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/emacs-shfmt.git")
               (commit
                 "279a51defa3e0d97dc40b8a26e078699d4e22e90")))
        (sha256
          (base32
            "1kzi8gy37cm1z4x69400gbkawx4k0jafvz8m50w0b48nvrvsy6ys"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/purcell/emacs-shfmt")
    (synopsis "Reformat shell scripts using shfmt")
    (description
      "Documentation at https://melpa.org/#/shfmt")
    (license #f)))

(define-public emacs-shift-number
  (package
    (name "emacs-shift-number")
    (version "20170301.1459")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alezost/shift-number.el.git")
               (commit
                 "cd099a5582fc996b800ac7607f6c38a004ce9740")))
        (sha256
          (base32
            "131by7z6303m81kjhy8rnfvwyzfbxglc19xb90jdks4vgczqkcah"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alezost/shift-number.el")
    (synopsis
      "Increase/decrease the number at point")
    (description
      "Documentation at https://melpa.org/#/shift-number")
    (license #f)))

(define-public emacs-shift-text
  (package
    (name "emacs-shift-text")
    (version "20130831.1655")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/shift-text.git")
               (commit
                 "1be9cbf994000022172ceb746fe1d597f57ea8ba")))
        (sha256
          (base32
            "13zsws8gq9a8nfk4yzlvfsvqjh9zbnanmw68rcna93yc5nc634nr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-es-lib))
    (home-page "https://github.com/sabof/shift-text")
    (synopsis
      "Move the region in 4 directions, in a way similar to Eclipse's")
    (description
      "Documentation at https://melpa.org/#/shift-text")
    (license #f)))

(define-public emacs-shimbun
  (package
    (name "emacs-shimbun")
    (version "20231026.455")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-w3m/emacs-w3m.git")
               (commit
                 "e3b87d61dfef3a9d44872c50db360732ba949d57")))
        (sha256
          (base32
            "06rqxib501xn2xlc4pqdh06zw0wrkg70sxr2fqv7i2fpl9qxwriv"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("shimbun/*.el")))
    (home-page "unspecified")
    (synopsis "interfacing with web newspapers")
    (description
      "Documentation at https://melpa.org/#/shimbun")
    (license #f)))

(define-public emacs-shm
  (package
    (name "emacs-shm")
    (version "20180327.57")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/projectional-haskell/structured-haskell-mode.git")
               (commit
                 "7f9df73f45d107017c18ce4835bbc190dfe6782e")))
        (sha256
          (base32
            "1jcc30048j369jgsbbmkb63whs4wb37bq21jrm3r6ry22izndsqa"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("elisp/*.el"
         (:exclude "shm-test.el" "shm-tests.el"))))
    (home-page "unspecified")
    (synopsis "Structured Haskell Mode")
    (description
      "Documentation at https://melpa.org/#/shm")
    (license #f)))

(define-public emacs-shoulda
  (package
    (name "emacs-shoulda")
    (version "20140616.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marcwebbie/shoulda.el.git")
               (commit
                 "fbe8eb8efc6cfcca1713283a290882cfcdc8725e")))
        (sha256
          (base32
            "19p47a4hwl6h2w5ay09hjhl4kf7cydwqp8s2iyrx2i0k58az8i8i"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Shoulda test support for ruby")
    (description
      "Documentation at https://melpa.org/#/shoulda")
    (license #f)))

(define-public emacs-show-css
  (package
    (name "emacs-show-css")
    (version "20160210.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/8cylinder/showcss-mode.git")
               (commit
                 "771daeddd4df7a7c10f66419a837145649bab63b")))
        (sha256
          (base32
            "11kzjm12hbcdzrshq20r20l29k3555np1sva7afqrhgvd239fdq1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-doom emacs-s))
    (home-page
      "https://github.com/smmcg/showcss-mode")
    (synopsis
      "Show the css of the html attribute the cursor is on")
    (description
      "Documentation at https://melpa.org/#/show-css")
    (license #f)))

(define-public emacs-show-eol
  (package
    (name "emacs-show-eol")
    (version "20220919.631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/show-eol.git")
               (commit
                 "ad3aa8f4fa0d1b20f8526536f0ac35386f521372")))
        (sha256
          (base32
            "18rlqd4wssvx1497c599a9j54cb8zqjkwb60z10dff4z0xjlri8b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/show-eol")
    (synopsis "Show end of line symbol in buffer")
    (description
      "Documentation at https://melpa.org/#/show-eol")
    (license #f)))

(define-public emacs-show-font-mode
  (package
    (name "emacs-show-font-mode")
    (version "20201225.2217")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/melissaboiko/show-font-mode.git")
               (commit
                 "8503be7966d3bd8316039b5f49d3c37c7b97d10c")))
        (sha256
          (base32
            "188d6fpi8cws0dhlcpgvvixbmf6045vb1r7psbd3sqciv29xm1yh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/melissaboiko/show-font-mode")
    (synopsis "Show font at point on mode line")
    (description
      "Documentation at https://melpa.org/#/show-font-mode")
    (license #f)))

(define-public emacs-showtip
  (package
    (name "emacs-showtip")
    (version "20090830.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/showtip.git")
               (commit
                 "930da302809a4257e8d69425455b29e1cc91949b")))
        (sha256
          (base32
            "01zak0zhha6dp7a2hm28d065gjnc462iwpsfyxhbxgfzcdlicqc7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Show tip at cursor")
    (description
      "Documentation at https://melpa.org/#/showtip")
    (license #f)))

(define-public emacs-shpec-mode
  (package
    (name "emacs-shpec-mode")
    (version "20150530.922")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shpec/shpec-mode.git")
               (commit
                 "146adc8281d0f115df39a3a3f982ac59ab61b754")))
        (sha256
          (base32
            "1mizhbwvnsxxjz6m94qziibvhghhp8v8db3wxrq3z9gsaqqkcndn"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/shpec/shpec-mode")
    (synopsis "Minor mode for shpec specification")
    (description
      "Documentation at https://melpa.org/#/shpec-mode")
    (license #f)))

(define-public emacs-shr-tag-pre-highlight
  (package
    (name "emacs-shr-tag-pre-highlight")
    (version "20200626.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/shr-tag-pre-highlight.el.git")
               (commit
                 "931c447bc0d6c134ddc9657c664eeee33afbc54d")))
        (sha256
          (base32
            "09gcprqhl1ds4k407rlsjqr9y56a9wvjkli70wrf2l7w3dcm4qq0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-language-detection))
    (home-page
      "https://github.com/xuchunyang/shr-tag-pre-highlight.el")
    (synopsis
      "Syntax highlighting code block in HTML")
    (description
      "Documentation at https://melpa.org/#/shr-tag-pre-highlight")
    (license #f)))

(define-public emacs-shrface
  (package
    (name "emacs-shrface")
    (version "20230805.500")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chenyanming/shrface.git")
               (commit
                 "946154a05b14a270f80351d5b2a98b19aa6c5745")))
        (sha256
          (base32
            "0qqvw7az7cr20kss7szvwqmbznqb160jg13akdxkiiksgzng0f90"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-language-detection))
    (home-page
      "https://github.com/chenyanming/shrface")
    (synopsis
      "Extend shr/eww with org features and analysis capability")
    (description
      "Documentation at https://melpa.org/#/shrface")
    (license #f)))

(define-public emacs-shrink-path
  (package
    (name "emacs-shrink-path")
    (version "20190208.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/bennya/shrink-path.el.git")
               (commit
                 "c14882c8599aec79a6e8ef2d06454254bb3e1e41")))
        (sha256
          (base32
            "1xnby24gpxij1z03wvx89s459jw0f8bwhgi80xvdq8gxhbbz2w7a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-f))
    (home-page
      "https://gitlab.com/bennya/shrink-path.el")
    (synopsis "fish-style path")
    (description
      "Documentation at https://melpa.org/#/shrink-path")
    (license #f)))

(define-public emacs-shrink-whitespace
  (package
    (name "emacs-shrink-whitespace")
    (version "20181003.321")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jcpetkovich/shrink-whitespace.el.git")
               (commit
                 "0407b89c142bd17e65edb666f35e2c6755bd0867")))
        (sha256
          (base32
            "1qxdi2jm3zl5f55c6irsbnxrmqw039pcm99jafn7hg5z5zc3xhbx"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jcpetkovich/shrink-whitespace.el")
    (synopsis "Whitespace removal DWIM key")
    (description
      "Documentation at https://melpa.org/#/shrink-whitespace")
    (license #f)))

(define-public emacs-shroud
  (package
    (name "emacs-shroud")
    (version "20210220.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.savannah.nongnu.org/git/emacs-shroud.git")
               (commit
                 "2e6ff2bab4a1e798c090c9d7fbd90b7f3463d5c5")))
        (sha256
          (base32
            "08nnpzdrh4sq3vddfcdagaxvn4liprmc3dd17lbrvw5qlcadrbvg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-bui emacs-dash))
    (arguments
      '(#:files
        ("src/shroud"
         "src/shroud*.el"
         "doc/emacs-shroud.texi"
         "README"
         "NEWS"
         "AUTHORS"
         "COPYING"
         (:exclude "make.el"))))
    (home-page
      "https://github.com/o-nly/emacs-shroud")
    (synopsis "Shroud secrets")
    (description
      "Documentation at https://melpa.org/#/shroud")
    (license #f)))

(define-public emacs-shut-up
  (package
    (name "emacs-shut-up")
    (version "20210403.1249")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cask/shut-up.git")
               (commit
                 "ff6f06f3b080ee833a25a22da8cb5b96e911dc77")))
        (sha256
          (base32
            "1kghm1vwy38k9l4a4jjabhqi49v4p27abk82q6yfpm304ygw816v"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rejeep/shut-up.el")
    (synopsis "Shut up would you!")
    (description
      "Documentation at https://melpa.org/#/shut-up")
    (license #f)))

(define-public emacs-shx
  (package
    (name "emacs-shx")
    (version "20221224.2230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/riscy/shx-for-emacs.git")
               (commit
                 "b99d16f36bc278d668d8428c4bc9af77064c336a")))
        (sha256
          (base32
            "1wkqnc5n8if8fsh7f3bdr5nzn6dbj1nzdxlmnz8nflmx4g32fp6v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/riscy/shx-for-emacs")
    (synopsis "Extras for the comint-mode shell")
    (description
      "Documentation at https://melpa.org/#/shx")
    (license #f)))

(define-public emacs-sibilant-mode
  (package
    (name "emacs-sibilant-mode")
    (version "20151119.2145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jbr/sibilant-mode.git")
               (commit
                 "bc1b5d8cd597918bafc9b2880ee49024740e54ab")))
        (sha256
          (base32
            "0cjqh6qbbmgxd6zgqnikw6bh8wpjydydkkqs5wcmblpi5awqmnb6"))))
    (build-system melpa-build-system)
    (home-page "http://sibilantjs.info")
    (synopsis
      "Support for the Sibilant programming language")
    (description
      "Documentation at https://melpa.org/#/sibilant-mode")
    (license #f)))

(define-public emacs-sicp
  (package
    (name "emacs-sicp")
    (version "20200512.1137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/webframp/sicp-info.git")
               (commit
                 "4002d83083d520c6b5ede2df36cc2cee885d450a")))
        (sha256
          (base32
            "0c9lknrhwhi4v3qnnzmy0k24d8pr3d3mpxi9xzcxq97f5w1x4fsk"))))
    (build-system melpa-build-system)
    (home-page "https://mitpress.mit.edu/sicp")
    (synopsis
      "Structure and Interpretation of Computer Programs in info format")
    (description
      "Documentation at https://melpa.org/#/sicp")
    (license #f)))

(define-public emacs-side-hustle
  (package
    (name "emacs-side-hustle")
    (version "20230814.1047")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/side-hustle.git")
               (commit
                 "7c8f807d22eddaa75f0174b785463e67f2a0e140")))
        (sha256
          (base32
            "0y92q55zzx9m7qkhiq3rs5zx6n7m5zrfd1p4ljcbxvxas03ygzxc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/side-hustle")
    (synopsis
      "Hustle through Imenu in a side window")
    (description
      "Documentation at https://melpa.org/#/side-hustle")
    (license #f)))

(define-public emacs-side-notes
  (package
    (name "emacs-side-notes")
    (version "20230814.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rnkn/side-notes.git")
               (commit
                 "0eeb82389198f3ed096deb6f6e71317148090282")))
        (sha256
          (base32
            "0zbh8a97117nhgvk5a5ajwsdxpknjki0k5h5hk2fi7z3nd8w8vcj"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rnkn/side-notes")
    (synopsis
      "Easy access to a directory notes file")
    (description
      "Documentation at https://melpa.org/#/side-notes")
    (license #f)))

(define-public emacs-sidecar-locals
  (package
    (name "emacs-sidecar-locals")
    (version "20230518.1422")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/sidecar-locals-"
               version
               ".tar"))
        (sha256
          (base32
            "19q0y2qiyi06v9j12wzsh34hbfm553rxw6pc7cl6ra9n73958x9p"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-sidecar-locals")
    (synopsis
      "A flexible alternative to built-in dir-locals")
    (description
      "Documentation at https://melpa.org/#/sidecar-locals")
    (license #f)))

(define-public emacs-sideline
  (package
    (name "emacs-sideline")
    (version "20231020.621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-sideline/sideline.git")
               (commit
                 "1c6a15d23d50df218c8c1546bbcc31b5fabe8af9")))
        (sha256
          (base32
            "0hiljzbxnz980x3arc88190lrcxkkfvd7asn8k7s91l26v9lis0s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-sideline/sideline")
    (synopsis "Show information on the side")
    (description
      "Documentation at https://melpa.org/#/sideline")
    (license #f)))

(define-public emacs-sideline-blame
  (package
    (name "emacs-sideline-blame")
    (version "20231015.1917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-sideline/sideline-blame.git")
               (commit
                 "014ac17de30b4fcafa7b73d8c886cffa3807d8b1")))
        (sha256
          (base32
            "16jircw28fhamzppjqfnga6qv6bfxfyj0dlj1mqyv64j3v21dnqm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sideline emacs-vc-msg))
    (home-page
      "https://github.com/emacs-sideline/sideline-blame")
    (synopsis "Show blame messages with sideline")
    (description
      "Documentation at https://melpa.org/#/sideline-blame")
    (license #f)))

(define-public emacs-sideline-flycheck
  (package
    (name "emacs-sideline-flycheck")
    (version "20230402.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-sideline/sideline-flycheck.git")
               (commit
                 "8c276c0669a49dc609330ed6bb0d470cde473860")))
        (sha256
          (base32
            "1sbnlx81gs2zxx561v054b1v14fqg2lz40i7q8vkh2kf18q4qy53"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sideline emacs-flycheck emacs-ht))
    (home-page
      "https://github.com/emacs-sideline/sideline-flycheck")
    (synopsis "Show flycheck errors with sideline")
    (description
      "Documentation at https://melpa.org/#/sideline-flycheck")
    (license #f)))

(define-public emacs-sideline-flymake
  (package
    (name "emacs-sideline-flymake")
    (version "20230402.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-sideline/sideline-flymake.git")
               (commit
                 "01f0c78115e4242d192a194a46ae47fe77001913")))
        (sha256
          (base32
            "1pxn6yby9a2q0wmpg3y8rzlmjaji8lja6jmpxqb7mfqxa85mh22x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sideline))
    (home-page
      "https://github.com/emacs-sideline/sideline-flymake")
    (synopsis "Show flymake errors with sideline")
    (description
      "Documentation at https://melpa.org/#/sideline-flymake")
    (license #f)))

(define-public emacs-sideline-lsp
  (package
    (name "emacs-sideline-lsp")
    (version "20221231.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-sideline/sideline-lsp.git")
               (commit
                 "38ba700db1769de216989fb9217795934147d160")))
        (sha256
          (base32
            "01dhnfcc0mig98l7vzc0nfdhz2y041d19jv2r9qp1l6cklimpzfd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sideline
            emacs-lsp-mode
            emacs-dash
            emacs-ht
            emacs-s))
    (home-page
      "https://github.com/emacs-sideline/sideline-lsp")
    (synopsis "Show lsp information with sideline")
    (description
      "Documentation at https://melpa.org/#/sideline-lsp")
    (license #f)))

(define-public emacs-sift
  (package
    (name "emacs-sift")
    (version "20200421.1423")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/sift.el.git")
               (commit
                 "cdddba2d183146c340915003f1b5d09d13712c22")))
        (sha256
          (base32
            "0ln87nhq2vhsb0ywn7rp0b3hzms5z7l6cv6dng08yly12r2957if"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("sift.el")))
    (home-page
      "https://github.com/nlamirault/sift.el")
    (synopsis
      "Front-end for sift, a fast and powerful grep alternative")
    (description
      "Documentation at https://melpa.org/#/sift")
    (license #f)))

(define-public emacs-signal
  (package
    (name "emacs-signal")
    (version "20160816.1438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mola-T/signal.git")
               (commit
                 "aa58327e2297df921d72a0370468b48663efd438")))
        (sha256
          (base32
            "1gzfdk3ks56h8q4xk69aaxkhkg9jhs55iqdicyvq7x9wmjn6b7xw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mola-T/signal")
    (synopsis "Advanced hook")
    (description
      "Documentation at https://melpa.org/#/signal")
    (license #f)))

(define-public emacs-silkworm-theme
  (package
    (name "emacs-silkworm-theme")
    (version "20210215.1120")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/silkworm-theme.git")
               (commit
                 "ff80e9294da0fb093e15097ac62153ef4a64a889")))
        (sha256
          (base32
            "09zrhfk6w74kc4sml20k6vhnd8b07yppn69rffan5mhr3qr69176"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Light theme with pleasant, low contrast colors.")
    (description
      "Documentation at https://melpa.org/#/silkworm-theme")
    (license #f)))

(define-public emacs-simp
  (package
    (name "emacs-simp")
    (version "20180607.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/simp.git")
               (commit
                 "d4d4b8547055347828bedccbeffdb4fd2d5a5d34")))
        (sha256
          (base32
            "1a60vk46haibzrm6zgssdw085wpssmmqc66bipvkq6xnp2cvchkc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/re5et/simp")
    (synopsis
      "Simple project definition, chiefly for file finding, and grepping")
    (description
      "Documentation at https://melpa.org/#/simp")
    (license #f)))

(define-public emacs-simple-bookmarks
  (package
    (name "emacs-simple-bookmarks")
    (version "20190204.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtkDvlp/simple-bookmarks.git")
               (commit
                 "54e8d771bcdb0eb235b31c0aa9642171369500e5")))
        (sha256
          (base32
            "0i4yw341b7iml2j8mxclixsrdqlvixfxpabaxp4jh70aq2zfw1cf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jtkDvlp/simple-bookmarks")
    (synopsis "Bookmark / functioncall manager")
    (description
      "Documentation at https://melpa.org/#/simple-bookmarks")
    (license #f)))

(define-public emacs-simple-call-tree
  (package
    (name "emacs-simple-call-tree")
    (version "20210625.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/simple-call-tree.git")
               (commit
                 "26de24bcde0eae911a0185bb5a6b74b9864fcfc3")))
        (sha256
          (base32
            "0589ns2v6jxyd7adjkj34zlcnnxbfs6c7hm56yskbs2s4qkkf369"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-anaphora))
    (home-page
      "http://www.emacswiki.org/emacs/download/simple-call-tree.el")
    (synopsis
      "analyze source code based on font-lock text-properties")
    (description
      "Documentation at https://melpa.org/#/simple-call-tree")
    (license #f)))

(define-public emacs-simple-httpd
  (package
    (name "emacs-simple-httpd")
    (version "20230821.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/emacs-web-server.git")
               (commit
                 "347c30494d3bcfc79de35e54538f92f4e4a46ecd")))
        (sha256
          (base32
            "1dj2w5yx2dzv6gv4iwahr3mx46dhjfaimw5yycdhb0iljr97a4lp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/emacs-http-server")
    (synopsis "pure elisp HTTP server")
    (description
      "Documentation at https://melpa.org/#/simple-httpd")
    (license #f)))

(define-public emacs-simple-indentation
  (package
    (name "emacs-simple-indentation")
    (version "20230625.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/semenInRussia/simple-indentation.el.git")
               (commit
                 "b5f97fc14b3f494cfe009938cf5ee9016a83d30e")))
        (sha256
          (base32
            "12q98g34snr7dciwlfsvzg5mi7c2wng7q1gxr9raib0bvficifp0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/semenInRussia/simple-indentation.el")
    (synopsis
      "Simplify writing indentation functions, alternative to SMIE")
    (description
      "Documentation at https://melpa.org/#/simple-indentation")
    (license #f)))

(define-public emacs-simple-modeline
  (package
    (name "emacs-simple-modeline")
    (version "20210312.1048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gexplorer/simple-modeline.git")
               (commit
                 "119d8224a8ae0ee17b09ac1fed6cdb9cb1d048fd")))
        (sha256
          (base32
            "1rnzrx7gcaw056cqvnb1wai4hala0r0gpk3a4kyyghyp9hmrxbb5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gexplorer/simple-modeline")
    (synopsis
      "A simple mode-line configuration for Emacs")
    (description
      "Documentation at https://melpa.org/#/simple-modeline")
    (license #f)))

(define-public emacs-simple-mpc
  (package
    (name "emacs-simple-mpc")
    (version "20220216.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorenvo/simple-mpc.git")
               (commit
                 "57ee14ada8aec477ddde5e4f632c8d3d99a66535")))
        (sha256
          (base32
            "1gij7kjidi21p8sbywlj9734s5cq1h31h6mv71drcj3cna9n06pb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/jorenvo/simple-mpc")
    (synopsis "provides a simple interface to mpc")
    (description
      "Documentation at https://melpa.org/#/simple-mpc")
    (license #f)))

(define-public emacs-simple-paren
  (package
    (name "emacs-simple-paren")
    (version "20230810.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andreas-roehler/simple-paren.git")
               (commit
                 "206d8f3f82123f61e7133a14f66c83a9632bd99e")))
        (sha256
          (base32
            "1vgan91fkmncw9bfis354iccv8vm7wgb35wp1qdvq4977nrivkv9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andreas-roehler/simple-paren")
    (synopsis
      "Non-electrical insert paired delimiter, wrap")
    (description
      "Documentation at https://melpa.org/#/simple-paren")
    (license #f)))

(define-public emacs-simple-rtm
  (package
    (name "emacs-simple-rtm")
    (version "20160222.1534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mbunkus/simple-rtm.git")
               (commit
                 "8c7cd96cf66ef112be5c363e3378e304f8f83999")))
        (sha256
          (base32
            "1kkhnsxr8zrb21k4ckyg69nsndwy4zdkvfw2drk4v1vnbgx8144f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rtm emacs-dash))
    (arguments '(#:files ("lisp/*.el")))
    (home-page "unspecified")
    (synopsis
      "Interactive Emacs mode for Remember The Milk")
    (description
      "Documentation at https://melpa.org/#/simple-rtm")
    (license #f)))

(define-public emacs-simple-screen
  (package
    (name "emacs-simple-screen")
    (version "20200926.109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wachikun/simple-screen.git")
               (commit
                 "3ce535755986f7c25890d11e42fa621a3a069a4f")))
        (sha256
          (base32
            "1cfgmpffqdxg536whik4ph2knxnmbgr4njq744glx82sfy9qp6wx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wachikun/simple-screen")
    (synopsis "Simple screen configuration manager")
    (description
      "Documentation at https://melpa.org/#/simple-screen")
    (license #f)))

(define-public emacs-simpleclip
  (package
    (name "emacs-simpleclip")
    (version "20220518.1251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/simpleclip.git")
               (commit
                 "023f239275115169c3a3637ad95fae4a036c005e")))
        (sha256
          (base32
            "1mvjlcmldcx3vd6xkk3nriy8lghp6nqa6l13a6kax5n8dc0hi4qi"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/simpleclip")
    (synopsis
      "Simplified access to the system clipboard")
    (description
      "Documentation at https://melpa.org/#/simpleclip")
    (license #f)))

(define-public emacs-simplecov
  (package
    (name "emacs-simplecov")
    (version "20221206.350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenspider/simplecov.el.git")
               (commit
                 "215f2bdc5d2ef9b4439779ba4d3129210c9f34ab")))
        (sha256
          (base32
            "1rr4w0wvx07w62md3y1qj0cp7grn8z7116babvr76iigdcc0mzkz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.org/zenspider/elisp")
    (synopsis "Colorize untested ruby code")
    (description
      "Documentation at https://melpa.org/#/simplecov")
    (license #f)))

(define-public emacs-simplenote
  (package
    (name "emacs-simplenote")
    (version "20141118.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dotemacs/simplenote.el.git")
               (commit
                 "e836fcdb5a6497a9ffd6bceddd19b4bc52189078")))
        (sha256
          (base32
            "0xq4vy3ggdjiycd3aa62k94kd43zcpm8bfdgi8grwkb1lpvwq9i9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Interact with simple-note.appspot.com")
    (description
      "Documentation at https://melpa.org/#/simplenote")
    (license #f)))

(define-public emacs-simplenote2
  (package
    (name "emacs-simplenote2")
    (version "20190321.933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha22jp/simplenote2.el.git")
               (commit
                 "760ffecda63bd218876b623f46d332e3ef079be6")))
        (sha256
          (base32
            "1swb6xvdw6dql6wdj8y5kaaicwrafiz5jwnfl5h1viw08b98q8dv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request-deferred
            emacs-uuidgen
            emacs-unicode-escape))
    (home-page "unspecified")
    (synopsis "Interact with app.simplenote.com")
    (description
      "Documentation at https://melpa.org/#/simplenote2")
    (license #f)))

(define-public emacs-simplezen
  (package
    (name "emacs-simplezen")
    (version "20130421.1000")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/simplezen.el.git")
               (commit
                 "119fdf2c6890a0c56045ae72cf4fce0071a81481")))
        (sha256
          (base32
            "0108q2b5h73rjxg9k2kmc8z6la9kgqdnz9z1x7rn61v3vbxlzqvn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page "unspecified")
    (synopsis
      "A simple subset of zencoding-mode for Emacs.")
    (description
      "Documentation at https://melpa.org/#/simplezen")
    (license #f)))

(define-public emacs-simplicity-theme
  (package
    (name "emacs-simplicity-theme")
    (version "20221016.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smallwat3r/emacs-simplicity-theme.git")
               (commit
                 "f4aab6aa07b536688eb62355b83dde5fcd16e049")))
        (sha256
          (base32
            "0ydgx94wxv6x81yqzy5bwrs06cx8hsrw2c1y4gw3awm953m9259g"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/smallwat3r/emacs-simplicity-theme")
    (synopsis "A minimalist dark theme")
    (description
      "Documentation at https://melpa.org/#/simplicity-theme")
    (license #f)))

(define-public emacs-siri-shortcuts
  (package
    (name "emacs-siri-shortcuts")
    (version "20211229.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DaniruKun/siri-shortcuts.el.git")
               (commit
                 "190f242f71e071adfd89fa1f2f6ea22b62afd133")))
        (sha256
          (base32
            "1v8bxvrkmnrl05m98jkwb0kq349jjldhn6jkpsvpxa8hvlwwc15w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DaniruKun/siri-shortcuts.el")
    (synopsis "Interact with Siri Shortcuts")
    (description
      "Documentation at https://melpa.org/#/siri-shortcuts")
    (license #f)))

(define-public emacs-sis
  (package
    (name "emacs-sis")
    (version "20231028.925")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/emacs-smart-input-source.git")
               (commit
                 "aac92f20e897985ffd52b61edcffaf89354b8be1")))
        (sha256
          (base32
            "1qhh68j7kj12zrv235piavnxmqsjhqsqy251n51zihb3aiqrfd6z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-terminal-focus-reporting))
    (home-page
      "https://github.com/laishulu/emacs-smart-input-source")
    (synopsis
      "Less manual switch for native or OS input source (input method).")
    (description
      "Documentation at https://melpa.org/#/sis")
    (license #f)))

(define-public emacs-sisyphus
  (package
    (name "emacs-sisyphus")
    (version "20230901.1236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/sisyphus.git")
               (commit
                 "c48b803a193c982e161f735652cb5ffedf0ca03b")))
        (sha256
          (base32
            "15svzqi9hvz2rs07jnh0ivisiavk570dq7bxgyxy9jsmqp0kqxkn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-elx
            emacs-llama
            emacs-magit))
    (home-page "https://github.com/magit/sisyphus")
    (synopsis "Create releases of Emacs packages")
    (description
      "Documentation at https://melpa.org/#/sisyphus")
    (license #f)))

(define-public emacs-sixcolors-mode
  (package
    (name "emacs-sixcolors-mode")
    (version "20230406.1031")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mastro35/sixcolors-mode.git")
               (commit
                 "4124a8cf664b04a4bf4c39f7c3b7da3e480b99c8")))
        (sha256
          (base32
            "1gk5h51k3lk5d0q1k63xpq3q3gs07jgi3qg24f5g2m1q738l4rlr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mastro35/sixcolors-mode")
    (synopsis "A customizable horizontal scrollbar")
    (description
      "Documentation at https://melpa.org/#/sixcolors-mode")
    (license #f)))

(define-public emacs-skeletor
  (package
    (name "emacs-skeletor")
    (version "20210129.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chrisbarrett/skeletor.el.git")
               (commit
                 "f6e560a0bfe459e0b8a268047920ce1148f2ebf6")))
        (sha256
          (base32
            "0xal5m59z8whrsr6id52gb6f22jy6dp349xvs6xxjdfamj1083r7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-f emacs-dash))
    (arguments
      '(#:files
        ("*.el"
         "doc/*.texi"
         "licenses"
         "project-skeletons")))
    (home-page "unspecified")
    (synopsis "Provides project skeletons for Emacs")
    (description
      "Documentation at https://melpa.org/#/skeletor")
    (license #f)))

(define-public emacs-skerrick
  (package
    (name "emacs-skerrick")
    (version "20220306.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anonimitoraf/skerrick.git")
               (commit
                 "015de8369b8b6be0d4d1e21c24239a037350e87e")))
        (sha256
          (base32
            "0rd5l2zpbqyi7jinbgbff62k2yv5v4vb16lmzh8vmi02klgzzf25"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/anonimitoraf/skerrick")
    (synopsis "REPL-driven development for NodeJS")
    (description
      "Documentation at https://melpa.org/#/skerrick")
    (license #f)))

(define-public emacs-sketch-themes
  (package
    (name "emacs-sketch-themes")
    (version "20230210.1507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dawranliou/sketch-themes.git")
               (commit
                 "5534254232f1a556ec20952c75b5506625573049")))
        (sha256
          (base32
            "1r82sl0qvvcjdqrygbdk787dvnjycr20p32qn7z0fzim76nvlbjz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dawranliou/sketch-themes/")
    (synopsis "Sketch color themes")
    (description
      "Documentation at https://melpa.org/#/sketch-themes")
    (license #f)))

(define-public emacs-skewer-less
  (package
    (name "emacs-skewer-less")
    (version "20210510.532")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/skewer-less.git")
               (commit
                 "baa973581c2ab7326db65803df97d1a7382b6564")))
        (sha256
          (base32
            "0md6gghgp8hn296fjwc3ikliw7p412v20917v0kqqlisdskizfbx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-skewer-mode))
    (home-page "unspecified")
    (synopsis
      "Skewer support for live LESS stylesheet updates")
    (description
      "Documentation at https://melpa.org/#/skewer-less")
    (license #f)))

(define-public emacs-skewer-mode
  (package
    (name "emacs-skewer-mode")
    (version "20200304.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/skewer-mode.git")
               (commit
                 "e5bed351939c92a1f788f78398583c2f83f1bb3c")))
        (sha256
          (base32
            "07fv33arh77kdfglg6yv28gvryh0z7ddxylhdyr5plvvglpbwi88"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-simple-httpd emacs-js2-mode))
    (arguments '(#:files ("*.html" "*.js" "*.el")))
    (home-page
      "https://github.com/skeeto/skewer-mode")
    (synopsis
      "live browser JavaScript, CSS, and HTML interaction")
    (description
      "Documentation at https://melpa.org/#/skewer-mode")
    (license #f)))

(define-public emacs-skewer-reload-stylesheets
  (package
    (name "emacs-skewer-reload-stylesheets")
    (version "20160725.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NateEag/skewer-reload-stylesheets.git")
               (commit
                 "b9cc5635230ac3c0603a6da690c6e632d0a7490a")))
        (sha256
          (base32
            "0c8dpbl0z45w1brllcysibmpbnk8yqjgi3iywmqnhrycb7lrda4g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-skewer-mode))
    (arguments '(#:files (:defaults "*.js")))
    (home-page "unspecified")
    (synopsis
      "live-edit CSS, SCSS, Less, and friends.")
    (description
      "Documentation at https://melpa.org/#/skewer-reload-stylesheets")
    (license #f)))

(define-public emacs-skype
  (package
    (name "emacs-skype")
    (version "20160711.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-skype.git")
               (commit
                 "8e3b33e620ed355522aa36434ff41e3ced080629")))
        (sha256
          (base32
            "078gjgknsrm1n2f0diian9l056kqh1fj2w0y6ildsvzjipygdz1y"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "*.py")))
    (home-page "unspecified")
    (synopsis "skype UI for emacs users..")
    (description
      "Documentation at https://melpa.org/#/skype")
    (license #f)))

(define-public emacs-sl
  (package
    (name "emacs-sl")
    (version "20161217.1404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/sl.el.git")
               (commit
                 "fceb2ae12a3065b2a265b921baca0891c5ea54dc")))
        (sha256
          (base32
            "0cfldhhmgbr55fvhq85hrksf9n8m27rd1p28lbib0bpghgnax0v7"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page "https://github.com/xuchunyang/sl.el")
    (synopsis "An Emacs clone of sl(1)")
    (description
      "Documentation at https://melpa.org/#/sl")
    (license #f)))

(define-public emacs-slack
  (package
    (name "emacs-slack")
    (version "20211129.310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuya373/emacs-slack.git")
               (commit
                 "ff46d88726482211e3ac3d0b9c95dd4fdffe11c2")))
        (sha256
          (base32
            "15g4dmy4iqqpk8ivhkpsngzllbw0nc5d2sc9j36sdnhwkajzhidj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-websocket
            emacs-request
            emacs-oauth2
            emacs-circe
            emacs-alert
            emacs-emojify))
    (home-page
      "https://github.com/yuya373/emacs-slack")
    (synopsis "Slack client for Emacs")
    (description
      "Documentation at https://melpa.org/#/slack")
    (license #f)))

(define-public emacs-slideview
  (package
    (name "emacs-slideview")
    (version "20150324.2240")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-slideview.git")
               (commit
                 "b6d170bda139aedf81b47dc55cbd1a3af512fb4c")))
        (sha256
          (base32
            "11p1pghx55a4gcn45cadw7c594134b21cdim723k2h99z14f89az"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/Emacs-slideview")
    (synopsis "File slideshow")
    (description
      "Documentation at https://melpa.org/#/slideview")
    (license #f)))

(define-public emacs-slim-mode
  (package
    (name "emacs-slim-mode")
    (version "20170728.1348")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slim-template/emacs-slim.git")
               (commit
                 "3636d18ab1c8b316eea71c4732eb44743e2ded87")))
        (sha256
          (base32
            "1sqylm6ipmlh9249mmwfb16b4pv94cvzdwvi3zakdpz713phyjw5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/slim-template/emacs-slim")
    (synopsis "Major mode for editing Slim files")
    (description
      "Documentation at https://melpa.org/#/slim-mode")
    (license #f)))

(define-public emacs-slime
  (package
    (name "emacs-slime")
    (version "20231004.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/slime/slime.git")
               (commit
                 "0cc2e736112a0bc2a048ef6efd11dd67e3fbf7ad")))
        (sha256
          (base32
            "0iq9r4007rrnabj290y79i926x2m4j20j6b0x701pkywz926sn02"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-macrostep))
    (arguments
      '(#:files
        ("*.el"
         ("lib" "lib/hyperspec.el")
         "swank"
         "*.lisp"
         "*.asd"
         "doc/slime.texi"
         "doc/slime.info"
         "doc/dir"
         "ChangeLog"
         ("contrib" "contrib/*")
         (:exclude "contrib/test" "contrib/Makefile"))))
    (home-page "https://github.com/slime/slime")
    (synopsis
      "Superior Lisp Interaction Mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/slime")
    (license #f)))

(define-public emacs-slime-company
  (package
    (name "emacs-slime-company")
    (version "20210124.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anwyn/slime-company.git")
               (commit
                 "f20ecc4104d4c35052696e7e760109fb02060e72")))
        (sha256
          (base32
            "05dnnc4ms5c9yp9h65k2gbkg3pw9k38nx5wzlwdlfr4shqmw54w0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-slime emacs-company))
    (home-page "unspecified")
    (synopsis
      "slime completion backend for company mode")
    (description
      "Documentation at https://melpa.org/#/slime-company")
    (license #f)))

(define-public emacs-slime-docker
  (package
    (name "emacs-slime-docker")
    (version "20210426.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cl-docker-images/slime-docker.git")
               (commit
                 "c7d073720f2bd8e9f72a20309fff2afa4c4e798d")))
        (sha256
          (base32
            "03jm0964qqggqia2fkvqgrx8r4knj1qgqr8vimr0x4q2j73lj12a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-slime emacs-docker-tramp))
    (arguments
      '(#:files (:defaults "bin" "resources")))
    (home-page
      "https://gitlab.common-lisp.net/cl-docker-images/slime-docker")
    (synopsis
      "Integration of SLIME with Docker containers")
    (description
      "Documentation at https://melpa.org/#/slime-docker")
    (license #f)))

(define-public emacs-slime-repl-ansi-color
  (package
    (name "emacs-slime-repl-ansi-color")
    (version "20230214.1453")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/augfab/slime-repl-ansi-color.git")
               (commit
                 "9e8af90490332217e45d7568f1690df3f4e25d4b")))
        (sha256
          (base32
            "0jsanbz7n8ss6hpgh5wid5lrvq7s2x4yphrgna9zpmgf4b0c3xss"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-slime))
    (home-page
      "https://gitlab.com/augfab/slime-repl-ansi-color")
    (synopsis "Turn on ANSI colors in REPL output;")
    (description
      "Documentation at https://melpa.org/#/slime-repl-ansi-color")
    (license #f)))

(define-public emacs-slime-theme
  (package
    (name "emacs-slime-theme")
    (version "20170808.1322")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-slime-theme.git")
               (commit
                 "8e5880ac69e0b6a079103001cc3a90bdb688998f")))
        (sha256
          (base32
            "0g90ypwyvpdzilvhj0rgfrp78a5gflply3rix2wx8rncw569qb6g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsfodder/tmtheme-to-deftheme")
    (synopsis
      "an Emacs 24 theme based on Slime (tmTheme)")
    (description
      "Documentation at https://melpa.org/#/slime-theme")
    (license #f)))

(define-public emacs-slime-volleyball
  (package
    (name "emacs-slime-volleyball")
    (version "20190701.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fitzsim/slime-volleyball.git")
               (commit
                 "f36a84f3c503c46ba0d011874d387a34b01c6bf6")))
        (sha256
          (base32
            "12r1agaz2d0i6ig4ry83bnxcj9bkmfhd6my3fjna2d45j4isybxn"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("*.el" "*.gz" "*.svg" "*.b64")))
    (home-page "unspecified")
    (synopsis "An SVG Slime Volleyball Game")
    (description
      "Documentation at https://melpa.org/#/slime-volleyball")
    (license #f)))

(define-public emacs-slint-mode
  (package
    (name "emacs-slint-mode")
    (version "20230922.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nilclass/slint-mode.git")
               (commit
                 "1ef68ca9cf0cffd2c863c3135f96202a19cf8182")))
        (sha256
          (base32
            "17gz8yw7sqz1lh79v9nqqz0c3p4hbmrh532rkxbbljz58y2fip7i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-lsp-mode))
    (home-page
      "https://github.com/nilclass/slint-mode")
    (synopsis "Major-mode for the Slint UI language")
    (description
      "Documentation at https://melpa.org/#/slint-mode")
    (license #f)))

(define-public emacs-slirm
  (package
    (name "emacs-slirm")
    (version "20160201.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fbie/slirm.git")
               (commit
                 "9adfbe1fc67580e7d0d90f7e927a25d63a797464")))
        (sha256
          (base32
            "0srj0zcvzr0sjcs37zz11xz8w0yv94m69av9ny7mx8ssf4qp0pxa"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/fbie/slirm")
    (synopsis
      "Systematic Literature Review Mode for Emacs.")
    (description
      "Documentation at https://melpa.org/#/slirm")
    (license #f)))

(define-public emacs-slovak-holidays
  (package
    (name "emacs-slovak-holidays")
    (version "20211018.1754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/slovak-holidays.git")
               (commit
                 "bedd26dd45ca497c0028a11e94a905560fcdb2f1")))
        (sha256
          (base32
            "1g7g0kc36017scyi598x20p45qrj5zjczz2ma2gmlgkj33h3bygl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Adds a list of slovak holidays to Emacs calendar")
    (description
      "Documentation at https://melpa.org/#/slovak-holidays")
    (license #f)))

(define-public emacs-slow-keys
  (package
    (name "emacs-slow-keys")
    (version "20220807.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~gitmux/slow-keys")
               (commit
                 "b951ae4bdcea56ced03f227b82b28c3d91d15e61")))
        (sha256
          (base32
            "1bkwdm031bjqqj8935j4k60msbn02jwn9gwlyawypaizkgfx6zcb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/manuel-uberti/slow-keys")
    (synopsis "Slow keys mode to avoid RSI")
    (description
      "Documentation at https://melpa.org/#/slow-keys")
    (license #f)))

(define-public emacs-slstats
  (package
    (name "emacs-slstats")
    (version "20170823.849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/slstats.el.git")
               (commit
                 "e9696066abf3f2b7b818a57c062530dfd9377033")))
        (sha256
          (base32
            "1mjzr6lqcyx3clp3bxq77k2rpkaglnq407xdk05xkaqissirpc83"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/slstats.el")
    (synopsis
      "Acquire and display stats about Second Life")
    (description
      "Documentation at https://melpa.org/#/slstats")
    (license #f)))

(define-public emacs-slurm-mode
  (package
    (name "emacs-slurm-mode")
    (version "20210519.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/slurm.el.git")
               (commit
                 "589826fbb07f625b23c322df1cc16377c4fe6f66")))
        (sha256
          (base32
            "12plxmslrpx4b2aqh66zdhrmf41a6n6iaqbvsx42dk04caxfjp7m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ffevotte/slurm.el")
    (synopsis
      "Interaction with the SLURM job scheduling system")
    (description
      "Documentation at https://melpa.org/#/slurm-mode")
    (license #f)))

(define-public emacs-sly
  (package
    (name "emacs-sly")
    (version "20231009.2150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/sly.git")
               (commit
                 "9c43bf65b967e12cef1996f1af5f0671d8aecbf4")))
        (sha256
          (base32
            "15nyr02ykkws4q79jcmxcawddg8sgq9v5l8k7jv7gg3hnpzxjlb2"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "lib"
          "slynk"
          "contrib"
          "doc/images"
          (:exclude "sly-autoloads.el"))))
    (home-page "https://github.com/joaotavora/sly")
    (synopsis "Sylvester the Cat's Common Lisp IDE")
    (description
      "Documentation at https://melpa.org/#/sly")
    (license #f)))

(define-public emacs-sly-asdf
  (package
    (name "emacs-sly-asdf")
    (version "20221119.2235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmgeorge/sly-asdf.git")
               (commit
                 "6f9d751469bb82530db1673c22e7437ca6c95f45")))
        (sha256
          (base32
            "0bxan0h12xqdsfr3bpk7n8zj7d5xvp4v3wg4fbcf2xw63j02m810"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly emacs-popup))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/mmgeorge/sly-asdf")
    (synopsis "ASDF system support for SLY")
    (description
      "Documentation at https://melpa.org/#/sly-asdf")
    (license #f)))

(define-public emacs-sly-hello-world
  (package
    (name "emacs-sly-hello-world")
    (version "20200225.1755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/sly-hello-world.git")
               (commit
                 "d25acc1220a3ce066bd9908251c2f0f88b1781e9")))
        (sha256
          (base32
            "0par51rbspk2gqfqag24rynzdvv4npdifdy7bjz9n0b0p2ly39kc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/capitaomorte/sly-hello-world")
    (synopsis "A template SLY contrib")
    (description
      "Documentation at https://melpa.org/#/sly-hello-world")
    (license #f)))

(define-public emacs-sly-macrostep
  (package
    (name "emacs-sly-macrostep")
    (version "20191211.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/sly-macrostep.git")
               (commit
                 "5113e4e926cd752b1d0bcc1508b3ebad5def5fad")))
        (sha256
          (base32
            "1nxf28gn4f3n0wnv7nb5sgl36fz175y470zs9hig4kq8cp0yal0r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-sly emacs-macrostep))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/capitaomorte/sly-macrostep")
    (synopsis
      "fancy macro-expansion via macrostep.el")
    (description
      "Documentation at https://melpa.org/#/sly-macrostep")
    (license #f)))

(define-public emacs-sly-named-readtables
  (package
    (name "emacs-sly-named-readtables")
    (version "20191013.2138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/sly-named-readtables.git")
               (commit
                 "a5a42674ccffa97ccd5e4e9742beaf3ea719931f")))
        (sha256
          (base32
            "16asd119rzqrlclps2q6yrkis8jy5an5xgzzqvb7jdyq39zxg54q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/capitaomorte/sly-named-readtables")
    (synopsis
      "Support named readtables in Common Lisp files")
    (description
      "Documentation at https://melpa.org/#/sly-named-readtables")
    (license #f)))

(define-public emacs-sly-quicklisp
  (package
    (name "emacs-sly-quicklisp")
    (version "20211206.948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/sly-quicklisp.git")
               (commit
                 "34c73d43dd9066262387c626c17a9b486db07b2d")))
        (sha256
          (base32
            "13qjscsgbpzb7bvpybglx46p3nvzdv10v3king9za54qig4gi0v0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly))
    (arguments
      '(#:files (:defaults "*.lisp" "*.asd")))
    (home-page
      "https://github.com/capitaomorte/sly-quicklisp")
    (synopsis "Quicklisp support for SLY")
    (description
      "Documentation at https://melpa.org/#/sly-quicklisp")
    (license #f)))

(define-public emacs-sly-repl-ansi-color
  (package
    (name "emacs-sly-repl-ansi-color")
    (version "20171020.1516")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PuercoPop/sly-repl-ansi-color.git")
               (commit
                 "b9cd52d1cf927bf7e08582d46ab0bcf1d4fb5048")))
        (sha256
          (base32
            "0fgcn6bwgz8yyjza07kfi86siargvpq4kp4j20hs6b67ckxjxx0x"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-sly))
    (home-page
      "https://github.com/PuercoPop/sly-repl-ansi-color")
    (synopsis
      "Add ANSI colors support to the sly mrepl.")
    (description
      "Documentation at https://melpa.org/#/sly-repl-ansi-color")
    (license #f)))

(define-public emacs-smart-backspace
  (package
    (name "emacs-smart-backspace")
    (version "20171014.526")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/itome/smart-backspace.git")
               (commit
                 "a10ec44ff325ec8c4c98b1a6e44e89e60a9aa4ac")))
        (sha256
          (base32
            "0p19qikalmvs9y1lws08mxvh2k8s219mpm3nyi9aqq62ryyfwf1n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/itome/smart-backspace")
    (synopsis "intellj like backspace")
    (description
      "Documentation at https://melpa.org/#/smart-backspace")
    (license #f)))

(define-public emacs-smart-comment
  (package
    (name "emacs-smart-comment")
    (version "20160322.1839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paldepind/smart-comment.git")
               (commit
                 "17ddbd83205818763e6d68aa7a1aa9aaf414cbd4")))
        (sha256
          (base32
            "0r181rdnymr96kj74c73212n6157cfiq1d6hk2lfc54yl6h76zf4"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "smarter commenting")
    (description
      "Documentation at https://melpa.org/#/smart-comment")
    (license #f)))

(define-public emacs-smart-compile
  (package
    (name "emacs-smart-compile")
    (version "20230822.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenitani/elisp.git")
               (commit
                 "8dcf2d1639f662c355c3fe2f533995042dce0ca8")))
        (sha256
          (base32
            "0acha536crf59mjpdir1yxh9hk9pnxdjpjggzaj51f7y9hncf43j"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("smart-compile.el")))
    (home-page "unspecified")
    (synopsis "an interface to `compile'")
    (description
      "Documentation at https://melpa.org/#/smart-compile")
    (license #f)))

(define-public emacs-smart-cursor-color
  (package
    (name "emacs-smart-cursor-color")
    (version "20201207.2228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/7696122/smart-cursor-color.git")
               (commit
                 "d532f0b27e37cbd3bfc0be09d0b54aa38f1648f1")))
        (sha256
          (base32
            "1zdvnhl8v3ivqxdz0xdaayxsw282xb6m2n6gv0jm2ahi5s63z5l0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/7696122/smart-cursor-color/")
    (synopsis "Change cursor color dynamically")
    (description
      "Documentation at https://melpa.org/#/smart-cursor-color")
    (license #f)))

(define-public emacs-smart-dash
  (package
    (name "emacs-smart-dash")
    (version "20220704.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/malsyned/smart-dash.git")
               (commit
                 "461cc1c9b4ebb48d167b3545d8e842e9e7c9fd59")))
        (sha256
          (base32
            "0dzy4cyi5fdsgcdbc2536zsq0q283fnbq9kzchvz7l9f2v5g3hks"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Smart-Dash minor mode")
    (description
      "Documentation at https://melpa.org/#/smart-dash")
    (license #f)))

(define-public emacs-smart-delete
  (package
    (name "emacs-smart-delete")
    (version "20230802.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leodag/smart-delete.git")
               (commit
                 "0520a9bde3b8af7b95bcd234438ea8d54a229f05")))
        (sha256
          (base32
            "15dn2fhllbnqcwxicvba0p3s4dvb254f40ql20z0njy0f384y1f3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leodag/smart-delete")
    (synopsis "IntelliJ-like backspace/delete")
    (description
      "Documentation at https://melpa.org/#/smart-delete")
    (license #f)))

(define-public emacs-smart-forward
  (package
    (name "emacs-smart-forward")
    (version "20140430.713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/smart-forward.el.git")
               (commit
                 "7b6dbfdbd4b646376a567c70e1a161545431b72b")))
        (sha256
          (base32
            "19l47xqzjhhm9j3izik0imssip5ygg3lnflb9ixsz1js571aaxha"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page "unspecified")
    (synopsis "Semantic navigation")
    (description
      "Documentation at https://melpa.org/#/smart-forward")
    (license #f)))

(define-public emacs-smart-hungry-delete
  (package
    (name "emacs-smart-hungry-delete")
    (version "20220516.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hrehfeld/emacs-smart-hungry-delete.git")
               (commit
                 "e06525cc1841805ebe470c876d6b966de90bc275")))
        (sha256
          (base32
            "0226lpiqnrjjdnay6nafgm118g8dkr59ilvygk4xrjcb52jjhn7z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hrehfeld/emacs-smart-hungry-delete")
    (synopsis "smart hungry deletion of whitespace")
    (description
      "Documentation at https://melpa.org/#/smart-hungry-delete")
    (license #f)))

(define-public emacs-smart-indent-rigidly
  (package
    (name "emacs-smart-indent-rigidly")
    (version "20141206.15")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/re5et/smart-indent-rigidly.git")
               (commit
                 "323d1fe4d0b81e598249aad01bc44adb180ece0e")))
        (sha256
          (base32
            "0q5hxg265ad9gpclv2kzikg6jvbf3zzb1mrykxn0n7mnvdfdlhsi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/re5et/smart-indent-rigidly")
    (synopsis "Smart rigid indenting")
    (description
      "Documentation at https://melpa.org/#/smart-indent-rigidly")
    (license #f)))

(define-public emacs-smart-jump
  (package
    (name "emacs-smart-jump")
    (version "20210304.844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/smart-jump.git")
               (commit
                 "3392eb35e3cde37e6f5f2a48dc0db15ca535143c")))
        (sha256
          (base32
            "14yhln54mnh7257q49r86zypg04jy5bf6ahvmm1cbv6n25npawk5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jojojames/smart-jump")
    (synopsis "Smart go to definition.")
    (description
      "Documentation at https://melpa.org/#/smart-jump")
    (license #f)))

(define-public emacs-smart-mark
  (package
    (name "emacs-smart-mark")
    (version "20150912.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/victorteokw/smart-mark.git")
               (commit
                 "04b522a23e3aae8381c6a976fc978532fcb2e7d0")))
        (sha256
          (base32
            "0sqvm7iwdjk057fwid4kz6wj71igiqhdarj59s17pzy6xz34afhg"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Restore point after C-g when mark")
    (description
      "Documentation at https://melpa.org/#/smart-mark")
    (license #f)))

(define-public emacs-smart-mode-line
  (package
    (name "emacs-smart-mode-line")
    (version "20211005.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/smart-mode-line.git")
               (commit
                 "abcb0ab6f7110a03d6c7428bae67cf8731496433")))
        (sha256
          (base32
            "1h5w5lrgrmhpaqwppg5msylh7z78mvwy9mm8xiiv8w4wxvncxxl2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-rich-minority))
    (home-page
      "http://github.com/Malabarba/smart-mode-line")
    (synopsis "A color coded smart mode-line.")
    (description
      "Documentation at https://melpa.org/#/smart-mode-line")
    (license #f)))

(define-public emacs-smart-mode-line-atom-one-dark-theme
  (package
    (name "emacs-smart-mode-line-atom-one-dark-theme")
    (version "20230107.1731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/daviderestivo/smart-mode-line-atom-one-dark-theme.git")
               (commit
                 "5f2056d7c24e9c8964f700ab6ec6f00ba4315eb8")))
        (sha256
          (base32
            "1klzgsvl4vnj14azdng7c3dz3r8mw3il9p56gf9dpm5xr8w4mwbl"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-smart-mode-line))
    (home-page
      "https://github.com/daviderestivo/smart-mode-line-atom-one-dark-theme")
    (synopsis
      "Atom-one-dark theme for smart-mode-line")
    (description
      "Documentation at https://melpa.org/#/smart-mode-line-atom-one-dark-theme")
    (license #f)))

(define-public emacs-smart-mode-line-powerline-theme
  (package
    (name "emacs-smart-mode-line-powerline-theme")
    (version "20211005.233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/smart-mode-line.git")
               (commit
                 "abcb0ab6f7110a03d6c7428bae67cf8731496433")))
        (sha256
          (base32
            "1h5w5lrgrmhpaqwppg5msylh7z78mvwy9mm8xiiv8w4wxvncxxl2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline emacs-smart-mode-line))
    (arguments '(#:files ("themes/*.el")))
    (home-page
      "http://github.com/Bruce-Connor/smart-mode-line")
    (synopsis
      "smart-mode-line theme that mimics the powerline appearance.")
    (description
      "Documentation at https://melpa.org/#/smart-mode-line-powerline-theme")
    (license #f)))

(define-public emacs-smart-newline
  (package
    (name "emacs-smart-newline")
    (version "20131208.340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ainame/smart-newline.el.git")
               (commit
                 "0553a9e4be7188352de1a28f2eddfd28e7436f94")))
        (sha256
          (base32
            "0w0v3gzfg3cphz701g30sf7l92v3npsd7028pjp5g7rgv3pwkgsd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provide smart newline for one keybind.")
    (description
      "Documentation at https://melpa.org/#/smart-newline")
    (license #f)))

(define-public emacs-smart-region
  (package
    (name "emacs-smart-region")
    (version "20150903.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/uk-ar/smart-region.git")
               (commit
                 "5a8017fd8e8dc3483865951c4942cab3f96f69f6")))
        (sha256
          (base32
            "0h559cdyln5f4ignx1r86ryi7wizys0gj03dj7lfzaxr7wkd0jaf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-expand-region emacs-multiple-cursors))
    (home-page
      "https://github.com/uk-ar/smart-region")
    (synopsis
      "Smartly select region, rectangle, multi cursors")
    (description
      "Documentation at https://melpa.org/#/smart-region")
    (license #f)))

(define-public emacs-smart-semicolon
  (package
    (name "emacs-smart-semicolon")
    (version "20200909.1412")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/iquiw/smart-semicolon.git")
               (commit
                 "2c140accd576062f69dbe7db1d43ba038b347b9b")))
        (sha256
          (base32
            "135vpzcazb16l99bdw2wnkjq0ysbdyws83w59ksapq5sq7gl9ll7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/iquiw/smart-semicolon")
    (synopsis "Insert semicolon smartly")
    (description
      "Documentation at https://melpa.org/#/smart-semicolon")
    (license #f)))

(define-public emacs-smart-shift
  (package
    (name "emacs-smart-shift")
    (version "20150203.725")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hbin/smart-shift.git")
               (commit
                 "a26ab2b240137e62ec4bce1698ed9c5f7b6d13ae")))
        (sha256
          (base32
            "0azhfffm1bkgjx4i3p9f6x2gmw8kc3fafzqj4vxxdibhn0nizqk8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/hbin/smart-shift")
    (synopsis "Smart shift text left/right.")
    (description
      "Documentation at https://melpa.org/#/smart-shift")
    (license #f)))

(define-public emacs-smart-tab
  (package
    (name "emacs-smart-tab")
    (version "20210530.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.genehack.net/genehack/smart-tab.git")
               (commit
                 "2f1b4073904805c8454ebc9bc967b23836a2d577")))
        (sha256
          (base32
            "0fflc9f3gwf1kl3rplfb4dr10j167l85z2hwy77b4gbjzd7lp502"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.genehack.net/genehack/smart-tab")
    (synopsis
      "Intelligent tab completion and indentation")
    (description
      "Documentation at https://melpa.org/#/smart-tab")
    (license #f)))

(define-public emacs-smart-tabs-mode
  (package
    (name "emacs-smart-tabs-mode")
    (version "20200907.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcsalomon/smarttabs.git")
               (commit
                 "1044c17e42479de943e69cdeb85e4d05ad9cca8c")))
        (sha256
          (base32
            "0hkgw9i4yynazx5vbkb8a1lfp0yndyi8c1w3cf7ajxpnig3hs9j6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("smart-tabs-mode.el")))
    (home-page
      "http://www.emacswiki.org/emacs/SmartTabs")
    (synopsis
      "Intelligently indent with tabs, align with spaces!")
    (description
      "Documentation at https://melpa.org/#/smart-tabs-mode")
    (license #f)))

(define-public emacs-smart-window
  (package
    (name "emacs-smart-window")
    (version "20160717.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dryman/smart-window.el.git")
               (commit
                 "5996461b7cbc5ab4509ac48537916eb29a8e4c16")))
        (sha256
          (base32
            "0p1cqpdsp2vdx85i22shyzfhz22zwf1k1dxkqcmlgh3y7f4qq8ir"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dryman/smart-window.el")
    (synopsis "vim-like window controlling plugin")
    (description
      "Documentation at https://melpa.org/#/smart-window")
    (license #f)))

(define-public emacs-smartparens
  (package
    (name "emacs-smartparens")
    (version "20231024.1804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/smartparens.git")
               (commit
                 "0778a8a84064cf2bc3a9857bd0e7a4619cc1e5c3")))
        (sha256
          (base32
            "1svi5zfrg2ygsjb247y02c9i0cqmc5lqa7sq999niriblj5plr60"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/Fuco1/smartparens")
    (synopsis
      "Automatic insertion, wrapping and paredit-like navigation with user defined pairs.")
    (description
      "Documentation at https://melpa.org/#/smartparens")
    (license #f)))

(define-public emacs-smartrep
  (package
    (name "emacs-smartrep")
    (version "20150509.230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/smartrep.el.git")
               (commit
                 "f0ff5a6d7b8603603598ae3045c98b011e58d86e")))
        (sha256
          (base32
            "1sjwqi8w83qxihqmcm7z0vwmrz1az0y266qgj2nwfv39bri6y4i6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myuhe/smartrep.el")
    (synopsis
      "Support sequential operation which omitted prefix keys.")
    (description
      "Documentation at https://melpa.org/#/smartrep")
    (license #f)))

(define-public emacs-smartscan
  (package
    (name "emacs-smartscan")
    (version "20170211.2033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mickeynp/smart-scan.git")
               (commit
                 "234e077145710a174c20742de792b97ed2f965f6")))
        (sha256
          (base32
            "1nzkgfr1w30yi88h4kwgiwq4lcd0fpm1cd50gy0csjcpbnyq6ykf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Jumps between other symbols found at point")
    (description
      "Documentation at https://melpa.org/#/smartscan")
    (license #f)))

(define-public emacs-smarty-mode
  (package
    (name "emacs-smarty-mode")
    (version "20100703.1158")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/smarty-mode.git")
               (commit
                 "3dfdfe1571f5e9ef55a29c51e5a80046d4cb7568")))
        (sha256
          (base32
            "1vl3nx0y2skb8sibqxvmc3wrmmd6z88hknbry348d0ik3cbr0ijx"))))
    (build-system melpa-build-system)
    (home-page "none yet")
    (synopsis
      "major mode for editing smarty templates")
    (description
      "Documentation at https://melpa.org/#/smarty-mode")
    (license #f)))

(define-public emacs-smbc
  (package
    (name "emacs-smbc")
    (version "20171229.1808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sakshamsharma/emacs-smbc.git")
               (commit
                 "10538e3d575ba6ef3c94d555af2744b42dfd36c7")))
        (sha256
          (base32
            "0b2fndvp9kzlr65b0gr0z5hmapa4y96a6zvc2nrlijffkgyk05nn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sakshamsharma/emacs-smbc")
    (synopsis "View SMBC from Emacs")
    (description
      "Documentation at https://melpa.org/#/smbc")
    (license #f)))

(define-public emacs-smblog
  (package
    (name "emacs-smblog")
    (version "20200424.938")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaptel/smblog-mode.git")
               (commit
                 "fc949cff7051b31f0dbc7169774144533a27b92f")))
        (sha256
          (base32
            "07ks6d3gs264wv15lxa88pfi6i851h1wd9cacxs81wc7ijqc5sia"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aaptel/smblog-mode")
    (synopsis "samba log viewer")
    (description
      "Documentation at https://melpa.org/#/smblog")
    (license #f)))

(define-public emacs-smeargle
  (package
    (name "emacs-smeargle")
    (version "20200323.533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/smeargle.git")
               (commit
                 "afe34e7e3ce811d44880bca11f9fe1e3d91e272f")))
        (sha256
          (base32
            "1yy2lqvn67dr6jhbyqv3zd93rmpw7bggklb1hbhp8spagflvj6li"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/smeargle")
    (synopsis
      "Highlighting region by last updated time")
    (description
      "Documentation at https://melpa.org/#/smeargle")
    (license #f)))

(define-public emacs-smex
  (package
    (name "emacs-smex")
    (version "20151212.2209")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nonsequitur/smex.git")
               (commit
                 "55aaebe3d793c2c990b39a302eb26c184281c42c")))
        (sha256
          (base32
            "0xrbkpc3w7yadpjih169cpp75gilsnx4y9akgci5vfcggv4ffm26"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/nonsequitur/smex/")
    (synopsis
      "M-x interface with Ido-style fuzzy matching.")
    (description
      "Documentation at https://melpa.org/#/smex")
    (license #f)))

(define-public emacs-smilefjes
  (package
    (name "emacs-smilefjes")
    (version "20230129.2110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/themkat/smilefjes.el.git")
               (commit
                 "1dc3be3768252685f0df664f970103a23c99f6fa")))
        (sha256
          (base32
            "11myk08fygya4h2p7zbrs4jyrvxlqqi2pj0a4i3j03hb03rfxv33"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request
            emacs-ht
            emacs-dash
            emacs-helm))
    (home-page "https://github.com/themkat/mos-mode")
    (synopsis
      "View Norwegian Food Safety Authority restaurant ratings")
    (description
      "Documentation at https://melpa.org/#/smilefjes")
    (license #f)))

(define-public emacs-smiles-mode
  (package
    (name "emacs-smiles-mode")
    (version "20220210.1413")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/smiles-mode.git")
               (commit
                 "950a8b3224f8f069c82faeb0282d041f872d5550")))
        (sha256
          (base32
            "1pvbxmxhkmzhimvvzw2gmwhzkssgg8hs765vl0ly9jcdgqc46lgq"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/smiles-mode.git")
    (synopsis "Major mode for SMILES.")
    (description
      "Documentation at https://melpa.org/#/smiles-mode")
    (license #f)))

(define-public emacs-smithers
  (package
    (name "emacs-smithers")
    (version "20210531.2232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/smithers.el.git")
               (commit
                 "db9ed12a8d2c131b6d37b4e7aff01b8e3cec81a6")))
        (sha256
          (base32
            "1rk1x096akhn5rip8vp2lf0yyyybqwq3w75vkmkg4dcb9cbrwz1q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files (:defaults "source.org")))
    (home-page
      "https://gitlab.com/mtekman/smithers.el")
    (synopsis
      "A startup message featuring Mr C.M. Burns")
    (description
      "Documentation at https://melpa.org/#/smithers")
    (license #f)))

(define-public emacs-smithy-mode
  (package
    (name "emacs-smithy-mode")
    (version "20220619.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mnemitz/smithy-mode.git")
               (commit
                 "8d248fbe3135766451df9b88eb972f61619ebc9b")))
        (sha256
          (base32
            "1ap5askrv3zv005ma2ipllsc7k6l2wahvnc5y2vmxj9zb89gl6p4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mnemitz/smithy-mode")
    (synopsis
      "Major mode for editing Smithy IDL files")
    (description
      "Documentation at https://melpa.org/#/smithy-mode")
    (license #f)))

(define-public emacs-sml-basis
  (package
    (name "emacs-sml-basis")
    (version "20210518.2040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-sml-basis.git")
               (commit
                 "c048d575e30a20ec825fd0c5eb9c8a4428a43298")))
        (sha256
          (base32
            "1zj4gjs57imr69lv6lq72vnp5qbvlry0yb4zw1cad19mzlfszyz1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-sml-basis")
    (synopsis "Standard ML Basis Library lookup")
    (description
      "Documentation at https://melpa.org/#/sml-basis")
    (license #f)))

(define-public emacs-sml-modeline
  (package
    (name "emacs-sml-modeline")
    (version "20170614.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sml-modeline.git")
               (commit
                 "d2f9f70174c4cf68c67eb3bb8088235735e34d9a")))
        (sha256
          (base32
            "18k2k213vgawxskp9m57r8qarg3pnza6nvbpyi6l03jnmf2kcw2b"))))
    (build-system melpa-build-system)
    (home-page
      "http://bazaar.launchpad.net/~nxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el")
    (synopsis
      "Show position in a scrollbar like way in mode-line")
    (description
      "Documentation at https://melpa.org/#/sml-modeline")
    (license #f)))

(define-public emacs-smlfmt
  (package
    (name "emacs-smlfmt")
    (version "20231102.853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diku-dk/smlfmt.el.git")
               (commit
                 "9fc7c177f0d154a5a71acf4836852a010a84b09d")))
        (sha256
          (base32
            "1a1lkiswb786iqlzai9dlkzy4ghnr8rhg40p2i41c2zmavnib959"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/diku-dk/smlfmt.el")
    (synopsis
      "Format SML source code using the \"smlfmt\" program")
    (description
      "Documentation at https://melpa.org/#/smlfmt")
    (license #f)))

(define-public emacs-smmry
  (package
    (name "emacs-smmry")
    (version "20161024.901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/microamp/smmry.el.git")
               (commit
                 "986a1b0aec8ab1ef17dbfb7886f47e5558cf738a")))
        (sha256
          (base32
            "1gq2066js1kf035217z0n6w0bf0dsyskykf56xycci5s1i7xv2vz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/microamp/smmry.el")
    (synopsis "SMMRY client")
    (description
      "Documentation at https://melpa.org/#/smmry")
    (license #f)))

(define-public emacs-smog
  (package
    (name "emacs-smog")
    (version "20230530.843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zzkt/smog.git")
               (commit
                 "2fc5fef0f5000027b3550495259a65966c68ec52")))
        (sha256
          (base32
            "1x9iwbfyvh34x3gnm7nwwl1lgsyzgs1374bf5khzif9h4wd09ffa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zzkt/smog")
    (synopsis
      "Analyse the writing style, word use and readability of prose")
    (description
      "Documentation at https://melpa.org/#/smog")
    (license #f)))

(define-public emacs-smooth-scroll
  (package
    (name "emacs-smooth-scroll")
    (version "20130322.414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k-talo/smooth-scroll.el.git")
               (commit
                 "02320f28abb5cae28b3a18f6b9ce93129bdbfc45")))
        (sha256
          (base32
            "1kkg7qhb2lmwr4siiazqny9w2z9nk799lzl5i159lfivlxcgixmk"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/smooth-scroll.el")
    (synopsis
      "Minor mode for smooth scrolling and in-place scrolling.")
    (description
      "Documentation at https://melpa.org/#/smooth-scroll")
    (license #f)))

(define-public emacs-smooth-scrolling
  (package
    (name "emacs-smooth-scrolling")
    (version "20161002.1949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aspiers/smooth-scrolling.git")
               (commit
                 "2462c13640aa4c75ab3ddad443fedc29acf68f84")))
        (sha256
          (base32
            "1h15gjq781i6fsz32qlh51knawdr8hcqvshsz6cszp752cibdcdg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/aspiers/smooth-scrolling/")
    (synopsis "Make emacs scroll smoothly")
    (description
      "Documentation at https://melpa.org/#/smooth-scrolling")
    (license #f)))

(define-public emacs-smotitah
  (package
    (name "emacs-smotitah")
    (version "20150218.1030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laynor/smotitah.git")
               (commit
                 "f9ab562128a5460549d016913533778e8c94bcf3")))
        (sha256
          (base32
            "1a097f1x9l0m4dizvnb742svlqsm6hlif73rk7qjar081sk1gjxx"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "templates")))
    (home-page "unspecified")
    (synopsis
      "Modular emacs configuration framework")
    (description
      "Documentation at https://melpa.org/#/smotitah")
    (license #f)))

(define-public emacs-smtpmail-multi
  (package
    (name "emacs-smtpmail-multi")
    (version "20160218.2349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/smtpmail-multi.git")
               (commit
                 "83fa9d7a02e000be95cb282c8b48446646896ea1")))
        (sha256
          (base32
            "1x0dn9hd8b0mxdfw0nrsgj4bz4ljf7i9af566iv5fqym1c4wxkhf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vapniks/smtpmail-multi")
    (synopsis
      "Use different smtp servers for sending mail")
    (description
      "Documentation at https://melpa.org/#/smtpmail-multi")
    (license #f)))

(define-public emacs-smudge
  (package
    (name "emacs-smudge")
    (version "20210326.2222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielfm/smudge.git")
               (commit
                 "808f0ef172a80cf4a8ae6d58dfe385d28ecde28e")))
        (sha256
          (base32
            "0cm02r0bgmj2dr6njdm1059q0gjx12c13cs1yxx0zqr6294jiby6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-simple-httpd
            emacs-request
            emacs-oauth2))
    (home-page "https://github.com/danielfm/smudge")
    (synopsis "Control the Spotify app")
    (description
      "Documentation at https://melpa.org/#/smudge")
    (license #f)))

(define-public emacs-smyx-theme
  (package
    (name "emacs-smyx-theme")
    (version "20141127.828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tacit7/smyx.git")
               (commit
                 "6263f6b401bbabaed388c8efcfc0be2e58c51401")))
        (sha256
          (base32
            "1z2sdnf11wh5hz1rkrbg7fs4ha3zrbj9qnvfzq9005y89d7cs95x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "smyx Color Theme")
    (description
      "Documentation at https://melpa.org/#/smyx-theme")
    (license #f)))

(define-public emacs-snakemake-mode
  (package
    (name "emacs-snakemake-mode")
    (version "20230418.147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kyleam/snakemake-mode.git")
               (commit
                 "0c4c5b6a25735ac025ce124ace9f0259eb5198e9")))
        (sha256
          (base32
            "003sw5qxk0y4qn88fhd963gvlb6i7pa8g12hapv6g1l7xycx9lrz"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.kyleam.com/snakemake-mode/about")
    (synopsis
      "Major mode for editing Snakemake files")
    (description
      "Documentation at https://melpa.org/#/snakemake-mode")
    (license #f)))

(define-public emacs-snap-indent
  (package
    (name "emacs-snap-indent")
    (version "20230704.1833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jeffvalk/snap-indent.git")
               (commit
                 "97a0b9ea3a8e23219a4ceea5f5082d3ca3bc0daf")))
        (sha256
          (base32
            "1p2wbgngjzg00339yw5s9wjkxid68vhk5wkb3jl12i2hbgsxvy5s"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jeffvalk/snap-indent")
    (synopsis "Simple automatic indentation")
    (description
      "Documentation at https://melpa.org/#/snap-indent")
    (license #f)))

(define-public emacs-snapshot-timemachine
  (package
    (name "emacs-snapshot-timemachine")
    (version "20161221.929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrBliss/snapshot-timemachine.git")
               (commit
                 "99efcebab309b11ed512a8dc62555d3834df5efb")))
        (sha256
          (base32
            "18qibcyqxjwpvphmpghppb8ky1xcch1dd4pz91qj5f4h42684ips"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrBliss/snapshot-timemachine")
    (synopsis
      "Step through (Btrfs, ZFS, ...) snapshots of files")
    (description
      "Documentation at https://melpa.org/#/snapshot-timemachine")
    (license #f)))

(define-public emacs-snapshot-timemachine-rsnapshot
  (package
    (name "emacs-snapshot-timemachine-rsnapshot")
    (version "20170324.1213")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/snapshot-timemachine-rsnapshot.git")
               (commit
                 "72b0b700d80f1a0442e62bbbb6a0c8c59182f97f")))
        (sha256
          (base32
            "1bdy7p0bjfdlv6l6yih6fvvi7xpldal4rj8l2ajpc6sgby24h8bb"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-snapshot-timemachine))
    (home-page "unspecified")
    (synopsis
      "rsnapshot backend for snapshot-timemachine")
    (description
      "Documentation at https://melpa.org/#/snapshot-timemachine-rsnapshot")
    (license #f)))

(define-public emacs-snazzy-theme
  (package
    (name "emacs-snazzy-theme")
    (version "20170828.757")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/weijiangan/emacs-snazzy.git")
               (commit
                 "57a1763b49b4a776084c16bc70c219246fa5b412")))
        (sha256
          (base32
            "1y2l8b72jzcyarilj4j4q3rwcg0wkn2r3m01k0g2kg73zsffvhss"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-base16-theme))
    (home-page
      "https://github.com/weijiangan/emacs-snazzy/")
    (synopsis
      "An elegant syntax theme with bright colors")
    (description
      "Documentation at https://melpa.org/#/snazzy-theme")
    (license #f)))

(define-public emacs-sniem
  (package
    (name "emacs-sniem")
    (version "20231105.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SpringHan/sniem.git")
               (commit
                 "6132750f28091a774b087faea00d1363204c6922")))
        (sha256
          (base32
            "0lqk49mky6gg53a7pwhr1jys40jcw2cwafrwxm9jcknw01glrr4a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/SpringHan/sniem.git")
    (synopsis "Hands-eased united editing method")
    (description
      "Documentation at https://melpa.org/#/sniem")
    (license #f)))

(define-public emacs-snitch
  (package
    (name "emacs-snitch")
    (version "20210202.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrmekon/snitch-el.git")
               (commit
                 "3b3e7f1bf612c4624764d1ec4b1a96e4d2850b05")))
        (sha256
          (base32
            "00r36xjglp7d1gkxkqlymqjkd8pmr5g0bg468xq9s5hp7g5md4ig"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mrmekon/snitch-el")
    (synopsis "An Emacs firewall")
    (description
      "Documentation at https://melpa.org/#/snitch")
    (license #f)))

(define-public emacs-snoopy
  (package
    (name "emacs-snoopy")
    (version "20171008.2004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anmonteiro/snoopy-mode.git")
               (commit
                 "ec4123bdebfe0bb7bf4feaac2dc02b59caffe386")))
        (sha256
          (base32
            "01l44lshw0zvykay9886s1vqryanagkd4ciw3ramchn0baqz11vl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "minor mode for number row unshifted character insertion")
    (description
      "Documentation at https://melpa.org/#/snoopy")
    (license #f)))

(define-public emacs-snow
  (package
    (name "emacs-snow")
    (version "20221226.2238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/snow.el.git")
               (commit
                 "be17977677fa29709a726715a1a1cba1bd299f68")))
        (sha256
          (base32
            "0fh1hmwpszm9frvnqr2b8rlfx33dy9jm5r82hldgxdbhlv8dq4d0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/snow.el")
    (synopsis "Let it snow in Emacs!")
    (description
      "Documentation at https://melpa.org/#/snow")
    (license #f)))

(define-public emacs-soar-mode
  (package
    (name "emacs-soar-mode")
    (version "20190503.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/adeschamps/soar-mode.git")
               (commit
                 "13b6fca62ea6574d230516fddf359a61f6558ecd")))
        (sha256
          (base32
            "1y1z4lyv1b56sfimfpxzix5zww97hbci8a9q4cphx65hwkgbfa0d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/adeschamps/soar-mode")
    (synopsis "A major mode for the Soar language")
    (description
      "Documentation at https://melpa.org/#/soar-mode")
    (license #f)))

(define-public emacs-soccer
  (package
    (name "emacs-soccer")
    (version "20231108.1633")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/md-arif-shaikh/soccer.git")
               (commit
                 "96dd98a34238c8019d48507071df5d2b199360cd")))
        (sha256
          (base32
            "1ys401q58wm8sc3ly7w3vvpxcgz3i6gifcf19f2v6jd7pikcifrv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/md-arif-shaikh/soccer")
    (synopsis
      "Fixtures, results, table etc for soccer")
    (description
      "Documentation at https://melpa.org/#/soccer")
    (license #f)))

(define-public emacs-socyl
  (package
    (name "emacs-socyl")
    (version "20170212.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/socyl.git")
               (commit
                 "1ef2da42f66f3ab31a34131e51648f352416f0ba")))
        (sha256
          (base32
            "0jks5dkxhhgh4gbli90p71s8354iywlwj2lq6n5fyqxbdxzk412d"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-pkg-info))
    (home-page "https://github.com/nlamirault/socyl")
    (synopsis "Frontend for several search tools")
    (description
      "Documentation at https://melpa.org/#/socyl")
    (license #f)))

(define-public emacs-soft-charcoal-theme
  (package
    (name "emacs-soft-charcoal-theme")
    (version "20140420.1643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/soft-charcoal-theme.git")
               (commit
                 "5607ab977fae6638e78b1495e02da8955c9ba19f")))
        (sha256
          (base32
            "07056pnjgsgw06c67776qp7jci96iqbzlprbavzz2l1j8ywz8cwm"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/soft-charcoal-theme")
    (synopsis "Dark charcoal theme with soft colors")
    (description
      "Documentation at https://melpa.org/#/soft-charcoal-theme")
    (license #f)))

(define-public emacs-soft-morning-theme
  (package
    (name "emacs-soft-morning-theme")
    (version "20150918.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/soft-morning-theme.git")
               (commit
                 "c0f9c70c97ef2be2a093cf839c4bfe27740a111c")))
        (sha256
          (base32
            "06q82v1hndvznsqg0r6jrxvgxhycg9m65kay4db4yy0gmc66v2xf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/soft-morning-theme")
    (synopsis
      "Emacs24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/soft-morning-theme")
    (license #f)))

(define-public emacs-soft-stone-theme
  (package
    (name "emacs-soft-stone-theme")
    (version "20140614.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/soft-stone-theme.git")
               (commit
                 "fb475514cfb02cf30ce358a61c48e46614344d48")))
        (sha256
          (base32
            "030mf8b0sf9mmzwhg85zh0ccvcg768kckwvbm0yzg7vmq1x46hjl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/soft-stone-theme")
    (synopsis
      "Emacs 24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/soft-stone-theme")
    (license #f)))

(define-public emacs-solaire-mode
  (package
    (name "emacs-solaire-mode")
    (version "20211213.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hlissner/emacs-solaire-mode.git")
               (commit
                 "8af65fbdc50b25ed3214da949b8a484527c7cc14")))
        (sha256
          (base32
            "1lkm09wznal0grpz61ikc77mjrri1x1bi79qwyf1cah9s0wv3isq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hlissner/emacs-solaire-mode")
    (synopsis
      "make certain buffers grossly incandescent")
    (description
      "Documentation at https://melpa.org/#/solaire-mode")
    (license #f)))

(define-public emacs-solarized-theme
  (package
    (name "emacs-solarized-theme")
    (version "20231008.1300")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/solarized-emacs.git")
               (commit
                 "cd737ed7e0eac299844a9b453758dec4a392c7c9")))
        (sha256
          (base32
            "1xlidpis2b5r30lnh3j8bljfkciz9gc6zsinqiypm76qiz2gnld5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bbatsov/solarized-emacs")
    (synopsis "The Solarized color theme")
    (description
      "Documentation at https://melpa.org/#/solarized-theme")
    (license #f)))

(define-public emacs-solidity-flycheck
  (package
    (name "emacs-solidity-flycheck")
    (version "20221024.220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethereum/emacs-solidity.git")
               (commit
                 "929ce58ff0d42cf1109f9fb0655c787ee58cc2da")))
        (sha256
          (base32
            "0yy9bdbab8k84csskq6lq6vgrzpm3zjj8a9gxbnwxc4ksarm1npg"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-flycheck
            emacs-solidity-mode
            emacs-dash))
    (arguments '(#:files ("solidity-flycheck.el")))
    (home-page "unspecified")
    (synopsis
      "Flycheck integration for solidity emacs mode")
    (description
      "Documentation at https://melpa.org/#/solidity-flycheck")
    (license #f)))

(define-public emacs-solidity-mode
  (package
    (name "emacs-solidity-mode")
    (version "20230628.1637")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethereum/emacs-solidity.git")
               (commit
                 "8ba549e429e86778a0e079648f3bc3463fcb15f6")))
        (sha256
          (base32
            "02lh72d7s2r0s4wmmxd84rs1wpvmid2l2nz4rpzipldkwrdbn95f"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "company-solidity.el"
            "solidity-flycheck.el"))))
    (home-page "unspecified")
    (synopsis
      "Major mode for ethereum's solidity language")
    (description
      "Documentation at https://melpa.org/#/solidity-mode")
    (license #f)))

(define-public emacs-solo-jazz-theme
  (package
    (name "emacs-solo-jazz-theme")
    (version "20220117.2009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cstby/solo-jazz-emacs-theme.git")
               (commit
                 "51d63d8a2c855f4ea79eef9fc9c8a5c9702642c4")))
        (sha256
          (base32
            "16pwwy297ifmn05c7fb83m6q0v2ysq8i7x218pqnvq37si3br6lp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cstby/solo-jazz-emacs-theme")
    (synopsis "The Solo-Jazz color theme")
    (description
      "Documentation at https://melpa.org/#/solo-jazz-theme")
    (license #f)))

(define-public emacs-somafm
  (package
    (name "emacs-somafm")
    (version "20220402.2131")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/artenator/somafm.el.git")
               (commit
                 "90b661fb1abc652feb6508eb61735919d02e9687")))
        (sha256
          (base32
            "0n8y8aj42j646vfjarl6w1dxn7wxqx3w6vjwbm8wj4i8nm17a77z"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request))
    (home-page
      "https://github.com/artenator/somafm.el")
    (synopsis "A simple soma.fm interface")
    (description
      "Documentation at https://melpa.org/#/somafm")
    (license #f)))

(define-public emacs-soong-mode
  (package
    (name "emacs-soong-mode")
    (version "20221217.1243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bobrofon/soong-mode.git")
               (commit
                 "bf3dc1070b368b413958f54fbe9bcc2aaf77b56f")))
        (sha256
          (base32
            "037dk71xdar01bpggvmw0jnagjfbh60g1s8lkv0nm24yhafbrlkm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bobrofon/soong-mode")
    (synopsis
      "Major mode for editing Soong build files")
    (description
      "Documentation at https://melpa.org/#/soong-mode")
    (license #f)))

(define-public emacs-soothe-theme
  (package
    (name "emacs-soothe-theme")
    (version "20220922.349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-soothe-theme.git")
               (commit
                 "d8aee0fca549d535ebb7b5fd1a8017f12925d16b")))
        (sha256
          (base32
            "1bcwm07j0w8876vlzfpyh789n00w5dafx42zdbl612dpf6awika4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "https://github.com/emacsfodder/emacs-soothe-theme")
    (synopsis "A dark colorful theme")
    (description
      "Documentation at https://melpa.org/#/soothe-theme")
    (license #f)))

(define-public emacs-sorcery-theme
  (package
    (name "emacs-sorcery-theme")
    (version "20210101.1352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtreca/emacs-theme-sorcery.git")
               (commit
                 "5a1c4445b9e6e09589a299a9962a6973272a0c2f")))
        (sha256
          (base32
            "1b858049n6nw4qf60fmszjrhl80x7ssh32f7glj722kwy7404kdh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/vxid/emacs-theme-sorcery")
    (synopsis "A D&D (Dark and Dusty) Theme")
    (description
      "Documentation at https://melpa.org/#/sorcery-theme")
    (license #f)))

(define-public emacs-soria-theme
  (package
    (name "emacs-soria-theme")
    (version "20230227.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mssola/soria.git")
               (commit
                 "fcd8632cb47ff93d974c8362b4e6501004caad7d")))
        (sha256
          (base32
            "1cppcxs8jxcsbalzxfkzzrj7sbnildrhd1z2rxi2vayzlr5ql3ff"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mssola/soria")
    (synopsis
      "A xoria256 theme with some colors from openSUSE")
    (description
      "Documentation at https://melpa.org/#/soria-theme")
    (license #f)))

(define-public emacs-sort-words
  (package
    (name "emacs-sort-words")
    (version "20160929.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dotemacs/sort-words.el.git")
               (commit
                 "7b6e108f80237363faf7ec28b2c58dec270b8601")))
        (sha256
          (base32
            "18cwii9h2planb9bgrih4hkz2cqinbl8wq5sal4b8kwnaq07bbw7"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.org/dotemacs/sort-words.el")
    (synopsis "Sort words in a selected region")
    (description
      "Documentation at https://melpa.org/#/sort-words")
    (license #f)))

(define-public emacs-sotclojure
  (package
    (name "emacs-sotclojure")
    (version "20170922.8")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/speed-of-thought-clojure.git")
               (commit
                 "a480c887b53cb007b7b099c5ffcab89b9e59d7bc")))
        (sha256
          (base32
            "1gf5fsrjigzxabd9k47lb98y3wdjwpw02x9ldnjzrgxfjfbxgqm0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-clojure-mode
            emacs-cider
            emacs-sotlisp))
    (home-page
      "https://github.com/Malabarba/speed-of-thought-clojure")
    (synopsis
      "Write clojure at the speed of thought.")
    (description
      "Documentation at https://melpa.org/#/sotclojure")
    (license #f)))

(define-public emacs-sotlisp
  (package
    (name "emacs-sotlisp")
    (version "20220909.803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Malabarba/speed-of-thought-lisp.git")
               (commit
                 "04186129f2dccf48e288639b78adeb9c0e94be54")))
        (sha256
          (base32
            "04s6j719xzqq12rmamv2d40a5s7q0qvadfk5y4jpdyq21qlxpsgs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Malabarba/speed-of-thought-lisp")
    (synopsis "Write lisp at the speed of thought.")
    (description
      "Documentation at https://melpa.org/#/sotlisp")
    (license #f)))

(define-public emacs-sound-wav
  (package
    (name "emacs-sound-wav")
    (version "20230929.721")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sound-wav.git")
               (commit
                 "b522e7fa0ef24ec669d0b02935287c2a6cc8c314")))
        (sha256
          (base32
            "1cpy916q2hf48j0wiginpsi9srqs9zkjq5m3pc4p1aj95cgaib2v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-deferred))
    (home-page
      "https://github.com/syohex/emacs-sound-wav")
    (synopsis "Play wav file")
    (description
      "Documentation at https://melpa.org/#/sound-wav")
    (license #f)))

(define-public emacs-soundcloud
  (package
    (name "emacs-soundcloud")
    (version "20150502.326")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thieman/soundcloud.el.git")
               (commit
                 "f998d4276ea90258909c698f6a5a51fccb667c08")))
        (sha256
          (base32
            "1m8wcm6y80gq5rrm4brd3f20kmk54s6ph26j4lz4cmilxk6gj56v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-emms
            emacs-deferred
            emacs-string-utils
            emacs-request
            emacs-request-deferred))
    (home-page "unspecified")
    (synopsis "a SoundCloud client for Emacs")
    (description
      "Documentation at https://melpa.org/#/soundcloud")
    (license #f)))

(define-public emacs-soundklaus
  (package
    (name "emacs-soundklaus")
    (version "20191220.2112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/soundklaus.el.git")
               (commit
                 "15ce6e7f24a45e4f202d83cca9fa3bfdd94ca592")))
        (sha256
          (base32
            "03c86qxdya306p6150f3vwhlh51q5vsbgqzgcdxhm72raf32gs59"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-emms
            emacs-s
            emacs-pkg-info
            emacs-request))
    (home-page
      "https://github.com/r0man/soundklaus.el")
    (synopsis
      "Play music on SoundCloud with Emacs via EMMS")
    (description
      "Documentation at https://melpa.org/#/soundklaus")
    (license #f)))

(define-public emacs-sourcekit
  (package
    (name "emacs-sourcekit")
    (version "20210430.2155")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nathankot/company-sourcekit.git")
               (commit
                 "a1860ad4dd3a542acd2fa0dfac2a388cbdf4af0c")))
        (sha256
          (base32
            "18pv1hcilj7kndr7a29jjskp21khh1sd0wy01h8y8y9mf70kikg6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-request))
    (arguments '(#:files ("sourcekit.el")))
    (home-page
      "https://github.com/nathankot/company-sourcekit")
    (synopsis
      "Library to interact with sourcekittendaemon")
    (description
      "Documentation at https://melpa.org/#/sourcekit")
    (license #f)))

(define-public emacs-sourcemap
  (package
    (name "emacs-sourcemap")
    (version "20200315.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sourcemap.git")
               (commit
                 "bb2a56b2feb62b0c77d7f03ef2acd94f91be6b3f")))
        (sha256
          (base32
            "1qr5syl2wm7z1gkgafdhch6n7fg3qc09k8dhv983kq4vg5kp36ml"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-sourcemap")
    (synopsis "Sourcemap parser")
    (description
      "Documentation at https://melpa.org/#/sourcemap")
    (license #f)))

(define-public emacs-sourcepawn-mode
  (package
    (name "emacs-sourcepawn-mode")
    (version "20230628.1821")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agrif/sourcepawn-mode.git")
               (commit
                 "1f100431f34b51c5374ea0dd71146c870555ea82")))
        (sha256
          (base32
            "1iky6hz6la4lbl7v6d9999i4mp0g2kr0w5ccbs8kc44s82j2axcf"))))
    (build-system melpa-build-system)
    (home-page
      "http://gammalevel.com/teamfortress2/sourcepawn-mode")
    (synopsis "SourcePawn major mode")
    (description
      "Documentation at https://melpa.org/#/sourcepawn-mode")
    (license #f)))

(define-public emacs-sourcerer-theme
  (package
    (name "emacs-sourcerer-theme")
    (version "20161014.1625")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gilbertw1/sourcerer-emacs.git")
               (commit
                 "c7f8e665d53bb48fb72f95f706710d53d24bd407")))
        (sha256
          (base32
            "06bxsbjyrn4grp9i17p90cs4x50cmw62k6a2c6gapkw8f1xbv7xv"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/gilbertw1/sourcerer-emacs")
    (synopsis "A version of sourcerer by xero")
    (description
      "Documentation at https://melpa.org/#/sourcerer-theme")
    (license #f)))

(define-public emacs-sozluk
  (package
    (name "emacs-sozluk")
    (version "20230730.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/sozluk.el.git")
               (commit
                 "420ace999fa0d27fbc6aa6011313488c8664a925")))
        (sha256
          (base32
            "16q3bnicj10gkh0kh7sv8arf09vai5fy44g4a1ykhizi9l04pwy6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/isamert/sozluk.el")
    (synopsis "An online Turkish dictionary")
    (description
      "Documentation at https://melpa.org/#/sozluk")
    (license #f)))

(define-public emacs-space-theming
  (package
    (name "emacs-space-theming")
    (version "20200502.1032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/space-theming.git")
               (commit
                 "31dca6954df643255175f7df68a86892aa3c71a7")))
        (sha256
          (base32
            "1bc6bsilsv1p3i39n14vnsrk9bz738n7fw16jv72qv74xkvqkyr0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/p3r7/space-theming")
    (synopsis "Easilly override theme faces")
    (description
      "Documentation at https://melpa.org/#/space-theming")
    (license #f)))

(define-public emacs-spacebar
  (package
    (name "emacs-spacebar")
    (version "20190719.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matthias-margush/spacebar.git")
               (commit
                 "2b2cd0e786877273103f048e62a06b0027deca2d")))
        (sha256
          (base32
            "08jfqvm8xfw0mhgfns6q2ysfwqr6g6iz8vc4g4svdbsimmfhf6ka"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-eyebrowse))
    (home-page
      "https://github.com/matthias-margush/spacebar")
    (synopsis "Workspaces Bar")
    (description
      "Documentation at https://melpa.org/#/spacebar")
    (license #f)))

(define-public emacs-spacegray-theme
  (package
    (name "emacs-spacegray-theme")
    (version "20150719.1931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bruce/emacs-spacegray-theme.git")
               (commit
                 "9826265c2bceb2ebc1c5e16a45021da0253ace97")))
        (sha256
          (base32
            "0aplwmm17ypbns5blc4rf5rr6dasj0zp5ibykpfl43fh4bd8z89n"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bruce/emacs-spacegray-theme")
    (synopsis "A Hyperminimal UI Theme")
    (description
      "Documentation at https://melpa.org/#/spacegray-theme")
    (license #f)))

(define-public emacs-spaceline
  (package
    (name "emacs-spaceline")
    (version "20230922.1127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheBB/spaceline.git")
               (commit
                 "086420d16e526c79b67fc1edec4c2ae1e699f372")))
        (sha256
          (base32
            "1qld1rsvi9a2kq8w128sp0gv7dppp7cxmgrlyg5zdvvp9av3d90i"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-powerline emacs-dash emacs-s))
    (home-page "https://github.com/TheBB/spaceline")
    (synopsis
      "Modeline configuration library for powerline")
    (description
      "Documentation at https://melpa.org/#/spaceline")
    (license #f)))

(define-public emacs-spaceline-all-the-icons
  (package
    (name "emacs-spaceline-all-the-icons")
    (version "20190325.1602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/domtronn/spaceline-all-the-icons.el.git")
               (commit
                 "5afd48c10f1bd42d9b9648c5e64596b72f3e9042")))
        (sha256
          (base32
            "1chv6lv216qa88fm2wil45x19dzahcclr9p5vizcziq180dnmass"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons
            emacs-spaceline
            emacs-memoize))
    (home-page
      "https://github.com/domtronn/spaceline-all-the-icons.el")
    (synopsis
      "A Spaceline theme using All The Icons")
    (description
      "Documentation at https://melpa.org/#/spaceline-all-the-icons")
    (license #f)))

(define-public emacs-spacemacs-theme
  (package
    (name "emacs-spacemacs-theme")
    (version "20230530.1751")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nashamri/spacemacs-theme.git")
               (commit
                 "319ad1cd6aa05dcb43e4edca50eca339892e0865")))
        (sha256
          (base32
            "1kmfmf7d5qw06y5hrfspzmds13r9ijvsh9f2fnahg1mr3a6g3bjl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nashamri/spacemacs-theme")
    (synopsis
      "Color theme with a dark and light versions")
    (description
      "Documentation at https://melpa.org/#/spacemacs-theme")
    (license #f)))

(define-public emacs-spaces
  (package
    (name "emacs-spaces")
    (version "20170809.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/chumpy-windows.git")
               (commit
                 "6bdb51e9a346907d60a9625f6180bddd06be6674")))
        (sha256
          (base32
            "1wkyvfqmf24c8kb162pwi6wcm88bzf0x9mxljzkx0s8bq9aliny6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("spaces.el")))
    (home-page
      "https://github.com/chumpage/chumpy-windows")
    (synopsis
      "Create and switch between named window configurations.")
    (description
      "Documentation at https://melpa.org/#/spaces")
    (license #f)))

(define-public emacs-spanish-holidays
  (package
    (name "emacs-spanish-holidays")
    (version "20230626.805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/gnuhack/spanish-holidays.git")
               (commit
                 "26d552ae71f670dc966a3b7b7614d1622bce9f38")))
        (sha256
          (base32
            "1rhzcs5zm3z09kmwf2hmhq8sl3vf5qclb5j7lyazr4hmg52f4k22"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/gnuhack/spanish-holidays")
    (synopsis "Spain holidays for calendar")
    (description
      "Documentation at https://melpa.org/#/spanish-holidays")
    (license #f)))

(define-public emacs-spark
  (package
    (name "emacs-spark")
    (version "20230406.2307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alvinfrancis/spark.git")
               (commit
                 "0e58e5122cbb46fb6d850e3b72487431a3696861")))
        (sha256
          (base32
            "1z3hf4rl4ycz82dh2aaw7n41yx60cz80rzczq1l8hrpp02fgrigm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alvinfrancis/spark")
    (synopsis "sparkline generation")
    (description
      "Documentation at https://melpa.org/#/spark")
    (license #f)))

(define-public emacs-sparkline
  (package
    (name "emacs-sparkline")
    (version "20150101.1319")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/woudshoo/sparkline.git")
               (commit
                 "a2b5d817d272d6363b67ed8f8cc75499a19fa8d2")))
        (sha256
          (base32
            "1fqd3ycywxxmln2kzqwflc69xmqlvi9gwvmf7frn0rfv73w09cvp"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Make sparkline images from a list of numbers")
    (description
      "Documentation at https://melpa.org/#/sparkline")
    (license #f)))

(define-public emacs-sparql-mode
  (package
    (name "emacs-sparql-mode")
    (version "20230104.1113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ljos/sparql-mode.git")
               (commit
                 "1f6196094ec6626722c6e03a13f6844c68f62703")))
        (sha256
          (base32
            "031n56bsicrw99ls49rwg4padgbh5adb97lb9gxg852x57hilivr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ljos/sparql-mode")
    (synopsis
      "Edit and interactively evaluate SPARQL queries.")
    (description
      "Documentation at https://melpa.org/#/sparql-mode")
    (license #f)))

(define-public emacs-spatial-navigate
  (package
    (name "emacs-spatial-navigate")
    (version "20230115.633")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/spatial-navigate-"
               version
               ".el"))
        (sha256
          (base32
            "1w9fa9c2r8vh69dw361875zabxfajx7bl53im401crl4fkchnz0p"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-spatial-navigate")
    (synopsis
      "Directional navigation between white-space blocks")
    (description
      "Documentation at https://melpa.org/#/spatial-navigate")
    (license #f)))

(define-public emacs-spdx
  (package
    (name "emacs-spdx")
    (version "20231107.102")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/condy0919/spdx.el.git")
               (commit
                 "db107d1e9a716ffe531a0f73e7044bb8046d34c4")))
        (sha256
          (base32
            "13iyxz88ckzydhmy4wgfrfwp8dcj0dgb1rxwr5zcpqxrl1aifpjp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/condy0919/spdx.el")
    (synopsis
      "Insert SPDX license and copyright headers")
    (description
      "Documentation at https://melpa.org/#/spdx")
    (license #f)))

(define-public emacs-speech-tagger
  (package
    (name "emacs-speech-tagger")
    (version "20170728.1829")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cosmicexplorer/speech-tagger.git")
               (commit
                 "61955b40d4e8b09e66a3e8033e82893f81657c06")))
        (sha256
          (base32
            "07rgs1f9z2ayphv04jdjk9v1s2s47qvksf64z6qn1zss2alc0y0v"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("emacs/speech-tagger.el"
         "emacs/penn_treebank_tags.json")))
    (home-page
      "https://github.com/cosmicexplorer/speech-tagger")
    (synopsis "tag parts of speech using coreNLP")
    (description
      "Documentation at https://melpa.org/#/speech-tagger")
    (license #f)))

(define-public emacs-speechd-el
  (package
    (name "emacs-speechd-el")
    (version "20220608.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brailcom/speechd-el.git")
               (commit
                 "7e30c439729d5635ddd341ad5ab16f832a4619ea")))
        (sha256
          (base32
            "18xgqp8r1bgj63g2n08jbx4jwdcjn3p2lpdndyvfm394y2nzkcxr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Client to speech synthesizers and Braille displays.")
    (description
      "Documentation at https://melpa.org/#/speechd-el")
    (license #f)))

(define-public emacs-speed-type
  (package
    (name "emacs-speed-type")
    (version "20230926.838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dakra/speed-type.git")
               (commit
                 "b982ee6081a11837760eeaed73c4f413eefb07b1")))
        (sha256
          (base32
            "10gghhirwdiwdl63ky6rqz33l4z5smqnrckx2x4j21ii5fy315vn"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/dakra/speed-type")
    (synopsis "Practice touch and speed typing")
    (description
      "Documentation at https://melpa.org/#/speed-type")
    (license #f)))

(define-public emacs-speedbar-git-respect
  (package
    (name "emacs-speedbar-git-respect")
    (version "20200901.246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ukari/speedbar-git-respect.git")
               (commit
                 "dd8f0849fc1dd21b42380e1a8c28a9a29acd9511")))
        (sha256
          (base32
            "0pzml057q2sswjfzd95i2acy50gpczfjbydivl4h5zkbpxgzhrw8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (arguments
      '(#:files ("speedbar-git-respect.el")))
    (home-page
      "https://github.com/ukari/speedbar-git-respect")
    (synopsis
      "Particular respect git repo in speedbar")
    (description
      "Documentation at https://melpa.org/#/speedbar-git-respect")
    (license #f)))

(define-public emacs-speeddating
  (package
    (name "emacs-speeddating")
    (version "20180319.723")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/emacs-speeddating.git")
               (commit
                 "df69db0560f19636a66a74f3d88c793bbb18b21e")))
        (sha256
          (base32
            "0mhzjia900irv0ndiw6w2vzin1gvyaf48pghi16r562ci4lr963w"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/emacs-speeddating")
    (synopsis "Increase date and time at point")
    (description
      "Documentation at https://melpa.org/#/speeddating")
    (license #f)))

(define-public emacs-spell-fu
  (package
    (name "emacs-spell-fu")
    (version "20230808.1342")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/spell-fu-"
               version
               ".tar"))
        (sha256
          (base32
            "0cqzgqh1y2ln9ziv597ai11nh15wdm191r7n3rvmyl3abawrd11g"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-spell-fu")
    (synopsis "Fast & light spelling highlighter")
    (description
      "Documentation at https://melpa.org/#/spell-fu")
    (license #f)))

(define-public emacs-sphinx-doc
  (package
    (name "emacs-sphinx-doc")
    (version "20210213.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/naiquevin/sphinx-doc.el.git")
               (commit
                 "1eda612a44ef027e5229895daa77db99a21b8801")))
        (sha256
          (base32
            "0q72i95yx3xa57jlgr7dik6prf20hi8bp8xf3f5c6ificv7i5378"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (home-page
      "https://github.com/naiquevin/sphinx-doc.el")
    (synopsis
      "Sphinx friendly docstrings for Python functions")
    (description
      "Documentation at https://melpa.org/#/sphinx-doc")
    (license #f)))

(define-public emacs-sphinx-frontend
  (package
    (name "emacs-sphinx-frontend")
    (version "20161025.758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/sphinx-frontend.git")
               (commit
                 "0cbb03361c245382d3e679dded30c4fc1713c252")))
        (sha256
          (base32
            "1ksjgd995pcb4lvwip08i8ay0xpin8dcam3hcgnbjjqjg9hja1cf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kostafey/sphinx-frontend")
    (synopsis
      "Launch build process for rst documents via sphinx.")
    (description
      "Documentation at https://melpa.org/#/sphinx-frontend")
    (license #f)))

(define-public emacs-sphinx-mode
  (package
    (name "emacs-sphinx-mode")
    (version "20220417.1552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/sphinx-mode.git")
               (commit
                 "77ca51adf9ee877f3a8f43e744f59e650772f121")))
        (sha256
          (base32
            "0imv3baiy0cq4aj220l8rx4d1drsmiak7vrhbshsg9987026b8ig"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-dash))
    (home-page "unspecified")
    (synopsis "Minor mode providing sphinx support.")
    (description
      "Documentation at https://melpa.org/#/sphinx-mode")
    (license #f)))

(define-public emacs-spice-mode
  (package
    (name "emacs-spice-mode")
    (version "20220210.1414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://repo.or.cz/spice-mode.git")
               (commit
                 "f55c2b6dd35caace0ec7250b5c7b5d119235a23d")))
        (sha256
          (base32
            "1jkqwclk65rcyv5qj2vq7qpiimlrqij7c7fbjvxv4pf4zd2wx0k8"))))
    (build-system melpa-build-system)
    (home-page "https://repo.or.cz/spice-mode.git")
    (synopsis "Major mode for SPICE")
    (description
      "Documentation at https://melpa.org/#/spice-mode")
    (license #f)))

(define-public emacs-splitjoin
  (package
    (name "emacs-splitjoin")
    (version "20150505.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/splitjoin.git")
               (commit
                 "e2945ee269e6e90f0243d6f2a33e067bb0a2873c")))
        (sha256
          (base32
            "1qdy9nc2h7mwxh7zg2p1x7yg96hxkwxqimjp6zb1119jx0s8grjc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-splitjoin")
    (synopsis
      "Transition between multiline and single-line code")
    (description
      "Documentation at https://melpa.org/#/splitjoin")
    (license #f)))

(define-public emacs-splitter
  (package
    (name "emacs-splitter")
    (version "20170809.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/chumpy-windows.git")
               (commit
                 "6bdb51e9a346907d60a9625f6180bddd06be6674")))
        (sha256
          (base32
            "1wkyvfqmf24c8kb162pwi6wcm88bzf0x9mxljzkx0s8bq9aliny6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("splitter.el")))
    (home-page
      "https://github.com/chumpage/chumpy-windows")
    (synopsis "Manage window splits")
    (description
      "Documentation at https://melpa.org/#/splitter")
    (license #f)))

(define-public emacs-spotify
  (package
    (name "emacs-spotify")
    (version "20200615.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/remvee/spotify-el.git")
               (commit
                 "7e28ef0b4519c6a46fce6a89c0ff1ed775eda71a")))
        (sha256
          (base32
            "0mi8g6ryjg7czrr6fchwq9459ijd5c9wsvj3s9j0l0w4jcyxrvrd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/remvee/spotify-el")
    (synopsis
      "Control the spotify application from emacs")
    (description
      "Documentation at https://melpa.org/#/spotify")
    (license #f)))

(define-public emacs-spotlight
  (package
    (name "emacs-spotlight")
    (version "20200109.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benmaughan/spotlight.el.git")
               (commit
                 "ea71f4fd380c51e50c47bb25855af4f40e4d8da0")))
        (sha256
          (base32
            "1dda4gwxyhnr73ckjr70yjah9dmddvyfcwlrbb6d6bidb70ib0dj"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper emacs-counsel))
    (home-page "http://www.pragmaticemacs.com")
    (synopsis "search files with Mac OS X spotlight")
    (description
      "Documentation at https://melpa.org/#/spotlight")
    (license #f)))

(define-public emacs-spray
  (package
    (name "emacs-spray")
    (version "20160304.2220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~iank/spray")
               (commit
                 "74d9dcfa2e8b38f96a43de9ab0eb13364300cb46")))
        (sha256
          (base32
            "1avbfr32dvff26kgvd5vgan99nb5c6al9kv5xbmy2rcls17py7r2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ian-kelling/spray")
    (synopsis "a speed reading mode")
    (description
      "Documentation at https://melpa.org/#/spray")
    (license #f)))

(define-public emacs-springboard
  (package
    (name "emacs-springboard")
    (version "20170106.755")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/springboard.git")
               (commit
                 "687d1e5898a880878995dc9bffe93b4598366203")))
        (sha256
          (base32
            "0fn8c4hqblfjvcpg68kj2dmdjqsdnxddqbzgvakl43zckjg8pi01"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm))
    (arguments '(#:files ("springboard.el")))
    (home-page
      "https://github.com/jwiegley/springboard")
    (synopsis
      "Temporarily change default-directory for one command")
    (description
      "Documentation at https://melpa.org/#/springboard")
    (license #f)))

(define-public emacs-sprintly-mode
  (package
    (name "emacs-sprintly-mode")
    (version "20121006.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sprintly/sprintly-mode.git")
               (commit
                 "6695892bae5860b5268bf3ae62be990ee9b63c11")))
        (sha256
          (base32
            "06rk07h92s5sljprs41y3q31q64cprx9kgs56c2j6v4c8cmsq5h6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-furl))
    (home-page
      "https://github.com/sprintly/sprintly-mode")
    (synopsis
      "Major mode for dealing with sprint.ly")
    (description
      "Documentation at https://melpa.org/#/sprintly-mode")
    (license #f)))

(define-public emacs-sproto-mode
  (package
    (name "emacs-sproto-mode")
    (version "20151115.1805")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m2q1n9/sproto-mode.git")
               (commit
                 "0583a88273204dccd884b7edaa3590cefd31e7f7")))
        (sha256
          (base32
            "11igl9n2zwwar1xg651g5v0r0w6xl0grm8xns9wg80351ijrci7x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode for editing sproto.")
    (description
      "Documentation at https://melpa.org/#/sproto-mode")
    (license #f)))

(define-public emacs-sprunge
  (package
    (name "emacs-sprunge")
    (version "20160301.243")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tomjakubowski/sprunge.el.git")
               (commit
                 "0fd386b8b29c4175022a04ad70ea5643185b6726")))
        (sha256
          (base32
            "03wjzk1ljclfjgqzkg6m7v8saaajgavyd0xskd8fg8rdkx13ki0l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis "Upload pastes to sprunge.us")
    (description
      "Documentation at https://melpa.org/#/sprunge")
    (license #f)))

(define-public emacs-sq
  (package
    (name "emacs-sq")
    (version "20220717.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/sequoia-pgp/sqel.git")
               (commit
                 "bb0d1756bb9c62bb999fa21e15949e28650c663e")))
        (sha256
          (base32
            "1ih91f58spn1225x6a8mlpikxqg2ga4xbln6aalrcjk6pk84s69d"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/sequoia-pgp/sqel")
    (synopsis "Bindings for Sequoia PGP's cli")
    (description
      "Documentation at https://melpa.org/#/sq")
    (license #f)))

(define-public emacs-sql-clickhouse
  (package
    (name "emacs-sql-clickhouse")
    (version "20191209.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rschwarz/sql-clickhouse.git")
               (commit
                 "8403a4a5d332dbb6459b7fbce6ea95c36d390a5b")))
        (sha256
          (base32
            "0c039m67jc2xq9pmn0xmqr07nzdssc4vbk51ng0272kcs9mbslrf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leethargo/sql-clickhouse")
    (synopsis
      "support ClickHouse as SQL interpreter")
    (description
      "Documentation at https://melpa.org/#/sql-clickhouse")
    (license #f)))

(define-public emacs-sql-impala
  (package
    (name "emacs-sql-impala")
    (version "20181218.410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jterk/sql-impala.git")
               (commit
                 "466e7c0c789ec3e5e8a276c8f6754f91bb584c3e")))
        (sha256
          (base32
            "02psgbm06wivdm2cmjnj2vy05lnljxn44hj2arw2fr7x2qwn9r35"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jterk/sql-impala")
    (synopsis "comint support for Cloudera Impala")
    (description
      "Documentation at https://melpa.org/#/sql-impala")
    (license #f)))

(define-public emacs-sql-presto
  (package
    (name "emacs-sql-presto")
    (version "20190113.1742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kat-co/sql-prestodb.git")
               (commit
                 "bcda455e300a1af75c7bb805882329bc844703b2")))
        (sha256
          (base32
            "00whmsylr802fx87yqbr06rbymyln7kq7750pcz26xm1jgja7cax"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("artifacts/*.el")))
    (home-page "unspecified")
    (synopsis "No description available.")
    (description
      "Documentation at https://melpa.org/#/sql-presto")
    (license #f)))

(define-public emacs-sql-sqlline
  (package
    (name "emacs-sql-sqlline")
    (version "20231109.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/matteoredaelli/sql-sqlline.git")
               (commit
                 "3d540a8cc9c6f816b241913042008f09323455af")))
        (sha256
          (base32
            "0msqa8xknfiiphll1g4vlk1akxpn7n9i6rcds1v6r69zykxzb0mr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("artifacts/*.el")))
    (home-page
      "https://gitlab.com/matteoredaelli/sql-sqlline")
    (synopsis "Adds SQLLine support to SQLi mode")
    (description
      "Documentation at https://melpa.org/#/sql-sqlline")
    (license #f)))

(define-public emacs-sql-trino
  (package
    (name "emacs-sql-trino")
    (version "20220826.632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/regadas/sql-trino.git")
               (commit
                 "2b70cd73b801b9f8ac28dd18bf28c6408aa36d73")))
        (sha256
          (base32
            "0x5da30c948fdr0lch1rdxfw031gfc23yab0vpbjy2mawnj18m8v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/regadas/sql-trino")
    (synopsis "Adds Trino support to SQLi mode")
    (description
      "Documentation at https://melpa.org/#/sql-trino")
    (license #f)))

(define-public emacs-sqlformat
  (package
    (name "emacs-sqlformat")
    (version "20230808.543")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/sqlformat.git")
               (commit
                 "ce8f5ea74c260ff0b8353a2df62d36aa39141403")))
        (sha256
          (base32
            "13xh49hkp8fh224idl1f6isrc7bm35jcsidrig59kk5dp8xwmbs7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/purcell/sqlformat")
    (synopsis
      "Reformat SQL using sqlformat or pgformatter")
    (description
      "Documentation at https://melpa.org/#/sqlformat")
    (license #f)))

(define-public emacs-sqlite
  (package
    (name "emacs-sqlite")
    (version "20201227.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/cnngimenez/sqlite.el.git")
               (commit
                 "f3da716302c929b9df4ba0c281968f72a9d1d188")))
        (sha256
          (base32
            "00fkjsc01fymhjrzlx3anl9vj85yw4jlxvh77d0mvchwzym8wi8l"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/cnngimenez/sqlite.el")
    (synopsis "Use sqlite via ELisp")
    (description
      "Documentation at https://melpa.org/#/sqlite")
    (license #f)))

(define-public emacs-sqlite3
  (package
    (name "emacs-sqlite3")
    (version "20230315.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pekingduck/emacs-sqlite3-api.git")
               (commit
                 "b513b71012f61895f771fc6948d6511ea8ded0a6")))
        (sha256
          (base32
            "1y36818nd47mzfi3xcp31nr8n0izzmdyiqfx9hgp7ag98rbm7wlx"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "Makefile"
          "consts.c"
          "emacs-module.h"
          "sqlite3-api.c")))
    (home-page
      "https://github.com/pekingduck/emacs-sqlite3-api")
    (synopsis
      "Direct access to the core SQLite3 API")
    (description
      "Documentation at https://melpa.org/#/sqlite3")
    (license #f)))

(define-public emacs-sqlup-mode
  (package
    (name "emacs-sqlup-mode")
    (version "20170610.1537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Trevoke/sqlup-mode.el.git")
               (commit
                 "3f9df9c88d6a7f9b1ae907e401cad8d3d7d63bbf")))
        (sha256
          (base32
            "1crah9h86m5sdc7panj98ws9cv2as6kh9syal8m1p7rhimgvdx1v"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/trevoke/sqlup-mode.el")
    (synopsis "Upcase SQL words for you")
    (description
      "Documentation at https://melpa.org/#/sqlup-mode")
    (license #f)))

(define-public emacs-squirrel-mode
  (package
    (name "emacs-squirrel-mode")
    (version "20221227.232")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/squirrel-mode.git")
               (commit
                 "1af79dfe70c4c8e6f0f144bfd2eb65c077aca785")))
        (sha256
          (base32
            "0pmk410i5ik8rbkn7zk4i1iq0ax7hkvdv0y7ikyi3m159rjbfnaa"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/squirrel-mode")
    (synopsis
      "A major mode for the Squirrel programming language")
    (description
      "Documentation at https://melpa.org/#/squirrel-mode")
    (license #f)))

(define-public emacs-sr-speedbar
  (package
    (name "emacs-sr-speedbar")
    (version "20161025.831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/sr-speedbar.git")
               (commit
                 "77a83fb50f763a465c021eca7343243f465b4a47")))
        (sha256
          (base32
            "0sd12555hk7z721y00kv3crdybvcn1i08wmd148z5imayzibj153"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/sr-speedbar.el")
    (synopsis "Same frame speedbar")
    (description
      "Documentation at https://melpa.org/#/sr-speedbar")
    (license #f)))

(define-public emacs-srcery-theme
  (package
    (name "emacs-srcery-theme")
    (version "20230829.737")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/srcery-colors/srcery-emacs.git")
               (commit
                 "4ee4e51d2c0317d3bc41a131a8bc76cfa2db98ed")))
        (sha256
          (base32
            "1j3715m1vx5qaban9d4zix0gpzs5iip7mfmx3x374axjn878d656"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/srcery-colors/srcery-emacs")
    (synopsis "Dark color theme")
    (description
      "Documentation at https://melpa.org/#/srcery-theme")
    (license #f)))

(define-public emacs-srefactor
  (package
    (name "emacs-srefactor")
    (version "20230504.617")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/semantic-refactor.git")
               (commit
                 "95c70a94b5aad4c85b35569e2f2325047791153a")))
        (sha256
          (base32
            "0287nszp4sb6k9xmm7cvli9ym56fh3bi1nim1h2f6fb5i8yqnca2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tuhdo/semantic-refactor")
    (synopsis
      "A refactoring tool based on Semantic parser framework")
    (description
      "Documentation at https://melpa.org/#/srefactor")
    (license #f)))

(define-public emacs-srfi
  (package
    (name "emacs-srfi")
    (version "20231030.539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/srfi-explorations/emacs-srfi.git")
               (commit
                 "eafeda97eb8942e5e2f1fe6ebf7472de9ce405dd")))
        (sha256
          (base32
            "1myrv3awf8v1haas63fhy7s81jkbbfv6zlbsb2nl8j723d5vm8jn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/srfi-explorations/emacs-srfi")
    (synopsis
      "Scheme Requests for Implementation browser")
    (description
      "Documentation at https://melpa.org/#/srfi")
    (license #f)))

(define-public emacs-srv
  (package
    (name "emacs-srv")
    (version "20180715.1959")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/legoscia/srv.el.git")
               (commit
                 "714387d5a5cf34d8d8cd96bdb1f9cb8ded823ff7")))
        (sha256
          (base32
            "1a8pqhdi7m3lis5ad2f74s1sy8zpxlwvfsvd80lw746235x2v06z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/legoscia/srv.el")
    (synopsis "perform SRV DNS requests")
    (description
      "Documentation at https://melpa.org/#/srv")
    (license #f)))

(define-public emacs-ssass-mode
  (package
    (name "emacs-ssass-mode")
    (version "20200211.132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/ssass-mode.git")
               (commit
                 "96f557887ad97a0066a60c54f92b7234b8407016")))
        (sha256
          (base32
            "0kfk1dp8mgirbsrcg3klxi005gryqrr3jn2ss9m6vsxldjg69svb"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/AdamNiederer/ssass-mode")
    (synopsis "Edit Sass without a Turing Machine")
    (description
      "Documentation at https://melpa.org/#/ssass-mode")
    (license #f)))

(define-public emacs-ssh
  (package
    (name "emacs-ssh")
    (version "20120904.2042")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/ssh-el.git")
               (commit
                 "812e27409d01c38d74906a1816640506d6e7e3ef")))
        (sha256
          (base32
            "1ffwfgi450f95y1j1zp3k9lfwb6h26jzy88ng2bk4x92n53mhpww"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Support for remote logins using ssh.")
    (description
      "Documentation at https://melpa.org/#/ssh")
    (license #f)))

(define-public emacs-ssh-agency
  (package
    (name "emacs-ssh-agency")
    (version "20200329.1558")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/ssh-agency.git")
               (commit
                 "a5377e4317365a3d5442e06d5c255d4a7c7618db")))
        (sha256
          (base32
            "1i3zmsn0w2k7p2hlzssibckm32kf05l56mkhg96x4sf06g3pwq1d"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/magit/ssh-agency")
    (synopsis "manage ssh-agent from Emacs")
    (description
      "Documentation at https://melpa.org/#/ssh-agency")
    (license #f)))

(define-public emacs-ssh-config-mode
  (package
    (name "emacs-ssh-config-mode")
    (version "20211003.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jhgorrell/ssh-config-mode-el.git")
               (commit
                 "d560a0876a93ad4130baf33dae1b9405ad37a405")))
        (sha256
          (base32
            "13wpi70ys43nx0mqiyn9fssf1iccq63wwcy3a6cylm3shlv13dz8"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/jhgorrell/ssh-config-mode-el")
    (synopsis
      "Mode for fontification of ~/.ssh/config")
    (description
      "Documentation at https://melpa.org/#/ssh-config-mode")
    (license #f)))

(define-public emacs-ssh-deploy
  (package
    (name "emacs-ssh-deploy")
    (version "20230702.928")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cjohansson/emacs-ssh-deploy.git")
               (commit
                 "95fb076c9b657c5f1bfad3ee5bf1f8691c50d428")))
        (sha256
          (base32
            "0iwciwnlkpbasnwdvvip5g39jq4qc8srfw0s07ljb3c3njg3jhsg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cjohansson/emacs-ssh-deploy")
    (synopsis
      "Deployment via Tramp, global or per directory.")
    (description
      "Documentation at https://melpa.org/#/ssh-deploy")
    (license #f)))

(define-public emacs-ssh-tunnels
  (package
    (name "emacs-ssh-tunnels")
    (version "20220721.1242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/death/ssh-tunnels.git")
               (commit
                 "5010d779edef33f869065231b99d74723c9c7eaf")))
        (sha256
          (base32
            "15pwgc9s7f5fjmx2savjrpwr6qcpp0s9iy0y10abpy63np4krc62"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/death/ssh-tunnels")
    (synopsis "Manage SSH tunnels")
    (description
      "Documentation at https://melpa.org/#/ssh-tunnels")
    (license #f)))

(define-public emacs-stan-mode
  (package
    (name "emacs-stan-mode")
    (version "20211129.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stan-dev/stan-mode.git")
               (commit
                 "150bbbe5fd3ad2b5a3dbfba9d291e66eeea1a581")))
        (sha256
          (base32
            "06y4gvw8g4mjyiv77rznivqphh9sayjmi9aqr9nhxlf6i19a6hqh"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("stan-mode/*.el"
         (:exclude "stan-mode/test-*.el"))))
    (home-page
      "https://github.com/stan-dev/stan-mode/tree/master/stan-mode")
    (synopsis "Major mode for editing Stan files")
    (description
      "Documentation at https://melpa.org/#/stan-mode")
    (license #f)))

(define-public emacs-stan-snippets
  (package
    (name "emacs-stan-snippets")
    (version "20211129.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stan-dev/stan-mode.git")
               (commit
                 "150bbbe5fd3ad2b5a3dbfba9d291e66eeea1a581")))
        (sha256
          (base32
            "06y4gvw8g4mjyiv77rznivqphh9sayjmi9aqr9nhxlf6i19a6hqh"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-stan-mode emacs-yasnippet))
    (arguments
      '(#:files
        ("stan-snippets/stan-snippets.el"
         ("snippets/stan-mode"
          "stan-snippets/snippets/stan-mode/*")
         (:exclude "stan-snippets/test-*.el"))))
    (home-page
      "https://github.com/stan-dev/stan-mode/tree/master/stan-snippets")
    (synopsis "Yasnippets for Stan")
    (description
      "Documentation at https://melpa.org/#/stan-snippets")
    (license #f)))

(define-public emacs-standard-dirs
  (package
    (name "emacs-standard-dirs")
    (version "20200621.1603")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lafrenierejm/standard-dirs.el.git")
               (commit
                 "92460e21f964cb7495d974c42acd0b726af3fbcb")))
        (sha256
          (base32
            "1vxgg1gs2ma2c121dgqg9vnzcacb7dxdkxlwdxg0dkivnqicxiyg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-s))
    (home-page
      "https://github.com/lafrenierejm/standard-dirs.el")
    (synopsis
      "Platform-specific paths for config, cache, and other data")
    (description
      "Documentation at https://melpa.org/#/standard-dirs")
    (license #f)))

(define-public emacs-standoff-mode
  (package
    (name "emacs-standoff-mode")
    (version "20210810.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lueck/standoff-mode.git")
               (commit
                 "aa5bac257ebefd91f4b5dd787a835407bddd6fb2")))
        (sha256
          (base32
            "1zpvbsrmcz9zhlchfsbsfbi3g9z1wxhkhbpg2zp2dpk4czqy76lk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lueck/standoff-mode")
    (synopsis
      "Create stand-off markup, also called external markup.")
    (description
      "Documentation at https://melpa.org/#/standoff-mode")
    (license #f)))

(define-public emacs-starhugger
  (package
    (name "emacs-starhugger")
    (version "20231023.1523")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/daanturo/starhugger.el.git")
               (commit
                 "8e1bc1167a64cc421ce3d1368a9c0e5da89bf687")))
        (sha256
          (base32
            "0wpxicq7yh99qx6vwvjgbwwghx1bqyx972zymzhq3m89wnliqlx3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-dash
            emacs-s
            emacs-spinner))
    (arguments '(#:files (:defaults "*.py")))
    (home-page
      "https://gitlab.com/daanturo/starhugger.el")
    (synopsis
      "Hugging Face/AI-powered text & code completion client")
    (description
      "Documentation at https://melpa.org/#/starhugger")
    (license #f)))

(define-public emacs-starlit-theme
  (package
    (name "emacs-starlit-theme")
    (version "20230324.1636")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/SFTtech/starlit-emacs.git")
               (commit
                 "d6f327fb09497be7bee64d5d204d27f655cc5b04")))
        (sha256
          (base32
            "118b3ii9gpjq70q3qf0lyd53jp5a7qvhsl4bbjh4akck96cjdnnj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/SFTtech/starlit-emacs")
    (synopsis
      "Deep blue dark theme with bright colors from the starlit sky")
    (description
      "Documentation at https://melpa.org/#/starlit-theme")
    (license #f)))

(define-public emacs-start-menu
  (package
    (name "emacs-start-menu")
    (version "20160426.1225")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-start-menu.git")
               (commit
                 "f7d33fed7ad2dc61156f1c1cff9e1805366fbd69")))
        (sha256
          (base32
            "1w3l8ahal9hjisny382bcw9w1nh2swpb1jzf2djww5h0i4r2h36c"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-config-parser))
    (home-page
      "https://github.com/lujun9972/el-start-menu")
    (synopsis
      "start-menu for executing external program like in windows")
    (description
      "Documentation at https://melpa.org/#/start-menu")
    (license #f)))

(define-public emacs-stash
  (package
    (name "emacs-stash")
    (version "20151117.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/stash.el.git")
               (commit
                 "c2e494d20c752b80ebbdffbf66687b3cdfc425ad")))
        (sha256
          (base32
            "0cl2y72iagmv87kg72a46a3kap2xigwnrbk2hjgvsbxv2ng5f9cr"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.github.com/vermiculus/stash.el/")
    (synopsis "lightweight persistent caching")
    (description
      "Documentation at https://melpa.org/#/stash")
    (license #f)))

(define-public emacs-state
  (package
    (name "emacs-state")
    (version "20200727.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/state.git")
               (commit
                 "8cd9210f17c1b134274a7352b996839aed9a7d8c")))
        (sha256
          (base32
            "04h8n2wy9qr4bskq9znhadcf02wk4ydhyaaq44yvh55hzmn6gm25"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/state.git")
    (synopsis "Quick navigation between workspaces")
    (description
      "Documentation at https://melpa.org/#/state")
    (license #f)))

(define-public emacs-status
  (package
    (name "emacs-status")
    (version "20151230.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tromey/emacs-status.git")
               (commit
                 "b62c74bf272566f82a68622f29fb9edafea0f241")))
        (sha256
          (base32
            "0jpxmzfvg4k5q3h3gn6lrg891wjzlcps2kkij1jbdjk4jkgq386i"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.py" "*.png")))
    (home-page "unspecified")
    (synopsis
      "This package adds support for status icons to Emacs.")
    (description
      "Documentation at https://melpa.org/#/status")
    (license #f)))

(define-public emacs-steam
  (package
    (name "emacs-steam")
    (version "20220218.1707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/steam.el.git")
               (commit
                 "20aa58c5ccd85f6c4f288a14e79adc66e691cd23")))
        (sha256
          (base32
            "0hghcfvj5pr8hvrrqfka91yghaf1gzhc3jhv68dwaq01lbqnszqz"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/steam.el")
    (synopsis "Organize and launch Steam games")
    (description
      "Documentation at https://melpa.org/#/steam")
    (license #f)))

(define-public emacs-stem
  (package
    (name "emacs-stem")
    (version "20131102.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/stem.git")
               (commit
                 "d74e6611d6ba5025e0276a2cc7c8a90f46bfa9ac")))
        (sha256
          (base32
            "1xc4v8a35c2vpfhza15j4f89x7vyg9bbgm7xnprij7814k8iy7p0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/yuutayamada/stem")
    (synopsis "Routines for stemming")
    (description
      "Documentation at https://melpa.org/#/stem")
    (license #f)))

(define-public emacs-stem-english
  (package
    (name "emacs-stem-english")
    (version "20180109.358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/stem-english.git")
               (commit
                 "c9fc4c6ed6bf82382e479dae80912f4ae17d31f4")))
        (sha256
          (base32
            "1bkmgjfp7xir6d0yf782xkjvf595blrqhr3hack26jg5zl8qsrya"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/kawabata/stem-english")
    (synopsis "- routines for stemming English word")
    (description
      "Documentation at https://melpa.org/#/stem-english")
    (license #f)))

(define-public emacs-stem-reading-mode
  (package
    (name "emacs-stem-reading-mode")
    (version "20220522.1053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/wavexx/stem-reading-mode.el.git")
               (commit
                 "6efc9962e3a19a452c7ab9636cf1e2566a51bd38")))
        (sha256
          (base32
            "04kjf6byxp66v6iprp8wcymi283c46fb4w4wiyj64pp76y3g59az"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/wavexx/stem-reading-mode.el")
    (synopsis
      "Highlight word stems for speed-reading")
    (description
      "Documentation at https://melpa.org/#/stem-reading-mode")
    (license #f)))

(define-public emacs-stgit
  (package
    (name "emacs-stgit")
    (version "20231008.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stacked-git/stgit.git")
               (commit
                 "f9b9280b570cb13696493ab4d39d64736edd2ca3")))
        (sha256
          (base32
            "0cgv7chxqkjaqmzi4691in26j2fm8r0vanw8xzb9cqnz6350wvvj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("contrib/stgit.el")))
    (home-page "http://stacked-git.github.io")
    (synopsis "major mode for StGit interaction")
    (description
      "Documentation at https://melpa.org/#/stgit")
    (license #f)))

(define-public emacs-sticky
  (package
    (name "emacs-sticky")
    (version "20170926.36")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/sticky.git")
               (commit
                 "fec4e1af38f17f5cd80eca361d8e8ef8772db366")))
        (sha256
          (base32
            "126zs059snzpg83q9mrb51y0pqawwrj9smr3y7rza4q4qkdp1nk0"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/sticky.el")
    (synopsis "Sticky key for capital letters")
    (description
      "Documentation at https://melpa.org/#/sticky")
    (license #f)))

(define-public emacs-sticky-shell
  (package
    (name "emacs-sticky-shell")
    (version "20230207.1454")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/andyjda/sticky-shell.git")
               (commit
                 "030535451b7c12eea3a94dfc1a439b8baa96944b")))
        (sha256
          (base32
            "0l1kmrkhykqbsmasjrrffgwahycdpi2jdpl4hn5y3p3xv16yhcwq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/andyjda/sticky-shell")
    (synopsis
      "Minor mode to keep track of previous prompt in your shell")
    (description
      "Documentation at https://melpa.org/#/sticky-shell")
    (license #f)))

(define-public emacs-stickyfunc-enhance
  (package
    (name "emacs-stickyfunc-enhance")
    (version "20150429.1814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/semantic-stickyfunc-enhance.git")
               (commit
                 "13bdba51fcd83ccbc3267959d23afc94d458dcb0")))
        (sha256
          (base32
            "16dxjsr5nj20blww4xpd4jzgjprzzh1nwvb810ggdmp9paf4iy0g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tuhdo/semantic-stickyfunc-enhance")
    (synopsis
      "An enhancement to stock `semantic-stickyfunc-mode'")
    (description
      "Documentation at https://melpa.org/#/stickyfunc-enhance")
    (license #f)))

(define-public emacs-stimmung-themes
  (package
    (name "emacs-stimmung-themes")
    (version "20230925.1808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/motform/stimmung-themes.git")
               (commit
                 "6d0f9b34eba1abde6ee72e10c2b4dfdd18712065")))
        (sha256
          (base32
            "0p0pgfwd987ylsm8lhdkammqy6afx2bb582fb3lrjhj27dn572f1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/motform/stimmung-themes")
    (synopsis "Themes tuned to inner harmonies")
    (description
      "Documentation at https://melpa.org/#/stimmung-themes")
    (license #f)))

(define-public emacs-stock-ticker
  (package
    (name "emacs-stock-ticker")
    (version "20150204.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hagleitn/stock-ticker.git")
               (commit
                 "f2e564142c9de84232839a5b01979cf95b04d6a9")))
        (sha256
          (base32
            "191sg32z1iagyxmbn49i1lpfihld9g9741cw2kj830s4vag4kinx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-request))
    (home-page
      "https://github.com/hagleitn/stock-ticker")
    (synopsis "Show stock prices in mode line")
    (description
      "Documentation at https://melpa.org/#/stock-ticker")
    (license #f)))

(define-public emacs-stock-tracker
  (package
    (name "emacs-stock-tracker")
    (version "20230625.524")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/beacoder/stock-tracker.git")
               (commit
                 "cdffcaa6bb75c450a511a31d0c69e30a4edd562d")))
        (sha256
          (base32
            "0dmg2zh92la3qw9swzn4pz3qmn0qs6rd84dihf43v9r2682nrqb7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-async))
    (home-page
      "https://github.com/beacoder/stock-tracker")
    (synopsis "Track stock price")
    (description
      "Documentation at https://melpa.org/#/stock-tracker")
    (license #f)))

(define-public emacs-strace-mode
  (package
    (name "emacs-strace-mode")
    (version "20171116.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pkmoore/strace-mode.git")
               (commit
                 "2901baa968d5180ab985ac40ca22cc20914d01f5")))
        (sha256
          (base32
            "1jd930nc2g562n4cqq1ppl2d8dq7bxkr3fh9f0gjms7bcm106kz9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "strace output syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/strace-mode")
    (license #f)))

(define-public emacs-streak
  (package
    (name "emacs-streak")
    (version "20220311.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fosskers/streak.git")
               (commit
                 "b2206de2fe43f97e754bbcb0abe9b078a419e787")))
        (sha256
          (base32
            "0v2yvwgkc48kbqh2lx52044b5d7yvg7d24vivqbri1wny5zpriqr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fosskers/streak")
    (synopsis
      "Track a daily streak in your Mode Line")
    (description
      "Documentation at https://melpa.org/#/streak")
    (license #f)))

(define-public emacs-streamlink
  (package
    (name "emacs-streamlink")
    (version "20210811.1429")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BenediktBroich/streamlink.git")
               (commit
                 "c265dc61c02ad29ec01dfd8b5cbe3bac60fbf097")))
        (sha256
          (base32
            "1v6xr9x82m7f43zd228158pr6cwy90lfg8i68w67n6svj2gx19vp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/BenediktBroich/streamlink")
    (synopsis "A major mode for streamlink output")
    (description
      "Documentation at https://melpa.org/#/streamlink")
    (license #f)))

(define-public emacs-strie
  (package
    (name "emacs-strie")
    (version "20160211.2222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcatw/strie.el.git")
               (commit
                 "eb7efb0cccc127c414f6a64db11454869d9c10a8")))
        (sha256
          (base32
            "1kcbkf0wbmqy9slxfqg7wsyw5n2rsaz832ibrxszb642j0l8s7pr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A simple trie data structure implementation")
    (description
      "Documentation at https://melpa.org/#/strie")
    (license #f)))

(define-public emacs-string-edit-at-point
  (package
    (name "emacs-string-edit-at-point")
    (version "20230118.1933")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/string-edit.el.git")
               (commit
                 "87936d816ae24184dd83688136531b6b6f1943fe")))
        (sha256
          (base32
            "0ggn7l3bisjx1ab4jrhija3z3bh6zbafhzjl5cq92n7i2plz8qdm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "unspecified")
    (synopsis
      "Avoid escape nightmares by editing string in separate buffer")
    (description
      "Documentation at https://melpa.org/#/string-edit-at-point")
    (license #f)))

(define-public emacs-string-inflection
  (package
    (name "emacs-string-inflection")
    (version "20220910.1306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akicho8/string-inflection.git")
               (commit
                 "50ad54970b3cc79b6b83979bde9889ad9a9e1a9c")))
        (sha256
          (base32
            "1xjm3m929wigycv8z7859l4pyb363hbqff8si6xig7p5ya4ksal5"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names")
    (description
      "Documentation at https://melpa.org/#/string-inflection")
    (license #f)))

(define-public emacs-string-utils
  (package
    (name "emacs-string-utils")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/string-utils.git")
               (commit
                 "c2232d691617973ecf12a970c6008a161c21da14")))
        (sha256
          (base32
            "1frdspm1qgksa8cpx5gkj50xk9mgz8202pgp11lqir6l3yjcj3wq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-list-utils))
    (home-page
      "http://github.com/rolandwalker/string-utils")
    (synopsis "String-manipulation utilities")
    (description
      "Documentation at https://melpa.org/#/string-utils")
    (license #f)))

(define-public emacs-stripe-buffer
  (package
    (name "emacs-stripe-buffer")
    (version "20141208.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/stripe-buffer.git")
               (commit
                 "c252080f55cb78c951b19ebab9687f6d00237baf")))
        (sha256
          (base32
            "0dxajh72wdcwdb9ydbcm19fmp0p1drmh1niq4r69jnbn8sah0zax"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/sabof/stripe-buffer")
    (synopsis
      "Use a different background for even and odd lines")
    (description
      "Documentation at https://melpa.org/#/stripe-buffer")
    (license #f)))

(define-public emacs-stripes
  (package
    (name "emacs-stripes")
    (version "20230402.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.smrk.net/stripes.el")
               (commit
                 "4683c9020da14bb1c1f74b90d27a4d9fdc7a9147")))
        (sha256
          (base32
            "08gk3z185jhvl8azkn8rccgv72imp14rqw44mlszhrvqjafdd3z0"))))
    (build-system melpa-build-system)
    (home-page "http://git.smrk.net/stripes.el")
    (synopsis
      "highlight alternating lines differently")
    (description
      "Documentation at https://melpa.org/#/stripes")
    (license #f)))

(define-public emacs-stumpwm-mode
  (package
    (name "emacs-stumpwm-mode")
    (version "20171027.214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/stumpwm/stumpwm-contrib.git")
               (commit
                 "4613a956add7a17986a3b26c341229466cd13f1d")))
        (sha256
          (base32
            "1g8h2vd5qsmaiz6ixlx9ykrv6a08izmkf0js18fvljvznpyhsznz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("util/swm-emacs/*.el")))
    (home-page "unspecified")
    (synopsis
      "special lisp mode for evaluating code into running stumpwm")
    (description
      "Documentation at https://melpa.org/#/stumpwm-mode")
    (license #f)))

(define-public emacs-stupid-indent-mode
  (package
    (name "emacs-stupid-indent-mode")
    (version "20170525.1117")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gist.github.com/5487564.git")
               (commit
                 "3295e7de5e2cfddc3bf0e462e852bf58972f5d70")))
        (sha256
          (base32
            "00js2jkzvmvh1gbraijknv48y86pqyk9zv264a5n3l4sw5q6kcvk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Plain stupid indentation minor mode")
    (description
      "Documentation at https://melpa.org/#/stupid-indent-mode")
    (license #f)))

(define-public emacs-stylefmt
  (package
    (name "emacs-stylefmt")
    (version "20161025.824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KeenS/stylefmt.el.git")
               (commit
                 "7a38f26bf8ff947215f34f0a064c7ca80575ccbc")))
        (sha256
          (base32
            "0cx9llbmfjhaxb60mj483ihl78xb30ldvhd1hdldmc9d473xbvmz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/KeenS/stylefmt.el")
    (synopsis "Stylefmt interface")
    (description
      "Documentation at https://melpa.org/#/stylefmt")
    (license #f)))

(define-public emacs-stylus-mode
  (package
    (name "emacs-stylus-mode")
    (version "20211019.2113")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit
                 "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32
            "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("stylus-mode.el")))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "Major mode for editing .styl files")
    (description
      "Documentation at https://melpa.org/#/stylus-mode")
    (license #f)))

(define-public emacs-su
  (package
    (name "emacs-su")
    (version "20210721.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/PythonNut/su.el.git")
               (commit
                 "1ecf7a7bbf9d88708eb2215e940753f8d6bccc92")))
        (sha256
          (base32
            "1994ypxz5zgrpdd5v61znf41c0dn4favab560wkgfnhhzrc1jgkf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/PythonNut/su.el")
    (synopsis
      "Automatically read and write files using su or sudo")
    (description
      "Documentation at https://melpa.org/#/su")
    (license #f)))

(define-public emacs-subatomic-theme
  (package
    (name "emacs-subatomic-theme")
    (version "20220128.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cryon/subatomic-theme.git")
               (commit
                 "9d0ac6aa5272d0285965a48505eb35658c5472b0")))
        (sha256
          (base32
            "0fs1y53b025fwd690dl5iipsh3nz5g0jvj8ny1az614697yx90xw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cryon/subatomic")
    (synopsis "Low contrast bluish color theme")
    (description
      "Documentation at https://melpa.org/#/subatomic-theme")
    (license #f)))

(define-public emacs-subatomic256-theme
  (package
    (name "emacs-subatomic256-theme")
    (version "20130621.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d11wtq/subatomic256.git")
               (commit
                 "326177d6f99cd2b1d30df695e67ee3bc441cd96f")))
        (sha256
          (base32
            "1w7mimyqc25phlww20l49wlafnxp6c7dwibvphg3vwl61g0llpq8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/cryon/subatomic256")
    (synopsis
      "Fork of subatomic-theme for terminals.")
    (description
      "Documentation at https://melpa.org/#/subatomic256-theme")
    (license #f)))

(define-public emacs-subemacs
  (package
    (name "emacs-subemacs")
    (version "20170401.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kbauer/subemacs.git")
               (commit
                 "18d53939fec8968c08dfc5aff7240ca07efb1aac")))
        (sha256
          (base32
            "1k2lg7cxr98rq77sk0ypzlr3cyl20ld20jz8y21fdaa6ci8kdvdb"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "*experimental*"))))
    (home-page "https://github.com/kbauer/subemacs")
    (synopsis
      "Evaluating expressions in a fresh Emacs subprocess")
    (description
      "Documentation at https://melpa.org/#/subemacs")
    (license #f)))

(define-public emacs-sublime-themes
  (package
    (name "emacs-sublime-themes")
    (version "20170606.1844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/owainlewis/emacs-color-themes.git")
               (commit
                 "60ee40af82eb55b79d5ed4026f1911326311603f")))
        (sha256
          (base32
            "17fcqvavgyl9cmv1hwcid2bw513vhawlsmac1w2adiz567594i6h"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("themes/*.el")))
    (home-page "unspecified")
    (synopsis
      "A collection of themes based on Sublime Text")
    (description
      "Documentation at https://melpa.org/#/sublime-themes")
    (license #f)))

(define-public emacs-sublimity
  (package
    (name "emacs-sublimity")
    (version "20200905.1730")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/sublimity.git")
               (commit
                 "8e2ffc4d62194106130014531e7b54fc9b4b9e6c")))
        (sha256
          (base32
            "0lx0kyzsjn9dhahyi3smcg6hykralrn09mnnn8x74mbpdv4alwrv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zk-phi/sublimity")
    (synopsis
      "smooth-scrolling, minimap and distraction-free mode")
    (description
      "Documentation at https://melpa.org/#/sublimity")
    (license #f)))

(define-public emacs-subsonic
  (package
    (name "emacs-subsonic")
    (version "20220826.748")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/subsonic-"
               version
               ".el"))
        (sha256
          (base32
            "0c8pb6ss5cdh5lrv7hhv9c9zi1dkg3f3parrk9rzd1hz66kib5vw"))))
    (build-system melpa-build-system)
    (home-page "https://git.sr.ht/~amk/subsonic.el")
    (synopsis
      "Browse and play music from subsonic servers with mpv")
    (description
      "Documentation at https://melpa.org/#/subsonic")
    (license #f)))

(define-public emacs-sudo-edit
  (package
    (name "emacs-sudo-edit")
    (version "20220801.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nflath/sudo-edit.git")
               (commit
                 "74eb1e6986461baed9a9269566ff838530b4379b")))
        (sha256
          (base32
            "11wbmprz4c1rp66v19qk9yavzbcbvhvv684b31zpgfcpy7hx45w5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nflath/sudo-edit")
    (synopsis "Open files as another user")
    (description
      "Documentation at https://melpa.org/#/sudo-edit")
    (license #f)))

(define-public emacs-sudo-ext
  (package
    (name "emacs-sudo-ext")
    (version "20170126.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/sudo-ext.git")
               (commit
                 "9d4580f304121ce7b8104bd4bd3b64e4dfa3c9b3")))
        (sha256
          (base32
            "1m9srlxavqg6yxmz6rz61saz1lj5hh029314dic8kh6g3bqdnh2w"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/sudo-ext.el")
    (synopsis "sudo support")
    (description
      "Documentation at https://melpa.org/#/sudo-ext")
    (license #f)))

(define-public emacs-sudo-utils
  (package
    (name "emacs-sudo-utils")
    (version "20210119.1930")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alpha-catharsis/sudo-utils.git")
               (commit
                 "089f7833fa256f293284a6286bf9cb2b78eff40d")))
        (sha256
          (base32
            "03kks8sqw1j8ywzk3bvcb8i6v3px5zr05c4pnrwmls724m79sagd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alpha-catharsis/sudo-utils")
    (synopsis "Sudo utilities")
    (description
      "Documentation at https://melpa.org/#/sudo-utils")
    (license #f)))

(define-public emacs-sudoku
  (package
    (name "emacs-sudoku")
    (version "20191015.1315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zevlg/sudoku.el.git")
               (commit
                 "b1924fd244a5fa284de9d67b66fbd69164b37318")))
        (sha256
          (base32
            "19i3rrz4qnc9i845j0bbmps69372rry7gadcyj06gvq2hf9dy3nh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Simple sudoku game, can download puzzles")
    (description
      "Documentation at https://melpa.org/#/sudoku")
    (license #f)))

(define-public emacs-suggest
  (package
    (name "emacs-suggest")
    (version "20231003.404")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/suggest.el.git")
               (commit
                 "999ab73a3e546bd8d30f0de2408c511abe43135a")))
        (sha256
          (base32
            "0zxgcvz0p59m2hpw7imwnk36392g7vwgfabfbfvz32y6w5zavw4s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-loop
            emacs-dash
            emacs-s
            emacs-f
            emacs-spinner))
    (home-page
      "https://github.com/Wilfred/suggest.el")
    (synopsis
      "suggest elisp functions that give the output requested")
    (description
      "Documentation at https://melpa.org/#/suggest")
    (license #f)))

(define-public emacs-suggestion-box
  (package
    (name "emacs-suggestion-box")
    (version "20170830.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/suggestion-box-el.git")
               (commit
                 "50af0776c8caf3c79c4d37fd51cbf304ea34b68e")))
        (sha256
          (base32
            "01lx20kzay5504xcq6m6yhvayyd7wpzaa1r6i67xqjnr25lqyajw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page "unspecified")
    (synopsis "show tooltip on the cursor")
    (description
      "Documentation at https://melpa.org/#/suggestion-box")
    (license #f)))

(define-public emacs-sumibi
  (package
    (name "emacs-sumibi")
    (version "20231019.1246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiyoka/Sumibi.git")
               (commit
                 "d6bbc65b71f0c59a471fffe13797d1ab6cac80f8")))
        (sha256
          (base32
            "1fpjm1r1k4idgn6k34v5x4mprh4maa842s19p9b29mnfkslz75kn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup
            emacs-unicode-escape
            emacs-deferred))
    (home-page "https://github.com/kiyoka/Sumibi")
    (synopsis
      "Japanese input method powered by ChatGPT API")
    (description
      "Documentation at https://melpa.org/#/sumibi")
    (license #f)))

(define-public emacs-sunburn-theme
  (package
    (name "emacs-sunburn-theme")
    (version "20201216.1539")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mvarela/Sunburn-Theme.git")
               (commit
                 "6b5c14c76dcdfdb099102ef7a388b2f0c6f1951d")))
        (sha256
          (base32
            "0rnr2lwq5aw19c94h169i9d9rmd8wf387k7wjnx7r4llh990ajl8"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mvarela/Sunburn-Theme")
    (synopsis "A low contrast color theme")
    (description
      "Documentation at https://melpa.org/#/sunburn-theme")
    (license #f)))

(define-public emacs-sunny-day-theme
  (package
    (name "emacs-sunny-day-theme")
    (version "20140413.2125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/sunny-day-theme.git")
               (commit
                 "420e0a6eb33fcc9b75c2c9e88ab60a975d782a00")))
        (sha256
          (base32
            "0mhyhkjjwszwl5wzkys9pgvgx9sps9r46k1s1hpzzf4s3vi015mc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/mswift42/sunny-day-theme")
    (synopsis
      "Emacs24 theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/sunny-day-theme")
    (license #f)))

(define-public emacs-sunshine
  (package
    (name "emacs-sunshine")
    (version "20200306.1711")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronbieber/sunshine.el.git")
               (commit
                 "88256223539edcfe57017778a997a474c9c022f6")))
        (sha256
          (base32
            "01kgf0w9lqprkgi0ag5zmgd9s07yj51vdfj7jbz8sws60996x8xx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronbieber/sunshine.el")
    (synopsis
      "Provide weather and forecast information.")
    (description
      "Documentation at https://melpa.org/#/sunshine")
    (license #f)))

(define-public emacs-suomalainen-kalenteri
  (package
    (name "emacs-suomalainen-kalenteri")
    (version "20230102.904")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tlikonen/suomalainen-kalenteri.git")
               (commit
                 "95d8b7f9b404c749831d7b4e0e396c76bd822015")))
        (sha256
          (base32
            "107fzsz7c1cl92ryl6dg198bi5jpkl99rlgw544my2yw728bwnfk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tlikonen/suomalainen-kalenteri")
    (synopsis
      "Finnish national and Christian holidays for calendar")
    (description
      "Documentation at https://melpa.org/#/suomalainen-kalenteri")
    (license #f)))

(define-public emacs-super-save
  (package
    (name "emacs-super-save")
    (version "20220531.1745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/super-save.git")
               (commit
                 "6f6512bc44b09f7187e58772892fa330f4518c12")))
        (sha256
          (base32
            "1nbkx8hphszwn42g75f92n22zkp8kjl3pr0rbfpwdzbsla5lm2dz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bbatsov/super-save")
    (synopsis
      "Auto-save buffers, based on your activity.")
    (description
      "Documentation at https://melpa.org/#/super-save")
    (license #f)))

(define-public emacs-supergenpass
  (package
    (name "emacs-supergenpass")
    (version "20130329.548")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ober/sgpass.git")
               (commit
                 "549072ef7b5b82913cadd4758e8a0a9926f0a04a")))
        (sha256
          (base32
            "0m02snzka243adhwwgriml133n4312lhdia3wdqjcq8y2mlp3331"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "SuperGenPass for Emacs")
    (description
      "Documentation at https://melpa.org/#/supergenpass")
    (license #f)))

(define-public emacs-surround
  (package
    (name "emacs-surround")
    (version "20231022.1838")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkleehammer/surround.git")
               (commit
                 "b75abfaf3e157d232c10e09cd6316a0ad92d2468")))
        (sha256
          (base32
            "0xbprgglbjznrx43n1bqdsyfgnsv3r1fm7a2dvaga07kyhwnzy0a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkleehammer/surround")
    (synopsis
      "Easily add/delete/change parens, quotes, and more")
    (description
      "Documentation at https://melpa.org/#/surround")
    (license #f)))

(define-public emacs-suscolors-theme
  (package
    (name "emacs-suscolors-theme")
    (version "20190713.1009")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TheSuspiciousWombat/SusColors-emacs.git")
               (commit
                 "b4a979ee23e26e255b9a63525b0a28e810fab9ae")))
        (sha256
          (base32
            "0ddbksza42kywn7j78kidg6f1la9qajk3g6baf4758dibclkr5qd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TheSuspiciousWombat/SusColors-emacs")
    (synopsis "Colorful theme, inspired by Gruvbox.")
    (description
      "Documentation at https://melpa.org/#/suscolors-theme")
    (license #f)))

(define-public emacs-sv-kalender-namnsdagar
  (package
    (name "emacs-sv-kalender-namnsdagar")
    (version "20190421.1521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matsl/sv-kalender-namnsdagar.git")
               (commit
                 "fff970f49c77abfc69e37817f25a939818420971")))
        (sha256
          (base32
            "0c6xjw1wh94llwh8qkf3bfzx05ksk0lsdrqdfqn3qkjnf3bkbbh2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/matsl/sv-kalender-namnsdagar")
    (synopsis "Swedish celebrated name of the day")
    (description
      "Documentation at https://melpa.org/#/sv-kalender-namnsdagar")
    (license #f)))

(define-public emacs-svelte-mode
  (package
    (name "emacs-svelte-mode")
    (version "20211016.652")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leafOfTree/svelte-mode.git")
               (commit
                 "6a1d4274af7f4c0f271f77bd96678c3dd1fa68e1")))
        (sha256
          (base32
            "058mxzcrxqzsax21bs50vysr4ia3jcig83xbns0vhziqpj220yl1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/leafOfTree/svelte-mode")
    (synopsis "Emacs major mode for Svelte")
    (description
      "Documentation at https://melpa.org/#/svelte-mode")
    (license #f)))

(define-public emacs-svg-mode-line-themes
  (package
    (name "emacs-svg-mode-line-themes")
    (version "20150425.2006")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sabof/svg-mode-line-themes.git")
               (commit
                 "80a0e01839cafbd66899202e7764c33231974259")))
        (sha256
          (base32
            "14h40s0arc2i898r9yysn256z6l8jkrnmqvrdg7p7658c0klz5ic"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xmlgen))
    (home-page
      "https://github.com/sabof/svg-mode-line-themes")
    (synopsis "SVG-based themes for mode-line")
    (description
      "Documentation at https://melpa.org/#/svg-mode-line-themes")
    (license #f)))

(define-public emacs-svg-tag-mode
  (package
    (name "emacs-svg-tag-mode")
    (version "20230824.943")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rougier/svg-tag-mode.git")
               (commit
                 "c914980f09a9c7e2ba4faf64874ef17505bdc861")))
        (sha256
          (base32
            "06jvq2ry71zk63kcncibs8ajzq32p9jn9rw29wdgyqgkww43b5rd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-svg-lib))
    (home-page
      "https://github.com/rougier/svg-tag-mode")
    (synopsis "Replace keywords with SVG tags")
    (description
      "Documentation at https://melpa.org/#/svg-tag-mode")
    (license #f)))

(define-public emacs-svgo
  (package
    (name "emacs-svgo")
    (version "20220525.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hupf/svgo.el.git")
               (commit
                 "40ddd6f47966561344bec8f46235e40dad99115f")))
        (sha256
          (base32
            "1h06dimzii1acnf42jg0irwr5sjlr9br9dkrndx9wl2wwhjnwzdz"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/hupf/svgo.el/")
    (synopsis "SVG optimization with SVGO")
    (description
      "Documentation at https://melpa.org/#/svgo")
    (license #f)))

(define-public emacs-svnwrapper
  (package
    (name "emacs-svnwrapper")
    (version "20180414.1843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/svnwrapper.git")
               (commit
                 "de5069f5784e5d9e87a0af0159ba5f28a3716583")))
        (sha256
          (base32
            "08sg55cmjbk06622mzhv74f5b5dvbay7gb729zsckczxwrp1cayp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-e2ansi))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/Lindydancer/svnwrapper")
    (synopsis
      "Highlighting and paging for shell command `svn'")
    (description
      "Documentation at https://melpa.org/#/svnwrapper")
    (license #f)))

(define-public emacs-swagg
  (package
    (name "emacs-swagg")
    (version "20230827.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/swagg.el.git")
               (commit
                 "b33f5843379a5dba2263514732eda868573f42eb")))
        (sha256
          (base32
            "1r9mi1gkykyxvff44pg5nysmyz81cxdkrh386ga2xxakc2qxm061"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-compat
            emacs-request
            emacs-dash
            emacs-yaml
            emacs-s))
    (home-page "https://github.com/isamert/swagg.el")
    (synopsis "Swagger UI")
    (description
      "Documentation at https://melpa.org/#/swagg")
    (license #f)))

(define-public emacs-swagger-to-org
  (package
    (name "emacs-swagger-to-org")
    (version "20160611.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahungry/swagger-to-org.git")
               (commit
                 "181357c71ea24bede263f5706d8781ad65e16877")))
        (sha256
          (base32
            "0x1mxxvlhhs34j869cy68gy5pgmvpfliyl9vlrlwm3z8apbip9gp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ahungry/swagger-to-org")
    (synopsis
      "Convert a swagger.json file into an org-mode file")
    (description
      "Documentation at https://melpa.org/#/swagger-to-org")
    (license #f)))

(define-public emacs-swap-buffers
  (package
    (name "emacs-swap-buffers")
    (version "20150506.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ekazakov/swap-buffers.git")
               (commit
                 "46ab31359b70d935add6c6e9533443116dc51103")))
        (sha256
          (base32
            "1kn70570r6x0h1xfs1vr8as27pjfanyhml140yms60gdjb4ssf9r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ekazakov/swap-buffers")
    (synopsis
      "The quickest way to swap buffers between windows. Based on switch-window package.")
    (description
      "Documentation at https://melpa.org/#/swap-buffers")
    (license #f)))

(define-public emacs-swap-regions
  (package
    (name "emacs-swap-regions")
    (version "20180915.1346")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/swap-regions.el.git")
               (commit
                 "f4fd9880cf690e003fcde88dcf2b46adbbbb03cd")))
        (sha256
          (base32
            "1d45yanqk4w0idqwkrwig1dl22wr820k11r3gynv7an643k4wngp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/swap-regions.el")
    (synopsis "Swap text in two regions")
    (description
      "Documentation at https://melpa.org/#/swap-regions")
    (license #f)))

(define-public emacs-sway
  (package
    (name "emacs-sway")
    (version "20230906.712")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thblt/sway.el.git")
               (commit
                 "425005713af1e9269f1d5b5221fb4ea3046f52e4")))
        (sha256
          (base32
            "1w29dkl7s835zgwnc4jx1cp84s6mmwbvlil8z2c31psy0rlajc6i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/thblt/sway.el")
    (synopsis
      "Communication with the Sway window manager")
    (description
      "Documentation at https://melpa.org/#/sway")
    (license #f)))

(define-public emacs-sway-lang-mode
  (package
    (name "emacs-sway-lang-mode")
    (version "20230320.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hhamud/sway-mode.git")
               (commit
                 "fe56f112cac1b7f9f0269e45fc47efe821b37429")))
        (sha256
          (base32
            "1k79fc32imk4pxmjygdqbibvc1r0l8gf81fbvcsyn77xxf5cr0wi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lsp-mode emacs-rust-mode))
    (home-page "https://github.com/hhamud/sway-mode")
    (synopsis "Major mode for sway")
    (description
      "Documentation at https://melpa.org/#/sway-lang-mode")
    (license #f)))

(define-public emacs-sweet-theme
  (package
    (name "emacs-sweet-theme")
    (version "20200708.1202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/2bruh4me/sweet-theme.git")
               (commit
                 "78f741806ecebe01224bf54d09ad80e306652508")))
        (sha256
          (base32
            "1yqz15l6xa1vkll4gaa3jpr30vq3yjgbgadjilsmz5p8mblawhyx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/2bruh4me/sweet-theme")
    (synopsis "Sweet-looking theme")
    (description
      "Documentation at https://melpa.org/#/sweet-theme")
    (license #f)))

(define-public emacs-sweetgreen
  (package
    (name "emacs-sweetgreen")
    (version "20180605.335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/CestDiego/sweetgreen.el.git")
               (commit
                 "e933fe466b5ef0e976967e203f88bd7a012469d1")))
        (sha256
          (base32
            "1pd13v3xma78xa0smxql4i2iax72kxqh7iwp3k16jwzrklmsdiyr"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-helm emacs-request))
    (home-page
      "https://www.github.com/CestDiego/sweetgreen.el")
    (synopsis "Order Salads from sweetgreen.com")
    (description
      "Documentation at https://melpa.org/#/sweetgreen")
    (license #f)))

(define-public emacs-swift-helpful
  (package
    (name "emacs-swift-helpful")
    (version "20220707.846")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danielmartin/swift-helpful.git")
               (commit
                 "b46c580e4b8f55761431ec677866de3fc66592e9")))
        (sha256
          (base32
            "0x7ys9bdkvpn09zqrhw60wjcv1l50kc67lm5ginkc02zpiivzcjv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-lsp-mode emacs-swift-mode))
    (arguments
      '(#:files
        ("*.el"
         "swift-info/*.info"
         ("images" "swift-info/images/*.png"))))
    (home-page
      "https://github.com/danielmartin/swift-helpful")
    (synopsis
      "Show documentation for Swift programs.")
    (description
      "Documentation at https://melpa.org/#/swift-helpful")
    (license #f)))

(define-public emacs-swift-mode
  (package
    (name "emacs-swift-mode")
    (version "20230930.903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/swift-emacs/swift-mode.git")
               (commit
                 "e58417ec871d260fe47183ffe4b7e47ac09bc682")))
        (sha256
          (base32
            "17gcg55jajq3am3nrzlsibkdwskq1rbg3lhgxynkpky0ihci35nr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/swift-emacs/swift-mode")
    (synopsis
      "Major-mode for Apple's Swift programming language")
    (description
      "Documentation at https://melpa.org/#/swift-mode")
    (license #f)))

(define-public emacs-swift3-mode
  (package
    (name "emacs-swift3-mode")
    (version "20160918.1250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taku0/swift3-mode.git")
               (commit
                 "4e51265c6905e17d8910e35b0b37cf51e20ecdfe")))
        (sha256
          (base32
            "0wqwjzr3z9gzsjiyyr0ds4c5zvgifb9hbjadb7vkbbpzdy6qd9s1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taku0/swift3-mode")
    (synopsis
      "Major-mode for Apple's Swift programming language.")
    (description
      "Documentation at https://melpa.org/#/swift3-mode")
    (license #f)))

(define-public emacs-swiper
  (package
    (name "emacs-swiper")
    (version "20231025.2311")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper.git")
               (commit
                 "8c30f4cab5948aa8d942a3b2bbf5fb6a94d9441d")))
        (sha256
          (base32
            "1iqj27pc2iivmwfh329v0d9g0z1y0whlnamrl7g2bi374h41m368"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ivy))
    (arguments '(#:files ("swiper.el")))
    (home-page "https://github.com/abo-abo/swiper")
    (synopsis "Isearch with an overview.  Oh, man!")
    (description
      "Documentation at https://melpa.org/#/swiper")
    (license #f)))

(define-public emacs-swiper-helm
  (package
    (name "emacs-swiper-helm")
    (version "20180131.1744")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/swiper-helm.git")
               (commit
                 "93fb6db87bc6a5967898b5fd3286954cc72a0008")))
        (sha256
          (base32
            "05n4h20lfyg1kis5rig72ajbz680ml5fmsy6l1w4g9jx2xybpll2"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper emacs-helm))
    (home-page
      "https://github.com/abo-abo/swiper-helm")
    (synopsis "Helm version of Swiper.")
    (description
      "Documentation at https://melpa.org/#/swiper-helm")
    (license #f)))

(define-public emacs-swiss-holidays
  (package
    (name "emacs-swiss-holidays")
    (version "20200526.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/egli/swiss-holidays.git")
               (commit
                 "0995c9685033a09466f5b2dceb7316362bde997a")))
        (sha256
          (base32
            "098s55jsmr6na5qf8s5a3iws6zb47rbq7mk4garbxar9vyfi3bw7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/egli/swiss-holidays")
    (synopsis "Swiss holidays for the calendar")
    (description
      "Documentation at https://melpa.org/#/swiss-holidays")
    (license #f)))

(define-public emacs-switch-buffer-functions
  (package
    (name "emacs-switch-buffer-functions")
    (version "20200127.409")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/switch-buffer-functions-el.git")
               (commit
                 "95a846baa93bac4c3b3c028b9d53507f1042b23a")))
        (sha256
          (base32
            "0ykdggzgdlb3dcg1qm388290h612kf5l224kwiv5jvvp8wqzb47l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/switch-buffer-functions-el")
    (synopsis "Hook run when current buffer changed")
    (description
      "Documentation at https://melpa.org/#/switch-buffer-functions")
    (license #f)))

(define-public emacs-switch-window
  (package
    (name "emacs-switch-window")
    (version "20220812.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dimitri/switch-window.git")
               (commit
                 "71ef2f54c97f3fd2e7ff7964d82e6562eb6282f7")))
        (sha256
          (base32
            "186100j93in5dm1h3xl1sg892yfz8nvssap2hsy5kh6aw1am412y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dimitri/switch-window")
    (synopsis "A *visual* way to switch window")
    (description
      "Documentation at https://melpa.org/#/switch-window")
    (license #f)))

(define-public emacs-swoop
  (package
    (name "emacs-swoop")
    (version "20200618.905")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/swoop.git")
               (commit
                 "0c737a961970a2e61735545320367bafaa8dfc49")))
        (sha256
          (base32
            "1kjzc7543b7l0rcq9iiwf8sq39akzw5spsv51yl4wmwgnmyj2n1c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-pcre2el emacs-async))
    (home-page
      "https://github.com/ShingoFukuyama/emacs-swoop")
    (synopsis "Peculiar buffer navigation")
    (description
      "Documentation at https://melpa.org/#/swoop")
    (license #f)))

(define-public emacs-sws-mode
  (package
    (name "emacs-sws-mode")
    (version "20210908.2121")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/brianc/jade-mode.git")
               (commit
                 "1ad7c51f3c6a6ae64550d9510c5e4e8470014375")))
        (sha256
          (base32
            "1n26jlvf0z7h5yq3w2pzznj43g5xknq1icg68pc0ysqdfm4nq51m"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("sws-mode.el")))
    (home-page "https://github.com/brianc/jade-mode")
    (synopsis "(S)ignificant (W)hite(S)pace mode")
    (description
      "Documentation at https://melpa.org/#/sws-mode")
    (license #f)))

(define-public emacs-sx
  (package
    (name "emacs-sx")
    (version "20220804.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vermiculus/sx.el.git")
               (commit
                 "c58405f9ff27b9740997ea837a1f6fd173d1edc5")))
        (sha256
          (base32
            "1rybhwzvbd6y8p4gshiaw8i5v8ankav4wc4v1viag2j7ay0ygjxz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-markdown-mode))
    (home-page
      "https://github.com/vermiculus/sx.el/")
    (synopsis
      "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes")
    (description
      "Documentation at https://melpa.org/#/sx")
    (license #f)))

(define-public emacs-sxiv
  (package
    (name "emacs-sxiv")
    (version "20220530.14")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/contrapunctus/sxiv.el.git")
               (commit
                 "47f5b2fbb94c569dc5e71cbe4de9c6eabbbc69e8")))
        (sha256
          (base32
            "0j0dqab5br92qz9wz3ssjps84dr0q28x11065cx90b6gis9wvv5j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://tildegit.org/contrapunctus/sxiv")
    (synopsis
      "Run the Simple X Image Viewer, with Dired integration")
    (description
      "Documentation at https://melpa.org/#/sxiv")
    (license #f)))

(define-public emacs-symbol-navigation-hydra
  (package
    (name "emacs-symbol-navigation-hydra")
    (version "20211010.2353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bgwines/symbol-navigation-hydra.git")
               (commit
                 "5675976cad4cbeee30f43e6c4b28c2e5904575a5")))
        (sha256
          (base32
            "06cl7njizn68vml21lsl3p66wpcdcw6ah49jqjvwzjkzivrds3m5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-highlight-symbol
            emacs-hydra
            emacs-multiple-cursors))
    (home-page
      "https://github.com/bgwines/symbol-navigation-hydra")
    (synopsis "A symbol-aware, range-aware hydra")
    (description
      "Documentation at https://melpa.org/#/symbol-navigation-hydra")
    (license #f)))

(define-public emacs-symbol-overlay
  (package
    (name "emacs-symbol-overlay")
    (version "20230729.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wolray/symbol-overlay.git")
               (commit
                 "a783d7b5d8dee5ba9f5e7c00a834fbd6d645081b")))
        (sha256
          (base32
            "1ah4y3j0kdzf3ygrba5bjs04fpbpc9hwrzb8bb8ql0r42vdhbng5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wolray/symbol-overlay/")
    (synopsis
      "Highlight symbols with keymap-enabled overlays")
    (description
      "Documentation at https://melpa.org/#/symbol-overlay")
    (license #f)))

(define-public emacs-symbolist
  (package
    (name "emacs-symbolist")
    (version "20211107.1615")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-symbolist.git")
               (commit
                 "92b712734941a45da7d47fd61b95e4013ff53481")))
        (sha256
          (base32
            "0033qxn1zx90lws6a8ibg7xx5xxpiwzr08fj86k5w84nj6nvwras"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-symbolist")
    (synopsis
      "List and interactively unbind Emacs Lisp symbols")
    (description
      "Documentation at https://melpa.org/#/symbolist")
    (license #f)))

(define-public emacs-symbols-outline
  (package
    (name "emacs-symbols-outline")
    (version "20231028.1433")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/liushihao456/symbols-outline.el.git")
               (commit
                 "56b7e341e61f06cb379e59e917758bcd1d508592")))
        (sha256
          (base32
            "1zxqsn7jmq74czqqb1i4shxxsb21kzkifxih10mj84a9jinivjk8"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/liushihao456/symbols-outline.el")
    (synopsis
      "Display symbols (functions, variables, etc) in outline view")
    (description
      "Documentation at https://melpa.org/#/symbols-outline")
    (license #f)))

(define-public emacs-symbolword-mode
  (package
    (name "emacs-symbolword-mode")
    (version "20180401.1427")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ncaq/symbolword-mode.git")
               (commit
                 "c254ec56e83a5d9de04df0856248723cf6d4be50")))
        (sha256
          (base32
            "1vlfzg89ygynw0dxxbsd40wky2k14vapdxb50kdgk2h4yszppzas"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/ncaq/symbolword-mode")
    (synopsis "modify word split")
    (description
      "Documentation at https://melpa.org/#/symbolword-mode")
    (license #f)))

(define-public emacs-symex
  (package
    (name "emacs-symex")
    (version "20230322.2003")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drym-org/symex.el.git")
               (commit
                 "8b5807ec45ecfcd14a3f14b042ea8303a57ac8bc")))
        (sha256
          (base32
            "153b1kz2wsx52l8vij0nbaz1b0fqd277xmban2vg9857pj62d9hq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tsc
            emacs-tree-sitter
            emacs-lispy
            emacs-paredit
            emacs-evil-cleverparens
            emacs-evil
            emacs-evil-surround
            emacs-hydra))
    (home-page
      "https://github.com/countvajhula/symex.el")
    (synopsis
      "An evil way to edit Lisp symbolic expressions as trees")
    (description
      "Documentation at https://melpa.org/#/symex")
    (license #f)))

(define-public emacs-symon
  (package
    (name "emacs-symon")
    (version "20170224.833")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/symon.git")
               (commit
                 "8dd8b6df49b03cd7d31b85aedbe9dd08fb922335")))
        (sha256
          (base32
            "1bbblz9qzc84h08010y48mjyciavl6lnxk2m19mwbc6b5y58vwpg"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("symon.el")))
    (home-page "http://hins11.yu-yake.com/")
    (synopsis "tiny graphical system monitor")
    (description
      "Documentation at https://melpa.org/#/symon")
    (license #f)))

(define-public emacs-symon-lingr
  (package
    (name "emacs-symon-lingr")
    (version "20150719.1342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/symon-lingr.git")
               (commit
                 "056d1a473e36992ff5881e5ce6fdc331cead975f")))
        (sha256
          (base32
            "030bglxnvrkf1f9grbhd8n11j4c6sxpabpjdr1ryx522v01fvx8j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-symon))
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "A notification-based Lingr client powered by symon.el")
    (description
      "Documentation at https://melpa.org/#/symon-lingr")
    (license #f)))

(define-public emacs-sync-recentf
  (package
    (name "emacs-sync-recentf")
    (version "20160326.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ffevotte/sync-recentf.git")
               (commit
                 "0052561d5c5b5c2684faedc3eead776aec06c3ed")))
        (sha256
          (base32
            "006siydqxqds0qqds0zxn821dk4pw14wyymyp03n594wgqzw7m8q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ffevotte/sync-recentf")
    (synopsis
      "Synchronize the recent files list between Emacs instances")
    (description
      "Documentation at https://melpa.org/#/sync-recentf")
    (license #f)))

(define-public emacs-synonymous
  (package
    (name "emacs-synonymous")
    (version "20180325.1817")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/toroidal-code/synonymous.el.git")
               (commit
                 "2cb9a674d84fddf3f1b00c9d6b13a853576acb87")))
        (sha256
          (base32
            "1l0skavpj96x5gdrx9l8dqj4mrb7zcilv3jj335ak11p2i4ckcq2"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "http://github.com/toroidal-code/synonymous.el")
    (synopsis "A thesaurus at your fingertips")
    (description
      "Documentation at https://melpa.org/#/synonymous")
    (license #f)))

(define-public emacs-synosaurus
  (package
    (name "emacs-synosaurus")
    (version "20191125.552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hpdeifel/synosaurus.git")
               (commit
                 "14d34fc92a77c3a916b4d58400424c44ae99cd81")))
        (sha256
          (base32
            "14dd6p89pmpf1w3nx4f9mzm4sn2b64nicws436ck7pmp223pwciv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "An extensible thesaurus supporting lookup and substitution.")
    (description
      "Documentation at https://melpa.org/#/synosaurus")
    (license #f)))

(define-public emacs-synquid
  (package
    (name "emacs-synquid")
    (version "20160930.1550")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cpitclaudel/synquid-emacs.git")
               (commit
                 "28701ce1a15437202f53ab93a14bcba1de83fd2c")))
        (sha256
          (base32
            "0c0pi5w8xvir9gnbjp80g1c4i3rhid65zwh4i4vkyivkh2s29f6i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page
      "https://github.com/cpitclaudel/synquid-mode")
    (synopsis "Major mode for editing Synquid files")
    (description
      "Documentation at https://melpa.org/#/synquid")
    (license #f)))

(define-public emacs-syntactic-close
  (package
    (name "emacs-syntactic-close")
    (version "20230423.707")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-berlin/syntactic-close.git")
               (commit
                 "c184ff7a3cbcd28439aba7c3531ffebf0cd30b3a")))
        (sha256
          (base32
            "1i9dv3c0b68607ldr735ky41gxg8vbf7z7nkplkbx4sgkx3r92c9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-berlin/syntactic-close")
    (synopsis "Insert closing delimiter")
    (description
      "Documentation at https://melpa.org/#/syntactic-close")
    (license #f)))

(define-public emacs-syntactic-sugar
  (package
    (name "emacs-syntactic-sugar")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/syntactic-sugar.git")
               (commit
                 "7ddc4502c831abe1c4ad4c7d1ca628a2c9e13968")))
        (sha256
          (base32
            "0zi11540wwcl93xcgd2yf6b72zv01zkaqbf1jfbksg82k9038m2d"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/syntactic-sugar")
    (synopsis
      "Effect-free forms such as if/then/else")
    (description
      "Documentation at https://melpa.org/#/syntactic-sugar")
    (license #f)))

(define-public emacs-syntax-subword
  (package
    (name "emacs-syntax-subword")
    (version "20160205.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jpkotta/syntax-subword.git")
               (commit
                 "9aa9b3f846bfe2474370642458a693ac4760d9fe")))
        (sha256
          (base32
            "15zvh6dk02rm16zs6c9zvw1w76ycn61g3cpx6jb3456ff9zn6m9m"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "make operations on words more fine-grained")
    (description
      "Documentation at https://melpa.org/#/syntax-subword")
    (license #f)))

(define-public emacs-syntree
  (package
    (name "emacs-syntree")
    (version "20230621.2048")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/enricoflor/syntree.git")
               (commit
                 "7bbbd4904b0ffe452ec39630042dbc85a7a0b233")))
        (sha256
          (base32
            "1qdbi0zgz7i1m4h7za2pay5gc6yzf4z1r6yyfdqbqnckcl61pr3a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/enricoflor/syntree")
    (synopsis "Draw plain text constituency trees")
    (description
      "Documentation at https://melpa.org/#/syntree")
    (license #f)))

(define-public emacs-sysctl
  (package
    (name "emacs-sysctl")
    (version "20200615.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dantecatalfamo/sysctl.el.git")
               (commit
                 "d8c2e18de1d7a3b2999a4d5054c0bbf30cb10fed")))
        (sha256
          (base32
            "0jvw5r4z9lq36yv58slpc8fw9ljzrppdsg9j7cs34m0wnhyid4a4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dantecatalfamo/sysctl.el")
    (synopsis "Manage sysctl though org-mode")
    (description
      "Documentation at https://melpa.org/#/sysctl")
    (license #f)))

(define-public emacs-syslog-mode
  (package
    (name "emacs-syslog-mode")
    (version "20210910.1952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vapniks/syslog-mode.git")
               (commit
                 "072664784dae41a573a9de8d178bf577b7526b82")))
        (sha256
          (base32
            "04ddpn6il6mh1f992x3fxl6yljryghi51q4845lx08cbc74wnfz0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hide-lines emacs-ov emacs-hsluv))
    (home-page
      "https://github.com/vapniks/syslog-mode")
    (synopsis
      "Major-mode for viewing log files & strace output")
    (description
      "Documentation at https://melpa.org/#/syslog-mode")
    (license #f)))

(define-public emacs-system-packages
  (package
    (name "emacs-system-packages")
    (version "20220409.1023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/jabranham/system-packages.git")
               (commit
                 "c087d2c6e598f85fc2760324dce20104ea442fa3")))
        (sha256
          (base32
            "00idwy8jzvkgs8qzafiy6s344rgms452n8mxbjg6yszwp3y3hmq1"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/jabranham/system-packages")
    (synopsis "functions to manage system packages")
    (description
      "Documentation at https://melpa.org/#/system-packages")
    (license #f)))

(define-public emacs-system-specific-settings
  (package
    (name "emacs-system-specific-settings")
    (version "20140818.1457")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/emacs-system-specific-settings.git")
               (commit
                 "0050d85b2175095aa5ecf580a2fe43c069b0eef3")))
        (sha256
          (base32
            "1hixilnnybv2v3p1wpn7a0ybwah17grawszs3jycsjgzahpgckv7"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarwinAwardWinner/emacs-system-specific-settings")
    (synopsis
      "Apply settings only on certain systems")
    (description
      "Documentation at https://melpa.org/#/system-specific-settings")
    (license #f)))

(define-public emacs-systemd
  (package
    (name "emacs-systemd")
    (version "20230201.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/holomorph/systemd-mode.git")
               (commit
                 "8742607120fbc440821acbc351fda1e8e68a8806")))
        (sha256
          (base32
            "1cf63r0f8mg4zl6min48f8wby2k7g4v60lyw6j8gsjz8ppww8gx2"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.txt")))
    (home-page "unspecified")
    (synopsis "Major mode for editing systemd units")
    (description
      "Documentation at https://melpa.org/#/systemd")
    (license #f)))

(define-public emacs-systemtap-mode
  (package
    (name "emacs-systemtap-mode")
    (version "20151122.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruediger/systemtap-mode.git")
               (commit
                 "1a968c2b1f3a054bebf91ac49739d3a81ce050a9")))
        (sha256
          (base32
            "0343ss3y9i40y3i9rr7p7bb4k9dj950zyvdv44q1abw2xrfd2xwd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ruediger/systemtap-mode")
    (synopsis "A mode for SystemTap")
    (description
      "Documentation at https://melpa.org/#/systemtap-mode")
    (license #f)))

(define-public emacs-ta
  (package
    (name "emacs-ta")
    (version "20160619.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/ta.el.git")
               (commit
                 "668ad41e71f374f8c32c8d0532f3d8485b355d35")))
        (sha256
          (base32
            "1lk7hpdp6c74sdwkg2azfvj4qmbl1ghmhms3r0j4296dj8bl5k63"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/kuanyui/ta.el")
    (synopsis
      "A tool to deal with Chinese homophonic characters")
    (description
      "Documentation at https://melpa.org/#/ta")
    (license #f)))

(define-public emacs-tab-bar-buffers
  (package
    (name "emacs-tab-bar-buffers")
    (version "20220722.1937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ajrosen/tab-bar-buffers.git")
               (commit
                 "243a55685a2000a2cbe9d49d04bf9efa8cda210b")))
        (sha256
          (base32
            "1mjz3cz26bfi06iild3rnc35kay9kp0c2b17a2dzsy0hklnm935y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ajrosen/tab-bar-buffers")
    (synopsis "Use tab-bar-mode as a buffer manager")
    (description
      "Documentation at https://melpa.org/#/tab-bar-buffers")
    (license #f)))

(define-public emacs-tab-bar-echo-area
  (package
    (name "emacs-tab-bar-echo-area")
    (version "20221115.1953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/tab-bar-echo-area.git")
               (commit
                 "3ab62ca7db3c1d83f96b7971ea4b3b0101b51ae9")))
        (sha256
          (base32
            "0grapqwfqjbi9yzcirgd8gmkg4zkplagwvdyal4jd4aajnnx6sh8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/tab-bar-echo-area")
    (synopsis
      "Display tab names of the tab bar in the echo area")
    (description
      "Documentation at https://melpa.org/#/tab-bar-echo-area")
    (license #f)))

(define-public emacs-tab-bar-groups
  (package
    (name "emacs-tab-bar-groups")
    (version "20211013.2012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/tab-bar-groups.git")
               (commit
                 "a0389d87d2e793055dd74ae85b4593aa1d2720fd")))
        (sha256
          (base32
            "040nl3yn0vfhk5nbll2jpxz7qcjf8kdlkzqa44lz0gvc6d9414yv"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://github.com/fritzgrabo/tab-bar-groups")
    (synopsis "Tab groups for the tab bar")
    (description
      "Documentation at https://melpa.org/#/tab-bar-groups")
    (license #f)))

(define-public emacs-tab-bar-lost-commands
  (package
    (name "emacs-tab-bar-lost-commands")
    (version "20211013.1945")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fritzgrabo/tab-bar-lost-commands.git")
               (commit
                 "989e03dc3d1057264b21b9a5d241fcba86cd297a")))
        (sha256
          (base32
            "047261v8nvi67h9yils2f1jilmbxc55n31v98qlqxmf56jkzz158"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/fritzgrabo/tab-bar-lost-commands")
    (synopsis "The \"lost commands\" of the tab bar")
    (description
      "Documentation at https://melpa.org/#/tab-bar-lost-commands")
    (license #f)))

(define-public emacs-tab-group
  (package
    (name "emacs-tab-group")
    (version "20140306.1450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarao/tab-group-el.git")
               (commit
                 "5a290ec2608e4100fb188fd60ecb77affcc3465b")))
        (sha256
          (base32
            "0lfvgbgvsm61kv5mcjnhnfjcnr7fy1015y0hndkf9xvdlw4hahr4"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/tarao/tab-group-el")
    (synopsis "Grouped tabs and their tabbar")
    (description
      "Documentation at https://melpa.org/#/tab-group")
    (license #f)))

(define-public emacs-tab-jump-out
  (package
    (name "emacs-tab-jump-out")
    (version "20231023.342")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mkleehammer/tab-jump-out.git")
               (commit
                 "a5192b8eafdc8895d4d1752189a8fc4b3f7b1adb")))
        (sha256
          (base32
            "00v5fh6wp1m166rf03g0k2dlkk8ixg1lbrbxdwcs2pdm7194ap7n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mkleehammer/tab-jump-out")
    (synopsis
      "Use tab to jump out of delimiter pairs")
    (description
      "Documentation at https://melpa.org/#/tab-jump-out")
    (license #f)))

(define-public emacs-tabbar
  (package
    (name "emacs-tabbar")
    (version "20180726.1735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dholm/tabbar.git")
               (commit
                 "82bbda31cbe8ef367dd6501c3aa14b7f2c835910")))
        (sha256
          (base32
            "01sw76wp8bvh21h30pkc3kjr98c8m6qid6misk1y7hkyld0bzxay"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("tabbar.el" "*.png")))
    (home-page "unspecified")
    (synopsis "Display a tab bar in the header line")
    (description
      "Documentation at https://melpa.org/#/tabbar")
    (license #f)))

(define-public emacs-tabbar-ruler
  (package
    (name "emacs-tabbar-ruler")
    (version "20160802.307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/tabbar-ruler.el.git")
               (commit
                 "535568189aa12a3eff7f977d2783e57b6a65ab6a")))
        (sha256
          (base32
            "1csj6qhwihdf4kfahcqhm163isiwac08w4nqid1hnca184bfk6xm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tabbar
            emacs-powerline
            emacs-mode-icons))
    (home-page
      "http://github.com/mlf176f2/tabbar-ruler.el")
    (synopsis
      "Pretty tabbar, autohide, use both tabbar/ruler")
    (description
      "Documentation at https://melpa.org/#/tabbar-ruler")
    (license #f)))

(define-public emacs-tabgo
  (package
    (name "emacs-tabgo")
    (version "20230425.907")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/isamert/tabgo.el.git")
               (commit
                 "b3a8de31751c197f94c266bb76ae65bed2fb7366")))
        (sha256
          (base32
            "16vsfr1jshdglz3y5aq1ma43bsi5nsldnjjfzizrl55a245dmrvf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/isamert/tabgo.el")
    (synopsis "Jump to tabs, avy style")
    (description
      "Documentation at https://melpa.org/#/tabgo")
    (license #f)))

(define-public emacs-tablist
  (package
    (name "emacs-tablist")
    (version "20231019.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/tablist.git")
               (commit
                 "fcd37147121fabdf003a70279cf86fbe08cfac6f")))
        (sha256
          (base32
            "1n1isr98xsc66n8ax0lcld2p80rr3b9s0pnh0jllhvmbkkb88xzi"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Extended tabulated-list-mode")
    (description
      "Documentation at https://melpa.org/#/tablist")
    (license #f)))

(define-public emacs-tabnine
  (package
    (name "emacs-tabnine")
    (version "20231019.632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shuxiao9058/tabnine.git")
               (commit
                 "9d66dd9a3aadd6bfdd3dbbfdc11e6451b15f79e8")))
        (sha256
          (base32
            "1hlfn8khvgfm41nhim4byj7mp1m96jiw0z7v8d9fl2hj5ac5lziw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-editorconfig
            emacs-vterm
            emacs-language-id))
    (home-page
      "https://github.com/shuxiao9058/tabnine/")
    (synopsis
      "An unofficial TabNine package with TabNine Chat supported")
    (description
      "Documentation at https://melpa.org/#/tabnine")
    (license #f)))

(define-public emacs-tabspaces
  (package
    (name "emacs-tabspaces")
    (version "20231108.1340")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mclear-tools/tabspaces.git")
               (commit
                 "3a0546d9e762600006d85a4c9785167d44ffe9a8")))
        (sha256
          (base32
            "1g36scf1620jg02xw2056vyrdx2mwm3qza4h00a1sc19i6qy50xq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mclear-tools/tabspaces")
    (synopsis
      "Leverage tab-bar and project for buffer-isolated workspaces")
    (description
      "Documentation at https://melpa.org/#/tabspaces")
    (license #f)))

(define-public emacs-tabula-rasa
  (package
    (name "emacs-tabula-rasa")
    (version "20141216.547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dppdppd/Tabula-Rasa.git")
               (commit
                 "e85fff9de18dc31bc6a7aca726e34a95cc5459f5")))
        (sha256
          (base32
            "1dbjfq9a7a5s9c18nrp4kcda64jkg5cp8na31kxw0hjcn98dgqa8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/idomagal/Tabula-Rasa/blob/master/tabula-rasa.el")
    (synopsis "Distraction free writing mode")
    (description
      "Documentation at https://melpa.org/#/tabula-rasa")
    (license #f)))

(define-public emacs-tagedit
  (package
    (name "emacs-tagedit")
    (version "20161121.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/tagedit.git")
               (commit
                 "b3a70101a0dcf85498c92b7fcfa7fdbac869746c")))
        (sha256
          (base32
            "0xq9i3axlq9wgsr27nbhi5k9hxr1wahygkb73xkvxlgmvkmikcrw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-dash))
    (arguments '(#:files ("tagedit.el")))
    (home-page "unspecified")
    (synopsis
      "Some paredit-like features for html-mode")
    (description
      "Documentation at https://melpa.org/#/tagedit")
    (license #f)))

(define-public emacs-take-off
  (package
    (name "emacs-take-off")
    (version "20140531.917")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tburette/take-off.git")
               (commit
                 "aa9ea45566fc74febbb6ee9c409ecc4b59246215")))
        (sha256
          (base32
            "13zwlb5805cpv0pbr7fj5b4crlg7lb0ibslvcpszm0cz6rlifcvf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-server))
    (arguments '(#:files ("*.el" "front")))
    (home-page
      "https://github.com/tburette/take-off")
    (synopsis "Emacs remote web access")
    (description
      "Documentation at https://melpa.org/#/take-off")
    (license #f)))

(define-public emacs-talonscript-mode
  (package
    (name "emacs-talonscript-mode")
    (version "20231015.2358")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/talonscript-mode.git")
               (commit
                 "b5e78b7866c9dee5f8bc5ce3924e1916c46e2b9b")))
        (sha256
          (base32
            "0myr0izky5bhb7z8cfi1bmwi2dpkxn70g58b0zrv5ab7k6kkpwfd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcaw/talonscript-mode")
    (synopsis
      "Major mode for Talon Voice's .talon files")
    (description
      "Documentation at https://melpa.org/#/talonscript-mode")
    (license #f)))

(define-public emacs-tango-2-theme
  (package
    (name "emacs-tango-2-theme")
    (version "20120312.2025")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gist.github.com/2024464.git")
               (commit
                 "64e44c98e41ebbe3b827d54280e3b9615787daaa")))
        (sha256
          (base32
            "1lqkazis9pfcfdsb2lar4l1n4pd085v60xmnlkdrdllwamqachkk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Tango 2 color theme for GNU Emacs 24")
    (description
      "Documentation at https://melpa.org/#/tango-2-theme")
    (license #f)))

(define-public emacs-tango-plus-theme
  (package
    (name "emacs-tango-plus-theme")
    (version "20221011.1012")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmalsburg/tango-plus-theme.git")
               (commit
                 "30495d1ab1df6213ecac008c599b91e6f9244c12")))
        (sha256
          (base32
            "1qdz7nf4wqv58ck02ralp7l4an1ashh1bnjgqkp444as3vyli2c4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tmalsburg/tango-plus-theme")
    (synopsis
      "A color theme based on the tango palette")
    (description
      "Documentation at https://melpa.org/#/tango-plus-theme")
    (license #f)))

(define-public emacs-tangonov-theme
  (package
    (name "emacs-tangonov-theme")
    (version "20230425.1456")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/tangonov-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "1zfk7ds70s3rzxqc5763pfwnlklanv79dzfj9x4mjxdl4wgm9snw"))))
    (build-system melpa-build-system)
    (home-page
      "https://sr.ht/~trevdev/tangonov-theme/")
    (synopsis
      "A 256 color dark theme featuring bright pastels")
    (description
      "Documentation at https://melpa.org/#/tangonov-theme")
    (license #f)))

(define-public emacs-tangotango-theme
  (package
    (name "emacs-tangotango-theme")
    (version "20220714.2034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juba/color-theme-tangotango.git")
               (commit
                 "dbefd8638c36595467efbce5a26da208320ac30a")))
        (sha256
          (base32
            "093izf3zppfcb85bgdmq516sarkmwvwfi4b6jnpd6cnj7wl9zr1j"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("tangotango-theme.el")))
    (home-page
      "https://github.com/juba/color-theme-tangotango")
    (synopsis
      "Tango Palette color theme for Emacs 24.")
    (description
      "Documentation at https://melpa.org/#/tangotango-theme")
    (license #f)))

(define-public emacs-tao-theme
  (package
    (name "emacs-tao-theme")
    (version "20230906.1605")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/11111000000/tao-theme-emacs.git")
               (commit
                 "328d50abd0628dba06f127e5bf26f7cbd52c5a71")))
        (sha256
          (base32
            "1l3w4icfbmjaariq85f7rxw4lq3ydgkc78szvn4zwca3iafyipn7"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/11111000000/tao-theme-emacs")
    (synopsis
      "This package provides two parametrized uncoloured color themes for Emacs: tao-yin and tao-yang.")
    (description
      "Documentation at https://melpa.org/#/tao-theme")
    (license #f)))

(define-public emacs-tardis-theme
  (package
    (name "emacs-tardis-theme")
    (version "20230212.2152")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/antonhibl/tardis-theme.git")
               (commit
                 "6d16503cfb08181538d9f02a4d70ebc181bd4241")))
        (sha256
          (base32
            "1q54rjixii6qhfd5k8q06bv3pn0prmncns9j5wm5s35fn1ibl8xi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/antonhibl/tardis-theme")
    (synopsis "Quantum Country Theme")
    (description
      "Documentation at https://melpa.org/#/tardis-theme")
    (license #f)))

(define-public emacs-taskpaper-mode
  (package
    (name "emacs-taskpaper-mode")
    (version "20230718.1418")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/saf-dmitry/taskpaper-mode.git")
               (commit
                 "33a87374f4fd4d6c45c8ae433b9735e72d7a60c8")))
        (sha256
          (base32
            "12c2ss4m5c9gm7k02fh1a72b41qfpnpj1bavqn1qhc83hbd5rc6l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/saf-dmitry/taskpaper-mode")
    (synopsis
      "Major mode for working with TaskPaper files")
    (description
      "Documentation at https://melpa.org/#/taskpaper-mode")
    (license #f)))

(define-public emacs-taskrunner
  (package
    (name "emacs-taskrunner")
    (version "20190916.1608")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-taskrunner/emacs-taskrunner.git")
               (commit
                 "716323aff410b4d864d137c9ebe4bbb5b8587f5e")))
        (sha256
          (base32
            "03llmj09jg5cba927qbzkhld83k24yd1i95nfiq7q754a4y4iksn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-async))
    (home-page
      "https://github.com/emacs-taskrunner/emacs-taskrunner")
    (synopsis
      "Retrieve build system/taskrunner tasks")
    (description
      "Documentation at https://melpa.org/#/taskrunner")
    (license #f)))

(define-public emacs-tawny-mode
  (package
    (name "emacs-tawny-mode")
    (version "20210528.1710")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/tawny-owl.git")
               (commit
                 "d0ca5ecffa39d83704c423a2f8f7cd4f93f9915b")))
        (sha256
          (base32
            "04nc27y8pwd1y78qq0d10iygmgk3scs3gsp9wdg016rwd7axca2j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-cider))
    (arguments '(#:files ("emacs/tawny-mode.el")))
    (home-page "unspecified")
    (synopsis "Ontology Editing with Tawny-OWL")
    (description
      "Documentation at https://melpa.org/#/tawny-mode")
    (license #f)))

(define-public emacs-tblui
  (package
    (name "emacs-tblui")
    (version "20161007.1912")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Yuki-Inoue/tblui.el.git")
               (commit
                 "bb29323bb3e27093d50cb42db3a9329a096b6e4d")))
        (sha256
          (base32
            "1pja9v4h3abqc2iydm7wwjxrg7ni1pn94yb4azrgjq5qc0fsgn7a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-magit-popup emacs-tablist))
    (home-page
      "https://github.com/Yuki-Inoue/tblui.el")
    (synopsis "Define tabulated list UI easily")
    (description
      "Documentation at https://melpa.org/#/tblui")
    (license #f)))

(define-public emacs-tbx2org
  (package
    (name "emacs-tbx2org")
    (version "20140224.1559")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/tbx2org.git")
               (commit
                 "08e9816ba6066f56936050b58d07ceb2187ae6f7")))
        (sha256
          (base32
            "1jp80qywcphql1ngd4fr24lqdfwrw0bw6q9hgq5vmzgjwfxwxwd4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "https://github.com/istib/tbx2org")
    (synopsis "Tinderbox to org-mode conversion")
    (description
      "Documentation at https://melpa.org/#/tbx2org")
    (license #f)))

(define-public emacs-tc
  (package
    (name "emacs-tc")
    (version "20220122.1443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kanchoku/tc.git")
               (commit
                 "a3a4738ede3e107a5149c9d55691f57736bf4f48")))
        (sha256
          (base32
            "0y2p4jibvbm2c76lik0gsg1hyl9gxb0x0pi0azak6yk3dyzci5w2"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "tcode")))
    (home-page "unspecified")
    (synopsis
      "a Japanese input method with T-Code on Emacs")
    (description
      "Documentation at https://melpa.org/#/tc")
    (license #f)))

(define-public emacs-tco
  (package
    (name "emacs-tco")
    (version "20191129.2040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/tco.el.git")
               (commit
                 "d82478d56568f60b3a82fd010b3ca0bab2ef5dc9")))
        (sha256
          (base32
            "0lh04mpa1yb3mwasvnnbdzffcig7ndlk13d96a0lavqn49a10fa3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/Wilfred/tco.el")
    (synopsis
      "Tail-call optimisation for Emacs lisp")
    (description
      "Documentation at https://melpa.org/#/tco")
    (license #f)))

(define-public emacs-tea-time
  (package
    (name "emacs-tea-time")
    (version "20120331.820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/konzeptual/tea-time.git")
               (commit
                 "1f6cf0bdd27c5eb3508989c5095427781f858eca")))
        (sha256
          (base32
            "0b4cwkwkc4i8lc4j30xc9d6xskm3gqrc2dij60ya75h92aj0lj40"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Simple timer package, useful to make perfect tea.")
    (description
      "Documentation at https://melpa.org/#/tea-time")
    (license #f)))

(define-public emacs-teacode-expand
  (package
    (name "emacs-teacode-expand")
    (version "20181231.640")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raguay/TeaCode-Expand.git")
               (commit
                 "2122e4b32ed4edd2d7ebc0ff8ebf407e29d6e910")))
        (sha256
          (base32
            "0pz41xkb0wz3kcn08ikn4wn9ywnaf3rpvmxsqz9bjpqnc6l8vni1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/raguay/TeaCode-Expand")
    (synopsis
      "Expansion of text by TeaCode program.")
    (description
      "Documentation at https://melpa.org/#/teacode-expand")
    (license #f)))

(define-public emacs-teco
  (package
    (name "emacs-teco")
    (version "20200707.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mtk/teco.git")
               (commit
                 "61caf8f419659a0567a269f290c90427a215d77b")))
        (sha256
          (base32
            "0jfrlpmcr8msj39fhm0sc11sxw46w0dk24zidsdp12lwgcnli44m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mtk/teco.git")
    (synopsis "Teco interpreter")
    (description
      "Documentation at https://melpa.org/#/teco")
    (license #f)))

(define-public emacs-telega
  (package
    (name "emacs-telega")
    (version "20231108.717")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zevlg/telega.el.git")
               (commit
                 "3e7bc49ccd579b2e68d00620424b9c10e38f56e5")))
        (sha256
          (base32
            "1bq1if84piww0mb9ciji7l2n2ac57c01kb6vldc96imhpri2fnny"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-visual-fill-column
            emacs-rainbow-identifiers))
    (arguments
      '(#:files
        (:defaults "etc" "server" "contrib" "Makefile")))
    (home-page "https://github.com/zevlg/telega.el")
    (synopsis "Telegram client (unofficial)")
    (description
      "Documentation at https://melpa.org/#/telega")
    (license #f)))

(define-public emacs-telepathy
  (package
    (name "emacs-telepathy")
    (version "20131209.1258")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/telepathy.el.git")
               (commit
                 "211d785b02a29ddc254422fdcc3db45262582f8c")))
        (sha256
          (base32
            "16kr1p4lzi1ysd5r2dh0mxk60zsm5fvwa9345nfyrgdic340yscc"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Access Telepathy from Emacs")
    (description
      "Documentation at https://melpa.org/#/telepathy")
    (license #f)))

(define-public emacs-telephone-line
  (package
    (name "emacs-telephone-line")
    (version "20230322.442")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dbordak/telephone-line.git")
               (commit
                 "202f9c94f7b86827ab7ebb6dbce8302b0447d6ff")))
        (sha256
          (base32
            "1hwym7xqgc6zhakni7ws7x9j4whyb86ddiv7cwjj29arfsadbmiz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dbordak/telephone-line")
    (synopsis "Rewrite of Powerline")
    (description
      "Documentation at https://melpa.org/#/telephone-line")
    (license #f)))

(define-public emacs-teleport
  (package
    (name "emacs-teleport")
    (version "20230915.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/caramelhooves/teleport.el.git")
               (commit
                 "a5262b0434b1b0c672e5b4bb625ea8d70a337b12")))
        (sha256
          (base32
            "1rnbfbb96826lpvh00qy21aa4ck5kg833z7wj26sir2pr0lrlzb7"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/caramelhooves/teleport.el")
    (synopsis "Integration for tsh (goteleport.com)")
    (description
      "Documentation at https://melpa.org/#/teleport")
    (license #f)))

(define-public emacs-teletext
  (package
    (name "emacs-teletext")
    (version "20211203.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-teletext.git")
               (commit
                 "6b003e9dab9bd0c27d188a81f5fff740d66a2282")))
        (sha256
          (base32
            "0ilallavqhqjsxh37gga5k2pgz8jiwxssfhj1jlf7nj89gn2ana6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-teletext")
    (synopsis "Teletext broadcast viewer")
    (description
      "Documentation at https://melpa.org/#/teletext")
    (license #f)))

(define-public emacs-teletext-yle
  (package
    (name "emacs-teletext-yle")
    (version "20210927.825")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-teletext-yle.git")
               (commit
                 "9c8f4b503923c4ec688e2dcc9dff62d71bc55933")))
        (sha256
          (base32
            "0j0qd75nz0b97pg7x58cf6cxanmwkbyam6raq6zwdlvllwmsq6qd"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-teletext))
    (home-page
      "https://github.com/lassik/emacs-teletext-yle")
    (synopsis
      "Teletext provider for Finnish national network YLE")
    (description
      "Documentation at https://melpa.org/#/teletext-yle")
    (license #f)))

(define-public emacs-tempel
  (package
    (name "emacs-tempel")
    (version "20230810.2303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/tempel.git")
               (commit
                 "0101fd2abf8d68a7bda91d678e47363f9b237f5f")))
        (sha256
          (base32
            "0hrxn877qcy95qskjh484fwxqkw8hkqw0vi75j1vk9mv0a10caac"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/minad/tempel")
    (synopsis
      "Tempo templates/snippets with in-buffer field editing")
    (description
      "Documentation at https://melpa.org/#/tempel")
    (license #f)))

(define-public emacs-tempel-collection
  (package
    (name "emacs-tempel-collection")
    (version "20231021.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Crandel/tempel-collection.git")
               (commit
                 "4a1d717eb30a78680c8f4df2d71e395c846c5371")))
        (sha256
          (base32
            "0ifmzn5d9mpsjwvg2ir0sy3r4czxa7d6j97l8rrp8ai7jqvydadm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tempel))
    (arguments '(#:files (:defaults "templates")))
    (home-page
      "https://github.com/Crandel/tempel-collection")
    (synopsis "Collection of templates for Tempel")
    (description
      "Documentation at https://melpa.org/#/tempel-collection")
    (license #f)))

(define-public emacs-template-overlays
  (package
    (name "emacs-template-overlays")
    (version "20180706.1132")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmontone/template-overlays.git")
               (commit
                 "d32db58c044b2aca3720879003f55b1d57208b07")))
        (sha256
          (base32
            "1hfm0miqzym4fbj33hzh5iszp0i51imr1z54396vd81zjch9sxss"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ov))
    (home-page
      "http://www.github.com/mmontone/template-overlays")
    (synopsis
      "Display template regions using overlays")
    (description
      "Documentation at https://melpa.org/#/template-overlays")
    (license #f)))

(define-public emacs-templatel
  (package
    (name "emacs-templatel")
    (version "20210902.228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/clarete/templatel.git")
               (commit
                 "b52349948b6927f7a5da4e54a89e01c794f2095a")))
        (sha256
          (base32
            "1z5bcd3654zkm89mkx29bcybs97zmwi14xdmbh356di9jbwzk93s"))))
    (build-system melpa-build-system)
    (home-page "https://clarete.li/templatel")
    (synopsis "Templating language;")
    (description
      "Documentation at https://melpa.org/#/templatel")
    (license #f)))

(define-public emacs-temporary-persistent
  (package
    (name "emacs-temporary-persistent")
    (version "20230115.1425")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kostafey/temporary-persistent.git")
               (commit
                 "edbde738769e79ac212ae84ae7898ffd5f19e0f1")))
        (sha256
          (base32
            "0v99azfslg8p6wxs3yf3qq3dzy0f6n9dw5ydj94jrys2ka5gbw1s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-names emacs-dash emacs-s))
    (home-page
      "https://github.com/kostafey/temporary-persistent")
    (synopsis "Keep temp notes buffers persistent")
    (description
      "Documentation at https://melpa.org/#/temporary-persistent")
    (license #f)))

(define-public emacs-ten-hundred-mode
  (package
    (name "emacs-ten-hundred-mode")
    (version "20161028.2236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaron-em/ten-hundred-mode.el.git")
               (commit
                 "bdcfda49b1819e82d61fe90947e50bb948cf7933")))
        (sha256
          (base32
            "11nsh6dkd3i489lrqpd9xhr4c0ai51364rlrd6slm54720by9jql"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "lib")))
    (home-page "unspecified")
    (synopsis
      "use only the ten hundred most usual words")
    (description
      "Documentation at https://melpa.org/#/ten-hundred-mode")
    (license #f)))

(define-public emacs-term+
  (package
    (name "emacs-term+")
    (version "20170509.17")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarao/term-plus-el.git")
               (commit
                 "c3c9239b339c127231860de43abfa08c44c0201a")))
        (sha256
          (base32
            "1mpv9vvvl1sh35vsa5415rvdv57mmbfix8s435q676zvhz3nl8yx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tarao/term-plus-el")
    (synopsis "term-mode enhancement")
    (description
      "Documentation at https://melpa.org/#/term+")
    (license #f)))

(define-public emacs-term+key-intercept
  (package
    (name "emacs-term+key-intercept")
    (version "20140211.750")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarao/term-plus-ki-el.git")
               (commit
                 "fd0771fd66b8c7a909aaac972194485c79ba48c4")))
        (sha256
          (base32
            "1dql2w8xkdw52zlrc2p9x391zn8wv4dj8a6293p4s08if7gg260w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-term+ emacs-key-intercept))
    (home-page "http://github.com/tarao/term+-el")
    (synopsis "term+ intercept key mapping")
    (description
      "Documentation at https://melpa.org/#/term+key-intercept")
    (license #f)))

(define-public emacs-term+mux
  (package
    (name "emacs-term+mux")
    (version "20140211.749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarao/term-plus-mux-el.git")
               (commit
                 "81b60e80cf008472bfd7fad9233af2ef722c208a")))
        (sha256
          (base32
            "12gfvcf7hl29xhg231cx76q04ll7cvfpvhkb0qs3qn1sqb50fs2q"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-term+ emacs-tab-group))
    (home-page "http://github.com/tarao/term+-el")
    (synopsis
      "term+ terminal multiplexer and session management")
    (description
      "Documentation at https://melpa.org/#/term+mux")
    (license #f)))

(define-public emacs-term-alert
  (package
    (name "emacs-term-alert")
    (version "20230407.1715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/calliecameron/term-alert.git")
               (commit
                 "8e7e744773e41355bcd9f5c911001be08bc79bec")))
        (sha256
          (base32
            "1lwsp5wpmss07hmpysvk3yifgzm5bk1rr7d1qmij46yn0r2q3wyk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-term-cmd emacs-alert emacs-f))
    (arguments '(#:files (:defaults "setup")))
    (home-page
      "https://github.com/calliecameron/term-alert")
    (synopsis
      "Notifications when commands complete in term.el.")
    (description
      "Documentation at https://melpa.org/#/term-alert")
    (license #f)))

(define-public emacs-term-cmd
  (package
    (name "emacs-term-cmd")
    (version "20230407.1704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/calliecameron/term-cmd.git")
               (commit
                 "26c5a8cb6b55ac0d6c6bc08f6ea1b1e53f6e2654")))
        (sha256
          (base32
            "04q7i9dbcbxylfy6qsxp6x1rg89ix9qdhpr6z2dc1w925bqv71m8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-f))
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/calliecameron/term-cmd")
    (synopsis
      "Send commands from programs running in term.el.")
    (description
      "Documentation at https://melpa.org/#/term-cmd")
    (license #f)))

(define-public emacs-term-manager
  (package
    (name "emacs-term-manager")
    (version "20230727.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/term-manager.git")
               (commit
                 "31a3d16ba5a4f9e6f4bc52275eaedf55a96154a8")))
        (sha256
          (base32
            "1c2fxsqfvyh0g77vsjc7qmpfc8d5vnwlxkb1gah57i6sri5c8hj0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("term-manager*.el")))
    (home-page
      "https://www.github.com/IvanMalison/term-manager")
    (synopsis "Contextual terminal management")
    (description
      "Documentation at https://melpa.org/#/term-manager")
    (license #f)))

(define-public emacs-term-project
  (package
    (name "emacs-term-project")
    (version "20230727.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/colonelpanic8/term-manager.git")
               (commit
                 "31a3d16ba5a4f9e6f4bc52275eaedf55a96154a8")))
        (sha256
          (base32
            "1c2fxsqfvyh0g77vsjc7qmpfc8d5vnwlxkb1gah57i6sri5c8hj0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-term-manager))
    (arguments '(#:files ("term-project.el")))
    (home-page
      "https://www.github.com/IvanMalison/term-manager")
    (synopsis "Terminal management for project.el")
    (description
      "Documentation at https://melpa.org/#/term-project")
    (license #f)))

(define-public emacs-term-projectile
  (package
    (name "emacs-term-projectile")
    (version "20230727.2308")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/term-manager.git")
               (commit
                 "31a3d16ba5a4f9e6f4bc52275eaedf55a96154a8")))
        (sha256
          (base32
            "1c2fxsqfvyh0g77vsjc7qmpfc8d5vnwlxkb1gah57i6sri5c8hj0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-term-manager emacs-projectile))
    (arguments '(#:files ("term-projectile.el")))
    (home-page
      "https://www.github.com/IvanMalison/term-manager")
    (synopsis "projectile terminal management")
    (description
      "Documentation at https://melpa.org/#/term-projectile")
    (license #f)))

(define-public emacs-term-run
  (package
    (name "emacs-term-run")
    (version "20200128.702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/term-run-el.git")
               (commit
                 "0fd135d55fcf864598b1fb8dd880833a1a322910")))
        (sha256
          (base32
            "1x1qdm5ahd5bxb4xi2i7ha5zqcxa5n0yskiqcz2hdbwpsdiirmlc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/10sr/term-run-el")
    (synopsis
      "Run arbitrary command in terminal buffer")
    (description
      "Documentation at https://melpa.org/#/term-run")
    (license #f)))

(define-public emacs-termbright-theme
  (package
    (name "emacs-termbright-theme")
    (version "20151031.235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmastenbrook/termbright-theme-el.git")
               (commit
                 "bec6ab14336c0611e85f45486276004f16d20607")))
        (sha256
          (base32
            "0gfsqpza8phvma5y3ck0n6p197x1i33w39m3c7jmja4ml121n73d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bmastenbrook/termbright-theme-el")
    (synopsis
      "a more usable theme for white-on-black terminals")
    (description
      "Documentation at https://melpa.org/#/termbright-theme")
    (license #f)))

(define-public emacs-terminal-focus-reporting
  (package
    (name "emacs-terminal-focus-reporting")
    (version "20180830.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/veelenga/terminal-focus-reporting.el.git")
               (commit
                 "6b1dbb2e96b3ff680dbe88153c4c569adbbd64ce")))
        (sha256
          (base32
            "05h62b06k2nfslh822mq3a7q0xvnm8whnj5xbnv3291i4a4v5x2b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/veelenga/terminal-focus-reporting.el")
    (synopsis
      "Minor mode for terminal focus reporting.")
    (description
      "Documentation at https://melpa.org/#/terminal-focus-reporting")
    (license #f)))

(define-public emacs-terminal-here
  (package
    (name "emacs-terminal-here")
    (version "20220827.819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davidshepherd7/terminal-here.git")
               (commit
                 "4bf2a77e450b260570033afda463e178fdf34617")))
        (sha256
          (base32
            "00yqm3fjp0xagmqzvg32nrmiygspkv70sldn86vdzkqdq7z3gmqx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/davidshepherd7/terminal-here")
    (synopsis
      "Run an external terminal in current directory")
    (description
      "Documentation at https://melpa.org/#/terminal-here")
    (license #f)))

(define-public emacs-terminal-toggle
  (package
    (name "emacs-terminal-toggle")
    (version "20190226.1510")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mtekman/terminal-toggle.el.git")
               (commit
                 "f824d634aef3600cb7a8e2ddf9e8444c6607c160")))
        (sha256
          (base32
            "150xvmr5vsydg0197m1k62mwy2810mzh1iwqj9yl9fg47fbzbg0i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popwin))
    (home-page
      "https://github.com/mtekman/terminal-toggle.el")
    (synopsis "simple pop-up terminal")
    (description
      "Documentation at https://melpa.org/#/terminal-toggle")
    (license #f)))

(define-public emacs-tern
  (package
    (name "emacs-tern")
    (version "20191227.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ternjs/tern.git")
               (commit
                 "5f1f83b1689d4954d62e794d9a89c57709099c27")))
        (sha256
          (base32
            "1chpq59hrxlf5bnjcahmlm6k896jxi74mafj5i5q3d82i88qv8m6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("emacs/tern.el")))
    (home-page "http://ternjs.net/")
    (synopsis "Tern-powered JavaScript integration")
    (description
      "Documentation at https://melpa.org/#/tern")
    (license #f)))

(define-public emacs-tern-auto-complete
  (package
    (name "emacs-tern-auto-complete")
    (version "20191227.950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ternjs/tern.git")
               (commit
                 "5f1f83b1689d4954d62e794d9a89c57709099c27")))
        (sha256
          (base32
            "1chpq59hrxlf5bnjcahmlm6k896jxi74mafj5i5q3d82i88qv8m6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-tern emacs-auto-complete))
    (arguments
      '(#:files ("emacs/tern-auto-complete.el")))
    (home-page "unspecified")
    (synopsis "Tern Completion by auto-complete.el")
    (description
      "Documentation at https://melpa.org/#/tern-auto-complete")
    (license #f)))

(define-public emacs-terraform-doc
  (package
    (name "emacs-terraform-doc")
    (version "20230521.849")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TxGVNN/terraform-doc.git")
               (commit
                 "8a6ffd5ac133ced5afd07b9d963272e4208f8b1e")))
        (sha256
          (base32
            "1bg979zpmbc7g8bzlpbdycll9qm0hzgvrdgviqvgb0ylg2s2mxhp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/TxGVNN/terraform-doc")
    (synopsis
      "Look up terraform documentation on the fly")
    (description
      "Documentation at https://melpa.org/#/terraform-doc")
    (license #f)))

(define-public emacs-terraform-mode
  (package
    (name "emacs-terraform-mode")
    (version "20230607.1923")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hcl-emacs/terraform-mode.git")
               (commit
                 "25a22a66f81e35c75f2fdaaab89aad7f9940fe06")))
        (sha256
          (base32
            "11c9bwgrzjw3y70xq5g8z53hi71gpg2xx79d63a337rxyd3yaia5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-hcl-mode emacs-dash))
    (home-page
      "https://github.com/syohex/emacs-terraform-mode")
    (synopsis
      "Major mode for terraform configuration file")
    (description
      "Documentation at https://melpa.org/#/terraform-mode")
    (license #f)))

(define-public emacs-tesouro
  (package
    (name "emacs-tesouro")
    (version "20221003.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rberaldo/tesouro.el.git")
               (commit
                 "3dbfc49209237215163be1ea338dea099ddc0795")))
        (sha256
          (base32
            "1jygw524avkz76gjfa2bbjkd0x7dxd69g6fxl1rkwa514s5gjcid"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/rberaldo/tesouro.el")
    (synopsis
      "Brazilian Portuguese synonym search in dicio.com.br")
    (description
      "Documentation at https://melpa.org/#/tesouro")
    (license #f)))

(define-public emacs-test-c
  (package
    (name "emacs-test-c")
    (version "20180423.1720")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaptel/test-c.git")
               (commit
                 "761a576f62c7021ba941f178f153c51289df1553")))
        (sha256
          (base32
            "04dxgg4jz8cnw19wxybjwd36z8i9j6an15k9pz3zh3v7m72qzw7c"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/aaptel/test-c")
    (synopsis "quickly test c code")
    (description
      "Documentation at https://melpa.org/#/test-c")
    (license #f)))

(define-public emacs-test-case-mode
  (package
    (name "emacs-test-case-mode")
    (version "20130525.1434")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ieure/test-case-mode.git")
               (commit
                 "6074df10ebc97ddfcc228c71c73db179e672dac3")))
        (sha256
          (base32
            "1r3fmb8cshgh9pppdvydfcrzlmb9cgz4m04rgv69c5xv8clwcmbr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-fringe-helper))
    (home-page
      "http://nschum.de/src/emacs/test-case-mode/")
    (synopsis "unit test front-end")
    (description
      "Documentation at https://melpa.org/#/test-case-mode")
    (license #f)))

(define-public emacs-test-cockpit
  (package
    (name "emacs-test-cockpit")
    (version "20231103.2037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johannes-mueller/test-cockpit.el.git")
               (commit
                 "2fcd6ccb94869b854e9d12e0ba5d433adc336296")))
        (sha256
          (base32
            "1vjafad1j7kdmawsg6f9p7j2byg6mp4h46p4p8ww4i64smx6iqqp"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-toml))
    (home-page
      "https://github.com/johannes-mueller/test-cockpit.el")
    (synopsis
      "A command center to run tests of a software project")
    (description
      "Documentation at https://melpa.org/#/test-cockpit")
    (license #f)))

(define-public emacs-test-kitchen
  (package
    (name "emacs-test-kitchen")
    (version "20171129.2035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jjasghar/test-kitchen-el.git")
               (commit
                 "0fc0ca4808425f03fbeb8125246043723e2a179a")))
        (sha256
          (base32
            "1pip15ysya8nsk1xgz6k6gcjm6g60922r0im2anq4j2gjzdja79k"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/jjasghar/test-kitchen-el")
    (synopsis "Run test-kitchen inside of emacs")
    (description
      "Documentation at https://melpa.org/#/test-kitchen")
    (license #f)))

(define-public emacs-test-simple
  (package
    (name "emacs-test-simple")
    (version "20230916.1634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocky/emacs-test-simple.git")
               (commit
                 "8b191842318bb05da74052025192d32ebebb033a")))
        (sha256
          (base32
            "1mg4l4y818fcjd3a2hwaaab826z0sgzirpz175m499ixmjdwi21f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rocky/emacs-test-simple")
    (synopsis
      "Simple Unit Test Framework for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/test-simple")
    (license #f)))

(define-public emacs-tex-smart-umlauts
  (package
    (name "emacs-tex-smart-umlauts")
    (version "20230416.2051")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsmirror/tex-smart-umlauts.git")
               (commit
                 "b28bac71990e0442616157fdb64494179df5575e")))
        (sha256
          (base32
            "0dy7q4r9ac1ka3ikx2whgp2l5vhxfqwn0r4ys086s1fs36a1l7mx"))))
    (build-system melpa-build-system)
    (home-page
      "http://hub.darcs.net/lyro/tex-smart-umlauts")
    (synopsis "Smart umlaut conversion for TeX.")
    (description
      "Documentation at https://melpa.org/#/tex-smart-umlauts")
    (license #f)))

(define-public emacs-texfrag
  (package
    (name "emacs-texfrag")
    (version "20230117.1746")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TobiasZawada/texfrag.git")
               (commit
                 "6df9044c3d6bbb2a104f2c9b78ad10aa3cdf9506")))
        (sha256
          (base32
            "1qwp9nb0dswjr7alsrcwbjym0k56ncd0k5plhcsz8liz5886qfdy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-auctex))
    (home-page
      "https://github.com/TobiasZawada/texfrag")
    (synopsis
      "preview LaTeX fragments in alien major modes")
    (description
      "Documentation at https://melpa.org/#/texfrag")
    (license #f)))

(define-public emacs-text-categories
  (package
    (name "emacs-text-categories")
    (version "20230425.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dspil/text-categories.git")
               (commit
                 "7ae616e45005c469273dd4285cd0808885860984")))
        (sha256
          (base32
            "03ccdjrqxqr88snivs4vqk9w1wdgcm7v83fy6wjfkmf8a29jan0m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Dspil/text-categories")
    (synopsis
      "Assign text categories to a buffer for mass deletion")
    (description
      "Documentation at https://melpa.org/#/text-categories")
    (license #f)))

(define-public emacs-textile-mode
  (package
    (name "emacs-textile-mode")
    (version "20230112.1030")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juba/textile-mode.git")
               (commit
                 "8f8c09ef097a95a713307fdb5c92b9778dfbc1fc")))
        (sha256
          (base32
            "0x8ib6cm7rp6hf44348nnc937w98v5q0fv9r650jjvkfl9rkbm7b"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juba/textile-mode")
    (synopsis "Textile markup editing major mode")
    (description
      "Documentation at https://melpa.org/#/textile-mode")
    (license #f)))

(define-public emacs-textmate
  (package
    (name "emacs-textmate")
    (version "20110816.2146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/defunkt/textmate.el.git")
               (commit
                 "350918b070148f0ace6d9d3cd4ebcaf15c1a8781")))
        (sha256
          (base32
            "1b7xxz1i84azmbz8rqpxdn18avmnqlj87hfrpbngbf6pj5h9jqjh"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "TextMate minor mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/textmate")
    (license #f)))

(define-public emacs-textmate-to-yas
  (package
    (name "emacs-textmate-to-yas")
    (version "20160409.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mattfidler/textmate-to-yas.el.git")
               (commit
                 "be3a768b7ac4c2e24b9d4aa6e9ac1d916cdc5a73")))
        (sha256
          (base32
            "1bz5ys36wd00clq9w3ahqpras368aj2b9d4bl32qc6dyp8jfknmz"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "*.pl")))
    (home-page
      "https://github.com/mlf176f2/textmate-to-yas.el/")
    (synopsis
      "Import Textmate macros into yasnippet syntax")
    (description
      "Documentation at https://melpa.org/#/textmate-to-yas")
    (license #f)))

(define-public emacs-textsize
  (package
    (name "emacs-textsize")
    (version "20231005.1335")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/WJCFerguson/textsize.git")
               (commit
                 "d61fd65d823b17ff71a61fba5590a9e9b60e0e92")))
        (sha256
          (base32
            "02n4dsy4xlhxcinag4xhlqajww81pspkfhxvrz75zmqab01qa6ib"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/WJCFerguson/textsize")
    (synopsis
      "Configure frame text size automatically")
    (description
      "Documentation at https://melpa.org/#/textsize")
    (license #f)))

(define-public emacs-textx-mode
  (package
    (name "emacs-textx-mode")
    (version "20230324.2020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/textX/textx-mode.git")
               (commit
                 "ecf90abec508cfd82d5da68474e976be907d9a77")))
        (sha256
          (base32
            "01j1zbl0ddzaxih1vib67w36ivl95wn88z2wixl7xbympfjqlq8m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/novakboskov/textx-mode")
    (synopsis "Major mode for editing TextX files")
    (description
      "Documentation at https://melpa.org/#/textx-mode")
    (license #f)))

(define-public emacs-tf2-conf-mode
  (package
    (name "emacs-tf2-conf-mode")
    (version "20161209.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wynro/emacs-tf2-conf-mode.git")
               (commit
                 "536950f64c071ffd8495fb2c7ac7c63a11e25f93")))
        (sha256
          (base32
            "0vga7kgzp9wiiji1w47llbb3gp9qgwk8v0f6s8b6jng2gmdg25bk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/wynro/emacs-tf2-conf-mode")
    (synopsis
      "TF2 Configuration files syntax highlighting")
    (description
      "Documentation at https://melpa.org/#/tf2-conf-mode")
    (license #f)))

(define-public emacs-tfsmacs
  (package
    (name "emacs-tfsmacs")
    (version "20180911.2114")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sebasmonia/tfsmacs.git")
               (commit
                 "6865d7bf772a6ecabacc868e45a0f5a5e197e1a5")))
        (sha256
          (base32
            "1xrw81n3llyr3191mpnr85grhayhkq5cq6g56p52mc4sahmqbqlg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tablist))
    (home-page
      "http://github.com/sebasmonia/tfsmacs/")
    (synopsis "MS TFS source control interaction.")
    (description
      "Documentation at https://melpa.org/#/tfsmacs")
    (license #f)))

(define-public emacs-the-matrix-theme
  (package
    (name "emacs-the-matrix-theme")
    (version "20230402.1218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/monkeyjunglejuice/matrix-emacs-theme.git")
               (commit
                 "b339285651e088bc51fa2fb51aa319fb70cab9a4")))
        (sha256
          (base32
            "1rnb3h8bhdrawfhlkp32y2r0rai2pxj71qsvpj62drjk582bkfjm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/monkeyjunglejuice/matrix-emacs-theme")
    (synopsis
      "Green-on-black dark theme inspired by \"The Matrix\" movie")
    (description
      "Documentation at https://melpa.org/#/the-matrix-theme")
    (license #f)))

(define-public emacs-theme-anchor
  (package
    (name "emacs-theme-anchor")
    (version "20230924.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/GongYiLiao/theme-anchor.git")
               (commit
                 "dd69fe04d901e771cafde3992042a212e4a62620")))
        (sha256
          (base32
            "0dbywc25v7gjh34mrx7kg6hvjk2gd86rf59vx185sb2q0ywfzwnk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/GongYiLiao/theme-anchor")
    (synopsis "Apply theme in current buffer only")
    (description
      "Documentation at https://melpa.org/#/theme-anchor")
    (license #f)))

(define-public emacs-theme-changer
  (package
    (name "emacs-theme-changer")
    (version "20230904.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hadronzoo/theme-changer.git")
               (commit
                 "7febd7632451bb99a5d92f24623432c4de035ff1")))
        (sha256
          (base32
            "156s5bw7dzx83l08l4zq3h2f3whqzqn5ii5c84wrg8z4xxmvck18"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hadronzoo/theme-changer")
    (synopsis
      "Sunrise/Sunset Theme Changer for Emacs")
    (description
      "Documentation at https://melpa.org/#/theme-changer")
    (license #f)))

(define-public emacs-theme-looper
  (package
    (name "emacs-theme-looper")
    (version "20210827.424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myTerminal/theme-looper.git")
               (commit
                 "e6e8efd740df0b68db89805ba72492818dba61ab")))
        (sha256
          (base32
            "1cy1s9iyv2c4c2kld42aricar4s5d0irdhsqb8rsbbriif50vpvd"))))
    (build-system melpa-build-system)
    (home-page "http://ismail.teamfluxion.com")
    (synopsis
      "A package for switching themes in Emacs interactively")
    (description
      "Documentation at https://melpa.org/#/theme-looper")
    (license #f)))

(define-public emacs-theme-magic
  (package
    (name "emacs-theme-magic")
    (version "20190711.2034")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcaw/theme-magic.git")
               (commit
                 "844c4311bd26ebafd4b6a1d72ddcc65d87f074e3")))
        (sha256
          (base32
            "10gkg7jh1s1484gm66a87zr7x8vmv00s7gfd0w2pj47nqf98g8hz"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "python")))
    (home-page
      "https://github.com/jcaw/theme-magic.el")
    (synopsis
      "Apply your Emacs theme to the rest of Linux")
    (description
      "Documentation at https://melpa.org/#/theme-magic")
    (license #f)))

(define-public emacs-therapy
  (package
    (name "emacs-therapy")
    (version "20151113.1953")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/therapy.git")
               (commit
                 "775a92bb7b6b0fcc5b38c0b5198a9d0a1bef788a")))
        (sha256
          (base32
            "12kz4alyf3y2i7lkvi26hcxy55v0blsrxv5srx9fv5jhxkdz1vq1"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abingham/therapy")
    (synopsis
      "Hooks for managing multiple Python major versions")
    (description
      "Documentation at https://melpa.org/#/therapy")
    (license #f)))

(define-public emacs-thingopt
  (package
    (name "emacs-thingopt")
    (version "20160520.2318")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/thingopt.git")
               (commit
                 "5679815852652479f3b3c9f3a98affc927384b2c")))
        (sha256
          (base32
            "12zpn0sy2yg37jjjx12h3kln56241b3z09bn5zavmjfdwnr9jd0a"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Thing at Point optional utilities")
    (description
      "Documentation at https://melpa.org/#/thingopt")
    (license #f)))

(define-public emacs-thinks
  (package
    (name "emacs-thinks")
    (version "20170802.1128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/thinks.el.git")
               (commit
                 "c02f236abc8c2025d9f01460b09b89ebdc96e28d")))
        (sha256
          (base32
            "0g4ls668kyqnh4xkvz1s1z9j6n0a1gkgrzgl98hys7hny6zrk7aa"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/thinks.el")
    (synopsis "Insert text in a think bubble.")
    (description
      "Documentation at https://melpa.org/#/thinks")
    (license #f)))

(define-public emacs-third-time
  (package
    (name "emacs-third-time")
    (version "20231023.316")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/third-time-"
               version
               ".tar"))
        (sha256
          (base32
            "16bahiw9c15prrvhsjcqd0fwv7w9f65pv2yr0djr6cylgs8vmxrz"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.sr.ht/~swflint/third-time")
    (synopsis "Third Time: A Better Way to Work")
    (description
      "Documentation at https://melpa.org/#/third-time")
    (license #f)))

(define-public emacs-thread-dump
  (package
    (name "emacs-thread-dump")
    (version "20170816.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nd/thread-dump.el.git")
               (commit
                 "204c9600242756d4b514bb5ff6293e052bf4b49d")))
        (sha256
          (base32
            "11qx194gwizqg7p2mqy7mdfii85bdayabxfd388dmrm916i4w47n"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/nd/thread-dump.el")
    (synopsis "Java thread dump viewer")
    (description
      "Documentation at https://melpa.org/#/thread-dump")
    (license #f)))

(define-public emacs-threes
  (package
    (name "emacs-threes")
    (version "20160820.1242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/threes.el.git")
               (commit
                 "6981acb30b856c77cba6aba63fefbf102cbdfbb2")))
        (sha256
          (base32
            "1a7zqq6kmqxgzbsg8yczlvipzv65n10c8j26mc507p4m47nlikgv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/threes.el")
    (synopsis
      "A clone of Threes (a tiny puzzle game)")
    (description
      "Documentation at https://melpa.org/#/threes")
    (license #f)))

(define-public emacs-thrift
  (package
    (name "emacs-thrift")
    (version "20231106.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/facebook/fbthrift.git")
               (commit
                 "8766d781e24d95320d17730fd8279fc2f7600108")))
        (sha256
          (base32
            "11nwx1qfkznf7dxcd9a62h4bxfjglni9liz6wv2fcglll09cj3m4"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("thrift/contrib/thrift.el")))
    (home-page "unspecified")
    (synopsis
      "major mode for fbthrift and Apache Thrift files")
    (description
      "Documentation at https://melpa.org/#/thrift")
    (license #f)))

(define-public emacs-thumb-through
  (package
    (name "emacs-thumb-through")
    (version "20120119.534")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/thumb-through.git")
               (commit
                 "08d8fb720f93c6172653e035191a8fa9c3305e63")))
        (sha256
          (base32
            "0nypcryqwwsdawqxi7hgsv6fp28zqslj9phw7zscqqxzc3svaywn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Plain text reader of HTML documents")
    (description
      "Documentation at https://melpa.org/#/thumb-through")
    (license #f)))

(define-public emacs-tickscript-mode
  (package
    (name "emacs-tickscript-mode")
    (version "20171219.203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/msherry/tickscript-mode.git")
               (commit
                 "f0579f38ff14954df5002ce30ae6d4a2c978d461")))
        (sha256
          (base32
            "0b3rbsd978ch0hiv45sqg9g4zsxhjn557j5f72vjql8cx1h5d8s4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/msherry/tickscript-mode")
    (synopsis "A major mode for Tickscript files")
    (description
      "Documentation at https://melpa.org/#/tickscript-mode")
    (license #f)))

(define-public emacs-tidal
  (package
    (name "emacs-tidal")
    (version "20230616.734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tidalcycles/Tidal.git")
               (commit
                 "78695cd30137fabaad0164ac490ba8c0c26d6bc4")))
        (sha256
          (base32
            "1wdngqkb70dxz1kcmml2yi84w1lz14ki8a75n7k1fya06vkcg0am"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haskell-mode))
    (home-page
      "https://github.com/tidalcycles/Tidal")
    (synopsis
      "Interact with TidalCycles for live coding patterns")
    (description
      "Documentation at https://melpa.org/#/tidal")
    (license #f)))

(define-public emacs-tide
  (package
    (name "emacs-tide")
    (version "20230620.1444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ananthakumaran/tide.git")
               (commit
                 "b38dfc3f8fb754e64e48e76fc92d472cb3d1a3dc")))
        (sha256
          (base32
            "0s1wfsn6z828zxydd0cmfy9c9nix77snx10cr2va8wdrsp0sy14s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-s emacs-flycheck))
    (arguments '(#:files (:defaults "tsserver")))
    (home-page
      "http://github.com/ananthakumaran/tide")
    (synopsis
      "Typescript Interactive Development Environment")
    (description
      "Documentation at https://melpa.org/#/tide")
    (license #f)))

(define-public emacs-tiktoken
  (package
    (name "emacs-tiktoken")
    (version "20230719.129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zkry/tiktoken.el.git")
               (commit
                 "957ece897933460d532057fe60cfddcd9e49d8b5")))
        (sha256
          (base32
            "14f17m7kzppax9qm7f9qqx88sy8608kcb3pmcsaa7crpl75a9k2g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page "https://github.com/zkry/tiktoken.el")
    (synopsis "Count BPE Tokens")
    (description
      "Documentation at https://melpa.org/#/tiktoken")
    (license #f)))

(define-public emacs-tikz
  (package
    (name "emacs-tikz")
    (version "20220526.521")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emiliotorres/tikz.git")
               (commit
                 "4b205afc5c88f050639135d1d57f1276db323842")))
        (sha256
          (base32
            "0ykhlyq45r0nzv03kbmdwxbhrydpls6iihcf0g43nq0fhswb20g7"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "templates")))
    (home-page
      "https://github.com/emiliotorres/tikz")
    (synopsis "A minor mode to edit TikZ pictures")
    (description
      "Documentation at https://melpa.org/#/tikz")
    (license #f)))

(define-public emacs-tile
  (package
    (name "emacs-tile")
    (version "20161225.357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/IvanMalison/tile.git")
               (commit
                 "22660f21f6e95de5aba55cd5d293d4841e9a4661")))
        (sha256
          (base32
            "1qxhrm852j93sqi1lznlrjn7s0vscsixm48g46ja70gl320chyzm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-stream))
    (home-page "https://github.com/IvanMalison/tile")
    (synopsis "Tile windows with layouts")
    (description
      "Documentation at https://melpa.org/#/tile")
    (license #f)))

(define-public emacs-time-block
  (package
    (name "emacs-time-block")
    (version "20230511.1434")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/time-block-"
               version
               ".tar"))
        (sha256
          (base32
            "0ciz62w006flpk0my2swkhh9qxc37gacgrz2z0bbzgqsbw816q3v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ts))
    (home-page
      "https://git.sr.ht/~swflint/time-block-command")
    (synopsis "Block running commands using time")
    (description
      "Documentation at https://melpa.org/#/time-block")
    (license #f)))

(define-public emacs-time-ext
  (package
    (name "emacs-time-ext")
    (version "20170126.1215")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/time-ext.git")
               (commit
                 "d128becf660fe3f30178eb1b05cd266741f4784a")))
        (sha256
          (base32
            "0ynxmik33hh0znmznrf7lkmsh5xggbrvbdhiqa61r0b7gs3jk5fd"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/time-ext.el")
    (synopsis "more function for time/date")
    (description
      "Documentation at https://melpa.org/#/time-ext")
    (license #f)))

(define-public emacs-time-uuid-mode
  (package
    (name "emacs-time-uuid-mode")
    (version "20230312.2256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RobertPlant/time-uuid-mode.git")
               (commit
                 "6f0768edb7588add3713952e5b20e9df8ee51f89")))
        (sha256
          (base32
            "10hiajmqdyhxcbsy8ywaf0rp9yb4k5dr723lij4vc76bqjv6jpdq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/RobertPlant/time-uuid-mode")
    (synopsis
      "Minor mode for previewing time uuids as an overlay")
    (description
      "Documentation at https://melpa.org/#/time-uuid-mode")
    (license #f)))

(define-public emacs-timecop
  (package
    (name "emacs-timecop")
    (version "20160520.1052")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-php/emacs-datetime.git")
               (commit
                 "e6427538b547cbe02e1bd6ed4b765c73620bdae8")))
        (sha256
          (base32
            "1573z8wq5m8qzbzmnsz2fmbwrj9c0ava0jjfchzmwm2b3jyvqh5r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-datetime-format))
    (arguments '(#:files ("timecop.el")))
    (home-page
      "https://github.com/zonuexe/emacs-datetime")
    (synopsis "Freeze Time for testing")
    (description
      "Documentation at https://melpa.org/#/timecop")
    (license #f)))

(define-public emacs-timer-revert
  (package
    (name "emacs-timer-revert")
    (version "20150122.2032")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyr/timer-revert.git")
               (commit
                 "615c91dec8b440d2b9b7c725dd733d7432564e45")))
        (sha256
          (base32
            "1hidvbd1xzz9m0fc55wac1mpv4dpcf8qnw1myh3646bfvivj9c2q"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/yyr/timer-revert")
    (synopsis
      "minor mode to revert buffer for a given time interval.")
    (description
      "Documentation at https://melpa.org/#/timer-revert")
    (license #f)))

(define-public emacs-timesheet
  (package
    (name "emacs-timesheet")
    (version "20221004.1702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tmarble/timesheet.el.git")
               (commit
                 "511751b239c84d7619ec1c61d7f108b732b64442")))
        (sha256
          (base32
            "01j8wps938mjjlq55w9lgky3f51k260ipjqv8072x0n73mwf9008"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("*.el" "bin" "share")))
    (home-page
      "https://github.com/tmarble/timesheet.el")
    (synopsis
      "Timesheet management add-on for org-mode")
    (description
      "Documentation at https://melpa.org/#/timesheet")
    (license #f)))

(define-public emacs-timonier
  (package
    (name "emacs-timonier")
    (version "20170411.800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/timonier.git")
               (commit
                 "0a150ea87bf695b43cf1740dfd7e553e0ae7601c")))
        (sha256
          (base32
            "18yls8zc8d5nhx8j3l5av5xvmxmjrrmbzzab59kc6zib0isgxlcz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-f
            emacs-dash
            emacs-pkg-info
            emacs-hydra
            emacs-request
            emacs-all-the-icons))
    (home-page
      "https://github.com/nlamirault/timonier")
    (synopsis "Manage Kubernetes Applications")
    (description
      "Documentation at https://melpa.org/#/timonier")
    (license #f)))

(define-public emacs-timu-caribbean-theme
  (package
    (name "emacs-timu-caribbean-theme")
    (version "20231022.1816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/timu-caribbean-theme.git")
               (commit
                 "5fc2cad6c91748afa98d1df2b65b3b5329d21b03")))
        (sha256
          (base32
            "0hsn3q36pdgg4w2nxmszsr7d3n0wkc291i1v04nakknhw8fx6b0m"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aimebertrand/timu-caribbean-theme")
    (synopsis
      "Color theme with cyan as a dominant color")
    (description
      "Documentation at https://melpa.org/#/timu-caribbean-theme")
    (license #f)))

(define-public emacs-timu-line
  (package
    (name "emacs-timu-line")
    (version "20231002.1016")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/timu-line.git")
               (commit
                 "836cb92063076981f93e44f72dccd46a37e96785")))
        (sha256
          (base32
            "0ndhqsv11ai16y2pqcglqyhpzids4b7bzksmx5fs762vmmvm3r5z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://gitlab.com/aimebertrand/timu-line")
    (synopsis "Custom and simple mode line")
    (description
      "Documentation at https://melpa.org/#/timu-line")
    (license #f)))

(define-public emacs-timu-macos-theme
  (package
    (name "emacs-timu-macos-theme")
    (version "20231022.1832")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/timu-macos-theme.git")
               (commit
                 "f1ecdf8415e4cb3d35019af5b2ad0d6bea96e610")))
        (sha256
          (base32
            "0w1xh0i8q2d84f9d5gw61nn7a8xqyllm427qnnjsa5wjlhgvilfl"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aimebertrand/timu-macos-theme")
    (synopsis "Color theme inspired by the macOS UI")
    (description
      "Documentation at https://melpa.org/#/timu-macos-theme")
    (license #f)))

(define-public emacs-timu-rouge-theme
  (package
    (name "emacs-timu-rouge-theme")
    (version "20230911.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/timu-rouge-theme.git")
               (commit
                 "49df5e054c87044fdd941796f423a621b9495f70")))
        (sha256
          (base32
            "1v5srm1gbsy31384lys21hc4mj4xd7q3bkwhgjp8i9k0rrl0hrb8"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aimebertrand/timu-rouge-theme")
    (synopsis
      "Color theme inspired by the Rouge Theme for VSCode")
    (description
      "Documentation at https://melpa.org/#/timu-rouge-theme")
    (license #f)))

(define-public emacs-timu-spacegrey-theme
  (package
    (name "emacs-timu-spacegrey-theme")
    (version "20231010.2137")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/aimebertrand/timu-spacegrey-theme.git")
               (commit
                 "fbe0aacc0d1010631ba8b2848b78e26514ce60c6")))
        (sha256
          (base32
            "0h8kkzgfz5hkynlynml0pgkq9j6fzzq33hl9ww8mq1gzzq6n62db"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/aimebertrand/timu-spacegrey-theme")
    (synopsis
      "Color theme inspired by the Spacegray theme in Sublime Text")
    (description
      "Documentation at https://melpa.org/#/timu-spacegrey-theme")
    (license #f)))

(define-public emacs-tinkerer
  (package
    (name "emacs-tinkerer")
    (version "20200914.1756")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yyr/tinkerer.el.git")
               (commit
                 "7cedeb264a44cd62bcd9c778dca52316d09e07e5")))
        (sha256
          (base32
            "0ym6cxglacclk0sgwbnbswwslf8bs6d0drj89nrabnhad15prxgz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "https://github.com/yyr/tinkerer.el")
    (synopsis
      "Elisp wrapper for Tinkerer Blogging Engine.")
    (description
      "Documentation at https://melpa.org/#/tinkerer")
    (license #f)))

(define-public emacs-tiny
  (package
    (name "emacs-tiny")
    (version "20220910.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/tiny.git")
               (commit
                 "c107480fca7e42737c51b2afaa33ac31e92a7290")))
        (sha256
          (base32
            "0rxjfx2hab8khxyyaxlk94s8x0c2dhb9bbfbipiaywlzqwmfav7i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/tiny")
    (synopsis
      "Quickly generate linear ranges in Emacs")
    (description
      "Documentation at https://melpa.org/#/tiny")
    (license #f)))

(define-public emacs-tiny-menu
  (package
    (name "emacs-tiny-menu")
    (version "20220725.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aaronbieber/tiny-menu.el.git")
               (commit
                 "17eacfd1d44cd4d5482d32eac63229230c3cd3fc")))
        (sha256
          (base32
            "1yds5881r6yqpy3smhj57wlm5aadlk70ai8s2x2pf4gma5mvnh2j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/aaronbieber/tiny-menu.el")
    (synopsis "Display tiny menus.")
    (description
      "Documentation at https://melpa.org/#/tiny-menu")
    (license #f)))

(define-public emacs-tinypng
  (package
    (name "emacs-tinypng")
    (version "20200306.911")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/tinypng.el.git")
               (commit
                 "f7632e073ce13ef5ce30ae5584cb482a8bb9ffff")))
        (sha256
          (base32
            "1ywhj03j64pp2qmsp2g08xr7pq2qx3i0iwly2hl89hig87va0dpl"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/tinypng.el")
    (synopsis
      "Compress PNG and JPEG with TinyPNG.com API")
    (description
      "Documentation at https://melpa.org/#/tinypng")
    (license #f)))

(define-public emacs-tinysegmenter
  (package
    (name "emacs-tinysegmenter")
    (version "20141124.1013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/myuhe/tinysegmenter.el.git")
               (commit
                 "872134704bd25c13a4c59552433da4c6881b5230")))
        (sha256
          (base32
            "1n8cn6mr26hgmsm2mkbj5gs6dv61d0pap8ija4g0n1vsibfhzd8j"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/myuhe/tinysegmenter.el")
    (synopsis
      "Super compact Japanese tokenizer in Javascript ported to emacs lisp")
    (description
      "Documentation at https://melpa.org/#/tinysegmenter")
    (license #f)))

(define-public emacs-titlecase
  (package
    (name "emacs-titlecase")
    (version "20230714.323")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/titlecase-"
               version
               ".tar"))
        (sha256
          (base32
            "1pq6zn860d0jwjvq3fgikwsd77m3zqqbjwdrky3flh2h709jh6jk"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/acdw/titlecase.el")
    (synopsis "Title-case phrases")
    (description
      "Documentation at https://melpa.org/#/titlecase")
    (license #f)))

(define-public emacs-tj3-mode
  (package
    (name "emacs-tj3-mode")
    (version "20180519.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/csrhodes/tj3-mode.git")
               (commit
                 "1d98eb23f1606392f34ef1b80517cfc940fb9950")))
        (sha256
          (base32
            "1gzi8pvdgj4s9c54m2a8hicvg8dzac6253kyd2h71bljm4ilwl0f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/csrhodes/tj3-mode")
    (synopsis
      "major mode for editing TaskJuggler 3 files")
    (description
      "Documentation at https://melpa.org/#/tj3-mode")
    (license #f)))

(define-public emacs-tldr
  (package
    (name "emacs-tldr")
    (version "20230301.136")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kuanyui/tldr.el.git")
               (commit
                 "1b09d2032491d3904bd7ee9bf5ba7c7503db6593")))
        (sha256
          (base32
            "0qdv5yhvs4mnb4lszglhli80pv1436mknbap9qrm9riixfg6zlvv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kuanyui/tldr.el")
    (synopsis "tldr client for Emacs")
    (description
      "Documentation at https://melpa.org/#/tldr")
    (license #f)))

(define-public emacs-tmmofl
  (package
    (name "emacs-tmmofl")
    (version "20121025.1101")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/tmmofl.git")
               (commit
                 "532aa6978e994e2b069ffe37aaf9a0011a07dadc")))
        (sha256
          (base32
            "1ypbv9jbdnwv3xjsfzq8i3nmqdvziynv2rqsd6fm2r1xw0q06xd6"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Calls functions dependant on font lock highlighting at point")
    (description
      "Documentation at https://melpa.org/#/tmmofl")
    (license #f)))

(define-public emacs-tmsu
  (package
    (name "emacs-tmsu")
    (version "20230807.2218")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vifon/tmsu.el.git")
               (commit
                 "8207b4140fd1b3eff2ec4b9818e67148139cb72f")))
        (sha256
          (base32
            "02ipyb19s961k05kmbika302rfipzcgpvm0g1q3pxn7arxs9s3kl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults (:exclude "ol-tmsu.el"))))
    (home-page "https://github.com/vifon/tmsu.el")
    (synopsis "A basic TMSU interface")
    (description
      "Documentation at https://melpa.org/#/tmsu")
    (license #f)))

(define-public emacs-tmux-mode
  (package
    (name "emacs-tmux-mode")
    (version "20231026.2118")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/tmux-mode.git")
               (commit
                 "632fc7981ceaea19ab2af0e47acae926354ab453")))
        (sha256
          (base32
            "1j4gr3wmh6wrr6lj9bjx7gg34qqywb54309vq28x6y4k9ng966zb"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/nverno/tmux-mode")
    (synopsis "Major mode for tmux configuration")
    (description
      "Documentation at https://melpa.org/#/tmux-mode")
    (license #f)))

(define-public emacs-tmux-pane
  (package
    (name "emacs-tmux-pane")
    (version "20231014.25")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/emacs-tmux-pane.git")
               (commit
                 "c38b063a7669ee3bc16cd93a805cd46c2ee80827")))
        (sha256
          (base32
            "00gz33r1h3csh7ys8k4ack7ri5d8h45akqxjry9rd2mywahbx3k4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names emacs-s))
    (home-page
      "https://github.com/laishulu/emacs-tmux-pane")
    (synopsis
      "Provide integration between emacs window and tmux pane")
    (description
      "Documentation at https://melpa.org/#/tmux-pane")
    (license #f)))

(define-public emacs-toc-mode
  (package
    (name "emacs-toc-mode")
    (version "20220926.530")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dalanicolai/toc-mode.git")
               (commit
                 "c7dd29872d883f83cdc5ae6e2cb146fbb8225b8c")))
        (sha256
          (base32
            "0si51h7mvyj4gbmyn73hn964bsnd6mckjnn9wxpiplmhy1rdkflc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dalanicolai/toc-mode")
    (synopsis
      "Manage outlines/table of contents of pdf and djvu documents")
    (description
      "Documentation at https://melpa.org/#/toc-mode")
    (license #f)))

(define-public emacs-toc-org
  (package
    (name "emacs-toc-org")
    (version "20220110.1452")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/snosov1/toc-org.git")
               (commit
                 "bf2e4b358efbd860ecafe6e74776de0885d9d100")))
        (sha256
          (base32
            "1mck86704akw8jlczimb4wi9z7x5mxag9s7z2vxfgg8xfmbmj8jr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/snosov1/toc-org")
    (synopsis
      "add table of contents to org-mode files (formerly, org-toc)")
    (description
      "Documentation at https://melpa.org/#/toc-org")
    (license #f)))

(define-public emacs-todoist
  (package
    (name "emacs-todoist")
    (version "20230120.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/emacs-todoist.git")
               (commit
                 "e1d1b602430f7a5bb84f9b52d96fe552def9ed3d")))
        (sha256
          (base32
            "0x96mzfmnbpdskvjzn2x6c9f1pjd74q7fal6ys7ylgv9fr90l1qs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/abrochard/emacs-todoist")
    (synopsis
      "Extension for interacting and managing todoist tasks")
    (description
      "Documentation at https://melpa.org/#/todoist")
    (license #f)))

(define-public emacs-todotxt
  (package
    (name "emacs-todotxt")
    (version "20220204.1903")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rpdillon/todotxt.el.git")
               (commit
                 "ddb25fb931b4bbc1af14c4c712d412af454794c4")))
        (sha256
          (base32
            "1mb7cp0czhfzq0wb69lcihblr77f4fvq7ffcl64kkddnlp1ychr3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rpdillon/todotxt.el")
    (synopsis
      "A major mode for editing todo.txt files")
    (description
      "Documentation at https://melpa.org/#/todotxt")
    (license #f)))

(define-public emacs-todotxt-mode
  (package
    (name "emacs-todotxt-mode")
    (version "20200228.952")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/avillafiorita/todotxt-mode.git")
               (commit
                 "8b616ce1cf3e18a60757450a0acf22996abb9b79")))
        (sha256
          (base32
            "1frvksra8s004xknlizs5gz5rhy9xbis5r353pzsybmn1bxa40wk"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Major mode for editing todo.txt files")
    (description
      "Documentation at https://melpa.org/#/todotxt-mode")
    (license #f)))

(define-public emacs-togetherly
  (package
    (name "emacs-togetherly")
    (version "20170426.616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/togetherly.git")
               (commit
                 "a6491bd5dd84f2aded0cd112ff06ae76ff78dfeb")))
        (sha256
          (base32
            "05x6ppfkpklxf1098acs6gpd3zm9k05vhywa7n01y2g6nhp697pw"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "allow multiple clients to edit a single buffer online")
    (description
      "Documentation at https://melpa.org/#/togetherly")
    (license #f)))

(define-public emacs-toggle-quotes
  (package
    (name "emacs-toggle-quotes")
    (version "20140710.926")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/toctan/toggle-quotes.el.git")
               (commit
                 "33abc221d6887f0518337851318065cd86c34b03")))
        (sha256
          (base32
            "1w1lmqgzn9bp59h9y9plv80y53k6qhjgfmnnlqyyqfl45z3si7kg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/toctan/toggle-quotes.el")
    (synopsis
      "Toggle between single and double quoted string")
    (description
      "Documentation at https://melpa.org/#/toggle-quotes")
    (license #f)))

(define-public emacs-toggle-test
  (package
    (name "emacs-toggle-test")
    (version "20140723.537")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rags/toggle-test.git")
               (commit
                 "e969321f274903d705995a7d0345a257576ec5ff")))
        (sha256
          (base32
            "0sgaslqxj806byidh06h5pqmqz8jzjfz9ky8jvkif3cq3a479jby"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("toggle-test.el")))
    (home-page "https://github.com/rags/toggle-test")
    (synopsis
      "Toggle between source and test files in various programming languages")
    (description
      "Documentation at https://melpa.org/#/toggle-test")
    (license #f)))

(define-public emacs-toggle-window
  (package
    (name "emacs-toggle-window")
    (version "20141207.1548")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deadghost/toggle-window.git")
               (commit
                 "e82c60e543933880402ede11e9423e48a17dde53")))
        (sha256
          (base32
            "0f86aij1glmvgpbhmfpi441zy0r37zblb0q3ycgq0dp92x8yny5r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/deadghost/toggle-window")
    (synopsis
      "toggle current window size between half and full")
    (description
      "Documentation at https://melpa.org/#/toggle-window")
    (license #f)))

(define-public emacs-tok-theme
  (package
    (name "emacs-tok-theme")
    (version "20231019.947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/topikettunen/tok-theme.git")
               (commit
                 "61c86fd2902b6342efe4463230dffdd185159d1c")))
        (sha256
          (base32
            "03n75dmsmlhpkra6scqpvanbcfplc08np8hzarn4jcnysybji0f4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/topikettunen/tok-theme")
    (synopsis
      "Minimal monochromatic theme for Emacs in the spirit of Zmacs and Smalltalk-80.")
    (description
      "Documentation at https://melpa.org/#/tok-theme")
    (license #f)))

(define-public emacs-tokei
  (package
    (name "emacs-tokei")
    (version "20220823.2058")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nagy/tokei.el.git")
               (commit
                 "86fbca422f580a95eb30247e46891184f3ac5c18")))
        (sha256
          (base32
            "0nn8v9x0dczw0ingibclc1v8fnhjiwl14vm1qjcng9dcr2pbp7mq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit-section))
    (home-page "https://github.com/nagy/tokei.el")
    (synopsis "Display codebase statistics")
    (description
      "Documentation at https://melpa.org/#/tokei")
    (license #f)))

(define-public emacs-tomatinho
  (package
    (name "emacs-tomatinho")
    (version "20180621.1748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/konr/tomatinho.git")
               (commit
                 "b53354b9b9f496c0388d6a573b06b7d6fc53d0bd")))
        (sha256
          (base32
            "0vf2b1c9raa723iy2gfdmxjv4q0ivixy1vbs1x5q09cibca8kp4x"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("tomatinho.el" "tick.wav" "tack.wav")))
    (home-page "unspecified")
    (synopsis "Simple and beautiful pomodoro timer")
    (description
      "Documentation at https://melpa.org/#/tomatinho")
    (license #f)))

(define-public emacs-toml
  (package
    (name "emacs-toml")
    (version "20230411.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gongo/emacs-toml.git")
               (commit
                 "ee4a12bfc8c890c5e8b4bfa35837ce672a882967")))
        (sha256
          (base32
            "0dql85xzzgyqjfqzmmdsmc1dly8z952rz81pnj8r7gjkah1slbvd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/gongo/emacs-toml")
    (synopsis
      "TOML (Tom's Obvious, Minimal Language) parser")
    (description
      "Documentation at https://melpa.org/#/toml")
    (license #f)))

(define-public emacs-toml-mode
  (package
    (name "emacs-toml-mode")
    (version "20161107.1800")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dryman/toml-mode.el.git")
               (commit
                 "f6c61817b00f9c4a3cab1bae9c309e0fc45cdd06")))
        (sha256
          (base32
            "05b4ksay85c8y5ncax0qsvnmplwsfiw24z16a58gkarjz938hb57"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dryman/toml-mode.el")
    (synopsis "Major mode for editing TOML files")
    (description
      "Documentation at https://melpa.org/#/toml-mode")
    (license #f)))

(define-public emacs-tommyh-theme
  (package
    (name "emacs-tommyh-theme")
    (version "20131004.2330")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wglass/tommyh-theme.git")
               (commit
                 "46d1c69ee0a1ca7c67b569b891a2f28fed89e7d5")))
        (sha256
          (base32
            "0pwbd5gzmpr6js20438870w605671930291070nhmhswvxfcdvay"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A bright, bold-colored theme for emacs")
    (description
      "Documentation at https://melpa.org/#/tommyh-theme")
    (license #f)))

(define-public emacs-tongbu
  (package
    (name "emacs-tongbu")
    (version "20200414.507")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/tongbu.el.git")
               (commit
                 "6f6e5c5446f0c5735357ab520b249ab97295653e")))
        (sha256
          (base32
            "05pg1qddsl0m4r73smrxpcvyiwa18d9jl6i8nfanlydwmmjqblb9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-server))
    (home-page
      "https://github.com/xuchunyang/tongbu.el")
    (synopsis
      "A web server to share text or files between two devices")
    (description
      "Documentation at https://melpa.org/#/tongbu")
    (license #f)))

(define-public emacs-topspace
  (package
    (name "emacs-topspace")
    (version "20220824.134")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/trevorpogue/topspace.git")
               (commit
                 "4f090520174cab0fa752765b7c18885efb6cce11")))
        (sha256
          (base32
            "1qx4ablzj4w16780g6lk97lyhsmip6s2yjlb3nwpivn9979py9m4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/trevorpogue/topspace")
    (synopsis
      "Recenter line 1 with scrollable upper margin/padding")
    (description
      "Documentation at https://melpa.org/#/topspace")
    (license #f)))

(define-public emacs-topsy
  (package
    (name "emacs-topsy")
    (version "20230414.1738")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/topsy.el.git")
               (commit
                 "86d4234e4a0e9d2f5bf0f1114ea9893da48e77d1")))
        (sha256
          (base32
            "0lxca6jxkkpkj063mf0m7ack7aaiazv4zz2xkwc2vv0hbrf9nzdx"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/alphapapa/topsy.el")
    (synopsis "Simple sticky header")
    (description
      "Documentation at https://melpa.org/#/topsy")
    (license #f)))

(define-public emacs-tornado-template-mode
  (package
    (name "emacs-tornado-template-mode")
    (version "20141128.1008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paradoxxxzero/tornado-template-mode.git")
               (commit
                 "667c0663dbbd279b6c345446b9f2bc50eb52b747")))
        (sha256
          (base32
            "0wv49gn1daylnjmnallpqsqy7630ynrp45agpiwi6kwyyqk1kdvv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "A major mode for editing tornado templates")
    (description
      "Documentation at https://melpa.org/#/tornado-template-mode")
    (license #f)))

(define-public emacs-torus
  (package
    (name "emacs-torus")
    (version "20190325.753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chimay/torus.git")
               (commit
                 "b309da8c2eaee573a2e2572f25a08ce5da9e9990")))
        (sha256
          (base32
            "0d6y2m4lh244542svzm856n014l7hjkffp5m0arwsvywqspq9vb9"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/chimay/torus")
    (synopsis "A buffer groups manager")
    (description
      "Documentation at https://melpa.org/#/torus")
    (license #f)))

(define-public emacs-total-lines
  (package
    (name "emacs-total-lines")
    (version "20171227.1239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hinrik/total-lines.git")
               (commit
                 "473fa74a5416697ecd938866518bcad423f8fda6")))
        (sha256
          (base32
            "17jac25hwnklqzqpnrxjsq9s08c9rql9phcv8cq97cc36iwgw8gp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hinrik/total-lines")
    (synopsis
      "Keep track of a buffer's total number of lines")
    (description
      "Documentation at https://melpa.org/#/total-lines")
    (license #f)))

(define-public emacs-totd
  (package
    (name "emacs-totd")
    (version "20150519.1440")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/egh/emacs-totd.git")
               (commit
                 "ca47b618ea8290776cdb5b0f1c2c335691f69660")))
        (sha256
          (base32
            "188cdgic25wrb4jdgdcj070a0pxsh3m0rd9d2r6i1s1n1nalrs6g"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis
      "Display a random daily emacs command.")
    (description
      "Documentation at https://melpa.org/#/totd")
    (license #f)))

(define-public emacs-totp
  (package
    (name "emacs-totp")
    (version "20230902.1828")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/juergenhoetzel/emacs-totp.git")
               (commit
                 "755e645c063860adb3f22f170b9fee86a4054882")))
        (sha256
          (base32
            "0q4lw85d8k0rwgrcq8m5zw10ilaf72bvxhgx91pkl0z0wx7azplv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/juergenhoetzel/emacs-totp")
    (synopsis "Time-based One-time Password (TOTP)")
    (description
      "Documentation at https://melpa.org/#/totp")
    (license #f)))

(define-public emacs-tox
  (package
    (name "emacs-tox")
    (version "20170404.1059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chmouel/tox.el.git")
               (commit
                 "7655eb254038d5e34433e8a9d66b3ffc9c72e40c")))
        (sha256
          (base32
            "1212b7s00kw9hk5gc2jx88hqd825rvkz1ss7phnxkrz833l062ki"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/chmouel/tox.el")
    (synopsis "Launch current python test with tox")
    (description
      "Documentation at https://melpa.org/#/tox")
    (license #f)))

(define-public emacs-toxi-theme
  (package
    (name "emacs-toxi-theme")
    (version "20160424.2126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/postspectacular/toxi-theme.git")
               (commit
                 "90c8828b91025adf5adc96011a35d25682991b8a")))
        (sha256
          (base32
            "1pnsky541m8kzcv81w98jkv0hgajh04hxqlmgddc1y0wbvi849j0"))))
    (build-system melpa-build-system)
    (home-page
      "http://bitbucket.org/postspectacular/toxi-theme/")
    (synopsis "A dark color theme by toxi")
    (description
      "Documentation at https://melpa.org/#/toxi-theme")
    (license #f)))

(define-public emacs-tql-mode
  (package
    (name "emacs-tql-mode")
    (version "20170724.254")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tiros-dev/tql-mode.git")
               (commit
                 "488add79eb3fc8ec02aedaa997fe1ed9e5c3e638")))
        (sha256
          (base32
            "09vkqr5n66w1q5f7m1vgiv0555v23wg6j46ri52lnnslsxpxhlyv"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "TQL mode")
    (description
      "Documentation at https://melpa.org/#/tql-mode")
    (license #f)))

(define-public emacs-tr-ime
  (package
    (name "emacs-tr-ime")
    (version "20220604.1107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/trueroad/tr-emacs-ime-module.git")
               (commit
                 "87f0677220b755f947fe5f373b6a34e1afb82f3c")))
        (sha256
          (base32
            "1xvhagynkhx4l0smbg9lz1kas7y25jpg66m1q5b32z3aagm90sb1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-w32-ime))
    (home-page
      "https://github.com/trueroad/tr-emacs-ime-module")
    (synopsis "Emulator of IME patch for Windows")
    (description
      "Documentation at https://melpa.org/#/tr-ime")
    (license #f)))

(define-public emacs-traad
  (package
    (name "emacs-traad")
    (version "20180730.48")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-traad.git")
               (commit
                 "98e23363b7e8a590a2f55976123a8c3da75c87a5")))
        (sha256
          (base32
            "121p80vsa3xff1anwy876gvlpm0jdbfm5vaxszds73wrv6gih8m3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-deferred
            emacs-popup
            emacs-request
            emacs-request-deferred
            emacs-virtualenvwrapper
            emacs-f
            emacs-bind-map))
    (home-page "https://github.com/abingham/traad")
    (synopsis
      "emacs interface to the traad refactoring server.")
    (description
      "Documentation at https://melpa.org/#/traad")
    (license #f)))

(define-public emacs-tracking
  (package
    (name "emacs-tracking")
    (version "20220421.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-circe/circe.git")
               (commit
                 "57fe189d7c0b98b9b1b5a59767cea1c7e2c22b13")))
        (sha256
          (base32
            "1hnfbzf4inx541mw1gnb5hxv6igdcwnlhpm8qs6z630appf3yxnc"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("tracking.el" "shorten.el")))
    (home-page
      "https://github.com/emacs-circe/circe/wiki/Tracking")
    (synopsis "Buffer modification tracking")
    (description
      "Documentation at https://melpa.org/#/tracking")
    (license #f)))

(define-public emacs-tracwiki-mode
  (package
    (name "emacs-tracwiki-mode")
    (version "20150119.1621")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/merickson/tracwiki-mode.git")
               (commit
                 "6a620444d59b438f42383b48cd4c19c03105dba6")))
        (sha256
          (base32
            "1m25l1lyff4h0h4vjrcsziwbf8svqg2llvvgl8i2b4jbh7k7pk5f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xml-rpc))
    (home-page "unspecified")
    (synopsis
      "Emacs Major mode for working with Trac")
    (description
      "Documentation at https://melpa.org/#/tracwiki-mode")
    (license #f)))

(define-public emacs-tramp-auto-auth
  (package
    (name "emacs-tramp-auto-auth")
    (version "20191027.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/oitofelix/tramp-auto-auth.git")
               (commit
                 "f15a12dfab651aff60f4a9d70f868030a12344ac")))
        (sha256
          (base32
            "09nkjgwppjfgv04q0gv468qihgx4y3p39lpwbd6vbh3wgbccas9k"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/oitofelix/tramp-auto-auth")
    (synopsis
      "TRAMP automatic authentication library")
    (description
      "Documentation at https://melpa.org/#/tramp-auto-auth")
    (license #f)))

(define-public emacs-tramp-hdfs
  (package
    (name "emacs-tramp-hdfs")
    (version "20210526.339")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/raghavgautam/tramp-hdfs.git")
               (commit
                 "aa93bdbb3d5619c262ce53af1981edcd2a0705e5")))
        (sha256
          (base32
            "1ar1565qhw6wx76p5p7dyb5k0lplnfbf866x2mc6kn9vydmb29za"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Tramp extension to access hadoop/hdfs file system in Emacs")
    (description
      "Documentation at https://melpa.org/#/tramp-hdfs")
    (license #f)))

(define-public emacs-tramp-term
  (package
    (name "emacs-tramp-term")
    (version "20220725.1441")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cuspymd/tramp-term.el.git")
               (commit
                 "ed75189122737d301f716a30a8013205aa3736f1")))
        (sha256
          (base32
            "1629qsl2xsz5qwmvwl2wdfnlj6wlhvrb34wc33dd11n8szrvbk6h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/randymorris/tramp-term.el")
    (synopsis
      "Automatic setup of directory tracking in ssh sessions")
    (description
      "Documentation at https://melpa.org/#/tramp-term")
    (license #f)))

(define-public emacs-transfer-sh
  (package
    (name "emacs-transfer-sh")
    (version "20200601.1708")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/tuedachu/transfer-sh.el.git")
               (commit
                 "0621a66d00ec91a209a542c10b158095088bd44d")))
        (sha256
          (base32
            "1dnh8ws788if32wqnhzqjm38zjhpm9l3sq74245djnn1mx5bm56m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async))
    (home-page
      "https://gitlab.com/tuedachu/transfer-sh.el")
    (synopsis
      "Simple interface for sending buffer contents to transfer.sh")
    (description
      "Documentation at https://melpa.org/#/transfer-sh")
    (license #f)))

(define-public emacs-transient
  (package
    (name "emacs-transient")
    (version "20231103.2312")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/transient.git")
               (commit
                 "b4a29636365d12a8079c3908ff8ffce5f84b85d3")))
        (sha256
          (base32
            "1ckdjqlp063gprmy74b0ghl9zhwblkahifbqailww1wcbv40fmsz"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/magit/transient")
    (synopsis "Transient commands")
    (description
      "Documentation at https://melpa.org/#/transient")
    (license #f)))

(define-public emacs-transient-dwim
  (package
    (name "emacs-transient-dwim")
    (version "20221225.1630")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/conao3/transient-dwim.el.git")
               (commit
                 "cb5e0d35729fc6448553b7a17fc5c843f00e8c1d")))
        (sha256
          (base32
            "03mk0rvi3mn2wbx817swqd5y784k446yh8l4vv892rjb81fchl2g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/conao3/transient-dwim.el")
    (synopsis "Useful preset transient commands")
    (description
      "Documentation at https://melpa.org/#/transient-dwim")
    (license #f)))

(define-public emacs-transient-extras
  (package
    (name "emacs-transient-extras")
    (version "20230721.839")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/haji-ali/transient-extras.git")
               (commit
                 "ca0d5c597382615f0ee8300ff8718f54f8214359")))
        (sha256
          (base32
            "1g92pjrrwx2hzijn4wbm3xfmarirgjs7sq4k025vj4vdjdxvddq9"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("transient-extras.el")))
    (home-page
      "https://github.com/haji-ali/transient-extras.git")
    (synopsis "Extra features for transient")
    (description
      "Documentation at https://melpa.org/#/transient-extras")
    (license #f)))

(define-public emacs-transient-extras-a2ps
  (package
    (name "emacs-transient-extras-a2ps")
    (version "20230303.1511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/haji-ali/transient-extras.git")
               (commit
                 "72eb0e66714d3144de55b983a23eca5c0b664fcc")))
        (sha256
          (base32
            "1dmgmqqgw30lpz973j0g49sgr4m1rjiv3446576gl7i9fa4r1mv3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient-extras))
    (arguments
      '(#:files ("transient-extras-a2ps.el")))
    (home-page
      "https://git.sr.ht/~swflint/transient-extras-a2ps")
    (synopsis "A transient interface to a2ps")
    (description
      "Documentation at https://melpa.org/#/transient-extras-a2ps")
    (license #f)))

(define-public emacs-transient-extras-lp
  (package
    (name "emacs-transient-extras-lp")
    (version "20230418.1112")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/haji-ali/transient-extras.git")
               (commit
                 "72eb0e66714d3144de55b983a23eca5c0b664fcc")))
        (sha256
          (base32
            "1dmgmqqgw30lpz973j0g49sgr4m1rjiv3446576gl7i9fa4r1mv3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-transient-extras))
    (arguments '(#:files ("transient-extras-lp.el")))
    (home-page
      "https://github.com/haji-ali/transient-extras.git")
    (synopsis "A transient interface to lp")
    (description
      "Documentation at https://melpa.org/#/transient-extras-lp")
    (license #f)))

(define-public emacs-transient-posframe
  (package
    (name "emacs-transient-posframe")
    (version "20210102.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yanghaoxie/transient-posframe.git")
               (commit
                 "dcd898d1d35183a7d4f2c8f0ebcb43b4f8e70ebe")))
        (sha256
          (base32
            "1aq1vbkww55xplyaa3xagz9z4kdlsxk13x054asnk0dqps4bcgbf"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-transient))
    (home-page
      "https://github.com/yanghaoxie/transient-posframe")
    (synopsis "Using posframe to show transient")
    (description
      "Documentation at https://melpa.org/#/transient-posframe")
    (license #f)))

(define-public emacs-translate-mode
  (package
    (name "emacs-translate-mode")
    (version "20220511.1357")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rayw000/translate-mode.git")
               (commit
                 "e1940b333241a4d0c224b7b875962736ca2b693b")))
        (sha256
          (base32
            "18s400rrpqji5dmn453f6cnk69cyskbmzsnkbxmss2wrqazp3l3c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/rayw000/translate-mode")
    (synopsis
      "Paragraph-oriented side-by-side doc translation workflow")
    (description
      "Documentation at https://melpa.org/#/translate-mode")
    (license #f)))

(define-public emacs-transmission
  (package
    (name "emacs-transmission")
    (version "20221130.212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/holomorph/transmission.git")
               (commit
                 "243d5dc15917df2611fd0c9f288faea17a00a396")))
        (sha256
          (base32
            "1dp1ypz0vwcggp09rwr1d7dh34d05vlxz0mvry9p44g58dc99cz0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Interface to a Transmission session")
    (description
      "Documentation at https://melpa.org/#/transmission")
    (license #f)))

(define-public emacs-transpose-frame
  (package
    (name "emacs-transpose-frame")
    (version "20221109.2053")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/transpose-frame.git")
               (commit
                 "94c87794d53883a2358d13da264ad8dab9a52daa")))
        (sha256
          (base32
            "106rxnzyd7rqfw885wx385wx0c2jqrfbh99rf16b7acxbwnskbvy"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Transpose windows arrangement in a frame")
    (description
      "Documentation at https://melpa.org/#/transpose-frame")
    (license #f)))

(define-public emacs-transpose-mark
  (package
    (name "emacs-transpose-mark")
    (version "20150405.716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kwrooijen/transpose-mark.git")
               (commit
                 "667327602004794de97214cf336ac61650ef75b7")))
        (sha256
          (base32
            "03wc50vn1kmrgnzzhs06pwpap2p2rx84wwzxw0hawsg1f1l35m2x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Transpose data using the Emacs mark")
    (description
      "Documentation at https://melpa.org/#/transpose-mark")
    (license #f)))

(define-public emacs-transwin
  (package
    (name "emacs-transwin")
    (version "20220921.831")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/transwin.git")
               (commit
                 "228abda3422e9accc04e18002d1ed4c43d345e85")))
        (sha256
          (base32
            "158gsd8a3scnkd8avdn3pc9zwzn9mww5w97i2ss9q4m5yd8qgh4f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/transwin")
    (synopsis "Make window/frame transparent")
    (description
      "Documentation at https://melpa.org/#/transwin")
    (license #f)))

(define-public emacs-trashed
  (package
    (name "emacs-trashed")
    (version "20230811.157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shingo256/trashed.git")
               (commit
                 "52a52a363ce53855790e7a59aed6976eec18c9ea")))
        (sha256
          (base32
            "091c9b4glx7d5svwgr3jvqv1d8lw10mw4hvv4mq7kx1j54zmbnbf"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/shingo256/trashed")
    (synopsis "Viewing/editing system trash can")
    (description
      "Documentation at https://melpa.org/#/trashed")
    (license #f)))

(define-public emacs-travis
  (package
    (name "emacs-travis")
    (version "20150825.1138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nlamirault/emacs-travis.git")
               (commit
                 "754ef07c17fed17ab03664ad11e2b0b2ef5e78ed")))
        (sha256
          (base32
            "1ciwf40ghlm4w9g4ynbc3d1a93gf6f3imm3m8z9kqfa7cnlsypb6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s
            emacs-dash
            emacs-pkg-info
            emacs-request))
    (home-page
      "https://github.com/nlamirault/emacs-travis")
    (synopsis "Emacs client for Travis")
    (description
      "Documentation at https://melpa.org/#/travis")
    (license #f)))

(define-public emacs-tray
  (package
    (name "emacs-tray")
    (version "20230917.1002")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/tray-"
               version
               ".tar"))
        (sha256
          (base32
            "1y5f6k2m1280hj3w680q3bqgk6wgsljhq9gvjdjbs3khicipq5ld"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://git.sr.ht/~tarsius/tray")
    (synopsis "Various transient menus")
    (description
      "Documentation at https://melpa.org/#/tray")
    (license #f)))

(define-public emacs-tree-edit
  (package
    (name "emacs-tree-edit")
    (version "20231108.1749")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ethan-leba/tree-edit.git")
               (commit
                 "f5e2b467f14a2980dbe1a862ce0b27e768b2e980")))
        (sha256
          (base32
            "1xf4aygk4vc0pi590ca9nm1j9s64bv018xz5w8g4ln7rgpwdk408"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-reazon emacs-s))
    (arguments
      '(#:files
        (:defaults (:exclude "evil-tree-edit*.el"))))
    (home-page
      "https://github.com/ethan-leba/tree-edit")
    (synopsis
      "A library for structural refactoring and editing")
    (description
      "Documentation at https://melpa.org/#/tree-edit")
    (license #f)))

(define-public emacs-tree-mode
  (package
    (name "emacs-tree-mode")
    (version "20151104.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/tree-mode.git")
               (commit
                 "b06078826d5875d74b0e7b7ac47b0d0917610534")))
        (sha256
          (base32
            "13bbdhdmqg4x9yghanhr8fsbsxbnypzxdxgicz31sjjm675kpnix"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A mode to manage tree widgets")
    (description
      "Documentation at https://melpa.org/#/tree-mode")
    (license #f)))

(define-public emacs-tree-sitter
  (package
    (name "emacs-tree-sitter")
    (version "20220212.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-tree-sitter/elisp-tree-sitter.git")
               (commit
                 "3cfab8a0e945db9b3df84437f27945746a43cc71")))
        (sha256
          (base32
            "0flqsf3nly7s261vss56havss13psgbw98612yj2xkfk9sydia28"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tsc))
    (arguments
      '(#:files
        ("lisp/*.el"
         (:exclude "lisp/tree-sitter-tests.el"))))
    (home-page
      "https://github.com/emacs-tree-sitter/elisp-tree-sitter")
    (synopsis "Incremental parsing system")
    (description
      "Documentation at https://melpa.org/#/tree-sitter")
    (license #f)))

(define-public emacs-tree-sitter-ess-r
  (package
    (name "emacs-tree-sitter-ess-r")
    (version "20221012.855")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ShuguangSun/tree-sitter-ess-r.git")
               (commit
                 "9669c00f3d3463e6769725af74c392891e269eed")))
        (sha256
          (base32
            "083m21lqgic910fqbxc104fai0vh2hrb7s2nlln43l7hlb8939b4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ess
            emacs-tree-sitter
            emacs-tree-sitter-langs))
    (home-page
      "https://github.com/ShuguangSun/tree-sitter-ess-r")
    (synopsis "R with tree-sitter")
    (description
      "Documentation at https://melpa.org/#/tree-sitter-ess-r")
    (license #f)))

(define-public emacs-tree-sitter-indent
  (package
    (name "emacs-tree-sitter-indent")
    (version "20220411.1439")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://codeberg.org/FelipeLema/tree-sitter-indent.el.git")
               (commit
                 "4ef246db3e4ff99f672fe5e4b416c890f885c09e")))
        (sha256
          (base32
            "0hs8fiwa5idhfxiskdp9k37ciqy32ll08fmf50y3bvrh6512dd66"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tree-sitter))
    (home-page
      "https://codeberg.org/FelipeLema/tree-sitter-indent.el")
    (synopsis
      "Provide indentation with a Tree-sitter backend")
    (description
      "Documentation at https://melpa.org/#/tree-sitter-indent")
    (license #f)))

(define-public emacs-tree-sitter-ispell
  (package
    (name "emacs-tree-sitter-ispell")
    (version "20230205.533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/erickgnavar/tree-sitter-ispell.el.git")
               (commit
                 "d8c33c05f689c2cab36b8a9856811f18a4ab7c59")))
        (sha256
          (base32
            "19i2hv6zy9797dz4b6xrwlkci5fdq4v2mxd55li2bpd6sgga28ns"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tree-sitter))
    (home-page
      "https://github.com/erickgnavar/tree-sitter-ispell.el")
    (synopsis "Run ispell on tree-sitter text nodes")
    (description
      "Documentation at https://melpa.org/#/tree-sitter-ispell")
    (license #f)))

(define-public emacs-tree-sitter-langs
  (package
    (name "emacs-tree-sitter-langs")
    (version "20231105.656")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-tree-sitter/tree-sitter-langs.git")
               (commit
                 "32c664eadb3c23f2327dc78fe4bec97578ad9ed6")))
        (sha256
          (base32
            "0j1fjfqkqb0xw1k87zj80zgb0qwm5m7v2hrpj2f8azpzdbcdcbhq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tree-sitter))
    (arguments '(#:files (:defaults "queries")))
    (home-page
      "https://github.com/emacs-tree-sitter/tree-sitter-langs")
    (synopsis "Grammar bundle for tree-sitter")
    (description
      "Documentation at https://melpa.org/#/tree-sitter-langs")
    (license #f)))

(define-public emacs-treebundel
  (package
    (name "emacs-treebundel")
    (version "20231007.1424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purplg/treebundel.git")
               (commit
                 "0e63d0b3c9029b63b3e446e6317bd7d366c0436a")))
        (sha256
          (base32
            "0adfx4hbklvgnkv6bkrs7lfh2d4ncksmapg72fywpa2mapww6fqg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/purplg/treebundel")
    (synopsis
      "Bundle related git-worktrees together")
    (description
      "Documentation at https://melpa.org/#/treebundel")
    (license #f)))

(define-public emacs-treefactor
  (package
    (name "emacs-treefactor")
    (version "20200516.1631")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyberthal/treefactor.git")
               (commit
                 "75357757022a4399ab772ff0d92065bd114dabe9")))
        (sha256
          (base32
            "0ks7ilc01j1jli1p1lqmqwcr3bfzn5p6vhxybc9wn2sk2sqn2kv8"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-f emacs-avy))
    (home-page
      "https://github.com/cyberthal/treefactor")
    (synopsis "Restructure your messy Org documents")
    (description
      "Documentation at https://melpa.org/#/treefactor")
    (license #f)))

(define-public emacs-treemacs
  (package
    (name "emacs-treemacs")
    (version "20231109.1915")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "a1e855bce6c112d57994c991bc50775b6922f73e")))
        (sha256
          (base32
            "0vhlyqfa70jxc3yfh7g3vpr792kk88jsd16majn1jkqmldi6vk3r"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-ace-window
            emacs-pfuture
            emacs-hydra
            emacs-ht
            emacs-cfrs))
    (arguments
      '(#:files
        (:defaults
          "Changelog.org"
          "icons"
          "src/elisp/treemacs*.el"
          "src/scripts/treemacs*.py"
          (:exclude "src/extra/*"))))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "A tree style file explorer package")
    (description
      "Documentation at https://melpa.org/#/treemacs")
    (license #f)))

(define-public emacs-treemacs-all-the-icons
  (package
    (name "emacs-treemacs-all-the-icons")
    (version "20230408.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "58ed4538a7e5e3481571566101748a2bee29bc1d")))
        (sha256
          (base32
            "0166y4pw1njv2dkjkh54f9s16b8n2zihs4r7dxwllcm890rsa067"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-all-the-icons emacs-treemacs))
    (arguments
      '(#:files ("src/extra/treemacs-all-the-icons.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis
      "all-the-icons integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-all-the-icons")
    (license #f)))

(define-public emacs-treemacs-evil
  (package
    (name "emacs-treemacs-evil")
    (version "20230822.2039")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "147594c4b84952a9897261420fea97b725bb6bac")))
        (sha256
          (base32
            "0kal2x7dzsx9cnwlwr84r61f9fxzx38fi0gn27j377dyyksr0wzz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-evil emacs-treemacs))
    (arguments
      '(#:files ("src/extra/treemacs-evil.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Evil mode integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-evil")
    (license #f)))

(define-public emacs-treemacs-icons-dired
  (package
    (name "emacs-treemacs-icons-dired")
    (version "20230930.1141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "42b9e48b49809b4808dcdc74e196a9fa1f41d55e")))
        (sha256
          (base32
            "1fk0ndr6cipddacyaifqpl3dr9i1di2lwyzbak57y2y9b8p24r0w"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-treemacs))
    (arguments
      '(#:files ("src/extra/treemacs-icons-dired.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Treemacs icons for dired")
    (description
      "Documentation at https://melpa.org/#/treemacs-icons-dired")
    (license #f)))

(define-public emacs-treemacs-magit
  (package
    (name "emacs-treemacs-magit")
    (version "20230830.1936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "42b9e48b49809b4808dcdc74e196a9fa1f41d55e")))
        (sha256
          (base32
            "1fk0ndr6cipddacyaifqpl3dr9i1di2lwyzbak57y2y9b8p24r0w"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-treemacs emacs-pfuture emacs-magit))
    (arguments
      '(#:files ("src/extra/treemacs-magit.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Magit integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-magit")
    (license #f)))

(define-public emacs-treemacs-nerd-icons
  (package
    (name "emacs-treemacs-nerd-icons")
    (version "20230828.544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rainstormstudio/treemacs-nerd-icons.git")
               (commit
                 "9876cb478145a0ec4e36f64ff6583f3de7126216")))
        (sha256
          (base32
            "1xphhxdibjhp27z2lj1nxlxf7cfm8vpi44fr01fk9krqy9vaz0q0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-nerd-icons emacs-treemacs))
    (home-page
      "https://github.com/rainstormstudio/treemacs-nerd-icons")
    (synopsis
      "Emacs Nerd Font Icons theme for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-nerd-icons")
    (license #f)))

(define-public emacs-treemacs-persp
  (package
    (name "emacs-treemacs-persp")
    (version "20230703.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "2c576bebccd56ec8e65f4ec5ed5de864d9684fbf")))
        (sha256
          (base32
            "1if18rdzp1cw01mx3yy6wdn7iq0n9r0wp2h4inx74hpssrsidn2c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-treemacs emacs-persp-mode emacs-dash))
    (arguments
      '(#:files ("src/extra/treemacs-persp.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Persp-mode integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-persp")
    (license #f)))

(define-public emacs-treemacs-perspective
  (package
    (name "emacs-treemacs-perspective")
    (version "20230703.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "2c576bebccd56ec8e65f4ec5ed5de864d9684fbf")))
        (sha256
          (base32
            "1if18rdzp1cw01mx3yy6wdn7iq0n9r0wp2h4inx74hpssrsidn2c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-treemacs
            emacs-perspective
            emacs-dash))
    (arguments
      '(#:files ("src/extra/treemacs-perspective.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Perspective integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-perspective")
    (license #f)))

(define-public emacs-treemacs-projectile
  (package
    (name "emacs-treemacs-projectile")
    (version "20230703.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "2c576bebccd56ec8e65f4ec5ed5de864d9684fbf")))
        (sha256
          (base32
            "1if18rdzp1cw01mx3yy6wdn7iq0n9r0wp2h4inx74hpssrsidn2c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-projectile emacs-treemacs))
    (arguments
      '(#:files ("src/extra/treemacs-projectile.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Projectile integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-projectile")
    (license #f)))

(define-public emacs-treemacs-tab-bar
  (package
    (name "emacs-treemacs-tab-bar")
    (version "20230703.1929")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Alexander-Miller/treemacs.git")
               (commit
                 "2c576bebccd56ec8e65f4ec5ed5de864d9684fbf")))
        (sha256
          (base32
            "1if18rdzp1cw01mx3yy6wdn7iq0n9r0wp2h4inx74hpssrsidn2c"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-treemacs emacs-dash))
    (arguments
      '(#:files ("src/extra/treemacs-tab-bar.el")))
    (home-page
      "https://github.com/Alexander-Miller/treemacs")
    (synopsis "Tab bar integration for treemacs")
    (description
      "Documentation at https://melpa.org/#/treemacs-tab-bar")
    (license #f)))

(define-public emacs-treepy
  (package
    (name "emacs-treepy")
    (version "20230715.2154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/volrath/treepy.el.git")
               (commit
                 "75fe3ec37e6f9b2bdfd6d0584efd984d0c00a43e")))
        (sha256
          (base32
            "0crj4522rakbkhffr7hm1rgczcnd8ph0fzm2sz1qkc85680zy86h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/volrath/treepy.el")
    (synopsis "Generic tree traversal tools")
    (description
      "Documentation at https://melpa.org/#/treepy")
    (license #f)))

(define-public emacs-treesit-auto
  (package
    (name "emacs-treesit-auto")
    (version "20231103.2141")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/renzmann/treesit-auto.git")
               (commit
                 "090a74deeff29530dbc0837ec3151dac8aa497e7")))
        (sha256
          (base32
            "0gswbpdnbyjp9jb6mgxsws11dp7nxi02w3f4bqc6d2z4zc7fd16d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/renzmann/treesit-auto.git")
    (synopsis
      "Automatically use tree-sitter enhanced major modes")
    (description
      "Documentation at https://melpa.org/#/treesit-auto")
    (license #f)))

(define-public emacs-treeview
  (package
    (name "emacs-treeview")
    (version "20230728.2343")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tilmanrassy/emacs-treeview.git")
               (commit
                 "c6888e5f3aa0d72a7b4db625fcc2a847fd3bb1ce")))
        (sha256
          (base32
            "1jr9lw7hjwa2cajphy9y19gn3dlacdp1kggp823vpx5p1d5fsvgz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tilmanrassy/emacs-treeview")
    (synopsis "A generic tree navigation library")
    (description
      "Documentation at https://melpa.org/#/treeview")
    (license #f)))

(define-public emacs-trident-mode
  (package
    (name "emacs-trident-mode")
    (version "20190410.2036")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/johnmastro/trident-mode.el.git")
               (commit
                 "109a1bc10bd0c4b47679a6ca5c4cd27c7c8d4ccb")))
        (sha256
          (base32
            "0blbxjaddzhkvzlys46yrzszywmyjkmfhwks52v4laya76rgxm45"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-slime emacs-skewer-mode emacs-dash))
    (home-page
      "https://github.com/johnmastro/trident-mode.el")
    (synopsis "Live Parenscript interaction")
    (description
      "Documentation at https://melpa.org/#/trident-mode")
    (license #f)))

(define-public emacs-trinary
  (package
    (name "emacs-trinary")
    (version "20230301.2044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-elsa/trinary-logic.git")
               (commit
                 "d4869d260f22d13a9a71327a6d40edc6980d022e")))
        (sha256
          (base32
            "17982dsjrm1xcw1fmq64shp4qlydj6v4c4yna24l45q90fhxd6mm"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-elsa/trinary-logic")
    (synopsis "Trinary logic")
    (description
      "Documentation at https://melpa.org/#/trinary")
    (license #f)))

(define-public emacs-tron-legacy-theme
  (package
    (name "emacs-tron-legacy-theme")
    (version "20230506.1037")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianyepan/tron-legacy-emacs-theme.git")
               (commit
                 "c707baf08516f69a88ca2f494a9556ac6d1986f4")))
        (sha256
          (base32
            "0ibvx8zqym0g9jalmill5514gr24b4yslns4lzcqxr1s7ibs671r"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianpan870102/tron-legacy-emacs-theme")
    (synopsis
      "An original retro-futuristic theme inspired by Tron: Legacy")
    (description
      "Documentation at https://melpa.org/#/tron-legacy-theme")
    (license #f)))

(define-public emacs-trr
  (package
    (name "emacs-trr")
    (version "20191019.1403")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/emacs-trr.git")
               (commit
                 "f841173e11213ac6916b2d3394b28fb202543871")))
        (sha256
          (base32
            "1s1rh1kz0r8cnsbjjsd61lz7wzf8kzhvbqimhglryckzjsn9jfmf"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "record" "text" "CONTENTS")))
    (home-page "unspecified")
    (synopsis
      "a type-writing training program on GNU Emacs.")
    (description
      "Documentation at https://melpa.org/#/trr")
    (license #f)))

(define-public emacs-truthy
  (package
    (name "emacs-truthy")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/truthy.git")
               (commit
                 "8ed8d07772aa8457554547eb17e264b5df2b4a69")))
        (sha256
          (base32
            "1mm6rrprsmx4hc622qmllm7c81yhwbqmdr0n6020krq92zmilmlm"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-list-utils))
    (home-page
      "http://github.com/rolandwalker/truthy")
    (synopsis "Test the content of a value")
    (description
      "Documentation at https://melpa.org/#/truthy")
    (license #f)))

(define-public emacs-try
  (package
    (name "emacs-try")
    (version "20181204.236")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/larstvei/Try.git")
               (commit
                 "8831ded1784df43a2bd56c25ad3d0650cdb9df1d")))
        (sha256
          (base32
            "0y26ybdsljph49w2834wssxgdx8ij7b6v4gp8jpgnbx118gr4jsz"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/larstvei/try")
    (synopsis "Try out Emacs packages.")
    (description
      "Documentation at https://melpa.org/#/try")
    (license #f)))

(define-public emacs-ts
  (package
    (name "emacs-ts")
    (version "20220822.2313")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/ts.el.git")
               (commit
                 "552936017cfdec89f7fc20c254ae6b37c3f22c5b")))
        (sha256
          (base32
            "18lif159zndl19ddz9rfq12l90770858yasfns21ryl1yrq3aifr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "http://github.com/alphapapa/ts.el")
    (synopsis "Timestamp and date/time library")
    (description
      "Documentation at https://melpa.org/#/ts")
    (license #f)))

(define-public emacs-ts-comint
  (package
    (name "emacs-ts-comint")
    (version "20181219.719")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-typescript/ts-comint.git")
               (commit
                 "786b88fffc553e122868a1c4883f14136a040df6")))
        (sha256
          (base32
            "1103gb66db91rnqvs1adqzdsgjh14apb171zghd1dzswhjgiff8q"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/josteink/ts-comint")
    (synopsis
      "Run a Typescript interpreter in an inferior process window.")
    (description
      "Documentation at https://melpa.org/#/ts-comint")
    (license #f)))

(define-public emacs-tsc
  (package
    (name "emacs-tsc")
    (version "20220212.1632")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-tree-sitter/elisp-tree-sitter.git")
               (commit
                 "3cfab8a0e945db9b3df84437f27945746a43cc71")))
        (sha256
          (base32
            "0flqsf3nly7s261vss56havss13psgbw98612yj2xkfk9sydia28"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("core/*.el"
         "core/Cargo.toml"
         "core/Cargo.lock"
         "core/src")))
    (home-page
      "https://github.com/emacs-tree-sitter/elisp-tree-sitter")
    (synopsis "Core Tree-sitter APIs")
    (description
      "Documentation at https://melpa.org/#/tsc")
    (license #f)))

(define-public emacs-tsort
  (package
    (name "emacs-tsort")
    (version "20231027.334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ehawkvu/tsort.el.git")
               (commit
                 "3f9cffdbd4ac83a6a69dd4ccbb135e95950494ad")))
        (sha256
          (base32
            "0zssgrkzsn3q2g8ayhs31c408yhsggmyrzfscklvvdhmgg5qcabj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page "https://github.com/ehawkvu/tsort.el")
    (synopsis "Topological sort for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/tsort")
    (license #f)))

(define-public emacs-tss
  (package
    (name "emacs-tss")
    (version "20150913.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-tss.git")
               (commit
                 "81ac6351a2ae258fd0ebf916dae9bd5a179fefd0")))
        (sha256
          (base32
            "1bk5v9dffs65qsay0dp336s2ly065nd0cg572zz058ikwxd44zd3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-json-mode
            emacs-log4e
            emacs-yaxception))
    (home-page "https://github.com/aki2o/emacs-tss")
    (synopsis
      "provide a interface for auto-complete.el/flymake.el on typescript-mode.")
    (description
      "Documentation at https://melpa.org/#/tss")
    (license #f)))

(define-public emacs-tt-mode
  (package
    (name "emacs-tt-mode")
    (version "20130804.1110")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davorg/tt-mode.git")
               (commit
                 "85ed3832e7eef391f7879d9990d59c7a3493c15e")))
        (sha256
          (base32
            "1gvqxk67cf779szyg907815i4m9jzrpmn5cnsmnwd62k3r3z4nxm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs major mode for editing Template Toolkit files.")
    (description
      "Documentation at https://melpa.org/#/tt-mode")
    (license #f)))

(define-public emacs-ttl-mode
  (package
    (name "emacs-ttl-mode")
    (version "20170920.1329")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nxg/ttl-mode.git")
               (commit
                 "8aa647178942c9be58e5c9cea1e6ede30c8fd562")))
        (sha256
          (base32
            "0sy8v6m4769390mj8qws106m4vky0hkc3dqg5142icsqiybhmsw0"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ttl-mode.el.in")))
    (home-page "unspecified")
    (synopsis "mode for Turtle (and Notation 3)")
    (description
      "Documentation at https://melpa.org/#/ttl-mode")
    (license #f)))

(define-public emacs-tuareg
  (package
    (name "emacs-tuareg")
    (version "20231009.2143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ocaml/tuareg.git")
               (commit
                 "1d53723e39f22ab4ab76d31f2b188a2879305092")))
        (sha256
          (base32
            "05afiixj9ag3r36k4xhfizb7frldc2g6i3jr3mxmdgnbm08r3l2v"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-caml))
    (home-page "https://github.com/ocaml/tuareg")
    (synopsis "OCaml mode")
    (description
      "Documentation at https://melpa.org/#/tuareg")
    (license #f)))

(define-public emacs-tubestatus
  (package
    (name "emacs-tubestatus")
    (version "20220620.2028")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smallwat3r/tubestatus.el.git")
               (commit
                 "bf722d441ff96ff8fac6c8d2a798e283fef5613b")))
        (sha256
          (base32
            "08cwyabcb0qzydsw14n9vk93y471yp8cyif9pcbmx2qrr9kd07xa"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/smallwat3r/tubestatus.el")
    (synopsis "Get the London Tube service status")
    (description
      "Documentation at https://melpa.org/#/tubestatus")
    (license #f)))

(define-public emacs-tumble
  (package
    (name "emacs-tumble")
    (version "20160112.729")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/febuiles/tumble.git")
               (commit
                 "e8fd7643cccf2b6ea4170f0c5f1f87d007e7fa00")))
        (sha256
          (base32
            "1xdkgvr1pnlg3nrjmma4ra80ysr8xbslvczg7cq1x1mqw6gn9xq5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-http-post-simple))
    (home-page "unspecified")
    (synopsis "an Tumblr mode for Emacs")
    (description
      "Documentation at https://melpa.org/#/tumble")
    (license #f)))

(define-public emacs-tumblesocks
  (package
    (name "emacs-tumblesocks")
    (version "20191014.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gcr/tumblesocks.git")
               (commit
                 "0e4c3847e31a59d405b9927107a23dde9531d744")))
        (sha256
          (base32
            "1gns60yj1ylm87456gzwr0gy0kivp5bd290rg6d8xbc86jdcls19"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-htmlize
            emacs-oauth
            emacs-markdown-mode))
    (home-page "http://github.com/gcr/tumblesocks")
    (synopsis "An Emacs tumblr client.")
    (description
      "Documentation at https://melpa.org/#/tumblesocks")
    (license #f)))

(define-public emacs-turing-machine
  (package
    (name "emacs-turing-machine")
    (version "20180222.438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dieggsy/turing-machine.git")
               (commit
                 "fa60b76a5bac1f54b7a1b3dc55aae7602c7e385b")))
        (sha256
          (base32
            "0k1r0zkcr44kiki8cvdqwx09xpvpz7nkbq9w6i4gqy5h78zy5k79"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/therockmandolinist/turing-machine")
    (synopsis "Single-tape Turing machine simulator")
    (description
      "Documentation at https://melpa.org/#/turing-machine")
    (license #f)))

(define-public emacs-turkish
  (package
    (name "emacs-turkish")
    (version "20170910.1511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emres/turkish-mode.git")
               (commit
                 "9831a316c176bb21a1b91226323ea4133163e00c")))
        (sha256
          (base32
            "0nrxi845gd24d5vymbmxz696jwld4rn6nw2dz1gzmdaks7bbv87m"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.denizyuret.com/2006/11/emacs-turkish-mode.html")
    (synopsis
      "Convert to Turkish characters on-the-fly")
    (description
      "Documentation at https://melpa.org/#/turkish")
    (license #f)))

(define-public emacs-turnip
  (package
    (name "emacs-turnip")
    (version "20150309.629")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kljohann/turnip.el.git")
               (commit
                 "2fd32562fc6fc1cda6d91aa939cfb29f9b16e9de")))
        (sha256
          (base32
            "0khl4q22x6vdn87xdqqg5f535d4dqpnfbhk6qhlh187p1w7qaiq4"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page "unspecified")
    (synopsis "Interacting with tmux from Emacs")
    (description
      "Documentation at https://melpa.org/#/turnip")
    (license #f)))

(define-public emacs-twig-mode
  (package
    (name "emacs-twig-mode")
    (version "20130220.1850")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/moljac024/twig-mode.git")
               (commit
                 "2849f273a4855d3314a9c0cc84134f5b28ad5ea6")))
        (sha256
          (base32
            "0wvmih2y3hy7casxx2y1w8csmzfnfgbb5ivpggr94sc86p6bg8sa"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A major mode for twig")
    (description
      "Documentation at https://melpa.org/#/twig-mode")
    (license #f)))

(define-public emacs-twilight-anti-bright-theme
  (package
    (name "emacs-twilight-anti-bright-theme")
    (version "20160622.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimeh/twilight-anti-bright-theme.git")
               (commit
                 "523b95fcdbf4a6a6483af314ad05354a3d80f23f")))
        (sha256
          (base32
            "0g6qqfgbg507r8lgq99zj2b5n3r9m23hpx19m36c3i55mh94dl2h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimeh/twilight-anti-bright-theme.el")
    (synopsis
      "A soothing Emacs 24 light-on-dark theme")
    (description
      "Documentation at https://melpa.org/#/twilight-anti-bright-theme")
    (license #f)))

(define-public emacs-twilight-bright-theme
  (package
    (name "emacs-twilight-bright-theme")
    (version "20130605.843")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jimeh/twilight-bright-theme.el.git")
               (commit
                 "322157cb2f3bf7920ecd209dafc31bc1c7959f49")))
        (sha256
          (base32
            "1awqc4rvg8693myynb1d4y4dfdaxkd5blnixxs3mdv81l07zyn8c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jimeh/twilight-bright-theme.el")
    (synopsis
      "A Emacs 24 faces port of the TextMate theme")
    (description
      "Documentation at https://melpa.org/#/twilight-bright-theme")
    (license #f)))

(define-public emacs-twilight-theme
  (package
    (name "emacs-twilight-theme")
    (version "20120412.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/developernotes/twilight-theme.git")
               (commit
                 "77c4741cb3dcf16e53d06d6c2ffdc660c40afb5b")))
        (sha256
          (base32
            "0d7vd1h0rwwgrh7f9kmdgy2ni0p20da9c8ylwlg33nsb26345wfs"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Twilight theme for GNU Emacs 24 (deftheme)")
    (description
      "Documentation at https://melpa.org/#/twilight-theme")
    (license #f)))

(define-public emacs-twitch-api
  (package
    (name "emacs-twitch-api")
    (version "20220420.1547")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/BenediktBroich/twitch-api.git")
               (commit
                 "181681097d1fc8d7b78928f8a5b38c61d0e20ef5")))
        (sha256
          (base32
            "14b8a22jbrnj42iva3mjb66j5w6zj0kd6dyk8pjkk22915w0jwcj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/BenediktBroich/twitch-api")
    (synopsis
      "An elisp interface for the Twitch.tv API")
    (description
      "Documentation at https://melpa.org/#/twitch-api")
    (license #f)))

(define-public emacs-twittering-mode
  (package
    (name "emacs-twittering-mode")
    (version "20181121.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hayamiz/twittering-mode.git")
               (commit
                 "114891e8fdb4f06b1326a6cf795e49c205cf9e29")))
        (sha256
          (base32
            "1dsqfh0yjy3hgjg9aa92fm4dkmmr1cdw1k8131zc67792gwh6y9v"))))
    (build-system melpa-build-system)
    (home-page "http://twmode.sf.net/")
    (synopsis "Major mode for Twitter")
    (description
      "Documentation at https://melpa.org/#/twittering-mode")
    (license #f)))

(define-public emacs-twtxt
  (package
    (name "emacs-twtxt")
    (version "20220628.309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deadblackclover/twtxt-el.git")
               (commit
                 "eb9efa19086fcae343353f6a5e88c3377fd06dd4")))
        (sha256
          (base32
            "142kjwh5ya237j10hj6kvm28d22l8vmhbaahpn87bl70lcpqv3fb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page
      "https://github.com/deadblackclover/twtxt-el")
    (synopsis "A twtxt client for Emacs")
    (description
      "Documentation at https://melpa.org/#/twtxt")
    (license #f)))

(define-public emacs-typescript-mode
  (package
    (name "emacs-typescript-mode")
    (version "20230116.1533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-typescript/typescript.el.git")
               (commit
                 "4fcb4594819caf472ae42ea068a1c7795cf07f46")))
        (sha256
          (base32
            "12vw5mjl8d4cfv0z46180llmwdwfqrfp88p1fvgp2viizwmw03ym"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/ananthakumaran/typescript.el")
    (synopsis "Major mode for editing typescript")
    (description
      "Documentation at https://melpa.org/#/typescript-mode")
    (license #f)))

(define-public emacs-typewriter-roll-mode
  (package
    (name "emacs-typewriter-roll-mode")
    (version "20231009.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/KeyWeeUsr/typewriter-roll-mode.git")
               (commit
                 "3114d05731517d40972e2ed896806b25bdc0d8c2")))
        (sha256
          (base32
            "0ns5warzk9hy4wivw5qc51lj95ik66wv4d82qxr49grrmy47924f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/KeyWeeUsr/typewriter-roll-mode")
    (synopsis "Aid for distraction-free writing")
    (description
      "Documentation at https://melpa.org/#/typewriter-roll-mode")
    (license #f)))

(define-public emacs-typing
  (package
    (name "emacs-typing")
    (version "20180830.2203")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kensanata/typing.git")
               (commit
                 "a2ef25dde2d8eb91bd9c0c6164cb5208208647fa")))
        (sha256
          (base32
            "1dbh0srbf54lgd60ia79y9cfnq3kxlgw01qzdjs9mk3nfazzpgnv"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/TypingOfEmacs")
    (synopsis "The Typing Of Emacs")
    (description
      "Documentation at https://melpa.org/#/typing")
    (license #f)))

(define-public emacs-typing-game
  (package
    (name "emacs-typing-game")
    (version "20160426.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/el-typing-game.git")
               (commit
                 "616435a5270274f4c7b698697674dbb2039049a4")))
        (sha256
          (base32
            "0dkrnn9fzqv793wvd3nc7dbslayj37q5na1w1g63g32z2s8aq09j"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "a simple typing game")
    (description
      "Documentation at https://melpa.org/#/typing-game")
    (license #f)))

(define-public emacs-typit
  (package
    (name "emacs-typit")
    (version "20220909.1233")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/typit.git")
               (commit
                 "6ad0d5a106c4a4428fd131653bbe7c0aab4b5f60")))
        (sha256
          (base32
            "0pbyy1cd98x000wrmqvdrbyj69vh6njr5ax4mgj9am1w3gik1s3s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f emacs-mmt))
    (arguments '(#:files (:defaults "dict")))
    (home-page "https://github.com/mrkkrp/typit")
    (synopsis
      "Typing game similar to tests on 10 fast fingers")
    (description
      "Documentation at https://melpa.org/#/typit")
    (license #f)))

(define-public emacs-typo
  (package
    (name "emacs-typo")
    (version "20200706.1714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/typoel.git")
               (commit
                 "173ebe4fc7ac38f344b16e6eaf41f79e38f20d57")))
        (sha256
          (base32
            "09835zlfzxby5lpz9njl705nqc2n2h2f7a4vpcyx89f5rb9qhy68"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jorgenschaefer/typoel")
    (synopsis "Minor mode for typographic editing")
    (description
      "Documentation at https://melpa.org/#/typo")
    (license #f)))

(define-public emacs-typo-suggest
  (package
    (name "emacs-typo-suggest")
    (version "20200830.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kadircancetin/typo-suggest.git")
               (commit
                 "3014d18ae2f0b6b857bb613f373e034c743f4d2e")))
        (sha256
          (base32
            "0pbmmwk5qh1ld9yzy4vxxp9ix4kzw9m71qjwqz0fqw3md9xlr6z6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm
            emacs-company
            emacs-s
            emacs-dash))
    (home-page
      "https://github.com/kadircancetin/typo-suggest")
    (synopsis
      "Don't make typos with the help of helm and company")
    (description
      "Documentation at https://melpa.org/#/typo-suggest")
    (license #f)))

(define-public emacs-tzc
  (package
    (name "emacs-tzc")
    (version "20230504.445")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/md-arif-shaikh/tzc.git")
               (commit
                 "e815b43790d9a517f89a2bb592c665bd911a4477")))
        (sha256
          (base32
            "03bl4mfvmf5zkybl38j73zmq523ykafj81md83fimjnd57zlbml3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/md-arif-shaikh/tzc")
    (synopsis
      "Converts time between different time zones")
    (description
      "Documentation at https://melpa.org/#/tzc")
    (license #f)))

(define-public emacs-ubuntu-theme
  (package
    (name "emacs-ubuntu-theme")
    (version "20150805.1506")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rocher/ubuntu-theme.git")
               (commit
                 "88b0eefc75d4cbcde103057e1c5968d4c3052f69")))
        (sha256
          (base32
            "1v8d1pc0vjc7wz0prr5w5vp2qb19f3gcyl6jx5130plajbvv23rc"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rocher/ubuntu-theme")
    (synopsis
      "A theme inspired by the default terminal colors in Ubuntu")
    (description
      "Documentation at https://melpa.org/#/ubuntu-theme")
    (license #f)))

(define-public emacs-uci-mode
  (package
    (name "emacs-uci-mode")
    (version "20210626.1956")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dwcoates/uci-mode.git")
               (commit
                 "2cdf4de5af96d56108a0a5716416ef3c8ac7bb7c")))
        (sha256
          (base32
            "133vrnbann0ibsm14h7ghdx8f9i92niazbw8r49srx2xx0jv3lk6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dwcoates/uci-mode")
    (synopsis
      "Major-mode for chess engine interaction")
    (description
      "Documentation at https://melpa.org/#/uci-mode")
    (license #f)))

(define-public emacs-ucs-utils
  (package
    (name "emacs-ucs-utils")
    (version "20230119.2237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/ucs-utils.git")
               (commit
                 "91b9e0207fff5883383fd39c45ad5522e9b90e65")))
        (sha256
          (base32
            "18yqzy8w4icp60z25ckbrx6wradm3m26vic35kmzr88msc0qdsva"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-persistent-soft
            emacs-pcache
            emacs-list-utils))
    (home-page
      "http://github.com/rolandwalker/ucs-utils")
    (synopsis "Utilities for Unicode characters")
    (description
      "Documentation at https://melpa.org/#/ucs-utils")
    (license #f)))

(define-public emacs-udev-mode
  (package
    (name "emacs-udev-mode")
    (version "20200702.1536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benley/emacs-udev-mode.git")
               (commit
                 "5ca236980662141518603672ebdbdf863756da5a")))
        (sha256
          (base32
            "15nspdkjwbvxbqxlhmpsbhdf1zij9zd2z2xxhkmvdyjy89w0hyzp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/benley/emacs-udev-mode")
    (synopsis
      "Major mode for editing udev rules files")
    (description
      "Documentation at https://melpa.org/#/udev-mode")
    (license #f)))

(define-public emacs-ue
  (package
    (name "emacs-ue")
    (version "20210929.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/unrealemacs/ue.el.git")
               (commit
                 "7819d5b78e5b52a09b36c634ce404dc8bc3711ef")))
        (sha256
          (base32
            "0rl71y6mzfcfymkimin18pnfhsa1wb906jywr5jx8b0nwkxk227n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://gitlab.com/unrealemacs/ue.el")
    (synopsis
      "Minor mode for Unreal Engine projects")
    (description
      "Documentation at https://melpa.org/#/ue")
    (license #f)))

(define-public emacs-uimage
  (package
    (name "emacs-uimage")
    (version "20160901.1221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/uimage.git")
               (commit
                 "9893d09160ef7e8c0ecdcd74fca99ffeb5f9d70d")))
        (sha256
          (base32
            "1ri50nab778kpq49m54ra75z8dphagp9sz92is0636j4qy3sbih1"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "An iimage like mode with the ability to display url images")
    (description
      "Documentation at https://melpa.org/#/uimage")
    (license #f)))

(define-public emacs-ujelly-theme
  (package
    (name "emacs-ujelly-theme")
    (version "20180214.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/marktran/color-theme-ujelly.git")
               (commit
                 "bf724ce7806a738d2043544061e5f9bbfc56e674")))
        (sha256
          (base32
            "0pz26q5qfq4wiqcpfkq26f19q5gyiv8q71sq4k77hkss5a5b5fqg"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/marktran/color-theme-ujelly")
    (synopsis
      "Ujelly theme for GNU Emacs 24 (deftheme)")
    (description
      "Documentation at https://melpa.org/#/ujelly-theme")
    (license #f)))

(define-public emacs-ukrainian-holidays
  (package
    (name "emacs-ukrainian-holidays")
    (version "20130720.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/ukrainian-holidays.git")
               (commit
                 "e52b0c92843e9f4d0415a7ba3b8559785497d23d")))
        (sha256
          (base32
            "033v4ck979lhkpwblci5clacfc1xnkq03p5d1m566wff8dp5flwz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abo-abo/ukrainian-holidays")
    (synopsis
      "Ukrainian holidays for Emacs calendar.")
    (description
      "Documentation at https://melpa.org/#/ukrainian-holidays")
    (license #f)))

(define-public emacs-uml-mode
  (package
    (name "emacs-uml-mode")
    (version "20200129.1147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianxm/emacs-uml.git")
               (commit
                 "4c37ac1c4424b2313cd8f16ba48a98a4cc214200")))
        (sha256
          (base32
            "145i4srnfvd1vyibri2a1l6p9mbjvkkwlrpi41134pbarqffcnka"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/ianxm/emacs-uml")
    (synopsis
      "Minor mode for ascii uml sequence diagrams")
    (description
      "Documentation at https://melpa.org/#/uml-mode")
    (license #f)))

(define-public emacs-uncrustify-mode
  (package
    (name "emacs-uncrustify-mode")
    (version "20130707.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/koko1000ban/emacs-uncrustify-mode.git")
               (commit
                 "73893d000361e95784911e5ec268ad0ab2a1473c")))
        (sha256
          (base32
            "0366h4jfi0c7yda9wcrz4zxgf2qqdd08b8z2dr8c1rkvkdd67iam"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Minor mode to automatically uncrustify.")
    (description
      "Documentation at https://melpa.org/#/uncrustify-mode")
    (license #f)))

(define-public emacs-undercover
  (package
    (name "emacs-undercover")
    (version "20210602.2119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/undercover-el/undercover.el.git")
               (commit
                 "1d3587f1fad66a747688f36636b67b33b73447d3")))
        (sha256
          (base32
            "0qmvyy3xg5qi7ws8zcs934d6afsappr1a6pgfp796xpa9vdr4y6j"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash emacs-shut-up))
    (home-page
      "https://github.com/sviridov/undercover.el")
    (synopsis "Test coverage library for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/undercover")
    (license #f)))

(define-public emacs-underline-with-char
  (package
    (name "emacs-underline-with-char")
    (version "20191128.2309")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/marcowahl/underline-with-char.git")
               (commit
                 "36577e72aa4fbfa7f1abad01842359209f543751")))
        (sha256
          (base32
            "14ybav1f82m2gsxkciwlc0pm01ihqqaqq6arnjqvgxdnw0z6qniq"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/marcowahl/underline-with-char")
    (synopsis "Underline with a char")
    (description
      "Documentation at https://melpa.org/#/underline-with-char")
    (license #f)))

(define-public emacs-undersea-theme
  (package
    (name "emacs-undersea-theme")
    (version "20220616.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/undersea-theme.git")
               (commit
                 "6bc351c4cb49ccc7210801e6b54ecc2993289b92")))
        (sha256
          (base32
            "0vvz0s5jq2a9dlqbnq18mlkh4dkpp8kizkjyn7jk38npqy4syyv1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jcs-elpa/undersea-theme")
    (synopsis "Theme styled after undersea imagery")
    (description
      "Documentation at https://melpa.org/#/undersea-theme")
    (license #f)))

(define-public emacs-underwater-theme
  (package
    (name "emacs-underwater-theme")
    (version "20131118.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmdeldin/underwater-theme.el.git")
               (commit
                 "4eb9ef014f580adc135d91d1cd68d37a310640b6")))
        (sha256
          (base32
            "1ypxpv5vw2ls757iwrq3zld6k0s29q3kg3spcsl5ks4aqpnkxpva"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A gentle, deep blue color theme")
    (description
      "Documentation at https://melpa.org/#/underwater-theme")
    (license #f)))

(define-public emacs-undo-fu
  (package
    (name "emacs-undo-fu")
    (version "20230808.1340")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/undo-fu-"
               version
               ".tar"))
        (sha256
          (base32
            "1svzn6xm6mr1nh28liniks4665n6rigxk6ix1fxvqh9jpvgyd0y9"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-undo-fu")
    (synopsis "Undo helper with redo")
    (description
      "Documentation at https://melpa.org/#/undo-fu")
    (license #f)))

(define-public emacs-undo-fu-session
  (package
    (name "emacs-undo-fu-session")
    (version "20230703.2353")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/undo-fu-session-"
               version
               ".tar"))
        (sha256
          (base32
            "1p6x2dbghx6xz26ch9jlcifi62v3zkrhhyaqynsrd0fg7q2y5vyl"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.com/ideasman42/emacs-undo-fu-session")
    (synopsis
      "Persistent undo, available between sessions")
    (description
      "Documentation at https://melpa.org/#/undo-fu-session")
    (license #f)))

(define-public emacs-undo-propose
  (package
    (name "emacs-undo-propose")
    (version "20210207.45")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jackkamm/undo-propose-el.git")
               (commit
                 "91a1dfe516d90dab69c368f6669bacb2458ec5e9")))
        (sha256
          (base32
            "15rmg7gl4yz3kfb1096fq20y0fnfc35jmppg7nl4vi71xv4db35d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jackkamm/undo-propose.el")
    (synopsis "Simple and safe undo navigation")
    (description
      "Documentation at https://melpa.org/#/undo-propose")
    (license #f)))

(define-public emacs-undohist
  (package
    (name "emacs-undohist")
    (version "20230508.1226")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/undohist.git")
               (commit
                 "6bc08309a669198e3fb49f4d653710306db235c6")))
        (sha256
          (base32
            "1fsgxn8vdr8lmgzprxwqcbz88299k47n87hlll282xwzs7c5glsd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Persistent undo history for GNU Emacs")
    (description
      "Documentation at https://melpa.org/#/undohist")
    (license #f)))

(define-public emacs-unfill
  (package
    (name "emacs-unfill")
    (version "20230227.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/unfill.git")
               (commit
                 "075052ce0b4451d7d3ede013ce5a77e6a7a92360")))
        (sha256
          (base32
            "06wa1f3j0l2bqsqm05zfix6sl74mw3kx7vgd1d23yddz37vkcvr8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/purcell/unfill")
    (synopsis
      "Do the opposite of fill-paragraph or fill-region")
    (description
      "Documentation at https://melpa.org/#/unfill")
    (license #f)))

(define-public emacs-unicad
  (package
    (name "emacs-unicad")
    (version "20230903.1356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ukari/unicad.git")
               (commit
                 "fcc220703798d140c86711e2feeb299fd765b5b5")))
        (sha256
          (base32
            "017yksni5rrm62hn94ig99nsf84s9qlmfq7m16l2q2383jx10cin"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ukari/unicad")
    (synopsis
      "An elisp port of Mozilla Universal Charset Auto Detector")
    (description
      "Documentation at https://melpa.org/#/unicad")
    (license #f)))

(define-public emacs-unicode-emoticons
  (package
    (name "emacs-unicode-emoticons")
    (version "20150204.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hagleitn/unicode-emoticons.git")
               (commit
                 "fb18631f342b0243cf77cf59ed2067c47aae5233")))
        (sha256
          (base32
            "015gjf8chd6h9azhyarmskk41cm0cmg981jif7q81hakl9av6rhh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/hagleitn/unicode-emoticons")
    (synopsis
      "Shortcuts for common unicode emoticons")
    (description
      "Documentation at https://melpa.org/#/unicode-emoticons")
    (license #f)))

(define-public emacs-unicode-enbox
  (package
    (name "emacs-unicode-enbox")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-enbox.git")
               (commit
                 "77074fac1994a4236f111d6a1d0cf79ea3fca151")))
        (sha256
          (base32
            "0936dqxyp72if9wvn2dcci670yp1gqrmpnll9xq00skp85yq9zs5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-string-utils
            emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-enbox")
    (synopsis
      "Surround a string with box-drawing characters")
    (description
      "Documentation at https://melpa.org/#/unicode-enbox")
    (license #f)))

(define-public emacs-unicode-escape
  (package
    (name "emacs-unicode-escape")
    (version "20230109.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kosh04/unicode-escape.el.git")
               (commit
                 "6dba86737dd86672ad5b8d48d30e3a1393f0cc15")))
        (sha256
          (base32
            "0pfcxl0riqwnij7i2hcqhq5mkdnf5hwqhizd8qixgjyrpr5b78ph"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-names emacs-dash))
    (home-page
      "https://github.com/kosh04/unicode-escape.el")
    (synopsis "Escape/Unescape unicode notations")
    (description
      "Documentation at https://melpa.org/#/unicode-escape")
    (license #f)))

(define-public emacs-unicode-fonts
  (package
    (name "emacs-unicode-fonts")
    (version "20230926.1502")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-fonts.git")
               (commit
                 "6245b97d8ddaeaf1de4dbe2cd85ca0f3b20ef81b")))
        (sha256
          (base32
            "1ckcvy10sz4qvjy1bqrpvaijw92q2da4b6bxbgxaxvrw5d0ih81f"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-font-utils
            emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-fonts")
    (synopsis "Configure Unicode fonts")
    (description
      "Documentation at https://melpa.org/#/unicode-fonts")
    (license #f)))

(define-public emacs-unicode-math-input
  (package
    (name "emacs-unicode-math-input")
    (version "20220302.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/astoff/unicode-math-input.el.git")
               (commit
                 "06bf37d649fc3b41fcd5fa29c0b0eda555aaf8bb")))
        (sha256
          (base32
            "0i6qyc5jl1151dyp95wjx7f7fs4m0pb7qnlb6skr33rrfl1icmpn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/astoff/unicode-math-input.el")
    (synopsis
      "Insert Unicode math symbols using TeX notation")
    (description
      "Documentation at https://melpa.org/#/unicode-math-input")
    (license #f)))

(define-public emacs-unicode-progress-reporter
  (package
    (name "emacs-unicode-progress-reporter")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-progress-reporter.git")
               (commit
                 "5e66724fd7d15743213b082474d798117b194494")))
        (sha256
          (base32
            "16jgm70ldsngxldiagjkw3ragypalpiidnf82g5hss9ciybkd3j4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-progress-reporter")
    (synopsis
      "Progress-reporter with fancy characters")
    (description
      "Documentation at https://melpa.org/#/unicode-progress-reporter")
    (license #f)))

(define-public emacs-unicode-troll-stopper
  (package
    (name "emacs-unicode-troll-stopper")
    (version "20190209.411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/camsaul/emacs-unicode-troll-stopper.git")
               (commit
                 "5e8be35a7bf6382384a701663f7438ee27e4b67c")))
        (sha256
          (base32
            "0xjh017kjhj93j72r5hdpiabv76szlmpivlfyhg9vzysdmix45qv"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/camsaul/emacs-unicode-troll-stopper")
    (synopsis
      "Minor mode for Highlighting Unicode homoglyphs")
    (description
      "Documentation at https://melpa.org/#/unicode-troll-stopper")
    (license #f)))

(define-public emacs-unicode-whitespace
  (package
    (name "emacs-unicode-whitespace")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/unicode-whitespace.git")
               (commit
                 "a18c6b38d78b94f2eb1dcc4cb4fa91b6a17efabe")))
        (sha256
          (base32
            "1ayb15nd5vqr0xaghrnp55kqw7bblrjipmfrag6bqpn7jk9bvbdz"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ucs-utils
            emacs-list-utils
            emacs-persistent-soft
            emacs-pcache))
    (home-page
      "http://github.com/rolandwalker/unicode-whitespace")
    (synopsis
      "teach whitespace-mode about fancy characters")
    (description
      "Documentation at https://melpa.org/#/unicode-whitespace")
    (license #f)))

(define-public emacs-unidecode
  (package
    (name "emacs-unidecode")
    (version "20201213.1449")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sindikat/unidecode.git")
               (commit
                 "525b51b38f5b0435642005957740fe22ecb2a53c")))
        (sha256
          (base32
            "1jfaxz6z5lb24hygd7nx2a55blfbcf03225lc8ni2fbmkxx4dkir"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "data")))
    (home-page "unspecified")
    (synopsis "Transliterate Unicode to ASCII")
    (description
      "Documentation at https://melpa.org/#/unidecode")
    (license #f)))

(define-public emacs-unifdef
  (package
    (name "emacs-unifdef")
    (version "20200517.514")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lindydancer/unifdef.git")
               (commit
                 "7a4b76f664c4375e3d98e8af0a29270752c13701")))
        (sha256
          (base32
            "0xx954cyvzndj7fy6k203nlnhaxi6d0pn3xrvy287dh9ydklng0m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Lindydancer/unifdef")
    (synopsis
      "Delete code guarded by processor directives")
    (description
      "Documentation at https://melpa.org/#/unifdef")
    (license #f)))

(define-public emacs-unify-opening
  (package
    (name "emacs-unify-opening")
    (version "20230903.844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/unify-opening.git")
               (commit
                 "282ce0e35ecebbe602bec6f8d64f0192d8a18342")))
        (sha256
          (base32
            "0iss574hkbm5q0zbxdimz409vchbgzbzz3f4j2inkm8jn2hfw90n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DamienCassou/unify-opening")
    (synopsis "Unify the mechanism to open files")
    (description
      "Documentation at https://melpa.org/#/unify-opening")
    (license #f)))

(define-public emacs-unipoint
  (package
    (name "emacs-unipoint")
    (version "20140113.2224")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/apg/unipoint.git")
               (commit
                 "5da04aebac35a5c9e1d8704f2231808d42f4b36a")))
        (sha256
          (base32
            "1wl9rzys1zr2c41h5i57y6hxsavix1b26f453l2izmb6r0b1dvh0"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/apgwoz/unipoint")
    (synopsis
      "a simple way to insert unicode characters by TeX name")
    (description
      "Documentation at https://melpa.org/#/unipoint")
    (license #f)))

(define-public emacs-unison
  (package
    (name "emacs-unison")
    (version "20160704.740")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/unhammer/unison.el.git")
               (commit
                 "a78a04c0d1398d00f75a1bd4799622a65bcb0f28")))
        (sha256
          (base32
            "1jn23wlhpka5pv0caipxi8bg3cc6wj1fg09abibhydy4p3mb3bi5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/unhammer/unison.el")
    (synopsis "sync with Unison")
    (description
      "Documentation at https://melpa.org/#/unison")
    (license #f)))

(define-public emacs-unison-mode
  (package
    (name "emacs-unison-mode")
    (version "20160513.1501")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/impaktor/unison-mode.git")
               (commit
                 "0bd6a65c0d12f87fcf7bdff15fe54444959b93bf")))
        (sha256
          (base32
            "1snbvhvx2csw1f314dbdwny8yvfq834plpkzx0vl4k3wddmr3a66"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/impaktor/unison-mode")
    (synopsis
      "Syntax highlighting for unison file synchronization program")
    (description
      "Documentation at https://melpa.org/#/unison-mode")
    (license #f)))

(define-public emacs-unisonlang-mode
  (package
    (name "emacs-unisonlang-mode")
    (version "20200803.808")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dariooddenino/unison-mode-emacs.git")
               (commit
                 "2b794adbe0b2a4edd40f350173a32b80bd2c5896")))
        (sha256
          (base32
            "0zy3la6n51kgybjxibcsj13m6381p6klsq98h1sym8mxm2k2s78y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dariooddenino/unison-mode-emacs")
    (synopsis "Simple major mode for editing Unison")
    (description
      "Documentation at https://melpa.org/#/unisonlang-mode")
    (license #f)))

(define-public emacs-units-mode
  (package
    (name "emacs-units-mode")
    (version "20221027.303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Atreyagaurav/units-mode.git")
               (commit
                 "10c8de24180f87b1a8a3b0a9b3fbb29eec925417")))
        (sha256
          (base32
            "0gk0bjmmglr1s82rji8cykvqzfl3r9spv7zxk3m37yjrr9wx9a8l"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Atreyagaurav/units-mode")
    (synopsis
      "Mode for conversion between different units")
    (description
      "Documentation at https://melpa.org/#/units-mode")
    (license #f)))

(define-public emacs-universal-emotions-emoticons
  (package
    (name "emacs-universal-emotions-emoticons")
    (version "20180729.1941")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grettke/universal-emotions-emoticons.git")
               (commit
                 "9cedd09ee65cb9fa71f27b0ab46a8353bdc00902")))
        (sha256
          (base32
            "17blqfnf384l2hd2igrw5p0zblw6bxz69vvzli22nr84kpkh5jx4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/grettke/universal-emotions-emoticons")
    (synopsis
      "Emoticons For The Six Universal Expressions")
    (description
      "Documentation at https://melpa.org/#/universal-emotions-emoticons")
    (license #f)))

(define-public emacs-universal-sidecar
  (package
    (name "emacs-universal-sidecar")
    (version "20231023.219")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/universal-sidecar-"
               version
               ".tar"))
        (sha256
          (base32
            "0h30k1xqhkczd4d69cygb6y46ar12l1dgw6x05wna7nsmp57raxc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magit-section))
    (home-page
      "https://git.sr.ht/~swflint/emacs-universal-sidecar")
    (synopsis "A universal sidecar buffer")
    (description
      "Documentation at https://melpa.org/#/universal-sidecar")
    (license #f)))

(define-public emacs-universal-sidecar-elfeed-related
  (package
    (name "emacs-universal-sidecar-elfeed-related")
    (version "20231023.219")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/universal-sidecar-elfeed-related-"
               version
               ".tar"))
        (sha256
          (base32
            "19kxdandij4489bjqf2s6v30jycbcj1qws5gqxdj0qdlqx4rm396"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-universal-sidecar
            emacs-bibtex-completion
            emacs-elfeed))
    (home-page
      "https://git.sr.ht/~swflint/emacs-universal-sidecar")
    (synopsis
      "Related Papers Sidecar Section for Elfeed")
    (description
      "Documentation at https://melpa.org/#/universal-sidecar-elfeed-related")
    (license #f)))

(define-public emacs-universal-sidecar-elfeed-score
  (package
    (name "emacs-universal-sidecar-elfeed-score")
    (version "20231023.219")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/universal-sidecar-elfeed-score-"
               version
               ".tar"))
        (sha256
          (base32
            "1s809y1c3vmyncmlbspar8ckxhp7sq3imi64zcilhl2vqzlshljc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-universal-sidecar
            emacs-elfeed
            emacs-elfeed-score))
    (home-page
      "https://git.sr.ht/~swflint/emacs-universal-sidecar")
    (synopsis
      "Show Elfeed Score information in sidecar")
    (description
      "Documentation at https://melpa.org/#/universal-sidecar-elfeed-score")
    (license #f)))

(define-public emacs-universal-sidecar-roam
  (package
    (name "emacs-universal-sidecar-roam")
    (version "20231023.219")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/universal-sidecar-roam-"
               version
               ".tar"))
        (sha256
          (base32
            "1hzdlb7163v47sb9009s81vnmbvzdi5a01ial417awj6bryvxli4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-universal-sidecar emacs-org-roam))
    (home-page
      "https://git.sr.ht/~swflint/emacs-universal-sidecar")
    (synopsis
      "Integrate universal-sidecar and org-roam")
    (description
      "Documentation at https://melpa.org/#/universal-sidecar-roam")
    (license #f)))

(define-public emacs-unkillable-scratch
  (package
    (name "emacs-unkillable-scratch")
    (version "20221015.1323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EricCrosson/unkillable-scratch.git")
               (commit
                 "6c752e4cd4762bb4bcde2b0b96f2e83740efd104")))
        (sha256
          (base32
            "1sx2j32xv95hg3wslhqkrs2fcsiyh3rvkrmp9p0bzmim0v7w2p78"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/EricCrosson/unkillable-scratch")
    (synopsis
      "Disallow the \\*scratch\\* buffer from being killed")
    (description
      "Documentation at https://melpa.org/#/unkillable-scratch")
    (license #f)))

(define-public emacs-unmodified-buffer
  (package
    (name "emacs-unmodified-buffer")
    (version "20220129.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arthurcgusmao/unmodified-buffer.git")
               (commit
                 "9095a3f870aa570804a11d75aba0952294199715")))
        (sha256
          (base32
            "1b78m66i00fg4f84kvwd82w3pb2rr3skf6cgckb0g1fsdzzhrjb8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arthurcgusmao/unmodified-buffer")
    (synopsis "Auto revert modified buffer state")
    (description
      "Documentation at https://melpa.org/#/unmodified-buffer")
    (license #f)))

(define-public emacs-unobtrusive-magit-theme
  (package
    (name "emacs-unobtrusive-magit-theme")
    (version "20200411.1349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tee3/unobtrusive-magit-theme.git")
               (commit
                 "aede357009655d19d4468320b2b61b0f26a47593")))
        (sha256
          (base32
            "1af8c7q3vxj23l2ah5waj9hn5pfp66834b4akm76jc5wqf0sr9j1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tee3/unobtrusive-magit-theme")
    (synopsis "An unobtrusive Magit theme")
    (description
      "Documentation at https://melpa.org/#/unobtrusive-magit-theme")
    (license #f)))

(define-public emacs-untappd
  (package
    (name "emacs-untappd")
    (version "20210815.1544")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/smallwat3r/untappd.el.git")
               (commit
                 "493d1776d6456b00bf017e71fac9b0721d8cc912")))
        (sha256
          (base32
            "13p0vr9fnkilw6192gsmz6hi5rx3jqh3dsmqx9siywghj9hfn056"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-emojify))
    (home-page
      "https://github.com/smallwat3r/untappd.el")
    (synopsis "Display your latest Untappd feed")
    (description
      "Documentation at https://melpa.org/#/untappd")
    (license #f)))

(define-public emacs-untitled-new-buffer
  (package
    (name "emacs-untitled-new-buffer")
    (version "20161212.1508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-jp/untitled-new-buffer.el.git")
               (commit
                 "4eabc6937b0e83062ffce9de0d42110224063a6c")))
        (sha256
          (base32
            "139gysva6hpsk006bcbm1689pzaj18smxs2ar5pv0yvkh60wjvlr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-magic-filetype))
    (home-page
      "https://github.com/zonuexe/untitled-new-buffer.el")
    (synopsis
      "Open untitled new buffer like other text editors.")
    (description
      "Documentation at https://melpa.org/#/untitled-new-buffer")
    (license #f)))

(define-public emacs-upbo
  (package
    (name "emacs-upbo")
    (version "20180422.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shiren/upbo.git")
               (commit
                 "1e4b1e7f44f242a6cdcce0c157d07efe667b7bef")))
        (sha256
          (base32
            "16ic97lpw1d9bqcc0fvzv2n62xb5rlpi92cha3jpy7flbp8ys143"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/shiren")
    (synopsis "Karma Test Runner Integration")
    (description
      "Documentation at https://melpa.org/#/upbo")
    (license #f)))

(define-public emacs-uptimes
  (package
    (name "emacs-uptimes")
    (version "20231015.1458")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/davep/uptimes.el.git")
               (commit
                 "84407aba479117344080ebf373e3e9186a96f05c")))
        (sha256
          (base32
            "1q88n13l873397gibfgzj68winnhfw9xfwa4qdlrp57dm09blgbv"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/davep/uptimes.el")
    (synopsis "Track and display session uptimes")
    (description
      "Documentation at https://melpa.org/#/uptimes")
    (license #f)))

(define-public emacs-url-shortener
  (package
    (name "emacs-url-shortener")
    (version "20170805.242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuyang0/url-shortener.git")
               (commit
                 "06db8270213b9e352d6c335b0663059a1353d05e")))
        (sha256
          (base32
            "1ndcajgvfl46zw2iwgghvcldsy9p778pifkhlanivc6azajhpjhh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yuyang0/url-shortener")
    (synopsis "shorten long url and expand tinyurl")
    (description
      "Documentation at https://melpa.org/#/url-shortener")
    (license #f)))

(define-public emacs-urlenc
  (package
    (name "emacs-urlenc")
    (version "20140116.1456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/urlenc-el.git")
               (commit
                 "835a6dcb783bbe84714bae87a3464aa0b128bfac")))
        (sha256
          (base32
            "0xwr0v4f64d7hi5ldig4r5yjn8h3f8by49g5820187lsp7ng2nw4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/buzztaiki/urlenc-el")
    (synopsis
      "URL encoding/decoding utility for Emacs.")
    (description
      "Documentation at https://melpa.org/#/urlenc")
    (license #f)))

(define-public emacs-ursa-ts-mode
  (package
    (name "emacs-ursa-ts-mode")
    (version "20231019.2145")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ursalang/ursa-ts-mode.git")
               (commit
                 "e5cb898e831976d9ac0e5b73e676a7976a77e693")))
        (sha256
          (base32
            "1m6c446irknfd1n01wcm1r6zq3hqk8rgna5lykd0rysjabg5xqzc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ursalang/ursa-ts-mode")
    (synopsis
      "Major mode for Ursa, using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/ursa-ts-mode")
    (license #f)))

(define-public emacs-urscript-mode
  (package
    (name "emacs-urscript-mode")
    (version "20190219.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/guidoschmidt/urscript-mode.git")
               (commit
                 "b341f96b129ead8fb74d680cb4f546985bf110a9")))
        (sha256
          (base32
            "0qhncqsvsrpgc47ixsp436imfm0l6pd1kbpjjk426wrnzaszrpkc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/guidoschmidt/urscript-mode")
    (synopsis "major mode for editing URScript.")
    (description
      "Documentation at https://melpa.org/#/urscript-mode")
    (license #f)))

(define-public emacs-usage-memo
  (package
    (name "emacs-usage-memo")
    (version "20170926.37")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/usage-memo.git")
               (commit
                 "88e15a9942a3e0a6e36e9c3e51e3edb746067b1a")))
        (sha256
          (base32
            "1aalrgyk8pwsc07qmczqhgccjli6mcckkbgpass3kvrkcfxdl2zk"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults (:exclude "test-usage-memo.el"))))
    (home-page
      "http://www.emacswiki.org/cgi-bin/wiki/download/usage-memo.el")
    (synopsis
      "integration of Emacs help system and memo")
    (description
      "Documentation at https://melpa.org/#/usage-memo")
    (license #f)))

(define-public emacs-use-package
  (package
    (name "emacs-use-package")
    (version "20230426.2324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "a6e856418d2ebd053b34e0ab2fda328abeba731c")))
        (sha256
          (base32
            "0g1smk27ry391gk8bb8q3i42s0p520zwhxfnxvzv5cjj93mcpd8f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-bind-key))
    (arguments
      '(#:files
        (:defaults
          (:exclude
            "bind-key.el"
            "bind-chord.el"
            "use-package-chords.el"
            "use-package-ensure-system-package.el"))))
    (home-page
      "https://github.com/jwiegley/use-package")
    (synopsis
      "A configuration macro for simplifying your .emacs")
    (description
      "Documentation at https://melpa.org/#/use-package")
    (license #f)))

(define-public emacs-use-package-chords
  (package
    (name "emacs-use-package-chords")
    (version "20221117.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "bcf0984cf55b70fe6896c6a15f61df92b24f8ffd")))
        (sha256
          (base32
            "0pmz5x7ghwsjyr4lhaqa53c7190bjqxaczljpsr62s60bn55fdsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-use-package
            emacs-bind-key
            emacs-bind-chord
            emacs-key-chord))
    (arguments '(#:files ("use-package-chords.el")))
    (home-page
      "https://github.com/jwiegley/use-package")
    (synopsis "key-chord keyword for use-package")
    (description
      "Documentation at https://melpa.org/#/use-package-chords")
    (license #f)))

(define-public emacs-use-package-el-get
  (package
    (name "emacs-use-package-el-get")
    (version "20180131.505")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/edvorg/use-package-el-get.git")
               (commit
                 "cba87c4e9a3a66b7c10962e3aefdf11c83d737bc")))
        (sha256
          (base32
            "1k1dwydqfgx2yvbipahwzk8kyj7v5ih6hkra8ladbn67x013f9rq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-use-package))
    (home-page
      "https://github.com/edvorg/use-package-el-get")
    (synopsis "el-get support for use package")
    (description
      "Documentation at https://melpa.org/#/use-package-el-get")
    (license #f)))

(define-public emacs-use-package-ensure-system-package
  (package
    (name "emacs-use-package-ensure-system-package")
    (version "20221209.2013")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jwiegley/use-package.git")
               (commit
                 "bcf0984cf55b70fe6896c6a15f61df92b24f8ffd")))
        (sha256
          (base32
            "0pmz5x7ghwsjyr4lhaqa53c7190bjqxaczljpsr62s60bn55fdsi"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-use-package emacs-system-packages))
    (arguments
      '(#:files
        ("use-package-ensure-system-package.el")))
    (home-page
      "https://github.com/waymondo/use-package-ensure-system-package")
    (synopsis "auto install system packages")
    (description
      "Documentation at https://melpa.org/#/use-package-ensure-system-package")
    (license #f)))

(define-public emacs-use-package-hydra
  (package
    (name "emacs-use-package-hydra")
    (version "20181228.745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/to1ne/use-package-hydra.git")
               (commit
                 "8cd55a1128fbdf6327bb38a199d206225896d146")))
        (sha256
          (base32
            "19dja25illcvwpx8j1kigw8dzby41bm57prx1bhaxkmsakxyl863"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-use-package))
    (home-page
      "https://gitlab.com/to1ne/use-package-hydra")
    (synopsis
      "Adds :hydra keyword to use-package macro")
    (description
      "Documentation at https://melpa.org/#/use-package-hydra")
    (license #f)))

(define-public emacs-use-proxy
  (package
    (name "emacs-use-proxy")
    (version "20201209.853")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rayw000/use-proxy.git")
               (commit
                 "31d8bbec16eff342bd4c02b0cb12ea31dd31bf19")))
        (sha256
          (base32
            "0388kwc65hpbimd53br2x9z9dvxw20wnny09kldw5nnlvzvzrba1"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-exec-path-from-shell))
    (home-page
      "https://github.com/rayw000/use-proxy")
    (synopsis
      "Enable/Disable proxies respecting your HTTP/HTTPS env")
    (description
      "Documentation at https://melpa.org/#/use-proxy")
    (license #f)))

(define-public emacs-use-ttf
  (package
    (name "emacs-use-ttf")
    (version "20230503.1015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jcs-elpa/use-ttf.git")
               (commit
                 "072b8b0fa984e1902460ce15e524ed7e5a5abe9c")))
        (sha256
          (base32
            "103z9bzxxbxczg83q57k922yarxidfb1ibqr2xdbmpdiivzcj2sc"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/jcs-elpa/use-ttf")
    (synopsis
      "Keep font consistency across different OSs")
    (description
      "Documentation at https://melpa.org/#/use-ttf")
    (license #f)))

(define-public emacs-ushin-shapes
  (package
    (name "emacs-ushin-shapes")
    (version "20230702.2210")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/ushin-shapes-"
               version
               ".tar"))
        (sha256
          (base32
            "0wd9d3ifcpswqymxgsygbp7pyp5fg1x30bdvg1mvrw0fj54wlg89"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-svg-tag-mode emacs-svg-lib))
    (home-page
      "https://git.sr.ht/~ushin/ushin-shapes.el")
    (synopsis "USHIN shapes in org-mode")
    (description
      "Documentation at https://melpa.org/#/ushin-shapes")
    (license #f)))

(define-public emacs-utimeclock
  (package
    (name "emacs-utimeclock")
    (version "20230601.25")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/utimeclock-"
               version
               ".tar"))
        (sha256
          (base32
            "00b3j35h7s2hhilj8873vbqhh4qjj7fzmgsk3y5dhinfw23g91m0"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-utimeclock")
    (synopsis
      "Simple utility for manual time tracking")
    (description
      "Documentation at https://melpa.org/#/utimeclock")
    (license #f)))

(define-public emacs-utop
  (package
    (name "emacs-utop")
    (version "20230707.1535")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/diml/utop.git")
               (commit
                 "5b98d2845bf8e46a253593578cf0371d773f6da0")))
        (sha256
          (base32
            "14z9asqx7z3i2j6vy0la699nxj2cxhggjc77jnsg9761kv159wym"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-tuareg))
    (arguments '(#:files ("src/top/utop.el")))
    (home-page
      "https://github.com/ocaml-community/utop")
    (synopsis "Universal toplevel for OCaml")
    (description
      "Documentation at https://melpa.org/#/utop")
    (license #f)))

(define-public emacs-uuid
  (package
    (name "emacs-uuid")
    (version "20120910.851")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-uuid.git")
               (commit
                 "1519bfeb0e31602b840bc8dd35d7c7e732c159fe")))
        (sha256
          (base32
            "0r74gw8gcbrr62rvj4anz0c3n6kwi1xpb42d3pkzlh4igblhi5zj"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "UUID's for EmacsLisp")
    (description
      "Documentation at https://melpa.org/#/uuid")
    (license #f)))

(define-public emacs-uuidgen
  (package
    (name "emacs-uuidgen")
    (version "20220405.1345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kanru/uuidgen-el.git")
               (commit
                 "7b728c1d92e196c3acf87a004949335cfc18eab3")))
        (sha256
          (base32
            "1z7x4p1qgyginn74xapd1iq0k53m9qbfk57dzc8srg7fcn5ip1js"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provides various UUID generating functions")
    (description
      "Documentation at https://melpa.org/#/uuidgen")
    (license #f)))

(define-public emacs-uwu-theme
  (package
    (name "emacs-uwu-theme")
    (version "20231103.130")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kborling/uwu-theme.git")
               (commit
                 "821c3a84c8e26263d898566cc27b3982854db60c")))
        (sha256
          (base32
            "0p4lgn39k8r57b2q92hnx3mja9mp8ypvw27jbwms4mipy3qspr7d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kborling/uwu-theme")
    (synopsis "An awesome dark color scheme")
    (description
      "Documentation at https://melpa.org/#/uwu-theme")
    (license #f)))

(define-public emacs-uxntal-mode
  (package
    (name "emacs-uxntal-mode")
    (version "20231010.438")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/non/uxntal-mode.git")
               (commit
                 "9cc325992309e7b6f6ea75d64e12fde2a85320ed")))
        (sha256
          (base32
            "024nwljjl9bkdl815j1l4qp1zkd2nmv6xl94aym393k6dnlvplwi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/non/uxntal-mode")
    (synopsis "Major mode for Uxntal assembly")
    (description
      "Documentation at https://melpa.org/#/uxntal-mode")
    (license #f)))

(define-public emacs-v-mode
  (package
    (name "emacs-v-mode")
    (version "20221007.635")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/v-mode.git")
               (commit
                 "84f26ab0f0f5b23133292674da9fa4558207c33d")))
        (sha256
          (base32
            "10kr5ga8l3061nj4y6qciy0v4mkfvv9mav3i5cl1sz6b6h8kdp66"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hydra))
    (home-page
      "https://github.com/damon-kwok/v-mode")
    (synopsis
      "A major mode for the V programming language")
    (description
      "Documentation at https://melpa.org/#/v-mode")
    (license #f)))

(define-public emacs-v2ex-mode
  (package
    (name "emacs-v2ex-mode")
    (version "20160720.345")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aborn/v2ex-mode.git")
               (commit
                 "b7d19bb594b43ea3824a6f215dd1e5d1d4c0e8ad")))
        (sha256
          (base32
            "0hhj5xfm7mp3ajrbj9ai5p2d9akaqkj89rmqmg1vpyfp3x2f4h2k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/aborn/v2ex-mode")
    (synopsis
      "Major mode for visit http://v2ex.com/ site.")
    (description
      "Documentation at https://melpa.org/#/v2ex-mode")
    (license #f)))

(define-public emacs-vagrant
  (package
    (name "emacs-vagrant")
    (version "20220730.302")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ottbot/vagrant.el.git")
               (commit
                 "eb4ec2053955eda1ac9e5ff92ded88f1919e13f2")))
        (sha256
          (base32
            "1gdscbsbaiz84hk1izn2yr29glvyy4ld6msbck38pn41zkbdz9b2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ottbot/vagrant.el")
    (synopsis "Manage a vagrant box from emacs")
    (description
      "Documentation at https://melpa.org/#/vagrant")
    (license #f)))

(define-public emacs-vagrant-tramp
  (package
    (name "emacs-vagrant-tramp")
    (version "20220508.52")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dougm/vagrant-tramp.git")
               (commit
                 "2b7a4fabd328961384da06e0e302250cd97edc47")))
        (sha256
          (base32
            "03jbjsyf3lrqxk6455892hkz9iwfxahghjbp0kj34h46fprms78s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (arguments '(#:files ("*.el" "bin")))
    (home-page
      "https://github.com/dougm/vagrant-tramp")
    (synopsis "Vagrant method for TRAMP")
    (description
      "Documentation at https://melpa.org/#/vagrant-tramp")
    (license #f)))

(define-public emacs-vala-mode
  (package
    (name "emacs-vala-mode")
    (version "20201218.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rrthomas/vala-mode.git")
               (commit
                 "d696a8177e94c81ea557ad364a3b3dcc3abbc50f")))
        (sha256
          (base32
            "0g5pdq757z9d8rk489n5ilhqipdc4i4sfkjwwrxyvgjlapjc04c0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Vala mode derived mode")
    (description
      "Documentation at https://melpa.org/#/vala-mode")
    (license #f)))

(define-public emacs-vala-snippets
  (package
    (name "emacs-vala-snippets")
    (version "20150429.352")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gopar/vala-snippets.git")
               (commit
                 "671439501060449bd100b9fffd524a86064fbfbb")))
        (sha256
          (base32
            "0iscaz8lm4fk6w13f68ysqk8ppng2wj9fkkkq1rfqz77ws66f8nq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/gopar/vala-snippets")
    (synopsis "Yasnippets for Vala")
    (description
      "Documentation at https://melpa.org/#/vala-snippets")
    (license #f)))

(define-public emacs-vale-mode
  (package
    (name "emacs-vale-mode")
    (version "20190725.125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jaybosamiya/vale-mode.el.git")
               (commit
                 "48bbc4b4ee5bf0b1b73e52705c0fbc112b255cd0")))
        (sha256
          (base32
            "1p0b7jh572wfz7cmzfbd70pr7i59xbbi15jw6rvzgnr558v3fmlg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jaybosamiya/vale-mode.el")
    (synopsis
      "Major mode for writing Vale vaf files")
    (description
      "Documentation at https://melpa.org/#/vale-mode")
    (license #f)))

(define-public emacs-validate-html
  (package
    (name "emacs-validate-html")
    (version "20210420.2344")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/arthurgleckler/validate-html.git")
               (commit
                 "748e874d50c3a95c61590ae293778e26de05c5f9")))
        (sha256
          (base32
            "0b2b5dm85jwgkqvga23r3vfya07vxv2n7a3a6r1pxpk8asqlw41c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/arthurgleckler/validate-html")
    (synopsis
      "Compilation mode for W3C HTML Validator")
    (description
      "Documentation at https://melpa.org/#/validate-html")
    (license #f)))

(define-public emacs-vampyricdark-theme
  (package
    (name "emacs-vampyricdark-theme")
    (version "20220405.2235")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/VampyricDark/emacs.git")
               (commit
                 "000d0b30b83e2d3b1a83eac165dca414fa52a60d")))
        (sha256
          (base32
            "0s7zvxkgxhigfi977cjf5p7p6as8k51gc4aifb8x8c1blcb105br"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/VampyricDark/emacs")
    (synopsis "VampyricDark Theme")
    (description
      "Documentation at https://melpa.org/#/vampyricdark-theme")
    (license #f)))

(define-public emacs-vbasense
  (package
    (name "emacs-vbasense")
    (version "20140221.2353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/emacs-vbasense.git")
               (commit
                 "8c61a492d7c15218ae1a96e2aebfe6f78bfff6db")))
        (sha256
          (base32
            "19j5q2f6pybvjq3ryjcyihzlw348hqyjhfcy3qflry6w786dqcgn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-auto-complete
            emacs-log4e
            emacs-yaxception))
    (arguments '(#:files ("*.el" "*.vbs" "*.bat")))
    (home-page
      "https://github.com/aki2o/emacs-vbasense")
    (synopsis
      "provide a environment like Visual Basic Editor.")
    (description
      "Documentation at https://melpa.org/#/vbasense")
    (license #f)))

(define-public emacs-vc-auto-commit
  (package
    (name "emacs-vc-auto-commit")
    (version "20210216.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/vc-auto-commit.git")
               (commit
                 "56f478016a541b395092a9d3cdc0da84a37b30a1")))
        (sha256
          (base32
            "1aw5j6akrkzr4pgf10scbfqr9axny3pf3k7yslg7g5ss1fd71afl"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/thisirs/vc-auto-commit.git")
    (synopsis
      "Auto-committing feature for your repository")
    (description
      "Documentation at https://melpa.org/#/vc-auto-commit")
    (license #f)))

(define-public emacs-vc-check-status
  (package
    (name "emacs-vc-check-status")
    (version "20210216.1525")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thisirs/vc-check-status.git")
               (commit
                 "d95ef8f0799cd3dd83726ffa9b01b076f378ce34")))
        (sha256
          (base32
            "10sr9qxfx64f7a2kj93vi7lmm1pdj6qf81ci0ykkmrffmjdlf846"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thisirs/vc-check-status")
    (synopsis
      "Warn you when quitting emacs and leaving repo dirty.")
    (description
      "Documentation at https://melpa.org/#/vc-check-status")
    (license #f)))

(define-public emacs-vc-darcs
  (package
    (name "emacs-vc-darcs")
    (version "20230319.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/velkyel/vc-darcs.git")
               (commit
                 "097e03f119b4fedb0186fd45d730a1c5acac10dc")))
        (sha256
          (base32
            "066z29yl41jq0wd18x2rvm6nmssxwrc7q718r5z99s0jzxgzkyl9"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "a VC backend for darcs")
    (description
      "Documentation at https://melpa.org/#/vc-darcs")
    (license #f)))

(define-public emacs-vc-defer
  (package
    (name "emacs-vc-defer")
    (version "20201116.701")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/vc-defer.git")
               (commit
                 "aeafc419c1788b3ac4f0590c635374eefd7c220c")))
        (sha256
          (base32
            "12465b6ac6yzlyxnd0ic4s07i1zy4v0i2z3qy3cjjd7wm3ixbyfd"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/google/vc-defer")
    (synopsis "Defer non-essential vc.el work")
    (description
      "Documentation at https://melpa.org/#/vc-defer")
    (license #f)))

(define-public emacs-vc-fossil
  (package
    (name "emacs-vc-fossil")
    (version "20230504.1626")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/venks1/emacs-fossil.git")
               (commit
                 "4a4a3e4df83ba2f1ea8bfd8aa7e9f9b2c1c32ca9")))
        (sha256
          (base32
            "0djsi68v075zza6c9jgim3bf8zfjhi44mn350jxcs5yibph8n9ni"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "VC backend for the fossil sofware configuraiton management system")
    (description
      "Documentation at https://melpa.org/#/vc-fossil")
    (license #f)))

(define-public emacs-vc-hgcmd
  (package
    (name "emacs-vc-hgcmd")
    (version "20211021.1704")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/muffinmad/emacs-vc-hgcmd.git")
               (commit
                 "d044448965d31ca8214f8bca48487e4d9b9d9a0f")))
        (sha256
          (base32
            "1nlaicza4ds325827ks5gb7zn0nc536k2chq8jwbq34ybvxi93wj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/muffinmad/emacs-vc-hgcmd")
    (synopsis
      "VC mercurial backend that uses hg command server")
    (description
      "Documentation at https://melpa.org/#/vc-hgcmd")
    (license #f)))

(define-public emacs-vc-msg
  (package
    (name "emacs-vc-msg")
    (version "20221005.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/vc-msg.git")
               (commit
                 "027fefad63868cd7695372510c27922656cf996a")))
        (sha256
          (base32
            "05iqjc9g2kxdbhkywbisc2fkv15vw81hxjzphwiq46ikimrppy6a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "http://github.com/redguardtoo/vc-msg")
    (synopsis
      "Show commit information of current line")
    (description
      "Documentation at https://melpa.org/#/vc-msg")
    (license #f)))

(define-public emacs-vc-osc
  (package
    (name "emacs-vc-osc")
    (version "20190402.2349")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aspiers/vc-osc.git")
               (commit
                 "bf5a515ed85f7d7cdfe66ed5bf4ef7554f8561e5")))
        (sha256
          (base32
            "1jk09vspns327j9mfy32dd71n3nfynn17h2njc4sczrgd4yzc2wd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "non-resident support for osc version-control")
    (description
      "Documentation at https://melpa.org/#/vc-osc")
    (license #f)))

(define-public emacs-vcomp
  (package
    (name "emacs-vcomp")
    (version "20230407.1426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tarsius/vcomp.git")
               (commit
                 "d3647089be6119d6d95391e1935dc5abdd3cb501")))
        (sha256
          (base32
            "08sav46ddq9cwsn5s6dkj0cyqngyf16hkm79rri5cm2v1aj4h81g"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tarsius/vcomp")
    (synopsis "Compare version strings")
    (description
      "Documentation at https://melpa.org/#/vcomp")
    (license #f)))

(define-public emacs-vcsh
  (package
    (name "emacs-vcsh")
    (version "20230402.1229")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.smrk.net/vcsh.el")
               (commit
                 "b9c0109a8c77446980de668785e6af1e46bdcdcd")))
        (sha256
          (base32
            "1jqgfk49295g8b0371s2dargncf05mcb5sv04j5xyfblrl5nm4pw"))))
    (build-system melpa-build-system)
    (home-page "http://git.smrk.net/vcsh.el")
    (synopsis "vcsh integration")
    (description
      "Documentation at https://melpa.org/#/vcsh")
    (license #f)))

(define-public emacs-vdf-mode
  (package
    (name "emacs-vdf-mode")
    (version "20210303.714")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/plapadoo/vdf-mode.git")
               (commit
                 "0910d4f847e9c817eb8da5434b3879048ec4ac92")))
        (sha256
          (base32
            "0a69crh9m447kxy4g47y02lymdcp5abbsfh9v68hnwydwnwjxyap"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/plapadoo/vdf-mode")
    (synopsis
      "Major mode for editing Valve VDF files.")
    (description
      "Documentation at https://melpa.org/#/vdf-mode")
    (license #f)))

(define-public emacs-vdiff
  (package
    (name "emacs-vdiff")
    (version "20230621.201")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-vdiff.git")
               (commit
                 "170e968c6a46a572b30c52c1b038232d418734cc")))
        (sha256
          (base32
            "0qbk1w395w6xxp24rv7rksghds7vfn33dls0l810pdpdi7lm9x53"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page
      "https://github.com/justbur/emacs-vdiff")
    (synopsis "A diff tool similar to  vimdiff")
    (description
      "Documentation at https://melpa.org/#/vdiff")
    (license #f)))

(define-public emacs-vdiff-magit
  (package
    (name "emacs-vdiff-magit")
    (version "20220518.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-vdiff-magit.git")
               (commit
                 "413f32c9f7e66f8379c23b5ab6341695dbcc2f20")))
        (sha256
          (base32
            "1zr6j6lw0x5w06sjlx8vnrrp1kx87zhm505plkb31hspf0ggsqlq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-vdiff emacs-magit))
    (home-page
      "https://github.com/justbur/emacs-vdiff-magit")
    (synopsis "magit integration for vdiff")
    (description
      "Documentation at https://melpa.org/#/vdiff-magit")
    (license #f)))

(define-public emacs-vdirel
  (package
    (name "emacs-vdirel")
    (version "20230906.1844")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DamienCassou/vdirel.git")
               (commit
                 "d60439f0b2b55f2e220241fe73f7f79af80aaad8")))
        (sha256
          (base32
            "1w30pz7kiss7pwssd7b41drb3w4vh2djxmdympn3gp9fxwf76mz7"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-vcard emacs-helm))
    (home-page
      "https://github.com/DamienCassou/vdirel")
    (synopsis
      "Manipulate vdir (i.e., vCard) repositories")
    (description
      "Documentation at https://melpa.org/#/vdirel")
    (license #f)))

(define-public emacs-vdm-comint
  (package
    (name "emacs-vdm-comint")
    (version "20181127.2023")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vdm-mode))
    (arguments '(#:files ("vdm-comint.el")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis "REPL support for vdm-mode")
    (description
      "Documentation at https://melpa.org/#/vdm-comint")
    (license #f)))

(define-public emacs-vdm-mode
  (package
    (name "emacs-vdm-mode")
    (version "20190328.1408")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("vdm-mode*.el")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis
      "Major mode for the Vienna Development Method")
    (description
      "Documentation at https://melpa.org/#/vdm-mode")
    (license #f)))

(define-public emacs-vdm-snippets
  (package
    (name "emacs-vdm-snippets")
    (version "20190313.1122")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/peterwvj/vdm-mode.git")
               (commit
                 "89e7db6ee1a89b8c1f7ce36ce6800c32b5c4ba2d")))
        (sha256
          (base32
            "1vfqkfw39yg7379s6b28n8nyswv1jq7caljfbnyrndsag6z4j50k"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("vdm-snippets.el" "snippets")))
    (home-page
      "https://github.com/peterwvj/vdm-mode")
    (synopsis "YASnippets for VDM mode")
    (description
      "Documentation at https://melpa.org/#/vdm-snippets")
    (license #f)))

(define-public emacs-vector-utils
  (package
    (name "emacs-vector-utils")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/vector-utils.git")
               (commit
                 "c38ca1c6a23b2b51a6ac36c2c64e50e21cbe9d21")))
        (sha256
          (base32
            "1wa03gb98x650q798aqshm43kh6gfxaz1rlyrmvka5dxgf48whmf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/vector-utils")
    (synopsis
      "Vector-manipulation utility functions")
    (description
      "Documentation at https://melpa.org/#/vector-utils")
    (license #f)))

(define-public emacs-vega-view
  (package
    (name "emacs-vega-view")
    (version "20210401.1115")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/applied-science/emacs-vega-view.git")
               (commit
                 "3793025a523a86acc6255b4183b12ebfc95e1116")))
        (sha256
          (base32
            "0w8v0ivwq3i42mxfxk5zvlx1lz4di06dpd93j2j13ns5h46vxhc0"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-cider emacs-parseedn))
    (home-page
      "https://www.github.com/applied-science/emacs-vega-view")
    (synopsis "Vega visualization viewer")
    (description
      "Documentation at https://melpa.org/#/vega-view")
    (license #f)))

(define-public emacs-vegetative-theme
  (package
    (name "emacs-vegetative-theme")
    (version "20220822.353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-theme-vegetative.git")
               (commit
                 "db60ce0fe327ae7e4371545179ed94483b1132a8")))
        (sha256
          (base32
            "1cqrrkp8dhwh73ypfhw3hzn2siy7s23kfafn61y6qgkxm2hnhj0j"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-autothemer))
    (home-page
      "http://github.com/emacsfodder/emacs-theme-vegetative")
    (synopsis "A Theme based on green CRT terminals")
    (description
      "Documentation at https://melpa.org/#/vegetative-theme")
    (license #f)))

(define-public emacs-verb
  (package
    (name "emacs-verb")
    (version "20230825.2151")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/federicotdn/verb.git")
               (commit
                 "e1e551f6340d58e7782f2c1df7b397229a1c4fe3")))
        (sha256
          (base32
            "0d22h72mnngi55v1ksa22gwxbyw8flwi6x8wx1c5hfvl59ww8nsl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/federicotdn/verb")
    (synopsis "Organize and send HTTP requests")
    (description
      "Documentation at https://melpa.org/#/verb")
    (license #f)))

(define-public emacs-veri-kompass
  (package
    (name "emacs-veri-kompass")
    (version "20200213.934")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/koral/veri-kompass.git")
               (commit
                 "271903cdf92db05898ee7cffb65641f30fa08280")))
        (sha256
          (base32
            "0ag2975bwj6l6wzd03min8dj5cy1429fzm3z2p2807i4j7fd7bkr"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/koral/veri-kompass")
    (synopsis "verilog codebase navigation facility")
    (description
      "Documentation at https://melpa.org/#/veri-kompass")
    (license #f)))

(define-public emacs-verify-url
  (package
    (name "emacs-verify-url")
    (version "20160426.1228")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lujun9972/verify-url.git")
               (commit
                 "d6f3623cda8cd526a2d198619b137059cb1ba1ab")))
        (sha256
          (base32
            "1y6vjw5qzaxr37spg5d4nxffmhiipzsrd7mvh8bs3jcfrsg3080n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lujun9972/verify-url")
    (synopsis
      "find out invalid urls in the buffer or region")
    (description
      "Documentation at https://melpa.org/#/verify-url")
    (license #f)))

(define-public emacs-verilog-ext
  (package
    (name "emacs-verilog-ext")
    (version "20231020.1553")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/verilog-ext.git")
               (commit
                 "31bc0f38a83cbfd34abe3858081d290d16d8dc7a")))
        (sha256
          (base32
            "0csi1a6j71l4nl7x31gd6655mp79lyqrjl9kbb2ywrfiiz97gfyc"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-verilog-ts-mode
            emacs-lsp-mode
            emacs-ag
            emacs-ripgrep
            emacs-hydra
            emacs-apheleia
            emacs-yasnippet
            emacs-flycheck
            emacs-outshine
            emacs-async))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/gmlarumbe/verilog-ext")
    (synopsis "SystemVerilog Extensions")
    (description
      "Documentation at https://melpa.org/#/verilog-ext")
    (license #f)))

(define-public emacs-verilog-ts-mode
  (package
    (name "emacs-verilog-ts-mode")
    (version "20231016.1204")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/verilog-ts-mode.git")
               (commit
                 "d0403317b7e643c25ef786c40ce711dddc60fcd0")))
        (sha256
          (base32
            "1pv6bq6nkgp8kxp5ci2q85jfmc4yc0962mvssqbzs2gz1ahjbppj"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gmlarumbe/verilog-ts-mode")
    (synopsis "Verilog Tree-sitter major mode")
    (description
      "Documentation at https://melpa.org/#/verilog-ts-mode")
    (license #f)))

(define-public emacs-verona-mode
  (package
    (name "emacs-verona-mode")
    (version "20200823.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/verona-mode.git")
               (commit
                 "72dd31ef847344d79409503f3c42169041eb3da4")))
        (sha256
          (base32
            "1y4gxz8pnwapp7d5pwbp1la4qjc907q3lq8i2znd9hr5vsx0bgcw"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/verona-mode")
    (synopsis
      "A major mode for the Verona programming language")
    (description
      "Documentation at https://melpa.org/#/verona-mode")
    (license #f)))

(define-public emacs-versuri
  (package
    (name "emacs-versuri")
    (version "20211104.1301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaiolteanu/versuri.git")
               (commit
                 "c8ea562304194f3379ed8f9c6a785ce8ee72898e")))
        (sha256
          (base32
            "1ak5f6g9sqd2dwplipnacg6kknkpf1j6df5am0hqcmlsk052d12s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-request
            emacs-anaphora
            emacs-esxml
            emacs-s
            emacs-esqlite))
    (home-page
      "https://github.com/mihaiolteanu/versuri/")
    (synopsis "The lyrics package")
    (description
      "Documentation at https://melpa.org/#/versuri")
    (license #f)))

(define-public emacs-vertica
  (package
    (name "emacs-vertica")
    (version "20131217.1511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/r0man/vertica-el.git")
               (commit
                 "3c9647b425c5c13c30bf0cba483646af18196588")))
        (sha256
          (base32
            "1mp71axs3vdrdwlhgywfldvnr6a1g2qbxiywmpfmcv59n5n58p1j"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Vertica SQL mode extension")
    (description
      "Documentation at https://melpa.org/#/vertica")
    (license #f)))

(define-public emacs-vertica-snippets
  (package
    (name "emacs-vertica-snippets")
    (version "20231010.1104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/baron42bba/vertica-snippets.git")
               (commit
                 "6f0df19d36a9670484e84b347716f305301359ad")))
        (sha256
          (base32
            "0nrvc569bfbd1qvzlbgns2vasnxsrq7inkaykiy1jqma8rd4cy9h"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments '(#:files ("*.el" "snippets")))
    (home-page
      "https://github.com/baron42bba/vertica-snippets")
    (synopsis "Yasnippets for Vertica")
    (description
      "Documentation at https://melpa.org/#/vertica-snippets")
    (license #f)))

(define-public emacs-vertico
  (package
    (name "emacs-vertico")
    (version "20231108.2024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/minad/vertico.git")
               (commit
                 "f4a473ffd6816478ff0486c6646cc5176b6ae5a7")))
        (sha256
          (base32
            "1vcq9rwydi6r2lhy5gpdz3rnmljd1fwc8ypc5ayl4ry7zzi0lnc3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments
      '(#:files (:defaults "extensions/vertico-*.el")))
    (home-page "https://github.com/minad/vertico")
    (synopsis "VERTical Interactive COmpletion")
    (description
      "Documentation at https://melpa.org/#/vertico")
    (license #f)))

(define-public emacs-vertico-prescient
  (package
    (name "emacs-vertico-prescient")
    (version "20230221.1257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/radian-software/prescient.el.git")
               (commit
                 "822481e722502081deedbe6b1a9776eda0ca7bfe")))
        (sha256
          (base32
            "1h9chc5bipvmn6vqzr150dk91hfcj6yzdn3ylb4lgk70x8if4xvn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-prescient emacs-vertico))
    (arguments '(#:files ("vertico-prescient.el")))
    (home-page
      "https://github.com/radian-software/prescient.el")
    (synopsis "prescient.el + Vertico")
    (description
      "Documentation at https://melpa.org/#/vertico-prescient")
    (license #f)))

(define-public emacs-vertigo
  (package
    (name "emacs-vertigo")
    (version "20211224.1256")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/noctuid/vertigo.el.git")
               (commit
                 "280b30518529242ee36cd436bd2349c34c35abb0")))
        (sha256
          (base32
            "0g5za16kgsccap2frfv4h6jj9b8x4h5jm0xfdrw3lq0846bnzfwp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/noctuid/vertigo.el")
    (synopsis
      "Jump across lines using the home row.")
    (description
      "Documentation at https://melpa.org/#/vertigo")
    (license #f)))

(define-public emacs-vhdl-capf
  (package
    (name "emacs-vhdl-capf")
    (version "20160221.1734")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sh-ow/vhdl-capf.git")
               (commit
                 "290abe217050f33532bc9ccb04f894123402f414")))
        (sha256
          (base32
            "185a7962h94122q783ih7s8r28xifm0bcrqvkd0g4p64mijlbh3d"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sh-ow/vhdl-capf")
    (synopsis
      "Completion at point function (capf) for vhdl-mode.")
    (description
      "Documentation at https://melpa.org/#/vhdl-capf")
    (license #f)))

(define-public emacs-vhdl-ext
  (package
    (name "emacs-vhdl-ext")
    (version "20231020.1600")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/vhdl-ext.git")
               (commit
                 "0ccedf602afcbde7e4add7ff6e294ff29c4310ce")))
        (sha256
          (base32
            "19xfanby7242jk9nwx5k2hfsk3gavk1l0h8az7g86dx465pba95a"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-vhdl-ts-mode
            emacs-lsp-mode
            emacs-ag
            emacs-ripgrep
            emacs-hydra
            emacs-flycheck
            emacs-outshine
            emacs-async))
    (arguments '(#:files (:defaults "snippets")))
    (home-page
      "https://github.com/gmlarumbe/vhdl-ext")
    (synopsis "VHDL Extensions")
    (description
      "Documentation at https://melpa.org/#/vhdl-ext")
    (license #f)))

(define-public emacs-vhdl-tools
  (package
    (name "emacs-vhdl-tools")
    (version "20200330.1819")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/emacs-elisp/vhdl-tools.git")
               (commit
                 "b5d1eec90bb43ba10178219245afbddb6601e85b")))
        (sha256
          (base32
            "1qfjwsxi3w2gdl258jbk5d3z645gs6zccxx2iah54zbgql17pgj9"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ggtags emacs-helm-rg emacs-outshine))
    (home-page
      "https://gitlab.com/emacs-elisp/vhdl-tools/-/wikis/home")
    (synopsis
      "Utilities for navigating vhdl sources")
    (description
      "Documentation at https://melpa.org/#/vhdl-tools")
    (license #f)))

(define-public emacs-vhdl-ts-mode
  (package
    (name "emacs-vhdl-ts-mode")
    (version "20231031.748")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/vhdl-ts-mode.git")
               (commit
                 "957006ea834ff1a42b860b146fd40c86eda5eabd")))
        (sha256
          (base32
            "1h2gsy5vgq5zsvzxdds7bszhhj5hh7hf007bxbp9jlyar19alvsd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gmlarumbe/vhdl-ts-mode")
    (synopsis "VHDL Tree-sitter major mode")
    (description
      "Documentation at https://melpa.org/#/vhdl-ts-mode")
    (license #f)))

(define-public emacs-vi-tilde-fringe
  (package
    (name "emacs-vi-tilde-fringe")
    (version "20141028.242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/syl20bnr/vi-tilde-fringe.git")
               (commit
                 "f1597a8d54535bb1d84b442577b2024e6f910308")))
        (sha256
          (base32
            "0wdm8k49zl6i6wnh7vjkswdh5m9lix56jv37xvc90inipwgs402z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syl20bnr/vi-tilde-fringe")
    (synopsis
      "Displays tildes in the fringe on empty lines a la Vi.")
    (description
      "Documentation at https://melpa.org/#/vi-tilde-fringe")
    (license #f)))

(define-public emacs-viewer
  (package
    (name "emacs-viewer")
    (version "20170107.202")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rubikitch/viewer.git")
               (commit
                 "6c8db025bf4021428f7f2c3ef9d74fb13f5d267a")))
        (sha256
          (base32
            "1sj4a9zwfv94m0ac503gan6hf9sl2658khab1fnj8szcq7hrdvq1"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/rubikitch/viewer/")
    (synopsis "View-mode extension")
    (description
      "Documentation at https://melpa.org/#/viewer")
    (license #f)))

(define-public emacs-viking-mode
  (package
    (name "emacs-viking-mode")
    (version "20160705.2027")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/TLINDEN/viking-mode.git")
               (commit
                 "c76aa265d13ad91d6890d242e142d05e31f0340b")))
        (sha256
          (base32
            "1944p3kbskzj4d9w9prbi7z59lrn087v3gphbhwjplz6mvwbl8g6"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/tlinden/viking-mode")
    (synopsis "kill first, ask later")
    (description
      "Documentation at https://melpa.org/#/viking-mode")
    (license #f)))

(define-public emacs-vim-empty-lines-mode
  (package
    (name "emacs-vim-empty-lines-mode")
    (version "20150111.426")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jmickelin/vim-empty-lines-mode.git")
               (commit
                 "d4a5034ca8ea0c962ad6e92c86c0fa2a74d2964b")))
        (sha256
          (base32
            "11qh6fpf6269j9syf06v5wnkgi65wnn7dbyjwb6yz72rvq7ihhcz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jmickelin/vim-empty-lines-mode")
    (synopsis
      "Vim-like empty line indicator at end of files.")
    (description
      "Documentation at https://melpa.org/#/vim-empty-lines-mode")
    (license #f)))

(define-public emacs-vim-region
  (package
    (name "emacs-vim-region")
    (version "20140329.1624")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ongaeshi/emacs-vim-region.git")
               (commit
                 "7c4a99ce3678fee40c83ab88e8ad075d2a935fdf")))
        (sha256
          (base32
            "13g2hin100c8h5bd7hzhyqzj02ab9c35giyv963l7y044v7sbwig"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-expand-region))
    (home-page
      "https://github.com/ongaeshi/emacs-vim-region")
    (synopsis "Select region as vim")
    (description
      "Documentation at https://melpa.org/#/vim-region")
    (license #f)))

(define-public emacs-vimgolf
  (package
    (name "emacs-vimgolf")
    (version "20200205.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/timvisher/vimgolf.el.git")
               (commit
                 "f565447ed294898588a19438d56c116555d8c628")))
        (sha256
          (base32
            "0vyxqs575xfvk9vdwwx5vd9fmcjj1hl2139yw31902dd9lrf55ag"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/timvisher/vimgolf.el")
    (synopsis
      "VimGolf interface for the One True Editor")
    (description
      "Documentation at https://melpa.org/#/vimgolf")
    (license #f)))

(define-public emacs-vimish-fold
  (package
    (name "emacs-vimish-fold")
    (version "20201205.1156")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/matsievskiysv/vimish-fold.git")
               (commit
                 "a6501cbfe3db791f9ca17fd986c7202a87f3adb8")))
        (sha256
          (base32
            "0w0r951c6vn890h1cz5l8rl6hicna6rbdzfgbg4lpm280yds9lpb"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-f))
    (home-page
      "https://github.com/mrkkrp/vimish-fold")
    (synopsis "Fold text like in Vim")
    (description
      "Documentation at https://melpa.org/#/vimish-fold")
    (license #f)))

(define-public emacs-vimrc-mode
  (package
    (name "emacs-vimrc-mode")
    (version "20181116.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mcandre/vimrc-mode.git")
               (commit
                 "13bc150a870d5d4a95f1111e4740e2b22813c30e")))
        (sha256
          (base32
            "0026dqs3hwygk2k2xfra90w5sfnxrfj7l69jz7sq5glavbf340pk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mcandre/vimrc-mode")
    (synopsis "Major mode for vimrc files")
    (description
      "Documentation at https://melpa.org/#/vimrc-mode")
    (license #f)))

(define-public emacs-vimscript-ts-mode
  (package
    (name "emacs-vimscript-ts-mode")
    (version "20231022.1758")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/vimscript-ts-mode.git")
               (commit
                 "20aea980ef94d643100638f2528aafc4b136e20c")))
        (sha256
          (base32
            "141mhzqv0fchcp6r6r3w8nismxa6a455d4z0ap6hcla2mxvszrwh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nverno/vimscript-ts-mode")
    (synopsis
      "Vim-script major mode using tree-sitter")
    (description
      "Documentation at https://melpa.org/#/vimscript-ts-mode")
    (license #f)))

(define-public emacs-virtual-auto-fill
  (package
    (name "emacs-virtual-auto-fill")
    (version "20200906.2038")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/luisgerhorst/virtual-auto-fill.git")
               (commit
                 "ac8bf947a1f87efe8967cb18166178f5fd93a8e1")))
        (sha256
          (base32
            "1mhw6ysi29s57dccq8a1jh810hz0a90ssw66ih5byvrysgs0hmqw"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-adaptive-wrap
            emacs-visual-fill-column))
    (home-page
      "https://github.com/luisgerhorst/virtual-auto-fill")
    (synopsis
      "Readably display text without adding line breaks")
    (description
      "Documentation at https://melpa.org/#/virtual-auto-fill")
    (license #f)))

(define-public emacs-virtual-comment
  (package
    (name "emacs-virtual-comment")
    (version "20220921.221")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thanhvg/emacs-virtual-comment.git")
               (commit
                 "b0c2ac4a9d625b5f4f329bbab879ad86cd7056bd")))
        (sha256
          (base32
            "052djdwlg2bx0smy4xbcniqb48q0nwfbigf98s2330ngpjk7112a"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thanhvg/emacs-virtual-comment")
    (synopsis "Virtual Comments")
    (description
      "Documentation at https://melpa.org/#/virtual-comment")
    (license #f)))

(define-public emacs-virtualenv
  (package
    (name "emacs-virtualenv")
    (version "20140220.2301")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aculich/virtualenv.el.git")
               (commit
                 "276c0f4d6493b402dc4d22ecdf17b2b072e911b3")))
        (sha256
          (base32
            "0rd7hyv66278dj32yva5q9z1749y84c6fwl2iqrns512j1l4kl8q"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Virtualenv for Python")
    (description
      "Documentation at https://melpa.org/#/virtualenv")
    (license #f)))

(define-public emacs-virtualenvwrapper
  (package
    (name "emacs-virtualenvwrapper")
    (version "20190223.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/porterjamesj/virtualenvwrapper.el.git")
               (commit
                 "c7e84505db4142fd1beebf38ffe37c3f42444ca3")))
        (sha256
          (base32
            "0kkhbw8c9c7nfhz7i0wwwcrbk0a91yvq7n5n89ndsk5iwisr92vp"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "http://github.com/porterjamesj/virtualenvwrapper.el")
    (synopsis
      "a featureful virtualenv tool for Emacs")
    (description
      "Documentation at https://melpa.org/#/virtualenvwrapper")
    (license #f)))

(define-public emacs-visible-mark
  (package
    (name "emacs-visible-mark")
    (version "20150624.450")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.sr.ht/~iank/visible-mark")
               (commit
                 "a584db9bc88953b23a9648b3e14ade90767207f8")))
        (sha256
          (base32
            "1rsi9irv9i03627cmfaqz03f9cvpm7555ga8n2gs622lzp6bb3jf"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/iankelling/visible-mark")
    (synopsis "Make marks visible.")
    (description
      "Documentation at https://melpa.org/#/visible-mark")
    (license #f)))

(define-public emacs-visual-ascii-mode
  (package
    (name "emacs-visual-ascii-mode")
    (version "20150129.1046")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Dewdrops/visual-ascii-mode.git")
               (commit
                 "99285a099a17472ddd9f1b4f74e9d092dd8c5947")))
        (sha256
          (base32
            "1cv8mf3l92a9p8qmkfiphk3r81f2ihg2gyw2r4jbbd5ppwbxkl0n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Dewdrops/visual-ascii-mode")
    (synopsis
      "Visualize ascii code (small integer) on buffer.")
    (description
      "Documentation at https://melpa.org/#/visual-ascii-mode")
    (license #f)))

(define-public emacs-visual-fill-column
  (package
    (name "emacs-visual-fill-column")
    (version "20230102.1830")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/visual-fill-column-"
               version
               ".el"))
        (sha256
          (base32
            "0v00idwrn4kymxmxxsnpjw4i1w7hvf8l0693nz4ix5a7kr5ra1rz"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/joostkremers/visual-fill-column")
    (synopsis "fill-column for visual-line-mode")
    (description
      "Documentation at https://melpa.org/#/visual-fill-column")
    (license #f)))

(define-public emacs-visual-regexp
  (package
    (name "emacs-visual-regexp")
    (version "20210502.2019")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/visual-regexp.el.git")
               (commit
                 "48457d42a5e0fe10fa3a9c15854f1f127ade09b5")))
        (sha256
          (base32
            "1z2cz6f8ymzrb7fdmw6824y7n5y7rmac5ljl03a6csdhp1yz5c2z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/benma/visual-regexp.el/")
    (synopsis
      "A regexp/replace command for Emacs with interactive visual feedback")
    (description
      "Documentation at https://melpa.org/#/visual-regexp")
    (license #f)))

(define-public emacs-visual-regexp-steroids
  (package
    (name "emacs-visual-regexp-steroids")
    (version "20170222.253")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/benma/visual-regexp-steroids.el.git")
               (commit
                 "a6420b25ec0fbba43bf57875827092e1196d8a9e")))
        (sha256
          (base32
            "1isqa4ck6pm4ykcrkr0g1qj8664jkpcsrq0f8dlb0sksns2dqkwj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-visual-regexp))
    (arguments
      '(#:files
        ("visual-regexp-steroids.el" "regexp.py")))
    (home-page
      "https://github.com/benma/visual-regexp-steroids.el/")
    (synopsis
      "Extends visual-regexp to support other regexp engines")
    (description
      "Documentation at https://melpa.org/#/visual-regexp-steroids")
    (license #f)))

(define-public emacs-vlc
  (package
    (name "emacs-vlc")
    (version "20200328.1143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/vlc.el.git")
               (commit
                 "932840f874e7510ee86e796bb5dc20d44514e31a")))
        (sha256
          (base32
            "0vqsdvaqi8ih98ic9hdwwwwcs4v0yjz3nrwwwkwh2a99l9a59j5g"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xuchunyang/vlc.el")
    (synopsis "VideoLAN VLC Media Player Control")
    (description
      "Documentation at https://melpa.org/#/vlc")
    (license #f)))

(define-public emacs-vlf
  (package
    (name "emacs-vlf")
    (version "20191126.2250")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/m00natic/vlfi.git")
               (commit
                 "cc02f2533782d6b9b628cec7e2dcf25b2d05a27c")))
        (sha256
          (base32
            "00wqq9x3p4iwgsga3wvlr8c7iifvh3b0j41sahccdx6hqh4a0pzp"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/m00natic/vlfi")
    (synopsis "View Large Files")
    (description
      "Documentation at https://melpa.org/#/vlf")
    (license #f)))

(define-public emacs-vline
  (package
    (name "emacs-vline")
    (version "20210805.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/buzztaiki/vline.git")
               (commit
                 "f5d7b5743dceca75b81c8c95287cd5b0341debf9")))
        (sha256
          (base32
            "06qqpjaxsacslxb3f2bm790lwygbq6387n9ccn4v9vz9xlyn9dmi"))))
    (build-system melpa-build-system)
    (home-page
      "https://www.emacswiki.org/emacs/VlineMode")
    (synopsis
      "Column highlighting (vertical line displaying) mode")
    (description
      "Documentation at https://melpa.org/#/vline")
    (license #f)))

(define-public emacs-vmd-mode
  (package
    (name "emacs-vmd-mode")
    (version "20210524.27")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/blak3mill3r/vmd-mode.git")
               (commit
                 "b2bdf2ab54f8fc37780e6b473e4ad69c0e9ff4a6")))
        (sha256
          (base32
            "0wraiy5v0h1j4i31fr1b83k613c01pajq2436f93r485c2529pzp"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/blak3mill3r/vmd-mode")
    (synopsis
      "Fast Github-flavored Markdown preview using a vmd subprocess.")
    (description
      "Documentation at https://melpa.org/#/vmd-mode")
    (license #f)))

(define-public emacs-voca-builder
  (package
    (name "emacs-voca-builder")
    (version "20161101.1645")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yitang/voca-builder.git")
               (commit
                 "51573beec8cd8308477b0faf453aad93e17f57c5")))
        (sha256
          (base32
            "1gd7zqmyn389dfyx1yll1bw5f8kjib87k33s9hxsbx0db8vas9q6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-popup))
    (home-page
      "https://github.com/yitang/voca-builder")
    (synopsis "Helps you build up your vocabulary")
    (description
      "Documentation at https://melpa.org/#/voca-builder")
    (license #f)))

(define-public emacs-volatile-highlights
  (package
    (name "emacs-volatile-highlights")
    (version "20230301.1402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/k-talo/volatile-highlights.el.git")
               (commit
                 "fcf6e2778454ce514c189a7d1fe70e03ad81c325")))
        (sha256
          (base32
            "13ag9p2k7snzrc8qllr7hb3mlfqfhwzprlwhykk110nglba1hjrd"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/emacs/download/volatile-highlights.el")
    (synopsis
      "Minor mode for visual feedback on some operations.")
    (description
      "Documentation at https://melpa.org/#/volatile-highlights")
    (license #f)))

(define-public emacs-volume
  (package
    (name "emacs-volume")
    (version "20220904.1727")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dbrock/volume.el.git")
               (commit
                 "050d3e6d2543a6771a13f95612055864679b6301")))
        (sha256
          (base32
            "1vyl13swx82njqlfzmaj9c4vbdpdsj4m9f8v32a9kycdhbm9x90z"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.brockman.se/software/volume-el/")
    (synopsis
      "tweak your sound card volume from Emacs")
    (description
      "Documentation at https://melpa.org/#/volume")
    (license #f)))

(define-public emacs-vs-dark-theme
  (package
    (name "emacs-vs-dark-theme")
    (version "20231028.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/vs-dark-theme.git")
               (commit
                 "1f6f0afecc4576cc1cee573f82efe465042507f3")))
        (sha256
          (base32
            "0yv1gs6prj4qkwav6yjfxrck8y29pbsnidfhnap2vx2rfb94q1k8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-vs/vs-dark-theme")
    (synopsis "Visual Studio IDE dark theme")
    (description
      "Documentation at https://melpa.org/#/vs-dark-theme")
    (license #f)))

(define-public emacs-vs-light-theme
  (package
    (name "emacs-vs-light-theme")
    (version "20231028.356")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-vs/vs-light-theme.git")
               (commit
                 "174e1dffc26998d8bc074f1f78068a8e612d4be3")))
        (sha256
          (base32
            "01h55rw65wk630l868lm3s1zkggksmvf1c0ywhnz0l4a570f859h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacs-vs/vs-light-theme")
    (synopsis "Visual Studio IDE light theme")
    (description
      "Documentation at https://melpa.org/#/vs-light-theme")
    (license #f)))

(define-public emacs-vscdark-theme
  (package
    (name "emacs-vscdark-theme")
    (version "20191212.107")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abelikoff/vscdark-theme.git")
               (commit
                 "8eba74059e8a9db974e4056ee024e52fe54da485")))
        (sha256
          (base32
            "01p5ys23m4zk5hniri55bcn8j7v6pd6ryi41qx20w29mramwzxl9"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/abelikoff/vscdark-theme")
    (synopsis "VS Code Dark+ like theme")
    (description
      "Documentation at https://melpa.org/#/vscdark-theme")
    (license #f)))

(define-public emacs-vscode-dark-plus-theme
  (package
    (name "emacs-vscode-dark-plus-theme")
    (version "20230725.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ianyepan/vscode-dark-plus-emacs-theme.git")
               (commit
                 "65420ca73b543e1e7955905bea1a8d7e5fe6c5ff")))
        (sha256
          (base32
            "06wdyaiycxnmb6xgqv325413wl6017pr2z705hw78ddidjqlpi71"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ianpan870102/vscode-dark-plus-emacs-theme")
    (synopsis
      "Default Visual Studio Code Dark+ theme")
    (description
      "Documentation at https://melpa.org/#/vscode-dark-plus-theme")
    (license #f)))

(define-public emacs-vscode-icon
  (package
    (name "emacs-vscode-icon")
    (version "20230330.2206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jojojames/vscode-icon-emacs.git")
               (commit
                 "3976bc2e7e2fe0068ae59c11d226f67e0e87aaea")))
        (sha256
          (base32
            "168hvmj3nlbi1p7w5m424sn6shn12kbgjd9spyj60pj1867jq7r1"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "icons")))
    (home-page
      "https://github.com/jojojames/vscode-icon-emacs")
    (synopsis
      "Utility package to provide Vscode style icons")
    (description
      "Documentation at https://melpa.org/#/vscode-icon")
    (license #f)))

(define-public emacs-vterm
  (package
    (name "emacs-vterm")
    (version "20230417.424")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akermu/emacs-libvterm.git")
               (commit
                 "94e2b0b2b4a750e7907dacd5b4c0584900846dd1")))
        (sha256
          (base32
            "0p55wg6j2x5p4g13v20fhwrrw9dv3n2srk34vnxx9md5vhz1pq6p"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("CMakeLists.txt"
         "elisp.c"
         "elisp.h"
         "emacs-module.h"
         "etc"
         "utf8.c"
         "utf8.h"
         "vterm.el"
         "vterm-module.c"
         "vterm-module.h")))
    (home-page
      "https://github.com/akermu/emacs-libvterm")
    (synopsis "Fully-featured terminal emulator")
    (description
      "Documentation at https://melpa.org/#/vterm")
    (license #f)))

(define-public emacs-vterm-toggle
  (package
    (name "emacs-vterm-toggle")
    (version "20230912.246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jixiuf/vterm-toggle.git")
               (commit
                 "06cb4f3c565e46470a3c4505c11e26066d869715")))
        (sha256
          (base32
            "03npflmahhl6fmkjl5y9bx9bg26614zn796k59p3d872mqj1w2vi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vterm))
    (home-page
      "https://github.com/jixiuf/vterm-toggle")
    (synopsis
      "Toggles between the vterm buffer and other buffers.")
    (description
      "Documentation at https://melpa.org/#/vterm-toggle")
    (license #f)))

(define-public emacs-vtm
  (package
    (name "emacs-vtm")
    (version "20200921.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/laishulu/emacs-vterm-manager.git")
               (commit
                 "d770fd8cff7c24688199392ad93c01485c6a9569")))
        (sha256
          (base32
            "1xyhwlmh7mqdhr45y63qh5k71jsgh9sj08bvwsk7znh2zgzqy954"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/laishulu/emacs-vterm-manager")
    (synopsis
      "Manages vterm buffers with configuration files")
    (description
      "Documentation at https://melpa.org/#/vtm")
    (license #f)))

(define-public emacs-vue-html-mode
  (package
    (name "emacs-vue-html-mode")
    (version "20180428.2035")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/vue-html-mode.git")
               (commit
                 "1514939804bad558584feeb6298b38d22eadf64e")))
        (sha256
          (base32
            "0xfdm66b6wp7h233hm83bihchmiqqq51aw2zshb8aa4qnskgs677"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/AdamNiederer/vue-html-mode")
    (synopsis
      "Major mode for editing Vue.js templates")
    (description
      "Documentation at https://melpa.org/#/vue-html-mode")
    (license #f)))

(define-public emacs-vue-mode
  (package
    (name "emacs-vue-mode")
    (version "20190415.231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AdamNiederer/vue-mode.git")
               (commit
                 "031edd1f97db6e7d8d6c295c0e6d58dd128b9e71")))
        (sha256
          (base32
            "047l5nxw86dvls8an65mmqcy673n37pyli7s0d52yi07jk0lw1yx"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-mmm-mode
            emacs-vue-html-mode
            emacs-ssass-mode
            emacs-edit-indirect))
    (home-page "unspecified")
    (synopsis
      "Major mode for vue component based on mmm-mode")
    (description
      "Documentation at https://melpa.org/#/vue-mode")
    (license #f)))

(define-public emacs-vuiet
  (package
    (name "emacs-vuiet")
    (version "20220218.1024")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mihaiolteanu/vuiet.git")
               (commit
                 "aed3272b95fc73fd78712ff7dcfc05916f382fed")))
        (sha256
          (base32
            "0faxcgvi8r6nchvgh2dzmnawbv5qzsf1aiyfg3f39pskcrnip62v"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-lastfm
            emacs-versuri
            emacs-s
            emacs-bind-key
            emacs-mpv))
    (home-page
      "https://github.com/mihaiolteanu/vuiet")
    (synopsis
      "The music player and explorer for Emacs")
    (description
      "Documentation at https://melpa.org/#/vuiet")
    (license #f)))

(define-public emacs-vulpea
  (package
    (name "emacs-vulpea")
    (version "20231031.802")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d12frosted/vulpea.git")
               (commit
                 "f4f220896aaaeee41b2341b74c1b9a554cf9c015")))
        (sha256
          (base32
            "03yhrrwnm5wgwy2k72cj9bgsmsbm0ylrlnr2dh5rzaaiwxq1kxvn"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-roam emacs-s emacs-dash))
    (home-page
      "https://github.com/d12frosted/vulpea")
    (synopsis
      "A collection of org-roam note-taking functions")
    (description
      "Documentation at https://melpa.org/#/vulpea")
    (license #f)))

(define-public emacs-vunit-mode
  (package
    (name "emacs-vunit-mode")
    (version "20230913.1754")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/embed-me/vunit-mode.git")
               (commit
                 "a2126892f17a48c857682b6455f963a3fb7e07f0")))
        (sha256
          (base32
            "07r0mk0cb5l8q1z830j4vfy7p17f5wva73lmm74d1m3vqmvlxrn9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-hydra))
    (home-page "https://github.com/embed-me")
    (synopsis "VUnit Runner Interface")
    (description
      "Documentation at https://melpa.org/#/vunit-mode")
    (license #f)))

(define-public emacs-vyper-mode
  (package
    (name "emacs-vyper-mode")
    (version "20180707.1935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ralexstokes/vyper-mode.git")
               (commit
                 "323dfddfc38f0b11697e9ebaf04d1b53297e54e5")))
        (sha256
          (base32
            "1vxqgc9c1lj61ipaw05xfby3nl7wn3kp5ga6kpr17v0jlm0667s5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ralexstokes/vyper-mode")
    (synopsis
      "Major mode for the Vyper programming language")
    (description
      "Documentation at https://melpa.org/#/vyper-mode")
    (license #f)))

(define-public emacs-w32-browser
  (package
    (name "emacs-w32-browser")
    (version "20170101.1954")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/w32-browser.git")
               (commit
                 "e5c60eafd8f8d3546a0fa295ad5af2414d36b4e6")))
        (sha256
          (base32
            "18hcr9l5id2xdin20wrg9sdmwfad7qk78iryyg24ci9lvl53m02x"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.emacswiki.org/w32-browser.el")
    (synopsis
      "Run Windows application associated with a file.")
    (description
      "Documentation at https://melpa.org/#/w32-browser")
    (license #f)))

(define-public emacs-w32-ime
  (package
    (name "emacs-w32-ime")
    (version "20201107.143")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/trueroad/w32-ime.el.git")
               (commit
                 "9c62273dce0ba685a591577885b1e216ba832ec1")))
        (sha256
          (base32
            "1bbl1y4ym37h0sh81zd1qv9k7151maf3bxdrzr725livvl2rdk13"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/trueroad/w32-ime.el")
    (synopsis "Windows IME UI/UX controler")
    (description
      "Documentation at https://melpa.org/#/w32-ime")
    (license #f)))

(define-public emacs-w3m
  (package
    (name "emacs-w3m")
    (version "20231023.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-w3m/emacs-w3m.git")
               (commit
                 "55baf2bcb1a583d3baae1d37ad0e17b0480ffd02")))
        (sha256
          (base32
            "1vqr7bmairp70lrx9gm80w7qr2jxiijg5w1na36k7if4wikfg4kl"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "icons"
          (:exclude
            "octet.el"
            "mew-w3m.el"
            "w3m-xmas.el"
            "doc/*.texi"))))
    (home-page "unspecified")
    (synopsis "an Emacs interface to w3m")
    (description
      "Documentation at https://melpa.org/#/w3m")
    (license #f)))

(define-public emacs-wacspace
  (package
    (name "emacs-wacspace")
    (version "20180311.2350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/shosti/wacspace.el.git")
               (commit
                 "54d19aab6fd2bc5945b7ffc58104e695064927e2")))
        (sha256
          (base32
            "1nfx1qsl2gxjqbbc5xsr8f3xz2qyb4wnz3634k3hglb1jpa78j3n"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/shosti/wacspace.el")
    (synopsis
      "The WACky WorkSPACE manager for emACS")
    (description
      "Documentation at https://melpa.org/#/wacspace")
    (license #f)))

(define-public emacs-waf-mode
  (package
    (name "emacs-waf-mode")
    (version "20170403.1940")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/dvalchuk/waf-mode")
               (commit
                 "20c75eabd1d54fbce8e0dbef785c9fb68577ee4f")))
        (sha256
          (base32
            "09jqxbkkprsrcj7gj9hi8ll7d17425lyjmdmqf12ffqv5pz6aq87"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/dvalchuk/waf-mode")
    (synopsis "Waf integration for Emacs")
    (description
      "Documentation at https://melpa.org/#/waf-mode")
    (license #f)))

(define-public emacs-waher-theme
  (package
    (name "emacs-waher-theme")
    (version "20141115.1230")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsfodder/emacs-waher-theme.git")
               (commit
                 "60d31519fcfd8e797723d47961b255ae2f2e2c0a")))
        (sha256
          (base32
            "0w59ix8cbbcyhh882c8vkrbh84i8d03h9w7dchr3qy233b8wcxlc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jasonm23/emacs-waher-theme")
    (synopsis
      "Emacs 24 theme based on waher for st2 by dduckster")
    (description
      "Documentation at https://melpa.org/#/waher-theme")
    (license #f)))

(define-public emacs-wakatime-mode
  (package
    (name "emacs-wakatime-mode")
    (version "20231012.1227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wakatime/wakatime-mode.git")
               (commit
                 "5483d915eb35a24a30551abb64c55797f6749a20")))
        (sha256
          (base32
            "15dxgalfglz8c8q74g2bbmz94ig98idnlva6yqmcqq7fv2ps3086"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Automatic time tracking extension for WakaTime")
    (description
      "Documentation at https://melpa.org/#/wakatime-mode")
    (license #f)))

(define-public emacs-wakib-keys
  (package
    (name "emacs-wakib-keys")
    (version "20220211.1304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/darkstego/wakib-keys.git")
               (commit
                 "ed86134f91c532a38d2739dd15ea6cec879cbd8a")))
        (sha256
          (base32
            "1p23jr4h6hhalvsi3mk3kcf6dbph6di2h3h92ym86fxry4jjxlzh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/darkstego/wakib-keys/")
    (synopsis "Minor Mode for Modern Keybindings")
    (description
      "Documentation at https://melpa.org/#/wakib-keys")
    (license #f)))

(define-public emacs-wal-mode
  (package
    (name "emacs-wal-mode")
    (version "20220409.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LucasKl/wal-major-mode.git")
               (commit
                 "16733847f04af1929e590ff3e41f554baa3ba640")))
        (sha256
          (base32
            "1va78310jia4qgrnkrs76729db31svzm8x5dv2l3kl1qp9v6qgxg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/LucasKl/wal-major-mode")
    (synopsis
      "A major mode for the WAL programming language")
    (description
      "Documentation at https://melpa.org/#/wal-mode")
    (license #f)))

(define-public emacs-walkclj
  (package
    (name "emacs-walkclj")
    (version "20220719.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/corgi-emacs/walkclj.git")
               (commit
                 "875ee7a350f5141f425c4b5350a630e1ee1795e8")))
        (sha256
          (base32
            "1390qxghf1q11n1gpk6brqzdlvj4jn6dzl6a6d08nbv95wm3ppq3"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-parseclj emacs-treepy emacs-a))
    (home-page "https://github.com/plexus/walkclj")
    (synopsis "Manipulate Clojure parse trees")
    (description
      "Documentation at https://melpa.org/#/walkclj")
    (license #f)))

(define-public emacs-walkman
  (package
    (name "emacs-walkman")
    (version "20221007.1937")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abrochard/walkman.git")
               (commit
                 "f5021a4d9f16a2013e67a9fa7c121f87bf030203")))
        (sha256
          (base32
            "0i2yr9iv8zd8nwhap96smab1657gldrayypm18jpbfq8md6cmkg5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-json-mode))
    (home-page
      "https://github.com/abrochard/walkman")
    (synopsis "Write HTTP requests in Org mode")
    (description
      "Documentation at https://melpa.org/#/walkman")
    (license #f)))

(define-public emacs-wallpaper
  (package
    (name "emacs-wallpaper")
    (version "20201019.2123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/farlado/emacs-wallpaper.git")
               (commit
                 "cc0101726dd2fa2b4eda06924c7abfae54f663e2")))
        (sha256
          (base32
            "0k6jysr9sdz3x8h0pslpssjr23hwp358472vmgd2jmfzvjk3m21i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/farlado/emacs-wallpaper")
    (synopsis "Setting the wallpaper")
    (description
      "Documentation at https://melpa.org/#/wallpaper")
    (license #f)))

(define-public emacs-wallpreview
  (package
    (name "emacs-wallpreview")
    (version "20220703.1108")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nryotaro/wallpreview.git")
               (commit
                 "6eae0549afdfe725b453ca4fb0878c728735892d")))
        (sha256
          (base32
            "09mnzii7hilnnqvkzwrrbphgg3z3all75ijs3lgmc9q3d5is5vxr"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nryotaro/wallpreview")
    (synopsis "Set wallpapers with image-dired")
    (description
      "Documentation at https://melpa.org/#/wallpreview")
    (license #f)))

(define-public emacs-wand
  (package
    (name "emacs-wand")
    (version "20220519.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cmpitg/wand.git")
               (commit
                 "e4afc0469c818e7ce73ef31c38d911477947d72e")))
        (sha256
          (base32
            "1gcmzqpv8s87s5md3nr2s0vvbp68c4na5zmmwc080x9nf8q3hnm4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cmpitg/wand")
    (synopsis
      "Magic wand for Emacs - Select and execute")
    (description
      "Documentation at https://melpa.org/#/wand")
    (license #f)))

(define-public emacs-wandbox
  (package
    (name "emacs-wandbox")
    (version "20170603.1231")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kosh04/emacs-wandbox.git")
               (commit
                 "e002fe41f2cd9b4ce2b1dc80b83301176e9117f1")))
        (sha256
          (base32
            "0fnbj3k21lisgs94pf8z13cdymmclgpn994xq3xly4gq6l8k0an5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request emacs-s))
    (home-page
      "https://github.com/kosh04/emacs-wandbox")
    (synopsis "Wandbox client")
    (description
      "Documentation at https://melpa.org/#/wandbox")
    (license #f)))

(define-public emacs-wanderlust
  (package
    (name "emacs-wanderlust")
    (version "20231105.856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wanderlust/wanderlust.git")
               (commit
                 "8c74d52d1ae00a0ca1a087fb4983292e2c068cba")))
        (sha256
          (base32
            "0ri6anarpfqbh5a04qhbmazw319m5b9b5yfx3n51ajia9f7xsjra"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-apel emacs-flim emacs-semi))
    (arguments
      '(#:files
        ("doc/wl.texi"
         "doc/wl-ja.texi"
         "elmo/*.el"
         "wl/*.el"
         "etc/icons"
         (:exclude
           "elmo/elmo-database.el"
           "elmo/utf7.el"
           "wl/wl-dnd.el"
           "wl/wl-mule.el"
           "wl/wl-xmas.el"))))
    (home-page "unspecified")
    (synopsis
      "Yet Another Message Interface on Emacsen")
    (description
      "Documentation at https://melpa.org/#/wanderlust")
    (license #f)))

(define-public emacs-warm-night-theme
  (package
    (name "emacs-warm-night-theme")
    (version "20161101.1428")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/warm-night-theme.git")
               (commit
                 "020f084d23409b5035150508ba6e57c2509edd64")))
        (sha256
          (base32
            "1jmjyx06p0cvqi1vlg5px2g965q9pgi3j61msxjf5skzw53vlc88"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Emacs 24 theme with a dark background.")
    (description
      "Documentation at https://melpa.org/#/warm-night-theme")
    (license #f)))

(define-public emacs-wasp-mode
  (package
    (name "emacs-wasp-mode")
    (version "20230424.1307")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/wasp-mode.git")
               (commit
                 "76198cdd5f0ece3770c3a586115caea3ea613169")))
        (sha256
          (base32
            "1cxws26x1155dz3403ym946mqzvzdi25bg1dwscsh9xwwb475j74"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/wasp-mode")
    (synopsis
      "A major mode for the Wasp programming language")
    (description
      "Documentation at https://melpa.org/#/wasp-mode")
    (license #f)))

(define-public emacs-wat-ts-mode
  (package
    (name "emacs-wat-ts-mode")
    (version "20231006.223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nverno/wat-ts-mode.git")
               (commit
                 "d2bbd7dbb57482dc0407574d61b2dcad31b96204")))
        (sha256
          (base32
            "0dxb0szs6kszp2drhxqy4kq8bq7rjarar13s274241lbpdv8ylmq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nverno/wat-ts-mode")
    (synopsis
      "Major modes for webassembly text formats using tree sitter")
    (description
      "Documentation at https://melpa.org/#/wat-ts-mode")
    (license #f)))

(define-public emacs-watch-buffer
  (package
    (name "emacs-watch-buffer")
    (version "20120331.2044")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mjsteger/watch-buffer.git")
               (commit
                 "761fd7252e6d7bf5148283c2a7ee935f087d9427")))
        (sha256
          (base32
            "0i84ndnxma8s07kf5ixqyhv5f89mzc4iymgazj5inmxhvbc7s7r2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mjsteger/watch-buffer")
    (synopsis
      "run a shell command when saving a buffer")
    (description
      "Documentation at https://melpa.org/#/watch-buffer")
    (license #f)))

(define-public emacs-wavedrom-mode
  (package
    (name "emacs-wavedrom-mode")
    (version "20230913.2246")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gmlarumbe/wavedrom-mode.git")
               (commit
                 "2cd6ea64e1ac08a640b7dd62a22b203f828f4abe")))
        (sha256
          (base32
            "1g9xhwq0sqam590sxkgbj4hmpliw5simj6zqa03z0gyi2gmr5175"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/gmlarumbe/wavedrom-mode")
    (synopsis "WaveDrom Integration")
    (description
      "Documentation at https://melpa.org/#/wavedrom-mode")
    (license #f)))

(define-public emacs-wavefront-obj-mode
  (package
    (name "emacs-wavefront-obj-mode")
    (version "20170808.1716")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abend/wavefront-obj-mode.git")
               (commit
                 "34027915de6496460d8e68b5991dd24d47d54859")))
        (sha256
          (base32
            "0yj4wb5sdsbh3gp0sh2ajrrn6s8vg492809g4gxkxp30jhr6xc9q"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/abend/wavefront-obj-mode")
    (synopsis "Major mode for Wavefront obj files")
    (description
      "Documentation at https://melpa.org/#/wavefront-obj-mode")
    (license #f)))

(define-public emacs-wc-goal-mode
  (package
    (name "emacs-wc-goal-mode")
    (version "20140829.1359")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bnbeckwith/wc-goal-mode.git")
               (commit
                 "bf21ab9c5a449bcc20dd207a4915dcec218d2699")))
        (sha256
          (base32
            "0p7j4hvcxfyjf0na9s3xv29dvmwq82s56lincfasd0ydcpz4fbwc"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bnbeckwith/wc-goal-mode")
    (synopsis
      "Running word count with goals (minor mode)")
    (description
      "Documentation at https://melpa.org/#/wc-goal-mode")
    (license #f)))

(define-public emacs-wc-mode
  (package
    (name "emacs-wc-mode")
    (version "20210418.47")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bnbeckwith/wc-mode.git")
               (commit
                 "63be1433b8a63cdc3239cc751e36360429c42b51")))
        (sha256
          (base32
            "1wzgb4z2qyyv223x5fc7ff2fn5xpz4s7lr1q1y33q8878a7w9d45"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/bnbeckwith/wc-mode")
    (synopsis
      "Running word count with goals (minor mode)")
    (description
      "Documentation at https://melpa.org/#/wc-mode")
    (license #f)))

(define-public emacs-wdl-mode
  (package
    (name "emacs-wdl-mode")
    (version "20180831.1946")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zhanxw/wdl-mode.git")
               (commit
                 "cef86e5afc136ae5ad9324cd6e6d6f860b889bcf")))
        (sha256
          (base32
            "0j7sv3dcpq2fvcip9834v6k8q1d8bpnbxnvz1g691lmc58z1a86a"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/zhanxw/wdl-mode")
    (synopsis
      "WDL (Workflow Definition Language) major mode")
    (description
      "Documentation at https://melpa.org/#/wdl-mode")
    (license #f)))

(define-public emacs-weak-ref
  (package
    (name "emacs-weak-ref")
    (version "20200217.2200")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/elisp-weak-ref.git")
               (commit
                 "24e8c37da6465e65ce9f866267bd3fa53c8899c6")))
        (sha256
          (base32
            "0jh3l64sagvm3jdhxk8wwfddckwgk66w1cfn7cchklz0wss82cs2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/elisp-weak-ref")
    (synopsis "Weak references for Emacs Lisp")
    (description
      "Documentation at https://melpa.org/#/weak-ref")
    (license #f)))

(define-public emacs-weather-metno
  (package
    (name "emacs-weather-metno")
    (version "20230129.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ruediger/weather-metno-el.git")
               (commit
                 "cb50e5a975e5831ead9486a83df9dcb4a06d9f3d")))
        (sha256
          (base32
            "0dvg6w60v8vsjl0h0x7n70nlijizvyxclfbf4kirk0zifhc14g76"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ruediger/weather-metno-el")
    (synopsis "Weather data from met.no in Emacs")
    (description
      "Documentation at https://melpa.org/#/weather-metno")
    (license #f)))

(define-public emacs-web
  (package
    (name "emacs-web")
    (version "20141231.2001")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-web.git")
               (commit
                 "483188dac4bc6b409b985c9dae45f3324a425efd")))
        (sha256
          (base32
            "03xcadplw1hg5hxw6bfrhw5xkkxk3i4105f114c6m3d2525jq4y5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (arguments '(#:files ("web.el")))
    (home-page
      "http://github.com/nicferrier/emacs-web")
    (synopsis "useful HTTP client")
    (description
      "Documentation at https://melpa.org/#/web")
    (license #f)))

(define-public emacs-web-beautify
  (package
    (name "emacs-web-beautify")
    (version "20161115.2247")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yasuyk/web-beautify.git")
               (commit
                 "e1b45321d8c11b404b12c8e55afe55eaa7c84ee9")))
        (sha256
          (base32
            "03b5pj58m00lkazyvvasa4qndrkh2kjzv2y7qhxljfg5mngyg3zg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yasuyk/web-beautify")
    (synopsis "Format HTML, CSS and JavaScript/JSON")
    (description
      "Documentation at https://melpa.org/#/web-beautify")
    (license #f)))

(define-public emacs-web-completion-data
  (package
    (name "emacs-web-completion-data")
    (version "20160318.848")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osv/web-completion-data.git")
               (commit
                 "c272c94e8a71b779c29653a532f619acad433a4f")))
        (sha256
          (base32
            "19nzjgvd2i5745283ck3k2vylrr6lnk9h3ggzwrwdhyd3m9433vm"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("*.el" "html-stuff")))
    (home-page
      "https://github.com/osv/web-completion-data")
    (synopsis
      "Shared completion data for ac-html and company-web")
    (description
      "Documentation at https://melpa.org/#/web-completion-data")
    (license #f)))

(define-public emacs-web-mode
  (package
    (name "emacs-web-mode")
    (version "20231025.1927")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fxbois/web-mode.git")
               (commit
                 "848fce94de202541cd3fcd35e9c9d22783e9e828")))
        (sha256
          (base32
            "1yypnb36hr04sgwn486j18a2z5i3i5fbwnjdw6yn2v59mbgqfdfz"))))
    (build-system melpa-build-system)
    (home-page "https://web-mode.org")
    (synopsis "major mode for editing web templates")
    (description
      "Documentation at https://melpa.org/#/web-mode")
    (license #f)))

(define-public emacs-web-mode-edit-element
  (package
    (name "emacs-web-mode-edit-element")
    (version "20190531.852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jtkDvlp/web-mode-edit-element.git")
               (commit
                 "ad5d7e4dc2420bdd00ce65d9adffbd38a5904afa")))
        (sha256
          (base32
            "143xh6xc7qd88hjjmcs9fd2zlgxl0hhgx5fplhbi9zxd2ihhz0dg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-mode))
    (home-page
      "https://github.com/jtkDvlp/web-mode-edit-element")
    (synopsis
      "Helper-functions for attribute- and element-handling")
    (description
      "Documentation at https://melpa.org/#/web-mode-edit-element")
    (license #f)))

(define-public emacs-web-narrow-mode
  (package
    (name "emacs-web-narrow-mode")
    (version "20170407.210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Qquanwei/web-narrow-mode.git")
               (commit
                 "73bdcb7d0701abe65dab4fc295d944885e05ae33")))
        (sha256
          (base32
            "1wg54vyfbacmyh8lyd5fgh88lfby17v24l98jjgxscaqgms86bch"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-web-mode))
    (home-page
      "https://github.com/Qquanwei/web-narrow-mode")
    (synopsis "quick narrow code block in web-mode")
    (description
      "Documentation at https://melpa.org/#/web-narrow-mode")
    (license #f)))

(define-public emacs-web-search
  (package
    (name "emacs-web-search")
    (version "20190620.602")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/web-search.el.git")
               (commit
                 "a22cbdc663a1895d5a5b69de91e1e3b9eb64b92f")))
        (sha256
          (base32
            "0nbfgv99c0kmc9imnbqjhamxfdjaj00lhdxjxmrwkvzaiplsa5ra"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          "web-search"
          "web-search-completion.bash")))
    (home-page
      "https://github.com/xuchunyang/web-search.el")
    (synopsis "Open a web search")
    (description
      "Documentation at https://melpa.org/#/web-search")
    (license #f)))

(define-public emacs-web-server
  (package
    (name "emacs-web-server")
    (version "20210708.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eschulte/emacs-web-server.git")
               (commit
                 "6357a1c2d1718778503f7ee0909585094117525b")))
        (sha256
          (base32
            "1dp4ajfd4ikqdr2lkmjijw431d3hi07izaw54fn5zw8mp9dk225y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/eschulte/emacs-web-server")
    (synopsis "Emacs Web Server")
    (description
      "Documentation at https://melpa.org/#/web-server")
    (license #f)))

(define-public emacs-webdriver
  (package
    (name "emacs-webdriver")
    (version "20231016.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/mauroaranda/emacs-webdriver.git")
               (commit
                 "f73fc53aea5733d630e66d8da178218983d5898a")))
        (sha256
          (base32
            "1m1zd3dyp1jy3ki6jsmmn583s0vbpvk12g0dy34kfdjxdlp7sx8y"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        (:defaults
          (:exclude "doclicense.texi" "docstyle.texi"))))
    (home-page
      "https://gitlab.com/mauroaranda/emacs-webdriver")
    (synopsis "WebDriver local end implementation")
    (description
      "Documentation at https://melpa.org/#/webdriver")
    (license #f)))

(define-public emacs-webkit-color-picker
  (package
    (name "emacs-webkit-color-picker")
    (version "20180325.736")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/osener/emacs-webkit-color-picker.git")
               (commit
                 "765cac80144cad4bc0bf59025ea0199f0486f737")))
        (sha256
          (base32
            "0a6nirdn1l7cymjycbns38ja9an1z4l5lwjk5h428aly3pmkvdqj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-posframe))
    (arguments
      '(#:files (:defaults "color-picker.html")))
    (home-page
      "https://github.com/osener/emacs-webkit-color-picker")
    (synopsis
      "Insert and adjust colors using Webkit Widgets")
    (description
      "Documentation at https://melpa.org/#/webkit-color-picker")
    (license #f)))

(define-public emacs-weblio
  (package
    (name "emacs-weblio")
    (version "20210718.1410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pzel/weblio.git")
               (commit
                 "2b4b0c206440b5c63960214feacfceb0c26231c7")))
        (sha256
          (base32
            "1iy1finnxqjbdivzyn7crpnha87mq1fmd98pkx2r8sk551nfw35s"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/pzel/weblio")
    (synopsis "Look up Japanese words on Weblio.jp")
    (description
      "Documentation at https://melpa.org/#/weblio")
    (license #f)))

(define-public emacs-weblogger
  (package
    (name "emacs-weblogger")
    (version "20110926.1618")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hexmode/weblogger-el.git")
               (commit
                 "b3dd4aead9d3a87e6d85e7fef4f4f3bd40d87b53")))
        (sha256
          (base32
            "03dkabszk6ya3vaps1ap16psk5bbar8zd5ipn1lmyzsbd3hwm8mj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xml-rpc))
    (home-page "http://launchpad.net/weblogger-el")
    (synopsis "Weblog maintenance via XML-RPC APIs")
    (description
      "Documentation at https://melpa.org/#/weblogger")
    (license #f)))

(define-public emacs-weblorg
  (package
    (name "emacs-weblorg")
    (version "20230828.150")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacs-love/weblorg.git")
               (commit
                 "be9e3d05b5b7c561e5892cad4edace2bf482255b")))
        (sha256
          (base32
            "18vn0ky98890w24108p5g93b8yq0hafkfqdv6xds5yx342qq56qc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-templatel))
    (arguments '(#:files (:defaults "themes")))
    (home-page "https://emacs.love/weblorg")
    (synopsis "Static Site Generator for org-mode")
    (description
      "Documentation at https://melpa.org/#/weblorg")
    (license #f)))

(define-public emacs-webpaste
  (package
    (name "emacs-webpaste")
    (version "20220524.1745")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/etu/webpaste.el.git")
               (commit
                 "d96da58fe42988d5c433c71ee9f8e6fb75d595a9")))
        (sha256
          (base32
            "0h4cp334ga2vk89gmkhycqzakxsjldql98a687y57ixpq7ri8qsq"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "https://github.com/etu/webpaste.el")
    (synopsis "Paste to pastebin-like services")
    (description
      "Documentation at https://melpa.org/#/webpaste")
    (license #f)))

(define-public emacs-websearch
  (package
    (name "emacs-websearch")
    (version "20230705.1639")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/xgqt/emacs-websearch.git")
               (commit
                 "5120cec3c36ddcdaceb5235c0b52eecbc3b37fcb")))
        (sha256
          (base32
            "0q6y2347w4mfshnxjvkk4vm0bmi24zpz7kc0irk0cl7hxa20025d"))))
    (build-system melpa-build-system)
    (home-page
      "https://gitlab.com/xgqt/emacs-websearch/")
    (synopsis "Query search engines")
    (description
      "Documentation at https://melpa.org/#/websearch")
    (license #f)))

(define-public emacs-websocket
  (package
    (name "emacs-websocket")
    (version "20230809.305")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ahyatt/emacs-websocket.git")
               (commit
                 "40c208eaab99999d7c1e4bea883648da24c03be3")))
        (sha256
          (base32
            "0bq0y63rriwsw6v8mn72773iqic2q52vx1j7mfa8br27sm6y1pd4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ahyatt/emacs-websocket")
    (synopsis "Emacs WebSocket client and server")
    (description
      "Documentation at https://melpa.org/#/websocket")
    (license #f)))

(define-public emacs-wedge-ws
  (package
    (name "emacs-wedge-ws")
    (version "20140714.2149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aes/wedge-ws.git")
               (commit
                 "4669115f02d9c6fee067cc5369bb38c0f9db88b2")))
        (sha256
          (base32
            "19hgb5knqqc4rb8yl8s604xql8ar6m9r4d379cfakn15jvwqnl98"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Wedge whitespace between columns in text")
    (description
      "Documentation at https://melpa.org/#/wedge-ws")
    (license #f)))

(define-public emacs-weechat
  (package
    (name "emacs-weechat")
    (version "20190520.1551")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/the-kenny/weechat.el.git")
               (commit
                 "d9a13306ea8be27367f92e9202d116a88fa1f441")))
        (sha256
          (base32
            "1z9lav09jsmhshlk0xnbp21y9apzhd9zv08h88sdg942v0fn2fid"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s emacs-tracking))
    (home-page
      "https://github.com/the-kenny/weechat.el")
    (synopsis
      "Chat via WeeChat's relay protocol in Emacs")
    (description
      "Documentation at https://melpa.org/#/weechat")
    (license #f)))

(define-public emacs-weechat-alert
  (package
    (name "emacs-weechat-alert")
    (version "20160416.1248")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungi/weechat-alert.git")
               (commit
                 "a8fd557c8f335322f132c1c6c08b6741d6394e2e")))
        (sha256
          (base32
            "1hkhim2jfdywx6ks4qfcizycp5qsx4ms6929kbgmzzb8i7j380x6"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-weechat emacs-alert))
    (home-page
      "https://github.com/kungi/weechat-alert")
    (synopsis "Weechat notifier using alerts")
    (description
      "Documentation at https://melpa.org/#/weechat-alert")
    (license #f)))

(define-public emacs-weibo
  (package
    (name "emacs-weibo")
    (version "20150307.2242")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/austin-----/weibo.emacs.git")
               (commit
                 "a8abb50b7602fe15fe2bc6400ac29780e956b390")))
        (sha256
          (base32
            "0hc5iyjpcik996ns84akrl28scndmn0gd1zfdf1nnqq6n2m5zvgh"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/austin-----/weibo.emacs")
    (synopsis "Weibo client for Emacs")
    (description
      "Documentation at https://melpa.org/#/weibo")
    (license #f)))

(define-public emacs-weyland-yutani-theme
  (package
    (name "emacs-weyland-yutani-theme")
    (version "20210802.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jstaursky/weyland-yutani-theme.git")
               (commit
                 "e89a63a62e071180c9cdd9067679fadc3f7bf796")))
        (sha256
          (base32
            "0gxlz9b7fvbjkqxsyb4l75g7jsxyms0i1vpnb6y499hl115akcaz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jstaursky/weyland-yutani-theme")
    (synopsis
      "Emacs theme based off Alien movie franchise")
    (description
      "Documentation at https://melpa.org/#/weyland-yutani-theme")
    (license #f)))

(define-public emacs-wfnames
  (package
    (name "emacs-wfnames")
    (version "20230924.1538")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/wfnames.git")
               (commit
                 "19b452fb698a5ba3b0f1d6e7d69a5e19af2c83e7")))
        (sha256
          (base32
            "0iihs4iam27m2ggmhy9x0np0awirxhzy78q677ng734zdig6bccz"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/wfnames")
    (synopsis "Edit filenames")
    (description
      "Documentation at https://melpa.org/#/wfnames")
    (license #f)))

(define-public emacs-wgrep
  (package
    (name "emacs-wgrep")
    (version "20230203.1214")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "b4d69280d8a6a5ded1597e02afbaa811a160383b")))
        (sha256
          (base32
            "16qg5dpg7hms5dmh92ksnjahf6010pw97ggi7sb0mfafd6iwps0a"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("wgrep.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el")
    (synopsis "Writable grep buffer")
    (description
      "Documentation at https://melpa.org/#/wgrep")
    (license #f)))

(define-public emacs-wgrep-ack
  (package
    (name "emacs-wgrep-ack")
    (version "20230207.1125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "edf768732a56840db6879706b64c5773c316d619")))
        (sha256
          (base32
            "1v4kh00vv7ccs8j46gyp0ikb6v3ppb1na2azdmxwyb6n2acvy4qx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-ack.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el")
    (synopsis "Writable ack-and-a-half buffer")
    (description
      "Documentation at https://melpa.org/#/wgrep-ack")
    (license #f)))

(define-public emacs-wgrep-ag
  (package
    (name "emacs-wgrep-ag")
    (version "20230202.315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "3132abd3750b8c87cbcf6942db952acfab5edccd")))
        (sha256
          (base32
            "1bw8s1093qmbnls1pykfzgwsqym7277v41257wz31s0hvf4i346a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-ag.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el")
    (synopsis "Writable ag buffer")
    (description
      "Documentation at https://melpa.org/#/wgrep-ag")
    (license #f)))

(define-public emacs-wgrep-deadgrep
  (package
    (name "emacs-wgrep-deadgrep")
    (version "20230405.936")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "3132abd3750b8c87cbcf6942db952acfab5edccd")))
        (sha256
          (base32
            "1bw8s1093qmbnls1pykfzgwsqym7277v41257wz31s0hvf4i346a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-deadgrep.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-deadgrep.el")
    (synopsis
      "Writable deadgrep buffer and apply the changes to files")
    (description
      "Documentation at https://melpa.org/#/wgrep-deadgrep")
    (license #f)))

(define-public emacs-wgrep-helm
  (package
    (name "emacs-wgrep-helm")
    (version "20230202.315")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "3132abd3750b8c87cbcf6942db952acfab5edccd")))
        (sha256
          (base32
            "1bw8s1093qmbnls1pykfzgwsqym7277v41257wz31s0hvf4i346a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-helm.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el")
    (synopsis "Writable helm-grep-mode buffer")
    (description
      "Documentation at https://melpa.org/#/wgrep-helm")
    (license #f)))

(define-public emacs-wgrep-pt
  (package
    (name "emacs-wgrep-pt")
    (version "20230207.1125")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/Emacs-wgrep.git")
               (commit
                 "edf768732a56840db6879706b64c5773c316d619")))
        (sha256
          (base32
            "1v4kh00vv7ccs8j46gyp0ikb6v3ppb1na2azdmxwyb6n2acvy4qx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wgrep))
    (arguments '(#:files ("wgrep-pt.el")))
    (home-page
      "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el")
    (synopsis "Writable pt buffer")
    (description
      "Documentation at https://melpa.org/#/wgrep-pt")
    (license #f)))

(define-public emacs-wgsl-mode
  (package
    (name "emacs-wgsl-mode")
    (version "20221127.2129")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/acowley/wgsl-mode.git")
               (commit
                 "e7856d6755d93e40ed74598a68ef5f607322618b")))
        (sha256
          (base32
            "0344db2kx1hw1gr971iqxhwy7qzn2vfkjgg8ccla9zsf22nlqxk3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/acowley/wgsl-mode")
    (synopsis
      "Syntax highlighting for the WebGPU Shading Language")
    (description
      "Documentation at https://melpa.org/#/wgsl-mode")
    (license #f)))

(define-public emacs-what-the-commit
  (package
    (name "emacs-what-the-commit")
    (version "20150901.1316")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/danbarbarito/what-the-commit.el.git")
               (commit
                 "868c80a1b8614bcbd2225cd0290142c72f2a7956")))
        (sha256
          (base32
            "04w62davpqqqvympkr52bg54c2i45p09q9bs70p9ff5jvc6i3g76"))))
    (build-system melpa-build-system)
    (home-page "http://barbarito.me/")
    (synopsis "Random commit message generator")
    (description
      "Documentation at https://melpa.org/#/what-the-commit")
    (license #f)))

(define-public emacs-which-key
  (package
    (name "emacs-which-key")
    (version "20230905.2128")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/justbur/emacs-which-key.git")
               (commit
                 "4d20bc852545a2e602f59084a630f888542052b1")))
        (sha256
          (base32
            "0qm4br8smkmp63wxdw6b89dn8shvha8jqdr57fmz6a9n0axywbv5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/justbur/emacs-which-key")
    (synopsis
      "Display available keybindings in popup")
    (description
      "Documentation at https://melpa.org/#/which-key")
    (license #f)))

(define-public emacs-which-key-posframe
  (package
    (name "emacs-which-key-posframe")
    (version "20230313.1841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/which-key-posframe.git")
               (commit
                 "e4a9ce9a1b20de550fca51f14d055821980d534a")))
        (sha256
          (base32
            "0kgc29pb5k6cb2m13cz1yhys1k8l4dpx6wjjgldpdlg9qw2i1b53"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-posframe emacs-which-key))
    (home-page
      "https://github.com/emacsorphanage/which-key-posframe")
    (synopsis "Using posframe to show which-key")
    (description
      "Documentation at https://melpa.org/#/which-key-posframe")
    (license #f)))

(define-public emacs-whiley-mode
  (package
    (name "emacs-whiley-mode")
    (version "20220501.2219")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Whiley/WhileyEmacsMode.git")
               (commit
                 "69eb67cf41dad029f1456079aea62a4b61ca9b46")))
        (sha256
          (base32
            "19j12h9v7agw340zb0cwlga2a0agl8c4bv19hxma5wd6sj0srp3v"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Whiley/WhileyEmacsMode")
    (synopsis "Major mode for Whiley language")
    (description
      "Documentation at https://melpa.org/#/whiley-mode")
    (license #f)))

(define-public emacs-whitaker
  (package
    (name "emacs-whitaker")
    (version "20210203.1149")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fuco1/whitaker.git")
               (commit
                 "a6fda24ccb69a18c0706633326d5cc4fcfaed83a")))
        (sha256
          (base32
            "00s7cljadn4f713kvwgvlapzh208fpqwyxlv4sxbsw6ba3gdllrd"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Comint interface for Whitaker's Words")
    (description
      "Documentation at https://melpa.org/#/whitaker")
    (license #f)))

(define-public emacs-white-sand-theme
  (package
    (name "emacs-white-sand-theme")
    (version "20210131.813")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mswift42/white-sand-theme.git")
               (commit
                 "729dd52cc1936250183d6761eed406c4be514a71")))
        (sha256
          (base32
            "0vlq6wywhc08z4ivyahpagcxbxfww6ipbmvgw4sgc8c6h3vb8v9s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Emacs theme with a light background.")
    (description
      "Documentation at https://melpa.org/#/white-sand-theme")
    (license #f)))

(define-public emacs-white-theme
  (package
    (name "emacs-white-theme")
    (version "20160917.1743")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anler/white-theme.el.git")
               (commit
                 "e9e6d5b9d43da6eb15e86f5fbc8b1ba83abe8c78")))
        (sha256
          (base32
            "1yqfq1gzkrw79myvj16nfi30ynfyz8yrpbzjcj8nhsc5rfrrmym2"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/anler/white-theme.el")
    (synopsis
      "Minimalistic light color theme inspired by basic-theme")
    (description
      "Documentation at https://melpa.org/#/white-theme")
    (license #f)))

(define-public emacs-whitespace-cleanup-mode
  (package
    (name "emacs-whitespace-cleanup-mode")
    (version "20210510.533")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/whitespace-cleanup-mode.git")
               (commit
                 "b108b73ddf8f7e747d5a20a681560171e02ad037")))
        (sha256
          (base32
            "13il7yi6j0cd995xzadbilhg50zcvzbpcqvivh9r1qbqq3q5aw1y"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/whitespace-cleanup-mode")
    (synopsis
      "Intelligently call whitespace-cleanup on save")
    (description
      "Documentation at https://melpa.org/#/whitespace-cleanup-mode")
    (license #f)))

(define-public emacs-whizzml-mode
  (package
    (name "emacs-whizzml-mode")
    (version "20201013.239")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/whizzml/whizzml-mode.git")
               (commit
                 "3dce3be0c32b9b2d259e462b4b27c530af47466a")))
        (sha256
          (base32
            "00fv8s66iwahjcdi6a45jpr9fhwjfpzv9qnfr6m8pwlkzv0caxkr"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Programming mode for editing WhizzML files")
    (description
      "Documentation at https://melpa.org/#/whizzml-mode")
    (license #f)))

(define-public emacs-whois
  (package
    (name "emacs-whois")
    (version "20231106.1901")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lassik/emacs-whois.git")
               (commit
                 "93413908ec7d39a70700b4b97d3185b06ae69204")))
        (sha256
          (base32
            "15jgfh7kh6d76hpwp41p91y6blclmrjdw01b1g83sj3v9ncnykhq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/lassik/emacs-whois")
    (synopsis
      "Syntax highlighted domain name queries using system whois")
    (description
      "Documentation at https://melpa.org/#/whois")
    (license #f)))

(define-public emacs-whole-line-or-region
  (package
    (name "emacs-whole-line-or-region")
    (version "20201214.650")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/whole-line-or-region.git")
               (commit
                 "3c1a55103e52c7a3010ee0043af22484d23a441e")))
        (sha256
          (base32
            "0bkfx18jpy8b91yq917va5x2mkrzqlyi6a38bi90zfqhxz5h69g4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/purcell/whole-line-or-region")
    (synopsis
      "Operate on current line if region undefined")
    (description
      "Documentation at https://melpa.org/#/whole-line-or-region")
    (license #f)))

(define-public emacs-why-this
  (package
    (name "emacs-why-this")
    (version "20221129.817")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/why-this-"
               version
               ".el"))
        (sha256
          (base32
            "1vlvz659x1485sbzfz2m47qs55byj01sn3xqzzx94nqfy8nq3q0c"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/akib/emacs-why-this")
    (synopsis
      "Why is this line here?  Ask version control")
    (description
      "Documentation at https://melpa.org/#/why-this")
    (license #f)))

(define-public emacs-wide-column
  (package
    (name "emacs-wide-column")
    (version "20170925.1613")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/phillord/wide-column.git")
               (commit
                 "ce9ef4675485a7bea381077866368ef875226b10")))
        (sha256
          (base32
            "0qh8hy4jl59bfg4323a8h4q4a78gn4hsglfk2h23hqssbv4mhsp2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Calls functions dependant on column position.")
    (description
      "Documentation at https://melpa.org/#/wide-column")
    (license #f)))

(define-public emacs-widget-mvc
  (package
    (name "emacs-widget-mvc")
    (version "20150102.406")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-widget-mvc.git")
               (commit
                 "ff5a85880df7b87f9f480fe3c28438a0712b7b87")))
        (sha256
          (base32
            "1s0srhklmkmj3lfs8vr1dqi3s48z7fwx9mxqxckk5njld317hqg7"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "MVC framework for the emacs widgets")
    (description
      "Documentation at https://melpa.org/#/widget-mvc")
    (license #f)))

(define-public emacs-wiki-nav
  (package
    (name "emacs-wiki-nav")
    (version "20230304.2212")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/button-lock.git")
               (commit
                 "1f7a89ca05b6167af7d1337ad23a5d923486caac")))
        (sha256
          (base32
            "12agr7c9q8mwm73z86vx1rpfsjsw1xacfpfkqy0k07p86lv5d8g5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-button-lock emacs-nav-flash))
    (arguments '(#:files ("wiki-nav.el")))
    (home-page
      "http://github.com/rolandwalker/button-lock")
    (synopsis
      "Simple file navigation using [[WikiStrings]]")
    (description
      "Documentation at https://melpa.org/#/wiki-nav")
    (license #f)))

(define-public emacs-wiki-summary
  (package
    (name "emacs-wiki-summary")
    (version "20181010.1824")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jozefg/wiki-summary.el.git")
               (commit
                 "fa41ab6e50b3b80e54148af9d4bac18fd0405000")))
        (sha256
          (base32
            "0qcnqwiylkkb7132bzra49k7jg8kq13jif8096vpg4xzpcq5lpj2"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jozefg/wiki-summary.el")
    (synopsis
      "View Wikipedia summaries in Emacs easily.")
    (description
      "Documentation at https://melpa.org/#/wiki-summary")
    (license #f)))

(define-public emacs-wikinfo
  (package
    (name "emacs-wikinfo")
    (version "20220906.1709")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/progfolio/wikinfo.git")
               (commit
                 "bf395c9aaf6be7fda371be611005737d52417fec")))
        (sha256
          (base32
            "13cnwrwx2jv363rrdbz4y04wz4vm7vjvy9xghp7zsfa6v79yfi7z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/progfolio/wikinfo")
    (synopsis "Scrape Wikipedia Infoboxes")
    (description
      "Documentation at https://melpa.org/#/wikinfo")
    (license #f)))

(define-public emacs-wikinforg
  (package
    (name "emacs-wikinforg")
    (version "20231015.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/progfolio/wikinforg.git")
               (commit
                 "70260785e89b682f4dfde1aadaa345ad8b4b36ca")))
        (sha256
          (base32
            "0mk283dk6w312k3c1vh13hp09i1q5g32nvhf0kpl2qjgjivbhfsi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-wikinfo))
    (home-page
      "https://github.com/progfolio/wikinforg")
    (synopsis "Org-mode wikinfo integration")
    (description
      "Documentation at https://melpa.org/#/wikinforg")
    (license #f)))

(define-public emacs-wildcharm-light-theme
  (package
    (name "emacs-wildcharm-light-theme")
    (version "20231103.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/habamax/wildcharm-theme.git")
               (commit
                 "ab0ed9cc5b4a285cddef52b193c26a979e1dcd08")))
        (sha256
          (base32
            "152hilpbjmbf8yvyr9w4m4j2q0zczzsw4mc9vkwixk8m6a0x4i9q"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("wildcharm-light-theme.el")))
    (home-page
      "https://github.com/habamax/wildcharm-theme")
    (synopsis
      "Port of vim-wildcharm (light) colorscheme")
    (description
      "Documentation at https://melpa.org/#/wildcharm-light-theme")
    (license #f)))

(define-public emacs-wildcharm-theme
  (package
    (name "emacs-wildcharm-theme")
    (version "20231103.700")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/habamax/wildcharm-theme.git")
               (commit
                 "ab0ed9cc5b4a285cddef52b193c26a979e1dcd08")))
        (sha256
          (base32
            "152hilpbjmbf8yvyr9w4m4j2q0zczzsw4mc9vkwixk8m6a0x4i9q"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("wildcharm-theme.el")))
    (home-page
      "https://github.com/habamax/wildcharm-theme")
    (synopsis "Port of vim-wildcharm colorscheme")
    (description
      "Documentation at https://melpa.org/#/wildcharm-theme")
    (license #f)))

(define-public emacs-wilt
  (package
    (name "emacs-wilt")
    (version "20180220.854")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sixty-north/emacs-wilt.git")
               (commit
                 "04dbe37fa35d0b24c791421785d2c97a8cbfe2cc")))
        (sha256
          (base32
            "197kqp22pyy1in2rq063mahvrf00vrfvgnfkqp0zy7hpkhiiqvim"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-s))
    (home-page
      "https://github.com/sixty-north/emacs-wilt")
    (synopsis
      "An extensions for calculating WILT in a buffer.")
    (description
      "Documentation at https://melpa.org/#/wilt")
    (license #f)))

(define-public emacs-win-switch
  (package
    (name "emacs-win-switch")
    (version "20161009.1627")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/genovese/win-switch.git")
               (commit
                 "954eb5e4c5737f0c06368c42a7f1c3dd374d782f")))
        (sha256
          (base32
            "1xpx4sc1g1w8w0yc39k2dys83m8skrpvi745bfrzdl47jngrf54h"))))
    (build-system melpa-build-system)
    (home-page
      "http://www.stat.cmu.edu/~genovese/emacs/win-switch/")
    (synopsis
      "fast, dynamic bindings for window-switching/resizing")
    (description
      "Documentation at https://melpa.org/#/win-switch")
    (license #f)))

(define-public emacs-windata
  (package
    (name "emacs-windata")
    (version "20090830.1040")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/windata.git")
               (commit
                 "a723fc446ceaec23d5f29ecc8245d94c99d91625")))
        (sha256
          (base32
            "0y8yw5hazsir5kjskrh4mr63mmz87dc7yy5ddmlwpmn03wanqpha"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "convert window configuration to list")
    (description
      "Documentation at https://melpa.org/#/windata")
    (license #f)))

(define-public emacs-window-end-visible
  (package
    (name "emacs-window-end-visible")
    (version "20140508.2041")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rolandwalker/window-end-visible.git")
               (commit
                 "525500fb2ebc08f3f9ea493972e5f2e1d79f89ef")))
        (sha256
          (base32
            "0g69r64gyz4p3k6n8l0i1837mszycbrp23acnp0iy0y3mg67x3pn"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/rolandwalker/window-end-visible")
    (synopsis
      "Find the last visible point in a window")
    (description
      "Documentation at https://melpa.org/#/window-end-visible")
    (license #f)))

(define-public emacs-window-jump
  (package
    (name "emacs-window-jump")
    (version "20170809.2208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/chumpage/chumpy-windows.git")
               (commit
                 "6bdb51e9a346907d60a9625f6180bddd06be6674")))
        (sha256
          (base32
            "1wkyvfqmf24c8kb162pwi6wcm88bzf0x9mxljzkx0s8bq9aliny6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("window-jump.el")))
    (home-page
      "https://github.com/chumpage/chumpy-windows")
    (synopsis
      "Move left/right/up/down through your windows.")
    (description
      "Documentation at https://melpa.org/#/window-jump")
    (license #f)))

(define-public emacs-window-layout
  (package
    (name "emacs-window-layout")
    (version "20170215.33")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kiwanami/emacs-window-layout.git")
               (commit
                 "cd2e4f967b610c2bbef53182829e47250d027056")))
        (sha256
          (base32
            "0wgqi8r844lbx52fn6az8c1n8m681rp6dkfzd54wmdk1ka7zmvv6"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("window-layout.el")))
    (home-page "unspecified")
    (synopsis "window layout manager")
    (description
      "Documentation at https://melpa.org/#/window-layout")
    (license #f)))

(define-public emacs-window-number
  (package
    (name "emacs-window-number")
    (version "20170801.151")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nikolas/window-number.git")
               (commit
                 "d41722de646ffeb3f70d26e4a86a5a1ba5c6be87")))
        (sha256
          (base32
            "1ifs7zp8c5m9da5dz0y4cq7pgqgdkz63v00ib07xdycnfjp4w17i"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nikolas/window-number")
    (synopsis "Select windows by numbers.")
    (description
      "Documentation at https://melpa.org/#/window-number")
    (license #f)))

(define-public emacs-window-numbering
  (package
    (name "emacs-window-numbering")
    (version "20160809.1810")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nschum/window-numbering.el.git")
               (commit
                 "10809b3993a97c7b544240bf5d7ce9b1110a1b89")))
        (sha256
          (base32
            "1nlgzrjg5k7wyaka8ziqyv683vsc0f2lw5kr5xajcqlamwbzs7vi"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("window-numbering.el")))
    (home-page
      "http://nschum.de/src/emacs/window-numbering-mode/")
    (synopsis "Numbered window shortcuts")
    (description
      "Documentation at https://melpa.org/#/window-numbering")
    (license #f)))

(define-public emacs-window-purpose
  (package
    (name "emacs-window-purpose")
    (version "20210628.715")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bmag/emacs-purpose.git")
               (commit
                 "bb462f12f836414425edac32ebd069b4fd5b98d4")))
        (sha256
          (base32
            "1cw513mh3gyl21qpmgwqjgpi8kwddmd4n69l4ax5a5pv3vvwrcx9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-imenu-list))
    (arguments '(#:files (:defaults "layouts")))
    (home-page
      "https://github.com/bmag/emacs-purpose")
    (synopsis
      "Purpose-based window management for Emacs")
    (description
      "Documentation at https://melpa.org/#/window-purpose")
    (license #f)))

(define-public emacs-winds
  (package
    (name "emacs-winds")
    (version "20201121.123")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Javyre/winds.el.git")
               (commit
                 "5827e890059d0ce67ebb4779da63c15afccf0973")))
        (sha256
          (base32
            "0j56cwq283ywkpy1mmmrim5hncmmgh8i7h419w2x9nbxnv3yb4d5"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/Javyre/winds.el")
    (synopsis
      "Window configuration switcher grouped by workspaces")
    (description
      "Documentation at https://melpa.org/#/winds")
    (license #f)))

(define-public emacs-windsize
  (package
    (name "emacs-windsize")
    (version "20181029.2257")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grammati/windsize.git")
               (commit
                 "62c2846bbe95b0a73e996c75e4a644d05f57aaaa")))
        (sha256
          (base32
            "13kfrmv3vmkfanxv9nym5v43hx5p7xkgqmx65zcxh4gcbaham1mi"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/grammati/windsize")
    (synopsis "Simple, intuitive window resizing")
    (description
      "Documentation at https://melpa.org/#/windsize")
    (license #f)))

(define-public emacs-windswap
  (package
    (name "emacs-windswap")
    (version "20200722.411")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/purcell/windswap.git")
               (commit
                 "1a334f6543e0a30c55ea1e6071e9732d948f9e4b")))
        (sha256
          (base32
            "0q36rqy1ss1hayf698zla2m6ff57gigkji5slaffjhnijhsj3c67"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/purcell/windswap")
    (synopsis
      "Like windmove, but swaps buffers while moving point")
    (description
      "Documentation at https://melpa.org/#/windswap")
    (license #f)))

(define-public emacs-windwow
  (package
    (name "emacs-windwow")
    (version "20170816.148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vijumathew/windwow.git")
               (commit
                 "77bad26f651744b68d31b389389147014d250f23")))
        (sha256
          (base32
            "0vbmmf8wm76k389g5ncs0grwlpwp3glpwvhdi5dfxaqcp2phaaad"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "github.com/vijumathew/windwow")
    (synopsis "simple workspace management")
    (description
      "Documentation at https://melpa.org/#/windwow")
    (license #f)))

(define-public emacs-winnow
  (package
    (name "emacs-winnow")
    (version "20210105.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dgtized/winnow.el.git")
               (commit
                 "761b15bc31696a4f80c5fd508c84b1f5b4190ec2")))
        (sha256
          (base32
            "1hl208sl8vq6mjv9a3f4xmj7732jy3mw4bikxcs5c1drlmqr3mxs"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dgtized/winnow.el")
    (synopsis
      "winnow ag/grep results by matching/excluding lines")
    (description
      "Documentation at https://melpa.org/#/winnow")
    (license #f)))

(define-public emacs-winpoint
  (package
    (name "emacs-winpoint")
    (version "20131023.1713")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jorgenschaefer/winpoint.git")
               (commit
                 "e6050093c076308184566fa1d1012423d6934773")))
        (sha256
          (base32
            "1qrbvidnmgg7jyasb28bc0z1x4a4ayzq5jmv38dsx0qs080s85wy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jorgenschaefer/winpoint")
    (synopsis
      "Remember buffer positions per-window, not per buffer")
    (description
      "Documentation at https://melpa.org/#/winpoint")
    (license #f)))

(define-public emacs-winring
  (package
    (name "emacs-winring")
    (version "20180530.18")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/warsaw/winring.git")
               (commit
                 "f2d072bd446b73e93b127523f19ea82b99b9267f")))
        (sha256
          (base32
            "1j0g52panhx91hqw5glnlv5vnnpnjyx49xc8xif8mjf0m27723fv"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/warsaw/winring")
    (synopsis "Window configuration rings")
    (description
      "Documentation at https://melpa.org/#/winring")
    (license #f)))

(define-public emacs-winum
  (package
    (name "emacs-winum")
    (version "20190911.1607")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/deb0ch/emacs-winum.git")
               (commit
                 "c5455e866e8a5f7eab6a7263e2057aff5f1118b9")))
        (sha256
          (base32
            "0lj4cp7ml7cjhkd66f6ivcl6sbfs2my8ajjlynzl3pm5qansfw5i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/deb0ch/winum.el")
    (synopsis
      "Navigate windows and frames using numbers.")
    (description
      "Documentation at https://melpa.org/#/winum")
    (license #f)))

(define-public emacs-wisp-mode
  (package
    (name "emacs-wisp-mode")
    (version "20220529.1522")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/wisp-mode-"
               version
               ".el"))
        (sha256
          (base32
            "1jdrh8mm634dgzg4qilbxj3f4rpyzf8asafdwv6rylljbsjx9wdm"))))
    (build-system melpa-build-system)
    (home-page "http://www.draketo.de/english/wisp")
    (synopsis
      "Tools for wisp: the Whitespace-to-Lisp preprocessor")
    (description
      "Documentation at https://melpa.org/#/wisp-mode")
    (license #f)))

(define-public emacs-wispjs-mode
  (package
    (name "emacs-wispjs-mode")
    (version "20170720.1919")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/krisajenkins/wispjs-mode.git")
               (commit
                 "60f9f5fd9d1556e2d008939f67eb1b1d0f325fa8")))
        (sha256
          (base32
            "1hhd8ixb2wr06vrd1kw0cd5jh08zm86h2clbvzv9wmqpawwxfm5f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-clojure-mode))
    (home-page
      "https://github.com/krisajenkins/wispjs-mode")
    (synopsis "Major mode for Wisp code.")
    (description
      "Documentation at https://melpa.org/#/wispjs-mode")
    (license #f)))

(define-public emacs-with-editor
  (package
    (name "emacs-with-editor")
    (version "20230917.958")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magit/with-editor.git")
               (commit
                 "fcd186d1e684c2dca6497c89af77b27b2b036c11")))
        (sha256
          (base32
            "04libc0dk0vz3z9l77z8nnvh03pync1kvf0ky7j3y607cg0mrg73"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://github.com/magit/with-editor")
    (synopsis "Use the Emacsclient as $EDITOR")
    (description
      "Documentation at https://melpa.org/#/with-editor")
    (license #f)))

(define-public emacs-with-emacs
  (package
    (name "emacs-with-emacs")
    (version "20220814.444")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/with-emacs.el.git")
               (commit
                 "fb9ef454a4bb2d6de3415807b4858a20a9cc0dad")))
        (sha256
          (base32
            "0dldr2m3lhg68xx6bznkyi2kjfpgbqn849cbh3sdi8njp829vbqb"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/twlz0ne/with-emacs.el")
    (synopsis
      "Evaluate Emacs Lisp expressions in a separate Emacs process")
    (description
      "Documentation at https://melpa.org/#/with-emacs")
    (license #f)))

(define-public emacs-with-namespace
  (package
    (name "emacs-with-namespace")
    (version "20130407.1822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Wilfred/with-namespace.el.git")
               (commit
                 "8ac52da3a09cf46087720e30cf730d00f140cde6")))
        (sha256
          (base32
            "1c7g8f3jr7bb0xxprammfg433gd63in5iiiaq8rjmc94h6hdcys3"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-loop))
    (home-page "unspecified")
    (synopsis "interoperable elisp namespaces")
    (description
      "Documentation at https://melpa.org/#/with-namespace")
    (license #f)))

(define-public emacs-with-proxy
  (package
    (name "emacs-with-proxy")
    (version "20200510.414")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/twlz0ne/with-proxy.el.git")
               (commit
                 "93b1ed2f3060f305009fa71f4fb5bb10173a10e3")))
        (sha256
          (base32
            "15cwpg1s563pw44f8vr96w31hbpix9jd3736hd5546a79ymq5vz3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/twlz0ne/with-proxy.el")
    (synopsis "Evaluate expressions with proxy")
    (description
      "Documentation at https://melpa.org/#/with-proxy")
    (license #f)))

(define-public emacs-with-shell-interpreter
  (package
    (name "emacs-with-shell-interpreter")
    (version "20230916.1420")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/p3r7/with-shell-interpreter.git")
               (commit
                 "bef977d8058d26d82ab11a7227c88b3011edd127")))
        (sha256
          (base32
            "0v087wr1hgqi7ln9h5x26a4hbwi50lvk1q74inbbcdhij6ydknpn"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/p3r7/with-shell-interpreter")
    (synopsis "Helper for shell command APIs")
    (description
      "Documentation at https://melpa.org/#/with-shell-interpreter")
    (license #f)))

(define-public emacs-with-simulated-input
  (package
    (name "emacs-with-simulated-input")
    (version "20210527.2337")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/DarwinAwardWinner/with-simulated-input.git")
               (commit
                 "0f43fe46d4ab098c18a90b9df18cb96bab8e4a35")))
        (sha256
          (base32
            "0im6a1nr75mgz13zjavwycd5zsm5ysz5flbsmka7i8bkn2js1fm1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/DarwinAwardWinner/with-simulated-input")
    (synopsis
      "A macro to simulate user input non-interactively")
    (description
      "Documentation at https://melpa.org/#/with-simulated-input")
    (license #f)))

(define-public emacs-with-venv
  (package
    (name "emacs-with-venv")
    (version "20210925.2336")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/10sr/with-venv-el.git")
               (commit
                 "773192d892ec0341e023d8b5e80639f8eb79f2a5")))
        (sha256
          (base32
            "0dh412qj2v4mz6mcjgkiacdcl8pbh2lgyinm70j3dr7qdsbadw97"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/10sr/with-venv-el")
    (synopsis
      "Execute with Python virtual environment activated")
    (description
      "Documentation at https://melpa.org/#/with-venv")
    (license #f)))

(define-public emacs-wn-mode
  (package
    (name "emacs-wn-mode")
    (version "20151110.552")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/luismbo/wn-mode.git")
               (commit
                 "f05c3151523e529af5a0a3fa8c948b61fb369f6e")))
        (sha256
          (base32
            "12rfpkyjkhikjh0mihhp5h5pzbm4br68nwf8k1ja9djl77vfzv36"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/luismbo/wn-mode")
    (synopsis "numeric window switching shortcuts")
    (description
      "Documentation at https://melpa.org/#/wn-mode")
    (license #f)))

(define-public emacs-wolfram
  (package
    (name "emacs-wolfram")
    (version "20221111.816")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hsjunnesson/wolfram.el.git")
               (commit
                 "d2e317214bf669dda82fd3202090715e59d29dcf")))
        (sha256
          (base32
            "08zjb2i100ibgy783ybasmak61m4gkipasyzmarznf3lgbkdj8vb"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Wolfram Alpha Integration")
    (description
      "Documentation at https://melpa.org/#/wolfram")
    (license #f)))

(define-public emacs-wolfram-mode
  (package
    (name "emacs-wolfram-mode")
    (version "20180307.13")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/wolfram-mode.git")
               (commit
                 "be680190cac6ccf579dbce107deaae495928d1b3")))
        (sha256
          (base32
            "1cvdw28gvhbr9l65xkv8ld12rb0pcf53jd55gns2b0abz1lg1jc4"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kawabata/wolfram-mode/")
    (synopsis
      "Mathematica editing and inferior mode.")
    (description
      "Documentation at https://melpa.org/#/wolfram-mode")
    (license #f)))

(define-public emacs-wonderland
  (package
    (name "emacs-wonderland")
    (version "20130913.119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kurisuwhyte/emacs-wonderland.git")
               (commit
                 "89d274ad694b0e748efdac23ccd60b7d8b73d7c6")))
        (sha256
          (base32
            "0hacc8ha5w44cgwkipa3nwh1q5gdrcxhjkmw2gnvb1l01crgnack"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-dash-functional
            emacs-multi))
    (arguments '(#:files ("source/*.el")))
    (home-page
      "http://github.com/kurisuwhyte/emacs-wonderland")
    (synopsis
      "declarative configuration for Emacsen")
    (description
      "Documentation at https://melpa.org/#/wonderland")
    (license #f)))

(define-public emacs-wordel
  (package
    (name "emacs-wordel")
    (version "20230818.1324")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/progfolio/wordel.git")
               (commit
                 "70171a21cbe53e407b86440bf7ee93d39cb5ebde")))
        (sha256
          (base32
            "1irmabp8zdlp08mvf2xlamf8kg4qbvydm1h4a6ca0b8v53jpd95f"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "words")))
    (home-page "https://github.com/progfolio/wordel")
    (synopsis
      "An Elisp implementation of \"Wordle\" (aka \"Lingo\")")
    (description
      "Documentation at https://melpa.org/#/wordel")
    (license #f)))

(define-public emacs-wordgen
  (package
    (name "emacs-wordgen")
    (version "20170803.1820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Fanael/wordgen.el.git")
               (commit
                 "aacad928ae99a953e034a831dfd0ebdf7d52ac1d")))
        (sha256
          (base32
            "06vbc9ycz1nbjwjkg99y3lj6jwb6lnwnmkqf09yr00jjrrfhfash"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/Fanael/wordgen.el")
    (synopsis "Random word generator")
    (description
      "Documentation at https://melpa.org/#/wordgen")
    (license #f)))

(define-public emacs-wordnut
  (package
    (name "emacs-wordnut")
    (version "20180313.443")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/gromnitsky/wordnut.git")
               (commit
                 "feac531404041855312c1a046bde7ea18c674915")))
        (sha256
          (base32
            "1jl0b6g64a9w0q7bfvwha67vgws5xd15b7mkfyb5gkz3pymqhfxn"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Major mode interface to WordNet")
    (description
      "Documentation at https://melpa.org/#/wordnut")
    (license #f)))

(define-public emacs-wordreference
  (package
    (name "emacs-wordreference")
    (version "20231008.1456")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/wordreference-"
               version
               ".tar"))
        (sha256
          (base32
            "101l7i1bq6sxnz04p84jk2v0s6l93qvijldadxmpic49pl70lrqx"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/martianh/wordreference.el")
    (synopsis "Interface for wordreference.com")
    (description
      "Documentation at https://melpa.org/#/wordreference")
    (license #f)))

(define-public emacs-wordsmith-mode
  (package
    (name "emacs-wordsmith-mode")
    (version "20210715.1517")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/istib/wordsmith-mode.git")
               (commit
                 "5d40ceaa2b8d41ab3634ca377ceb6a74deeb2287")))
        (sha256
          (base32
            "132l0i94nwrm676bpxw0wnr1drqwmapwv92mf4iyb209fr4hc2w2"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Syntax analysis and NLP text-processing in Emacs (OSX-only)")
    (description
      "Documentation at https://melpa.org/#/wordsmith-mode")
    (license #f)))

(define-public emacs-worf
  (package
    (name "emacs-worf")
    (version "20220102.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/worf.git")
               (commit
                 "8681241e118585824cd256e5b026978bf06c7e58")))
        (sha256
          (base32
            "1gh341f7rvmah8akzy302y6yv3jbydlgdfhxds14m9njg4lrlv2s"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-swiper
            emacs-ace-link
            emacs-hydra
            emacs-zoutline))
    (home-page "https://github.com/abo-abo/worf")
    (synopsis
      "A warrior does not press so many keys! (in org-mode)")
    (description
      "Documentation at https://melpa.org/#/worf")
    (license #f)))

(define-public emacs-workgroups
  (package
    (name "emacs-workgroups")
    (version "20110726.1641")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tlh/workgroups.el.git")
               (commit
                 "9572b3492ee09054dc329f64ed846c962b395e39")))
        (sha256
          (base32
            "0q32z54qafj8ap3ybx82i3fm1msmzwvpxgmkaglzhi8nccgzbn2n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "workgroups for windows (for Emacs)")
    (description
      "Documentation at https://melpa.org/#/workgroups")
    (license #f)))

(define-public emacs-workgroups2
  (package
    (name "emacs-workgroups2")
    (version "20230328.1331")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pashinin/workgroups2.git")
               (commit
                 "aff9d76b7be5eed33f30be2fabf111818749cbd5")))
        (sha256
          (base32
            "02dqrxrnbypxgsx4cca1pf0srl630cpdgwfyh7ps7hc4676a1dfr"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("src/*.el")))
    (home-page
      "https://github.com/pashinin/workgroups2")
    (synopsis
      "save&load multiple named workspaces (or \"workgroups\")")
    (description
      "Documentation at https://melpa.org/#/workgroups2")
    (license #f)))

(define-public emacs-workroom
  (package
    (name "emacs-workroom")
    (version "20230926.1631")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/workroom-"
               version
               ".tar"))
        (sha256
          (base32
            "1wfncpk17hj0v422q8bfnncmjyiy43xn1cb4njqf0pf3w3vln4w9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (home-page
      "https://codeberg.org/akib/emacs-workroom")
    (synopsis
      "Named rooms for work without irrelevant distracting buffers")
    (description
      "Documentation at https://melpa.org/#/workroom")
    (license #f)))

(define-public emacs-world-time-mode
  (package
    (name "emacs-world-time-mode")
    (version "20140627.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicferrier/emacs-world-time-mode.git")
               (commit
                 "ce7a3b45c87eb24cfe61eee453175d64f741d7cc")))
        (sha256
          (base32
            "0i00xm4rynbp2v3gm6h46ajgj8h8nxnsjh6db1659b0hbpnah0ji"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "show whole days of world-time diffs")
    (description
      "Documentation at https://melpa.org/#/world-time-mode")
    (license #f)))

(define-public emacs-wotd
  (package
    (name "emacs-wotd")
    (version "20170328.1948")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cute-jumper/emacs-word-of-the-day.git")
               (commit
                 "d2937a3d91e014f8028a1f33d21c18cc0b065a64")))
        (sha256
          (base32
            "0nwq5ymj9kx1fx3kfc789nkd80gwzljwmk7xxzzsrdrv47gm047m"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Fetch word-of-the-day from multiple online sources")
    (description
      "Documentation at https://melpa.org/#/wotd")
    (license #f)))

(define-public emacs-wrap-region
  (package
    (name "emacs-wrap-region")
    (version "20140117.720")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rejeep/wrap-region.el.git")
               (commit
                 "fbae9b0f106187af19823f1a6260b5c68b7252e6")))
        (sha256
          (base32
            "1k5q925igdv5lnpbmy0c2f0j3rj7yh4l6bxbd61g9lcnyl0j3ym9"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "http://github.com/rejeep/wrap-region")
    (synopsis "Wrap text with punctation or tag")
    (description
      "Documentation at https://melpa.org/#/wrap-region")
    (license #f)))

(define-public emacs-wren-mode
  (package
    (name "emacs-wren-mode")
    (version "20221227.227")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thechampagne/wren-mode.git")
               (commit
                 "70b1b89f565679a15c8c9c1a9bda98b0d163e83e")))
        (sha256
          (base32
            "1c234rqkgm3j3i2i1xh998m97adkidmzjxfbvlr38ajzrq06kdbq"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thechampagne/wren-mode")
    (synopsis
      "A major mode for the Wren programming language")
    (description
      "Documentation at https://melpa.org/#/wren-mode")
    (license #f)))

(define-public emacs-writefreely
  (package
    (name "emacs-writefreely")
    (version "20221221.1456")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dangom/writefreely.el.git")
               (commit
                 "db70444eb5fbe0820754574d70b1ae44967607dc")))
        (sha256
          (base32
            "1570vi25pwsws8dskmgclnxc6hjwma44wwvddnnmp8jy8a4fsa3l"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ox-gfm emacs-request))
    (home-page
      "https://github.com/dangom/writefreely.el")
    (synopsis
      "Push your Org files as markdown to a writefreely instance")
    (description
      "Documentation at https://melpa.org/#/writefreely")
    (license #f)))

(define-public emacs-writegood-mode
  (package
    (name "emacs-writegood-mode")
    (version "20220511.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bnbeckwith/writegood-mode.git")
               (commit
                 "d54eadeedb8bf3aa0e0a584c0a7373c69644f4b8")))
        (sha256
          (base32
            "1a3gmaaa344kigr209b6wnjiw9ikkmw1j5jda04h3g8f9817njyv"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bnbeckwith/writegood-mode")
    (synopsis "Polish up poor writing on the fly")
    (description
      "Documentation at https://melpa.org/#/writegood-mode")
    (license #f)))

(define-public emacs-writeroom-mode
  (package
    (name "emacs-writeroom-mode")
    (version "20231103.931")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joostkremers/writeroom-mode.git")
               (commit
                 "f4d035e91d20bf1dd3f2857b9cc344f844979a78")))
        (sha256
          (base32
            "0d9yq0qk6f61axpn4r2iby31c97sbra3lni2zg7nrckx2dn0kskd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-visual-fill-column))
    (home-page
      "https://github.com/joostkremers/writeroom-mode")
    (synopsis
      "Minor mode for distraction-free writing")
    (description
      "Documentation at https://melpa.org/#/writeroom-mode")
    (license #f)))

(define-public emacs-ws-butler
  (package
    (name "emacs-ws-butler")
    (version "20201117.1528")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lewang/ws-butler.git")
               (commit
                 "e3a38d93e01014cd47bf5af4924459bd145fd7c4")))
        (sha256
          (base32
            "1vcgg8wr5zpkn9ynyx8sad7srmd31dzkc40wnrzs8aan8nsah5bx"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/lewang/ws-butler")
    (synopsis
      "Unobtrusively remove trailing whitespace.")
    (description
      "Documentation at https://melpa.org/#/ws-butler")
    (license #f)))

(define-public emacs-wsd-mode
  (package
    (name "emacs-wsd-mode")
    (version "20191031.1211")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/josteink/wsd-mode.git")
               (commit
                 "53330a2a43c4875f8682457df1a869a4c9028660")))
        (sha256
          (base32
            "1swwaphlbvpalk7mgdgkaal8ffivhxil5fhfkxzazqnkl4i5zbmy"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/josteink/wsd-mode")
    (synopsis
      "Emacs major-mode for www.websequencediagrams.com")
    (description
      "Documentation at https://melpa.org/#/wsd-mode")
    (license #f)))

(define-public emacs-wttrin
  (package
    (name "emacs-wttrin")
    (version "20170614.1206")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bcbcarl/emacs-wttrin.git")
               (commit
                 "df5427ce2a5ad4dab652dbb1c4a1834d7ddc2abc")))
        (sha256
          (base32
            "1ai655f10iayb4vw0ass2j3x83f4vsv90326mnywkzfl3sxd432z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xterm-color))
    (home-page
      "https://github.com/bcbcarl/emacs-wttrin")
    (synopsis
      "Emacs frontend for weather web service wttr.in")
    (description
      "Documentation at https://melpa.org/#/wttrin")
    (license #f)))

(define-public emacs-wucuo
  (package
    (name "emacs-wucuo")
    (version "20230529.735")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/redguardtoo/wucuo.git")
               (commit
                 "8a9080019d294906f8be4e0285eda970679d6ca0")))
        (sha256
          (base32
            "07z8sfvsc06ffwjvm9s5yslnj67sisdbkj9l43xr5sb22hggxh0d"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/redguardtoo/wucuo")
    (synopsis
      "Fastest solution to spell check camel case code or plain text")
    (description
      "Documentation at https://melpa.org/#/wucuo")
    (license #f)))

(define-public emacs-wwg
  (package
    (name "emacs-wwg")
    (version "20210614.1527")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ag91/writer-word-goals.git")
               (commit
                 "46c8a7c71275ced2c662c1222d4b85319f80dd83")))
        (sha256
          (base32
            "15qxs91inbpr9qk2xlaijargkvj9c6rmw0m4b05qrqni0cgb75dk"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ag91/writer-word-goals")
    (synopsis "Writer word goals")
    (description
      "Documentation at https://melpa.org/#/wwg")
    (license #f)))

(define-public emacs-wwtime
  (package
    (name "emacs-wwtime")
    (version "20151122.1610")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndw/wwtime.git")
               (commit
                 "d04d8fa814b5d3644efaeb28f25520ada69acbbd")))
        (sha256
          (base32
            "0ba193ilqmp7l35hhzfym4kvbnj9h57m8mwsxdj6rdj2cwrifx8r"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Insert a time of day with appropriate world-wide localization")
    (description
      "Documentation at https://melpa.org/#/wwtime")
    (license #f)))

(define-public emacs-www-synonyms
  (package
    (name "emacs-www-synonyms")
    (version "20170128.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spebern/www-synonyms.git")
               (commit
                 "7e37ea35064ff31c9945f0198a653647d408c936")))
        (sha256
          (base32
            "0l4fvq5zdzqvlwxqgqbfx9x0aimvk4x3la9yz9gw3vvj1rwf340i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-request))
    (home-page "unspecified")
    (synopsis "insert synonym for a word")
    (description
      "Documentation at https://melpa.org/#/www-synonyms")
    (license #f)))

(define-public emacs-x-path-walker
  (package
    (name "emacs-x-path-walker")
    (version "20220714.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Lompik/x-path-walker.git")
               (commit
                 "c91deaaba0d5cc9018008a39c96222deacba3868")))
        (sha256
          (base32
            "126r74rbgp9v1g11lz55pwfyfl5b64axixm8khr523gi2kirh83m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-helm-core))
    (arguments '(#:files (:defaults "xpathwalker")))
    (home-page "unspecified")
    (synopsis
      "Navigation feature for JSON/XML/HTML based on path (imenu like)")
    (description
      "Documentation at https://melpa.org/#/x-path-walker")
    (license #f)))

(define-public emacs-x509-mode
  (package
    (name "emacs-x509-mode")
    (version "20230818.634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jobbflykt/x509-mode.git")
               (commit
                 "57395a72087875108245f384acd9327db8b59abb")))
        (sha256
          (base32
            "1lqkywjk7lrkkl4iz1fwclqgvdbfmgjpjsd6fxfzm895dd8gmf8m"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-compat))
    (arguments '(#:files (:defaults "*.txt")))
    (home-page
      "https://github.com/jobbflykt/x509-mode")
    (synopsis
      "View certificates, CRLs and keys using OpenSSL")
    (description
      "Documentation at https://melpa.org/#/x509-mode")
    (license #f)))

(define-public emacs-x86-lookup
  (package
    (name "emacs-x86-lookup")
    (version "20210412.2022")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/skeeto/x86-lookup.git")
               (commit
                 "1573d61cc4457737b94624598a891c837fb52c16")))
        (sha256
          (base32
            "16y13bwsfx4mm8p1n09f4443kh03hl7jvfvkbwdrm6dlbywiqq8m"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/skeeto/x86-lookup")
    (synopsis
      "jump to x86 instruction documentation")
    (description
      "Documentation at https://melpa.org/#/x86-lookup")
    (license #f)))

(define-public emacs-xbm-life
  (package
    (name "emacs-xbm-life")
    (version "20210508.1640")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/xbm-life-"
               version
               ".el"))
        (sha256
          (base32
            "1y5hmkb8d3zbdlcvdvqpysk697dpfd8apywd2c6w3s1y0dav2ln2"))))
    (build-system melpa-build-system)
    (home-page "https://depp.brause.cc/xbm-life")
    (synopsis
      "A XBM version of Conway's Game of Life")
    (description
      "Documentation at https://melpa.org/#/xbm-life")
    (license #f)))

(define-public emacs-xcode-mode
  (package
    (name "emacs-xcode-mode")
    (version "20160907.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nicklanasa/xcode-mode.git")
               (commit
                 "2ae4f512d6c601ea39d5ab785c2b5288eac24b59")))
        (sha256
          (base32
            "0pi85ylxvjj63cmibgvi493d4ybcp2blhlwgrwzn2hjz31jldh0y"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-multiple-cursors))
    (home-page "unspecified")
    (synopsis
      "A minor mode for emacs to perform Xcode like actions.")
    (description
      "Documentation at https://melpa.org/#/xcode-mode")
    (license #f)))

(define-public emacs-xcode-project
  (package
    (name "emacs-xcode-project")
    (version "20200810.2010")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nhojb/xcode-project.git")
               (commit
                 "11743f0a2212c840a108e1b905b1f20afcff8156")))
        (sha256
          (base32
            "1vj1xshdsff5xrgmp6c46q2ipglq4wy25mq51rnhv57f0r1wq62n"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/nhojb/xcode-project.git")
    (synopsis
      "A package for reading Xcode project files.")
    (description
      "Documentation at https://melpa.org/#/xcode-project")
    (license #f)))

(define-public emacs-xcscope
  (package
    (name "emacs-xcscope")
    (version "20230626.2109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dkogan/xcscope.el.git")
               (commit
                 "2f35b26428dd82c016941744f03aad97df80c47b")))
        (sha256
          (base32
            "12gj38dwlsfmaf2zdz28y4l0vbvpc8r4py8w18m2n6i9pafrlwcg"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/dkogan/xcscope.el")
    (synopsis "cscope interface for (X)Emacs")
    (description
      "Documentation at https://melpa.org/#/xcscope")
    (license #f)))

(define-public emacs-xenops
  (package
    (name "emacs-xenops")
    (version "20220821.1111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dandavison/xenops.git")
               (commit
                 "4d75c1cd5ee7afba62af3a39a1f43432b295c29c")))
        (sha256
          (base32
            "11sxypdpf31hmimskqqg9fd6qnycmx9wr2274ghws9l7mn20df60"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-aio
            emacs-auctex
            emacs-avy
            emacs-dash
            emacs-f
            emacs-s))
    (home-page
      "https://github.com/dandavison/xenops")
    (synopsis
      "A LaTeX editing environment for mathematical documents")
    (description
      "Documentation at https://melpa.org/#/xenops")
    (license #f)))

(define-public emacs-xhair
  (package
    (name "emacs-xhair")
    (version "20210801.222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Boruch-Baum/emacs-xhair.git")
               (commit
                 "c7bd7c501c3545aa99dadac386c882fe7c5edd9c")))
        (sha256
          (base32
            "03m15lbspk73x59wvb77wgvnkrmrlq4w6kmnrr2i69jgafqh0421"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-vline))
    (home-page
      "https://github.com/Boruch-Baum/emacs-xhair")
    (synopsis
      "Highlight the current line and column")
    (description
      "Documentation at https://melpa.org/#/xhair")
    (license #f)))

(define-public emacs-xkcd
  (package
    (name "emacs-xkcd")
    (version "20220503.1109")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vibhavp/emacs-xkcd.git")
               (commit
                 "80011da2e7def8f65233d4e0d790ca60d287081d")))
        (sha256
          (base32
            "1l7bz979kjk1qngfa1zifyfdzn3vjvmbxy6qa188rxyz1zn6lm12"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/vibhavp/emacs-xkcd")
    (synopsis "View xkcd from Emacs")
    (description
      "Documentation at https://melpa.org/#/xkcd")
    (license #f)))

(define-public emacs-xmind-org
  (package
    (name "emacs-xmind-org")
    (version "20220907.1310")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/akirak/xmind-org-el.git")
               (commit
                 "49417098c8cf532dd804f25e262feedcfb0ee1fc")))
        (sha256
          (base32
            "0yqr6wrikw27x7qz7rzayvimllbh5ki93mg0k5ngnf1jzhxx3fs5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-ml emacs-dash))
    (home-page
      "https://github.com/akirak/xmind-org-el")
    (synopsis "Import XMind mindmaps into Org")
    (description
      "Documentation at https://melpa.org/#/xmind-org")
    (license #f)))

(define-public emacs-xml+
  (package
    (name "emacs-xml+")
    (version "20170727.2351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bddean/xml-plus.git")
               (commit
                 "232fa863c08fc159b21dd58c39ea45dce3334895")))
        (sha256
          (base32
            "0b7v59dya346ds1wad0avrqhjimx5n9r3pcgqafagzf34hdcv3jy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "https://github.com/bddean/xml-plus")
    (synopsis "Utilities for xml and html trees")
    (description
      "Documentation at https://melpa.org/#/xml+")
    (license #f)))

(define-public emacs-xml-format
  (package
    (name "emacs-xml-format")
    (version "20191011.1159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/wbolster/emacs-xml-format.git")
               (commit
                 "2861c4e33e18b077112efa072316b031bca4236c")))
        (sha256
          (base32
            "1g0v5ir6nwpamnwvq509d1s1s60n0s5p2lvqqm0n0rk9r753cqkh"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/wbolster/emacs-xml-format")
    (synopsis "XML reformatter using xmllint")
    (description
      "Documentation at https://melpa.org/#/xml-format")
    (license #f)))

(define-public emacs-xml-quotes
  (package
    (name "emacs-xml-quotes")
    (version "20200301.1222")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndw/xml-quotes.git")
               (commit
                 "8fc21e43b45f9a50b24642412f05afcc3a316a1f")))
        (sha256
          (base32
            "1czz6zgbnvwf3bn6k5iczs02rjx6frjnc0d78gcxhvsnbsvv60iw"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/ndw/xml-quotes")
    (synopsis "read quotations from an XML document")
    (description
      "Documentation at https://melpa.org/#/xml-quotes")
    (license #f)))

(define-public emacs-xml-rpc
  (package
    (name "emacs-xml-rpc")
    (version "20231009.1432")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xml-rpc-el/xml-rpc-el.git")
               (commit
                 "fb6183597be1361be02f46c9a53257ac1dd9715e")))
        (sha256
          (base32
            "0c3w2x4pp7fsg6gps3aix1z55a9cwb67xwyb1wixan06v21md0ri"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/xml-rpc-el/xml-rpc-el")
    (synopsis
      "An elisp implementation of clientside XML-RPC")
    (description
      "Documentation at https://melpa.org/#/xml-rpc")
    (license #f)))

(define-public emacs-xmlgen
  (package
    (name "emacs-xmlgen")
    (version "20170411.1317")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philjackson/xmlgen.git")
               (commit
                 "dba66681f0c5e621a9e70e8afb34903c9ffe93c4")))
        (sha256
          (base32
            "096i29v0badx0a6339h9ckdz78zj59gbjdp7vj7vhkq9d830392s"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "A DSL for generating XML.")
    (description
      "Documentation at https://melpa.org/#/xmlgen")
    (license #f)))

(define-public emacs-xmlunicode
  (package
    (name "emacs-xmlunicode")
    (version "20230820.814")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ndw/xmlunicode.git")
               (commit
                 "5f1c3e48b90588eb56cec67d3efc869a4e95b03a")))
        (sha256
          (base32
            "1clvq3hqipryk7x15z1k76wxs48fms6i5z196hq2ik1a3ka8027y"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Unicode support for XML")
    (description
      "Documentation at https://melpa.org/#/xmlunicode")
    (license #f)))

(define-public emacs-xo
  (package
    (name "emacs-xo")
    (version "20160403.646")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/j-em/xo-emacs.git")
               (commit
                 "72fcd867cfa332fdb82f732925cf8977e690af78")))
        (sha256
          (base32
            "0761amc73mbgaydp3iyfzgyjxp77yk440s24h69hvk87c5vn1cz3"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "XO linter integration with compilation mode")
    (description
      "Documentation at https://melpa.org/#/xo")
    (license #f)))

(define-public emacs-xonsh-mode
  (package
    (name "emacs-xonsh-mode")
    (version "20201020.52")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/seanfarley/xonsh-mode.git")
               (commit
                 "7fa581524533a9b6b770426e4445e571a69e469d")))
        (sha256
          (base32
            "0lfi2372clkkzi4a940fwparsfhxxzb7bmysfd50n1myakgldri5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/seanfarley/xonsh-mode")
    (synopsis "Major mode for editing xonshrc files")
    (description
      "Documentation at https://melpa.org/#/xonsh-mode")
    (license #f)))

(define-public emacs-xquery-mode
  (package
    (name "emacs-xquery-mode")
    (version "20170214.1119")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xquery-mode/xquery-mode.git")
               (commit
                 "1b655ccf83d02a7bd473d2cf02359ed60bdf7369")))
        (sha256
          (base32
            "1iprgfjrbx3fmqhkgjxdxnlzz2s6h895q270lhjrhkwgpphgna2c"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/xquery-mode/xquery-mode")
    (synopsis
      "A simple mode for editing xquery programs")
    (description
      "Documentation at https://melpa.org/#/xquery-mode")
    (license #f)))

(define-public emacs-xquery-tool
  (package
    (name "emacs-xquery-tool")
    (version "20200907.811")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/paddymcall/xquery-tool.el.git")
               (commit
                 "885184298ce1b6eb5d18922ea331623973082a15")))
        (sha256
          (base32
            "04pq8xffpj16kifkxr4w64kh77a1cghvy2725w5qbj75v95w6078"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/paddymcall/xquery-tool.el")
    (synopsis
      "A simple interface to saxonb's xquery.")
    (description
      "Documentation at https://melpa.org/#/xquery-tool")
    (license #f)))

(define-public emacs-xref-js2
  (package
    (name "emacs-xref-js2")
    (version "20210310.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/js-emacs/xref-js2.git")
               (commit
                 "fd6b723e7f1f9793d189a815e1904364dc026b03")))
        (sha256
          (base32
            "0iny4qswyicrax36d4sgyfrw3giwjd1440bmlksd36y8zjkqqym0"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-js2-mode))
    (home-page
      "https://github.com/NicolasPetton/xref-js2")
    (synopsis
      "Jump to references/definitions using ag & js2-mode's AST")
    (description
      "Documentation at https://melpa.org/#/xref-js2")
    (license #f)))

(define-public emacs-xref-rst
  (package
    (name "emacs-xref-rst")
    (version "20230601.21")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/xref-rst-"
               version
               ".tar"))
        (sha256
          (base32
            "0bh8sh51dbyqzqzl8gdqkikq4g77f0x2gjbiv35bqmfaspi6jj9c"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/ideasman42/emacs-xref-rst")
    (synopsis "Lookup reStructuredText symbols")
    (description
      "Documentation at https://melpa.org/#/xref-rst")
    (license #f)))

(define-public emacs-xresources-theme
  (package
    (name "emacs-xresources-theme")
    (version "20221208.2015")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/martenlienen/xresources-theme.git")
               (commit
                 "76532fc4330e9e31accc580708514b83b15d70a7")))
        (sha256
          (base32
            "1ilvjdz7j2s1flq4ivn7lcq47d4lshn24sn9qmzj7nln2qz63r7n"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Use your .Xresources as your emacs theme")
    (description
      "Documentation at https://melpa.org/#/xresources-theme")
    (license #f)))

(define-public emacs-xterm-color
  (package
    (name "emacs-xterm-color")
    (version "20230321.3")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/atomontage/xterm-color.git")
               (commit
                 "2ad407c651e90fff2ea85d17bf074cee2c022912")))
        (sha256
          (base32
            "1zy6sap394f4gb0q41mdipd7gii9qyy2840pgkf4mfpsxim3agls"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/atomontage/xterm-color")
    (synopsis
      "ANSI, XTERM 256 and Truecolor support")
    (description
      "Documentation at https://melpa.org/#/xterm-color")
    (license #f)))

(define-public emacs-xterm-keybinder
  (package
    (name "emacs-xterm-keybinder")
    (version "20160523.56")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yuutayamada/xterm-keybinder-el.git")
               (commit
                 "b29c4f700b0fa0c9f627f6725b36462b8fab06d6")))
        (sha256
          (base32
            "0ya7c73acwp29glwjd1hf19h8jij2afwmwq7a3h91qx5zdn09wvh"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("*.el" "xterm-option" "emacs-urxvt-client")))
    (home-page "unspecified")
    (synopsis
      "Let you extra keybinds in xterm/urxvt")
    (description
      "Documentation at https://melpa.org/#/xterm-keybinder")
    (license #f)))

(define-public emacs-xtest
  (package
    (name "emacs-xtest")
    (version "20141214.1706")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/promethial/xtest.git")
               (commit
                 "2c2bdf32667506dd9ddf6eb311832add616bdf1c")))
        (sha256
          (base32
            "09mn8s7gzzxgs7kskld8l68zjrcgnvml3fqj69wrfq7b1g62hhxy"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/promethial/xtest")
    (synopsis "Simple Testing with Emacs & ERT")
    (description
      "Documentation at https://melpa.org/#/xtest")
    (license #f)))

(define-public emacs-xwidgete
  (package
    (name "emacs-xwidgete")
    (version "20171118.2116")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tuhdo/xwidgete.git")
               (commit
                 "e4e8410fe32176df85b46234717824519443fb04")))
        (sha256
          (base32
            "04j4xwcdxlnrwxs89605zmwxszbi2j0z67v80651pshgnhj5p19i"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/tuhdo/xwidgete")
    (synopsis
      "enhances usability of current xwidget browser")
    (description
      "Documentation at https://melpa.org/#/xwidgete")
    (license #f)))

(define-public emacs-xwidgets-reuse
  (package
    (name "emacs-xwidgets-reuse")
    (version "20200817.147")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/lordpretzel/xwidgets-reuse.git")
               (commit
                 "5d56472dda53e43e0a11edcd373b44c0dbab47ce")))
        (sha256
          (base32
            "1b85x1yhgip4g3kv1sdwf3zmi91w6m5xbmm6zzl84w67wqfmnqlz"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("xwidgets-reuse.el")))
    (home-page
      "https://github.com/lordpretzel/xwidgets-reuse")
    (synopsis
      "Reuse xwidgets sessions to reduce resource consumption")
    (description
      "Documentation at https://melpa.org/#/xwidgets-reuse")
    (license #f)))

(define-public emacs-xwiki-mode
  (package
    (name "emacs-xwiki-mode")
    (version "20211112.511")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ackerleytng/xwiki-mode.git")
               (commit
                 "580e65296ca0ffb20270610ef16bfeb8850fc7c8")))
        (sha256
          (base32
            "0izsj9krl4lhm33w9hh6gjihns4lrgaf40qiiif43n05jha7fj0z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ackerleytng/xwiki-mode")
    (synopsis "Major mode for xwiki-formatted text")
    (description
      "Documentation at https://melpa.org/#/xwiki-mode")
    (license #f)))

(define-public emacs-xwwp
  (package
    (name "emacs-xwwp")
    (version "20200917.643")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/xwwp.git")
               (commit
                 "f67e070a6e1b233e60274deb717274b000923231")))
        (sha256
          (base32
            "1ikhgi3gc86w7y3cjmw875c8ccsmj22yn1zm3abprdzbjqlyzhhg"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files
        ("xwwp.el"
         "xwwp-follow-link.el"
         "xwwp-follow-link-ido.el")))
    (home-page "https://github.com/canatella/xwwp")
    (synopsis "Enhance xwidget webkit browser")
    (description
      "Documentation at https://melpa.org/#/xwwp")
    (license #f)))

(define-public emacs-xwwp-follow-link-helm
  (package
    (name "emacs-xwwp-follow-link-helm")
    (version "20200917.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/xwwp.git")
               (commit
                 "f67e070a6e1b233e60274deb717274b000923231")))
        (sha256
          (base32
            "1ikhgi3gc86w7y3cjmw875c8ccsmj22yn1zm3abprdzbjqlyzhhg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xwwp))
    (arguments
      '(#:files ("xwwp-follow-link-helm.el")))
    (home-page "https://github.com/canatella/xwwp")
    (synopsis
      "Link navigation in `xwidget-webkit' sessions using `helm'")
    (description
      "Documentation at https://melpa.org/#/xwwp-follow-link-helm")
    (license #f)))

(define-public emacs-xwwp-follow-link-ivy
  (package
    (name "emacs-xwwp-follow-link-ivy")
    (version "20200917.642")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/canatella/xwwp.git")
               (commit
                 "f67e070a6e1b233e60274deb717274b000923231")))
        (sha256
          (base32
            "1ikhgi3gc86w7y3cjmw875c8ccsmj22yn1zm3abprdzbjqlyzhhg"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-xwwp))
    (arguments
      '(#:files ("xwwp-follow-link-ivy.el")))
    (home-page "https://github.com/canatella/xwwp")
    (synopsis
      "Link navigation in `xwidget-webkit' sessions using `ivy'")
    (description
      "Documentation at https://melpa.org/#/xwwp-follow-link-ivy")
    (license #f)))

(define-public emacs-yabaki-theme
  (package
    (name "emacs-yabaki-theme")
    (version "20231004.2023")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/yabaki-theme-"
               version
               ".tar"))
        (sha256
          (base32
            "17zfs7giicix74skb5w0kkfr5jh7wwpq7pcfczz2f3gjdvxghgk1"))))
    (build-system melpa-build-system)
    (home-page
      "https://codeberg.org/seahorse/yabaki-theme")
    (synopsis "Yabaki, the cast shadow")
    (description
      "Documentation at https://melpa.org/#/yabaki-theme")
    (license #f)))

(define-public emacs-yabin
  (package
    (name "emacs-yabin")
    (version "20140206.351")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/d5884/yabin.git")
               (commit
                 "db8c404507560ef9147fcce2b94cd706fbfa03b5")))
        (sha256
          (base32
            "0f6pvwzhncycw8gnjy24h6q1qglfgvdjfs5dzqx9s43j3yg63lzm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Yet Another Bignum package (A thin wrapper of calc.el).")
    (description
      "Documentation at https://melpa.org/#/yabin")
    (license #f)))

(define-public emacs-yafolding
  (package
    (name "emacs-yafolding")
    (version "20200119.1353")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/yafolding.git")
               (commit
                 "4c1888ae45f9241516519ae0ae3a899f2efa05ba")))
        (sha256
          (base32
            "1bb763lx5cs5z06irjllip8z9c61brjsamfcjajibi24wcajkprx"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Folding code blocks based on indentation")
    (description
      "Documentation at https://melpa.org/#/yafolding")
    (license #f)))

(define-public emacs-yagist
  (package
    (name "emacs-yagist")
    (version "20160418.508")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mhayashi1120/yagist.el.git")
               (commit
                 "dcdbd84f348414815d02f3da8a6ee0ac271632d4")))
        (sha256
          (base32
            "0lgy9b893mq4harxh80n0n2zia00s2c6ga8p654q563idrskgz17"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mhayashi1120/yagist.el")
    (synopsis
      "Yet Another Emacs integration for gist.github.com")
    (description
      "Documentation at https://melpa.org/#/yagist")
    (license #f)))

(define-public emacs-yahtzee
  (package
    (name "emacs-yahtzee")
    (version "20220221.803")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/drdv/yahtzee.git")
               (commit
                 "9b42ba4612d3043464414c08a3d60f6ad594566c")))
        (sha256
          (base32
            "1552a71nn60h351i6kal25py2l41vhnk4nlvcc53fg6hx7pkrwg6"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/drdv/yahtzee")
    (synopsis "The yahtzee game")
    (description
      "Documentation at https://melpa.org/#/yahtzee")
    (license #f)))

(define-public emacs-yalinum
  (package
    (name "emacs-yalinum")
    (version "20130217.1043")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/tm8st/emacs-yalinum.git")
               (commit
                 "d3e0cbe3f4f5ca311e3298e684901d6fea3ad973")))
        (sha256
          (base32
            "12dd4ahg9f1493982d49g7sxx0n6ss4xcfhxwzyaqxckwzfranp0"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "yet another display line numbers.")
    (description
      "Documentation at https://melpa.org/#/yalinum")
    (license #f)))

(define-public emacs-yaml
  (package
    (name "emacs-yaml")
    (version "20230928.103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zkry/yaml.el.git")
               (commit
                 "fe08b8f5307af1e7b876ece64b7303213f04b63c")))
        (sha256
          (base32
            "10sdcihgd8yvdf7yab5fsvq65amp25msjh7mbrxgk3w4zc96fxzi"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zkry/yaml.el")
    (synopsis "YAML parser for Elisp")
    (description
      "Documentation at https://melpa.org/#/yaml")
    (license #f)))

(define-public emacs-yaml-imenu
  (package
    (name "emacs-yaml-imenu")
    (version "20220406.1703")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/knu/yaml-imenu.el.git")
               (commit
                 "c1fbba8b03a7bef4fc2b87404914fa9c6eb67b55")))
        (sha256
          (base32
            "1p5zyjj9hvqjfhyp68c04w6cxj5qh4psd4y8kafyrz3n05wimzl5"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml-mode))
    (arguments '(#:files (:defaults "*.rb")))
    (home-page
      "https://github.com/knu/yaml-imenu.el")
    (synopsis
      "Enhancement of the imenu support in yaml-mode.")
    (description
      "Documentation at https://melpa.org/#/yaml-imenu")
    (license #f)))

(define-public emacs-yaml-mode
  (package
    (name "emacs-yaml-mode")
    (version "20231003.1142")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/yoshiki/yaml-mode.git")
               (commit
                 "23395dfcf004c952850691b70e63f97f169596e8")))
        (sha256
          (base32
            "0jqg2hmh7qsgqywwd6fy3k8z8j45nqhpdzr3hw4hd5s2hry3zhg1"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/yoshiki/yaml-mode")
    (synopsis "Major mode for editing YAML files")
    (description
      "Documentation at https://melpa.org/#/yaml-mode")
    (license #f)))

(define-public emacs-yaml-pro
  (package
    (name "emacs-yaml-pro")
    (version "20230921.39")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zkry/yaml-pro.git")
               (commit
                 "c04e8a2a3549095cb7c84491aefed54543373512")))
        (sha256
          (base32
            "0v061q3hpdhjjzxnhm5x6409kx9djc83vrcrwm5qhk5ngiva1wrj"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yaml))
    (home-page "https://github.com/zkry/yaml-pro")
    (synopsis "Parser-aided YAML editing features")
    (description
      "Documentation at https://melpa.org/#/yaml-pro")
    (license #f)))

(define-public emacs-yaml-tomato
  (package
    (name "emacs-yaml-tomato")
    (version "20151123.753")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/RadekMolenda/yaml-tomato.git")
               (commit
                 "f9df1c9bdfcec629b03031b2d2032f9dc533cb14")))
        (sha256
          (base32
            "1xgqqgg4q3hrhiap8gmr8iifdr1mg4dl0j236b6alhrgmykbhimy"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page "unspecified")
    (synopsis
      "copy or show the yaml path currently under cursor.")
    (description
      "Documentation at https://melpa.org/#/yaml-tomato")
    (license #f)))

(define-public emacs-yang-mode
  (package
    (name "emacs-yang-mode")
    (version "20190507.724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mbj4668/yang-mode.git")
               (commit
                 "4b4ab4d4a79d37d6c31c6ea7cccbc425e0b1eded")))
        (sha256
          (base32
            "0sqp8vwlymwl2dp6bh1gf8725j1fd9sqj4qfgva09rmkq8fdivfm"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "major mode for editing YANG files")
    (description
      "Documentation at https://melpa.org/#/yang-mode")
    (license #f)))

(define-public emacs-yankpad
  (package
    (name "emacs-yankpad")
    (version "20220201.2104")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Kungsgeten/yankpad.git")
               (commit
                 "927e6d26956ac7219b8a69d641acf486854fba16")))
        (sha256
          (base32
            "17zz614fy7r2azgqfwiyl9gr9y3fxls65b0nahdb5dlsr9gsjiw5"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/Kungsgeten/yankpad")
    (synopsis "Paste snippets from an org-mode file")
    (description
      "Documentation at https://melpa.org/#/yankpad")
    (license #f)))

(define-public emacs-yapfify
  (package
    (name "emacs-yapfify")
    (version "20210914.634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/JorisE/yapfify.git")
               (commit
                 "c9347e3b1dec5fc8d34883e206fcdc8500d22368")))
        (sha256
          (base32
            "0gkz4f0yfpfchh78v1c0plbjafag23y18gcg8a8rc5s21nqqhkj4"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/JorisE/yapfify")
    (synopsis
      "(automatically) format python buffers using YAPF.")
    (description
      "Documentation at https://melpa.org/#/yapfify")
    (license #f)))

(define-public emacs-yara-mode
  (package
    (name "emacs-yara-mode")
    (version "20220317.935")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/binjo/yara-mode.git")
               (commit
                 "4c959b300ce52665c92e04e524dda5ed051c34f3")))
        (sha256
          (base32
            "0kb2a4hcmaczn279hbgk0jv88hsjznv1kqpkgkadszd02q53n0cl"))))
    (build-system melpa-build-system)
    (home-page "not distributed yet")
    (synopsis
      "Major mode for editing yara rule file")
    (description
      "Documentation at https://melpa.org/#/yara-mode")
    (license #f)))

(define-public emacs-yard-mode
  (package
    (name "emacs-yard-mode")
    (version "20230505.1950")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pd/yard-mode.el.git")
               (commit
                 "de1701753a64544c3376b015805f3661136d8038")))
        (sha256
          (base32
            "1wjidxf9a2f84hz3y8xwdy1qrh6pwmma7a6xvdrm3q9gnji7lbls"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/pd/yard-mode.el")
    (synopsis "Minor mode for Ruby YARD comments")
    (description
      "Documentation at https://melpa.org/#/yard-mode")
    (license #f)))

(define-public emacs-yari
  (package
    (name "emacs-yari")
    (version "20151128.739")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/hron/yari.el.git")
               (commit
                 "a2cb9656ee5dfe1fc2ee3854f3079a1c8e85dbe9")))
        (sha256
          (base32
            "0w9a6j0ndpfwaz1g974vv5jqgbzxw26l19kq51j3ah73063cavpf"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis "Yet Another RI interface for Emacs")
    (description
      "Documentation at https://melpa.org/#/yari")
    (license #f)))

(define-public emacs-yarn-mode
  (package
    (name "emacs-yarn-mode")
    (version "20200208.2332")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/anachronic/yarn-mode.git")
               (commit
                 "8239d4dc7d8a52fa1e3fa81bd32c904a359fcfc1")))
        (sha256
          (base32
            "0pf98jkz8k4gyc650wwfhww6gli847hmxb8lrnmw50yb88dqa38f"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/anachronic/yarn-mode")
    (synopsis "Major mode for yarn.lock files.")
    (description
      "Documentation at https://melpa.org/#/yarn-mode")
    (license #f)))

(define-public emacs-yascroll
  (package
    (name "emacs-yascroll")
    (version "20220212.1742")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/yascroll.git")
               (commit
                 "b4669a6604a3093d3960c494874a7affc6b9c184")))
        (sha256
          (base32
            "0h8xb8wzb9mrkmv9b1i03fd0qxchb4y99riqkkdlbaqxqkgp3y65"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/emacsorphanage/yascroll")
    (synopsis "Yet Another Scroll Bar Mode")
    (description
      "Documentation at https://melpa.org/#/yascroll")
    (license #f)))

(define-public emacs-yasnippet
  (package
    (name "emacs-yasnippet")
    (version "20230914.1400")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/joaotavora/yasnippet.git")
               (commit
                 "52a1c5031912243c791c55e0fe345d04f219b507")))
        (sha256
          (base32
            "0gmkhv8slzshgn9bcamp49szf24nflqcfn8c1f9iff36vviyibgf"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files ("yasnippet.el" "snippets")))
    (home-page
      "http://github.com/joaotavora/yasnippet")
    (synopsis
      "Yet another snippet extension for Emacs")
    (description
      "Documentation at https://melpa.org/#/yasnippet")
    (license #f)))

(define-public emacs-yasnippet-capf
  (package
    (name "emacs-yasnippet-capf")
    (version "20231024.1604")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/elken/yasnippet-capf.git")
               (commit
                 "a0a6b1c2bb6decdad5cf9b74202f0042f494a6ab")))
        (sha256
          (base32
            "0fzkdl32cblv8rc25d76hq90m40kbkkswz6m8f4fx2m8rw2ysfr8"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (home-page
      "https://github.com/elken/yasnippet-capf")
    (synopsis
      "Yasnippet Completion At Point Function")
    (description
      "Documentation at https://melpa.org/#/yasnippet-capf")
    (license #f)))

(define-public emacs-yasnippet-lean
  (package
    (name "emacs-yasnippet-lean")
    (version "20220105.2251")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/leanprover-community/yasnippet-lean.git")
               (commit
                 "c75485757cc8675ad4f36c1eb028d9d54dc21733")))
        (sha256
          (base32
            "0lki128rgk5nshpqkz2mndwvzl4a62nammy0xrm4m84ya4vb9mwi"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("yasnippet-lean.el" "snippets")))
    (home-page
      "https://github.com/leanprover-community/yasnippet-lean")
    (synopsis
      "Collection of snippets for the Lean prover")
    (description
      "Documentation at https://melpa.org/#/yasnippet-lean")
    (license #f)))

(define-public emacs-yasnippet-snippets
  (package
    (name "emacs-yasnippet-snippets")
    (version "20230815.820")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/AndreaCrotti/yasnippet-snippets.git")
               (commit
                 "063f54cea33f59defe9123549bf55ca342457a1c")))
        (sha256
          (base32
            "0xnfy6ppnraxgj1kpq7kwyiyznih12xz0xvim6wz7bx9sjw31lch"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (arguments
      '(#:files ("*.el" "snippets" ".nosearch")))
    (home-page
      "https://github.com/AndreaCrotti/yasnippet-snippets")
    (synopsis "Collection of yasnippet snippets")
    (description
      "Documentation at https://melpa.org/#/yasnippet-snippets")
    (license #f)))

(define-public emacs-yatemplate
  (package
    (name "emacs-yatemplate")
    (version "20211115.1208")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mineo/yatemplate.git")
               (commit
                 "275745ce1482edc08efb0b7807bc86d832bcc734")))
        (sha256
          (base32
            "1dkxzvsmz193nwybi3wi00k0wwhkbpnj4yi7gxdrgix6kxbpjd9i"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-yasnippet))
    (home-page "https://github.com/mineo/yatemplate")
    (synopsis "File templates with yasnippet")
    (description
      "Documentation at https://melpa.org/#/yatemplate")
    (license #f)))

(define-public emacs-yatex
  (package
    (name "emacs-yatex")
    (version "20221225.512")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/yatex-"
               version
               ".tar"))
        (sha256
          (base32
            "0z0nsv3biban16gn0g44hybf48s6zq7p8zmk8nmn82v4cg559max"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Yet Another tex-mode for emacs //野鳥//")
    (description
      "Documentation at https://melpa.org/#/yatex")
    (license #f)))

(define-public emacs-yaxception
  (package
    (name "emacs-yaxception")
    (version "20150105.1540")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/aki2o/yaxception.git")
               (commit
                 "4e94cf3e0b9b5631b0e90eb4b7de597ee7185875")))
        (sha256
          (base32
            "0nqyn1b01v1qxv7rcf46qypca61lmpm8d7kqv63jazw3n05qdnj8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/aki2o/yaxception")
    (synopsis
      "Provide framework about exception like Java for Elisp")
    (description
      "Documentation at https://melpa.org/#/yaxception")
    (license #f)))

(define-public emacs-ycm
  (package
    (name "emacs-ycm")
    (version "20150822.1836")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/neuromage/ycm.el.git")
               (commit
                 "4da8a14abcd0f4fa3235042ade2e12b5068c0601")))
        (sha256
          (base32
            "0znchya89zzk30mwl4qfm0q9sfa5m3jspapb892ydj0mck5n4nyj"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("ycm.el")))
    (home-page "unspecified")
    (synopsis
      "Emacs client for the YouCompleteMe auto-completion server.")
    (description
      "Documentation at https://melpa.org/#/ycm")
    (license #f)))

(define-public emacs-ycmd
  (package
    (name "emacs-ycmd")
    (version "20190416.807")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abingham/emacs-ycmd.git")
               (commit
                 "c17ff9e0250a9b39d23af37015a2b300e2f36fed")))
        (sha256
          (base32
            "0amdz2ss953lm39yky1dv3zp20ig97mxsk7z81694bpxnhn4kxad"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-dash
            emacs-s
            emacs-deferred
            emacs-request
            emacs-request-deferred
            emacs-pkg-info))
    (arguments
      '(#:files
        ("ycmd.el" "ycmd-eldoc.el" "contrib/*.el")))
    (home-page
      "https://github.com/abingham/emacs-ycmd")
    (synopsis
      "emacs bindings to the ycmd completion server")
    (description
      "Documentation at https://melpa.org/#/ycmd")
    (license #f)))

(define-public emacs-ydk-mode
  (package
    (name "emacs-ydk-mode")
    (version "20170114.223")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jacksonrayhamilton/ydk-mode.git")
               (commit
                 "f3f125b29408e0b0a34fec27dcb7c02c5dbfd04e")))
        (sha256
          (base32
            "0ndmbswrv8vyw18zhbmjr11400l546zqaj7dzfvwb5rhdv2d0abi"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jacksonrayhamilton/ydk-mode")
    (synopsis
      "Language support for Yu-Gi-Oh! deck files")
    (description
      "Documentation at https://melpa.org/#/ydk-mode")
    (license #f)))

(define-public emacs-yeetube
  (package
    (name "emacs-yeetube")
    (version "20231017.634")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://git.thanosapollo.com/yeetube")
               (commit
                 "610609061226c38a68267172e8975d8df1a1848d")))
        (sha256
          (base32
            "05w33431dfr1ldcg3yq01qvz0alpv8q88r0dsb278qbwszw9cfz6"))))
    (build-system melpa-build-system)
    (home-page
      "https://git.thanosapollo.com/yeetube")
    (synopsis "YouTube Front End")
    (description
      "Documentation at https://melpa.org/#/yeetube")
    (license #f)))

(define-public emacs-yequake
  (package
    (name "emacs-yequake")
    (version "20200219.2323")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/alphapapa/yequake.git")
               (commit
                 "d18166e597414350117d0b82a29e509fc53c636d")))
        (sha256
          (base32
            "074wijjphnpch7bl3455apfkdv35b0iw4l4lzwj0jcxyfszviq9f"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page "http://github.com/alphapapa/yequake")
    (synopsis "Drop-down frames, like Yakuake")
    (description
      "Documentation at https://melpa.org/#/yequake")
    (license #f)))

(define-public emacs-yesql-ghosts
  (package
    (name "emacs-yesql-ghosts")
    (version "20150220.1237")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/magnars/yesql-ghosts.git")
               (commit
                 "8f1faf0137b85a5072d13e1240a463d9a35ce2bb")))
        (sha256
          (base32
            "1fyvvkx6pa41bcr9cyh4yclwdzc5bs742s9fxr6wb4a5scq3hg9m"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-s emacs-dash emacs-cider))
    (home-page "unspecified")
    (synopsis
      "Display ghostly yesql defqueries inline")
    (description
      "Documentation at https://melpa.org/#/yesql-ghosts")
    (license #f)))

(define-public emacs-yesterbox
  (package
    (name "emacs-yesterbox")
    (version "20200327.52")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sje30/yesterbox.git")
               (commit
                 "10591342f1759e25756f5865371a53c132d8b0a0")))
        (sha256
          (base32
            "0cd77m4zyqs74iz56l4h0k7ccxnxhis0247j4f5mf94s51fn1x7p"))))
    (build-system melpa-build-system)
    (home-page "http://github.com/sje30/yesterbox")
    (synopsis
      "Count number of inbox messages by day")
    (description
      "Documentation at https://melpa.org/#/yesterbox")
    (license #f)))

(define-public emacs-ynab
  (package
    (name "emacs-ynab")
    (version "20200607.2008")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/janders223/ynab.el.git")
               (commit
                 "2c6beb4d2c4996017f6b3c62c26db52a61e5c479")))
        (sha256
          (base32
            "07bb1hlya07p6s6ymjl3vfv99xln3vrp78h4sda5va52vj1935rs"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-ts))
    (home-page
      "https://github.com/janders223/ynab.el")
    (synopsis
      "Major mode for YNAB (you need a budget)")
    (description
      "Documentation at https://melpa.org/#/ynab")
    (license #f)))

(define-public emacs-yoficator
  (package
    (name "emacs-yoficator")
    (version "20190509.1620")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/alx.k/yoficator.git")
               (commit
                 "fa914f9648515bca54b5e558ca57d2b65fa57491")))
        (sha256
          (base32
            "0mgkwjprcj47zn8kd3ppqnbnmnn00cvnbs0r0h5951966vshh13f"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "yo.txt")))
    (home-page
      "https://gitlab.com/link2xt/yoficator")
    (synopsis "Interactively yoficate Russian texts")
    (description
      "Documentation at https://melpa.org/#/yoficator")
    (license #f)))

(define-public emacs-yoshi-theme
  (package
    (name "emacs-yoshi-theme")
    (version "20230801.1741")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ryuslash/yoshi-theme.git")
               (commit
                 "384fd8e70e8f7613dd1bdf6be11b61f258e9bef8")))
        (sha256
          (base32
            "1gpy01ikn7llbhkphlx7580z89i6mprj20kv328krjisnnxnhk4c"))))
    (build-system melpa-build-system)
    (home-page
      "http://projects.ryuslash.org/yoshi-theme/")
    (synopsis "Theme named after my cat")
    (description
      "Documentation at https://melpa.org/#/yoshi-theme")
    (license #f)))

(define-public emacs-youdao-dictionary
  (package
    (name "emacs-youdao-dictionary")
    (version "20231005.1920")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/xuchunyang/youdao-dictionary.el.git")
               (commit
                 "eae8efb1efd3fc82cfe87a357fe8f764116d94ef")))
        (sha256
          (base32
            "12hsi8n7mwmf81bl6kjnssdp09hnlhaggaj1g7jvs9y1x78jk6hd"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-popup
            emacs-pos-tip
            emacs-chinese-word-at-point
            emacs-names))
    (home-page
      "https://github.com/xuchunyang/youdao-dictionary.el")
    (synopsis
      "Youdao Dictionary interface for Emacs")
    (description
      "Documentation at https://melpa.org/#/youdao-dictionary")
    (license #f)))

(define-public emacs-youtube-sub-extractor
  (package
    (name "emacs-youtube-sub-extractor")
    (version "20221116.653")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/agzam/youtube-sub-extractor.el.git")
               (commit
                 "d69f732299fdf256504e15767c1d7e5de771220e")))
        (sha256
          (base32
            "1wnr7inr5g6q9q11mgsnqchssg2dpnpk1wrynngf9m6z6sg9bjs8"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/agzam/youtube-sub-extractor.el")
    (synopsis "Extract YouTube video subtitles")
    (description
      "Documentation at https://melpa.org/#/youtube-sub-extractor")
    (license #f)))

(define-public emacs-ytdious
  (package
    (name "emacs-ytdious")
    (version "20210228.2111")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/spiderbit/ytdious.git")
               (commit
                 "941460b51e43ef6764e15e2b9c4af54c3e56115f")))
        (sha256
          (base32
            "0ihqzxahqvk8jnn05k06lzhi6pd9c1a2q7qqybnmds85amkwmsad"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/spiderbit/ytdious")
    (synopsis
      "Query / Preview YouTube via Invidious")
    (description
      "Documentation at https://melpa.org/#/ytdious")
    (license #f)))

(define-public emacs-ytdl
  (package
    (name "emacs-ytdl")
    (version "20230331.1804")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/tuedachu/ytdl.git")
               (commit
                 "2ea3daf2f6aa9d18b71fe3e15f05c30a56fca228")))
        (sha256
          (base32
            "0y62lkgsg19j05dpd6sp6zify8vq8xvpc8caqiy4rwi7p4ahacsf"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-async emacs-dash))
    (home-page "https://gitlab.com/tuedachu/ytdl")
    (synopsis "Emacs Interface for youtube-dl")
    (description
      "Documentation at https://melpa.org/#/ytdl")
    (license #f)))

(define-public emacs-ytel
  (package
    (name "emacs-ytel")
    (version "20200725.1056")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grastello/ytel.git")
               (commit
                 "d40bc7ead8d4d7e4d16b03b66a93d63bef51cc5f")))
        (sha256
          (base32
            "0pxzfsxzrpv59dssrgx2mmwkm6rzk49ffjkgsa3wks7rdyfil3kf"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/grastello/ytel")
    (synopsis "Query YouTube via Invidious")
    (description
      "Documentation at https://melpa.org/#/ytel")
    (license #f)))

(define-public emacs-yuck-mode
  (package
    (name "emacs-yuck-mode")
    (version "20230113.2304")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mmcjimsey26/yuck-mode.git")
               (commit
                 "e084416fa3e7f91bb429edbf7ff1585aa5674367")))
        (sha256
          (base32
            "1ilwn7ml5wbwgwbhqp2nc0v9xvxrax5g3lvxajdjcpx5cipa601h"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/mmcjimsey26/yuck-mode")
    (synopsis
      "Major mode for the yuck configuration language")
    (description
      "Documentation at https://melpa.org/#/yuck-mode")
    (license #f)))

(define-public emacs-yul-mode
  (package
    (name "emacs-yul-mode")
    (version "20220927.338")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/taquangtrung/emacs-yul-mode.git")
               (commit
                 "56cba05549873fcf1b66e304969011dc1a1ad228")))
        (sha256
          (base32
            "1wkmi6xi81z3ff872lpz1cpqbw2sj2844kwzhqhvir4w2lqr4ab5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/taquangtrung/emacs-yul-mode")
    (synopsis
      "Major mode for editing Ethereum Yul intermediate code")
    (description
      "Documentation at https://melpa.org/#/yul-mode")
    (license #f)))

(define-public emacs-z3-mode
  (package
    (name "emacs-z3-mode")
    (version "20211116.138")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zv/z3-mode.git")
               (commit
                 "0356cbe1e1e2b780ba0ddb4aaa055fa246a67931")))
        (sha256
          (base32
            "0jlnxxzh9p7285m16w33l5529iglg5cihs6gqwnb6y34wpzwyar6"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-flycheck))
    (home-page "https://github.com/zv/z3-mode")
    (synopsis
      "A z3/SMTLIBv2 interactive development environment")
    (description
      "Documentation at https://melpa.org/#/z3-mode")
    (license #f)))

(define-public emacs-zeal-at-point
  (package
    (name "emacs-zeal-at-point")
    (version "20180131.2354")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/jinzhu/zeal-at-point.git")
               (commit
                 "0fc3263f44e95acd3e9d91057677621ce4d297ee")))
        (sha256
          (base32
            "0aq9w9pjyzdgf63hwffhph6k43vv3cxmffklrjkjj3hqv796k8yd"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jinzhu/zeal-at-point")
    (synopsis "Search the word at point with Zeal")
    (description
      "Documentation at https://melpa.org/#/zeal-at-point")
    (license #f)))

(define-public emacs-zen-and-art-theme
  (package
    (name "emacs-zen-and-art-theme")
    (version "20120622.1437")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/developernotes/zen-and-art-theme.git")
               (commit
                 "a7226cbce0bca2501d69a620cb2aeabfc396c232")))
        (sha256
          (base32
            "0dnaxhsw549k54j0mgydm7qbl4pizgipfyzc15f9afsxa107rpnl"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "zen and art color theme for GNU Emacs 24")
    (description
      "Documentation at https://melpa.org/#/zen-and-art-theme")
    (license #f)))

(define-public emacs-zen-mode
  (package
    (name "emacs-zen-mode")
    (version "20200609.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenlang/zen-mode.git")
               (commit
                 "c1b1806358f3cce6c04b30699987d82dc7d42559")))
        (sha256
          (base32
            "1ikny9lxvg8whcl2x0gmr31fdv93vwf53niqr11cx93bfsvs4a9z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/zenlang/zen-mode")
    (synopsis
      "A major mode for the Zen programming language")
    (description
      "Documentation at https://melpa.org/#/zen-mode")
    (license #f)))

(define-public emacs-zenburn-theme
  (package
    (name "emacs-zenburn-theme")
    (version "20230315.1004")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/bbatsov/zenburn-emacs.git")
               (commit
                 "8a1f9d28f503615e5d9b3eac59a2f3c14e75fc20")))
        (sha256
          (base32
            "00zyx2knfchxkml19kf4wfgigsbgzqf47mvbgrmk3nfznnnnyvmf"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/bbatsov/zenburn-emacs")
    (synopsis
      "A low contrast color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/zenburn-theme")
    (license #f)))

(define-public emacs-zencoding-mode
  (package
    (name "emacs-zencoding-mode")
    (version "20140213.822")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/rooney/zencoding.git")
               (commit
                 "58e42af182c98cb9941d27cd042d227fbf4e146c")))
        (sha256
          (base32
            "1y3wj15kfbgskl29glmba6lzq43rcm141p4i5s180aqcw7ydp5vr"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/rooney/zencoding")
    (synopsis
      "Unfold CSS-selector-like expressions to markup")
    (description
      "Documentation at https://melpa.org/#/zencoding-mode")
    (license #f)))

(define-public emacs-zenity-color-picker
  (package
    (name "emacs-zenity-color-picker")
    (version "20160302.1154")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://bitbucket.org/Soft/zenity-color-picker.el")
               (commit
                 "4f4f46676a461ebc881487fb70c8c181e323db5e")))
        (sha256
          (base32
            "14i2k52qz77dv04w39fyp9hfq983fwa3803anqragk608xgwpf4s"))))
    (build-system melpa-build-system)
    (home-page
      "https://bitbucket.org/Soft/zenity-color-picker.el")
    (synopsis
      "Insert and adjust colors using Zenity")
    (description
      "Documentation at https://melpa.org/#/zenity-color-picker")
    (license #f)))

(define-public emacs-zeno-theme
  (package
    (name "emacs-zeno-theme")
    (version "20211205.2148")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zenobht/zeno-theme.git")
               (commit
                 "70fa7b7442f24ea25eab538b5a22da690745fef5")))
        (sha256
          (base32
            "10v6yf9c5qdsxrp6rk1n1xkv4byyfkinsikskdb2apjg05cx2273"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/jbharat/zeno-theme")
    (synopsis
      "A dark theme using different shades of blue")
    (description
      "Documentation at https://melpa.org/#/zeno-theme")
    (license #f)))

(define-public emacs-zenscript-mode
  (package
    (name "emacs-zenscript-mode")
    (version "20210102.1350")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/eutro/zenscript-mode.git")
               (commit
                 "c33b4525502459fe60dd76b383e19919d450aeb8")))
        (sha256
          (base32
            "0v4limzd9d95wp7f32acln0h245d0zr88jb4a4szl053p6ynvbq0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/eutropius225/zenscript-mode")
    (synopsis "Major mode for ZenScript")
    (description
      "Documentation at https://melpa.org/#/zenscript-mode")
    (license #f)))

(define-public emacs-zephir-mode
  (package
    (name "emacs-zephir-mode")
    (version "20200417.830")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zephir-lang/zephir-mode.git")
               (commit
                 "4e9618b77dff67c1c7b6fff78605a62311db88b8")))
        (sha256
          (base32
            "0xqy1hifczqk8zr9kdyhiy4iawx28gahciz7vsgr92iky67v49fc"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-pkg-info))
    (home-page
      "https://github.com/zephir-lang/zephir-mode")
    (synopsis "Major mode for editing Zephir code")
    (description
      "Documentation at https://melpa.org/#/zephir-mode")
    (license #f)))

(define-public emacs-zero-input
  (package
    (name "emacs-zero-input")
    (version "20200405.1220")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.emacsos.com/sylecn/zero-el")
               (commit
                 "9e53c931d9f30ecd9541da4ca60c14ab9ce37d4d")))
        (sha256
          (base32
            "0spv1j12fbjc5m6jxn269zysiaphzb5gvxnxc10b4yjgyqsss12r"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (home-page
      "https://gitlab.emacsos.com/sylecn/zero-el")
    (synopsis "Zero Chinese input method framework")
    (description
      "Documentation at https://melpa.org/#/zero-input")
    (license #f)))

(define-public emacs-zerodark-theme
  (package
    (name "emacs-zerodark-theme")
    (version "20211115.841")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/NicolasPetton/zerodark-theme.git")
               (commit
                 "b463528704f6eb00684c0ee003fbd8e42901cde0")))
        (sha256
          (base32
            "1ajgz5mbvzv92p1g3k6p94v11z3xyj5w81fpfiwhlvh30imx6z9q"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-all-the-icons))
    (home-page
      "https://github.com/NicolasPetton/zerodark-theme")
    (synopsis
      "A dark, medium contrast theme for Emacs")
    (description
      "Documentation at https://melpa.org/#/zerodark-theme")
    (license #f)))

(define-public emacs-zetteldeft
  (package
    (name "emacs-zetteldeft")
    (version "20221006.731")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/EFLS/zetteldeft.git")
               (commit
                 "63be6478751376f04d36c6ea52fe65acd69f0927")))
        (sha256
          (base32
            "0sjzszdlw2mplfh0c9qgsc1hi95hwr420vwaz6gh5vbxcmfy4qzm"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-deft emacs-ace-window))
    (arguments
      '(#:files (:defaults "zetteldeft.org")))
    (home-page "https://efls.github.io/zetteldeft/")
    (synopsis "Turn deft into a zettelkasten system")
    (description
      "Documentation at https://melpa.org/#/zetteldeft")
    (license #f)))

(define-public emacs-zetteldesk
  (package
    (name "emacs-zetteldesk")
    (version "20230517.2020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Vidianos-Giannitsis/zetteldesk.el.git")
               (commit
                 "b6f92dcc43f1c080a92b5cc414374fca8e98a7c1")))
        (sha256
          (base32
            "1lqxzm9sb840cfnk4d16dd2jmfwv3fq2cd37y0l7c9idsifkvnza"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-org-roam))
    (arguments '(#:files ("zetteldesk.el")))
    (home-page
      "https://github.com/Vidianos-Giannitsis/zetteldesk.el")
    (synopsis
      "A revision and outlining tool for org-roam")
    (description
      "Documentation at https://melpa.org/#/zetteldesk")
    (license #f)))

(define-public emacs-zetteldesk-info
  (package
    (name "emacs-zetteldesk-info")
    (version "20230517.2020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Vidianos-Giannitsis/zetteldesk.el.git")
               (commit
                 "b6f92dcc43f1c080a92b5cc414374fca8e98a7c1")))
        (sha256
          (base32
            "1lqxzm9sb840cfnk4d16dd2jmfwv3fq2cd37y0l7c9idsifkvnza"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-zetteldesk))
    (arguments '(#:files ("zetteldesk-info.el")))
    (home-page
      "https://github.com/Vidianos-Giannitsis/zetteldesk-info.el")
    (synopsis
      "A zetteldesk extension for interacting with the info program")
    (description
      "Documentation at https://melpa.org/#/zetteldesk-info")
    (license #f)))

(define-public emacs-zetteldesk-kb
  (package
    (name "emacs-zetteldesk-kb")
    (version "20230517.2020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Vidianos-Giannitsis/zetteldesk.el.git")
               (commit
                 "b6f92dcc43f1c080a92b5cc414374fca8e98a7c1")))
        (sha256
          (base32
            "1lqxzm9sb840cfnk4d16dd2jmfwv3fq2cd37y0l7c9idsifkvnza"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zetteldesk
            emacs-hydra
            emacs-major-mode-hydra))
    (arguments '(#:files ("zetteldesk-kb.el")))
    (home-page
      "https://github.com/Vidianos-Giannitsis/zetteldesk-kb.el")
    (synopsis "Keybindings for zetteldesk.el")
    (description
      "Documentation at https://melpa.org/#/zetteldesk-kb")
    (license #f)))

(define-public emacs-zetteldesk-ref
  (package
    (name "emacs-zetteldesk-ref")
    (version "20230517.2020")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/Vidianos-Giannitsis/zetteldesk.el.git")
               (commit
                 "b6f92dcc43f1c080a92b5cc414374fca8e98a7c1")))
        (sha256
          (base32
            "1lqxzm9sb840cfnk4d16dd2jmfwv3fq2cd37y0l7c9idsifkvnza"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zetteldesk emacs-bibtex-completion))
    (arguments '(#:files ("zetteldesk-ref.el")))
    (home-page
      "https://github.com/Vidianos-Giannitsis/zetteldesk-ref.el")
    (synopsis
      "A zetteldesk extension for interfacing with literature nodes")
    (description
      "Documentation at https://melpa.org/#/zetteldesk-ref")
    (license #f)))

(define-public emacs-zettelkasten
  (package
    (name "emacs-zettelkasten")
    (version "20230108.1724")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ymherklotz/emacs-zettelkasten.git")
               (commit
                 "cc4d69c302a46b8f802a1871aae091df1f3398ba")))
        (sha256
          (base32
            "16an3pym99r0w6810zw1m1jydb7zvk01mw55zxl64kjc37zdlckr"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-s))
    (arguments '(#:files ("zettelkasten.el")))
    (home-page
      "https://github.com/ymherklotz/emacs-zettelkasten")
    (synopsis
      "Helper functions to organise notes in a Zettelkasten style")
    (description
      "Documentation at https://melpa.org/#/zettelkasten")
    (license #f)))

(define-public emacs-zetz-mode
  (package
    (name "emacs-zetz-mode")
    (version "20200823.536")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/damon-kwok/zetz-mode.git")
               (commit
                 "04da33f4ffa9db5b3556f423276f4fd1db13ec67")))
        (sha256
          (base32
            "13xfz5lsx9irl6l9l3qvymh875nab4vmlx2m563kphqy18j1j332"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash emacs-hydra))
    (arguments '(#:files (:defaults "etc")))
    (home-page
      "https://github.com/damon-kwok/zetz-mode")
    (synopsis
      "A major mode for the ZetZ programming language")
    (description
      "Documentation at https://melpa.org/#/zetz-mode")
    (license #f)))

(define-public emacs-zig-mode
  (package
    (name "emacs-zig-mode")
    (version "20230815.2033")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ziglang/zig-mode.git")
               (commit
                 "079149a19fc869343130e69d7b944afd3a1813cc")))
        (sha256
          (base32
            "1r8mysp3q4zj9mm1hxj00vnycasi0hlmdgqqjl540jcyn86jqw9a"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "https://github.com/zig-lang/zig-mode")
    (synopsis
      "A major mode for the Zig programming language")
    (description
      "Documentation at https://melpa.org/#/zig-mode")
    (license #f)))

(define-public emacs-zim-wiki-mode
  (package
    (name "emacs-zim-wiki-mode")
    (version "20230927.1410")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/WillForan/zim-wiki-mode.git")
               (commit
                 "7c62e0304750654709b4173bcc1e2681cf1fbe49")))
        (sha256
          (base32
            "1vfc48vz0ajcqcdx89wrwd3ksncwjlvi1via681d88y9in9bpbv4"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-helm-ag
            emacs-helm-projectile
            emacs-dokuwiki-mode
            emacs-link-hint
            emacs-pretty-hydra))
    (home-page
      "https://github.com/WillForan/zim-wiki-mode")
    (synopsis "Zim Desktop Wiki edit mode")
    (description
      "Documentation at https://melpa.org/#/zim-wiki-mode")
    (license #f)))

(define-public emacs-zimports
  (package
    (name "emacs-zimports")
    (version "20211011.2059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/schmir/zimports.el.git")
               (commit
                 "76cf76bdc871cb0454a6fc555aeb1aa94f1b6e57")))
        (sha256
          (base32
            "1vx4j9n5q4gmc63lk1l4gbz5j5qn2423cyfibqcbynkkbwgas11z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-projectile))
    (home-page
      "https://github.com/schmir/zimports.el")
    (synopsis
      "Reformat python imports with zimports")
    (description
      "Documentation at https://melpa.org/#/zimports")
    (license #f)))

(define-public emacs-zk
  (package
    (name "emacs-zk")
    (version "20230821.2127")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/localauthor/zk.git")
               (commit
                 "b60db1e34ee0f10efdb233a78ae19c916131c41a")))
        (sha256
          (base32
            "1p5g35l2imcxb47627gyvcrh2icqw4hzn1mq90kr5sna49310y3n"))))
    (build-system melpa-build-system)
    (arguments '(#:files ("zk.el")))
    (home-page "https://github.com/localauthor/zk")
    (synopsis
      "Functions for working with Zettelkasten-style linked notes")
    (description
      "Documentation at https://melpa.org/#/zk")
    (license #f)))

(define-public emacs-zk-desktop
  (package
    (name "emacs-zk-desktop")
    (version "20230712.1103")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/localauthor/zk.git")
               (commit
                 "5be59ca972f3f624d444b7b7d7ca75a06bcd2ce5")))
        (sha256
          (base32
            "0hijdi10l44ky8j66qz6bxmg1vnfhikkd65iqfb3ycg1kwzd4r9p"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zk emacs-zk-index))
    (arguments '(#:files ("zk-desktop.el")))
    (home-page "https://github.com/localauthor/zk")
    (synopsis "Desktop environment for zk")
    (description
      "Documentation at https://melpa.org/#/zk-desktop")
    (license #f)))

(define-public emacs-zk-index
  (package
    (name "emacs-zk-index")
    (version "20230930.1422")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/localauthor/zk.git")
               (commit
                 "afb7c078863b1b7e631019647d53d37f59a1554a")))
        (sha256
          (base32
            "1sfa864gkw13mbk6wjpys65r7rl7a58xj3qz39gn99cmp7a3v98z"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-zk))
    (arguments '(#:files ("zk-index.el")))
    (home-page "https://github.com/localauthor/zk")
    (synopsis "Index for zk")
    (description
      "Documentation at https://melpa.org/#/zk-index")
    (license #f)))

(define-public emacs-zk-luhmann
  (package
    (name "emacs-zk-luhmann")
    (version "20231009.1303")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/localauthor/zk-luhmann.git")
               (commit
                 "e2af1477e5fc59cd4499eede991114561d8a7a37")))
        (sha256
          (base32
            "1apr9mvb5hsdw59f7dn3gmg9jxn3v3433wxrvkcv02ndp81vngn5"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-zk emacs-zk-index))
    (home-page
      "https://github.com/localauthor/zk-luhmann")
    (synopsis "Support for Luhmann-style IDs in zk")
    (description
      "Documentation at https://melpa.org/#/zk-luhmann")
    (license #f)))

(define-public emacs-zlc
  (package
    (name "emacs-zlc")
    (version "20151011.157")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mooz/emacs-zlc.git")
               (commit
                 "4dd2ba267ecdeac845a7cbb3147294ee7daa25f4")))
        (sha256
          (base32
            "1gb51bqdf87yibs1zngk6q090p05293cpwlwbwzhnih9sl6wkq8x"))))
    (build-system melpa-build-system)
    (home-page "unspecified")
    (synopsis
      "Provides zsh like completion system to Emacs")
    (description
      "Documentation at https://melpa.org/#/zlc")
    (license #f)))

(define-public emacs-zmq
  (package
    (name "emacs-zmq")
    (version "20230608.1856")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/nnicandro/emacs-zmq.git")
               (commit
                 "9d5679c54f361f518a426586b51686674fd3b0fa")))
        (sha256
          (base32
            "1bg4c26f8n1jy6z9dr2c9fz79myy9lbb5z67797qp1cbx8k6p3n7"))))
    (build-system melpa-build-system)
    (arguments
      '(#:files (:defaults "Makefile" "src")))
    (home-page
      "https://github.com/nnicandro/emacs-zmq")
    (synopsis "ZMQ bindings in elisp")
    (description
      "Documentation at https://melpa.org/#/zmq")
    (license #f)))

(define-public emacs-znc
  (package
    (name "emacs-znc")
    (version "20210803.159")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/sshirokov/ZNC.el.git")
               (commit
                 "6f0949c393b7778a96033716787d152ada32f705")))
        (sha256
          (base32
            "0mfx69xgnwhaaj0gq4nrq7j8c0l3i6y4w7nxkjcqq6jg7zbkppai"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/sshirokov/ZNC.el")
    (synopsis "ZNC + ERC")
    (description
      "Documentation at https://melpa.org/#/znc")
    (license #f)))

(define-public emacs-zombie
  (package
    (name "emacs-zombie")
    (version "20141222.1616")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/zk-phi/zombie.git")
               (commit
                 "ff8cd1b4cdbb4b0b9b8fd1ec8f6fb93eba249345")))
        (sha256
          (base32
            "1gm3ly6czbw4vrxcslm50jy6nxf2qsl656cjwbyhw251wppn75cg"))))
    (build-system melpa-build-system)
    (home-page "http://hins11.yu-yake.com/")
    (synopsis
      "major mode for editing ZOMBIE programs")
    (description
      "Documentation at https://melpa.org/#/zombie")
    (license #f)))

(define-public emacs-zombie-trellys-mode
  (package
    (name "emacs-zombie-trellys-mode")
    (version "20150304.1702")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/david-christiansen/zombie-trellys-mode.git")
               (commit
                 "7f0c45fdda3a44c3b6d1762d116abb1421b8fba2")))
        (sha256
          (base32
            "04m53hzk5n9vxh0gxi8jzpdhsdjlxnvz7hmsisr3bs99v603ha01"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-haskell-mode))
    (home-page "unspecified")
    (synopsis
      "A minor mode for interaction with Zombie Trellys")
    (description
      "Documentation at https://melpa.org/#/zombie-trellys-mode")
    (license #f)))

(define-public emacs-zone-nyan
  (package
    (name "emacs-zone-nyan")
    (version "20210508.1642")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/zone-nyan-"
               version
               ".el"))
        (sha256
          (base32
            "04kqrfg6rp01vpjc9l28h7mw0z0ykl4dzqaj8px2xdvglx8lbdqx"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-esxml))
    (home-page "https://depp.brause.cc/zone-nyan")
    (synopsis "Zone out with nyan cat")
    (description
      "Documentation at https://melpa.org/#/zone-nyan")
    (license #f)))

(define-public emacs-zone-rainbow
  (package
    (name "emacs-zone-rainbow")
    (version "20160120.1334")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-rainbow.git")
               (commit
                 "2ba4f1a87c69c4712124ebf12c1f3ea171e1af36")))
        (sha256
          (base32
            "0w550l9im3mhxhja1b7cr9phdcbvx5lprw551lj0d1lv7qvjasz0"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/kawabata/zone-rainbow")
    (synopsis "Zone out with rainbow.")
    (description
      "Documentation at https://melpa.org/#/zone-rainbow")
    (license #f)))

(define-public emacs-zone-select
  (package
    (name "emacs-zone-select")
    (version "20160118.1419")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-select.git")
               (commit
                 "bf30da12f1625fe6563448fccf3c506acad10af7")))
        (sha256
          (base32
            "17mrzf85ym0x5ih4l6sjdjlcmviabf8c8rpvpkd90gp9qxd8pyx1"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-dash))
    (home-page
      "https://github.com/kawabata/zone-select")
    (synopsis "Select zone programs.")
    (description
      "Documentation at https://melpa.org/#/zone-select")
    (license #f)))

(define-public emacs-zone-sl
  (package
    (name "emacs-zone-sl")
    (version "20160201.1210")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/kawabata/zone-sl.git")
               (commit
                 "7ec22e3661c6348382f9fc39a9d0063dbd2352ff")))
        (sha256
          (base32
            "0m1q45pza61j0fp8cxkgmds5fyjrk0nqpwhg8m91610m3pvyc3ap"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/kawabata/zone-sl")
    (synopsis "Zone out with steam locomotives.")
    (description
      "Documentation at https://melpa.org/#/zone-sl")
    (license #f)))

(define-public emacs-zone-tmux-clock
  (package
    (name "emacs-zone-tmux-clock")
    (version "20230507.2043")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/zone-tmux-clock-"
               version
               ".tar"))
        (sha256
          (base32
            "1ajvd8lazpbh31y5zlcsj9xv39cy31mipyv7jf004xbsd5qr3hwl"))))
    (build-system melpa-build-system)
    (home-page
      "https://depp.brause.cc/zone-tmux-clock")
    (synopsis "Zone out with a tmux style clock")
    (description
      "Documentation at https://melpa.org/#/zone-tmux-clock")
    (license #f)))

(define-public emacs-zoom
  (package
    (name "emacs-zoom")
    (version "20220411.1126")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/cyrus-and/zoom.git")
               (commit
                 "2104abb074682db79b9ff3a748e8e2e760a4d8cf")))
        (sha256
          (base32
            "0wp7a1ibyqll8rpirsiazpf51lnd0q3yrya9pqvlx9ik5r41jp2m"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/cyrus-and/zoom")
    (synopsis
      "Fixed and automatic balanced window layout")
    (description
      "Documentation at https://melpa.org/#/zoom")
    (license #f)))

(define-public emacs-zoom-window
  (package
    (name "emacs-zoom-window")
    (version "20221228.407")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/emacsorphanage/zoom-window.git")
               (commit
                 "093dd7a5d60141812762eba40b021c76ff41f83d")))
        (sha256
          (base32
            "0i3ch9r8rnk3j6qzfnhj5svdqyas1j85aggn0way6ra3png4r40d"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/syohex/emacs-zoom-window")
    (synopsis "Zoom window like tmux")
    (description
      "Documentation at https://melpa.org/#/zoom-window")
    (license #f)))

(define-public emacs-zop-to-char
  (package
    (name "emacs-zop-to-char")
    (version "20160212.1554")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/thierryvolpiatto/zop-to-char.git")
               (commit
                 "00152aa666354b27e56e20565f186b363afa0dce")))
        (sha256
          (base32
            "1s4adi9hyhxn7ynx195mgg10h817hxdmlzlp09633bj0llr1mjn3"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/thierryvolpiatto/zop-to-char")
    (synopsis "A replacement of zap-to-char.")
    (description
      "Documentation at https://melpa.org/#/zop-to-char")
    (license #f)))

(define-public emacs-zotelo
  (package
    (name "emacs-zotelo")
    (version "20160602.949")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/vspinu/zotelo.git")
               (commit
                 "d9dc089b9adfcc70a63f2a84269a12eb7cb4c748")))
        (sha256
          (base32
            "1gff44nwiqhqhppwmsn38njkph4g9bw669p95m8p2avb7x7kiybl"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/vitoshka/zotelo")
    (synopsis "Manage Zotero collections from emacs")
    (description
      "Documentation at https://melpa.org/#/zotelo")
    (license #f)))

(define-public emacs-zotero
  (package
    (name "emacs-zotero")
    (version "20211008.2207")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/fvdbeek/emacs-zotero.git")
               (commit
                 "811bd1f14b38c3dde3f80cd8a13490c9900de888")))
        (sha256
          (base32
            "0gh04kbg109038xxcrzhjffqrfcxx7vbz0dz2idglcmbqpg7lzjq"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-ht emacs-oauth emacs-s))
    (arguments '(#:files (:defaults "img")))
    (home-page
      "https://gitlab.com/fvdbeek/emacs-zotero")
    (synopsis "Library for the Zotero API")
    (description
      "Documentation at https://melpa.org/#/zotero")
    (license #f)))

(define-public emacs-zotra
  (package
    (name "emacs-zotra")
    (version "20231014.2139")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mpedramfar/zotra.git")
               (commit
                 "fe9093b226a1678fc6c2fadd31a09d5a22ecdcf1")))
        (sha256
          (base32
            "04a7h183kbl8nfkhn2386yljmv7hgxg0cdyw1ir3x60i3nji179z"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/mpedramfar/zotra")
    (synopsis
      "Import bibliographic data from (almost) everywhere")
    (description
      "Documentation at https://melpa.org/#/zotra")
    (license #f)))

(define-public emacs-zotxt
  (package
    (name "emacs-zotxt")
    (version "20210908.402")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://gitlab.com/egh/zotxt-emacs.git")
               (commit
                 "96a132d6b39f6bc19a58913b761d42efc198f8a4")))
        (sha256
          (base32
            "1qwn5ym2ljzbliy1qbafm3wzh8ayl177m3z2fvj2fy3cg9smi3bv"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-request emacs-deferred))
    (home-page "unspecified")
    (synopsis
      "Tools to integrate emacs with Zotero via the zotxt plugin.")
    (description
      "Documentation at https://melpa.org/#/zotxt")
    (license #f)))

(define-public emacs-zoutline
  (package
    (name "emacs-zoutline")
    (version "20220102.835")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/abo-abo/zoutline.git")
               (commit
                 "32857c6c4b9b0bcbed14d825a10b91a98d5fed0a")))
        (sha256
          (base32
            "02xlyz3zbrzskfgrkn4f781l7dic7gd869sf7asxvcxv0pv058q8"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/abo-abo/zoutline")
    (synopsis "Simple outline library.")
    (description
      "Documentation at https://melpa.org/#/zoutline")
    (license #f)))

(define-public emacs-zoxide
  (package
    (name "emacs-zoxide")
    (version "20230912.2359")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/zoxide-"
               version
               ".tar"))
        (sha256
          (base32
            "1r13425hcnwiqmk620vnng2dyv53r9981h8fhcqq6zkqrljg8xxs"))))
    (build-system melpa-build-system)
    (home-page "https://gitlab.com/Vonfry/zoxide.el")
    (synopsis "Find file by zoxide")
    (description
      "Documentation at https://melpa.org/#/zoxide")
    (license #f)))

(define-public emacs-zpl-mode
  (package
    (name "emacs-zpl-mode")
    (version "20180906.1059")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/ax487/zpl-mode.git")
               (commit
                 "35e7e23c6baf31b5e65dd7405c8ab9b13c70637e")))
        (sha256
          (base32
            "147d7ylpk77zcsjim0my6cbyms28yd7mfaigmzm009jc1bn4r7f5"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/ax487/zpl-mode.git")
    (synopsis "ZIMPL major mode")
    (description
      "Documentation at https://melpa.org/#/zpl-mode")
    (license #f)))

(define-public emacs-zpresent
  (package
    (name "emacs-zpresent")
    (version "20201207.732")
    (source
      (origin
        (method url-fetch)
        (uri (string-append
               "https://melpa.org/packages/zpresent-"
               version
               ".tar"))
        (sha256
          (base32
            "1mc401cwii7v7xiana2swgvggf96n391irbax42vs2qv2191dlhk"))))
    (build-system melpa-build-system)
    (propagated-inputs
      (list emacs-org-parser emacs-dash emacs-request))
    (home-page "https://hg.sr.ht/~zck/zpresent")
    (synopsis
      "Simple presentation mode based on org files.")
    (description
      "Documentation at https://melpa.org/#/zpresent")
    (license #f)))

(define-public emacs-zprint-format
  (package
    (name "emacs-zprint-format")
    (version "20210602.146")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/dpassen/zprint-format.git")
               (commit
                 "6051a5709ea6182974d7239f26e04c9731e04447")))
        (sha256
          (base32
            "1in5cyrj0kn1fdfcw7iaxhsxx5hn3r3r0aiida8p9dvkx8kq540l"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-reformatter))
    (home-page
      "http://www.github.com/dpassen/zprint-format")
    (synopsis "Reformat Clojure code using zprint")
    (description
      "Documentation at https://melpa.org/#/zprint-format")
    (license #f)))

(define-public emacs-zprint-mode
  (package
    (name "emacs-zprint-mode")
    (version "20200731.1238")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pesterhazy/zprint-mode.el.git")
               (commit
                 "b9b72b4918156f2f44aa544be9e19ea391937c2a")))
        (sha256
          (base32
            "1jvk8g8qc83y6pmklk403mikl6q3s6gls60fyw07p8f3kvhgfxzi"))))
    (build-system melpa-build-system)
    (arguments '(#:files (:defaults "bin")))
    (home-page
      "https://github.com/pesterhazy/zprint-mode.el")
    (synopsis
      "Reformat Clojure(Script) code using zprint")
    (description
      "Documentation at https://melpa.org/#/zprint-mode")
    (license #f)))

(define-public emacs-ztree
  (package
    (name "emacs-ztree")
    (version "20210415.1947")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/fourier/ztree.git")
               (commit
                 "f05677f9696e573c8c607e8876fb4a0cccbc491f")))
        (sha256
          (base32
            "1kav7xiarm0dgvgxf49qqcy2jp388b51x3qb92dyd3i73n6bk09j"))))
    (build-system melpa-build-system)
    (home-page "https://github.com/fourier/ztree")
    (synopsis "Text mode directory tree")
    (description
      "Documentation at https://melpa.org/#/ztree")
    (license #f)))

(define-public emacs-zweilight-theme
  (package
    (name "emacs-zweilight-theme")
    (version "20170113.605")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/philiparvidsson/Zweilight-Theme-for-Emacs.git")
               (commit
                 "7f45ab9e23164d65538edb2beb9692ecdc24c31e")))
        (sha256
          (base32
            "142ixk47a1x6xz8ibavzq7jxppjc2qvfwbly4sdyiwfpznbi4l3a"))))
    (build-system melpa-build-system)
    (home-page
      "http://github.com/philiparvidsson/zweilight-emacs")
    (synopsis "A dark color theme for Emacs.")
    (description
      "Documentation at https://melpa.org/#/zweilight-theme")
    (license #f)))

(define-public emacs-zygospore
  (package
    (name "emacs-zygospore")
    (version "20140703.852")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/LouisKottmann/zygospore.el.git")
               (commit
                 "1af5ee663f5a7aa08d96a77cacff834dcdf55ea8")))
        (sha256
          (base32
            "0v73fgb0gf81vlihiicy32v6x86rr2hv0bxlpw7d3pk4ng1a0l3z"))))
    (build-system melpa-build-system)
    (home-page
      "https://github.com/louiskottmann/zygospore.el")
    (synopsis
      "reversible C-x 1 (delete-other-windows)")
    (description
      "Documentation at https://melpa.org/#/zygospore")
    (license #f)))

(define-public emacs-zzz-to-char
  (package
    (name "emacs-zzz-to-char")
    (version "20230704.1306")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/mrkkrp/zzz-to-char.git")
               (commit
                 "5945432d74feb2d1cd3520b185b3ab5dca35e0eb")))
        (sha256
          (base32
            "00kilm0m3v6rwbynf7y23011ac0s6jdh2xf71wzrp1577k4v9s5p"))))
    (build-system melpa-build-system)
    (propagated-inputs (list emacs-avy))
    (home-page
      "https://github.com/mrkkrp/zzz-to-char")
    (synopsis
      "Fancy version of `zap-to-char' command")
    (description
      "Documentation at https://melpa.org/#/zzz-to-char")
    (license #f)))

(use-modules (emacs build-system melpa)
             ((gnu packages emacs-xyz) #:prefix e/)
             (gnu packages gnupg)
             (gnu packages sqlite)
             (guix build-system gnu)
             (guix packages)
             (guix utils)
             (srfi srfi-1))

(define-syntax define-override
  (syntax-rules ()
    ((_ name var exp)
     (let ((var name))
       (set! name exp)))))

(define-override emacs-emacsql-sqlite pkg
  (package
    (inherit pkg)
    (arguments
     `(,@(package-arguments pkg)
       #:modules ((emacs build melpa-build-system)
                  (guix build utils)
                  (guix build emacs-utils)
                  (srfi srfi-26))
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'patch-elisp-shell-shebangs
           (lambda _
             (substitute* (find-files "." "\\.el")
               (("/bin/sh") (which "sh")))))
         (add-after 'patch-elisp-shell-shebangs 'setenv-shell
           (lambda _
             (setenv "SHELL" "sh")))
         (add-after 'setenv-shell 'build-emacsql-sqlite
           (lambda _
             (invoke "make" "binary" (string-append "CC=" ,(cc-for-target)))))
         (add-after 'build-emacsql-sqlite 'install-emacsql-sqlite
           ;; This build phase installs emacs-emacsql binary.
           (lambda* (#:key outputs #:allow-other-keys)
             (install-file "sqlite/emacsql-sqlite"
                           (string-append (assoc-ref outputs "out") "/bin"))))
         (add-after 'install-emacsql-sqlite 'patch-emacsql-sqlite.el
           ;; This build phase removes interactive prompts
           ;; and makes sure Emacs look for binaries in the right places.
           (lambda* (#:key outputs #:allow-other-keys)
             (let ((file "emacsql-sqlite.el"))
               (chmod file #o644)
               (emacs-substitute-sexps file
                 ;; Make sure Emacs looks for ‘GCC’ binary in the right place.
                 ("(executable-find" (which "gcc"))
                 ;; Make sure Emacs looks for ‘emacsql-sqlite’ binary
                 ;; in the right place.
                 ("(defvar emacsql-sqlite-executable-path"
                  (string-append (assoc-ref outputs "out")
                                 "/bin/emacsql-sqlite")))))))))
    (inputs (package-inputs e/emacs-emacsql))))


(define-override emacs-vterm pkg
  (package
   (inherit pkg)
   (arguments
    `(#:modules ((emacs build melpa-build-system)
                 ((guix build cmake-build-system) #:prefix cmake:)
                 (guix build emacs-utils)
                 (guix build utils))
      #:imported-modules (,@%melpa-build-system-modules
                          (guix build cmake-build-system))
      #:phases
      (modify-phases %standard-phases
                     (add-after 'unpack 'substitute-vterm-module-path
                                (lambda* (#:key outputs #:allow-other-keys)
                                  (chmod "vterm.el" #o644)
                                  (emacs-substitute-sexps "vterm.el"
                                                          ("(require 'vterm-module nil t)"
                                                           `(module-load
                                                             ,(string-append (assoc-ref outputs "out")
                                                                             "/lib/vterm-module.so"))))))
                     (add-after 'build 'configure
                                ;; Run cmake.
                                (lambda* (#:key outputs #:allow-other-keys)
                                  ((assoc-ref cmake:%standard-phases 'configure)
                                   #:outputs outputs
                                   #:out-of-source? #f
                                   #:configure-flags '("-DUSE_SYSTEM_LIBVTERM=ON"))))
                     (add-after 'configure 'make
                                ;; Run make.
                                (lambda* (#:key (make-flags '()) outputs #:allow-other-keys)
                                  ;; Compile the shared object file.
                                  (apply invoke "make" "all" make-flags)
                                  ;; Move the file into /lib.
                                  (install-file
                                   "vterm-module.so"
                                   (string-append (assoc-ref outputs "out") "/lib")))))
      #:tests? #f))
   (native-inputs
    (package-native-inputs e/emacs-vterm))))

(define-override emacs-geiser pkg
  (package
    (inherit pkg)
    (native-inputs (package-native-inputs e/emacs-geiser))
    (arguments
     `(,@(package-arguments pkg)
       #:phases
       (modify-phases %standard-phases
         (add-before 'install 'make-info
           (lambda* (#:key outputs #:allow-other-keys)
             (with-directory-excursion "doc"
               (invoke "makeinfo" "--no-split"
                       "-o" "geiser.info" "geiser.texi")
               (install-file "geiser.info" (string-append (assoc-ref outputs "out") "/share/info"))))))))))

(define-override emacs-geiser-guile pkg
  (package
    (inherit pkg)
    (inputs (package-inputs e/emacs-geiser-guile))))

(define-override emacs-guix pkg
  (package
    (inherit pkg)
    (build-system gnu-build-system)
    (arguments (package-arguments e/emacs-guix))
    (native-inputs (package-native-inputs e/emacs-guix))
    (inputs (package-inputs e/emacs-guix))
    (propagated-inputs
     (list emacs-dash
           emacs-geiser
           emacs-geiser-guile
           emacs-bui
           emacs-magit-popup
           emacs-edit-indirect
           emacs-transient))))

;; Local Variables:
;; mode: scheme
;; End:
